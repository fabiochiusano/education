{"title_html": "<h1>Memcached - Quick Guide</h1>", "content": "\n Memcached - Quick Guide \n  \n Advertisements \n \n<!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//-->\n\n\n \n  \n \n Previous Page\n \n \nNext Page \u00a0\n \n  \n  \n Memcached - Overview \n Memcached is an open source, high-performance, distributed memory caching system intended to speed up dynamic web applications by reducing the database load. It is a key-value dictionary of strings, objects, etc., stored in the memory, resulting from database calls, API calls, or page rendering. \n Memcached was developed by Brad Fitzpatrick for LiveJournal in 2003. However, it is now being used by Netlog, Facebook, Flickr, Wikipedia, Twitter, and YouTube among others. \n The key features of Memcached are as follows \u2212 \n \nIt is open source.\nMemcached server is a big hash table.\nIt significantly reduces the database load\nIt is perfectly efficient for websites with high database load.\nIt is distributed under Berkeley Software Distribution (BSD) license.\nIt is a client-server application over TCP or UDP.\n \n Memcached is not \u2212 \n \na persistent data store\na database\napplication-specific\na large object cache\nfault-tolerant or highly available\n \n Memcached - Environment \n Installing Memcached on Ubuntu \n To install Memcached on Ubuntu, go to terminal and type the following commands \u2212 \n \n$sudo apt-get update\n$sudo apt-get install memcached\n \n Confirming Memcached Installation \n To confirm if Memcached is installed or not, you need to run the command given below. This command shows that Memcached is running on the default port 11211. \n \n$ps aux | grep memcached\n \n To run Memcached server on a different port, execute the command given below. This command starts the server on the TCP port 11111 and listens on the UDP port 11111 as a daemon process. \n \n$memcached -p 11111 -U 11111 -u user -d\n \n You can run multiple instances of Memcached server through a single installation. \n Memcached Java Environment Setup \n To use Memcached in your Java program, you need to download spymemcached-2.10.3.jar and setup this jar into the classpath. \n Memcached - Connection \n To connect to a Memcached server, you need to use the telnet command on HOST and PORT names. \n Syntax \n The basic syntax of Memcached telnet command is as shown below \u2212 \n \n$telnet HOST PORT\n \n Here, HOST and PORT are machine IP and port number respectively, on which the Memcached server is executing. \n Example \n The following example shows how to connect to a Memcached server and execute a simple set and get command. Assume that the Memcached server is running on host 127.0.0.1 and port 11211. \n \n$telnet 127.0.0.1 11211\nTrying 127.0.0.1...\nConnected to 127.0.0.1.\nEscape character is '^]'.\n// now store some data and get it from memcached server\nset tutorialspoint 0 900 9\nmemcached\nSTORED\nget tutorialspoint\nVALUE tutorialspoint 0 9\nmemcached\nEND\n \n Connection from Java Application \n To connect the Memcached server from your java program, you need to add the Memcached jar into your classpath as shown in the previous chapter. Assume that the Memcached server is running on host 127.0.0.1 and port 11211. \u2212 \n Example \n \nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      \n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server sucessfully\");\n      \n      //not set data into memcached server\n      System.out.println(\"set status:\"+mcc.set(\"tutorialspoint\", 900, \"memcached\").done);\n      \n      //Get value from cache\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n   }\n}\n \n Output \n On compiling and executing the program, you get to see the following output \u2212 \n \nConnection to server successfully\nset status:true\nGet from Cache:memcached.\n \n The terminal may show few informational messages too, those can be ignored. \n Memcached - Set Data \n Memcached set command is used to set a new value to a new or existing key. \n Syntax \n The basic syntax of Memcached set command is as shown below \u2212  \n \nset key flags exptime bytes [noreply] \nvalue \n \n The keywords in the syntax are as described below \u2212 \n \nkey \u2212 It is the name of the key by which data is stored and retrieved from Memcached.\nflags \u2212 It is the 32-bit unsigned integer that the server stores with the data provided by the user, and returns along with the data when the item is retrieved.\nexptime \u2212 It is the expiration time in seconds. 0 means no delay. If exptime is more than 30 days, Memcached uses it as UNIX timestamp for expiration.\nbytes \u2212 It is the number of bytes in the data block that needs to be stored. This is the length of the data that needs to be stored in Memcached.\nnoreply (optional) - It is a parameter that informs the server not to send any reply.\nvalue \u2212 It is the data that needs to be stored. The data needs to be passed on the new line after executing the command with the above options.\n \n Output \n The output of the command is as shown below \u2212 \n \nSTORED\n \n \nSTORED indicates success.\nERROR indicates incorrect syntax or error while saving data.\n \n Example \n In the following example, we use tutorialspoint as the key and set value Memcached in it with an expiration time of 900 seconds. \n \nset tutorialspoint 0 900 9\nmemcached\nSTORED\nget tutorialspoint\nVALUE tutorialspoint 0 9\nMemcached\nEND\n \n Set Data Using Java Application \n To set a key in Memcached server, you need to use Memcached set method. \n Example \n \nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      \n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server sucessfully\");\n      System.out.println(\"set status:\"+mcc.set(\"tutorialspoint\", 900, \"memcached\").done);\n      \n      // Get value from cache\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n   }\n}\n \n Output \n On compiling and executing the program, you get to see the following output \u2212 \n \nConnection to server successfully\nset status:true\nGet from Cache:memcached\n \n Memcached - Add Data \n Memcached add command is used to set a value to a new key. If the key already exists, then it gives the output NOT_STORED. \n Syntax \n The basic syntax of Memcached add command is as shown below \u2212 \n \nadd key flags exptime bytes [noreply]\nvalue\n \n The keywords in the syntax are as described below \u2212 \n \nkey \u2212 It is the name of the key by which data is stored and retrieved from Memcached.\nflags \u2212 It is the 32-bit unsigned integer that the server stores with the data provided\nby the user, and returns along with the data when the item is retrieved.\nexptime \u2212 It is the expiration time in seconds. 0 means no delay. If exptime is more\nthan 30 days, Memcached uses it as a UNIX timestamp for expiration.\nbytes \u2212 It is the number of bytes in the data block that needs to be stored. This is the\nlength of the data that needs to be stored in Memcached.\nnoreply (optional) \u2212 It is a parameter that informs the server not to send any reply.\nvalue \u2212 It is the data that needs to be stored. The data needs to be passed on the new line after executing the command with the above options.\n \n Output \n The output of the command is as shown below \u2212 \n \nSTORED\n \n \nSTORED indicates success.\nNOT_STORED indicates the data is not stored in Memcached.\n \n Example \n In the following example, we use \u2018key\u2019 as the key and add the value Memcached in it with an expiration time of 900 seconds. \n \nadd key 0 900 9\nmemcached\nSTORED\nget key\nVALUE key 0 9\nMemcached\nEND\n \n Failure Output \n \nadd key 0 900 5\nredis\nNOT_STORED\n \n Add Data Using Java Application \n To add data in a Memcached server, you need to use the Memcached add method. \n Example \n \nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      \n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server successful\");\n      System.out.println(\"add status:\"+mcc.add(\"tutorialspoint\", 900, \"redis\").done);\n      System.out.println(\"add status:\"+mcc.add(\"tp\", 900, \"redis\").done);\n      \n      // Get value from cache\n      System.out.println(\"Get from Cache tp:\"+mcc.get(\"tp\"));\n   }\n}\n \n Output \n On compiling and executing the program, you get to see the following output \u2212 \n \nConnection to server successful\nadd status:false\nadd status:true\nGet from Cache tp:redis\n \n Memcached - Replace Data \n Memcached replace command is used to replace the value of an existing key. If the key\ndoes not exist, then it gives the output NOT_STORED. \n Syntax \n The basic syntax of Memcached replace command is as shown below \u2212 \n \nreplace key flags exptime bytes [noreply]\nvalue\n \n The keywords in the syntax are as described below \u2212 \n \nkey \u2212 It is the name of the key by which data is stored and retrieved from Memcached.\nflags \u2212 It is the 32-bit unsigned integer that the server stores with the data provided by the user, and returns along with the data when the item is retrieved.\nexptime \u2212 It is the expiration time in seconds. 0 means no delay. If exptime is more than 30 days, Memcached uses it as a UNIX timestamp for expiration.\nbytes \u2212 It is the number of bytes in the data block that needs to be stored. This is the length of the data that needs to be stored in the Memcached.\nnoreply (optional) \u2212 It is a parameter that informs the server not to send any\nreply.\nvalue \u2212 It is the data that needs to be stored. The data needs to be passed on the new line after executing the command with the above options.\n \n Output \n The output of the command is as shown below \u2212 \n \nSTORED\n \n \nSTORED indicates success.\nNOT_STORED indicates the data is not stored in Memcached.\n \n Example \n In the following example, we use \u2018key\u2019 as the key and store memcached in it with an expiration time of 900 seconds. After this, the same key is replaced with the value \u2018redis\u2019. \n \nadd key 0 900 9\nmemcached\nSTORED\nget key\nVALUE key 0 9\nmemcached\nEND\nreplace key 0 900 5\nredis\nget key\nVALUE key 0 5\nredis\nEND\n \n Replace Data Using Java Application \n To replace data in a Memcached server, you need to use the Memcached replace method. \n Example \n \nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      \n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server sucessfully\");\n      System.out.println(\"set status:\"+mcc.set(\"tutorialspoint\", 900, \"memcached\").done);\n      \n      // Get value from cache\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n      \n      // now replace the existing data\n      System.out.println(\"Replace cache:\"+mcc.replace(\"tutorialspoint\", 900, \"redis\").done);\n      \n      // get the updated data\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n   }\n}\n \n Output \n On compiling and executing the program, you get to see the following output \u2212 \n \nConnection to server successfully\nset status:true\nGet from Cache:memcached\nReplace cache:true\nGet from Cache:redis\n \n Memcached - Append Data \n Memcached append command is used to add some data in an existing key. The data is stored after the existing data of the key. \n Syntax \n The basic syntax of Memcached append command is as shown below \u2212 \n \nappend key flags exptime bytes [noreply]\nvalue\n \n The keywords in the syntax are as described below\u2212 \n \nkey \u2212 It is the name of the key by which data is stored and retrieved from\nMemcached.\nflags \u2212 It is the 32-bit unsigned integer that the server stores with the data provided by the user, and returns along with the data when the item is retrieved.\nexptime \u2212 It is the expiration time in seconds. 0 means no delay. If exptime is more than 30 days, Memcached uses it as a UNIX timestamp for expiration.\nbytes \u2212 It is the number of bytes in the data block that needs to be stored. This is the length of the data that needs to be stored in Memcached.\nnoreply (optional) \u2212 It is a parameter that informs the server not send any reply.\nvalue \u2212 It is the data that needs to be stored. The data needs to be passed on the new line after executing the command with the above options.\n \n Output \n The output of the command is as shown below \u2212 \n \nSTORED\n \n \nSTORED indicates success.\nNOT_STORED indicates the key does not exist in the Memcached server.\nCLIENT_ERROR indicates error.\n \n Example \n In the following example, we try to add some data in a key that does not exist. Hence, Memcached returns NOT_STORED. After this, we set one key and append data into it. \n \nappend tutorials 0 900 5\nredis\nNOT_STORED\nset tutorials 0 900 9\nmemcached\nSTORED\nget tutorials\nVALUE tutorials 0 14\nmemcached\nEND\nappend tutorials 0 900 5\nredis\nSTORED\nget tutorials\nVALUE tutorials 0 14\nmemcachedredis\nEND\n \n Append Data Using Java Application \n To append data in a Memcached server, you need to use the Memcached append method. \n Example \n \nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      \n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server successful\");\n      System.out.println(\"set status:\"+mcc.set(\"tutorialspoint\", 900, \"memcached\").isDone());\n      \n      // Get value from cache\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n      \n      // now append some data into existing key\n      System.out.println(\"Append to cache:\"+mcc.append(\"tutorialspoint\", \"redis\").isDone());\n      \n      // get the updated key\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n   }\n}\n \n Output \n On compiling and executing the program, you get to see the following output \u2212 \n \nConnection to server successful\nset status:true\nGet from Cache:memcached\nAppend to cache:true\nGet from Cache:memcachedredis\n \n Memcached - Prepend Data \n Memcached prepend command is used to add some data in an existing key. The data is stored before the existing data of the key. \n Syntax \n The basic syntax of Memcached prepend command is as shown below \u2212 \n \nprepend key flags exptime bytes [noreply]\nvalue\n \n The keywords in the syntax are as described below\u2212 \n \nkey \u2212 It is the name of the key by which data is stored and retrieved in\nMemcached.\nflags \u2212 It is the 32-bit unsigned integer that the server stores with the data provided by the user, and returns along with the data when the item is retrieved.\nexptime \u2212 It is the expiration time in seconds. 0 means no delay. If exptime is more than 30 days, Memcached uses it as a UNIX timestamp for expiration.\nbytes \u2212 It is the number of bytes in the data block that needs to be stored. This is the length of the data that needs to be stored in Memcached.\nnoreply (optional) \u2212It is a parameter that informs the server not send any reply.\nvalue \u2212 It is the data that needs to be stored. Data needs to be passed on the new line after executing the command with the above options.\n \n Output \n The output of the command is as shown below \u2212 \n \nSTORED\n \n \nSTORED indicates success.\nNOT_STORED indicates the key does not exist in the Memcached server.\nCLIENT_ERROR indicates error.\n \n Example \n In the following example, we add some data in a key that does not exist. Hence, Memcached returns NOT_STORED. After this, we set one key and prepend data into it. \n \nprepend tutorials 0 900 5\nredis\nNOT_STORED\nset tutorials 0 900 9\nmemcached\nSTORED\nget tutorials\nVALUE tutorials 0 14\nmemcached\nEND\nprepend tutorials 0 900 5\nredis\nSTORED\nget tutorials\nVALUE tutorials 0 14\nredismemcached\nEND\n \n Prepend Data Using Java Application \n To prepend data in a Memcached server, you need to use the Memcached prepend method. \n Example \n \nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server successful\");\n      System.out.println(\"set status:\"+mcc.set(\"tutorialspoint\", 900, \"memcached\").isDone());\n      \n      // Get value from cache\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n      \n      // now append some data into existing key\n      System.out.println(\"Prepend to cache:\"+mcc.prepend(\"tutorialspoint\", \"redis\").isDone());\n      \n      // get the updated key\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n   }\n}\n \n Output \n On compiling and executing the program, you get to see the following output \u2212 \n \nConnection to server successful\nset status:true\nGet from Cache:memcached\nPrepend to cache:true\nGet from Cache:redismemcached\n \n Memcached - CAS Command \n CAS stands for Check-And-Set or Compare-And-Swap. Memcached CAS command is used to set the data if it is not updated since last fetch. If the key does not exist in Memcached, then it returns NOT_FOUND. \n Syntax \n The basic syntax of Memcached CAS command is as shown below \u2212 \n \nset key flags exptime bytes unique_cas_key [noreply]\nvalue\n \n The keywords in the syntax are as described below\u2212 \n \nkey \u2212 It is the name of the key by which data is stored and retrieved from Memcached.\nflags \u2212 It is the 32-bit unsigned integer that the server stores with the data provided by the user, and returns along with the data when the item is retrieved.\nexptime \u2212 It is the expiration time in seconds. 0 means no delay. If exptime is more than 30 days, Memcached uses it as a UNIX timestamp for expiration.\nbytes \u2212 It is the number of bytes in the data block that needs to be stored. This is the length of the data that needs to be stored in Memcached.\nunique_cas_key \u2212 It is the unique key get from gets command.\nnoreply (optional) \u2212 It is a parameter that informs the server not to send any\nreply.\nvalue \u2212 It is the data that needs to be stored. Data needs to be passed on new line after executing the command with the above options.\n \n Output \n The output of the command is as shown below \u2212 \n \nSTORED\n \n \nSTORED indicates success.\nERROR  indicates error while saving data or wrong syntax.\nEXISTS indicates that someone has modified the CAS data since last fetch.\nNOT_FOUND indicates that the key does not exist in the Memcached server.\n \n Example \n To execute a CAS command in Memcached, you need to get a CAS token from the Memcached gets command. \n \ncas tp 0 900 9\nERROR\ncas tp 0 900 9 2\nmemcached\nset tp 0 900 9\nmemcached\nSTORED\ngets tp\nVALUE tp 0 9 1\nmemcached\nEND\ncas tp 0 900 5 2\nredis\nEXISTS\ncas tp 0 900 5 1\nredis\nSTORED\nget tp\nVALUE tp 0 5\nredis\nEND\n \n CAS Using Java Application \n To get CAS data from a Memcached server, you need to use Memcached gets method. \n Example \n \nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n     \n     // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server successful\");\n      System.out.println(\"set status:\"+mcc.set(\"tutorialspoint\", 900, \"memcached\").isDone());\n\n      // Get cas token from cache\n      long castToken = mcc.gets(\"tutorialspoint\").cas;\n      System.out.println(\"Cas token:\"+castToken);\n\n      // now set new data in memcached server\n      System.out.println(\"Now set new data:\"+mcc.cas(\"tutorialspoint\",\n      castToken, 900, \"redis\"));\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n   }\n}\n \n Output \n On compiling and executing the program, you get to see the following output \u2212 \n \nConnection to server successful\nset status:true\nCas token:3\nNow set new data:OK\nGet from Cache:redis\n \n Memcached - Get Data \n Memcached get command is used to get the value stored at key. If the key does not exist in Memcached, then it returns nothing. \n Syntax \n The basic syntax of Memcached get command is as shown below \u2212 \n \nget key\n \n Example \n In the following example, we use tutorialspoint as the key and store memcached in it with an expiration time of 900 seconds. \n \nset tutorialspoint 0 900 9\nmemcached\nSTORED\nget tutorialspoint\nVALUE tutorialspoint 0 9\nmemcached\nEND\n \n Get Data Using Java Application \n To get data from a Memcached server, you need to use the Memcached get method. \n Example \n \nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server sucessfully\");\n      System.out.println(\"set status:\"+mcc.set(\"tutorialspoint\", 900, \"memcached\").done);\n     \n     // Get value from cache\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n   }\n}\n \n Output \n On compiling and executing the program, you get to see the following output \u2212 \n \nConnection to server successfully\nset status:true\nGet from Cache:memcached\n \n Memcached - Get CAS Data \n Memcached gets command is used to get the value with CAS token. If the key does not exist in Memcached, then it returns nothing. \n Syntax \n The basic syntax of Memcached gets command is as shown below \u2212 \n \nget key\n \n Example \n \nset tutorialspoint 0 900 9\nmemcached\nSTORED\ngets tutorialspoint\nVALUE tutorialspoint 0 9 1\nmemcached\nEND\n \n In this example, we use tutorialspoint as the key and store memcached in it with an expiration time of 900 seconds. \n Get CAS Data Using Java Application \n To get CAS data from a Memcached server, you need to use the Memcached gets method. \n Example \n \nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      \n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server sucessfully\");\n      System.out.println(\"set status:\"+mcc.set(\"tutorialspoint\", 900, \"memcached\").done);\n      \n      // Get value from cache\n      System.out.println(\"Get from Cache:\"+mcc.gets(\"tutorialspoint\"));\n   }\n}\n \n Output \n On compiling and executing the program, you get to see the following output \u2212 \n \nConnection to server successfully\nset status:true\nGet from Cache:{CasValue 2/memcached}\n \n Memcached - Delete Key \n Memcached delete command is used to delete an existing key from the Memcached server. \n Syntax \n The basic syntax of Memcached delete command is as shown below \u2212 \n \ndelete key [noreply]\n \n Output \n CAS command may produce one of the following result  \u2212 \n \nDELETED indicates successful deletion.\nERROR indicates error while deleting data or wrong syntax.\nNOT_FOUND indicates that the key does not exist in the Memcached server.\n \n Example \n In this example, we use tutorialspoint as a key and store memcached in it with an expiration time of 900 seconds. After this, it deletes the stored key. \n \nset tutorialspoint 0 900 9\nmemcached\nSTORED\nget tutorialspoint\nVALUE tutorialspoint 0 9\nmemcached\nEND\ndelete tutorialspoint\nDELETED\nget tutorialspoint\nEND\ndelete tutorialspoint\nNOT_FOUND\n \n Delete Data Using Java Application \n To delete data from a Memcached server, you need to use the Memcached delete method. \n Example \n \nimport java.net.InetSocketAddress;\nimport java.util.concurrent.Future;\n\nimport net.spy.memcached.MemcachedClient;\n\npublic class MemcachedJava {\n   public static void main(String[] args) {\n   \n      try{\n   \n         // Connecting to Memcached server on localhost\n         MemcachedClient mcc = new MemcachedClient(new InetSocketAddress(\"127.0.0.1\", 11211));\n         System.out.println(\"Connection to server sucessful.\");\n\n         // add data to memcached server\n         Future fo = mcc.set(\"tutorialspoint\", 900, \"World's largest online tutorials library\");\n\n         // print status of set method\n         System.out.println(\"set status:\" + fo.get());\n\n         // retrieve and check the value from cache\n         System.out.println(\"tutorialspoint value in cache - \" + mcc.get(\"tutorialspoint\"));\n\n         // try to add data with existing key\n         Future fo = mcc.delete(\"tutorialspoint\");\n\n         // print status of delete method\n         System.out.println(\"delete status:\" + fo.get());\n\n         // retrieve and check the value from cache\n         System.out.println(\"tutorialspoint value in cache - \" + mcc.get(\"codingground\"));\n\n         // Shutdowns the memcached client\n         mcc.shutdown();\n         \n      }catch(Exception ex)\n         System.out.println(ex.getMessage());\n   }\n}\n \n Output \n On compiling and executing the program, you get to see the following output \u2212 \n \nConnection to server successful\nset status:true\ntutorialspoint value in cache - World's largest online tutorials library\ndelete status:true\ntutorialspoint value in cache - null\n \n Memcached - Delete data \n Memcached delete command is used to delete an existing key from the Memcached server. \n Syntax \n The basic syntax of Memcached delete command is as shown below \u2212 \n \ndelete key\n \n If the key is successfully deleted, then it returns DELETED. If the key is not found, then it returns NOT_FOUND, otherwise it returns ERROR. \n Example \n In this example, we use tutorialspoint as a key and store memcached in it with an expiration time of 900 seconds. After this, it deletes the stored key. \n \nset tutorialspoint 0 900 9\nmemcached\nSTORED\nget tutorialspoint\nVALUE tutorialspoint 0 9\nmemcached\nEND\ndelete tutorialspoint\nDELETED\nget tutorialspoint\nEND\ndelete tutorialspoint\nNOT_FOUND\n \n Delete Data Using Java Application \n To delete data from a Memcached server, you need to use the Memcached delete method. \n Example \n \nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      \n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server successful\");\n      System.out.println(\"set status:\"+mcc.set(\"tutorialspoint\", 900, \"memcached\").done);\n      \n      // Get value from cache\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n      \n      // delete value from cache\n      System.out.println(\"Delete from Cache:\"+mcc.delete(\"tutorialspoint\").isDone());\n      \n      // check whether value exists or not\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n   }\n}\n \n Output \n On compiling and executing the program, you get to see the following output \u2212 \n \nConnection to server successful\nset status:true\nGet from Cache:memcached\nDelete from Cache:true\nGet from Cache:null\n \n Memcached - Increment Decrement Data \n Memcached incr and decr commands are used to increment or decrement the numeric value of an existing key. If the key is not found, then it returns NOT_FOUND. If the key is not numeric, then it returns CLIENT_ERROR cannot increment or decrement non-numeric value. Otherwise, ERROR is returned. \n Syntax - incr \n The basic syntax of Memcached incr command is as shown below \u2212 \n \nincr key increment_value\n \n Example \n In this example, we use visitors as key and set 10 initially into it, thereafter we increment the visitors by 5. \n \nset visitors 0 900 2\n10\nSTORED\nget visitors\nVALUE visitors 0 2\n10\nEND\nincr visitors 5\n15\nget visitors\nVALUE visitors 0 2\n15\nEND\n \n Syntax - decr \n The basic syntax of Memcached decr command is as shown below \n \ndecr key decrement_value\n \n Example \n \nset visitors 0 900 2\n10\nSTORED\nget visitors\nVALUE visitors 0 2\n10\nEND\ndecr visitors 5\n5\nget visitors\nVALUE visitors 0 1\n5\nEND\n \n Incr/Decr Using Java Application \n To increment or decrement data in a Memcached server, you need to use Memcached incr or decr methods respectively. \n Example \n \nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      \n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server sucessfully\");\n      System.out.println(\"set status:\"+mcc.set(\"count\", 900, \"5\").isDone());\n      \n      // Get value from cache\n      System.out.println(\"Get from Cache:\"+mcc.get(\"count\"));\n      \n      // now increase the stored value\n      System.out.println(\"Increment value:\"+mcc.incr(\"count\", 2));\n      \n      // now decrease the stored value\n      System.out.println(\"Decrement value:\"+mcc.decr(\"count\", 1));\n      \n      // now get the final stored value\n      System.out.println(\"Get from Cache:\"+mcc.get(\"count\"));\n   }\n}\n \n Output \n On compiling and executing the program, you get to see the following output \u2212 \n \nConnection to server successfully\nset status:true\nGet from Cache:5\nIncrement value:7\nDecrement value:6\nGet from Cache:6\n \n Memcached - Stats \n Memcached stats command is used to return server statistics such as PID, version, connections, etc. \n Syntax \n The basic syntax of Memcached stats command is as shown below \u2212 \n \nstats\n \n Example \n \nstats\nSTAT pid 1162\nSTAT uptime 5022\nSTAT time 1415208270\nSTAT version 1.4.14\nSTAT libevent 2.0.19-stable\nSTAT pointer_size 64\nSTAT rusage_user 0.096006\nSTAT rusage_system 0.152009\nSTAT curr_connections 5\nSTAT total_connections 6\n\nSTAT connection_structures 6\nSTAT reserved_fds 20\nSTAT cmd_get 6\nSTAT cmd_set 4\nSTAT cmd_flush 0\nSTAT cmd_touch 0\nSTAT get_hits 4\nSTAT get_misses 2\nSTAT delete_misses 1\nSTAT delete_hits 1\n\nSTAT incr_misses 2\nSTAT incr_hits 1\nSTAT decr_misses 0\nSTAT decr_hits 1\nSTAT cas_misses 0\nSTAT cas_hits 0\nSTAT cas_badval 0\nSTAT touch_hits 0\nSTAT touch_misses 0\nSTAT auth_cmds 0\n\nSTAT auth_errors 0\nSTAT bytes_read 262\nSTAT bytes_written 313\nSTAT limit_maxbytes 67108864\nSTAT accepting_conns 1\nSTAT listen_disabled_num 0\nSTAT threads 4\nSTAT conn_yields 0\nSTAT hash_power_level 16\n\nSTAT hash_bytes 524288\nSTAT hash_is_expanding 0\nSTAT expired_unfetched 1\nSTAT evicted_unfetched 0\nSTAT bytes 142\nSTAT curr_items 2\nSTAT total_items 6\nSTAT evictions 0\nSTAT reclaimed 1\nEND\n \n Stats Using Java Application \n To get stats from a Memcached server, you need to use the Memcached stats method. \n Example \n \nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      \n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server successful\");\n      System.out.println(\"Stats:\"+mcc.stats);\n   }\n}\n \n Output \n On compiling and executing the program, you get to see the following output \u2212 \n \nConnection to server successful\nStats:[/127.0.0.1:11211:[delete_hits:0, bytes:71, total_items:4,\nrusage_system:0.220013, touch_misses:0, cmd_touch:0, listen_disabled_num:0,\nauth_errors:0, evictions:0, version:1.4.14, pointer_size:64, time:1417279366,\nincr_hits:1, threads:4, expired_unfetched:0, limit_maxbytes:67108864,\nhash_is_expanding:0, bytes_read:170, curr_connections:8, get_misses:1,\nreclaimed:0, bytes_written:225, hash_power_level:16, connection_structures:9,\ncas_hits:0, delete_misses:0, total_connections:11, rusage_user:0.356022,\ncmd_flush:0, libevent:2.0.19-stable, uptime:12015, reserved_fds:20,\ntouch_hits:0, cas_badval:0, pid:1138, get_hits:2, curr_items:1, cas_misses:0,\naccepting_conns:1, evicted_unfetched:0, cmd_get:3, cmd_set:2, auth_cmds:0,\nincr_misses:1, hash_bytes:524288, decr_misses:1, decr_hits:1, conn_yields:0]]\n \n Memcached - Stats Items \n Memcached stats items command is used to get items statistics such as count, age,\neviction, etc. organized by slabs ID. \n Syntax \n The basic syntax of Memcached stats items command is as shown below \u2212 \n \nstats items\n \n Example \n \nstats items\nSTAT items:1:number 1\nSTAT items:1:age 7\nSTAT items:1:evicted 0\nSTAT items:1:evicted_nonzero 0\nSTAT items:1:evicted_time 0\nSTAT items:1:outofmemory 0\nSTAT items:1:tailrepairs 0\nSTAT items:1:reclaimed 0\nSTAT items:1:expired_unfetched 0\nSTAT items:1:evicted_unfetched 0\nEND\n \n Memcached - Stats Slabs \n Memcached stats slabs command displays slabs statistics such as size, memory usage, commands, count etc. organized by slabs ID. \n Syntax \n The basic syntax of Memcached stats slabs command is as shown below \u2212 \n \nstats slabs\n \n Example \n \nstats slabs\nSTAT 1:chunk_size 96\nSTAT 1:chunks_per_page 10922\nSTAT 1:total_pages 1\nSTAT 1:total_chunks 10922\nSTAT 1:used_chunks 1\nSTAT 1:free_chunks 10921\nSTAT 1:free_chunks_end 0\nSTAT 1:mem_requested 71\nSTAT 1:get_hits 0\nSTAT 1:cmd_set 1\nSTAT 1:delete_hits 0\nSTAT 1:incr_hits 0\nSTAT 1:decr_hits 0\nSTAT 1:cas_hits 0\nSTAT 1:cas_badval 0\nSTAT 1:touch_hits 0\nSTAT active_slabs 1\nSTAT total_malloced 1048512\nEND\n \n Memcached - Stats Sizes \n Memcached stats sizes command provides information about the sizes and number of items of each size within the cache. The information is returned in two columns. The first column is the size of the item (rounded up to the nearest 32 byte boundary), and the second column is the count of the number of items of that size within the cache. \n Syntax \n The basic syntax of Memcached stats sizes command is as shown below \u2212 \n \nstats sizes\n \n Example \n \nstats sizes\nSTAT 96 1\nEND\n \n The item size statistics are useful only to determine the sizes of the objects you are storing. Since the actual memory allocation is relevant only in terms of the chunk size and page size, the information is only useful during a careful debugging or diagnostic session. \n Memcached - Clear Data \n Memcached flush_all command is used to delete all data (key-value pairs) from the Memcached server. It accepts an optional parameter called time that sets a time after which the Memcached data is to be cleared. \n Syntax \n The basic syntax of Memcached flush_all command is as shown below \u2212 \n \nflush_all [time] [noreply]\n \n The above command always returns OK. \n Example \n In the following example, we store some data into the Memcached server and then clear all the data. \n \nset tutorialspoint 0 900 9\nmemcached\nSTORED\nget tutorialspoint\nVALUE tutorialspoint 0 9\nmemcached\nEND\nflush_all\nOK\nget tutorialspoint\nEND\n \n Clear Data Using Java Application \n To clear data from a Memcached server, you need to use the Memcached flush method. \n Example \n \nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n     \n     // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server sucessfully\");\n      System.out.println(\"set status:\"+mcc.set(\"count\", 900, \"5\").isDone());\n      \n      // Get value from cache\n      System.out.println(\"Get from Cache:\"+mcc.get(\"count\"));\n     \n      // now increase the stored value\n      System.out.println(\"Increment value:\"+mcc.incr(\"count\", 2));\n     \n      // now decrease the stored value\n      System.out.println(\"Decrement value:\"+mcc.decr(\"count\", 1));\n      \n      // now get the final stored value\n      System.out.println(\"Get from Cache:\"+mcc.get(\"count\"));\n      \n      // now clear all this data\n      System.out.println(\"Clear data:\"+mcc.flush().isDone());\n   }\n}\n \n Output \n On compiling and executing the program, you get to see the following output \u2212 \n \nConnection to server successfully\nset status:true\nGet from Cache:5\nIncrement value:7\nDecrement value:6\nGet from Cache:6\nClear data:true\n \n  \n \n Previous Page\n \n \n Print\n \n \nNext Page \u00a0\n \n  \n  PRINTING ENDS HERE  \n \nAdvertisements\n<!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//-->\n\n\n \n", "url": "https://www.tutorialspoint.com/memcached/memcached_quick_guide.htm", "html": "<!DOCTYPE html>\n\n<!--[if IE 8]><html class=\"ie ie8\"> <![endif]-->\n<!--[if IE 9]><html class=\"ie ie9\"> <![endif]-->\n<!--[if gt IE 9]><!--> <html> <!--<![endif]-->\n<head>\n<!-- Basic -->\n<meta charset=\"utf-8\"/>\n<title>Memcached Quick Guide</title>\n<meta content=\"Memcached Quick Guide - Learn Memcached memory caching system in simple and easy steps starting from basic to advanced concepts with examples including Overview, Environment, Connection, Set Data, Add Data, Replace Data, Append and Prepend Data, CAS Command, Get Data, Get CAS Data, Delete Key, Delete Data, Increment Decrement Data, Stats and Clear Data, Stats Items, Stats Slabs, Stats Sizes.\" name=\"description\">\n<meta content=\"Memcached, Tutorial, Beginners, Overview, Environment, Connection, Set Data, Add Data, Replace Data, Append and Prepend Data, CAS Command, Get Data, Get CAS Data, Delete Key, Delete Data, Increment Decrement Data, Stats and Clear Data, Stats Items, Stats Slabs, Stats Sizes.\" name=\"keywords\"/>\n<base href=\"https://www.tutorialspoint.com/\"/>\n<link href=\"/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"/>\n<meta content=\"width=device-width,initial-scale=1.0,user-scalable=yes\" name=\"viewport\"/>\n<meta content=\"en_US\" property=\"og:locale\">\n<meta content=\"website\" property=\"og:type\"/>\n<meta content=\"471319149685276\" property=\"fb:app_id\"/>\n<meta content=\"www.tutorialspoint.com\" property=\"og:site_name\"/>\n<meta content=\"yes\" name=\"apple-mobile-web-app-capable\"/>\n<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"/>\n<meta content=\"tutorialspoint.com\" name=\"author\"/>\n<script src=\"https://www.tutorialspoint.com/theme/js/script-min-v4.js?v=2\" type=\"text/javascript\"></script>\n<link href=\"https://www.tutorialspoint.com/theme/css/style-min.css?v=3.1\" rel=\"stylesheet\"/>\n<script>\r\nfunction openNav() {\t\r\n  document.getElementById(\"mySidenav\").style.width = \"250px\";\r\n  document.getElementById(\"right_obs\").style.display = \"block\";\r\n}\r\nfunction closeNav() {\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\nfunction close_obs_sidenav(){\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\n</script>\n<!-- Head Libs -->\n<!--[if IE 8]>\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/theme/css/ie8.css\">\r\n<![endif]-->\n<style>\r\n#privacy-banner {\r\n    position: fixed;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    max-width: 100%;\r\n    padding: 1rem .5rem;\r\n    background: #fff;\r\n    z-index: 1030;\r\n    color: #000;\r\n    font-size: 14px;\r\n    margin: 0;\r\n    display: none;\r\n    border-top: 2px solid rgb(130, 130, 130);\r\n  }\r\n  #privacy-banner p {\r\n    margin: 0;\r\n    color: #000;\r\n    text-align: center;\r\n  }\r\n  #privacy-banner a {\r\n    text-decoration: none;\r\n    margin: 20px auto 0 auto;\r\n    display: block;\r\n    max-width: 150px;\r\n  }\r\n  #privacy-banner a:hover {\r\n    text-decoration: underline;\r\n  }\r\n  #banner-learn {\r\n    color: #000;\r\n  }\r\n  #banner-accept {\r\n    padding: 7px 15px;\r\n    color: #fff;\r\n    border-radius: 5px;\r\n    background:#737373 !important;\r\n  }\r\n  @media (min-width: 768px) {\r\n    #privacy-banner {\r\n      padding: 1.5rem .5rem;\r\n    }\r\n    #privacy-banner a {\r\n      display: inline-block;\r\n      margin: 0 10px;\r\n    }\r\n}\r\nselect{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }\r\n.btnsbmt{ background: #2a8d84 !important;}\r\nul.nav-list.primary>li a.videolink{    background: none; margin: 0px; padding: 0px; border: 1px solid #d6d6d6;}\r\ndiv.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #2a8d84 url(/images/pattern.png) repeat center center !important;}\r\n.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #2a8d84 !important;}\r\n.submenu-item{ border-bottom: 2px solid #2a8d84 !important; border-top: 2px solid #2a8d84 !important }\r\n.ace_scroller{overflow: auto!important;}\r\na.demo{font-family: \"Open Sans\",Arial,sans-serif; background:#2a8d84; color:#fff; font-size:13px; padding:3px 10px; border:1px solid #d6d6d6; position:absolute; right:5px; margin:-6px 17px 0px 0px;}\r\na.demo:hover{opacity:.8}\r\n</style>\n<script>\r\n$(document).ready(function() {\r\n  $('input[name=\"q\"]').keydown(function(event){\r\n    if(event.keyCode == 13) {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n  });\r\n});\r\n</script>\n</meta></meta></head>\n<body onload=\"prettyPrint()\">\n<div class=\"wrapLoader\">\n<div class=\"imgLoader\">\n<img alt=\"\" height=\"70\" src=\"/images/loading-cg.gif\" width=\"70\"/>\n</div>\n</div>\n<div class=\"display-none\" id=\"right_obs\" onclick=\"close_obs_sidenav()\"></div>\n<header>\n<div class=\"container\">\n<h1 class=\"logo\">\n<a href=\"index.htm\" title=\"tutorialspoint\">\n<img alt=\"tutorialspoint\" src=\"/memcached/images/logo.png\"/>\n</a>\n</h1>\n<ul class=\"tp-inline-block pull-right\" id=\"tp-head-icons\">\n<li>\n<div class=\"tp-second-nav tp-display-none tp-pointer\" onclick=\"openNav()\">\n<i class=\"fa fa-th-large fa-lg\"></i>\n</div>\n</li>\n</ul>\n<button class=\"btn btn-responsive-nav btn-inverse\" data-target=\".nav-main-collapse\" data-toggle=\"collapse\" id=\"pull\" style=\"top: 24px!important\"> <i class=\"icon icon-bars\"></i> </button>\n<nav>\n<ul class=\"nav nav-pills nav-top\">\n<li><a href=\"/about/about_careers.htm\" style=\"background: #fffb09; font-weight: bold;\"><i class=\"icon icon-suitcase\"></i> Jobs</a></li>\n<li> <a href=\"/programming_examples/\" target=\"_blank\"><i class=\"fa fa-cubes\"></i> \u00a0Examples</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/whiteboard.htm\"><img alt=\"Whiteboard\" src=\"theme/css/icons/image-editor.png\" title=\"Whiteboard\"/> \u00a0Whiteboard</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/netmeeting.php\"><i class=\"fa-camera\"></i> \u00a0Net Meeting</a> </li>\n<li> <a href=\"/online_dev_tools.htm\"> <i class=\"dev-tools-menu\" style=\"opacity:.5\"></i> Tools </a> </li>\n<li> <a href=\"/articles/index.php\"><i class=\"icon icon-file-text-o\"></i> \u00a0Articles</a> </li>\n<li class=\"top-icons\">\n<ul class=\"social-icons\">\n<li class=\"facebook\"><a data-placement=\"bottom\" href=\"https://www.facebook.com/tutorialspointindia\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Facebook\">Facebook</a></li>\n<li class=\"googleplus\"><a data-placement=\"bottom\" href=\"https://plus.google.com/u/0/116678774017490391259/posts\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Google+\">Google+</a></li>\n<li class=\"twitter\"><a data-placement=\"bottom\" href=\"https://www.twitter.com/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Twitter\">Twitter</a></li>\n<li class=\"linkedin\"><a data-placement=\"bottom\" href=\"https://www.linkedin.com/company/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Linkedin\">Linkedin</a></li>\n<li class=\"youtube\"><a data-placement=\"bottom\" href=\"https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint YouTube\">YouTube</a></li>\n</ul>\n</li>\n</ul>\n</nav>\n</div>\n<div class=\"sidenav\" id=\"mySidenav\">\n<div class=\"navbar nav-main\">\n<div class=\"container\">\n<nav class=\"nav-main mega-menu\">\n<ul class=\"nav nav-pills nav-main\" id=\"mainMenu\">\n<li class=\"dropdown no-sub-menu\"> <a class=\"dropdown\" href=\"index.htm\"><i class=\"icon icon-home\"></i> Home</a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"/questions/index.php\"><i class=\"fa fa-send\"></i> Q/A </a> </li>\n<li class=\"dropdown\"><a class=\"dropdown\" href=\"tutorialslibrary.htm\"><span class=\"tut-lib\"> Library </span></a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"videotutorials/index.htm\"><i class=\"fa-toggle-right\"></i> Videos </a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"tutor_connect/index.php\"><i class=\"fa-user\"> </i> Tutors</a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"codingground.htm\"><i class=\"fa-code\"></i> Coding Ground </a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"https://store.tutorialspoint.com/\"><i class=\"fa-usd\"></i> Store </a> </li>\n<li class=\"dropdown no-sub-menu\">\n<div class=\"searchform-popup\">\n<input autocomplete=\"off\" class=\"header-search-box\" id=\"search-string\" name=\"q\" onblur=\"if (this.value == '') {this.value = 'Search your favorite tutorials...';}\" onfocus=\"if (this.value == 'Search your favorite tutorials...') {this.value = '';}\" placeholder=\"Search your favorite tutorials...\" type=\"text\"/>\n<div class=\"magnifying-glass\"><i class=\"icon-search\"></i> Search </div>\n</div>\n</li>\n</ul>\n</nav>\n</div>\n</div>\n</div>\n</header></body></html>\n\n<div style=\"clear:both;\"></div>\n<div class=\"main\" role=\"main\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-2\">\n<aside class=\"sidebar\">\n<div class=\"mini-logo\">\n<img alt=\"Memcached Tutorial\" src=\"/memcached/images/memcached-mini-logo.jpg\">\n</img></div>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Memcached Basics</li>\n<li><a href=\"/memcached/index.htm\">Memcached - Home</a></li>\n<li><a href=\"/memcached/memcached_overview.htm\">Memcached - Overview</a></li>\n<li><a href=\"/memcached/memcached_environment.htm\">Memcached - Environment</a></li>\n<li><a href=\"/memcached/memcached_connection.htm\">Memcached - Connection</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Memcached Storage Commands</li>\n<li><a href=\"/memcached/memcached_set_data.htm\">Memcached - Set Data</a></li>\n<li><a href=\"/memcached/memcached_add_data.htm\">Memcached - Add Data</a></li>\n<li><a href=\"/memcached/memcached_replace_data.htm\">Memcached - Replace Data</a></li>\n<li><a href=\"/memcached/memcached_append_data.htm\">Memcached - Append Data</a></li>\n<li><a href=\"/memcached/memcached_prepend_data.htm\">Memcached - Prepend Data</a></li>\n<li><a href=\"/memcached/memcached_cas.htm\">Memcached - CAS</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Memcached Retrieval Commands</li>\n<li><a href=\"/memcached/memcached_get_data.htm\">Memcached - Get Data</a></li>\n<li><a href=\"/memcached/memcached_get_cas_data.htm\">Memcached - Get CAS Data</a></li>\n<li><a href=\"/memcached/memcached_delete_key.htm\">Memcached - Delete Key</a></li>\n<li><a href=\"/memcached/memcached_delete_data.htm\">Memcached - Delete Data</a></li>\n<li><a href=\"/memcached/memcached_incr_decr.htm\">Memcached - Incr/Decr</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Memcached Statistics Commands</li>\n<li><a href=\"/memcached/memcached_stats.htm\">Memcached - Stats</a></li>\n<li><a href=\"/memcached/memcached_stats_items.htm\">Memcached - Stats Items</a></li>\n<li><a href=\"/memcached/memcached_stats_slabs.htm\">Memcached - Stats Slabs</a></li>\n<li><a href=\"/memcached/memcached_stats_sizes.htm\">Memcached - Stats sizes</a></li>\n<li><a href=\"/memcached/memcached_clear_data.htm\">Memcached - Clear Data</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Memcached Useful Resources</li>\n<li><a href=\"/memcached/memcached_quick_guide.htm\">Memcached - Quick Guide</a></li>\n<li><a href=\"/memcached/memcached_useful_resources.htm\">Memcached - Useful Resources</a></li>\n<li><a href=\"/memcached/memcached_discussion.htm\">Memcached - Discussion</a></li>\n</ul>\n<ul class=\"nav nav-list primary push-bottom left-menu special\">\n<li class=\"sreading\">Selected Reading</li>\n<li><a href=\"/upsc_ias_exams.htm\" target=\"_top\">UPSC IAS Exams Notes</a></li>\n<li><a href=\"/developers_best_practices/index.htm\" target=\"_top\">Developer's Best Practices</a></li>\n<li><a href=\"/questions_and_answers.htm\" target=\"_top\">Questions and Answers</a></li>\n<li><a href=\"/effective_resume_writing.htm\" target=\"_top\">Effective Resume Writing</a></li>\n<li><a href=\"/hr_interview_questions/index.htm\" target=\"_top\">HR Interview Questions</a></li>\n<li><a href=\"/computer_glossary.htm\" target=\"_top\">Computer Glossary</a></li>\n<li><a href=\"/computer_whoiswho.htm\" target=\"_top\">Who is Who</a></li>\n</ul>\n</aside>\n</div>\n<!-- PRINTING STARTS HERE -->\n<div class=\"row\">\n<div class=\"content\">\n<div class=\"col-md-7 middle-col\">\n<h1>Memcached - Quick Guide</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/memcached/memcached_clear_data.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/memcached/memcached_useful_resources.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<h1>Memcached - Overview</h1>\n<p>Memcached is an open source, high-performance, distributed memory caching system intended to speed up dynamic web applications by reducing the database load. It is a key-value dictionary of strings, objects, etc., stored in the memory, resulting from database calls, API calls, or page rendering.</p>\n<p>Memcached was developed by Brad Fitzpatrick for LiveJournal in 2003. However, it is now being used by Netlog, Facebook, Flickr, Wikipedia, Twitter, and YouTube among others.</p>\n<p>The key features of Memcached are as follows \u2212</p>\n<ul class=\"list\">\n<li><p>It is open source.</p></li>\n<li><p>Memcached server is a big hash table.</p></li>\n<li><p>It significantly reduces the database load</p></li>\n<li><p>It is perfectly efficient for websites with high database load.</p></li>\n<li><p>It is distributed under Berkeley Software Distribution (BSD) license.</p></li>\n<li><p>It is a client-server application over TCP or UDP.</p></li>\n</ul>\n<h3>Memcached is not \u2212</h3>\n<ul class=\"list\">\n<li><p>a persistent data store</p></li>\n<li><p>a database</p></li>\n<li><p>application-specific</p></li>\n<li><p>a large object cache</p></li>\n<li><p>fault-tolerant or highly available</p></li>\n</ul>\n<h1>Memcached - Environment</h1>\n<h2>Installing Memcached on Ubuntu</h2>\n<p>To install Memcached on Ubuntu, go to terminal and type the following commands \u2212</p>\n<pre class=\"result notranslate\">\n$sudo apt-get update\n$sudo apt-get install memcached\n</pre>\n<h3>Confirming Memcached Installation</h3>\n<p>To confirm if Memcached is installed or not, you need to run the command given below. This command shows that Memcached is running on the default port <b>11211</b>.</p>\n<pre class=\"result notranslate\">\n$ps aux | grep memcached\n</pre>\n<p>To run Memcached server on a different port, execute the command given below. This command starts the server on the TCP port 11111 and listens on the UDP port 11111 as a daemon process.</p>\n<pre class=\"result notranslate\">\n$memcached -p 11111 -U 11111 -u user -d\n</pre>\n<p>You can run multiple instances of Memcached server through a single installation.</p>\n<h2>Memcached Java Environment Setup</h2>\n<p>To use Memcached in your Java program, you need to download <b><a href=\"https://code.google.com/archive/p/spymemcached/downloads\" rel=\"nofollow\" target=\"_blank\">spymemcached-2.10.3.jar</a></b> and setup this jar into the classpath.</p>\n<h1>Memcached - Connection</h1>\n<p>To connect to a Memcached server, you need to use the telnet command on HOST and PORT names.</p>\n<h3>Syntax</h3>\n<p>The basic syntax of Memcached telnet command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\n$telnet HOST PORT\n</pre>\n<p>Here, <b>HOST</b> and <b>PORT</b> are machine IP and port number respectively, on which the Memcached server is executing.</p>\n<h3>Example</h3>\n<p>The following example shows how to connect to a Memcached server and execute a simple set and get command. Assume that the Memcached server is running on host 127.0.0.1 and port 11211.</p>\n<pre class=\"result notranslate\">\n$telnet 127.0.0.1 11211\nTrying 127.0.0.1...\nConnected to 127.0.0.1.\nEscape character is '^]'.\n// now store some data and get it from memcached server\nset tutorialspoint 0 900 9\nmemcached\nSTORED\nget tutorialspoint\nVALUE tutorialspoint 0 9\nmemcached\nEND\n</pre>\n<h2>Connection from Java Application</h2>\n<p>To connect the Memcached server from your java program, you need to add the Memcached jar into your classpath as shown in the previous chapter. Assume that the Memcached server is running on host 127.0.0.1 and port 11211. \u2212</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      \n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server sucessfully\");\n      \n      //not set data into memcached server\n      System.out.println(\"set status:\"+mcc.set(\"tutorialspoint\", 900, \"memcached\").done);\n      \n      //Get value from cache\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n   }\n}\n</pre>\n<h3>Output</h3>\n<p>On compiling and executing the program, you get to see the following output \u2212</p>\n<pre class=\"result notranslate\">\nConnection to server successfully\nset status:true\nGet from Cache:memcached.\n</pre>\n<p>The terminal may show few informational messages too, those can be ignored.</p>\n<h1>Memcached - Set Data</h1>\n<p>Memcached <b>set</b> command is used to set a new value to a new or existing key.</p>\n<h3>Syntax</h3>\n<p>The basic syntax of Memcached <b>set</b> command is as shown below \u2212 </p>\n<pre class=\"result notranslate\">\nset key flags exptime bytes [noreply] \nvalue \n</pre>\n<p>The keywords in the syntax are as described below \u2212</p>\n<ul class=\"list\">\n<li><p><b>key</b> \u2212 It is the name of the key by which data is stored and retrieved from Memcached.</p></li>\n<li><p><b>flags</b> \u2212 It is the 32-bit unsigned integer that the server stores with the data provided by the user, and returns along with the data when the item is retrieved.</p></li>\n<li><p><b>exptime</b> \u2212 It is the expiration time in seconds. 0 means no delay. If exptime is more than 30 days, Memcached uses it as UNIX timestamp for expiration.</p></li>\n<li><p><b>bytes</b> \u2212 It is the number of bytes in the data block that needs to be stored. This is the length of the data that needs to be stored in Memcached.</p></li>\n<li><p><b>noreply (optional)</b> - It is a parameter that informs the server not to send any reply.</p></li>\n<li><p><b>value</b> \u2212 It is the data that needs to be stored. The data needs to be passed on the new line after executing the command with the above options.</p></li>\n</ul>\n<h3>Output</h3>\n<p>The output of the command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nSTORED\n</pre>\n<ul class=\"list\">\n<li><p><b>STORED</b> indicates success.</p></li>\n<li><p><b>ERROR</b> indicates incorrect syntax or error while saving data.</p></li>\n</ul>\n<h3>Example</h3>\n<p>In the following example, we use tutorialspoint as the key and set value Memcached in it with an expiration time of 900 seconds.</p>\n<pre class=\"result notranslate\">\nset tutorialspoint 0 900 9\nmemcached\nSTORED\nget tutorialspoint\nVALUE tutorialspoint 0 9\nMemcached\nEND\n</pre>\n<h2>Set Data Using Java Application</h2>\n<p>To set a key in Memcached server, you need to use Memcached <b>set</b> method.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      \n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server sucessfully\");\n      System.out.println(\"set status:\"+mcc.set(\"tutorialspoint\", 900, \"memcached\").done);\n      \n      // Get value from cache\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n   }\n}\n</pre>\n<h3>Output</h3>\n<p>On compiling and executing the program, you get to see the following output \u2212</p>\n<pre class=\"result notranslate\">\nConnection to server successfully\nset status:true\nGet from Cache:memcached\n</pre>\n<h1>Memcached - Add Data</h1>\n<p>Memcached <b>add</b> command is used to set a value to a new key. If the key already exists, then it gives the output NOT_STORED.</p>\n<h3>Syntax</h3>\n<p>The basic syntax of Memcached <b>add</b> command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nadd key flags exptime bytes [noreply]\nvalue\n</pre>\n<p>The keywords in the syntax are as described below \u2212</p>\n<ul class=\"list\">\n<li><p><b>key</b> \u2212 It is the name of the key by which data is stored and retrieved from Memcached.</p></li>\n<li><p><b>flags</b> \u2212 It is the 32-bit unsigned integer that the server stores with the data provided\nby the user, and returns along with the data when the item is retrieved.</p></li>\n<li><p><b>exptime</b> \u2212 It is the expiration time in seconds. 0 means no delay. If exptime is more\nthan 30 days, Memcached uses it as a UNIX timestamp for expiration.</p></li>\n<li><p><b>bytes</b> \u2212 It is the number of bytes in the data block that needs to be stored. This is the\nlength of the data that needs to be stored in Memcached.</p></li>\n<li><p><b>noreply (optional)</b> \u2212 It is a parameter that informs the server not to send any reply.</p></li>\n<li><p><b>value</b> \u2212 It is the data that needs to be stored. The data needs to be passed on the new line after executing the command with the above options.</p></li>\n</ul>\n<h3>Output</h3>\n<p>The output of the command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nSTORED\n</pre>\n<ul class=\"list\">\n<li><p><b>STORED</b> indicates success.</p></li>\n<li><p><b>NOT_STORED</b> indicates the data is not stored in Memcached.</p></li>\n</ul>\n<h3>Example</h3>\n<p>In the following example, we use \u2018key\u2019 as the key and add the value Memcached in it with an expiration time of 900 seconds.</p>\n<pre class=\"result notranslate\">\nadd key 0 900 9\nmemcached\nSTORED\nget key\nVALUE key 0 9\nMemcached\nEND\n</pre>\n<h3>Failure Output</h3>\n<pre class=\"result notranslate\">\nadd key 0 900 5\nredis\nNOT_STORED\n</pre>\n<h2>Add Data Using Java Application</h2>\n<p>To add data in a Memcached server, you need to use the Memcached <b>add</b> method.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      \n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server successful\");\n      System.out.println(\"add status:\"+mcc.add(\"tutorialspoint\", 900, \"redis\").done);\n      System.out.println(\"add status:\"+mcc.add(\"tp\", 900, \"redis\").done);\n      \n      // Get value from cache\n      System.out.println(\"Get from Cache tp:\"+mcc.get(\"tp\"));\n   }\n}\n</pre>\n<h3>Output</h3>\n<p>On compiling and executing the program, you get to see the following output \u2212</p>\n<pre class=\"result notranslate\">\nConnection to server successful\nadd status:false\nadd status:true\nGet from Cache tp:redis\n</pre>\n<h1>Memcached - Replace Data</h1>\n<p>Memcached <b>replace</b> command is used to replace the value of an existing key. If the key\ndoes not exist, then it gives the output NOT_STORED.</p>\n<h3>Syntax</h3>\n<p>The basic syntax of Memcached <b>replace</b> command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nreplace key flags exptime bytes [noreply]\nvalue\n</pre>\n<p>The keywords in the syntax are as described below \u2212</p>\n<ul class=\"list\">\n<li><p><b>key</b> \u2212 It is the name of the key by which data is stored and retrieved from Memcached.</p></li>\n<li><p><b>flags</b> \u2212 It is the 32-bit unsigned integer that the server stores with the data provided by the user, and returns along with the data when the item is retrieved.</p></li>\n<li><p><b>exptime</b> \u2212 It is the expiration time in seconds. 0 means no delay. If exptime is more than 30 days, Memcached uses it as a UNIX timestamp for expiration.</p></li>\n<li><p><b>bytes</b> \u2212 It is the number of bytes in the data block that needs to be stored. This is the length of the data that needs to be stored in the Memcached.</p></li>\n<li><p><b>noreply (optional)</b> \u2212 It is a parameter that informs the server not to send any\nreply.</p></li>\n<li><p><b>value</b> \u2212 It is the data that needs to be stored. The data needs to be passed on the new line after executing the command with the above options.</p></li>\n</ul>\n<h3>Output</h3>\n<p>The output of the command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nSTORED\n</pre>\n<ul class=\"list\">\n<li><p><b>STORED</b> indicates success.</p></li>\n<li><p><b>NOT_STORED</b> indicates the data is not stored in Memcached.</p></li>\n</ul>\n<h3>Example</h3>\n<p>In the following example, we use \u2018key\u2019 as the key and store memcached in it with an expiration time of 900 seconds. After this, the same key is replaced with the value \u2018redis\u2019.</p>\n<pre class=\"result notranslate\">\nadd key 0 900 9\nmemcached\nSTORED\nget key\nVALUE key 0 9\nmemcached\nEND\nreplace key 0 900 5\nredis\nget key\nVALUE key 0 5\nredis\nEND\n</pre>\n<h2>Replace Data Using Java Application</h2>\n<p>To replace data in a Memcached server, you need to use the Memcached <b>replace</b> method.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      \n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server sucessfully\");\n      System.out.println(\"set status:\"+mcc.set(\"tutorialspoint\", 900, \"memcached\").done);\n      \n      // Get value from cache\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n      \n      // now replace the existing data\n      System.out.println(\"Replace cache:\"+mcc.replace(\"tutorialspoint\", 900, \"redis\").done);\n      \n      // get the updated data\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n   }\n}\n</pre>\n<h3>Output</h3>\n<p>On compiling and executing the program, you get to see the following output \u2212</p>\n<pre class=\"result notranslate\">\nConnection to server successfully\nset status:true\nGet from Cache:memcached\nReplace cache:true\nGet from Cache:redis\n</pre>\n<h1>Memcached - Append Data</h1>\n<p>Memcached <b>append</b> command is used to add some data in an existing key. The data is stored after the existing data of the key.</p>\n<h3>Syntax</h3>\n<p>The basic syntax of Memcached <b>append</b> command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nappend key flags exptime bytes [noreply]\nvalue\n</pre>\n<p>The keywords in the syntax are as described below\u2212</p>\n<ul class=\"list\">\n<li><p><b>key</b> \u2212 It is the name of the key by which data is stored and retrieved from\nMemcached.</p></li>\n<li><p><b>flags</b> \u2212 It is the 32-bit unsigned integer that the server stores with the data provided by the user, and returns along with the data when the item is retrieved.</p></li>\n<li><p><b>exptime</b> \u2212 It is the expiration time in seconds. 0 means no delay. If exptime is more than 30 days, Memcached uses it as a UNIX timestamp for expiration.</p></li>\n<li><p><b>bytes</b> \u2212 It is the number of bytes in the data block that needs to be stored. This is the length of the data that needs to be stored in Memcached.</p></li>\n<li><p><b>noreply (optional)</b> \u2212 It is a parameter that informs the server not send any reply.</p></li>\n<li><p><b>value</b> \u2212 It is the data that needs to be stored. The data needs to be passed on the new line after executing the command with the above options.</p></li>\n</ul>\n<h3>Output</h3>\n<p>The output of the command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nSTORED\n</pre>\n<ul class=\"list\">\n<li><p><b>STORED</b> indicates success.</p></li>\n<li><p><b>NOT_STORED</b> indicates the key does not exist in the Memcached server.</p></li>\n<li><p><b>CLIENT_ERROR</b> indicates error.</p></li>\n</ul>\n<h3>Example</h3>\n<p>In the following example, we try to add some data in a key that does not exist. Hence, Memcached returns <b>NOT_STORED</b>. After this, we set one key and append data into it.</p>\n<pre class=\"result notranslate\">\nappend tutorials 0 900 5\nredis\nNOT_STORED\nset tutorials 0 900 9\nmemcached\nSTORED\nget tutorials\nVALUE tutorials 0 14\nmemcached\nEND\nappend tutorials 0 900 5\nredis\nSTORED\nget tutorials\nVALUE tutorials 0 14\nmemcachedredis\nEND\n</pre>\n<h2>Append Data Using Java Application</h2>\n<p>To append data in a Memcached server, you need to use the Memcached <b>append</b> method.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      \n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server successful\");\n      System.out.println(\"set status:\"+mcc.set(\"tutorialspoint\", 900, \"memcached\").isDone());\n      \n      // Get value from cache\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n      \n      // now append some data into existing key\n      System.out.println(\"Append to cache:\"+mcc.append(\"tutorialspoint\", \"redis\").isDone());\n      \n      // get the updated key\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n   }\n}\n</pre>\n<h3>Output</h3>\n<p>On compiling and executing the program, you get to see the following output \u2212</p>\n<pre class=\"result notranslate\">\nConnection to server successful\nset status:true\nGet from Cache:memcached\nAppend to cache:true\nGet from Cache:memcachedredis\n</pre>\n<h1>Memcached - Prepend Data</h1>\n<p>Memcached <b>prepend</b> command is used to add some data in an existing key. The data is stored before the existing data of the key.</p>\n<h3>Syntax</h3>\n<p>The basic syntax of Memcached <b>prepend</b> command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nprepend key flags exptime bytes [noreply]\nvalue\n</pre>\n<p>The keywords in the syntax are as described below\u2212</p>\n<ul class=\"list\">\n<li><p><b>key</b> \u2212 It is the name of the key by which data is stored and retrieved in\nMemcached.</p></li>\n<li><p><b>flags</b> \u2212 It is the 32-bit unsigned integer that the server stores with the data provided by the user, and returns along with the data when the item is retrieved.</p></li>\n<li><p><b>exptime</b> \u2212 It is the expiration time in seconds. 0 means no delay. If exptime is more than 30 days, Memcached uses it as a UNIX timestamp for expiration.</p></li>\n<li><p><b>bytes</b> \u2212 It is the number of bytes in the data block that needs to be stored. This is the length of the data that needs to be stored in Memcached.</p></li>\n<li><p><b>noreply (optional)</b> \u2212It is a parameter that informs the server not send any reply.</p></li>\n<li><p><b>value</b> \u2212 It is the data that needs to be stored. Data needs to be passed on the new line after executing the command with the above options.</p></li>\n</ul>\n<h3>Output</h3>\n<p>The output of the command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nSTORED\n</pre>\n<ul class=\"list\">\n<li><p><b>STORED</b> indicates success.</p></li>\n<li><p><b>NOT_STORED</b> indicates the key does not exist in the Memcached server.</p></li>\n<li><p><b>CLIENT_ERROR</b> indicates error.</p></li>\n</ul>\n<h3>Example</h3>\n<p>In the following example, we add some data in a key that does not exist. Hence, Memcached returns <b>NOT_STORED</b>. After this, we set one key and prepend data into it.</p>\n<pre class=\"result notranslate\">\nprepend tutorials 0 900 5\nredis\nNOT_STORED\nset tutorials 0 900 9\nmemcached\nSTORED\nget tutorials\nVALUE tutorials 0 14\nmemcached\nEND\nprepend tutorials 0 900 5\nredis\nSTORED\nget tutorials\nVALUE tutorials 0 14\nredismemcached\nEND\n</pre>\n<h2>Prepend Data Using Java Application</h2>\n<p>To prepend data in a Memcached server, you need to use the Memcached <b>prepend</b> method.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server successful\");\n      System.out.println(\"set status:\"+mcc.set(\"tutorialspoint\", 900, \"memcached\").isDone());\n      \n      // Get value from cache\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n      \n      // now append some data into existing key\n      System.out.println(\"Prepend to cache:\"+mcc.prepend(\"tutorialspoint\", \"redis\").isDone());\n      \n      // get the updated key\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n   }\n}\n</pre>\n<h3>Output</h3>\n<p>On compiling and executing the program, you get to see the following output \u2212</p>\n<pre class=\"result notranslate\">\nConnection to server successful\nset status:true\nGet from Cache:memcached\nPrepend to cache:true\nGet from Cache:redismemcached\n</pre>\n<h1>Memcached - CAS Command</h1>\n<p>CAS stands for Check-And-Set or Compare-And-Swap. Memcached <b>CAS</b> command is used to set the data if it is not updated since last fetch. If the key does not exist in Memcached, then it returns <b>NOT_FOUND</b>.</p>\n<h3>Syntax</h3>\n<p>The basic syntax of Memcached <b>CAS</b> command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nset key flags exptime bytes unique_cas_key [noreply]\nvalue\n</pre>\n<p>The keywords in the syntax are as described below\u2212</p>\n<ul class=\"list\">\n<li><p><b>key</b> \u2212 It is the name of the key by which data is stored and retrieved from Memcached.</p></li>\n<li><p><b>flags</b> \u2212 It is the 32-bit unsigned integer that the server stores with the data provided by the user, and returns along with the data when the item is retrieved.</p></li>\n<li><p><b>exptime</b> \u2212 It is the expiration time in seconds. 0 means no delay. If exptime is more than 30 days, Memcached uses it as a UNIX timestamp for expiration.</p></li>\n<li><p><b>bytes</b> \u2212 It is the number of bytes in the data block that needs to be stored. This is the length of the data that needs to be stored in Memcached.</p></li>\n<li><p><b>unique_cas_key</b> \u2212 It is the unique key get from gets command.</p></li>\n<li><p><b>noreply (optional)</b> \u2212 It is a parameter that informs the server not to send any\nreply.</p></li>\n<li><p><b>value</b> \u2212 It is the data that needs to be stored. Data needs to be passed on new line after executing the command with the above options.</p></li>\n</ul>\n<h3>Output</h3>\n<p>The output of the command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nSTORED\n</pre>\n<ul class=\"list\">\n<li><p><b>STORED</b> indicates success.</p></li>\n<li><p><b>ERROR</b>  indicates error while saving data or wrong syntax.</p></li>\n<li><p><b>EXISTS</b> indicates that someone has modified the CAS data since last fetch.</p></li>\n<li><p><b>NOT_FOUND</b> indicates that the key does not exist in the Memcached server.</p></li>\n</ul>\n<h3>Example</h3>\n<p>To execute a CAS command in Memcached, you need to get a CAS token from the Memcached gets command.</p>\n<pre class=\"result notranslate\">\ncas tp 0 900 9\nERROR\ncas tp 0 900 9 2\nmemcached\nset tp 0 900 9\nmemcached\nSTORED\ngets tp\nVALUE tp 0 9 1\nmemcached\nEND\ncas tp 0 900 5 2\nredis\nEXISTS\ncas tp 0 900 5 1\nredis\nSTORED\nget tp\nVALUE tp 0 5\nredis\nEND\n</pre>\n<h2>CAS Using Java Application</h2>\n<p>To get CAS data from a Memcached server, you need to use Memcached <b>gets</b> method.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n     \n     // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server successful\");\n      System.out.println(\"set status:\"+mcc.set(\"tutorialspoint\", 900, \"memcached\").isDone());\n\n      // Get cas token from cache\n      long castToken = mcc.gets(\"tutorialspoint\").cas;\n      System.out.println(\"Cas token:\"+castToken);\n\n      // now set new data in memcached server\n      System.out.println(\"Now set new data:\"+mcc.cas(\"tutorialspoint\",\n      castToken, 900, \"redis\"));\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n   }\n}\n</pre>\n<h3>Output</h3>\n<p>On compiling and executing the program, you get to see the following output \u2212</p>\n<pre class=\"result notranslate\">\nConnection to server successful\nset status:true\nCas token:3\nNow set new data:OK\nGet from Cache:redis\n</pre>\n<h1>Memcached - Get Data</h1>\n<p>Memcached <b>get</b> command is used to get the value stored at key. If the key does not exist in Memcached, then it returns nothing.</p>\n<h3>Syntax</h3>\n<p>The basic syntax of Memcached <b>get</b> command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nget key\n</pre>\n<h3>Example</h3>\n<p>In the following example, we use tutorialspoint as the key and store memcached in it with an expiration time of 900 seconds.</p>\n<pre class=\"result notranslate\">\nset tutorialspoint 0 900 9\nmemcached\nSTORED\nget tutorialspoint\nVALUE tutorialspoint 0 9\nmemcached\nEND\n</pre>\n<h2>Get Data Using Java Application</h2>\n<p>To get data from a Memcached server, you need to use the Memcached <b>get</b> method.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server sucessfully\");\n      System.out.println(\"set status:\"+mcc.set(\"tutorialspoint\", 900, \"memcached\").done);\n     \n     // Get value from cache\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n   }\n}\n</pre>\n<h3>Output</h3>\n<p>On compiling and executing the program, you get to see the following output \u2212</p>\n<pre class=\"result notranslate\">\nConnection to server successfully\nset status:true\nGet from Cache:memcached\n</pre>\n<h1>Memcached - Get CAS Data</h1>\n<p>Memcached <b>gets</b> command is used to get the value with CAS token. If the key does not exist in Memcached, then it returns nothing.</p>\n<h3>Syntax</h3>\n<p>The basic syntax of Memcached <b>gets</b> command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nget key\n</pre>\n<h3>Example</h3>\n<pre class=\"result notranslate\">\nset tutorialspoint 0 900 9\nmemcached\nSTORED\ngets tutorialspoint\nVALUE tutorialspoint 0 9 1\nmemcached\nEND\n</pre>\n<p>In this example, we use tutorialspoint as the key and store memcached in it with an expiration time of 900 seconds.</p>\n<h2>Get CAS Data Using Java Application</h2>\n<p>To get CAS data from a Memcached server, you need to use the Memcached <b>gets</b> method.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      \n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server sucessfully\");\n      System.out.println(\"set status:\"+mcc.set(\"tutorialspoint\", 900, \"memcached\").done);\n      \n      // Get value from cache\n      System.out.println(\"Get from Cache:\"+mcc.gets(\"tutorialspoint\"));\n   }\n}\n</pre>\n<h3>Output</h3>\n<p>On compiling and executing the program, you get to see the following output \u2212</p>\n<pre class=\"result notranslate\">\nConnection to server successfully\nset status:true\nGet from Cache:{CasValue 2/memcached}\n</pre>\n<h1>Memcached - Delete Key</h1>\n<p>Memcached <b>delete</b> command is used to delete an existing key from the Memcached server.</p>\n<h2>Syntax</h2>\n<p>The basic syntax of Memcached <b>delete</b> command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\ndelete key [noreply]\n</pre>\n<h3>Output</h3>\n<p>CAS command may produce one of the following result  \u2212</p>\n<ul class=\"list\">\n<li><p><b>DELETED</b> indicates successful deletion.</p></li>\n<li><p><b>ERROR</b> indicates error while deleting data or wrong syntax.</p></li>\n<li><p><b>NOT_FOUND</b> indicates that the key does not exist in the Memcached server.</p></li>\n</ul>\n<h3>Example</h3>\n<p>In this example, we use tutorialspoint as a key and store memcached in it with an expiration time of 900 seconds. After this, it deletes the stored key.</p>\n<pre class=\"result notranslate\">\nset tutorialspoint 0 900 9\nmemcached\nSTORED\nget tutorialspoint\nVALUE tutorialspoint 0 9\nmemcached\nEND\ndelete tutorialspoint\nDELETED\nget tutorialspoint\nEND\ndelete tutorialspoint\nNOT_FOUND\n</pre>\n<h2>Delete Data Using Java Application</h2>\n<p>To delete data from a Memcached server, you need to use the Memcached <b>delete</b> method.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\nimport java.net.InetSocketAddress;\nimport java.util.concurrent.Future;\n\nimport net.spy.memcached.MemcachedClient;\n\npublic class MemcachedJava {\n   public static void main(String[] args) {\n   \n      try{\n   \n         // Connecting to Memcached server on localhost\n         MemcachedClient mcc = new MemcachedClient(new InetSocketAddress(\"127.0.0.1\", 11211));\n         System.out.println(\"Connection to server sucessful.\");\n\n         // add data to memcached server\n         Future fo = mcc.set(\"tutorialspoint\", 900, \"World's largest online tutorials library\");\n\n         // print status of set method\n         System.out.println(\"set status:\" + fo.get());\n\n         // retrieve and check the value from cache\n         System.out.println(\"tutorialspoint value in cache - \" + mcc.get(\"tutorialspoint\"));\n\n         // try to add data with existing key\n         Future fo = mcc.<b>delete</b>(\"tutorialspoint\");\n\n         // print status of delete method\n         System.out.println(\"delete status:\" + fo.get());\n\n         // retrieve and check the value from cache\n         System.out.println(\"tutorialspoint value in cache - \" + mcc.get(\"codingground\"));\n\n         // Shutdowns the memcached client\n         mcc.shutdown();\n         \n      }catch(Exception ex)\n         System.out.println(ex.getMessage());\n   }\n}\n</pre>\n<h3>Output</h3>\n<p>On compiling and executing the program, you get to see the following output \u2212</p>\n<pre class=\"result notranslate\">\nConnection to server successful\nset status:true\ntutorialspoint value in cache - World's largest online tutorials library\ndelete status:true\ntutorialspoint value in cache - null\n</pre>\n<h1>Memcached - Delete data</h1>\n<p>Memcached <b>delete</b> command is used to delete an existing key from the Memcached server.</p>\n<h3>Syntax</h3>\n<p>The basic syntax of Memcached <b>delete</b> command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\ndelete key\n</pre>\n<p>If the key is successfully deleted, then it returns DELETED. If the key is not found, then it returns NOT_FOUND, otherwise it returns ERROR.</p>\n<h3>Example</h3>\n<p>In this example, we use tutorialspoint as a key and store memcached in it with an expiration time of 900 seconds. After this, it deletes the stored key.</p>\n<pre class=\"result notranslate\">\nset tutorialspoint 0 900 9\nmemcached\nSTORED\nget tutorialspoint\nVALUE tutorialspoint 0 9\nmemcached\nEND\ndelete tutorialspoint\nDELETED\nget tutorialspoint\nEND\ndelete tutorialspoint\nNOT_FOUND\n</pre>\n<h2>Delete Data Using Java Application</h2>\n<p>To delete data from a Memcached server, you need to use the Memcached <b>delete</b> method.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      \n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server successful\");\n      System.out.println(\"set status:\"+mcc.set(\"tutorialspoint\", 900, \"memcached\").done);\n      \n      // Get value from cache\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n      \n      // delete value from cache\n      System.out.println(\"Delete from Cache:\"+mcc.delete(\"tutorialspoint\").isDone());\n      \n      // check whether value exists or not\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n   }\n}\n</pre>\n<h3>Output</h3>\n<p>On compiling and executing the program, you get to see the following output \u2212</p>\n<pre class=\"result notranslate\">\nConnection to server successful\nset status:true\nGet from Cache:memcached\nDelete from Cache:true\nGet from Cache:null\n</pre>\n<h1>Memcached - Increment Decrement Data</h1>\n<p>Memcached <b>incr</b> and <b>decr</b> commands are used to increment or decrement the numeric value of an existing key. If the key is not found, then it returns <b>NOT_FOUND</b>. If the key is not numeric, then it returns <b>CLIENT_ERROR cannot increment or decrement non-numeric value</b>. Otherwise, <b>ERROR</b> is returned.</p>\n<h3>Syntax - incr</h3>\n<p>The basic syntax of Memcached <b>incr</b> command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nincr key increment_value\n</pre>\n<h3>Example</h3>\n<p>In this example, we use visitors as key and set 10 initially into it, thereafter we increment the visitors by 5.</p>\n<pre class=\"result notranslate\">\nset visitors 0 900 2\n10\nSTORED\nget visitors\nVALUE visitors 0 2\n10\nEND\nincr visitors 5\n15\nget visitors\nVALUE visitors 0 2\n15\nEND\n</pre>\n<h3>Syntax - decr</h3>\n<p>The basic syntax of Memcached <b>decr</b> command is as shown below</p>\n<pre class=\"result notranslate\">\ndecr key decrement_value\n</pre>\n<h3>Example</h3>\n<pre class=\"result notranslate\">\nset visitors 0 900 2\n10\nSTORED\nget visitors\nVALUE visitors 0 2\n10\nEND\ndecr visitors 5\n5\nget visitors\nVALUE visitors 0 1\n5\nEND\n</pre>\n<h2>Incr/Decr Using Java Application</h2>\n<p>To increment or decrement data in a Memcached server, you need to use Memcached <b>incr or decr</b> methods respectively.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      \n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server sucessfully\");\n      System.out.println(\"set status:\"+mcc.set(\"count\", 900, \"5\").isDone());\n      \n      // Get value from cache\n      System.out.println(\"Get from Cache:\"+mcc.get(\"count\"));\n      \n      // now increase the stored value\n      System.out.println(\"Increment value:\"+mcc.incr(\"count\", 2));\n      \n      // now decrease the stored value\n      System.out.println(\"Decrement value:\"+mcc.decr(\"count\", 1));\n      \n      // now get the final stored value\n      System.out.println(\"Get from Cache:\"+mcc.get(\"count\"));\n   }\n}\n</pre>\n<h3>Output</h3>\n<p>On compiling and executing the program, you get to see the following output \u2212</p>\n<pre class=\"result notranslate\">\nConnection to server successfully\nset status:true\nGet from Cache:5\nIncrement value:7\nDecrement value:6\nGet from Cache:6\n</pre>\n<h1>Memcached - Stats</h1>\n<p>Memcached <b>stats</b> command is used to return server statistics such as PID, version, connections, etc.</p>\n<h2>Syntax</h2>\n<p>The basic syntax of Memcached <b>stats</b> command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nstats\n</pre>\n<h3>Example</h3>\n<pre class=\"result notranslate\">\nstats\nSTAT pid 1162\nSTAT uptime 5022\nSTAT time 1415208270\nSTAT version 1.4.14\nSTAT libevent 2.0.19-stable\nSTAT pointer_size 64\nSTAT rusage_user 0.096006\nSTAT rusage_system 0.152009\nSTAT curr_connections 5\nSTAT total_connections 6\n\nSTAT connection_structures 6\nSTAT reserved_fds 20\nSTAT cmd_get 6\nSTAT cmd_set 4\nSTAT cmd_flush 0\nSTAT cmd_touch 0\nSTAT get_hits 4\nSTAT get_misses 2\nSTAT delete_misses 1\nSTAT delete_hits 1\n\nSTAT incr_misses 2\nSTAT incr_hits 1\nSTAT decr_misses 0\nSTAT decr_hits 1\nSTAT cas_misses 0\nSTAT cas_hits 0\nSTAT cas_badval 0\nSTAT touch_hits 0\nSTAT touch_misses 0\nSTAT auth_cmds 0\n\nSTAT auth_errors 0\nSTAT bytes_read 262\nSTAT bytes_written 313\nSTAT limit_maxbytes 67108864\nSTAT accepting_conns 1\nSTAT listen_disabled_num 0\nSTAT threads 4\nSTAT conn_yields 0\nSTAT hash_power_level 16\n\nSTAT hash_bytes 524288\nSTAT hash_is_expanding 0\nSTAT expired_unfetched 1\nSTAT evicted_unfetched 0\nSTAT bytes 142\nSTAT curr_items 2\nSTAT total_items 6\nSTAT evictions 0\nSTAT reclaimed 1\nEND\n</pre>\n<h2>Stats Using Java Application</h2>\n<p>To get stats from a Memcached server, you need to use the Memcached <b>stats</b> method.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      \n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server successful\");\n      System.out.println(\"Stats:\"+mcc.stats);\n   }\n}\n</pre>\n<h3>Output</h3>\n<p>On compiling and executing the program, you get to see the following output \u2212</p>\n<pre class=\"result notranslate\">\nConnection to server successful\nStats:[/127.0.0.1:11211:[delete_hits:0, bytes:71, total_items:4,\nrusage_system:0.220013, touch_misses:0, cmd_touch:0, listen_disabled_num:0,\nauth_errors:0, evictions:0, version:1.4.14, pointer_size:64, time:1417279366,\nincr_hits:1, threads:4, expired_unfetched:0, limit_maxbytes:67108864,\nhash_is_expanding:0, bytes_read:170, curr_connections:8, get_misses:1,\nreclaimed:0, bytes_written:225, hash_power_level:16, connection_structures:9,\ncas_hits:0, delete_misses:0, total_connections:11, rusage_user:0.356022,\ncmd_flush:0, libevent:2.0.19-stable, uptime:12015, reserved_fds:20,\ntouch_hits:0, cas_badval:0, pid:1138, get_hits:2, curr_items:1, cas_misses:0,\naccepting_conns:1, evicted_unfetched:0, cmd_get:3, cmd_set:2, auth_cmds:0,\nincr_misses:1, hash_bytes:524288, decr_misses:1, decr_hits:1, conn_yields:0]]\n</pre>\n<h1>Memcached - Stats Items</h1>\n<p>Memcached <b>stats items</b> command is used to get items statistics such as count, age,\neviction, etc. organized by slabs ID.</p>\n<h2>Syntax</h2>\n<p>The basic syntax of Memcached <b>stats items</b> command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nstats items\n</pre>\n<h3>Example</h3>\n<pre class=\"result notranslate\">\nstats items\nSTAT items:1:number 1\nSTAT items:1:age 7\nSTAT items:1:evicted 0\nSTAT items:1:evicted_nonzero 0\nSTAT items:1:evicted_time 0\nSTAT items:1:outofmemory 0\nSTAT items:1:tailrepairs 0\nSTAT items:1:reclaimed 0\nSTAT items:1:expired_unfetched 0\nSTAT items:1:evicted_unfetched 0\nEND\n</pre>\n<h1>Memcached - Stats Slabs</h1>\n<p>Memcached <b>stats slabs</b> command displays slabs statistics such as size, memory usage, commands, count etc. organized by slabs ID.</p>\n<h2>Syntax</h2>\n<p>The basic syntax of Memcached <b>stats slabs</b> command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nstats slabs\n</pre>\n<h3>Example</h3>\n<pre class=\"result notranslate\">\nstats slabs\nSTAT 1:chunk_size 96\nSTAT 1:chunks_per_page 10922\nSTAT 1:total_pages 1\nSTAT 1:total_chunks 10922\nSTAT 1:used_chunks 1\nSTAT 1:free_chunks 10921\nSTAT 1:free_chunks_end 0\nSTAT 1:mem_requested 71\nSTAT 1:get_hits 0\nSTAT 1:cmd_set 1\nSTAT 1:delete_hits 0\nSTAT 1:incr_hits 0\nSTAT 1:decr_hits 0\nSTAT 1:cas_hits 0\nSTAT 1:cas_badval 0\nSTAT 1:touch_hits 0\nSTAT active_slabs 1\nSTAT total_malloced 1048512\nEND\n</pre>\n<h1>Memcached - Stats Sizes</h1>\n<p>Memcached <b>stats sizes</b> command provides information about the sizes and number of items of each size within the cache. The information is returned in two columns. The first column is the size of the item (rounded up to the nearest 32 byte boundary), and the second column is the count of the number of items of that size within the cache.</p>\n<h2>Syntax</h2>\n<p>The basic syntax of Memcached <b>stats sizes</b> command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nstats sizes\n</pre>\n<h3>Example</h3>\n<pre class=\"result notranslate\">\nstats sizes\nSTAT 96 1\nEND\n</pre>\n<p>The item size statistics are useful only to determine the sizes of the objects you are storing. Since the actual memory allocation is relevant only in terms of the chunk size and page size, the information is only useful during a careful debugging or diagnostic session.</p>\n<h1>Memcached - Clear Data</h1>\n<p>Memcached <b>flush_all</b> command is used to delete all data (key-value pairs) from the Memcached server. It accepts an optional parameter called <b>time</b> that sets a time after which the Memcached data is to be cleared.</p>\n<h2>Syntax</h2>\n<p>The basic syntax of Memcached <b>flush_all</b> command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nflush_all [time] [noreply]\n</pre>\n<p>The above command always returns OK.</p>\n<h3>Example</h3>\n<p>In the following example, we store some data into the Memcached server and then clear all the data.</p>\n<pre class=\"result notranslate\">\nset tutorialspoint 0 900 9\nmemcached\nSTORED\nget tutorialspoint\nVALUE tutorialspoint 0 9\nmemcached\nEND\nflush_all\nOK\nget tutorialspoint\nEND\n</pre>\n<h2>Clear Data Using Java Application</h2>\n<p>To clear data from a Memcached server, you need to use the Memcached <b>flush</b> method.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n     \n     // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server sucessfully\");\n      System.out.println(\"set status:\"+mcc.set(\"count\", 900, \"5\").isDone());\n      \n      // Get value from cache\n      System.out.println(\"Get from Cache:\"+mcc.get(\"count\"));\n     \n      // now increase the stored value\n      System.out.println(\"Increment value:\"+mcc.incr(\"count\", 2));\n     \n      // now decrease the stored value\n      System.out.println(\"Decrement value:\"+mcc.decr(\"count\", 1));\n      \n      // now get the final stored value\n      System.out.println(\"Get from Cache:\"+mcc.get(\"count\"));\n      \n      // now clear all this data\n      System.out.println(\"Clear data:\"+mcc.flush().isDone());\n   }\n}\n</pre>\n<h3>Output</h3>\n<p>On compiling and executing the program, you get to see the following output \u2212</p>\n<pre class=\"result notranslate\">\nConnection to server successfully\nset status:true\nGet from Cache:5\nIncrement value:7\nDecrement value:6\nGet from Cache:6\nClear data:true\n</pre>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/memcached/memcached_clear_data.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/memcached/memcached_useful_resources.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n<div class=\"row\">\n<div class=\"col-md-3\" id=\"rightbar\">\n<div class=\"simple-ad\">\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.facebook.com/sharer.php?u=' + 'https://www.tutorialspoint.com/memcached/memcached_quick_guide.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/facebookIcon.jpg\">\n</img></a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://twitter.com/share?url=' + 'https://www.tutorialspoint.com/memcached/memcached_quick_guide.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/twitterIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'https://www.tutorialspoint.com/memcached/memcached_quick_guide.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/linkedinIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=https://www.tutorialspoint.com/memcached/memcached_quick_guide.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/googlePlusIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.stumbleupon.com/submit?url=https://www.tutorialspoint.com/memcached/memcached_quick_guide.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/StumbleUponIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://reddit.com/submit?url=https://www.tutorialspoint.com/memcached/memcached_quick_guide.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/reddit.jpg\"/>\n</a>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\ngoogle_ad_format = \"300x250_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 600;\ngoogle_ad_format = \"300x600_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"ca-pub-2537027957187252\";\n/* Right Side Ad */\ngoogle_ad_slot = \"right_side_ad\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\n//-->\n</script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"footer-copyright\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-1\">\n<a class=\"logo\" href=\"index.htm\"> <img alt=\"Tutorials Point\" class=\"img-responsive\" src=\"/scripts/img/logo-footer.png\"/> </a>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<nav id=\"sub-menu\">\n<ul>\n<li><a href=\"/about/about_privacy.htm\">Privacy Policy</a></li>\n<li><a href=\"/about/about_cookies.htm\">Cookies Policy</a></li>\n<li><a href=\"/about/contact_us.htm\">Contact</a></li>\n</ul>\n</nav>\n</div>\n<div class=\"col-md-3 col-sm-12 col-xs-12\">\n<p>\u00a9 Copyright 2019. All Rights Reserved.</p>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<div class=\"news-group\">\n<input autocomplete=\"off\" class=\"form-control-foot search\" id=\"textemail\" name=\"textemail\" onblur=\"if (this.value == '') {this.value = 'Enter email for newsletter...';}\" onfocus=\"if (this.value == 'Enter email for newsletter...') {this.value = '';}\" placeholder=\"Enter email for newsletter\" type=\"text\"/>\n<span class=\"input-group-btn\"> <button class=\"btn btn-default btn-footer\" id=\"btnemail\" onclick=\"javascript:void(0);\" type=\"submit\">go</button> </span>\n<div id=\"newsresponse\"></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"privacy-banner\">\n<div>\n<p>\n      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.\n      <a href=\"javascript:void(0)\" id=\"banner-accept\">Accept</a>\n<a href=\"/about/about_cookies.htm\" id=\"banner-learn\" target=\"_blank\">Learn more</a>\n</p>\n</div>\n</div>\n<script>\n// Banner Trigger if Not Closed\nif (!localStorage.bannerClosed) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n} else {\n  document.getElementById('privacy-banner').style.display = \"none\";\n}\ndocument.getElementById('banner-accept').addEventListener('click', function() {\n  document.getElementById('privacy-banner').style.display = \"none\";\n  localStorage.bannerClosed = 'true';\n});\nif (navigator.userAgent.match(/Opera|OPR\\//)) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n}\n</script>\n<!-- Libs -->\n<script src=\"/theme/js/custom-min.js?v=7\"></script>\n<script src=\"https://www.google-analytics.com/urchin.js\">\n</script>\n<script>\n_uacct = \"UA-232293-6\";\nurchinTracker();\n$('.pg-icon').click(function(){\n   $('.wrapLoader').show();\n});\n</script>\n\n\n\n", "title": "Memcached - Quick Guide", "content_html": "<div class=\"col-md-7 middle-col\">\n<h1>Memcached - Quick Guide</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/memcached/memcached_clear_data.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/memcached/memcached_useful_resources.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<h1>Memcached - Overview</h1>\n<p>Memcached is an open source, high-performance, distributed memory caching system intended to speed up dynamic web applications by reducing the database load. It is a key-value dictionary of strings, objects, etc., stored in the memory, resulting from database calls, API calls, or page rendering.</p>\n<p>Memcached was developed by Brad Fitzpatrick for LiveJournal in 2003. However, it is now being used by Netlog, Facebook, Flickr, Wikipedia, Twitter, and YouTube among others.</p>\n<p>The key features of Memcached are as follows \u2212</p>\n<ul class=\"list\">\n<li><p>It is open source.</p></li>\n<li><p>Memcached server is a big hash table.</p></li>\n<li><p>It significantly reduces the database load</p></li>\n<li><p>It is perfectly efficient for websites with high database load.</p></li>\n<li><p>It is distributed under Berkeley Software Distribution (BSD) license.</p></li>\n<li><p>It is a client-server application over TCP or UDP.</p></li>\n</ul>\n<h3>Memcached is not \u2212</h3>\n<ul class=\"list\">\n<li><p>a persistent data store</p></li>\n<li><p>a database</p></li>\n<li><p>application-specific</p></li>\n<li><p>a large object cache</p></li>\n<li><p>fault-tolerant or highly available</p></li>\n</ul>\n<h1>Memcached - Environment</h1>\n<h2>Installing Memcached on Ubuntu</h2>\n<p>To install Memcached on Ubuntu, go to terminal and type the following commands \u2212</p>\n<pre class=\"result notranslate\">\n$sudo apt-get update\n$sudo apt-get install memcached\n</pre>\n<h3>Confirming Memcached Installation</h3>\n<p>To confirm if Memcached is installed or not, you need to run the command given below. This command shows that Memcached is running on the default port <b>11211</b>.</p>\n<pre class=\"result notranslate\">\n$ps aux | grep memcached\n</pre>\n<p>To run Memcached server on a different port, execute the command given below. This command starts the server on the TCP port 11111 and listens on the UDP port 11111 as a daemon process.</p>\n<pre class=\"result notranslate\">\n$memcached -p 11111 -U 11111 -u user -d\n</pre>\n<p>You can run multiple instances of Memcached server through a single installation.</p>\n<h2>Memcached Java Environment Setup</h2>\n<p>To use Memcached in your Java program, you need to download <b><a href=\"https://code.google.com/archive/p/spymemcached/downloads\" rel=\"nofollow\" target=\"_blank\">spymemcached-2.10.3.jar</a></b> and setup this jar into the classpath.</p>\n<h1>Memcached - Connection</h1>\n<p>To connect to a Memcached server, you need to use the telnet command on HOST and PORT names.</p>\n<h3>Syntax</h3>\n<p>The basic syntax of Memcached telnet command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\n$telnet HOST PORT\n</pre>\n<p>Here, <b>HOST</b> and <b>PORT</b> are machine IP and port number respectively, on which the Memcached server is executing.</p>\n<h3>Example</h3>\n<p>The following example shows how to connect to a Memcached server and execute a simple set and get command. Assume that the Memcached server is running on host 127.0.0.1 and port 11211.</p>\n<pre class=\"result notranslate\">\n$telnet 127.0.0.1 11211\nTrying 127.0.0.1...\nConnected to 127.0.0.1.\nEscape character is '^]'.\n// now store some data and get it from memcached server\nset tutorialspoint 0 900 9\nmemcached\nSTORED\nget tutorialspoint\nVALUE tutorialspoint 0 9\nmemcached\nEND\n</pre>\n<h2>Connection from Java Application</h2>\n<p>To connect the Memcached server from your java program, you need to add the Memcached jar into your classpath as shown in the previous chapter. Assume that the Memcached server is running on host 127.0.0.1 and port 11211. \u2212</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      \n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server sucessfully\");\n      \n      //not set data into memcached server\n      System.out.println(\"set status:\"+mcc.set(\"tutorialspoint\", 900, \"memcached\").done);\n      \n      //Get value from cache\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n   }\n}\n</pre>\n<h3>Output</h3>\n<p>On compiling and executing the program, you get to see the following output \u2212</p>\n<pre class=\"result notranslate\">\nConnection to server successfully\nset status:true\nGet from Cache:memcached.\n</pre>\n<p>The terminal may show few informational messages too, those can be ignored.</p>\n<h1>Memcached - Set Data</h1>\n<p>Memcached <b>set</b> command is used to set a new value to a new or existing key.</p>\n<h3>Syntax</h3>\n<p>The basic syntax of Memcached <b>set</b> command is as shown below \u2212 </p>\n<pre class=\"result notranslate\">\nset key flags exptime bytes [noreply] \nvalue \n</pre>\n<p>The keywords in the syntax are as described below \u2212</p>\n<ul class=\"list\">\n<li><p><b>key</b> \u2212 It is the name of the key by which data is stored and retrieved from Memcached.</p></li>\n<li><p><b>flags</b> \u2212 It is the 32-bit unsigned integer that the server stores with the data provided by the user, and returns along with the data when the item is retrieved.</p></li>\n<li><p><b>exptime</b> \u2212 It is the expiration time in seconds. 0 means no delay. If exptime is more than 30 days, Memcached uses it as UNIX timestamp for expiration.</p></li>\n<li><p><b>bytes</b> \u2212 It is the number of bytes in the data block that needs to be stored. This is the length of the data that needs to be stored in Memcached.</p></li>\n<li><p><b>noreply (optional)</b> - It is a parameter that informs the server not to send any reply.</p></li>\n<li><p><b>value</b> \u2212 It is the data that needs to be stored. The data needs to be passed on the new line after executing the command with the above options.</p></li>\n</ul>\n<h3>Output</h3>\n<p>The output of the command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nSTORED\n</pre>\n<ul class=\"list\">\n<li><p><b>STORED</b> indicates success.</p></li>\n<li><p><b>ERROR</b> indicates incorrect syntax or error while saving data.</p></li>\n</ul>\n<h3>Example</h3>\n<p>In the following example, we use tutorialspoint as the key and set value Memcached in it with an expiration time of 900 seconds.</p>\n<pre class=\"result notranslate\">\nset tutorialspoint 0 900 9\nmemcached\nSTORED\nget tutorialspoint\nVALUE tutorialspoint 0 9\nMemcached\nEND\n</pre>\n<h2>Set Data Using Java Application</h2>\n<p>To set a key in Memcached server, you need to use Memcached <b>set</b> method.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      \n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server sucessfully\");\n      System.out.println(\"set status:\"+mcc.set(\"tutorialspoint\", 900, \"memcached\").done);\n      \n      // Get value from cache\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n   }\n}\n</pre>\n<h3>Output</h3>\n<p>On compiling and executing the program, you get to see the following output \u2212</p>\n<pre class=\"result notranslate\">\nConnection to server successfully\nset status:true\nGet from Cache:memcached\n</pre>\n<h1>Memcached - Add Data</h1>\n<p>Memcached <b>add</b> command is used to set a value to a new key. If the key already exists, then it gives the output NOT_STORED.</p>\n<h3>Syntax</h3>\n<p>The basic syntax of Memcached <b>add</b> command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nadd key flags exptime bytes [noreply]\nvalue\n</pre>\n<p>The keywords in the syntax are as described below \u2212</p>\n<ul class=\"list\">\n<li><p><b>key</b> \u2212 It is the name of the key by which data is stored and retrieved from Memcached.</p></li>\n<li><p><b>flags</b> \u2212 It is the 32-bit unsigned integer that the server stores with the data provided\nby the user, and returns along with the data when the item is retrieved.</p></li>\n<li><p><b>exptime</b> \u2212 It is the expiration time in seconds. 0 means no delay. If exptime is more\nthan 30 days, Memcached uses it as a UNIX timestamp for expiration.</p></li>\n<li><p><b>bytes</b> \u2212 It is the number of bytes in the data block that needs to be stored. This is the\nlength of the data that needs to be stored in Memcached.</p></li>\n<li><p><b>noreply (optional)</b> \u2212 It is a parameter that informs the server not to send any reply.</p></li>\n<li><p><b>value</b> \u2212 It is the data that needs to be stored. The data needs to be passed on the new line after executing the command with the above options.</p></li>\n</ul>\n<h3>Output</h3>\n<p>The output of the command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nSTORED\n</pre>\n<ul class=\"list\">\n<li><p><b>STORED</b> indicates success.</p></li>\n<li><p><b>NOT_STORED</b> indicates the data is not stored in Memcached.</p></li>\n</ul>\n<h3>Example</h3>\n<p>In the following example, we use \u2018key\u2019 as the key and add the value Memcached in it with an expiration time of 900 seconds.</p>\n<pre class=\"result notranslate\">\nadd key 0 900 9\nmemcached\nSTORED\nget key\nVALUE key 0 9\nMemcached\nEND\n</pre>\n<h3>Failure Output</h3>\n<pre class=\"result notranslate\">\nadd key 0 900 5\nredis\nNOT_STORED\n</pre>\n<h2>Add Data Using Java Application</h2>\n<p>To add data in a Memcached server, you need to use the Memcached <b>add</b> method.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      \n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server successful\");\n      System.out.println(\"add status:\"+mcc.add(\"tutorialspoint\", 900, \"redis\").done);\n      System.out.println(\"add status:\"+mcc.add(\"tp\", 900, \"redis\").done);\n      \n      // Get value from cache\n      System.out.println(\"Get from Cache tp:\"+mcc.get(\"tp\"));\n   }\n}\n</pre>\n<h3>Output</h3>\n<p>On compiling and executing the program, you get to see the following output \u2212</p>\n<pre class=\"result notranslate\">\nConnection to server successful\nadd status:false\nadd status:true\nGet from Cache tp:redis\n</pre>\n<h1>Memcached - Replace Data</h1>\n<p>Memcached <b>replace</b> command is used to replace the value of an existing key. If the key\ndoes not exist, then it gives the output NOT_STORED.</p>\n<h3>Syntax</h3>\n<p>The basic syntax of Memcached <b>replace</b> command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nreplace key flags exptime bytes [noreply]\nvalue\n</pre>\n<p>The keywords in the syntax are as described below \u2212</p>\n<ul class=\"list\">\n<li><p><b>key</b> \u2212 It is the name of the key by which data is stored and retrieved from Memcached.</p></li>\n<li><p><b>flags</b> \u2212 It is the 32-bit unsigned integer that the server stores with the data provided by the user, and returns along with the data when the item is retrieved.</p></li>\n<li><p><b>exptime</b> \u2212 It is the expiration time in seconds. 0 means no delay. If exptime is more than 30 days, Memcached uses it as a UNIX timestamp for expiration.</p></li>\n<li><p><b>bytes</b> \u2212 It is the number of bytes in the data block that needs to be stored. This is the length of the data that needs to be stored in the Memcached.</p></li>\n<li><p><b>noreply (optional)</b> \u2212 It is a parameter that informs the server not to send any\nreply.</p></li>\n<li><p><b>value</b> \u2212 It is the data that needs to be stored. The data needs to be passed on the new line after executing the command with the above options.</p></li>\n</ul>\n<h3>Output</h3>\n<p>The output of the command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nSTORED\n</pre>\n<ul class=\"list\">\n<li><p><b>STORED</b> indicates success.</p></li>\n<li><p><b>NOT_STORED</b> indicates the data is not stored in Memcached.</p></li>\n</ul>\n<h3>Example</h3>\n<p>In the following example, we use \u2018key\u2019 as the key and store memcached in it with an expiration time of 900 seconds. After this, the same key is replaced with the value \u2018redis\u2019.</p>\n<pre class=\"result notranslate\">\nadd key 0 900 9\nmemcached\nSTORED\nget key\nVALUE key 0 9\nmemcached\nEND\nreplace key 0 900 5\nredis\nget key\nVALUE key 0 5\nredis\nEND\n</pre>\n<h2>Replace Data Using Java Application</h2>\n<p>To replace data in a Memcached server, you need to use the Memcached <b>replace</b> method.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      \n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server sucessfully\");\n      System.out.println(\"set status:\"+mcc.set(\"tutorialspoint\", 900, \"memcached\").done);\n      \n      // Get value from cache\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n      \n      // now replace the existing data\n      System.out.println(\"Replace cache:\"+mcc.replace(\"tutorialspoint\", 900, \"redis\").done);\n      \n      // get the updated data\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n   }\n}\n</pre>\n<h3>Output</h3>\n<p>On compiling and executing the program, you get to see the following output \u2212</p>\n<pre class=\"result notranslate\">\nConnection to server successfully\nset status:true\nGet from Cache:memcached\nReplace cache:true\nGet from Cache:redis\n</pre>\n<h1>Memcached - Append Data</h1>\n<p>Memcached <b>append</b> command is used to add some data in an existing key. The data is stored after the existing data of the key.</p>\n<h3>Syntax</h3>\n<p>The basic syntax of Memcached <b>append</b> command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nappend key flags exptime bytes [noreply]\nvalue\n</pre>\n<p>The keywords in the syntax are as described below\u2212</p>\n<ul class=\"list\">\n<li><p><b>key</b> \u2212 It is the name of the key by which data is stored and retrieved from\nMemcached.</p></li>\n<li><p><b>flags</b> \u2212 It is the 32-bit unsigned integer that the server stores with the data provided by the user, and returns along with the data when the item is retrieved.</p></li>\n<li><p><b>exptime</b> \u2212 It is the expiration time in seconds. 0 means no delay. If exptime is more than 30 days, Memcached uses it as a UNIX timestamp for expiration.</p></li>\n<li><p><b>bytes</b> \u2212 It is the number of bytes in the data block that needs to be stored. This is the length of the data that needs to be stored in Memcached.</p></li>\n<li><p><b>noreply (optional)</b> \u2212 It is a parameter that informs the server not send any reply.</p></li>\n<li><p><b>value</b> \u2212 It is the data that needs to be stored. The data needs to be passed on the new line after executing the command with the above options.</p></li>\n</ul>\n<h3>Output</h3>\n<p>The output of the command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nSTORED\n</pre>\n<ul class=\"list\">\n<li><p><b>STORED</b> indicates success.</p></li>\n<li><p><b>NOT_STORED</b> indicates the key does not exist in the Memcached server.</p></li>\n<li><p><b>CLIENT_ERROR</b> indicates error.</p></li>\n</ul>\n<h3>Example</h3>\n<p>In the following example, we try to add some data in a key that does not exist. Hence, Memcached returns <b>NOT_STORED</b>. After this, we set one key and append data into it.</p>\n<pre class=\"result notranslate\">\nappend tutorials 0 900 5\nredis\nNOT_STORED\nset tutorials 0 900 9\nmemcached\nSTORED\nget tutorials\nVALUE tutorials 0 14\nmemcached\nEND\nappend tutorials 0 900 5\nredis\nSTORED\nget tutorials\nVALUE tutorials 0 14\nmemcachedredis\nEND\n</pre>\n<h2>Append Data Using Java Application</h2>\n<p>To append data in a Memcached server, you need to use the Memcached <b>append</b> method.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      \n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server successful\");\n      System.out.println(\"set status:\"+mcc.set(\"tutorialspoint\", 900, \"memcached\").isDone());\n      \n      // Get value from cache\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n      \n      // now append some data into existing key\n      System.out.println(\"Append to cache:\"+mcc.append(\"tutorialspoint\", \"redis\").isDone());\n      \n      // get the updated key\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n   }\n}\n</pre>\n<h3>Output</h3>\n<p>On compiling and executing the program, you get to see the following output \u2212</p>\n<pre class=\"result notranslate\">\nConnection to server successful\nset status:true\nGet from Cache:memcached\nAppend to cache:true\nGet from Cache:memcachedredis\n</pre>\n<h1>Memcached - Prepend Data</h1>\n<p>Memcached <b>prepend</b> command is used to add some data in an existing key. The data is stored before the existing data of the key.</p>\n<h3>Syntax</h3>\n<p>The basic syntax of Memcached <b>prepend</b> command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nprepend key flags exptime bytes [noreply]\nvalue\n</pre>\n<p>The keywords in the syntax are as described below\u2212</p>\n<ul class=\"list\">\n<li><p><b>key</b> \u2212 It is the name of the key by which data is stored and retrieved in\nMemcached.</p></li>\n<li><p><b>flags</b> \u2212 It is the 32-bit unsigned integer that the server stores with the data provided by the user, and returns along with the data when the item is retrieved.</p></li>\n<li><p><b>exptime</b> \u2212 It is the expiration time in seconds. 0 means no delay. If exptime is more than 30 days, Memcached uses it as a UNIX timestamp for expiration.</p></li>\n<li><p><b>bytes</b> \u2212 It is the number of bytes in the data block that needs to be stored. This is the length of the data that needs to be stored in Memcached.</p></li>\n<li><p><b>noreply (optional)</b> \u2212It is a parameter that informs the server not send any reply.</p></li>\n<li><p><b>value</b> \u2212 It is the data that needs to be stored. Data needs to be passed on the new line after executing the command with the above options.</p></li>\n</ul>\n<h3>Output</h3>\n<p>The output of the command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nSTORED\n</pre>\n<ul class=\"list\">\n<li><p><b>STORED</b> indicates success.</p></li>\n<li><p><b>NOT_STORED</b> indicates the key does not exist in the Memcached server.</p></li>\n<li><p><b>CLIENT_ERROR</b> indicates error.</p></li>\n</ul>\n<h3>Example</h3>\n<p>In the following example, we add some data in a key that does not exist. Hence, Memcached returns <b>NOT_STORED</b>. After this, we set one key and prepend data into it.</p>\n<pre class=\"result notranslate\">\nprepend tutorials 0 900 5\nredis\nNOT_STORED\nset tutorials 0 900 9\nmemcached\nSTORED\nget tutorials\nVALUE tutorials 0 14\nmemcached\nEND\nprepend tutorials 0 900 5\nredis\nSTORED\nget tutorials\nVALUE tutorials 0 14\nredismemcached\nEND\n</pre>\n<h2>Prepend Data Using Java Application</h2>\n<p>To prepend data in a Memcached server, you need to use the Memcached <b>prepend</b> method.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server successful\");\n      System.out.println(\"set status:\"+mcc.set(\"tutorialspoint\", 900, \"memcached\").isDone());\n      \n      // Get value from cache\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n      \n      // now append some data into existing key\n      System.out.println(\"Prepend to cache:\"+mcc.prepend(\"tutorialspoint\", \"redis\").isDone());\n      \n      // get the updated key\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n   }\n}\n</pre>\n<h3>Output</h3>\n<p>On compiling and executing the program, you get to see the following output \u2212</p>\n<pre class=\"result notranslate\">\nConnection to server successful\nset status:true\nGet from Cache:memcached\nPrepend to cache:true\nGet from Cache:redismemcached\n</pre>\n<h1>Memcached - CAS Command</h1>\n<p>CAS stands for Check-And-Set or Compare-And-Swap. Memcached <b>CAS</b> command is used to set the data if it is not updated since last fetch. If the key does not exist in Memcached, then it returns <b>NOT_FOUND</b>.</p>\n<h3>Syntax</h3>\n<p>The basic syntax of Memcached <b>CAS</b> command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nset key flags exptime bytes unique_cas_key [noreply]\nvalue\n</pre>\n<p>The keywords in the syntax are as described below\u2212</p>\n<ul class=\"list\">\n<li><p><b>key</b> \u2212 It is the name of the key by which data is stored and retrieved from Memcached.</p></li>\n<li><p><b>flags</b> \u2212 It is the 32-bit unsigned integer that the server stores with the data provided by the user, and returns along with the data when the item is retrieved.</p></li>\n<li><p><b>exptime</b> \u2212 It is the expiration time in seconds. 0 means no delay. If exptime is more than 30 days, Memcached uses it as a UNIX timestamp for expiration.</p></li>\n<li><p><b>bytes</b> \u2212 It is the number of bytes in the data block that needs to be stored. This is the length of the data that needs to be stored in Memcached.</p></li>\n<li><p><b>unique_cas_key</b> \u2212 It is the unique key get from gets command.</p></li>\n<li><p><b>noreply (optional)</b> \u2212 It is a parameter that informs the server not to send any\nreply.</p></li>\n<li><p><b>value</b> \u2212 It is the data that needs to be stored. Data needs to be passed on new line after executing the command with the above options.</p></li>\n</ul>\n<h3>Output</h3>\n<p>The output of the command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nSTORED\n</pre>\n<ul class=\"list\">\n<li><p><b>STORED</b> indicates success.</p></li>\n<li><p><b>ERROR</b>  indicates error while saving data or wrong syntax.</p></li>\n<li><p><b>EXISTS</b> indicates that someone has modified the CAS data since last fetch.</p></li>\n<li><p><b>NOT_FOUND</b> indicates that the key does not exist in the Memcached server.</p></li>\n</ul>\n<h3>Example</h3>\n<p>To execute a CAS command in Memcached, you need to get a CAS token from the Memcached gets command.</p>\n<pre class=\"result notranslate\">\ncas tp 0 900 9\nERROR\ncas tp 0 900 9 2\nmemcached\nset tp 0 900 9\nmemcached\nSTORED\ngets tp\nVALUE tp 0 9 1\nmemcached\nEND\ncas tp 0 900 5 2\nredis\nEXISTS\ncas tp 0 900 5 1\nredis\nSTORED\nget tp\nVALUE tp 0 5\nredis\nEND\n</pre>\n<h2>CAS Using Java Application</h2>\n<p>To get CAS data from a Memcached server, you need to use Memcached <b>gets</b> method.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n     \n     // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server successful\");\n      System.out.println(\"set status:\"+mcc.set(\"tutorialspoint\", 900, \"memcached\").isDone());\n\n      // Get cas token from cache\n      long castToken = mcc.gets(\"tutorialspoint\").cas;\n      System.out.println(\"Cas token:\"+castToken);\n\n      // now set new data in memcached server\n      System.out.println(\"Now set new data:\"+mcc.cas(\"tutorialspoint\",\n      castToken, 900, \"redis\"));\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n   }\n}\n</pre>\n<h3>Output</h3>\n<p>On compiling and executing the program, you get to see the following output \u2212</p>\n<pre class=\"result notranslate\">\nConnection to server successful\nset status:true\nCas token:3\nNow set new data:OK\nGet from Cache:redis\n</pre>\n<h1>Memcached - Get Data</h1>\n<p>Memcached <b>get</b> command is used to get the value stored at key. If the key does not exist in Memcached, then it returns nothing.</p>\n<h3>Syntax</h3>\n<p>The basic syntax of Memcached <b>get</b> command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nget key\n</pre>\n<h3>Example</h3>\n<p>In the following example, we use tutorialspoint as the key and store memcached in it with an expiration time of 900 seconds.</p>\n<pre class=\"result notranslate\">\nset tutorialspoint 0 900 9\nmemcached\nSTORED\nget tutorialspoint\nVALUE tutorialspoint 0 9\nmemcached\nEND\n</pre>\n<h2>Get Data Using Java Application</h2>\n<p>To get data from a Memcached server, you need to use the Memcached <b>get</b> method.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server sucessfully\");\n      System.out.println(\"set status:\"+mcc.set(\"tutorialspoint\", 900, \"memcached\").done);\n     \n     // Get value from cache\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n   }\n}\n</pre>\n<h3>Output</h3>\n<p>On compiling and executing the program, you get to see the following output \u2212</p>\n<pre class=\"result notranslate\">\nConnection to server successfully\nset status:true\nGet from Cache:memcached\n</pre>\n<h1>Memcached - Get CAS Data</h1>\n<p>Memcached <b>gets</b> command is used to get the value with CAS token. If the key does not exist in Memcached, then it returns nothing.</p>\n<h3>Syntax</h3>\n<p>The basic syntax of Memcached <b>gets</b> command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nget key\n</pre>\n<h3>Example</h3>\n<pre class=\"result notranslate\">\nset tutorialspoint 0 900 9\nmemcached\nSTORED\ngets tutorialspoint\nVALUE tutorialspoint 0 9 1\nmemcached\nEND\n</pre>\n<p>In this example, we use tutorialspoint as the key and store memcached in it with an expiration time of 900 seconds.</p>\n<h2>Get CAS Data Using Java Application</h2>\n<p>To get CAS data from a Memcached server, you need to use the Memcached <b>gets</b> method.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      \n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server sucessfully\");\n      System.out.println(\"set status:\"+mcc.set(\"tutorialspoint\", 900, \"memcached\").done);\n      \n      // Get value from cache\n      System.out.println(\"Get from Cache:\"+mcc.gets(\"tutorialspoint\"));\n   }\n}\n</pre>\n<h3>Output</h3>\n<p>On compiling and executing the program, you get to see the following output \u2212</p>\n<pre class=\"result notranslate\">\nConnection to server successfully\nset status:true\nGet from Cache:{CasValue 2/memcached}\n</pre>\n<h1>Memcached - Delete Key</h1>\n<p>Memcached <b>delete</b> command is used to delete an existing key from the Memcached server.</p>\n<h2>Syntax</h2>\n<p>The basic syntax of Memcached <b>delete</b> command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\ndelete key [noreply]\n</pre>\n<h3>Output</h3>\n<p>CAS command may produce one of the following result  \u2212</p>\n<ul class=\"list\">\n<li><p><b>DELETED</b> indicates successful deletion.</p></li>\n<li><p><b>ERROR</b> indicates error while deleting data or wrong syntax.</p></li>\n<li><p><b>NOT_FOUND</b> indicates that the key does not exist in the Memcached server.</p></li>\n</ul>\n<h3>Example</h3>\n<p>In this example, we use tutorialspoint as a key and store memcached in it with an expiration time of 900 seconds. After this, it deletes the stored key.</p>\n<pre class=\"result notranslate\">\nset tutorialspoint 0 900 9\nmemcached\nSTORED\nget tutorialspoint\nVALUE tutorialspoint 0 9\nmemcached\nEND\ndelete tutorialspoint\nDELETED\nget tutorialspoint\nEND\ndelete tutorialspoint\nNOT_FOUND\n</pre>\n<h2>Delete Data Using Java Application</h2>\n<p>To delete data from a Memcached server, you need to use the Memcached <b>delete</b> method.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\nimport java.net.InetSocketAddress;\nimport java.util.concurrent.Future;\n\nimport net.spy.memcached.MemcachedClient;\n\npublic class MemcachedJava {\n   public static void main(String[] args) {\n   \n      try{\n   \n         // Connecting to Memcached server on localhost\n         MemcachedClient mcc = new MemcachedClient(new InetSocketAddress(\"127.0.0.1\", 11211));\n         System.out.println(\"Connection to server sucessful.\");\n\n         // add data to memcached server\n         Future fo = mcc.set(\"tutorialspoint\", 900, \"World's largest online tutorials library\");\n\n         // print status of set method\n         System.out.println(\"set status:\" + fo.get());\n\n         // retrieve and check the value from cache\n         System.out.println(\"tutorialspoint value in cache - \" + mcc.get(\"tutorialspoint\"));\n\n         // try to add data with existing key\n         Future fo = mcc.<b>delete</b>(\"tutorialspoint\");\n\n         // print status of delete method\n         System.out.println(\"delete status:\" + fo.get());\n\n         // retrieve and check the value from cache\n         System.out.println(\"tutorialspoint value in cache - \" + mcc.get(\"codingground\"));\n\n         // Shutdowns the memcached client\n         mcc.shutdown();\n         \n      }catch(Exception ex)\n         System.out.println(ex.getMessage());\n   }\n}\n</pre>\n<h3>Output</h3>\n<p>On compiling and executing the program, you get to see the following output \u2212</p>\n<pre class=\"result notranslate\">\nConnection to server successful\nset status:true\ntutorialspoint value in cache - World's largest online tutorials library\ndelete status:true\ntutorialspoint value in cache - null\n</pre>\n<h1>Memcached - Delete data</h1>\n<p>Memcached <b>delete</b> command is used to delete an existing key from the Memcached server.</p>\n<h3>Syntax</h3>\n<p>The basic syntax of Memcached <b>delete</b> command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\ndelete key\n</pre>\n<p>If the key is successfully deleted, then it returns DELETED. If the key is not found, then it returns NOT_FOUND, otherwise it returns ERROR.</p>\n<h3>Example</h3>\n<p>In this example, we use tutorialspoint as a key and store memcached in it with an expiration time of 900 seconds. After this, it deletes the stored key.</p>\n<pre class=\"result notranslate\">\nset tutorialspoint 0 900 9\nmemcached\nSTORED\nget tutorialspoint\nVALUE tutorialspoint 0 9\nmemcached\nEND\ndelete tutorialspoint\nDELETED\nget tutorialspoint\nEND\ndelete tutorialspoint\nNOT_FOUND\n</pre>\n<h2>Delete Data Using Java Application</h2>\n<p>To delete data from a Memcached server, you need to use the Memcached <b>delete</b> method.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      \n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server successful\");\n      System.out.println(\"set status:\"+mcc.set(\"tutorialspoint\", 900, \"memcached\").done);\n      \n      // Get value from cache\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n      \n      // delete value from cache\n      System.out.println(\"Delete from Cache:\"+mcc.delete(\"tutorialspoint\").isDone());\n      \n      // check whether value exists or not\n      System.out.println(\"Get from Cache:\"+mcc.get(\"tutorialspoint\"));\n   }\n}\n</pre>\n<h3>Output</h3>\n<p>On compiling and executing the program, you get to see the following output \u2212</p>\n<pre class=\"result notranslate\">\nConnection to server successful\nset status:true\nGet from Cache:memcached\nDelete from Cache:true\nGet from Cache:null\n</pre>\n<h1>Memcached - Increment Decrement Data</h1>\n<p>Memcached <b>incr</b> and <b>decr</b> commands are used to increment or decrement the numeric value of an existing key. If the key is not found, then it returns <b>NOT_FOUND</b>. If the key is not numeric, then it returns <b>CLIENT_ERROR cannot increment or decrement non-numeric value</b>. Otherwise, <b>ERROR</b> is returned.</p>\n<h3>Syntax - incr</h3>\n<p>The basic syntax of Memcached <b>incr</b> command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nincr key increment_value\n</pre>\n<h3>Example</h3>\n<p>In this example, we use visitors as key and set 10 initially into it, thereafter we increment the visitors by 5.</p>\n<pre class=\"result notranslate\">\nset visitors 0 900 2\n10\nSTORED\nget visitors\nVALUE visitors 0 2\n10\nEND\nincr visitors 5\n15\nget visitors\nVALUE visitors 0 2\n15\nEND\n</pre>\n<h3>Syntax - decr</h3>\n<p>The basic syntax of Memcached <b>decr</b> command is as shown below</p>\n<pre class=\"result notranslate\">\ndecr key decrement_value\n</pre>\n<h3>Example</h3>\n<pre class=\"result notranslate\">\nset visitors 0 900 2\n10\nSTORED\nget visitors\nVALUE visitors 0 2\n10\nEND\ndecr visitors 5\n5\nget visitors\nVALUE visitors 0 1\n5\nEND\n</pre>\n<h2>Incr/Decr Using Java Application</h2>\n<p>To increment or decrement data in a Memcached server, you need to use Memcached <b>incr or decr</b> methods respectively.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      \n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server sucessfully\");\n      System.out.println(\"set status:\"+mcc.set(\"count\", 900, \"5\").isDone());\n      \n      // Get value from cache\n      System.out.println(\"Get from Cache:\"+mcc.get(\"count\"));\n      \n      // now increase the stored value\n      System.out.println(\"Increment value:\"+mcc.incr(\"count\", 2));\n      \n      // now decrease the stored value\n      System.out.println(\"Decrement value:\"+mcc.decr(\"count\", 1));\n      \n      // now get the final stored value\n      System.out.println(\"Get from Cache:\"+mcc.get(\"count\"));\n   }\n}\n</pre>\n<h3>Output</h3>\n<p>On compiling and executing the program, you get to see the following output \u2212</p>\n<pre class=\"result notranslate\">\nConnection to server successfully\nset status:true\nGet from Cache:5\nIncrement value:7\nDecrement value:6\nGet from Cache:6\n</pre>\n<h1>Memcached - Stats</h1>\n<p>Memcached <b>stats</b> command is used to return server statistics such as PID, version, connections, etc.</p>\n<h2>Syntax</h2>\n<p>The basic syntax of Memcached <b>stats</b> command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nstats\n</pre>\n<h3>Example</h3>\n<pre class=\"result notranslate\">\nstats\nSTAT pid 1162\nSTAT uptime 5022\nSTAT time 1415208270\nSTAT version 1.4.14\nSTAT libevent 2.0.19-stable\nSTAT pointer_size 64\nSTAT rusage_user 0.096006\nSTAT rusage_system 0.152009\nSTAT curr_connections 5\nSTAT total_connections 6\n\nSTAT connection_structures 6\nSTAT reserved_fds 20\nSTAT cmd_get 6\nSTAT cmd_set 4\nSTAT cmd_flush 0\nSTAT cmd_touch 0\nSTAT get_hits 4\nSTAT get_misses 2\nSTAT delete_misses 1\nSTAT delete_hits 1\n\nSTAT incr_misses 2\nSTAT incr_hits 1\nSTAT decr_misses 0\nSTAT decr_hits 1\nSTAT cas_misses 0\nSTAT cas_hits 0\nSTAT cas_badval 0\nSTAT touch_hits 0\nSTAT touch_misses 0\nSTAT auth_cmds 0\n\nSTAT auth_errors 0\nSTAT bytes_read 262\nSTAT bytes_written 313\nSTAT limit_maxbytes 67108864\nSTAT accepting_conns 1\nSTAT listen_disabled_num 0\nSTAT threads 4\nSTAT conn_yields 0\nSTAT hash_power_level 16\n\nSTAT hash_bytes 524288\nSTAT hash_is_expanding 0\nSTAT expired_unfetched 1\nSTAT evicted_unfetched 0\nSTAT bytes 142\nSTAT curr_items 2\nSTAT total_items 6\nSTAT evictions 0\nSTAT reclaimed 1\nEND\n</pre>\n<h2>Stats Using Java Application</h2>\n<p>To get stats from a Memcached server, you need to use the Memcached <b>stats</b> method.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n      \n      // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server successful\");\n      System.out.println(\"Stats:\"+mcc.stats);\n   }\n}\n</pre>\n<h3>Output</h3>\n<p>On compiling and executing the program, you get to see the following output \u2212</p>\n<pre class=\"result notranslate\">\nConnection to server successful\nStats:[/127.0.0.1:11211:[delete_hits:0, bytes:71, total_items:4,\nrusage_system:0.220013, touch_misses:0, cmd_touch:0, listen_disabled_num:0,\nauth_errors:0, evictions:0, version:1.4.14, pointer_size:64, time:1417279366,\nincr_hits:1, threads:4, expired_unfetched:0, limit_maxbytes:67108864,\nhash_is_expanding:0, bytes_read:170, curr_connections:8, get_misses:1,\nreclaimed:0, bytes_written:225, hash_power_level:16, connection_structures:9,\ncas_hits:0, delete_misses:0, total_connections:11, rusage_user:0.356022,\ncmd_flush:0, libevent:2.0.19-stable, uptime:12015, reserved_fds:20,\ntouch_hits:0, cas_badval:0, pid:1138, get_hits:2, curr_items:1, cas_misses:0,\naccepting_conns:1, evicted_unfetched:0, cmd_get:3, cmd_set:2, auth_cmds:0,\nincr_misses:1, hash_bytes:524288, decr_misses:1, decr_hits:1, conn_yields:0]]\n</pre>\n<h1>Memcached - Stats Items</h1>\n<p>Memcached <b>stats items</b> command is used to get items statistics such as count, age,\neviction, etc. organized by slabs ID.</p>\n<h2>Syntax</h2>\n<p>The basic syntax of Memcached <b>stats items</b> command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nstats items\n</pre>\n<h3>Example</h3>\n<pre class=\"result notranslate\">\nstats items\nSTAT items:1:number 1\nSTAT items:1:age 7\nSTAT items:1:evicted 0\nSTAT items:1:evicted_nonzero 0\nSTAT items:1:evicted_time 0\nSTAT items:1:outofmemory 0\nSTAT items:1:tailrepairs 0\nSTAT items:1:reclaimed 0\nSTAT items:1:expired_unfetched 0\nSTAT items:1:evicted_unfetched 0\nEND\n</pre>\n<h1>Memcached - Stats Slabs</h1>\n<p>Memcached <b>stats slabs</b> command displays slabs statistics such as size, memory usage, commands, count etc. organized by slabs ID.</p>\n<h2>Syntax</h2>\n<p>The basic syntax of Memcached <b>stats slabs</b> command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nstats slabs\n</pre>\n<h3>Example</h3>\n<pre class=\"result notranslate\">\nstats slabs\nSTAT 1:chunk_size 96\nSTAT 1:chunks_per_page 10922\nSTAT 1:total_pages 1\nSTAT 1:total_chunks 10922\nSTAT 1:used_chunks 1\nSTAT 1:free_chunks 10921\nSTAT 1:free_chunks_end 0\nSTAT 1:mem_requested 71\nSTAT 1:get_hits 0\nSTAT 1:cmd_set 1\nSTAT 1:delete_hits 0\nSTAT 1:incr_hits 0\nSTAT 1:decr_hits 0\nSTAT 1:cas_hits 0\nSTAT 1:cas_badval 0\nSTAT 1:touch_hits 0\nSTAT active_slabs 1\nSTAT total_malloced 1048512\nEND\n</pre>\n<h1>Memcached - Stats Sizes</h1>\n<p>Memcached <b>stats sizes</b> command provides information about the sizes and number of items of each size within the cache. The information is returned in two columns. The first column is the size of the item (rounded up to the nearest 32 byte boundary), and the second column is the count of the number of items of that size within the cache.</p>\n<h2>Syntax</h2>\n<p>The basic syntax of Memcached <b>stats sizes</b> command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nstats sizes\n</pre>\n<h3>Example</h3>\n<pre class=\"result notranslate\">\nstats sizes\nSTAT 96 1\nEND\n</pre>\n<p>The item size statistics are useful only to determine the sizes of the objects you are storing. Since the actual memory allocation is relevant only in terms of the chunk size and page size, the information is only useful during a careful debugging or diagnostic session.</p>\n<h1>Memcached - Clear Data</h1>\n<p>Memcached <b>flush_all</b> command is used to delete all data (key-value pairs) from the Memcached server. It accepts an optional parameter called <b>time</b> that sets a time after which the Memcached data is to be cleared.</p>\n<h2>Syntax</h2>\n<p>The basic syntax of Memcached <b>flush_all</b> command is as shown below \u2212</p>\n<pre class=\"result notranslate\">\nflush_all [time] [noreply]\n</pre>\n<p>The above command always returns OK.</p>\n<h3>Example</h3>\n<p>In the following example, we store some data into the Memcached server and then clear all the data.</p>\n<pre class=\"result notranslate\">\nset tutorialspoint 0 900 9\nmemcached\nSTORED\nget tutorialspoint\nVALUE tutorialspoint 0 9\nmemcached\nEND\nflush_all\nOK\nget tutorialspoint\nEND\n</pre>\n<h2>Clear Data Using Java Application</h2>\n<p>To clear data from a Memcached server, you need to use the Memcached <b>flush</b> method.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\nimport net.spy.memcached.MemcachedClient;\npublic class MemcachedJava {\n   public static void main(String[] args) {\n     \n     // Connecting to Memcached server on localhost\n      MemcachedClient mcc = new MemcachedClient(new\n      InetSocketAddress(\"127.0.0.1\", 11211));\n      System.out.println(\"Connection to server sucessfully\");\n      System.out.println(\"set status:\"+mcc.set(\"count\", 900, \"5\").isDone());\n      \n      // Get value from cache\n      System.out.println(\"Get from Cache:\"+mcc.get(\"count\"));\n     \n      // now increase the stored value\n      System.out.println(\"Increment value:\"+mcc.incr(\"count\", 2));\n     \n      // now decrease the stored value\n      System.out.println(\"Decrement value:\"+mcc.decr(\"count\", 1));\n      \n      // now get the final stored value\n      System.out.println(\"Get from Cache:\"+mcc.get(\"count\"));\n      \n      // now clear all this data\n      System.out.println(\"Clear data:\"+mcc.flush().isDone());\n   }\n}\n</pre>\n<h3>Output</h3>\n<p>On compiling and executing the program, you get to see the following output \u2212</p>\n<pre class=\"result notranslate\">\nConnection to server successfully\nset status:true\nGet from Cache:5\nIncrement value:7\nDecrement value:6\nGet from Cache:6\nClear data:true\n</pre>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/memcached/memcached_clear_data.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/memcached/memcached_useful_resources.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>"}