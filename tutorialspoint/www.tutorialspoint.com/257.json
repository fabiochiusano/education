{"title_html": "<h1>Python - Basic Syntax</h1>", "content": "\n Python - Basic Syntax \n  \n Advertisements \n \n<!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//-->\n\n\n \n  \n \n Previous Page\n \n \nNext Page \u00a0\n \n  \n  \n The Python language has many similarities to Perl, C, and Java. However, there are some definite differences between the languages. \n First Python Program \n Let us execute programs in different modes of programming. \n Interactive Mode Programming \n Invoking the interpreter without passing a script file as a parameter brings up the following prompt \u2212 \n \n$ python\nPython 2.4.3 (#1, Nov 11 2010, 13:34:43)\n[GCC 4.1.2 20080704 (Red Hat 4.1.2-48)] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n \n Type the following text at the Python prompt and press the Enter \u2212 \n \n>>> print \"Hello, Python!\"\n \n If you are running new version of Python, then you would need to use print statement with parenthesis as in print (\"Hello, Python!\");. However in Python version 2.4.3, this produces the following result \u2212 \n \nHello, Python!\n \n Script Mode Programming \n Invoking the interpreter with a script parameter begins execution of the script and continues until the script is finished. When the script is finished, the interpreter is no longer active. \n Let us write a simple Python program in a script. Python files have extension .py. Type the following source code in a test.py file \u2212 \n  Live Demo \n \nprint \"Hello, Python!\"\n \n We assume that you have Python interpreter set in PATH variable. Now, try to run this program as follows \u2212 \n \n$ python test.py\n \n This produces the following result \u2212 \n \nHello, Python!\n \n Let us try another way to execute a Python script. Here is the modified test.py file \u2212 \n  Live Demo \n \n#!/usr/bin/python\n\nprint \"Hello, Python!\"\n \n We assume that you have Python interpreter available in /usr/bin directory. Now, try to run this program as follows \u2212 \n \n$ chmod +x test.py     # This is to make file executable\n$./test.py\n \n This produces the following result \u2212 \n \nHello, Python!\n \n Python Identifiers \n A Python identifier is a name used to identify a variable, function, class, module or other object. An identifier starts with a letter A to Z or a to z or an underscore (_) followed by zero or more letters, underscores and digits (0 to 9). \n Python does not allow punctuation characters such as &commat, $, and % within identifiers. Python is a case sensitive programming language. Thus, Manpower and manpower are two different identifiers in Python. \n Here are naming conventions for Python identifiers \u2212 \n \nClass names start with an uppercase letter. All other identifiers start with a lowercase letter.\nStarting an identifier with a single leading underscore indicates that the identifier is private.\nStarting an identifier with two leading underscores indicates a strongly private identifier.\nIf the identifier also ends with two trailing underscores, the identifier is a language-defined special name.\n \n Reserved Words \n The following list shows the Python keywords. These are reserved words and you cannot use them as constant or variable or any other identifier names. All the Python keywords contain lowercase letters only. \n \n\nand\nexec\nnot\n\n\nassert\nfinally\nor\n\n\nbreak\nfor\npass\n\n\nclass\nfrom\nprint\n\n\ncontinue\nglobal\nraise\n\n\ndef\nif\nreturn\n\n\ndel\nimport\ntry\n\n\nelif\nin\nwhile\n\n\nelse\nis\nwith \n\n\nexcept\nlambda\nyield\n\n \n Lines and Indentation \n Python provides no braces to indicate blocks of code for class and function definitions or flow control. Blocks of code are denoted by line indentation, which is rigidly enforced. \n The number of spaces in the indentation is variable, but all statements within the block must be indented the same amount. For example \u2212 \n \nif True:\n   print \"True\"\nelse:\n   print \"False\"\n \n However, the following block generates an error \u2212 \n \nif True:\nprint \"Answer\"\nprint \"True\"\nelse:\nprint \"Answer\"\nprint \"False\"\n \n Thus, in Python all the continuous lines indented with same number of spaces would form a block. The following example has various statement blocks \u2212 \n Note \u2212 Do not try to understand the logic at this point of time. Just make sure you understood various blocks even if they are without braces. \n \n#!/usr/bin/python\n\nimport sys\n\ntry:\n   # open file stream\n   file = open(file_name, \"w\")\nexcept IOError:\n   print \"There was an error writing to\", file_name\n   sys.exit()\nprint \"Enter '\", file_finish,\nprint \"' When finished\"\nwhile file_text != file_finish:\n   file_text = raw_input(\"Enter text: \")\n   if file_text == file_finish:\n      # close the file\n      file.close\n      break\n   file.write(file_text)\n   file.write(\"\\n\")\nfile.close()\nfile_name = raw_input(\"Enter filename: \")\nif len(file_name) == 0:\n   print \"Next time please enter something\"\n   sys.exit()\ntry:\n   file = open(file_name, \"r\")\nexcept IOError:\n   print \"There was an error reading file\"\n   sys.exit()\nfile_text = file.read()\nfile.close()\nprint file_text\n \n Multi-Line Statements \n Statements in Python typically end with a new line. Python does, however, allow the use of the line continuation character (\\) to denote that the line should continue. For example \u2212 \n \ntotal = item_one + \\\n        item_two + \\\n        item_three\n \n Statements contained within the [], {}, or () brackets do not need to use the line continuation character. For example \u2212 \n \ndays = ['Monday', 'Tuesday', 'Wednesday',\n        'Thursday', 'Friday']\n \n Quotation in Python \n Python accepts single ('), double (\") and triple (''' or \"\"\") quotes to denote string literals, as long as the same type of quote starts and ends the string. \n The triple quotes are used to span the string across multiple lines. For example, all the following are legal \u2212 \n \nword = 'word'\nsentence = \"This is a sentence.\"\nparagraph = \"\"\"This is a paragraph. It is\nmade up of multiple lines and sentences.\"\"\"\n \n Comments in Python \n A hash sign (#) that is not inside a string literal begins a comment. All characters after the # and up to the end of the physical line are part of the comment and the Python interpreter ignores them. \n  Live Demo \n \n#!/usr/bin/python\n\n# First comment\nprint \"Hello, Python!\" # second comment\n \n This produces the following result \u2212 \n \nHello, Python!\n \n You can type a comment on the same line after a statement or expression \u2212 \n \nname = \"Madisetti\" # This is again comment\n \n You can comment multiple lines as follows \u2212 \n \n# This is a comment.\n# This is a comment, too.\n# This is a comment, too.\n# I said that already.\n \n Following triple-quoted string is also ignored by Python interpreter and can be used as a multiline comments: \n \n'''\nThis is a multiline\ncomment.\n'''\n \n Using Blank Lines \n A line containing only whitespace, possibly with a comment, is known as a blank line and Python totally ignores it. \n In an interactive interpreter session, you must enter an empty physical line to terminate a multiline statement. \n Waiting for the User \n The following line of the program displays the prompt, the statement saying \u201cPress the enter key to exit\u201d, and waits for the user to take action \u2212 \n \n#!/usr/bin/python\n\nraw_input(\"\\n\\nPress the enter key to exit.\")\n \n Here, \"\\n\\n\" is used to create two new lines before displaying the actual line. Once the user presses the key, the program ends. This is a nice trick to keep a console window open until the user is done with an application. \n Multiple Statements on a Single Line \n The semicolon ( ; ) allows multiple statements on the single line given that neither statement starts a new code block. Here is a sample snip using the semicolon \u2212 \n \nimport sys; x = 'foo'; sys.stdout.write(x + '\\n')\n \n Multiple Statement Groups as Suites \n A group of individual statements, which make a single code block are called suites in Python. Compound or complex statements, such as if, while, def, and class require a header line and a suite. \n Header lines begin the statement (with the keyword) and terminate with a colon ( : ) and are followed by one or more lines which make up the suite. For example \u2212 \n \nif expression : \n   suite\nelif expression : \n   suite \nelse : \n   suite\n \n Command Line Arguments \n Many programs can be run to provide you with some basic information about how they should be run. Python enables you to do this with -h \u2212 \n \n$ python -h\nusage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...\nOptions and arguments (and corresponding environment variables):\n-c cmd : program passed in as string (terminates option list)\n-d     : debug output from parser (also PYTHONDEBUG=x)\n-E     : ignore environment variables (such as PYTHONPATH)\n-h     : print this help message and exit\n\n[ etc. ]\n \n You can also program your script in such a way that it should accept various options. Command Line Arguments is an advanced topic and should be studied a bit later once you have gone through rest of the Python concepts. \n  \n \n Previous Page\n \n \n Print\n \n \nNext Page \u00a0\n \n  \n  PRINTING ENDS HERE  \n \nAdvertisements\n<!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//-->\n\n\n \n", "url": "https://www.tutorialspoint.com/python/python_basic_syntax.htm", "html": "<!DOCTYPE html>\n\n<!--[if IE 8]><html class=\"ie ie8\"> <![endif]-->\n<!--[if IE 9]><html class=\"ie ie9\"> <![endif]-->\n<!--[if gt IE 9]><!--> <html> <!--<![endif]-->\n<head>\n<!-- Basic -->\n<meta charset=\"utf-8\"/>\n<title>Python Basic Syntax</title>\n<meta content=\"Python Basic Syntax - Learn Python in simple and easy steps starting from basic to advanced concepts with examples including Python Syntax Object Oriented Language, Methods, Tuples, Tools/Utilities, Exceptions Handling, Sockets, GUI, Extentions, XML Programming.\" name=\"description\">\n<meta content=\"Python, Tutorials, Learning, Beginners, Basics, Object Oriented Language, Methods, Overriding, Networking, Multithreading,Methods, Tuples, Tools/Utilities, Exceptions Handling, Sockets, GUI, Extentions, XML, Programming.\" name=\"Keywords\"/>\n<base href=\"https://www.tutorialspoint.com/\"/>\n<link href=\"/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"/>\n<meta content=\"width=device-width,initial-scale=1.0,user-scalable=yes\" name=\"viewport\"/>\n<meta content=\"en_US\" property=\"og:locale\">\n<meta content=\"website\" property=\"og:type\"/>\n<meta content=\"471319149685276\" property=\"fb:app_id\"/>\n<meta content=\"www.tutorialspoint.com\" property=\"og:site_name\"/>\n<meta content=\"yes\" name=\"apple-mobile-web-app-capable\"/>\n<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"/>\n<meta content=\"tutorialspoint.com\" name=\"author\"/>\n<script src=\"https://www.tutorialspoint.com/theme/js/script-min-v4.js?v=2\" type=\"text/javascript\"></script>\n<link href=\"https://www.tutorialspoint.com/theme/css/style-min.css?v=3.1\" rel=\"stylesheet\"/>\n<script>\r\nfunction openNav() {\t\r\n  document.getElementById(\"mySidenav\").style.width = \"250px\";\r\n  document.getElementById(\"right_obs\").style.display = \"block\";\r\n}\r\nfunction closeNav() {\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\nfunction close_obs_sidenav(){\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\n</script>\n<!-- Head Libs -->\n<!--[if IE 8]>\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/theme/css/ie8.css\">\r\n<![endif]-->\n<style>\r\n#privacy-banner {\r\n    position: fixed;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    max-width: 100%;\r\n    padding: 1rem .5rem;\r\n    background: #fff;\r\n    z-index: 1030;\r\n    color: #000;\r\n    font-size: 14px;\r\n    margin: 0;\r\n    display: none;\r\n    border-top: 2px solid rgb(130, 130, 130);\r\n  }\r\n  #privacy-banner p {\r\n    margin: 0;\r\n    color: #000;\r\n    text-align: center;\r\n  }\r\n  #privacy-banner a {\r\n    text-decoration: none;\r\n    margin: 20px auto 0 auto;\r\n    display: block;\r\n    max-width: 150px;\r\n  }\r\n  #privacy-banner a:hover {\r\n    text-decoration: underline;\r\n  }\r\n  #banner-learn {\r\n    color: #000;\r\n  }\r\n  #banner-accept {\r\n    padding: 7px 15px;\r\n    color: #fff;\r\n    border-radius: 5px;\r\n    background:#737373 !important;\r\n  }\r\n  @media (min-width: 768px) {\r\n    #privacy-banner {\r\n      padding: 1.5rem .5rem;\r\n    }\r\n    #privacy-banner a {\r\n      display: inline-block;\r\n      margin: 0 10px;\r\n    }\r\n}\r\npre.prettyprint.tryit {min-height:37px; background: #eee url(/python/images/try-it.jpg) top right no-repeat !important}select{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }\r\n.btnsbmt{ background: #fdbf00 !important;}\r\nul.nav-list.primary>li a.videolink{    background: none; margin: 0px; padding: 0px; border: 1px solid #d6d6d6;}\r\ndiv.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #fdbf00 url(/images/pattern.png) repeat center center !important;}\r\n.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #fdbf00 !important;}\r\n.submenu-item{ border-bottom: 2px solid #fdbf00 !important; border-top: 2px solid #fdbf00 !important }\r\n.ace_scroller{overflow: auto!important;}\r\na.demo{font-family: \"Open Sans\",Arial,sans-serif; background:#fdbf00; color:#fff; font-size:13px; padding:3px 10px; border:1px solid #d6d6d6; position:absolute; right:5px; margin:-6px 17px 0px 0px;}\r\na.demo:hover{opacity:.8}\r\n</style>\n<script>\r\n$(document).ready(function() {\r\n  $('input[name=\"q\"]').keydown(function(event){\r\n    if(event.keyCode == 13) {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n  });\r\n});\r\n</script>\n</meta></meta></head>\n<body onload=\"prettyPrint()\">\n<div class=\"wrapLoader\">\n<div class=\"imgLoader\">\n<img alt=\"\" height=\"70\" src=\"/images/loading-cg.gif\" width=\"70\"/>\n</div>\n</div>\n<div class=\"display-none\" id=\"right_obs\" onclick=\"close_obs_sidenav()\"></div>\n<header>\n<div class=\"container\">\n<h1 class=\"logo\">\n<a href=\"index.htm\" title=\"tutorialspoint\">\n<img alt=\"tutorialspoint\" src=\"/python/images/logo.png\"/>\n</a>\n</h1>\n<ul class=\"tp-inline-block pull-right\" id=\"tp-head-icons\">\n<li>\n<div class=\"tp-second-nav tp-display-none tp-pointer\" onclick=\"openNav()\">\n<i class=\"fa fa-th-large fa-lg\"></i>\n</div>\n</li>\n</ul>\n<button class=\"btn btn-responsive-nav btn-inverse\" data-target=\".nav-main-collapse\" data-toggle=\"collapse\" id=\"pull\" style=\"top: 24px!important\"> <i class=\"icon icon-bars\"></i> </button>\n<nav>\n<ul class=\"nav nav-pills nav-top\">\n<li><a href=\"/about/about_careers.htm\" style=\"background: #fffb09; font-weight: bold;\"><i class=\"icon icon-suitcase\"></i> Jobs</a></li>\n<li> <a href=\"/programming_examples/\" target=\"_blank\"><i class=\"fa fa-cubes\"></i> \u00a0Examples</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/whiteboard.htm\"><img alt=\"Whiteboard\" src=\"theme/css/icons/image-editor.png\" title=\"Whiteboard\"/> \u00a0Whiteboard</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/netmeeting.php\"><i class=\"fa-camera\"></i> \u00a0Net Meeting</a> </li>\n<li> <a href=\"/online_dev_tools.htm\"> <i class=\"dev-tools-menu\" style=\"opacity:.5\"></i> Tools </a> </li>\n<li> <a href=\"/articles/index.php\"><i class=\"icon icon-file-text-o\"></i> \u00a0Articles</a> </li>\n<li class=\"top-icons\">\n<ul class=\"social-icons\">\n<li class=\"facebook\"><a data-placement=\"bottom\" href=\"https://www.facebook.com/tutorialspointindia\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Facebook\">Facebook</a></li>\n<li class=\"googleplus\"><a data-placement=\"bottom\" href=\"https://plus.google.com/u/0/116678774017490391259/posts\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Google+\">Google+</a></li>\n<li class=\"twitter\"><a data-placement=\"bottom\" href=\"https://www.twitter.com/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Twitter\">Twitter</a></li>\n<li class=\"linkedin\"><a data-placement=\"bottom\" href=\"https://www.linkedin.com/company/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Linkedin\">Linkedin</a></li>\n<li class=\"youtube\"><a data-placement=\"bottom\" href=\"https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint YouTube\">YouTube</a></li>\n</ul>\n</li>\n</ul>\n</nav>\n</div>\n<div class=\"sidenav\" id=\"mySidenav\">\n<div class=\"navbar nav-main\">\n<div class=\"container\">\n<nav class=\"nav-main mega-menu\">\n<ul class=\"nav nav-pills nav-main\" id=\"mainMenu\">\n<li class=\"dropdown no-sub-menu\"> <a class=\"dropdown\" href=\"index.htm\"><i class=\"icon icon-home\"></i> Home</a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"/questions/index.php\"><i class=\"fa fa-send\"></i> Q/A </a> </li>\n<li class=\"dropdown\"><a class=\"dropdown\" href=\"tutorialslibrary.htm\"><span class=\"tut-lib\"> Library </span></a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"videotutorials/index.htm\"><i class=\"fa-toggle-right\"></i> Videos </a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"tutor_connect/index.php\"><i class=\"fa-user\"> </i> Tutors</a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"codingground.htm\"><i class=\"fa-code\"></i> Coding Ground </a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"https://store.tutorialspoint.com/\"><i class=\"fa-usd\"></i> Store </a> </li>\n<li class=\"dropdown no-sub-menu\">\n<div class=\"searchform-popup\">\n<input autocomplete=\"off\" class=\"header-search-box\" id=\"search-string\" name=\"q\" onblur=\"if (this.value == '') {this.value = 'Search your favorite tutorials...';}\" onfocus=\"if (this.value == 'Search your favorite tutorials...') {this.value = '';}\" placeholder=\"Search your favorite tutorials...\" type=\"text\"/>\n<div class=\"magnifying-glass\"><i class=\"icon-search\"></i> Search </div>\n</div>\n</li>\n</ul>\n</nav>\n</div>\n</div>\n</div>\n</header></body></html>\n\n<div style=\"clear:both;\"></div>\n<div class=\"main\" role=\"main\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-2\">\n<aside class=\"sidebar\">\n<style>\r\n.ts {\r\n   text-align:center !important;\r\n   vertical-align:middle !important;\r\n}\r\n</style>\n<div class=\"mini-logo\">\n<img alt=\"Python Tutorial\" src=\"/python/images/python-mini.jpg\">\n</img></div>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Python Basic Tutorial</li>\n<li><a href=\"/python/index.htm\" target=\"_top\">Python - Home</a></li>\n<li><a href=\"/python/python_overview.htm\" target=\"_top\">Python - Overview</a></li>\n<li><a href=\"/python/python_environment.htm\" target=\"_top\">Python - Environment Setup</a></li>\n<li><a href=\"/python/python_basic_syntax.htm\" target=\"_top\">Python - Basic Syntax</a></li>\n<li><a href=\"/python/python_variable_types.htm\" target=\"_top\">Python - Variable Types</a></li>\n<li><a href=\"/python/python_basic_operators.htm\" target=\"_top\">Python - Basic Operators</a></li>\n<li><a href=\"/python/python_decision_making.htm\" target=\"_top\">Python - Decision Making</a></li>\n<li><a href=\"/python/python_loops.htm\" target=\"_top\">Python - Loops</a></li>\n<li><a href=\"/python/python_numbers.htm\" target=\"_top\">Python - Numbers</a></li>\n<li><a href=\"/python/python_strings.htm\" target=\"_top\">Python - Strings</a></li>\n<li><a href=\"/python/python_lists.htm\" target=\"_top\">Python - Lists</a></li>\n<li><a href=\"/python/python_tuples.htm\" target=\"_top\">Python - Tuples</a></li>\n<li><a href=\"/python/python_dictionary.htm\" target=\"_top\">Python - Dictionary</a></li>\n<li><a href=\"/python/python_date_time.htm\" target=\"_top\">Python - Date &amp; Time</a></li>\n<li><a href=\"/python/python_functions.htm\" target=\"_top\">Python - Functions</a></li>\n<li><a href=\"/python/python_modules.htm\" target=\"_top\">Python - Modules</a></li>\n<li><a href=\"/python/python_files_io.htm\" target=\"_top\">Python - Files I/O</a></li>\n<li><a href=\"/python/python_exceptions.htm\" target=\"_top\">Python - Exceptions</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Python Advanced Tutorial</li>\n<li><a href=\"/python/python_classes_objects.htm\" target=\"_top\">Python - Classes/Objects</a></li>\n<li><a href=\"/python/python_reg_expressions.htm\" target=\"_top\">Python - Reg Expressions</a></li>\n<li><a href=\"/python/python_cgi_programming.htm\" target=\"_top\">Python - CGI Programming</a></li>\n<li><a href=\"/python/python_database_access.htm\" target=\"_top\">Python - Database Access</a></li>\n<li><a href=\"/python/python_networking.htm\" target=\"_top\">Python - Networking</a></li>\n<li><a href=\"/python/python_sending_email.htm\" target=\"_top\">Python - Sending Email</a></li>\n<li><a href=\"/python/python_multithreading.htm\" target=\"_top\">Python - Multithreading</a></li>\n<li><a href=\"/python/python_xml_processing.htm\" target=\"_top\">Python - XML Processing</a></li>\n<li><a href=\"/python/python_gui_programming.htm\" target=\"_top\">Python - GUI Programming</a></li>\n<li><a href=\"/python/python_further_extensions.htm\" target=\"_top\">Python - Further Extensions</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Python  Useful Resources</li>\n<li><a href=\"/python/python_questions_answers.htm\" target=\"_top\">Python - Questions and Answers</a></li>\n<li><a href=\"/python/python_quick_guide.htm\" target=\"_top\">Python - Quick Guide</a></li>\n<li><a href=\"/python/python_tools_utilities.htm\" target=\"_top\">Python - Tools/Utilities</a></li>\n<li><a href=\"/python/python_useful_resources.htm\" target=\"_top\">Python - Useful Resources</a></li>\n<li><a href=\"/python/python_discussion.htm\" target=\"_top\">Python - Discussion</a></li>\n</ul>\n<ul class=\"nav nav-list primary push-bottom left-menu special\">\n<li class=\"sreading\">Selected Reading</li>\n<li><a href=\"/upsc_ias_exams.htm\" target=\"_top\">UPSC IAS Exams Notes</a></li>\n<li><a href=\"/developers_best_practices/index.htm\" target=\"_top\">Developer's Best Practices</a></li>\n<li><a href=\"/questions_and_answers.htm\" target=\"_top\">Questions and Answers</a></li>\n<li><a href=\"/effective_resume_writing.htm\" target=\"_top\">Effective Resume Writing</a></li>\n<li><a href=\"/hr_interview_questions/index.htm\" target=\"_top\">HR Interview Questions</a></li>\n<li><a href=\"/computer_glossary.htm\" target=\"_top\">Computer Glossary</a></li>\n<li><a href=\"/computer_whoiswho.htm\" target=\"_top\">Who is Who</a></li>\n</ul>\n</aside>\n</div>\n<!-- PRINTING STARTS HERE -->\n<div class=\"row\">\n<div class=\"content\">\n<div class=\"col-md-7 middle-col\">\n<h1>Python - Basic Syntax</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_environment.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_variable_types.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>The Python language has many similarities to Perl, C, and Java. However, there are some definite differences between the languages.</p>\n<h2>First Python Program</h2>\n<p>Let us execute programs in different modes of programming.</p>\n<h3>Interactive Mode Programming</h3>\n<p>Invoking the interpreter without passing a script file as a parameter brings up the following prompt \u2212</p>\n<pre class=\"prettyprint notranslate\">\n$ python\nPython 2.4.3 (#1, Nov 11 2010, 13:34:43)\n[GCC 4.1.2 20080704 (Red Hat 4.1.2-48)] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt;\n</pre>\n<p>Type the following text at the Python prompt and press the Enter \u2212</p>\n<pre class=\"prettyprint notranslate\">\n&gt;&gt;&gt; print \"Hello, Python!\"\n</pre>\n<p>If you are running new version of Python, then you would need to use print statement with parenthesis as in <b>print (\"Hello, Python!\");</b>. However in Python version 2.4.3, this produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nHello, Python!\n</pre>\n<h3>Script Mode Programming</h3>\n<p>Invoking the interpreter with a script parameter begins execution of the script and continues until the script is finished. When the script is finished, the interpreter is no longer active.</p>\n<p>Let us write a simple Python program in a script. Python files have extension <b>.py</b>. Type the following source code in a test.py file \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/lsYEBf\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\nprint \"Hello, Python!\"\n</pre>\n<p>We assume that you have Python interpreter set in PATH variable. Now, try to run this program as follows \u2212</p>\n<pre class=\"prettyprint notranslate\">\n$ python test.py\n</pre>\n<p>This produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nHello, Python!\n</pre>\n<p>Let us try another way to execute a Python script. Here is the modified test.py file \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/2hIf1p\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nprint \"Hello, Python!\"\n</pre>\n<p>We assume that you have Python interpreter available in /usr/bin directory. Now, try to run this program as follows \u2212</p>\n<pre class=\"prettyprint notranslate\">\n$ chmod +x test.py     # This is to make file executable\n$./test.py\n</pre>\n<p>This produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nHello, Python!\n</pre>\n<h2>Python Identifiers</h2>\n<p>A Python identifier is a name used to identify a variable, function, class, module or other object. An identifier starts with a letter A to Z or a to z or an underscore (_) followed by zero or more letters, underscores and digits (0 to 9).</p>\n<p>Python does not allow punctuation characters such as &amp;commat, $, and % within identifiers. Python is a case sensitive programming language. Thus, <b>Manpower</b> and <b>manpower</b> are two different identifiers in Python.</p>\n<p>Here are naming conventions for Python identifiers \u2212</p>\n<ul class=\"list\">\n<li><p>Class names start with an uppercase letter. All other identifiers start with a lowercase letter.</p></li>\n<li><p>Starting an identifier with a single leading underscore indicates that the identifier is private.</p></li>\n<li><p>Starting an identifier with two leading underscores indicates a strongly private identifier.</p></li>\n<li><p>If the identifier also ends with two trailing underscores, the identifier is a language-defined special name.</p></li>\n</ul>\n<h2>Reserved Words</h2>\n<p>The following list shows the Python keywords. These are reserved words and you cannot use them as constant or variable or any other identifier names. All the Python keywords contain lowercase letters only.</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<td>and</td>\n<td>exec</td>\n<td>not</td>\n</tr>\n<tr>\n<td>assert</td>\n<td>finally</td>\n<td>or</td>\n</tr>\n<tr>\n<td>break</td>\n<td>for</td>\n<td>pass</td>\n</tr>\n<tr>\n<td>class</td>\n<td>from</td>\n<td>print</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>global</td>\n<td>raise</td>\n</tr>\n<tr>\n<td>def</td>\n<td>if</td>\n<td>return</td>\n</tr>\n<tr>\n<td>del</td>\n<td>import</td>\n<td>try</td>\n</tr>\n<tr>\n<td>elif</td>\n<td>in</td>\n<td>while</td>\n</tr>\n<tr>\n<td>else</td>\n<td>is</td>\n<td>with </td>\n</tr>\n<tr>\n<td>except</td>\n<td>lambda</td>\n<td>yield</td>\n</tr>\n</table>\n<h2>Lines and Indentation</h2>\n<p>Python provides no braces to indicate blocks of code for class and function definitions or flow control. Blocks of code are denoted by line indentation, which is rigidly enforced.</p>\n<p>The number of spaces in the indentation is variable, but all statements within the block must be indented the same amount. For example \u2212</p>\n<pre class=\"result notranslate\">\nif True:\n   print \"True\"\nelse:\n   print \"False\"\n</pre>\n<p>However, the following block generates an error \u2212</p>\n<pre class=\"prettyprint notranslate\">\nif True:\nprint \"Answer\"\nprint \"True\"\nelse:\nprint \"Answer\"\nprint \"False\"\n</pre>\n<p>Thus, in Python all the continuous lines indented with same number of spaces would form a block. The following example has various statement blocks \u2212</p>\n<p><b>Note</b> \u2212 Do not try to understand the logic at this point of time. Just make sure you understood various blocks even if they are without braces.</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nimport sys\n\ntry:\n   # open file stream\n   file = open(file_name, \"w\")\nexcept IOError:\n   print \"There was an error writing to\", file_name\n   sys.exit()\nprint \"Enter '\", file_finish,\nprint \"' When finished\"\nwhile file_text != file_finish:\n   file_text = raw_input(\"Enter text: \")\n   if file_text == file_finish:\n      # close the file\n      file.close\n      break\n   file.write(file_text)\n   file.write(\"\\n\")\nfile.close()\nfile_name = raw_input(\"Enter filename: \")\nif len(file_name) == 0:\n   print \"Next time please enter something\"\n   sys.exit()\ntry:\n   file = open(file_name, \"r\")\nexcept IOError:\n   print \"There was an error reading file\"\n   sys.exit()\nfile_text = file.read()\nfile.close()\nprint file_text\n</pre>\n<h2>Multi-Line Statements</h2>\n<p>Statements in Python typically end with a new line. Python does, however, allow the use of the line continuation character (\\) to denote that the line should continue. For example \u2212</p>\n<pre class=\"result notranslate\">\ntotal = item_one + \\\n        item_two + \\\n        item_three\n</pre>\n<p>Statements contained within the [], {}, or () brackets do not need to use the line continuation character. For example \u2212</p>\n<pre class=\"result notranslate\">\ndays = ['Monday', 'Tuesday', 'Wednesday',\n        'Thursday', 'Friday']\n</pre>\n<h2>Quotation in Python</h2>\n<p>Python accepts single ('), double (\") and triple (''' or \"\"\") quotes to denote string literals, as long as the same type of quote starts and ends the string.</p>\n<p>The triple quotes are used to span the string across multiple lines. For example, all the following are legal \u2212</p>\n<pre class=\"result notranslate\">\nword = 'word'\nsentence = \"This is a sentence.\"\nparagraph = \"\"\"This is a paragraph. It is\nmade up of multiple lines and sentences.\"\"\"\n</pre>\n<h2>Comments in Python</h2>\n<p>A hash sign (#) that is not inside a string literal begins a comment. All characters after the # and up to the end of the physical line are part of the comment and the Python interpreter ignores them.</p>\n<a class=\"demo\" href=\"http://tpcg.io/VgbqMb\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\n# First comment\nprint \"Hello, Python!\" # second comment\n</pre>\n<p>This produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nHello, Python!\n</pre>\n<p>You can type a comment on the same line after a statement or expression \u2212</p>\n<pre class=\"result notranslate\">\nname = \"Madisetti\" # This is again comment\n</pre>\n<p>You can comment multiple lines as follows \u2212</p>\n<pre class=\"result notranslate\">\n# This is a comment.\n# This is a comment, too.\n# This is a comment, too.\n# I said that already.\n</pre>\n<p>Following triple-quoted string is also ignored by Python interpreter and can be used as a multiline comments:</p>\n<pre class=\"result notranslate\">\n'''\nThis is a multiline\ncomment.\n'''\n</pre>\n<h2>Using Blank Lines</h2>\n<p>A line containing only whitespace, possibly with a comment, is known as a blank line and Python totally ignores it.</p>\n<p>In an interactive interpreter session, you must enter an empty physical line to terminate a multiline statement.</p>\n<h2>Waiting for the User</h2>\n<p>The following line of the program displays the prompt, the statement saying \u201cPress the enter key to exit\u201d, and waits for the user to take action \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nraw_input(\"\\n\\nPress the enter key to exit.\")\n</pre>\n<p>Here, \"\\n\\n\" is used to create two new lines before displaying the actual line. Once the user presses the key, the program ends. This is a nice trick to keep a console window open until the user is done with an application.</p>\n<h2>Multiple Statements on a Single Line</h2>\n<p>The semicolon ( ; ) allows multiple statements on the single line given that neither statement starts a new code block. Here is a sample snip using the semicolon \u2212</p>\n<pre class=\"prettyprint notranslate\">\nimport sys; x = 'foo'; sys.stdout.write(x + '\\n')\n</pre>\n<h2>Multiple Statement Groups as Suites</h2>\n<p>A group of individual statements, which make a single code block are called <b>suites</b> in Python. Compound or complex statements, such as if, while, def, and class require a header line and a suite.</p>\n<p>Header lines begin the statement (with the keyword) and terminate with a colon ( : ) and are followed by one or more lines which make up the suite. For example \u2212</p>\n<pre class=\"result notranslate\">\nif expression : \n   suite\nelif expression : \n   suite \nelse : \n   suite\n</pre>\n<h2>Command Line Arguments</h2>\n<p>Many programs can be run to provide you with some basic information about how they should be run. Python enables you to do this with -h \u2212</p>\n<pre class=\"prettyprint notranslate\">\n$ python -h\nusage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...\nOptions and arguments (and corresponding environment variables):\n-c cmd : program passed in as string (terminates option list)\n-d     : debug output from parser (also PYTHONDEBUG=x)\n-E     : ignore environment variables (such as PYTHONPATH)\n-h     : print this help message and exit\n\n[ etc. ]\n</pre>\n<p>You can also program your script in such a way that it should accept various options. <a href=\"/python/python_command_line_arguments.htm\">Command Line Arguments</a> is an advanced topic and should be studied a bit later once you have gone through rest of the Python concepts.</p>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_environment.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_variable_types.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n<div class=\"row\">\n<div class=\"col-md-3\" id=\"rightbar\">\n<div class=\"simple-ad\">\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.facebook.com/sharer.php?u=' + 'https://www.tutorialspoint.com/python/python_basic_syntax.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/facebookIcon.jpg\">\n</img></a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://twitter.com/share?url=' + 'https://www.tutorialspoint.com/python/python_basic_syntax.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/twitterIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'https://www.tutorialspoint.com/python/python_basic_syntax.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/linkedinIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=https://www.tutorialspoint.com/python/python_basic_syntax.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/googlePlusIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.stumbleupon.com/submit?url=https://www.tutorialspoint.com/python/python_basic_syntax.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/StumbleUponIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://reddit.com/submit?url=https://www.tutorialspoint.com/python/python_basic_syntax.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/reddit.jpg\"/>\n</a>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\ngoogle_ad_format = \"300x250_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 600;\ngoogle_ad_format = \"300x600_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"ca-pub-2537027957187252\";\n/* Right Side Ad */\ngoogle_ad_slot = \"right_side_ad\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\n//-->\n</script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"footer-copyright\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-1\">\n<a class=\"logo\" href=\"index.htm\"> <img alt=\"Tutorials Point\" class=\"img-responsive\" src=\"/scripts/img/logo-footer.png\"/> </a>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<nav id=\"sub-menu\">\n<ul>\n<li><a href=\"/about/about_privacy.htm\">Privacy Policy</a></li>\n<li><a href=\"/about/about_cookies.htm\">Cookies Policy</a></li>\n<li><a href=\"/about/contact_us.htm\">Contact</a></li>\n</ul>\n</nav>\n</div>\n<div class=\"col-md-3 col-sm-12 col-xs-12\">\n<p>\u00a9 Copyright 2019. All Rights Reserved.</p>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<div class=\"news-group\">\n<input autocomplete=\"off\" class=\"form-control-foot search\" id=\"textemail\" name=\"textemail\" onblur=\"if (this.value == '') {this.value = 'Enter email for newsletter...';}\" onfocus=\"if (this.value == 'Enter email for newsletter...') {this.value = '';}\" placeholder=\"Enter email for newsletter\" type=\"text\"/>\n<span class=\"input-group-btn\"> <button class=\"btn btn-default btn-footer\" id=\"btnemail\" onclick=\"javascript:void(0);\" type=\"submit\">go</button> </span>\n<div id=\"newsresponse\"></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"privacy-banner\">\n<div>\n<p>\n      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.\n      <a href=\"javascript:void(0)\" id=\"banner-accept\">Accept</a>\n<a href=\"/about/about_cookies.htm\" id=\"banner-learn\" target=\"_blank\">Learn more</a>\n</p>\n</div>\n</div>\n<script>\n// Banner Trigger if Not Closed\nif (!localStorage.bannerClosed) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n} else {\n  document.getElementById('privacy-banner').style.display = \"none\";\n}\ndocument.getElementById('banner-accept').addEventListener('click', function() {\n  document.getElementById('privacy-banner').style.display = \"none\";\n  localStorage.bannerClosed = 'true';\n});\nif (navigator.userAgent.match(/Opera|OPR\\//)) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n}\n</script>\n<!-- Libs -->\n<script src=\"/theme/js/custom-min.js?v=7\"></script>\n<script src=\"https://www.google-analytics.com/urchin.js\">\n</script>\n<script>\n_uacct = \"UA-232293-6\";\nurchinTracker();\n$('.pg-icon').click(function(){\n   $('.wrapLoader').show();\n});\n</script>\n<script src=\"/theme/js/jquery.colorbox-min.js\"></script>\n<script>\n   var tryit = new $.TryIt('/python/try_python.php');\n   tryit.compile();\n</script>\n\n\n", "title": "Python - Basic Syntax", "content_html": "<div class=\"col-md-7 middle-col\">\n<h1>Python - Basic Syntax</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_environment.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_variable_types.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>The Python language has many similarities to Perl, C, and Java. However, there are some definite differences between the languages.</p>\n<h2>First Python Program</h2>\n<p>Let us execute programs in different modes of programming.</p>\n<h3>Interactive Mode Programming</h3>\n<p>Invoking the interpreter without passing a script file as a parameter brings up the following prompt \u2212</p>\n<pre class=\"prettyprint notranslate\">\n$ python\nPython 2.4.3 (#1, Nov 11 2010, 13:34:43)\n[GCC 4.1.2 20080704 (Red Hat 4.1.2-48)] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt;\n</pre>\n<p>Type the following text at the Python prompt and press the Enter \u2212</p>\n<pre class=\"prettyprint notranslate\">\n&gt;&gt;&gt; print \"Hello, Python!\"\n</pre>\n<p>If you are running new version of Python, then you would need to use print statement with parenthesis as in <b>print (\"Hello, Python!\");</b>. However in Python version 2.4.3, this produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nHello, Python!\n</pre>\n<h3>Script Mode Programming</h3>\n<p>Invoking the interpreter with a script parameter begins execution of the script and continues until the script is finished. When the script is finished, the interpreter is no longer active.</p>\n<p>Let us write a simple Python program in a script. Python files have extension <b>.py</b>. Type the following source code in a test.py file \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/lsYEBf\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\nprint \"Hello, Python!\"\n</pre>\n<p>We assume that you have Python interpreter set in PATH variable. Now, try to run this program as follows \u2212</p>\n<pre class=\"prettyprint notranslate\">\n$ python test.py\n</pre>\n<p>This produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nHello, Python!\n</pre>\n<p>Let us try another way to execute a Python script. Here is the modified test.py file \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/2hIf1p\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nprint \"Hello, Python!\"\n</pre>\n<p>We assume that you have Python interpreter available in /usr/bin directory. Now, try to run this program as follows \u2212</p>\n<pre class=\"prettyprint notranslate\">\n$ chmod +x test.py     # This is to make file executable\n$./test.py\n</pre>\n<p>This produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nHello, Python!\n</pre>\n<h2>Python Identifiers</h2>\n<p>A Python identifier is a name used to identify a variable, function, class, module or other object. An identifier starts with a letter A to Z or a to z or an underscore (_) followed by zero or more letters, underscores and digits (0 to 9).</p>\n<p>Python does not allow punctuation characters such as &amp;commat, $, and % within identifiers. Python is a case sensitive programming language. Thus, <b>Manpower</b> and <b>manpower</b> are two different identifiers in Python.</p>\n<p>Here are naming conventions for Python identifiers \u2212</p>\n<ul class=\"list\">\n<li><p>Class names start with an uppercase letter. All other identifiers start with a lowercase letter.</p></li>\n<li><p>Starting an identifier with a single leading underscore indicates that the identifier is private.</p></li>\n<li><p>Starting an identifier with two leading underscores indicates a strongly private identifier.</p></li>\n<li><p>If the identifier also ends with two trailing underscores, the identifier is a language-defined special name.</p></li>\n</ul>\n<h2>Reserved Words</h2>\n<p>The following list shows the Python keywords. These are reserved words and you cannot use them as constant or variable or any other identifier names. All the Python keywords contain lowercase letters only.</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<td>and</td>\n<td>exec</td>\n<td>not</td>\n</tr>\n<tr>\n<td>assert</td>\n<td>finally</td>\n<td>or</td>\n</tr>\n<tr>\n<td>break</td>\n<td>for</td>\n<td>pass</td>\n</tr>\n<tr>\n<td>class</td>\n<td>from</td>\n<td>print</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>global</td>\n<td>raise</td>\n</tr>\n<tr>\n<td>def</td>\n<td>if</td>\n<td>return</td>\n</tr>\n<tr>\n<td>del</td>\n<td>import</td>\n<td>try</td>\n</tr>\n<tr>\n<td>elif</td>\n<td>in</td>\n<td>while</td>\n</tr>\n<tr>\n<td>else</td>\n<td>is</td>\n<td>with </td>\n</tr>\n<tr>\n<td>except</td>\n<td>lambda</td>\n<td>yield</td>\n</tr>\n</table>\n<h2>Lines and Indentation</h2>\n<p>Python provides no braces to indicate blocks of code for class and function definitions or flow control. Blocks of code are denoted by line indentation, which is rigidly enforced.</p>\n<p>The number of spaces in the indentation is variable, but all statements within the block must be indented the same amount. For example \u2212</p>\n<pre class=\"result notranslate\">\nif True:\n   print \"True\"\nelse:\n   print \"False\"\n</pre>\n<p>However, the following block generates an error \u2212</p>\n<pre class=\"prettyprint notranslate\">\nif True:\nprint \"Answer\"\nprint \"True\"\nelse:\nprint \"Answer\"\nprint \"False\"\n</pre>\n<p>Thus, in Python all the continuous lines indented with same number of spaces would form a block. The following example has various statement blocks \u2212</p>\n<p><b>Note</b> \u2212 Do not try to understand the logic at this point of time. Just make sure you understood various blocks even if they are without braces.</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nimport sys\n\ntry:\n   # open file stream\n   file = open(file_name, \"w\")\nexcept IOError:\n   print \"There was an error writing to\", file_name\n   sys.exit()\nprint \"Enter '\", file_finish,\nprint \"' When finished\"\nwhile file_text != file_finish:\n   file_text = raw_input(\"Enter text: \")\n   if file_text == file_finish:\n      # close the file\n      file.close\n      break\n   file.write(file_text)\n   file.write(\"\\n\")\nfile.close()\nfile_name = raw_input(\"Enter filename: \")\nif len(file_name) == 0:\n   print \"Next time please enter something\"\n   sys.exit()\ntry:\n   file = open(file_name, \"r\")\nexcept IOError:\n   print \"There was an error reading file\"\n   sys.exit()\nfile_text = file.read()\nfile.close()\nprint file_text\n</pre>\n<h2>Multi-Line Statements</h2>\n<p>Statements in Python typically end with a new line. Python does, however, allow the use of the line continuation character (\\) to denote that the line should continue. For example \u2212</p>\n<pre class=\"result notranslate\">\ntotal = item_one + \\\n        item_two + \\\n        item_three\n</pre>\n<p>Statements contained within the [], {}, or () brackets do not need to use the line continuation character. For example \u2212</p>\n<pre class=\"result notranslate\">\ndays = ['Monday', 'Tuesday', 'Wednesday',\n        'Thursday', 'Friday']\n</pre>\n<h2>Quotation in Python</h2>\n<p>Python accepts single ('), double (\") and triple (''' or \"\"\") quotes to denote string literals, as long as the same type of quote starts and ends the string.</p>\n<p>The triple quotes are used to span the string across multiple lines. For example, all the following are legal \u2212</p>\n<pre class=\"result notranslate\">\nword = 'word'\nsentence = \"This is a sentence.\"\nparagraph = \"\"\"This is a paragraph. It is\nmade up of multiple lines and sentences.\"\"\"\n</pre>\n<h2>Comments in Python</h2>\n<p>A hash sign (#) that is not inside a string literal begins a comment. All characters after the # and up to the end of the physical line are part of the comment and the Python interpreter ignores them.</p>\n<a class=\"demo\" href=\"http://tpcg.io/VgbqMb\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\n# First comment\nprint \"Hello, Python!\" # second comment\n</pre>\n<p>This produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nHello, Python!\n</pre>\n<p>You can type a comment on the same line after a statement or expression \u2212</p>\n<pre class=\"result notranslate\">\nname = \"Madisetti\" # This is again comment\n</pre>\n<p>You can comment multiple lines as follows \u2212</p>\n<pre class=\"result notranslate\">\n# This is a comment.\n# This is a comment, too.\n# This is a comment, too.\n# I said that already.\n</pre>\n<p>Following triple-quoted string is also ignored by Python interpreter and can be used as a multiline comments:</p>\n<pre class=\"result notranslate\">\n'''\nThis is a multiline\ncomment.\n'''\n</pre>\n<h2>Using Blank Lines</h2>\n<p>A line containing only whitespace, possibly with a comment, is known as a blank line and Python totally ignores it.</p>\n<p>In an interactive interpreter session, you must enter an empty physical line to terminate a multiline statement.</p>\n<h2>Waiting for the User</h2>\n<p>The following line of the program displays the prompt, the statement saying \u201cPress the enter key to exit\u201d, and waits for the user to take action \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nraw_input(\"\\n\\nPress the enter key to exit.\")\n</pre>\n<p>Here, \"\\n\\n\" is used to create two new lines before displaying the actual line. Once the user presses the key, the program ends. This is a nice trick to keep a console window open until the user is done with an application.</p>\n<h2>Multiple Statements on a Single Line</h2>\n<p>The semicolon ( ; ) allows multiple statements on the single line given that neither statement starts a new code block. Here is a sample snip using the semicolon \u2212</p>\n<pre class=\"prettyprint notranslate\">\nimport sys; x = 'foo'; sys.stdout.write(x + '\\n')\n</pre>\n<h2>Multiple Statement Groups as Suites</h2>\n<p>A group of individual statements, which make a single code block are called <b>suites</b> in Python. Compound or complex statements, such as if, while, def, and class require a header line and a suite.</p>\n<p>Header lines begin the statement (with the keyword) and terminate with a colon ( : ) and are followed by one or more lines which make up the suite. For example \u2212</p>\n<pre class=\"result notranslate\">\nif expression : \n   suite\nelif expression : \n   suite \nelse : \n   suite\n</pre>\n<h2>Command Line Arguments</h2>\n<p>Many programs can be run to provide you with some basic information about how they should be run. Python enables you to do this with -h \u2212</p>\n<pre class=\"prettyprint notranslate\">\n$ python -h\nusage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...\nOptions and arguments (and corresponding environment variables):\n-c cmd : program passed in as string (terminates option list)\n-d     : debug output from parser (also PYTHONDEBUG=x)\n-E     : ignore environment variables (such as PYTHONPATH)\n-h     : print this help message and exit\n\n[ etc. ]\n</pre>\n<p>You can also program your script in such a way that it should accept various options. <a href=\"/python/python_command_line_arguments.htm\">Command Line Arguments</a> is an advanced topic and should be studied a bit later once you have gone through rest of the Python concepts.</p>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_environment.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_variable_types.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>"}