{"title_html": "<h1>Python - Date &amp; Time</h1>", "content": "\n Python - Date & Time \n  \n Advertisements \n \n<!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//-->\n\n\n \n  \n \n Previous Page\n \n \nNext Page \u00a0\n \n  \n  \n A Python program can handle date and time in several ways. Converting between date formats is a common chore for computers. Python's time and calendar modules help track dates and times. \n What is Tick? \n Time intervals are floating-point numbers in units of seconds. Particular instants in time are expressed in seconds since 12:00am, January 1, 1970(epoch). \n There is a popular time module available in Python which provides functions for working with times, and for converting between representations. The function time.time() returns the current system time in ticks since 12:00am, January 1, 1970(epoch). \n Example \n  Live Demo \n \n#!/usr/bin/python\nimport time;  # This is required to include time module.\n\nticks = time.time()\nprint \"Number of ticks since 12:00am, January 1, 1970:\", ticks\n \n This would produce a result something as follows \u2212 \n \nNumber of ticks since 12:00am, January 1, 1970: 7186862.73399\n \n Date arithmetic is easy to do with ticks. However, dates before the epoch cannot be represented in this form. Dates in the far future also cannot be represented this way - the cutoff point is sometime in 2038 for UNIX and Windows. \n What is TimeTuple? \n Many of Python's time functions handle time as a tuple of 9 numbers, as shown below \u2212 \n \n\nIndex\nField\nValues\n\n\n0\n4-digit year\n2008\n\n\n1\nMonth\n1 to 12\n\n\n2\nDay\n1 to 31\n\n\n3\nHour\n0 to 23\n\n\n4\nMinute\n0 to 59\n\n\n5\nSecond\n0 to 61 (60 or 61 are leap-seconds)\n\n\n6\nDay of Week\n0 to 6 (0 is Monday)\n\n\n7\nDay of year\n1 to 366 (Julian day)\n\n\n8\nDaylight savings\n-1, 0, 1, -1 means library determines DST\n\n \n The above tuple is equivalent to struct_time structure. This structure has following attributes \u2212 \n \n\nIndex\nAttributes\nValues\n\n\n0\ntm_year\n2008\n\n\n1\ntm_mon\n1 to 12\n\n\n2\ntm_mday\n1 to 31\n\n\n3\ntm_hour\n0 to 23\n\n\n4\ntm_min\n0 to 59\n\n\n5\ntm_sec\n0 to 61 (60 or 61 are leap-seconds)\n\n\n6\ntm_wday\n0 to 6 (0 is Monday)\n\n\n7\ntm_yday\n1 to 366 (Julian day)\n\n\n8\ntm_isdst\n-1, 0, 1, -1 means library determines DST\n\n \n Getting current time \n To translate a time instant from a seconds since the epoch floating-point value into a time-tuple, pass the floating-point value to a function (e.g., localtime) that returns a time-tuple with all nine items valid. \n  Live Demo \n \n#!/usr/bin/python\nimport time;\n\nlocaltime = time.localtime(time.time())\nprint \"Local current time :\", localtime\n \n This would produce the following result, which could be formatted in any other presentable form \u2212 \n \nLocal current time : time.struct_time(tm_year=2013, tm_mon=7, \ntm_mday=17, tm_hour=21, tm_min=26, tm_sec=3, tm_wday=2, tm_yday=198, tm_isdst=0)\n \n Getting formatted time \n You can format any time as per your requirement, but simple method to get time in readable format is asctime() \u2212 \n  Live Demo \n \n#!/usr/bin/python\nimport time;\n\nlocaltime = time.asctime( time.localtime(time.time()) )\nprint \"Local current time :\", localtime\n \n This would produce the following result \u2212 \n \nLocal current time : Tue Jan 13 10:17:09 2009\n \n Getting calendar for a month \n The calendar module gives a wide range of methods to play with yearly and monthly calendars. Here, we print a calendar for a given month ( Jan 2008 ) \u2212 \n  Live Demo \n \n#!/usr/bin/python\nimport calendar\n\ncal = calendar.month(2008, 1)\nprint \"Here is the calendar:\"\nprint cal\n \n This would produce the following result \u2212 \n \nHere is the calendar:\n   January 2008\nMo Tu We Th Fr Sa Su\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31\n \n The time Module \n There is a popular time module available in Python which provides functions for working with times and for converting between representations. Here is the list of all available methods \u2212 \n \n\nSr.No.\nFunction with Description\n\n\n1\ntime.altzone\nThe offset of the local DST timezone, in seconds west of UTC, if one is defined. This is negative if the local DST timezone is east of UTC (as in Western Europe, including the UK). Only use this if daylight is nonzero.\n\n\n2\ntime.asctime([tupletime])\nAccepts a time-tuple and returns a readable 24-character string such as 'Tue Dec 11 18:07:14 2008'.\n\n\n3\ntime.clock( )\nReturns the current CPU time as a floating-point number of seconds. To measure computational costs of different approaches, the value of time.clock is more useful than that of time.time().\n\n\n4\ntime.ctime([secs])\nLike asctime(localtime(secs)) and without arguments is like asctime( )\n\n\n5\ntime.gmtime([secs])\nAccepts an instant expressed in seconds since the epoch and returns a time-tuple t with the UTC time. Note : t.tm_isdst is always 0\n\n\n6\ntime.localtime([secs])\nAccepts an instant expressed in seconds since the epoch and returns a time-tuple t with the local time (t.tm_isdst is 0 or 1, depending on whether DST applies to instant secs by local rules).\n\n\n7\ntime.mktime(tupletime)\nAccepts an instant expressed as a time-tuple in local time and returns a floating-point value with the instant expressed in seconds since the epoch.\n\n\n8\ntime.sleep(secs)\nSuspends the calling thread for secs seconds.\n\n\n9\ntime.strftime(fmt[,tupletime])\nAccepts an instant expressed as a time-tuple in local time and returns a string representing the instant as specified by string fmt.\n\n\n10\ntime.strptime(str,fmt='%a %b %d %H:%M:%S %Y')\nParses str according to format string fmt and returns the instant in time-tuple format.\n\n\n11\ntime.time( )\nReturns the current time instant, a floating-point number of seconds since the epoch.\n\n\n12\ntime.tzset()\nResets the time conversion rules used by the library routines. The environment variable TZ specifies how this is done.\n\n \n Let us go through the functions briefly \u2212 \n There are following two important attributes available with time module \u2212 \n \n\nSr.No.\nAttribute with Description\n\n\n1\ntime.timezone\nAttribute time.timezone is the offset in seconds of the local time zone (without DST) from UTC (>0 in the Americas; <=0 in most of Europe, Asia, Africa).\n\n\n2\ntime.tzname\nAttribute time.tzname is a pair of locale-dependent strings, which are the names of the local time zone without and with DST, respectively.\n\n \n The calendar Module \n The calendar module supplies calendar-related functions, including functions to print a text calendar for a given month or year. \n By default, calendar takes Monday as the first day of the week and Sunday as the last one. To change this, call calendar.setfirstweekday() function. \n Here is a list of functions available with the calendar module \u2212 \n \n\nSr.No.\nFunction with Description\n\n\n1\ncalendar.calendar(year,w=2,l=1,c=6)\nReturns a multiline string with a calendar for year year formatted into three columns separated by c spaces. w is the width in characters of each date; each line has length 21*w+18+2*c. l is the number of lines for each week.\n\n\n2\ncalendar.firstweekday( )\nReturns the current setting for the weekday that starts each week. By default, when calendar is first imported, this is 0, meaning Monday.\n\n\n3\ncalendar.isleap(year)\nReturns True if year is a leap year; otherwise, False.\n\n\n4\ncalendar.leapdays(y1,y2)\nReturns the total number of leap days in the years within range(y1,y2).\n\n\n5\ncalendar.month(year,month,w=2,l=1)\nReturns a multiline string with a calendar for month month of year year, one line per week plus two header lines. w is the width in characters of each date; each line has length 7*w+6. l is the number of lines for each week.\n\n\n6\ncalendar.monthcalendar(year,month)\nReturns a list of lists of ints. Each sublist denotes a week. Days outside month month of year year are set to 0; days within the month are set to their day-of-month, 1 and up.\n\n\n7\ncalendar.monthrange(year,month)\nReturns two integers. The first one is the code of the weekday for the first day of the month month in year year; the second one is the number of days in the month. Weekday codes are 0 (Monday) to 6 (Sunday); month numbers are 1 to 12.\n\n\n8\ncalendar.prcal(year,w=2,l=1,c=6)\nLike print calendar.calendar(year,w,l,c).\n\n\n9\ncalendar.prmonth(year,month,w=2,l=1)\nLike print calendar.month(year,month,w,l).\n\n\n10\ncalendar.setfirstweekday(weekday)\nSets the first day of each week to weekday code weekday. Weekday codes are 0 (Monday) to 6 (Sunday).\n\n\n11\ncalendar.timegm(tupletime)\nThe inverse of time.gmtime: accepts a time instant in time-tuple form and returns the same instant as a floating-point number of seconds since the epoch.\n\n\n12\ncalendar.weekday(year,month,day)\nReturns the weekday code for the given date. Weekday codes are 0 (Monday) to 6 (Sunday); month numbers are 1 (January) to 12 (December).\n\n \n Other Modules & Functions \n If you are interested, then here you would find a list of other important modules and functions to play with date & time in Python \u2212 \n \nThe datetime Module\nThe pytz Module\nThe dateutil Module\n \n  \n \n Previous Page\n \n \n Print\n \n \nNext Page \u00a0\n \n  \n  PRINTING ENDS HERE  \n \nAdvertisements\n<!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//-->\n\n\n \n", "url": "https://www.tutorialspoint.com/python/python_date_time.htm", "html": "<!DOCTYPE html>\n\n<!--[if IE 8]><html class=\"ie ie8\"> <![endif]-->\n<!--[if IE 9]><html class=\"ie ie9\"> <![endif]-->\n<!--[if gt IE 9]><!--> <html> <!--<![endif]-->\n<head>\n<!-- Basic -->\n<meta charset=\"utf-8\"/>\n<title>Python Date and Time</title>\n<meta content=\"Python Date and Time - Learn Python in simple and easy steps starting from basic to advanced concepts with examples including Python Syntax Object Oriented Language, Methods, Tuples, Tools/Utilities, Exceptions Handling, Sockets, GUI, Extentions, XML Programming.\" name=\"description\">\n<meta content=\"Python, Tutorials, Learning, Beginners, Basics, Object Oriented Language, Methods, Overriding, Networking, Multithreading,Methods, Tuples, Tools/Utilities, Exceptions Handling, Sockets, GUI, Extentions, XML, Programming.\" name=\"Keywords\"/>\n<base href=\"https://www.tutorialspoint.com/\"/>\n<link href=\"/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"/>\n<meta content=\"width=device-width,initial-scale=1.0,user-scalable=yes\" name=\"viewport\"/>\n<meta content=\"en_US\" property=\"og:locale\">\n<meta content=\"website\" property=\"og:type\"/>\n<meta content=\"471319149685276\" property=\"fb:app_id\"/>\n<meta content=\"www.tutorialspoint.com\" property=\"og:site_name\"/>\n<meta content=\"yes\" name=\"apple-mobile-web-app-capable\"/>\n<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"/>\n<meta content=\"tutorialspoint.com\" name=\"author\"/>\n<script src=\"https://www.tutorialspoint.com/theme/js/script-min-v4.js?v=2\" type=\"text/javascript\"></script>\n<link href=\"https://www.tutorialspoint.com/theme/css/style-min.css?v=3.1\" rel=\"stylesheet\"/>\n<script>\r\nfunction openNav() {\t\r\n  document.getElementById(\"mySidenav\").style.width = \"250px\";\r\n  document.getElementById(\"right_obs\").style.display = \"block\";\r\n}\r\nfunction closeNav() {\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\nfunction close_obs_sidenav(){\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\n</script>\n<!-- Head Libs -->\n<!--[if IE 8]>\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/theme/css/ie8.css\">\r\n<![endif]-->\n<style>\r\n#privacy-banner {\r\n    position: fixed;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    max-width: 100%;\r\n    padding: 1rem .5rem;\r\n    background: #fff;\r\n    z-index: 1030;\r\n    color: #000;\r\n    font-size: 14px;\r\n    margin: 0;\r\n    display: none;\r\n    border-top: 2px solid rgb(130, 130, 130);\r\n  }\r\n  #privacy-banner p {\r\n    margin: 0;\r\n    color: #000;\r\n    text-align: center;\r\n  }\r\n  #privacy-banner a {\r\n    text-decoration: none;\r\n    margin: 20px auto 0 auto;\r\n    display: block;\r\n    max-width: 150px;\r\n  }\r\n  #privacy-banner a:hover {\r\n    text-decoration: underline;\r\n  }\r\n  #banner-learn {\r\n    color: #000;\r\n  }\r\n  #banner-accept {\r\n    padding: 7px 15px;\r\n    color: #fff;\r\n    border-radius: 5px;\r\n    background:#737373 !important;\r\n  }\r\n  @media (min-width: 768px) {\r\n    #privacy-banner {\r\n      padding: 1.5rem .5rem;\r\n    }\r\n    #privacy-banner a {\r\n      display: inline-block;\r\n      margin: 0 10px;\r\n    }\r\n}\r\npre.prettyprint.tryit {min-height:37px; background: #eee url(/python/images/try-it.jpg) top right no-repeat !important}select{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }\r\n.btnsbmt{ background: #fdbf00 !important;}\r\nul.nav-list.primary>li a.videolink{    background: none; margin: 0px; padding: 0px; border: 1px solid #d6d6d6;}\r\ndiv.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #fdbf00 url(/images/pattern.png) repeat center center !important;}\r\n.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #fdbf00 !important;}\r\n.submenu-item{ border-bottom: 2px solid #fdbf00 !important; border-top: 2px solid #fdbf00 !important }\r\n.ace_scroller{overflow: auto!important;}\r\na.demo{font-family: \"Open Sans\",Arial,sans-serif; background:#fdbf00; color:#fff; font-size:13px; padding:3px 10px; border:1px solid #d6d6d6; position:absolute; right:5px; margin:-6px 17px 0px 0px;}\r\na.demo:hover{opacity:.8}\r\n</style>\n<script>\r\n$(document).ready(function() {\r\n  $('input[name=\"q\"]').keydown(function(event){\r\n    if(event.keyCode == 13) {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n  });\r\n});\r\n</script>\n</meta></meta></head>\n<body onload=\"prettyPrint()\">\n<div class=\"wrapLoader\">\n<div class=\"imgLoader\">\n<img alt=\"\" height=\"70\" src=\"/images/loading-cg.gif\" width=\"70\"/>\n</div>\n</div>\n<div class=\"display-none\" id=\"right_obs\" onclick=\"close_obs_sidenav()\"></div>\n<header>\n<div class=\"container\">\n<h1 class=\"logo\">\n<a href=\"index.htm\" title=\"tutorialspoint\">\n<img alt=\"tutorialspoint\" src=\"/python/images/logo.png\"/>\n</a>\n</h1>\n<ul class=\"tp-inline-block pull-right\" id=\"tp-head-icons\">\n<li>\n<div class=\"tp-second-nav tp-display-none tp-pointer\" onclick=\"openNav()\">\n<i class=\"fa fa-th-large fa-lg\"></i>\n</div>\n</li>\n</ul>\n<button class=\"btn btn-responsive-nav btn-inverse\" data-target=\".nav-main-collapse\" data-toggle=\"collapse\" id=\"pull\" style=\"top: 24px!important\"> <i class=\"icon icon-bars\"></i> </button>\n<nav>\n<ul class=\"nav nav-pills nav-top\">\n<li><a href=\"/about/about_careers.htm\" style=\"background: #fffb09; font-weight: bold;\"><i class=\"icon icon-suitcase\"></i> Jobs</a></li>\n<li> <a href=\"/programming_examples/\" target=\"_blank\"><i class=\"fa fa-cubes\"></i> \u00a0Examples</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/whiteboard.htm\"><img alt=\"Whiteboard\" src=\"theme/css/icons/image-editor.png\" title=\"Whiteboard\"/> \u00a0Whiteboard</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/netmeeting.php\"><i class=\"fa-camera\"></i> \u00a0Net Meeting</a> </li>\n<li> <a href=\"/online_dev_tools.htm\"> <i class=\"dev-tools-menu\" style=\"opacity:.5\"></i> Tools </a> </li>\n<li> <a href=\"/articles/index.php\"><i class=\"icon icon-file-text-o\"></i> \u00a0Articles</a> </li>\n<li class=\"top-icons\">\n<ul class=\"social-icons\">\n<li class=\"facebook\"><a data-placement=\"bottom\" href=\"https://www.facebook.com/tutorialspointindia\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Facebook\">Facebook</a></li>\n<li class=\"googleplus\"><a data-placement=\"bottom\" href=\"https://plus.google.com/u/0/116678774017490391259/posts\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Google+\">Google+</a></li>\n<li class=\"twitter\"><a data-placement=\"bottom\" href=\"https://www.twitter.com/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Twitter\">Twitter</a></li>\n<li class=\"linkedin\"><a data-placement=\"bottom\" href=\"https://www.linkedin.com/company/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Linkedin\">Linkedin</a></li>\n<li class=\"youtube\"><a data-placement=\"bottom\" href=\"https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint YouTube\">YouTube</a></li>\n</ul>\n</li>\n</ul>\n</nav>\n</div>\n<div class=\"sidenav\" id=\"mySidenav\">\n<div class=\"navbar nav-main\">\n<div class=\"container\">\n<nav class=\"nav-main mega-menu\">\n<ul class=\"nav nav-pills nav-main\" id=\"mainMenu\">\n<li class=\"dropdown no-sub-menu\"> <a class=\"dropdown\" href=\"index.htm\"><i class=\"icon icon-home\"></i> Home</a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"/questions/index.php\"><i class=\"fa fa-send\"></i> Q/A </a> </li>\n<li class=\"dropdown\"><a class=\"dropdown\" href=\"tutorialslibrary.htm\"><span class=\"tut-lib\"> Library </span></a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"videotutorials/index.htm\"><i class=\"fa-toggle-right\"></i> Videos </a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"tutor_connect/index.php\"><i class=\"fa-user\"> </i> Tutors</a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"codingground.htm\"><i class=\"fa-code\"></i> Coding Ground </a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"https://store.tutorialspoint.com/\"><i class=\"fa-usd\"></i> Store </a> </li>\n<li class=\"dropdown no-sub-menu\">\n<div class=\"searchform-popup\">\n<input autocomplete=\"off\" class=\"header-search-box\" id=\"search-string\" name=\"q\" onblur=\"if (this.value == '') {this.value = 'Search your favorite tutorials...';}\" onfocus=\"if (this.value == 'Search your favorite tutorials...') {this.value = '';}\" placeholder=\"Search your favorite tutorials...\" type=\"text\"/>\n<div class=\"magnifying-glass\"><i class=\"icon-search\"></i> Search </div>\n</div>\n</li>\n</ul>\n</nav>\n</div>\n</div>\n</div>\n</header></body></html>\n\n<div style=\"clear:both;\"></div>\n<div class=\"main\" role=\"main\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-2\">\n<aside class=\"sidebar\">\n<style>\r\n.ts {\r\n   text-align:center !important;\r\n   vertical-align:middle !important;\r\n}\r\n</style>\n<div class=\"mini-logo\">\n<img alt=\"Python Tutorial\" src=\"/python/images/python-mini.jpg\">\n</img></div>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Python Basic Tutorial</li>\n<li><a href=\"/python/index.htm\" target=\"_top\">Python - Home</a></li>\n<li><a href=\"/python/python_overview.htm\" target=\"_top\">Python - Overview</a></li>\n<li><a href=\"/python/python_environment.htm\" target=\"_top\">Python - Environment Setup</a></li>\n<li><a href=\"/python/python_basic_syntax.htm\" target=\"_top\">Python - Basic Syntax</a></li>\n<li><a href=\"/python/python_variable_types.htm\" target=\"_top\">Python - Variable Types</a></li>\n<li><a href=\"/python/python_basic_operators.htm\" target=\"_top\">Python - Basic Operators</a></li>\n<li><a href=\"/python/python_decision_making.htm\" target=\"_top\">Python - Decision Making</a></li>\n<li><a href=\"/python/python_loops.htm\" target=\"_top\">Python - Loops</a></li>\n<li><a href=\"/python/python_numbers.htm\" target=\"_top\">Python - Numbers</a></li>\n<li><a href=\"/python/python_strings.htm\" target=\"_top\">Python - Strings</a></li>\n<li><a href=\"/python/python_lists.htm\" target=\"_top\">Python - Lists</a></li>\n<li><a href=\"/python/python_tuples.htm\" target=\"_top\">Python - Tuples</a></li>\n<li><a href=\"/python/python_dictionary.htm\" target=\"_top\">Python - Dictionary</a></li>\n<li><a href=\"/python/python_date_time.htm\" target=\"_top\">Python - Date &amp; Time</a></li>\n<li><a href=\"/python/python_functions.htm\" target=\"_top\">Python - Functions</a></li>\n<li><a href=\"/python/python_modules.htm\" target=\"_top\">Python - Modules</a></li>\n<li><a href=\"/python/python_files_io.htm\" target=\"_top\">Python - Files I/O</a></li>\n<li><a href=\"/python/python_exceptions.htm\" target=\"_top\">Python - Exceptions</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Python Advanced Tutorial</li>\n<li><a href=\"/python/python_classes_objects.htm\" target=\"_top\">Python - Classes/Objects</a></li>\n<li><a href=\"/python/python_reg_expressions.htm\" target=\"_top\">Python - Reg Expressions</a></li>\n<li><a href=\"/python/python_cgi_programming.htm\" target=\"_top\">Python - CGI Programming</a></li>\n<li><a href=\"/python/python_database_access.htm\" target=\"_top\">Python - Database Access</a></li>\n<li><a href=\"/python/python_networking.htm\" target=\"_top\">Python - Networking</a></li>\n<li><a href=\"/python/python_sending_email.htm\" target=\"_top\">Python - Sending Email</a></li>\n<li><a href=\"/python/python_multithreading.htm\" target=\"_top\">Python - Multithreading</a></li>\n<li><a href=\"/python/python_xml_processing.htm\" target=\"_top\">Python - XML Processing</a></li>\n<li><a href=\"/python/python_gui_programming.htm\" target=\"_top\">Python - GUI Programming</a></li>\n<li><a href=\"/python/python_further_extensions.htm\" target=\"_top\">Python - Further Extensions</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Python  Useful Resources</li>\n<li><a href=\"/python/python_questions_answers.htm\" target=\"_top\">Python - Questions and Answers</a></li>\n<li><a href=\"/python/python_quick_guide.htm\" target=\"_top\">Python - Quick Guide</a></li>\n<li><a href=\"/python/python_tools_utilities.htm\" target=\"_top\">Python - Tools/Utilities</a></li>\n<li><a href=\"/python/python_useful_resources.htm\" target=\"_top\">Python - Useful Resources</a></li>\n<li><a href=\"/python/python_discussion.htm\" target=\"_top\">Python - Discussion</a></li>\n</ul>\n<ul class=\"nav nav-list primary push-bottom left-menu special\">\n<li class=\"sreading\">Selected Reading</li>\n<li><a href=\"/upsc_ias_exams.htm\" target=\"_top\">UPSC IAS Exams Notes</a></li>\n<li><a href=\"/developers_best_practices/index.htm\" target=\"_top\">Developer's Best Practices</a></li>\n<li><a href=\"/questions_and_answers.htm\" target=\"_top\">Questions and Answers</a></li>\n<li><a href=\"/effective_resume_writing.htm\" target=\"_top\">Effective Resume Writing</a></li>\n<li><a href=\"/hr_interview_questions/index.htm\" target=\"_top\">HR Interview Questions</a></li>\n<li><a href=\"/computer_glossary.htm\" target=\"_top\">Computer Glossary</a></li>\n<li><a href=\"/computer_whoiswho.htm\" target=\"_top\">Who is Who</a></li>\n</ul>\n</aside>\n</div>\n<!-- PRINTING STARTS HERE -->\n<div class=\"row\">\n<div class=\"content\">\n<div class=\"col-md-7 middle-col\">\n<h1>Python - Date &amp; Time</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_dictionary.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_functions.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>A Python program can handle date and time in several ways. Converting between date formats is a common chore for computers. Python's time and calendar modules help track dates and times.</p>\n<h2>What is Tick?</h2>\n<p>Time intervals are floating-point numbers in units of seconds. Particular instants in time are expressed in seconds since 12:00am, January 1, 1970(epoch).</p>\n<p>There is a popular <b>time</b> module available in Python which provides functions for working with times, and for converting between representations. The function <i>time.time()</i> returns the current system time in ticks since 12:00am, January 1, 1970(epoch).</p>\n<h2>Example</h2>\n<a class=\"demo\" href=\"http://tpcg.io/AiJa9O\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\nimport time;  # This is required to include time module.\n\nticks = time.time()\nprint \"Number of ticks since 12:00am, January 1, 1970:\", ticks\n</pre>\n<p>This would produce a result something as follows \u2212</p>\n<pre class=\"result notranslate\">\nNumber of ticks since 12:00am, January 1, 1970: 7186862.73399\n</pre>\n<p>Date arithmetic is easy to do with ticks. However, dates before the epoch cannot be represented in this form. Dates in the far future also cannot be represented this way - the cutoff point is sometime in 2038 for UNIX and Windows.</p>\n<h2>What is TimeTuple?</h2>\n<p>Many of Python's time functions handle time as a tuple of 9 numbers, as shown below \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;width:10%\">Index</th>\n<th style=\"text-align:center;width:40%\">Field</th>\n<th style=\"text-align:center;\">Values</th>\n</tr>\n<tr>\n<td style=\"text-align:center;\">0</td>\n<td style=\"text-align:center;\">4-digit year</td>\n<td>2008</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">1</td>\n<td style=\"text-align:center;\">Month</td>\n<td>1 to 12</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">2</td>\n<td style=\"text-align:center;\">Day</td>\n<td>1 to 31</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">3</td>\n<td style=\"text-align:center;\">Hour</td>\n<td>0 to 23</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">4</td>\n<td style=\"text-align:center;\">Minute</td>\n<td>0 to 59</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">5</td>\n<td style=\"text-align:center;\">Second</td>\n<td>0 to 61 (60 or 61 are leap-seconds)</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">6</td>\n<td style=\"text-align:center;\">Day of Week</td>\n<td>0 to 6 (0 is Monday)</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">7</td>\n<td style=\"text-align:center;\">Day of year</td>\n<td>1 to 366 (Julian day)</td>\n</tr>\n<tr>\n<td class=\"ts\">8</td>\n<td class=\"ts\">Daylight savings</td>\n<td>-1, 0, 1, -1 means library determines DST</td>\n</tr>\n</table>\n<p>The above tuple is equivalent to <b>struct_time</b> structure. This structure has following attributes \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;width:10%\">Index</th>\n<th style=\"text-align:center;width:40%\">Attributes</th>\n<th style=\"text-align:center;\">Values</th>\n</tr>\n<tr>\n<td style=\"text-align:center;\">0</td>\n<td style=\"text-align:center;\">tm_year</td>\n<td>2008</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">1</td>\n<td style=\"text-align:center;\">tm_mon</td>\n<td>1 to 12</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">2</td>\n<td style=\"text-align:center;\">tm_mday</td>\n<td>1 to 31</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">3</td>\n<td style=\"text-align:center;\">tm_hour</td>\n<td>0 to 23</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">4</td>\n<td style=\"text-align:center;\">tm_min</td>\n<td>0 to 59</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">5</td>\n<td style=\"text-align:center;\">tm_sec</td>\n<td>0 to 61 (60 or 61 are leap-seconds)</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">6</td>\n<td style=\"text-align:center;\">tm_wday</td>\n<td>0 to 6 (0 is Monday)</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">7</td>\n<td style=\"text-align:center;\">tm_yday</td>\n<td>1 to 366 (Julian day)</td>\n</tr>\n<tr>\n<td class=\"ts\">8</td>\n<td class=\"ts\">tm_isdst</td>\n<td>-1, 0, 1, -1 means library determines DST</td>\n</tr>\n</table>\n<h2>Getting current time</h2>\n<p>To translate a time instant from a <i>seconds since the epoch</i> floating-point value into a time-tuple, pass the floating-point value to a function (e.g., localtime) that returns a time-tuple with all nine items valid.</p>\n<a class=\"demo\" href=\"http://tpcg.io/T9ZAOe\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\nimport time;\n\nlocaltime = time.localtime(time.time())\nprint \"Local current time :\", localtime\n</pre>\n<p>This would produce the following result, which could be formatted in any other presentable form \u2212</p>\n<pre class=\"result notranslate\">\nLocal current time : time.struct_time(tm_year=2013, tm_mon=7, \ntm_mday=17, tm_hour=21, tm_min=26, tm_sec=3, tm_wday=2, tm_yday=198, tm_isdst=0)\n</pre>\n<h2>Getting formatted time</h2>\n<p>You can format any time as per your requirement, but simple method to get time in readable format is asctime() \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/Pn2IUS\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\nimport time;\n\nlocaltime = time.asctime( time.localtime(time.time()) )\nprint \"Local current time :\", localtime\n</pre>\n<p>This would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nLocal current time : Tue Jan 13 10:17:09 2009\n</pre>\n<h2>Getting calendar for a month</h2>\n<p>The calendar module gives a wide range of methods to play with yearly and monthly calendars. Here, we print a calendar for a given month ( Jan 2008 ) \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/R9vlY8\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\nimport calendar\n\ncal = calendar.month(2008, 1)\nprint \"Here is the calendar:\"\nprint cal\n</pre>\n<p>This would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nHere is the calendar:\n   January 2008\nMo Tu We Th Fr Sa Su\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31\n</pre>\n<h2>The <i>time</i> Module</h2>\n<p>There is a popular <b>time</b> module available in Python which provides functions for working with times and for converting between representations. Here is the list of all available methods \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;width:5%\">Sr.No.</th>\n<th style=\"text-align:center;width:95%\">Function with Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><a href=\"/python/time_altzone.htm\">time.altzone</a>\n<p>The offset of the local DST timezone, in seconds west of UTC, if one is defined. This is negative if the local DST timezone is east of UTC (as in Western Europe, including the UK). Only use this if daylight is nonzero.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><a href=\"/python/time_asctime.htm\">time.asctime([tupletime])</a>\n<p>Accepts a time-tuple and returns a readable 24-character string such as 'Tue Dec 11 18:07:14 2008'.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><a href=\"/python/time_clock.htm\">time.clock( )</a>\n<p>Returns the current CPU time as a floating-point number of seconds. To measure computational costs of different approaches, the value of time.clock is more useful than that of time.time().</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><a href=\"/python/time_ctime.htm\">time.ctime([secs])</a>\n<p>Like asctime(localtime(secs)) and without arguments is like asctime( )</p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><a href=\"/python/time_gmtime.htm\">time.gmtime([secs])</a>\n<p>Accepts an instant expressed in seconds since the epoch and returns a time-tuple t with the UTC time. Note : t.tm_isdst is always 0</p></td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><a href=\"/python/time_localtime.htm\">time.localtime([secs])</a>\n<p>Accepts an instant expressed in seconds since the epoch and returns a time-tuple t with the local time (t.tm_isdst is 0 or 1, depending on whether DST applies to instant secs by local rules).</p></td>\n</tr>\n<tr>\n<td class=\"ts\">7</td>\n<td><a href=\"/python/time_mktime.htm\">time.mktime(tupletime)</a>\n<p>Accepts an instant expressed as a time-tuple in local time and returns a floating-point value with the instant expressed in seconds since the epoch.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">8</td>\n<td><a href=\"/python/time_sleep.htm\">time.sleep(secs)</a>\n<p>Suspends the calling thread for secs seconds.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">9</td>\n<td><a href=\"/python/time_strftime.htm\">time.strftime(fmt[,tupletime])</a>\n<p>Accepts an instant expressed as a time-tuple in local time and returns a string representing the instant as specified by string fmt.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">10</td>\n<td><a href=\"/python/time_strptime.htm\">time.strptime(str,fmt='%a %b %d %H:%M:%S %Y')</a>\n<p>Parses str according to format string fmt and returns the instant in time-tuple format.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">11</td>\n<td><a href=\"/python/time_time.htm\">time.time( )</a>\n<p>Returns the current time instant, a floating-point number of seconds since the epoch.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">12</td>\n<td><a href=\"/python/time_tzset.htm\">time.tzset()</a>\n<p>Resets the time conversion rules used by the library routines. The environment variable TZ specifies how this is done.</p></td>\n</tr>\n</table>\n<p>Let us go through the functions briefly \u2212</p>\n<p>There are following two important attributes available with time module \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;width:5%\">Sr.No.</th>\n<th style=\"text-align:center;width:95%\">Attribute with Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>time.timezone</b></p>\n<p>Attribute time.timezone is the offset in seconds of the local time zone (without DST) from UTC (&gt;0 in the Americas; &lt;=0 in most of Europe, Asia, Africa).</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>time.tzname</b></p>\n<p>Attribute time.tzname is a pair of locale-dependent strings, which are the names of the local time zone without and with DST, respectively.</p></td>\n</tr>\n</table>\n<h2>The <i>calendar</i> Module</h2>\n<p>The calendar module supplies calendar-related functions, including functions to print a text calendar for a given month or year.</p>\n<p>By default, calendar takes Monday as the first day of the week and Sunday as the last one. To change this, call calendar.setfirstweekday() function.</p>\n<p>Here is a list of functions available with the <i>calendar</i> module \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;width:5%\">Sr.No.</th>\n<th style=\"text-align:center;width:95%\">Function with Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>calendar.calendar(year,w=2,l=1,c=6)</b></p>\n<p>Returns a multiline string with a calendar for year year formatted into three columns separated by c spaces. w is the width in characters of each date; each line has length 21*w+18+2*c. l is the number of lines for each week.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>calendar.firstweekday( )</b></p>\n<p>Returns the current setting for the weekday that starts each week. By default, when calendar is first imported, this is 0, meaning Monday.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>calendar.isleap(year)</b></p>\n<p>Returns True if year is a leap year; otherwise, False.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>calendar.leapdays(y1,y2)</b></p>\n<p>Returns the total number of leap days in the years within range(y1,y2).</p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>calendar.month(year,month,w=2,l=1)</b></p>\n<p>Returns a multiline string with a calendar for month month of year year, one line per week plus two header lines. w is the width in characters of each date; each line has length 7*w+6. l is the number of lines for each week.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><p><b>calendar.monthcalendar(year,month)</b></p>\n<p>Returns a list of lists of ints. Each sublist denotes a week. Days outside month month of year year are set to 0; days within the month are set to their day-of-month, 1 and up.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">7</td>\n<td><p><b>calendar.monthrange(year,month)</b></p>\n<p>Returns two integers. The first one is the code of the weekday for the first day of the month month in year year; the second one is the number of days in the month. Weekday codes are 0 (Monday) to 6 (Sunday); month numbers are 1 to 12.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">8</td>\n<td><p><b>calendar.prcal(year,w=2,l=1,c=6)</b></p>\n<p>Like print calendar.calendar(year,w,l,c).</p></td>\n</tr>\n<tr>\n<td class=\"ts\">9</td>\n<td><p><b>calendar.prmonth(year,month,w=2,l=1)</b></p>\n<p>Like print calendar.month(year,month,w,l).</p></td>\n</tr>\n<tr>\n<td class=\"ts\">10</td>\n<td><p><b>calendar.setfirstweekday(weekday)</b></p>\n<p>Sets the first day of each week to weekday code weekday. Weekday codes are 0 (Monday) to 6 (Sunday).</p></td>\n</tr>\n<tr>\n<td class=\"ts\">11</td>\n<td><p><b>calendar.timegm(tupletime)</b></p>\n<p>The inverse of time.gmtime: accepts a time instant in time-tuple form and returns the same instant as a floating-point number of seconds since the epoch.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">12</td>\n<td><p><b>calendar.weekday(year,month,day)</b></p>\n<p>Returns the weekday code for the given date. Weekday codes are 0 (Monday) to 6 (Sunday); month numbers are 1 (January) to 12 (December).</p></td>\n</tr>\n</table>\n<h2>Other Modules &amp; Functions</h2>\n<p>If you are interested, then here you would find a list of other important modules and functions to play with date &amp; time in Python \u2212</p>\n<ul class=\"list\">\n<li><p><a href=\"http://docs.python.org/library/datetime.html#module-datetime\" rel=\"nofollow\" target=\"_blank\">The <i>datetime</i> Module</a></p></li>\n<li><p><a href=\"http://www.twinsun.com/tz/tz-link.htm\" rel=\"nofollow\" target=\"_blank\">The <i>pytz </i>Module</a></p></li>\n<li><p><a href=\"http://labix.org/python-dateutil\" rel=\"nofollow\" target=\"_blank\">The <i>dateutil</i> Module</a></p></li>\n</ul>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_dictionary.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_functions.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n<div class=\"row\">\n<div class=\"col-md-3\" id=\"rightbar\">\n<div class=\"simple-ad\">\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.facebook.com/sharer.php?u=' + 'https://www.tutorialspoint.com/python/python_date_time.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/facebookIcon.jpg\">\n</img></a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://twitter.com/share?url=' + 'https://www.tutorialspoint.com/python/python_date_time.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/twitterIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'https://www.tutorialspoint.com/python/python_date_time.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/linkedinIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=https://www.tutorialspoint.com/python/python_date_time.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/googlePlusIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.stumbleupon.com/submit?url=https://www.tutorialspoint.com/python/python_date_time.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/StumbleUponIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://reddit.com/submit?url=https://www.tutorialspoint.com/python/python_date_time.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/reddit.jpg\"/>\n</a>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\ngoogle_ad_format = \"300x250_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 600;\ngoogle_ad_format = \"300x600_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"ca-pub-2537027957187252\";\n/* Right Side Ad */\ngoogle_ad_slot = \"right_side_ad\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\n//-->\n</script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"footer-copyright\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-1\">\n<a class=\"logo\" href=\"index.htm\"> <img alt=\"Tutorials Point\" class=\"img-responsive\" src=\"/scripts/img/logo-footer.png\"/> </a>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<nav id=\"sub-menu\">\n<ul>\n<li><a href=\"/about/about_privacy.htm\">Privacy Policy</a></li>\n<li><a href=\"/about/about_cookies.htm\">Cookies Policy</a></li>\n<li><a href=\"/about/contact_us.htm\">Contact</a></li>\n</ul>\n</nav>\n</div>\n<div class=\"col-md-3 col-sm-12 col-xs-12\">\n<p>\u00a9 Copyright 2019. All Rights Reserved.</p>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<div class=\"news-group\">\n<input autocomplete=\"off\" class=\"form-control-foot search\" id=\"textemail\" name=\"textemail\" onblur=\"if (this.value == '') {this.value = 'Enter email for newsletter...';}\" onfocus=\"if (this.value == 'Enter email for newsletter...') {this.value = '';}\" placeholder=\"Enter email for newsletter\" type=\"text\"/>\n<span class=\"input-group-btn\"> <button class=\"btn btn-default btn-footer\" id=\"btnemail\" onclick=\"javascript:void(0);\" type=\"submit\">go</button> </span>\n<div id=\"newsresponse\"></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"privacy-banner\">\n<div>\n<p>\n      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.\n      <a href=\"javascript:void(0)\" id=\"banner-accept\">Accept</a>\n<a href=\"/about/about_cookies.htm\" id=\"banner-learn\" target=\"_blank\">Learn more</a>\n</p>\n</div>\n</div>\n<script>\n// Banner Trigger if Not Closed\nif (!localStorage.bannerClosed) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n} else {\n  document.getElementById('privacy-banner').style.display = \"none\";\n}\ndocument.getElementById('banner-accept').addEventListener('click', function() {\n  document.getElementById('privacy-banner').style.display = \"none\";\n  localStorage.bannerClosed = 'true';\n});\nif (navigator.userAgent.match(/Opera|OPR\\//)) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n}\n</script>\n<!-- Libs -->\n<script src=\"/theme/js/custom-min.js?v=7\"></script>\n<script src=\"https://www.google-analytics.com/urchin.js\">\n</script>\n<script>\n_uacct = \"UA-232293-6\";\nurchinTracker();\n$('.pg-icon').click(function(){\n   $('.wrapLoader').show();\n});\n</script>\n<script src=\"/theme/js/jquery.colorbox-min.js\"></script>\n<script>\n   var tryit = new $.TryIt('/python/try_python.php');\n   tryit.compile();\n</script>\n\n\n", "title": "Python - Date & Time", "content_html": "<div class=\"col-md-7 middle-col\">\n<h1>Python - Date &amp; Time</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_dictionary.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_functions.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>A Python program can handle date and time in several ways. Converting between date formats is a common chore for computers. Python's time and calendar modules help track dates and times.</p>\n<h2>What is Tick?</h2>\n<p>Time intervals are floating-point numbers in units of seconds. Particular instants in time are expressed in seconds since 12:00am, January 1, 1970(epoch).</p>\n<p>There is a popular <b>time</b> module available in Python which provides functions for working with times, and for converting between representations. The function <i>time.time()</i> returns the current system time in ticks since 12:00am, January 1, 1970(epoch).</p>\n<h2>Example</h2>\n<a class=\"demo\" href=\"http://tpcg.io/AiJa9O\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\nimport time;  # This is required to include time module.\n\nticks = time.time()\nprint \"Number of ticks since 12:00am, January 1, 1970:\", ticks\n</pre>\n<p>This would produce a result something as follows \u2212</p>\n<pre class=\"result notranslate\">\nNumber of ticks since 12:00am, January 1, 1970: 7186862.73399\n</pre>\n<p>Date arithmetic is easy to do with ticks. However, dates before the epoch cannot be represented in this form. Dates in the far future also cannot be represented this way - the cutoff point is sometime in 2038 for UNIX and Windows.</p>\n<h2>What is TimeTuple?</h2>\n<p>Many of Python's time functions handle time as a tuple of 9 numbers, as shown below \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;width:10%\">Index</th>\n<th style=\"text-align:center;width:40%\">Field</th>\n<th style=\"text-align:center;\">Values</th>\n</tr>\n<tr>\n<td style=\"text-align:center;\">0</td>\n<td style=\"text-align:center;\">4-digit year</td>\n<td>2008</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">1</td>\n<td style=\"text-align:center;\">Month</td>\n<td>1 to 12</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">2</td>\n<td style=\"text-align:center;\">Day</td>\n<td>1 to 31</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">3</td>\n<td style=\"text-align:center;\">Hour</td>\n<td>0 to 23</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">4</td>\n<td style=\"text-align:center;\">Minute</td>\n<td>0 to 59</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">5</td>\n<td style=\"text-align:center;\">Second</td>\n<td>0 to 61 (60 or 61 are leap-seconds)</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">6</td>\n<td style=\"text-align:center;\">Day of Week</td>\n<td>0 to 6 (0 is Monday)</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">7</td>\n<td style=\"text-align:center;\">Day of year</td>\n<td>1 to 366 (Julian day)</td>\n</tr>\n<tr>\n<td class=\"ts\">8</td>\n<td class=\"ts\">Daylight savings</td>\n<td>-1, 0, 1, -1 means library determines DST</td>\n</tr>\n</table>\n<p>The above tuple is equivalent to <b>struct_time</b> structure. This structure has following attributes \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;width:10%\">Index</th>\n<th style=\"text-align:center;width:40%\">Attributes</th>\n<th style=\"text-align:center;\">Values</th>\n</tr>\n<tr>\n<td style=\"text-align:center;\">0</td>\n<td style=\"text-align:center;\">tm_year</td>\n<td>2008</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">1</td>\n<td style=\"text-align:center;\">tm_mon</td>\n<td>1 to 12</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">2</td>\n<td style=\"text-align:center;\">tm_mday</td>\n<td>1 to 31</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">3</td>\n<td style=\"text-align:center;\">tm_hour</td>\n<td>0 to 23</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">4</td>\n<td style=\"text-align:center;\">tm_min</td>\n<td>0 to 59</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">5</td>\n<td style=\"text-align:center;\">tm_sec</td>\n<td>0 to 61 (60 or 61 are leap-seconds)</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">6</td>\n<td style=\"text-align:center;\">tm_wday</td>\n<td>0 to 6 (0 is Monday)</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">7</td>\n<td style=\"text-align:center;\">tm_yday</td>\n<td>1 to 366 (Julian day)</td>\n</tr>\n<tr>\n<td class=\"ts\">8</td>\n<td class=\"ts\">tm_isdst</td>\n<td>-1, 0, 1, -1 means library determines DST</td>\n</tr>\n</table>\n<h2>Getting current time</h2>\n<p>To translate a time instant from a <i>seconds since the epoch</i> floating-point value into a time-tuple, pass the floating-point value to a function (e.g., localtime) that returns a time-tuple with all nine items valid.</p>\n<a class=\"demo\" href=\"http://tpcg.io/T9ZAOe\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\nimport time;\n\nlocaltime = time.localtime(time.time())\nprint \"Local current time :\", localtime\n</pre>\n<p>This would produce the following result, which could be formatted in any other presentable form \u2212</p>\n<pre class=\"result notranslate\">\nLocal current time : time.struct_time(tm_year=2013, tm_mon=7, \ntm_mday=17, tm_hour=21, tm_min=26, tm_sec=3, tm_wday=2, tm_yday=198, tm_isdst=0)\n</pre>\n<h2>Getting formatted time</h2>\n<p>You can format any time as per your requirement, but simple method to get time in readable format is asctime() \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/Pn2IUS\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\nimport time;\n\nlocaltime = time.asctime( time.localtime(time.time()) )\nprint \"Local current time :\", localtime\n</pre>\n<p>This would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nLocal current time : Tue Jan 13 10:17:09 2009\n</pre>\n<h2>Getting calendar for a month</h2>\n<p>The calendar module gives a wide range of methods to play with yearly and monthly calendars. Here, we print a calendar for a given month ( Jan 2008 ) \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/R9vlY8\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\nimport calendar\n\ncal = calendar.month(2008, 1)\nprint \"Here is the calendar:\"\nprint cal\n</pre>\n<p>This would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nHere is the calendar:\n   January 2008\nMo Tu We Th Fr Sa Su\n    1  2  3  4  5  6\n 7  8  9 10 11 12 13\n14 15 16 17 18 19 20\n21 22 23 24 25 26 27\n28 29 30 31\n</pre>\n<h2>The <i>time</i> Module</h2>\n<p>There is a popular <b>time</b> module available in Python which provides functions for working with times and for converting between representations. Here is the list of all available methods \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;width:5%\">Sr.No.</th>\n<th style=\"text-align:center;width:95%\">Function with Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><a href=\"/python/time_altzone.htm\">time.altzone</a>\n<p>The offset of the local DST timezone, in seconds west of UTC, if one is defined. This is negative if the local DST timezone is east of UTC (as in Western Europe, including the UK). Only use this if daylight is nonzero.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><a href=\"/python/time_asctime.htm\">time.asctime([tupletime])</a>\n<p>Accepts a time-tuple and returns a readable 24-character string such as 'Tue Dec 11 18:07:14 2008'.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><a href=\"/python/time_clock.htm\">time.clock( )</a>\n<p>Returns the current CPU time as a floating-point number of seconds. To measure computational costs of different approaches, the value of time.clock is more useful than that of time.time().</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><a href=\"/python/time_ctime.htm\">time.ctime([secs])</a>\n<p>Like asctime(localtime(secs)) and without arguments is like asctime( )</p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><a href=\"/python/time_gmtime.htm\">time.gmtime([secs])</a>\n<p>Accepts an instant expressed in seconds since the epoch and returns a time-tuple t with the UTC time. Note : t.tm_isdst is always 0</p></td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><a href=\"/python/time_localtime.htm\">time.localtime([secs])</a>\n<p>Accepts an instant expressed in seconds since the epoch and returns a time-tuple t with the local time (t.tm_isdst is 0 or 1, depending on whether DST applies to instant secs by local rules).</p></td>\n</tr>\n<tr>\n<td class=\"ts\">7</td>\n<td><a href=\"/python/time_mktime.htm\">time.mktime(tupletime)</a>\n<p>Accepts an instant expressed as a time-tuple in local time and returns a floating-point value with the instant expressed in seconds since the epoch.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">8</td>\n<td><a href=\"/python/time_sleep.htm\">time.sleep(secs)</a>\n<p>Suspends the calling thread for secs seconds.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">9</td>\n<td><a href=\"/python/time_strftime.htm\">time.strftime(fmt[,tupletime])</a>\n<p>Accepts an instant expressed as a time-tuple in local time and returns a string representing the instant as specified by string fmt.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">10</td>\n<td><a href=\"/python/time_strptime.htm\">time.strptime(str,fmt='%a %b %d %H:%M:%S %Y')</a>\n<p>Parses str according to format string fmt and returns the instant in time-tuple format.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">11</td>\n<td><a href=\"/python/time_time.htm\">time.time( )</a>\n<p>Returns the current time instant, a floating-point number of seconds since the epoch.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">12</td>\n<td><a href=\"/python/time_tzset.htm\">time.tzset()</a>\n<p>Resets the time conversion rules used by the library routines. The environment variable TZ specifies how this is done.</p></td>\n</tr>\n</table>\n<p>Let us go through the functions briefly \u2212</p>\n<p>There are following two important attributes available with time module \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;width:5%\">Sr.No.</th>\n<th style=\"text-align:center;width:95%\">Attribute with Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>time.timezone</b></p>\n<p>Attribute time.timezone is the offset in seconds of the local time zone (without DST) from UTC (&gt;0 in the Americas; &lt;=0 in most of Europe, Asia, Africa).</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>time.tzname</b></p>\n<p>Attribute time.tzname is a pair of locale-dependent strings, which are the names of the local time zone without and with DST, respectively.</p></td>\n</tr>\n</table>\n<h2>The <i>calendar</i> Module</h2>\n<p>The calendar module supplies calendar-related functions, including functions to print a text calendar for a given month or year.</p>\n<p>By default, calendar takes Monday as the first day of the week and Sunday as the last one. To change this, call calendar.setfirstweekday() function.</p>\n<p>Here is a list of functions available with the <i>calendar</i> module \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;width:5%\">Sr.No.</th>\n<th style=\"text-align:center;width:95%\">Function with Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>calendar.calendar(year,w=2,l=1,c=6)</b></p>\n<p>Returns a multiline string with a calendar for year year formatted into three columns separated by c spaces. w is the width in characters of each date; each line has length 21*w+18+2*c. l is the number of lines for each week.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>calendar.firstweekday( )</b></p>\n<p>Returns the current setting for the weekday that starts each week. By default, when calendar is first imported, this is 0, meaning Monday.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>calendar.isleap(year)</b></p>\n<p>Returns True if year is a leap year; otherwise, False.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>calendar.leapdays(y1,y2)</b></p>\n<p>Returns the total number of leap days in the years within range(y1,y2).</p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>calendar.month(year,month,w=2,l=1)</b></p>\n<p>Returns a multiline string with a calendar for month month of year year, one line per week plus two header lines. w is the width in characters of each date; each line has length 7*w+6. l is the number of lines for each week.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><p><b>calendar.monthcalendar(year,month)</b></p>\n<p>Returns a list of lists of ints. Each sublist denotes a week. Days outside month month of year year are set to 0; days within the month are set to their day-of-month, 1 and up.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">7</td>\n<td><p><b>calendar.monthrange(year,month)</b></p>\n<p>Returns two integers. The first one is the code of the weekday for the first day of the month month in year year; the second one is the number of days in the month. Weekday codes are 0 (Monday) to 6 (Sunday); month numbers are 1 to 12.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">8</td>\n<td><p><b>calendar.prcal(year,w=2,l=1,c=6)</b></p>\n<p>Like print calendar.calendar(year,w,l,c).</p></td>\n</tr>\n<tr>\n<td class=\"ts\">9</td>\n<td><p><b>calendar.prmonth(year,month,w=2,l=1)</b></p>\n<p>Like print calendar.month(year,month,w,l).</p></td>\n</tr>\n<tr>\n<td class=\"ts\">10</td>\n<td><p><b>calendar.setfirstweekday(weekday)</b></p>\n<p>Sets the first day of each week to weekday code weekday. Weekday codes are 0 (Monday) to 6 (Sunday).</p></td>\n</tr>\n<tr>\n<td class=\"ts\">11</td>\n<td><p><b>calendar.timegm(tupletime)</b></p>\n<p>The inverse of time.gmtime: accepts a time instant in time-tuple form and returns the same instant as a floating-point number of seconds since the epoch.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">12</td>\n<td><p><b>calendar.weekday(year,month,day)</b></p>\n<p>Returns the weekday code for the given date. Weekday codes are 0 (Monday) to 6 (Sunday); month numbers are 1 (January) to 12 (December).</p></td>\n</tr>\n</table>\n<h2>Other Modules &amp; Functions</h2>\n<p>If you are interested, then here you would find a list of other important modules and functions to play with date &amp; time in Python \u2212</p>\n<ul class=\"list\">\n<li><p><a href=\"http://docs.python.org/library/datetime.html#module-datetime\" rel=\"nofollow\" target=\"_blank\">The <i>datetime</i> Module</a></p></li>\n<li><p><a href=\"http://www.twinsun.com/tz/tz-link.htm\" rel=\"nofollow\" target=\"_blank\">The <i>pytz </i>Module</a></p></li>\n<li><p><a href=\"http://labix.org/python-dateutil\" rel=\"nofollow\" target=\"_blank\">The <i>dateutil</i> Module</a></p></li>\n</ul>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_dictionary.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_functions.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>"}