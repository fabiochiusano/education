{"title_html": "<h1>Python - CGI Programming</h1>", "content": "\n Python - CGI Programming \n  \n Advertisements \n \n<!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//-->\n\n\n \n  \n \n Previous Page\n \n \nNext Page \u00a0\n \n  \n  \n The Common Gateway Interface, or CGI, is a set of standards that define how information is exchanged between the web server and a custom script. The CGI specs are currently maintained by the NCSA. \n What is CGI? \n \nThe Common Gateway Interface, or CGI, is a standard for external gateway programs to interface with information servers such as HTTP servers.\nThe current version is CGI/1.1 and CGI/1.2 is under progress.\n \n Web Browsing \n To understand the concept of CGI, let us see what happens when we click a hyper link to browse a particular web page or URL. \n \nYour browser contacts the HTTP web server and demands for the URL, i.e., filename.\nWeb Server parses the URL and looks for the filename. If it finds that file then sends it back to the browser, otherwise sends an error message indicating that you requested a wrong file.\nWeb browser takes response from web server and displays either the received file or error message.\n \n However, it is possible to set up the HTTP server so that whenever a file in a certain directory is requested that file is not sent back; instead it is executed as a program, and whatever that program outputs is sent back for your browser to display. This function is called the Common Gateway Interface or CGI and the programs are called CGI scripts. These CGI programs can be a Python Script, PERL Script, Shell Script, C or C++ program, etc. \n CGI Architecture Diagram \n \nWeb Server Support and Configuration\nBefore you proceed with CGI Programming, make sure that your Web Server supports CGI and it is configured to handle CGI Programs. All the CGI Programs to be executed by the HTTP server are kept in a pre-configured directory. This directory is called CGI Directory and by convention it is named as /var/www/cgi-bin. By convention, CGI files have extension as. cgi, but you can keep your files with python extension .py as well.\nBy default, the Linux server is configured to run only the scripts in the cgi-bin directory in /var/www. If you want to specify any other directory to run your CGI scripts, comment the following lines in the httpd.conf file \u2212\n\n<Directory \"/var/www/cgi-bin\">\n   AllowOverride None\n   Options ExecCGI\n   Order allow,deny\n   Allow from all\n</Directory>\n\n<Directory \"/var/www/cgi-bin\">\nOptions All\n</Directory>\n\nHere, we assume that you have Web Server up and running successfully and you are able to run any other CGI program like Perl or Shell, etc.\nFirst CGI Program\nHere is a simple link, which is linked to a CGI script called hello.py. This file is kept in /var/www/cgi-bin directory and it has following content. Before running your CGI program, make sure you have change mode of file using chmod 755 hello.py UNIX command to make file executable.\n\n#!/usr/bin/python\n\nprint \"Content-type:text/html\\r\\n\\r\\n\"\nprint '<html>'\nprint '<head>'\nprint '<title>Hello Word - First CGI Program</title>'\nprint '</head>'\nprint '<body>'\nprint '<h2>Hello Word! This is my first CGI program</h2>'\nprint '</body>'\nprint '</html>'\n\nIf you click hello.py, then this produces the following output \u2212\n\n\n\nHello Word! This is my first CGI program\n\n\n\nThis hello.py script is a simple Python script, which writes its output on STDOUT file, i.e., screen. There is one important and extra feature available which is first line to be printed Content-type:text/html\\r\\n\\r\\n. This line is sent back to the browser and it specifies the content type to be displayed on the browser screen.\nBy now you must have understood basic concept of CGI and you can write many complicated CGI programs using Python. This script can interact with any other external system also to exchange information such as RDBMS.\nHTTP Header\nThe line Content-type:text/html\\r\\n\\r\\n is part of HTTP header which is sent to the browser to understand the content. All the HTTP header will be in the following form \u2212\n\nHTTP Field Name: Field Content\n\nFor Example\nContent-type: text/html\\r\\n\\r\\n\n\nThere are few other important HTTP headers, which you will use frequently in your CGI Programming.\n\n\nSr.No.\nHeader & Description\n\n\n1\nContent-type:\nA MIME string defining the format of the file being returned. Example is Content-type:text/html\n\n\n2\nExpires: Date\nThe date the information becomes invalid. It is used by the browser to decide when a page needs to be refreshed. A valid date string is in the format 01 Jan 1998 12:00:00 GMT.\n\n\n3\nLocation: URL\nThe URL that is returned instead of the URL requested. You can use this field to redirect a request to any file.\n\n\n4\nLast-modified: Date\nThe date of last modification of the resource.\n\n\n5\nContent-length: N\nThe length, in bytes, of the data being returned. The browser uses this value to report the estimated download time for a file.\n\n\n6\nSet-Cookie: String\nSet the cookie passed through the string\n\n\nCGI Environment Variables\nAll the CGI programs have access to the following environment variables. These variables play an important role while writing any CGI program.\n\n\nSr.No.\nVariable Name & Description\n\n\n1\nCONTENT_TYPE\nThe data type of the content. Used when the client is sending attached content to the server. For example, file upload.\n\n\n2\nCONTENT_LENGTH\nThe length of the query information. It is available only for POST requests.\n\n\n3\nHTTP_COOKIE\nReturns the set cookies in the form of key & value pair.\n\n\n4\nHTTP_USER_AGENT\nThe User-Agent request-header field contains information about the user agent originating the request. It is name of the web browser.\n\n\n5\nPATH_INFO\nThe path for the CGI script.\n\n\n6\nQUERY_STRING\nThe URL-encoded information that is sent with GET method request.\n\n\n7\nREMOTE_ADDR\nThe IP address of the remote host making the request. This is useful logging or for authentication.\n\n\n8\nREMOTE_HOST\nThe fully qualified name of the host making the request. If this information is not available, then REMOTE_ADDR can be used to get IR address.\n\n\n9\nREQUEST_METHOD\nThe method used to make the request. The most common methods are GET and POST.\n\n\n10\nSCRIPT_FILENAME\nThe full path to the CGI script.\n\n\n11\nSCRIPT_NAME\nThe name of the CGI script.\n\n\n12\nSERVER_NAME\nThe server's hostname or IP Address\n\n\n13\nSERVER_SOFTWARE\nThe name and version of the software the server is running.\n\n\nHere is small CGI program to list out all the CGI variables. Click this link to see the result Get Environment\n\n#!/usr/bin/python\n\nimport os\n\nprint \"Content-type: text/html\\r\\n\\r\\n\";\nprint \"<font size=+1>Environment</font><\\br>\";\nfor param in os.environ.keys():\n   print \"<b>%20s</b>: %s<\\br>\" % (param, os.environ[param])\n\nGET and POST Methods\nYou must have come across many situations when you need to pass some information from your browser to web server and ultimately to your CGI Program. Most frequently, browser uses two methods two pass this information to web server. These methods are GET Method and POST Method.\nPassing Information using GET method\nThe GET method sends the encoded user information appended to the page request. The page and the encoded information are separated by the ? character as follows \u2212\n\nhttp://www.test.com/cgi-bin/hello.py?key1=value1&key2=value2\n\nThe GET method is the default method to pass information from browser to web server and it produces a long string that appears in your browser's Location:box. Never use GET method if you have password or other sensitive information to pass to the server. The GET method has size limitation: only 1024 characters can be sent in a request string. The GET method sends information using QUERY_STRING header and will be accessible in your CGI Program through QUERY_STRING environment variable.\nYou can pass information by simply concatenating key and value pairs along with any URL or you can use HTML <FORM> tags to pass information using GET method.\nSimple URL Example:Get Method\nHere is a simple URL, which passes two values to hello_get.py program using GET method.\n/cgi-bin/hello_get.py?first_name=ZARA&last_name=ALI\nBelow is hello_get.py script to handle input given by web browser. We are going to use cgi module, which makes it very easy to access passed information \u2212\n\n#!/usr/bin/python\n\n# Import modules for CGI handling \nimport cgi, cgitb \n\n# Create instance of FieldStorage \nform = cgi.FieldStorage() \n\n# Get data from fields\nfirst_name = form.getvalue('first_name')\nlast_name  = form.getvalue('last_name')\n\nprint \"Content-type:text/html\\r\\n\\r\\n\"\nprint \"<html>\"\nprint \"<head>\"\nprint \"<title>Hello - Second CGI Program</title>\"\nprint \"</head>\"\nprint \"<body>\"\nprint \"<h2>Hello %s %s</h2>\" % (first_name, last_name)\nprint \"</body>\"\nprint \"</html>\"\n\nThis would generate the following result \u2212\n\n\n\nHello ZARA ALI\n\n\n\nSimple FORM Example:GET Method\nThis example passes two values using HTML FORM and submit button. We use same CGI script hello_get.py to handle this input.\n\n<form action = \"/cgi-bin/hello_get.py\" method = \"get\">\nFirst Name: <input type = \"text\" name = \"first_name\">  <br />\n\nLast Name: <input type = \"text\" name = \"last_name\" />\n<input type = \"submit\" value = \"Submit\" />\n</form>\n\nHere is the actual output of the above form, you enter First and Last Name and then click submit button to see the result.\n\nFirst Name: \n\nLast Name: \n\nPassing Information Using POST Method\nA generally more reliable method  of passing information to a CGI program is the POST method. This packages the information in exactly the same way as GET methods, but instead of sending it as a text string after a ? in the URL it sends it as a separate message. This message comes into the CGI script in the form of the standard input.\nBelow is same hello_get.py script which handles GET as well as POST method.\n\n#!/usr/bin/python\n\n# Import modules for CGI handling \nimport cgi, cgitb \n\n# Create instance of FieldStorage \nform = cgi.FieldStorage() \n\n# Get data from fields\nfirst_name = form.getvalue('first_name')\nlast_name  = form.getvalue('last_name')\n\nprint \"Content-type:text/html\\r\\n\\r\\n\"\nprint \"<html>\"\nprint \"<head>\"\nprint \"<title>Hello - Second CGI Program</title>\"\nprint \"</head>\"\nprint \"<body>\"\nprint \"<h2>Hello %s %s</h2>\" % (first_name, last_name)\nprint \"</body>\"\nprint \"</html>\"\n\nLet us take again same example as above which passes two values using HTML FORM and submit button. We use same CGI script hello_get.py to handle this input.\n\n<form action = \"/cgi-bin/hello_get.py\" method = \"post\">\nFirst Name: <input type = \"text\" name = \"first_name\"><br />\nLast Name: <input type = \"text\" name = \"last_name\" />\n\n<input type = \"submit\" value = \"Submit\" />\n</form>\n\nHere is the actual output of the above form. You enter First and Last Name and then click submit button to see the result.\n\nFirst Name: \n\nLast Name: \n\n\nPassing Checkbox Data to CGI Program\nCheckboxes are used when more than one option is required to be selected.\nHere is example HTML code for a form with two checkboxes \u2212\n\n<form action = \"/cgi-bin/checkbox.cgi\" method = \"POST\" target = \"_blank\">\n<input type = \"checkbox\" name = \"maths\" value = \"on\" /> Maths\n<input type = \"checkbox\" name = \"physics\" value = \"on\" /> Physics\n<input type = \"submit\" value = \"Select Subject\" />\n</form>\n\nThe result of this code is the following form \u2212\n\n Maths\n Physics\n\n\nBelow is checkbox.cgi script to handle input given by web browser for checkbox button.\n\n#!/usr/bin/python\n\n# Import modules for CGI handling \nimport cgi, cgitb \n\n# Create instance of FieldStorage \nform = cgi.FieldStorage() \n\n# Get data from fields\nif form.getvalue('maths'):\n   math_flag = \"ON\"\nelse:\n   math_flag = \"OFF\"\n\nif form.getvalue('physics'):\n   physics_flag = \"ON\"\nelse:\n   physics_flag = \"OFF\"\n\nprint \"Content-type:text/html\\r\\n\\r\\n\"\nprint \"<html>\"\nprint \"<head>\"\nprint \"<title>Checkbox - Third CGI Program</title>\"\nprint \"</head>\"\nprint \"<body>\"\nprint \"<h2> CheckBox Maths is : %s</h2>\" % math_flag\nprint \"<h2> CheckBox Physics is : %s</h2>\" % physics_flag\nprint \"</body>\"\nprint \"</html>\"\n\nPassing Radio Button Data to CGI Program\nRadio Buttons are used when only one option is required to be selected.\nHere is example HTML code for a form with two radio buttons \u2212\n\n<form action = \"/cgi-bin/radiobutton.py\" method = \"post\" target = \"_blank\">\n<input type = \"radio\" name = \"subject\" value = \"maths\" /> Maths\n<input type = \"radio\" name = \"subject\" value = \"physics\" /> Physics\n<input type = \"submit\" value = \"Select Subject\" />\n</form>\n\nThe result of this code is the following form \u2212\n\n Maths\n Physics\n\n\nBelow is radiobutton.py script to handle input given by web browser for radio button \u2212\n\n#!/usr/bin/python\n\n# Import modules for CGI handling \nimport cgi, cgitb \n\n# Create instance of FieldStorage \nform = cgi.FieldStorage() \n\n# Get data from fields\nif form.getvalue('subject'):\n   subject = form.getvalue('subject')\nelse:\n   subject = \"Not set\"\n\nprint \"Content-type:text/html\\r\\n\\r\\n\"\nprint \"<html>\"\nprint \"<head>\"\nprint \"<title>Radio - Fourth CGI Program</title>\"\nprint \"</head>\"\nprint \"<body>\"\nprint \"<h2> Selected Subject is %s</h2>\" % subject\nprint \"</body>\"\nprint \"</html>\"\n\nPassing Text Area Data to CGI Program\nTEXTAREA element is used when multiline text has to be passed to the CGI Program.\nHere is example HTML code for a form with a TEXTAREA box \u2212\n\n<form action = \"/cgi-bin/textarea.py\" method = \"post\" target = \"_blank\">\n<textarea name = \"textcontent\" cols = \"40\" rows = \"4\">\nType your text here...\n</textarea>\n<input type = \"submit\" value = \"Submit\" />\n</form>\n\nThe result of this code is the following form \u2212\n\nType your text here...\n\n\nBelow is textarea.cgi script to handle input given by web browser \u2212\n\n#!/usr/bin/python\n\n# Import modules for CGI handling \nimport cgi, cgitb \n\n# Create instance of FieldStorage \nform = cgi.FieldStorage() \n\n# Get data from fields\nif form.getvalue('textcontent'):\n   text_content = form.getvalue('textcontent')\nelse:\n   text_content = \"Not entered\"\n\nprint \"Content-type:text/html\\r\\n\\r\\n\"\nprint \"<html>\"\nprint \"<head>\";\nprint \"<title>Text Area - Fifth CGI Program</title>\"\nprint \"</head>\"\nprint \"<body>\"\nprint \"<h2> Entered Text Content is %s</h2>\" % text_content\nprint \"</body>\"\n\nPassing Drop Down Box Data to CGI Program\nDrop Down Box is used when we have many options available but only one or two will be selected.\nHere is example HTML code for a form with one drop down box \u2212\n\n<form action = \"/cgi-bin/dropdown.py\" method = \"post\" target = \"_blank\">\n<select name = \"dropdown\">\n<option value = \"Maths\" selected>Maths</option>\n<option value = \"Physics\">Physics</option>\n</select>\n<input type = \"submit\" value = \"Submit\"/>\n</form>\n\nThe result of this code is the following form \u2212\n\n\nMaths\nPhysics\n\n\n\nBelow is dropdown.py script to handle input given by web browser.\n\n#!/usr/bin/python\n\n# Import modules for CGI handling \nimport cgi, cgitb \n\n# Create instance of FieldStorage \nform = cgi.FieldStorage() \n\n# Get data from fields\nif form.getvalue('dropdown'):\n   subject = form.getvalue('dropdown')\nelse:\n   subject = \"Not entered\"\n\nprint \"Content-type:text/html\\r\\n\\r\\n\"\nprint \"<html>\"\nprint \"<head>\"\nprint \"<title>Dropdown Box - Sixth CGI Program</title>\"\nprint \"</head>\"\nprint \"<body>\"\nprint \"<h2> Selected Subject is %s</h2>\" % subject\nprint \"</body>\"\nprint \"</html>\"\n\nUsing Cookies in CGI\nHTTP protocol is a stateless protocol. For a commercial website, it is required to maintain session information  among different pages. For example, one user registration ends after completing many pages. How to maintain user's session information across all the web pages?\nIn many situations, using cookies is the most efficient method of remembering and tracking preferences, purchases, commissions, and other information required for better visitor experience or site statistics.\nHow It Works?\nYour server sends some data to the visitor's browser in the form of a cookie. The browser may accept the cookie. If it does, it is stored as a plain text record on the visitor's hard drive. Now, when the visitor arrives at another page on your site, the cookie is available for retrieval. Once retrieved, your server knows/remembers what was stored.\nCookies are a plain text data record of 5 variable-length fields \u2212\n\nExpires \u2212 The date the cookie will expire. If this is blank, the cookie will expire when the visitor quits the browser.\nDomain \u2212 The domain name of your site.\nPath \u2212 The path to the directory or web page that sets the cookie. This may be blank if you want to retrieve the cookie from any directory or page.\nSecure \u2212 If this field contains the word \"secure\", then the cookie may only be retrieved with a secure server. If this field is blank, no such restriction exists.\nName=Value \u2212 Cookies are set and retrieved in the form of key and value pairs.\n\nSetting up Cookies\nIt is very easy to send cookies to browser. These cookies are sent along with HTTP Header before to Content-type field. Assuming you want to set UserID and Password as cookies. Setting the cookies is done as follows \u2212\n\n#!/usr/bin/python\n\nprint \"Set-Cookie:UserID = XYZ;\\r\\n\"\nprint \"Set-Cookie:Password = XYZ123;\\r\\n\"\nprint \"Set-Cookie:Expires = Tuesday, 31-Dec-2007 23:12:40 GMT\";\\r\\n\"\nprint \"Set-Cookie:Domain = www.tutorialspoint.com;\\r\\n\"\nprint \"Set-Cookie:Path = /perl;\\n\"\nprint \"Content-type:text/html\\r\\n\\r\\n\"\n...........Rest of the HTML Content....\n\nFrom this example, you must have understood how to set cookies. We use Set-Cookie HTTP header to set cookies.\nIt is optional to set cookies attributes like Expires, Domain, and Path. It is notable that cookies are set before sending magic line \"Content-type:text/html\\r\\n\\r\\n.\nRetrieving Cookies\nIt is very easy to retrieve all the set cookies. Cookies are stored in CGI environment variable HTTP_COOKIE and they will have following form \u2212\n\nkey1 = value1;key2 = value2;key3 = value3....\n\nHere is an example of how to retrieve cookies.\n\n#!/usr/bin/python\n\n# Import modules for CGI handling \nfrom os import environ\nimport cgi, cgitb\n\nif environ.has_key('HTTP_COOKIE'):\n   for cookie in map(strip, split(environ['HTTP_COOKIE'], ';')):\n      (key, value ) = split(cookie, '=');\n      if key == \"UserID\":\n         user_id = value\n\n      if key == \"Password\":\n         password = value\n\nprint \"User ID  = %s\" % user_id\nprint \"Password = %s\" % password\n\nThis produces the following result for the cookies set by above script \u2212\n\nUser ID = XYZ\nPassword = XYZ123\n\nFile Upload Example\nTo upload a file, the HTML form must have the enctype attribute set to multipart/form-data. The input tag with the file type creates a \"Browse\" button.\n\n<html>\n<body>\n   <form enctype = \"multipart/form-data\" \n                     action = \"save_file.py\" method = \"post\">\n   <p>File: <input type = \"file\" name = \"filename\" /></p>\n   <p><input type = \"submit\" value = \"Upload\" /></p>\n   </form>\n</body>\n</html>\n\nThe result of this code is the following form \u2212\n\nFile: \n\n\nAbove example has been disabled intentionally to save people uploading file on our server, but you can try above code with your server.\nHere is the script save_file.py to handle file upload \u2212\n\n#!/usr/bin/python\n\nimport cgi, os\nimport cgitb; cgitb.enable()\n\nform = cgi.FieldStorage()\n\n# Get filename here.\nfileitem = form['filename']\n\n# Test if the file was uploaded\nif fileitem.filename:\n   # strip leading path from file name to avoid \n   # directory traversal attacks\n   fn = os.path.basename(fileitem.filename)\n   open('/tmp/' + fn, 'wb').write(fileitem.file.read())\n\n   message = 'The file \"' + fn + '\" was uploaded successfully'\n   \nelse:\n   message = 'No file was uploaded'\n   \nprint \"\"\"\\\nContent-Type: text/html\\n\n<html>\n<body>\n   <p>%s</p>\n</body>\n</html>\n\"\"\" % (message,)\n\nIf you run the above script on Unix/Linux, then you need to take care of replacing  file separator as follows, otherwise on your windows machine above open() statement should work fine.\n\nfn = os.path.basename(fileitem.filename.replace(\"\\\\\", \"/\" ))\n\nHow To Raise a \"File Download\" Dialog Box?\nSometimes, it is desired that you want to give option where a user can click a link and it will pop up a \"File Download\" dialogue box to the user instead of displaying actual content. This is very easy and can be achieved through HTTP header. This HTTP header is be different from the header mentioned in previous section.\nFor example, if you want make a FileName file downloadable from a given link, then its syntax is as follows \u2212\n\n#!/usr/bin/python\n\n# HTTP Header\nprint \"Content-Type:application/octet-stream; name = \\\"FileName\\\"\\r\\n\";\nprint \"Content-Disposition: attachment; filename = \\\"FileName\\\"\\r\\n\\n\";\n\n# Actual File Content will go here.\nfo = open(\"foo.txt\", \"rb\")\n\nstr = fo.read();\nprint str\n\n# Close opend file\nfo.close()\n\nHope you enjoyed this tutorial. If yes, please send me your feedback at: Contact Us\n\n\n Previous Page\n\n\n Print\n\n\nNext Page \u00a0\n\n\n\n\nAdvertisements\n<!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//-->\n\n\n\n", "url": "https://www.tutorialspoint.com/python/python_cgi_programming.htm", "html": "<!DOCTYPE html>\n\n<!--[if IE 8]><html class=\"ie ie8\"> <![endif]-->\n<!--[if IE 9]><html class=\"ie ie9\"> <![endif]-->\n<!--[if gt IE 9]><!--> <html> <!--<![endif]-->\n<head>\n<!-- Basic -->\n<meta charset=\"utf-8\"/>\n<title>Python CGI Programming</title>\n<meta content=\"Python CGI Programming - Learn Python in simple and easy steps starting from basic to advanced concepts with examples including Python Syntax Object Oriented Language, Methods, Tuples, Tools/Utilities, Exceptions Handling, Sockets, GUI, Extentions, XML Programming.\" name=\"description\">\n<meta content=\"Python, Tutorials, Learning, Beginners, Basics, Object Oriented Language, Methods, Overriding, Networking, Multithreading,Methods, Tuples, Tools/Utilities, Exceptions Handling, Sockets, GUI, Extentions, XML, Programming.\" name=\"Keywords\"/>\n<base href=\"https://www.tutorialspoint.com/\"/>\n<link href=\"/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"/>\n<meta content=\"width=device-width,initial-scale=1.0,user-scalable=yes\" name=\"viewport\"/>\n<meta content=\"en_US\" property=\"og:locale\">\n<meta content=\"website\" property=\"og:type\"/>\n<meta content=\"471319149685276\" property=\"fb:app_id\"/>\n<meta content=\"www.tutorialspoint.com\" property=\"og:site_name\"/>\n<meta content=\"yes\" name=\"apple-mobile-web-app-capable\"/>\n<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"/>\n<meta content=\"tutorialspoint.com\" name=\"author\"/>\n<script src=\"https://www.tutorialspoint.com/theme/js/script-min-v4.js?v=2\" type=\"text/javascript\"></script>\n<link href=\"https://www.tutorialspoint.com/theme/css/style-min.css?v=3.1\" rel=\"stylesheet\"/>\n<script>\r\nfunction openNav() {\t\r\n  document.getElementById(\"mySidenav\").style.width = \"250px\";\r\n  document.getElementById(\"right_obs\").style.display = \"block\";\r\n}\r\nfunction closeNav() {\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\nfunction close_obs_sidenav(){\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\n</script>\n<!-- Head Libs -->\n<!--[if IE 8]>\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/theme/css/ie8.css\">\r\n<![endif]-->\n<style>\r\n#privacy-banner {\r\n    position: fixed;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    max-width: 100%;\r\n    padding: 1rem .5rem;\r\n    background: #fff;\r\n    z-index: 1030;\r\n    color: #000;\r\n    font-size: 14px;\r\n    margin: 0;\r\n    display: none;\r\n    border-top: 2px solid rgb(130, 130, 130);\r\n  }\r\n  #privacy-banner p {\r\n    margin: 0;\r\n    color: #000;\r\n    text-align: center;\r\n  }\r\n  #privacy-banner a {\r\n    text-decoration: none;\r\n    margin: 20px auto 0 auto;\r\n    display: block;\r\n    max-width: 150px;\r\n  }\r\n  #privacy-banner a:hover {\r\n    text-decoration: underline;\r\n  }\r\n  #banner-learn {\r\n    color: #000;\r\n  }\r\n  #banner-accept {\r\n    padding: 7px 15px;\r\n    color: #fff;\r\n    border-radius: 5px;\r\n    background:#737373 !important;\r\n  }\r\n  @media (min-width: 768px) {\r\n    #privacy-banner {\r\n      padding: 1.5rem .5rem;\r\n    }\r\n    #privacy-banner a {\r\n      display: inline-block;\r\n      margin: 0 10px;\r\n    }\r\n}\r\npre.prettyprint.tryit {min-height:37px; background: #eee url(/python/images/try-it.jpg) top right no-repeat !important}select{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }\r\n.btnsbmt{ background: #fdbf00 !important;}\r\nul.nav-list.primary>li a.videolink{    background: none; margin: 0px; padding: 0px; border: 1px solid #d6d6d6;}\r\ndiv.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #fdbf00 url(/images/pattern.png) repeat center center !important;}\r\n.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #fdbf00 !important;}\r\n.submenu-item{ border-bottom: 2px solid #fdbf00 !important; border-top: 2px solid #fdbf00 !important }\r\n.ace_scroller{overflow: auto!important;}\r\na.demo{font-family: \"Open Sans\",Arial,sans-serif; background:#fdbf00; color:#fff; font-size:13px; padding:3px 10px; border:1px solid #d6d6d6; position:absolute; right:5px; margin:-6px 17px 0px 0px;}\r\na.demo:hover{opacity:.8}\r\n</style>\n<script>\r\n$(document).ready(function() {\r\n  $('input[name=\"q\"]').keydown(function(event){\r\n    if(event.keyCode == 13) {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n  });\r\n});\r\n</script>\n</meta></meta></head>\n<body onload=\"prettyPrint()\">\n<div class=\"wrapLoader\">\n<div class=\"imgLoader\">\n<img alt=\"\" height=\"70\" src=\"/images/loading-cg.gif\" width=\"70\"/>\n</div>\n</div>\n<div class=\"display-none\" id=\"right_obs\" onclick=\"close_obs_sidenav()\"></div>\n<header>\n<div class=\"container\">\n<h1 class=\"logo\">\n<a href=\"index.htm\" title=\"tutorialspoint\">\n<img alt=\"tutorialspoint\" src=\"/python/images/logo.png\"/>\n</a>\n</h1>\n<ul class=\"tp-inline-block pull-right\" id=\"tp-head-icons\">\n<li>\n<div class=\"tp-second-nav tp-display-none tp-pointer\" onclick=\"openNav()\">\n<i class=\"fa fa-th-large fa-lg\"></i>\n</div>\n</li>\n</ul>\n<button class=\"btn btn-responsive-nav btn-inverse\" data-target=\".nav-main-collapse\" data-toggle=\"collapse\" id=\"pull\" style=\"top: 24px!important\"> <i class=\"icon icon-bars\"></i> </button>\n<nav>\n<ul class=\"nav nav-pills nav-top\">\n<li><a href=\"/about/about_careers.htm\" style=\"background: #fffb09; font-weight: bold;\"><i class=\"icon icon-suitcase\"></i> Jobs</a></li>\n<li> <a href=\"/programming_examples/\" target=\"_blank\"><i class=\"fa fa-cubes\"></i> \u00a0Examples</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/whiteboard.htm\"><img alt=\"Whiteboard\" src=\"theme/css/icons/image-editor.png\" title=\"Whiteboard\"/> \u00a0Whiteboard</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/netmeeting.php\"><i class=\"fa-camera\"></i> \u00a0Net Meeting</a> </li>\n<li> <a href=\"/online_dev_tools.htm\"> <i class=\"dev-tools-menu\" style=\"opacity:.5\"></i> Tools </a> </li>\n<li> <a href=\"/articles/index.php\"><i class=\"icon icon-file-text-o\"></i> \u00a0Articles</a> </li>\n<li class=\"top-icons\">\n<ul class=\"social-icons\">\n<li class=\"facebook\"><a data-placement=\"bottom\" href=\"https://www.facebook.com/tutorialspointindia\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Facebook\">Facebook</a></li>\n<li class=\"googleplus\"><a data-placement=\"bottom\" href=\"https://plus.google.com/u/0/116678774017490391259/posts\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Google+\">Google+</a></li>\n<li class=\"twitter\"><a data-placement=\"bottom\" href=\"https://www.twitter.com/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Twitter\">Twitter</a></li>\n<li class=\"linkedin\"><a data-placement=\"bottom\" href=\"https://www.linkedin.com/company/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Linkedin\">Linkedin</a></li>\n<li class=\"youtube\"><a data-placement=\"bottom\" href=\"https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint YouTube\">YouTube</a></li>\n</ul>\n</li>\n</ul>\n</nav>\n</div>\n<div class=\"sidenav\" id=\"mySidenav\">\n<div class=\"navbar nav-main\">\n<div class=\"container\">\n<nav class=\"nav-main mega-menu\">\n<ul class=\"nav nav-pills nav-main\" id=\"mainMenu\">\n<li class=\"dropdown no-sub-menu\"> <a class=\"dropdown\" href=\"index.htm\"><i class=\"icon icon-home\"></i> Home</a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"/questions/index.php\"><i class=\"fa fa-send\"></i> Q/A </a> </li>\n<li class=\"dropdown\"><a class=\"dropdown\" href=\"tutorialslibrary.htm\"><span class=\"tut-lib\"> Library </span></a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"videotutorials/index.htm\"><i class=\"fa-toggle-right\"></i> Videos </a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"tutor_connect/index.php\"><i class=\"fa-user\"> </i> Tutors</a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"codingground.htm\"><i class=\"fa-code\"></i> Coding Ground </a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"https://store.tutorialspoint.com/\"><i class=\"fa-usd\"></i> Store </a> </li>\n<li class=\"dropdown no-sub-menu\">\n<div class=\"searchform-popup\">\n<input autocomplete=\"off\" class=\"header-search-box\" id=\"search-string\" name=\"q\" onblur=\"if (this.value == '') {this.value = 'Search your favorite tutorials...';}\" onfocus=\"if (this.value == 'Search your favorite tutorials...') {this.value = '';}\" placeholder=\"Search your favorite tutorials...\" type=\"text\"/>\n<div class=\"magnifying-glass\"><i class=\"icon-search\"></i> Search </div>\n</div>\n</li>\n</ul>\n</nav>\n</div>\n</div>\n</div>\n</header></body></html>\n\n<div style=\"clear:both;\"></div>\n<div class=\"main\" role=\"main\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-2\">\n<aside class=\"sidebar\">\n<style>\r\n.ts {\r\n   text-align:center !important;\r\n   vertical-align:middle !important;\r\n}\r\n</style>\n<div class=\"mini-logo\">\n<img alt=\"Python Tutorial\" src=\"/python/images/python-mini.jpg\">\n</img></div>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Python Basic Tutorial</li>\n<li><a href=\"/python/index.htm\" target=\"_top\">Python - Home</a></li>\n<li><a href=\"/python/python_overview.htm\" target=\"_top\">Python - Overview</a></li>\n<li><a href=\"/python/python_environment.htm\" target=\"_top\">Python - Environment Setup</a></li>\n<li><a href=\"/python/python_basic_syntax.htm\" target=\"_top\">Python - Basic Syntax</a></li>\n<li><a href=\"/python/python_variable_types.htm\" target=\"_top\">Python - Variable Types</a></li>\n<li><a href=\"/python/python_basic_operators.htm\" target=\"_top\">Python - Basic Operators</a></li>\n<li><a href=\"/python/python_decision_making.htm\" target=\"_top\">Python - Decision Making</a></li>\n<li><a href=\"/python/python_loops.htm\" target=\"_top\">Python - Loops</a></li>\n<li><a href=\"/python/python_numbers.htm\" target=\"_top\">Python - Numbers</a></li>\n<li><a href=\"/python/python_strings.htm\" target=\"_top\">Python - Strings</a></li>\n<li><a href=\"/python/python_lists.htm\" target=\"_top\">Python - Lists</a></li>\n<li><a href=\"/python/python_tuples.htm\" target=\"_top\">Python - Tuples</a></li>\n<li><a href=\"/python/python_dictionary.htm\" target=\"_top\">Python - Dictionary</a></li>\n<li><a href=\"/python/python_date_time.htm\" target=\"_top\">Python - Date &amp; Time</a></li>\n<li><a href=\"/python/python_functions.htm\" target=\"_top\">Python - Functions</a></li>\n<li><a href=\"/python/python_modules.htm\" target=\"_top\">Python - Modules</a></li>\n<li><a href=\"/python/python_files_io.htm\" target=\"_top\">Python - Files I/O</a></li>\n<li><a href=\"/python/python_exceptions.htm\" target=\"_top\">Python - Exceptions</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Python Advanced Tutorial</li>\n<li><a href=\"/python/python_classes_objects.htm\" target=\"_top\">Python - Classes/Objects</a></li>\n<li><a href=\"/python/python_reg_expressions.htm\" target=\"_top\">Python - Reg Expressions</a></li>\n<li><a href=\"/python/python_cgi_programming.htm\" target=\"_top\">Python - CGI Programming</a></li>\n<li><a href=\"/python/python_database_access.htm\" target=\"_top\">Python - Database Access</a></li>\n<li><a href=\"/python/python_networking.htm\" target=\"_top\">Python - Networking</a></li>\n<li><a href=\"/python/python_sending_email.htm\" target=\"_top\">Python - Sending Email</a></li>\n<li><a href=\"/python/python_multithreading.htm\" target=\"_top\">Python - Multithreading</a></li>\n<li><a href=\"/python/python_xml_processing.htm\" target=\"_top\">Python - XML Processing</a></li>\n<li><a href=\"/python/python_gui_programming.htm\" target=\"_top\">Python - GUI Programming</a></li>\n<li><a href=\"/python/python_further_extensions.htm\" target=\"_top\">Python - Further Extensions</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Python  Useful Resources</li>\n<li><a href=\"/python/python_questions_answers.htm\" target=\"_top\">Python - Questions and Answers</a></li>\n<li><a href=\"/python/python_quick_guide.htm\" target=\"_top\">Python - Quick Guide</a></li>\n<li><a href=\"/python/python_tools_utilities.htm\" target=\"_top\">Python - Tools/Utilities</a></li>\n<li><a href=\"/python/python_useful_resources.htm\" target=\"_top\">Python - Useful Resources</a></li>\n<li><a href=\"/python/python_discussion.htm\" target=\"_top\">Python - Discussion</a></li>\n</ul>\n<ul class=\"nav nav-list primary push-bottom left-menu special\">\n<li class=\"sreading\">Selected Reading</li>\n<li><a href=\"/upsc_ias_exams.htm\" target=\"_top\">UPSC IAS Exams Notes</a></li>\n<li><a href=\"/developers_best_practices/index.htm\" target=\"_top\">Developer's Best Practices</a></li>\n<li><a href=\"/questions_and_answers.htm\" target=\"_top\">Questions and Answers</a></li>\n<li><a href=\"/effective_resume_writing.htm\" target=\"_top\">Effective Resume Writing</a></li>\n<li><a href=\"/hr_interview_questions/index.htm\" target=\"_top\">HR Interview Questions</a></li>\n<li><a href=\"/computer_glossary.htm\" target=\"_top\">Computer Glossary</a></li>\n<li><a href=\"/computer_whoiswho.htm\" target=\"_top\">Who is Who</a></li>\n</ul>\n</aside>\n</div>\n<!-- PRINTING STARTS HERE -->\n<div class=\"row\">\n<div class=\"content\">\n<div class=\"col-md-7 middle-col\">\n<h1>Python - CGI Programming</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_reg_expressions.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_database_access.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>The Common Gateway Interface, or CGI, is a set of standards that define how information is exchanged between the web server and a custom script. The CGI specs are currently maintained by the NCSA.</p>\n<h2>What is CGI?</h2>\n<ul class=\"list\">\n<li><p>The Common Gateway Interface, or CGI, is a standard for external gateway programs to interface with information servers such as HTTP servers.</p></li>\n<li><p>The current version is CGI/1.1 and CGI/1.2 is under progress.</p></li>\n</ul>\n<h2>Web Browsing</h2>\n<p>To understand the concept of CGI, let us see what happens when we click a hyper link to browse a particular web page or URL.</p>\n<ul class=\"list\">\n<li><p>Your browser contacts the HTTP web server and demands for the URL, i.e., filename.</p></li>\n<li><p>Web Server parses the URL and looks for the filename. If it finds that file then sends it back to the browser, otherwise sends an error message indicating that you requested a wrong file.</p></li>\n<li><p>Web browser takes response from web server and displays either the received file or error message.</p></li>\n</ul>\n<p>However, it is possible to set up the HTTP server so that whenever a file in a certain directory is requested that file is not sent back; instead it is executed as a program, and whatever that program outputs is sent back for your browser to display. This function is called the Common Gateway Interface or CGI and the programs are called CGI scripts. These CGI programs can be a Python Script, PERL Script, Shell Script, C or C++ program, etc.</p>\n<h2>CGI Architecture Diagram</h2>\n<img alt=\"CGI Architecture\" src=\"/python/images/cgiarch.gif\">\n<h2>Web Server Support and Configuration</h2>\n<p>Before you proceed with CGI Programming, make sure that your Web Server supports CGI and it is configured to handle CGI Programs. All the CGI Programs to be executed by the HTTP server are kept in a pre-configured directory. This directory is called CGI Directory and by convention it is named as /var/www/cgi-bin. By convention, CGI files have extension as. <b>cgi,</b> but you can keep your files with python extension <b>.py</b> as well.</p>\n<p>By default, the Linux server is configured to run only the scripts in the cgi-bin directory in /var/www. If you want to specify any other directory to run your CGI scripts, comment the following lines in the httpd.conf file \u2212</p>\n<pre class=\"prettyprint notranslate\">\n&lt;Directory \"/var/www/cgi-bin\"&gt;\n   AllowOverride None\n   Options ExecCGI\n   Order allow,deny\n   Allow from all\n&lt;/Directory&gt;\n\n&lt;Directory \"/var/www/cgi-bin\"&gt;\nOptions All\n&lt;/Directory&gt;\n</pre>\n<p>Here, we assume that you have Web Server up and running successfully and you are able to run any other CGI program like Perl or Shell, etc.</p>\n<h2>First CGI Program</h2>\n<p>Here is a simple link, which is linked to a CGI script called <a href=\"/cgi-bin/hello.py\" target=\"_blank\">hello.py</a>. This file is kept in /var/www/cgi-bin directory and it has following content. Before running your CGI program, make sure you have change mode of file using <b>chmod 755 hello.py</b> UNIX command to make file executable.</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nprint \"Content-type:text/html\\r\\n\\r\\n\"\nprint '&lt;html&gt;'\nprint '&lt;head&gt;'\nprint '&lt;title&gt;Hello Word - First CGI Program&lt;/title&gt;'\nprint '&lt;/head&gt;'\nprint '&lt;body&gt;'\nprint '&lt;h2&gt;Hello Word! This is my first CGI program&lt;/h2&gt;'\nprint '&lt;/body&gt;'\nprint '&lt;/html&gt;'\n</pre>\n<p>If you click hello.py, then this produces the following output \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<td>\n<h2>Hello Word! This is my first CGI program</h2>\n</td>\n</tr>\n</table>\n<p>This hello.py script is a simple Python script, which writes its output on STDOUT file, i.e., screen. There is one important and extra feature available which is first line to be printed <b>Content-type:text/html\\r\\n\\r\\n</b>. This line is sent back to the browser and it specifies the content type to be displayed on the browser screen.</p>\n<p>By now you must have understood basic concept of CGI and you can write many complicated CGI programs using Python. This script can interact with any other external system also to exchange information such as RDBMS.</p>\n<h2>HTTP Header</h2>\n<p>The line <b>Content-type:text/html\\r\\n\\r\\n</b> is part of HTTP header which is sent to the browser to understand the content. All the HTTP header will be in the following form \u2212</p>\n<pre class=\"result notranslate\">\nHTTP Field Name: Field Content\n\nFor Example\nContent-type: text/html\\r\\n\\r\\n\n</pre>\n<p>There are few other important HTTP headers, which you will use frequently in your CGI Programming.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\">Sr.No.</th>\n<th style=\"text-align:center;\">Header &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>Content-type:</b></p>\n<p>A MIME string defining the format of the file being returned. Example is Content-type:text/html</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>Expires: Date</b></p>\n<p>The date the information becomes invalid. It is used by the browser to decide when a page needs to be refreshed. A valid date string is in the format 01 Jan 1998 12:00:00 GMT.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>Location: URL</b></p>\n<p>The URL that is returned instead of the URL requested. You can use this field to redirect a request to any file.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>Last-modified: Date</b></p>\n<p>The date of last modification of the resource.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>Content-length: N</b></p>\n<p>The length, in bytes, of the data being returned. The browser uses this value to report the estimated download time for a file.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><p><b>Set-Cookie: String</b></p>\n<p>Set the cookie passed through the <i>string</i></p></td>\n</tr>\n</table>\n<h2>CGI Environment Variables</h2>\n<p>All the CGI programs have access to the following environment variables. These variables play an important role while writing any CGI program.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;width:10%;\">Sr.No.</th>\n<th style=\"text-align:center;\">Variable Name &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>CONTENT_TYPE</b></p>\n<p>The data type of the content. Used when the client is sending attached content to the server. For example, file upload.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>CONTENT_LENGTH</b></p>\n<p>The length of the query information. It is available only for POST requests.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>HTTP_COOKIE</b></p>\n<p>Returns the set cookies in the form of key &amp; value pair.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>HTTP_USER_AGENT</b></p>\n<p>The User-Agent request-header field contains information about the user agent originating the request. It is name of the web browser.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>PATH_INFO</b></p>\n<p>The path for the CGI script.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><p><b>QUERY_STRING</b></p>\n<p>The URL-encoded information that is sent with GET method request.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">7</td>\n<td><p><b>REMOTE_ADDR</b></p>\n<p>The IP address of the remote host making the request. This is useful logging or for authentication.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">8</td>\n<td><p><b>REMOTE_HOST</b></p>\n<p>The fully qualified name of the host making the request. If this information is not available, then REMOTE_ADDR can be used to get IR address.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">9</td>\n<td><p><b>REQUEST_METHOD</b></p>\n<p>The method used to make the request. The most common methods are GET and POST.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">10</td>\n<td><p><b>SCRIPT_FILENAME</b></p>\n<p>The full path to the CGI script.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">11</td>\n<td><p><b>SCRIPT_NAME</b></p>\n<p>The name of the CGI script.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">12</td>\n<td><p><b>SERVER_NAME</b></p>\n<p>The server's hostname or IP Address</p></td>\n</tr>\n<tr>\n<td class=\"ts\">13</td>\n<td><p><b>SERVER_SOFTWARE</b></p>\n<p>The name and version of the software the server is running.</p></td>\n</tr>\n</table>\n<p>Here is small CGI program to list out all the CGI variables. Click this link to see the result <a href=\"http://www.tutorialspoint.com/cgi-bin/get_env.py\" target=\"_blank\">Get Environment</a></p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nimport os\n\nprint \"Content-type: text/html\\r\\n\\r\\n\";\nprint \"&lt;font size=+1&gt;Environment&lt;/font&gt;&lt;\\br&gt;\";\nfor param in os.environ.keys():\n   print \"&lt;b&gt;%20s&lt;/b&gt;: %s&lt;\\br&gt;\" % (param, os.environ[param])\n</pre>\n<h2>GET and POST Methods</h2>\n<p>You must have come across many situations when you need to pass some information from your browser to web server and ultimately to your CGI Program. Most frequently, browser uses two methods two pass this information to web server. These methods are GET Method and POST Method.</p>\n<h2>Passing Information using GET method</h2>\n<p>The GET method sends the encoded user information appended to the page request. The page and the encoded information are separated by the ? character as follows \u2212</p>\n<pre class=\"result notranslate\">\nhttp://www.test.com/cgi-bin/hello.py?key1=value1&amp;key2=value2\n</pre>\n<p>The GET method is the default method to pass information from browser to web server and it produces a long string that appears in your browser's Location:box. Never use GET method if you have password or other sensitive information to pass to the server. The GET method has size limitation: only 1024 characters can be sent in a request string. The GET method sends information using QUERY_STRING header and will be accessible in your CGI Program through QUERY_STRING environment variable.</p>\n<p>You can pass information by simply concatenating key and value pairs along with any URL or you can use HTML &lt;FORM&gt; tags to pass information using GET method.</p>\n<h2>Simple URL Example:Get Method</h2>\n<p>Here is a simple URL, which passes two values to hello_get.py program using GET method.</p>\n<a href=\"/cgi-bin/hello_get.py?first_name=ZARA&amp;last_name=ALI\" style=\"text-decoration:none;\" target=\"_blank\">/cgi-bin/hello_get.py?first_name=ZARA&amp;last_name=ALI</a>\n<p>Below is <b>hello_get.py</b> script to handle input given by web browser. We are going to use <b>cgi</b> module, which makes it very easy to access passed information \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\n# Import modules for CGI handling \nimport cgi, cgitb \n\n# Create instance of FieldStorage \nform = cgi.FieldStorage() \n\n# Get data from fields\nfirst_name = form.getvalue('first_name')\nlast_name  = form.getvalue('last_name')\n\nprint \"Content-type:text/html\\r\\n\\r\\n\"\nprint \"&lt;html&gt;\"\nprint \"&lt;head&gt;\"\nprint \"&lt;title&gt;Hello - Second CGI Program&lt;/title&gt;\"\nprint \"&lt;/head&gt;\"\nprint \"&lt;body&gt;\"\nprint \"&lt;h2&gt;Hello %s %s&lt;/h2&gt;\" % (first_name, last_name)\nprint \"&lt;/body&gt;\"\nprint \"&lt;/html&gt;\"\n</pre>\n<p>This would generate the following result \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<td>\n<h2>Hello ZARA ALI</h2>\n</td>\n</tr>\n</table>\n<h2>Simple FORM Example:GET Method</h2>\n<p>This example passes two values using HTML FORM and submit button. We use same CGI script hello_get.py to handle this input.</p>\n<pre class=\"prettyprint notranslate\">\n&lt;form action = \"/cgi-bin/hello_get.py\" method = \"get\"&gt;\nFirst Name: &lt;input type = \"text\" name = \"first_name\"&gt;  &lt;br /&gt;\n\nLast Name: &lt;input type = \"text\" name = \"last_name\" /&gt;\n&lt;input type = \"submit\" value = \"Submit\" /&gt;\n&lt;/form&gt;\n</pre>\n<p>Here is the actual output of the above form, you enter First and Last Name and then click submit button to see the result.</p>\n<form action=\"/cgi-bin/hello_get.py\" method=\"get\" target=\"_blank\">\nFirst Name: <input name=\"first_name\" type=\"text\"><br/>\n\nLast Name: <input name=\"last_name\" type=\"text\"/>\n<input type=\"submit\" value=\"Submit\"/></input></form>\n<h2>Passing Information Using POST Method</h2>\n<p>A generally more reliable method  of passing information to a CGI program is the POST method. This packages the information in exactly the same way as GET methods, but instead of sending it as a text string after a ? in the URL it sends it as a separate message. This message comes into the CGI script in the form of the standard input.</p>\n<p>Below is same hello_get.py script which handles GET as well as POST method.</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\n# Import modules for CGI handling \nimport cgi, cgitb \n\n# Create instance of FieldStorage \nform = cgi.FieldStorage() \n\n# Get data from fields\nfirst_name = form.getvalue('first_name')\nlast_name  = form.getvalue('last_name')\n\nprint \"Content-type:text/html\\r\\n\\r\\n\"\nprint \"&lt;html&gt;\"\nprint \"&lt;head&gt;\"\nprint \"&lt;title&gt;Hello - Second CGI Program&lt;/title&gt;\"\nprint \"&lt;/head&gt;\"\nprint \"&lt;body&gt;\"\nprint \"&lt;h2&gt;Hello %s %s&lt;/h2&gt;\" % (first_name, last_name)\nprint \"&lt;/body&gt;\"\nprint \"&lt;/html&gt;\"\n</pre>\n<p>Let us take again same example as above which passes two values using HTML FORM and submit button. We use same CGI script hello_get.py to handle this input.</p>\n<pre class=\"prettyprint notranslate\">\n&lt;form action = \"/cgi-bin/hello_get.py\" method = \"post\"&gt;\nFirst Name: &lt;input type = \"text\" name = \"first_name\"&gt;&lt;br /&gt;\nLast Name: &lt;input type = \"text\" name = \"last_name\" /&gt;\n\n&lt;input type = \"submit\" value = \"Submit\" /&gt;\n&lt;/form&gt;\n</pre>\n<p>Here is the actual output of the above form. You enter First and Last Name and then click submit button to see the result.</p>\n<form action=\"/cgi-bin/hello_get.py\" method=\"post\" target=\"_blank\">\nFirst Name: <input name=\"first_name\" type=\"text\"/><br/>\n\nLast Name: <input name=\"last_name\" type=\"text\"/>\n<input type=\"submit\" value=\"Submit\"/>\n</form>\n<h2>Passing Checkbox Data to CGI Program</h2>\n<p>Checkboxes are used when more than one option is required to be selected.</p>\n<p>Here is example HTML code for a form with two checkboxes \u2212</p>\n<pre class=\"prettyprint notranslate\">\n&lt;form action = \"/cgi-bin/checkbox.cgi\" method = \"POST\" target = \"_blank\"&gt;\n&lt;input type = \"checkbox\" name = \"maths\" value = \"on\" /&gt; Maths\n&lt;input type = \"checkbox\" name = \"physics\" value = \"on\" /&gt; Physics\n&lt;input type = \"submit\" value = \"Select Subject\" /&gt;\n&lt;/form&gt;\n</pre>\n<p>The result of this code is the following form \u2212</p>\n<form action=\"/cgi-bin/checkbox.py\" method=\"post\" target=\"_blank\">\n<input name=\"maths\" type=\"checkbox\" value=\"on\"/> Maths\n<input name=\"physics\" type=\"checkbox\" value=\"on\"/> Physics\n<input type=\"submit\" value=\"Select Subject\"/>\n</form>\n<p>Below is checkbox.cgi script to handle input given by web browser for checkbox button.</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\n# Import modules for CGI handling \nimport cgi, cgitb \n\n# Create instance of FieldStorage \nform = cgi.FieldStorage() \n\n# Get data from fields\nif form.getvalue('maths'):\n   math_flag = \"ON\"\nelse:\n   math_flag = \"OFF\"\n\nif form.getvalue('physics'):\n   physics_flag = \"ON\"\nelse:\n   physics_flag = \"OFF\"\n\nprint \"Content-type:text/html\\r\\n\\r\\n\"\nprint \"&lt;html&gt;\"\nprint \"&lt;head&gt;\"\nprint \"&lt;title&gt;Checkbox - Third CGI Program&lt;/title&gt;\"\nprint \"&lt;/head&gt;\"\nprint \"&lt;body&gt;\"\nprint \"&lt;h2&gt; CheckBox Maths is : %s&lt;/h2&gt;\" % math_flag\nprint \"&lt;h2&gt; CheckBox Physics is : %s&lt;/h2&gt;\" % physics_flag\nprint \"&lt;/body&gt;\"\nprint \"&lt;/html&gt;\"\n</pre>\n<h2>Passing Radio Button Data to CGI Program</h2>\n<p>Radio Buttons are used when only one option is required to be selected.</p>\n<p>Here is example HTML code for a form with two radio buttons \u2212</p>\n<pre class=\"prettyprint notranslate\">\n&lt;form action = \"/cgi-bin/radiobutton.py\" method = \"post\" target = \"_blank\"&gt;\n&lt;input type = \"radio\" name = \"subject\" value = \"maths\" /&gt; Maths\n&lt;input type = \"radio\" name = \"subject\" value = \"physics\" /&gt; Physics\n&lt;input type = \"submit\" value = \"Select Subject\" /&gt;\n&lt;/form&gt;\n</pre>\n<p>The result of this code is the following form \u2212</p>\n<form action=\"/cgi-bin/radiobutton.py\" method=\"post\" target=\"_blank\">\n<input name=\"subject\" type=\"radio\" value=\"Maths\"/> Maths\n<input name=\"subject\" type=\"radio\" value=\"Physics\"/> Physics\n<input type=\"submit\" value=\"Select Subject\"/>\n</form>\n<p>Below is radiobutton.py script to handle input given by web browser for radio button \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\n# Import modules for CGI handling \nimport cgi, cgitb \n\n# Create instance of FieldStorage \nform = cgi.FieldStorage() \n\n# Get data from fields\nif form.getvalue('subject'):\n   subject = form.getvalue('subject')\nelse:\n   subject = \"Not set\"\n\nprint \"Content-type:text/html\\r\\n\\r\\n\"\nprint \"&lt;html&gt;\"\nprint \"&lt;head&gt;\"\nprint \"&lt;title&gt;Radio - Fourth CGI Program&lt;/title&gt;\"\nprint \"&lt;/head&gt;\"\nprint \"&lt;body&gt;\"\nprint \"&lt;h2&gt; Selected Subject is %s&lt;/h2&gt;\" % subject\nprint \"&lt;/body&gt;\"\nprint \"&lt;/html&gt;\"\n</pre>\n<h2>Passing Text Area Data to CGI Program</h2>\n<p>TEXTAREA element is used when multiline text has to be passed to the CGI Program.</p>\n<p>Here is example HTML code for a form with a TEXTAREA box \u2212</p>\n<pre class=\"prettyprint notranslate\">\n&lt;form action = \"/cgi-bin/textarea.py\" method = \"post\" target = \"_blank\"&gt;\n&lt;textarea name = \"textcontent\" cols = \"40\" rows = \"4\"&gt;\nType your text here...\n&lt;/textarea&gt;\n&lt;input type = \"submit\" value = \"Submit\" /&gt;\n&lt;/form&gt;\n</pre>\n<p>The result of this code is the following form \u2212</p>\n<form action=\"/cgi-bin/textarea.py\" method=\"post\" target=\"_blank\">\n<textarea cols=\"40\" name=\"textcontent\" rows=\"4\">Type your text here...</textarea>\n<input type=\"submit\" value=\"Submit\"/>\n</form>\n<p>Below is textarea.cgi script to handle input given by web browser \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\n# Import modules for CGI handling \nimport cgi, cgitb \n\n# Create instance of FieldStorage \nform = cgi.FieldStorage() \n\n# Get data from fields\nif form.getvalue('textcontent'):\n   text_content = form.getvalue('textcontent')\nelse:\n   text_content = \"Not entered\"\n\nprint \"Content-type:text/html\\r\\n\\r\\n\"\nprint \"&lt;html&gt;\"\nprint \"&lt;head&gt;\";\nprint \"&lt;title&gt;Text Area - Fifth CGI Program&lt;/title&gt;\"\nprint \"&lt;/head&gt;\"\nprint \"&lt;body&gt;\"\nprint \"&lt;h2&gt; Entered Text Content is %s&lt;/h2&gt;\" % text_content\nprint \"&lt;/body&gt;\"\n</pre>\n<h2>Passing Drop Down Box Data to CGI Program</h2>\n<p>Drop Down Box is used when we have many options available but only one or two will be selected.</p>\n<p>Here is example HTML code for a form with one drop down box \u2212</p>\n<pre class=\"prettyprint notranslate\">\n&lt;form action = \"/cgi-bin/dropdown.py\" method = \"post\" target = \"_blank\"&gt;\n&lt;select name = \"dropdown\"&gt;\n&lt;option value = \"Maths\" selected&gt;Maths&lt;/option&gt;\n&lt;option value = \"Physics\"&gt;Physics&lt;/option&gt;\n&lt;/select&gt;\n&lt;input type = \"submit\" value = \"Submit\"/&gt;\n&lt;/form&gt;\n</pre>\n<p>The result of this code is the following form \u2212</p>\n<form action=\"/cgi-bin/dropdown.py\" method=\"post\" target=\"_blank\">\n<select name=\"dropdown\">\n<option selected=\"selected\" value=\"Maths\">Maths</option>\n<option value=\"Physics\">Physics</option>\n</select>\n<input type=\"submit\" value=\"Submit\"/>\n</form>\n<p>Below is dropdown.py script to handle input given by web browser.</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\n# Import modules for CGI handling \nimport cgi, cgitb \n\n# Create instance of FieldStorage \nform = cgi.FieldStorage() \n\n# Get data from fields\nif form.getvalue('dropdown'):\n   subject = form.getvalue('dropdown')\nelse:\n   subject = \"Not entered\"\n\nprint \"Content-type:text/html\\r\\n\\r\\n\"\nprint \"&lt;html&gt;\"\nprint \"&lt;head&gt;\"\nprint \"&lt;title&gt;Dropdown Box - Sixth CGI Program&lt;/title&gt;\"\nprint \"&lt;/head&gt;\"\nprint \"&lt;body&gt;\"\nprint \"&lt;h2&gt; Selected Subject is %s&lt;/h2&gt;\" % subject\nprint \"&lt;/body&gt;\"\nprint \"&lt;/html&gt;\"\n</pre>\n<h2>Using Cookies in CGI</h2>\n<p>HTTP protocol is a stateless protocol. For a commercial website, it is required to maintain session information  among different pages. For example, one user registration ends after completing many pages. How to maintain user's session information across all the web pages?</p>\n<p>In many situations, using cookies is the most efficient method of remembering and tracking preferences, purchases, commissions, and other information required for better visitor experience or site statistics.</p>\n<h2>How It Works?</h2>\n<p>Your server sends some data to the visitor's browser in the form of a cookie. The browser may accept the cookie. If it does, it is stored as a plain text record on the visitor's hard drive. Now, when the visitor arrives at another page on your site, the cookie is available for retrieval. Once retrieved, your server knows/remembers what was stored.</p>\n<p>Cookies are a plain text data record of 5 variable-length fields \u2212</p>\n<ul class=\"list\">\n<li><p><b>Expires</b> \u2212 The date the cookie will expire. If this is blank, the cookie will expire when the visitor quits the browser.</p></li>\n<li><p><b>Domain</b> \u2212 The domain name of your site.</p></li>\n<li><p><b>Path</b> \u2212 The path to the directory or web page that sets the cookie. This may be blank if you want to retrieve the cookie from any directory or page.</p></li>\n<li><p><b>Secure</b> \u2212 If this field contains the word \"secure\", then the cookie may only be retrieved with a secure server. If this field is blank, no such restriction exists.</p></li>\n<li><p><b>Name=Value</b> \u2212 Cookies are set and retrieved in the form of key and value pairs.</p></li>\n</ul>\n<h2>Setting up Cookies</h2>\n<p>It is very easy to send cookies to browser. These cookies are sent along with HTTP Header before to Content-type field. Assuming you want to set UserID and Password as cookies. Setting the cookies is done as follows \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nprint \"Set-Cookie:UserID = XYZ;\\r\\n\"\nprint \"Set-Cookie:Password = XYZ123;\\r\\n\"\nprint \"Set-Cookie:Expires = Tuesday, 31-Dec-2007 23:12:40 GMT\";\\r\\n\"\nprint \"Set-Cookie:Domain = www.tutorialspoint.com;\\r\\n\"\nprint \"Set-Cookie:Path = /perl;\\n\"\nprint \"Content-type:text/html\\r\\n\\r\\n\"\n...........Rest of the HTML Content....\n</pre>\n<p>From this example, you must have understood how to set cookies. We use <b>Set-Cookie</b> HTTP header to set cookies.</p>\n<p>It is optional to set cookies attributes like Expires, Domain, and Path. It is notable that cookies are set before sending magic line <b>\"Content-type:text/html\\r\\n\\r\\n</b>.</p>\n<h2>Retrieving Cookies</h2>\n<p>It is very easy to retrieve all the set cookies. Cookies are stored in CGI environment variable HTTP_COOKIE and they will have following form \u2212</p>\n<pre class=\"result notranslate\">\nkey1 = value1;key2 = value2;key3 = value3....\n</pre>\n<p>Here is an example of how to retrieve cookies.</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\n# Import modules for CGI handling \nfrom os import environ\nimport cgi, cgitb\n\nif environ.has_key('HTTP_COOKIE'):\n   for cookie in map(strip, split(environ['HTTP_COOKIE'], ';')):\n      (key, value ) = split(cookie, '=');\n      if key == \"UserID\":\n         user_id = value\n\n      if key == \"Password\":\n         password = value\n\nprint \"User ID  = %s\" % user_id\nprint \"Password = %s\" % password\n</pre>\n<p>This produces the following result for the cookies set by above script \u2212</p>\n<pre class=\"result notranslate\">\nUser ID = XYZ\nPassword = XYZ123\n</pre>\n<h2>File Upload Example</h2>\n<p>To upload a file, the HTML form must have the enctype attribute set to <b>multipart/form-data</b>. The input tag with the file type creates a \"Browse\" button.</p>\n<pre class=\"prettyprint notranslate\">\n&lt;html&gt;\n&lt;body&gt;\n   &lt;form enctype = \"multipart/form-data\" \n                     action = \"save_file.py\" method = \"post\"&gt;\n   &lt;p&gt;File: &lt;input type = \"file\" name = \"filename\" /&gt;&lt;/p&gt;\n   &lt;p&gt;&lt;input type = \"submit\" value = \"Upload\" /&gt;&lt;/p&gt;\n   &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>The result of this code is the following form \u2212</p>\n<form action=\"save_file.py\" enctype=\"multipart/form-data\" method=\"post\">\n<p>File: <input name=\"filename\" type=\"file\"/></p>\n<p><input type=\"reset\" value=\"Upload\"/></p>\n</form>\n<p>Above example has been disabled intentionally to save people uploading file on our server, but you can try above code with your server.</p>\n<p>Here is the script <b>save_file.py</b> to handle file upload \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nimport cgi, os\nimport cgitb; cgitb.enable()\n\nform = cgi.FieldStorage()\n\n# Get filename here.\nfileitem = form['filename']\n\n# Test if the file was uploaded\nif fileitem.filename:\n   # strip leading path from file name to avoid \n   # directory traversal attacks\n   fn = os.path.basename(fileitem.filename)\n   open('/tmp/' + fn, 'wb').write(fileitem.file.read())\n\n   message = 'The file \"' + fn + '\" was uploaded successfully'\n   \nelse:\n   message = 'No file was uploaded'\n   \nprint \"\"\"\\\nContent-Type: text/html\\n\n&lt;html&gt;\n&lt;body&gt;\n   &lt;p&gt;%s&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\"\"\" % (message,)\n</pre>\n<p>If you run the above script on Unix/Linux, then you need to take care of replacing  file separator as follows, otherwise on your windows machine above open() statement should work fine.</p>\n<pre class=\"result notranslate\">\nfn = os.path.basename(fileitem.filename.replace(\"\\\\\", \"/\" ))\n</pre>\n<h2>How To Raise a \"File Download\" Dialog Box?</h2>\n<p>Sometimes, it is desired that you want to give option where a user can click a link and it will pop up a \"File Download\" dialogue box to the user instead of displaying actual content. This is very easy and can be achieved through HTTP header. This HTTP header is be different from the header mentioned in previous section.</p>\n<p>For example, if you want make a <b>FileName</b> file downloadable from a given link, then its syntax is as follows \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\n# HTTP Header\nprint \"<b>Content-Type:</b>application/octet-stream; name = \\\"FileName\\\"\\r\\n\";\nprint \"<b>Content-Disposition:</b> attachment; filename = \\\"FileName\\\"\\r\\n\\n\";\n\n# Actual File Content will go here.\nfo = open(\"foo.txt\", \"rb\")\n\nstr = fo.read();\nprint str\n\n# Close opend file\nfo.close()\n</pre>\n<p>Hope you enjoyed this tutorial. If yes, please send me your feedback at: <a href=\"/about/contact_us.htm\">Contact Us</a></p>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_reg_expressions.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_database_access.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</img></div>\n</div>\n<div class=\"row\">\n<div class=\"col-md-3\" id=\"rightbar\">\n<div class=\"simple-ad\">\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.facebook.com/sharer.php?u=' + 'https://www.tutorialspoint.com/python/python_cgi_programming.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/facebookIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://twitter.com/share?url=' + 'https://www.tutorialspoint.com/python/python_cgi_programming.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/twitterIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'https://www.tutorialspoint.com/python/python_cgi_programming.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/linkedinIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=https://www.tutorialspoint.com/python/python_cgi_programming.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/googlePlusIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.stumbleupon.com/submit?url=https://www.tutorialspoint.com/python/python_cgi_programming.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/StumbleUponIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://reddit.com/submit?url=https://www.tutorialspoint.com/python/python_cgi_programming.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/reddit.jpg\"/>\n</a>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\ngoogle_ad_format = \"300x250_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 600;\ngoogle_ad_format = \"300x600_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"ca-pub-2537027957187252\";\n/* Right Side Ad */\ngoogle_ad_slot = \"right_side_ad\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\n//-->\n</script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"footer-copyright\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-1\">\n<a class=\"logo\" href=\"index.htm\"> <img alt=\"Tutorials Point\" class=\"img-responsive\" src=\"/scripts/img/logo-footer.png\"/> </a>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<nav id=\"sub-menu\">\n<ul>\n<li><a href=\"/about/about_privacy.htm\">Privacy Policy</a></li>\n<li><a href=\"/about/about_cookies.htm\">Cookies Policy</a></li>\n<li><a href=\"/about/contact_us.htm\">Contact</a></li>\n</ul>\n</nav>\n</div>\n<div class=\"col-md-3 col-sm-12 col-xs-12\">\n<p>\u00a9 Copyright 2019. All Rights Reserved.</p>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<div class=\"news-group\">\n<input autocomplete=\"off\" class=\"form-control-foot search\" id=\"textemail\" name=\"textemail\" onblur=\"if (this.value == '') {this.value = 'Enter email for newsletter...';}\" onfocus=\"if (this.value == 'Enter email for newsletter...') {this.value = '';}\" placeholder=\"Enter email for newsletter\" type=\"text\"/>\n<span class=\"input-group-btn\"> <button class=\"btn btn-default btn-footer\" id=\"btnemail\" onclick=\"javascript:void(0);\" type=\"submit\">go</button> </span>\n<div id=\"newsresponse\"></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"privacy-banner\">\n<div>\n<p>\n      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.\n      <a href=\"javascript:void(0)\" id=\"banner-accept\">Accept</a>\n<a href=\"/about/about_cookies.htm\" id=\"banner-learn\" target=\"_blank\">Learn more</a>\n</p>\n</div>\n</div>\n<script>\n// Banner Trigger if Not Closed\nif (!localStorage.bannerClosed) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n} else {\n  document.getElementById('privacy-banner').style.display = \"none\";\n}\ndocument.getElementById('banner-accept').addEventListener('click', function() {\n  document.getElementById('privacy-banner').style.display = \"none\";\n  localStorage.bannerClosed = 'true';\n});\nif (navigator.userAgent.match(/Opera|OPR\\//)) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n}\n</script>\n<!-- Libs -->\n<script src=\"/theme/js/custom-min.js?v=7\"></script>\n<script src=\"https://www.google-analytics.com/urchin.js\">\n</script>\n<script>\n_uacct = \"UA-232293-6\";\nurchinTracker();\n$('.pg-icon').click(function(){\n   $('.wrapLoader').show();\n});\n</script>\n<script src=\"/theme/js/jquery.colorbox-min.js\"></script>\n<script>\n   var tryit = new $.TryIt('/python/try_python.php');\n   tryit.compile();\n</script>\n\n\n", "title": "Python - CGI Programming", "content_html": "<div class=\"col-md-7 middle-col\">\n<h1>Python - CGI Programming</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_reg_expressions.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_database_access.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>The Common Gateway Interface, or CGI, is a set of standards that define how information is exchanged between the web server and a custom script. The CGI specs are currently maintained by the NCSA.</p>\n<h2>What is CGI?</h2>\n<ul class=\"list\">\n<li><p>The Common Gateway Interface, or CGI, is a standard for external gateway programs to interface with information servers such as HTTP servers.</p></li>\n<li><p>The current version is CGI/1.1 and CGI/1.2 is under progress.</p></li>\n</ul>\n<h2>Web Browsing</h2>\n<p>To understand the concept of CGI, let us see what happens when we click a hyper link to browse a particular web page or URL.</p>\n<ul class=\"list\">\n<li><p>Your browser contacts the HTTP web server and demands for the URL, i.e., filename.</p></li>\n<li><p>Web Server parses the URL and looks for the filename. If it finds that file then sends it back to the browser, otherwise sends an error message indicating that you requested a wrong file.</p></li>\n<li><p>Web browser takes response from web server and displays either the received file or error message.</p></li>\n</ul>\n<p>However, it is possible to set up the HTTP server so that whenever a file in a certain directory is requested that file is not sent back; instead it is executed as a program, and whatever that program outputs is sent back for your browser to display. This function is called the Common Gateway Interface or CGI and the programs are called CGI scripts. These CGI programs can be a Python Script, PERL Script, Shell Script, C or C++ program, etc.</p>\n<h2>CGI Architecture Diagram</h2>\n<img alt=\"CGI Architecture\" src=\"/python/images/cgiarch.gif\">\n<h2>Web Server Support and Configuration</h2>\n<p>Before you proceed with CGI Programming, make sure that your Web Server supports CGI and it is configured to handle CGI Programs. All the CGI Programs to be executed by the HTTP server are kept in a pre-configured directory. This directory is called CGI Directory and by convention it is named as /var/www/cgi-bin. By convention, CGI files have extension as. <b>cgi,</b> but you can keep your files with python extension <b>.py</b> as well.</p>\n<p>By default, the Linux server is configured to run only the scripts in the cgi-bin directory in /var/www. If you want to specify any other directory to run your CGI scripts, comment the following lines in the httpd.conf file \u2212</p>\n<pre class=\"prettyprint notranslate\">\n&lt;Directory \"/var/www/cgi-bin\"&gt;\n   AllowOverride None\n   Options ExecCGI\n   Order allow,deny\n   Allow from all\n&lt;/Directory&gt;\n\n&lt;Directory \"/var/www/cgi-bin\"&gt;\nOptions All\n&lt;/Directory&gt;\n</pre>\n<p>Here, we assume that you have Web Server up and running successfully and you are able to run any other CGI program like Perl or Shell, etc.</p>\n<h2>First CGI Program</h2>\n<p>Here is a simple link, which is linked to a CGI script called <a href=\"/cgi-bin/hello.py\" target=\"_blank\">hello.py</a>. This file is kept in /var/www/cgi-bin directory and it has following content. Before running your CGI program, make sure you have change mode of file using <b>chmod 755 hello.py</b> UNIX command to make file executable.</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nprint \"Content-type:text/html\\r\\n\\r\\n\"\nprint '&lt;html&gt;'\nprint '&lt;head&gt;'\nprint '&lt;title&gt;Hello Word - First CGI Program&lt;/title&gt;'\nprint '&lt;/head&gt;'\nprint '&lt;body&gt;'\nprint '&lt;h2&gt;Hello Word! This is my first CGI program&lt;/h2&gt;'\nprint '&lt;/body&gt;'\nprint '&lt;/html&gt;'\n</pre>\n<p>If you click hello.py, then this produces the following output \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<td>\n<h2>Hello Word! This is my first CGI program</h2>\n</td>\n</tr>\n</table>\n<p>This hello.py script is a simple Python script, which writes its output on STDOUT file, i.e., screen. There is one important and extra feature available which is first line to be printed <b>Content-type:text/html\\r\\n\\r\\n</b>. This line is sent back to the browser and it specifies the content type to be displayed on the browser screen.</p>\n<p>By now you must have understood basic concept of CGI and you can write many complicated CGI programs using Python. This script can interact with any other external system also to exchange information such as RDBMS.</p>\n<h2>HTTP Header</h2>\n<p>The line <b>Content-type:text/html\\r\\n\\r\\n</b> is part of HTTP header which is sent to the browser to understand the content. All the HTTP header will be in the following form \u2212</p>\n<pre class=\"result notranslate\">\nHTTP Field Name: Field Content\n\nFor Example\nContent-type: text/html\\r\\n\\r\\n\n</pre>\n<p>There are few other important HTTP headers, which you will use frequently in your CGI Programming.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\">Sr.No.</th>\n<th style=\"text-align:center;\">Header &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>Content-type:</b></p>\n<p>A MIME string defining the format of the file being returned. Example is Content-type:text/html</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>Expires: Date</b></p>\n<p>The date the information becomes invalid. It is used by the browser to decide when a page needs to be refreshed. A valid date string is in the format 01 Jan 1998 12:00:00 GMT.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>Location: URL</b></p>\n<p>The URL that is returned instead of the URL requested. You can use this field to redirect a request to any file.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>Last-modified: Date</b></p>\n<p>The date of last modification of the resource.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>Content-length: N</b></p>\n<p>The length, in bytes, of the data being returned. The browser uses this value to report the estimated download time for a file.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><p><b>Set-Cookie: String</b></p>\n<p>Set the cookie passed through the <i>string</i></p></td>\n</tr>\n</table>\n<h2>CGI Environment Variables</h2>\n<p>All the CGI programs have access to the following environment variables. These variables play an important role while writing any CGI program.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;width:10%;\">Sr.No.</th>\n<th style=\"text-align:center;\">Variable Name &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>CONTENT_TYPE</b></p>\n<p>The data type of the content. Used when the client is sending attached content to the server. For example, file upload.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>CONTENT_LENGTH</b></p>\n<p>The length of the query information. It is available only for POST requests.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>HTTP_COOKIE</b></p>\n<p>Returns the set cookies in the form of key &amp; value pair.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>HTTP_USER_AGENT</b></p>\n<p>The User-Agent request-header field contains information about the user agent originating the request. It is name of the web browser.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>PATH_INFO</b></p>\n<p>The path for the CGI script.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><p><b>QUERY_STRING</b></p>\n<p>The URL-encoded information that is sent with GET method request.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">7</td>\n<td><p><b>REMOTE_ADDR</b></p>\n<p>The IP address of the remote host making the request. This is useful logging or for authentication.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">8</td>\n<td><p><b>REMOTE_HOST</b></p>\n<p>The fully qualified name of the host making the request. If this information is not available, then REMOTE_ADDR can be used to get IR address.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">9</td>\n<td><p><b>REQUEST_METHOD</b></p>\n<p>The method used to make the request. The most common methods are GET and POST.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">10</td>\n<td><p><b>SCRIPT_FILENAME</b></p>\n<p>The full path to the CGI script.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">11</td>\n<td><p><b>SCRIPT_NAME</b></p>\n<p>The name of the CGI script.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">12</td>\n<td><p><b>SERVER_NAME</b></p>\n<p>The server's hostname or IP Address</p></td>\n</tr>\n<tr>\n<td class=\"ts\">13</td>\n<td><p><b>SERVER_SOFTWARE</b></p>\n<p>The name and version of the software the server is running.</p></td>\n</tr>\n</table>\n<p>Here is small CGI program to list out all the CGI variables. Click this link to see the result <a href=\"http://www.tutorialspoint.com/cgi-bin/get_env.py\" target=\"_blank\">Get Environment</a></p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nimport os\n\nprint \"Content-type: text/html\\r\\n\\r\\n\";\nprint \"&lt;font size=+1&gt;Environment&lt;/font&gt;&lt;\\br&gt;\";\nfor param in os.environ.keys():\n   print \"&lt;b&gt;%20s&lt;/b&gt;: %s&lt;\\br&gt;\" % (param, os.environ[param])\n</pre>\n<h2>GET and POST Methods</h2>\n<p>You must have come across many situations when you need to pass some information from your browser to web server and ultimately to your CGI Program. Most frequently, browser uses two methods two pass this information to web server. These methods are GET Method and POST Method.</p>\n<h2>Passing Information using GET method</h2>\n<p>The GET method sends the encoded user information appended to the page request. The page and the encoded information are separated by the ? character as follows \u2212</p>\n<pre class=\"result notranslate\">\nhttp://www.test.com/cgi-bin/hello.py?key1=value1&amp;key2=value2\n</pre>\n<p>The GET method is the default method to pass information from browser to web server and it produces a long string that appears in your browser's Location:box. Never use GET method if you have password or other sensitive information to pass to the server. The GET method has size limitation: only 1024 characters can be sent in a request string. The GET method sends information using QUERY_STRING header and will be accessible in your CGI Program through QUERY_STRING environment variable.</p>\n<p>You can pass information by simply concatenating key and value pairs along with any URL or you can use HTML &lt;FORM&gt; tags to pass information using GET method.</p>\n<h2>Simple URL Example:Get Method</h2>\n<p>Here is a simple URL, which passes two values to hello_get.py program using GET method.</p>\n<a href=\"/cgi-bin/hello_get.py?first_name=ZARA&amp;last_name=ALI\" style=\"text-decoration:none;\" target=\"_blank\">/cgi-bin/hello_get.py?first_name=ZARA&amp;last_name=ALI</a>\n<p>Below is <b>hello_get.py</b> script to handle input given by web browser. We are going to use <b>cgi</b> module, which makes it very easy to access passed information \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\n# Import modules for CGI handling \nimport cgi, cgitb \n\n# Create instance of FieldStorage \nform = cgi.FieldStorage() \n\n# Get data from fields\nfirst_name = form.getvalue('first_name')\nlast_name  = form.getvalue('last_name')\n\nprint \"Content-type:text/html\\r\\n\\r\\n\"\nprint \"&lt;html&gt;\"\nprint \"&lt;head&gt;\"\nprint \"&lt;title&gt;Hello - Second CGI Program&lt;/title&gt;\"\nprint \"&lt;/head&gt;\"\nprint \"&lt;body&gt;\"\nprint \"&lt;h2&gt;Hello %s %s&lt;/h2&gt;\" % (first_name, last_name)\nprint \"&lt;/body&gt;\"\nprint \"&lt;/html&gt;\"\n</pre>\n<p>This would generate the following result \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<td>\n<h2>Hello ZARA ALI</h2>\n</td>\n</tr>\n</table>\n<h2>Simple FORM Example:GET Method</h2>\n<p>This example passes two values using HTML FORM and submit button. We use same CGI script hello_get.py to handle this input.</p>\n<pre class=\"prettyprint notranslate\">\n&lt;form action = \"/cgi-bin/hello_get.py\" method = \"get\"&gt;\nFirst Name: &lt;input type = \"text\" name = \"first_name\"&gt;  &lt;br /&gt;\n\nLast Name: &lt;input type = \"text\" name = \"last_name\" /&gt;\n&lt;input type = \"submit\" value = \"Submit\" /&gt;\n&lt;/form&gt;\n</pre>\n<p>Here is the actual output of the above form, you enter First and Last Name and then click submit button to see the result.</p>\n<form action=\"/cgi-bin/hello_get.py\" method=\"get\" target=\"_blank\">\nFirst Name: <input name=\"first_name\" type=\"text\"><br/>\n\nLast Name: <input name=\"last_name\" type=\"text\"/>\n<input type=\"submit\" value=\"Submit\"/></input></form>\n<h2>Passing Information Using POST Method</h2>\n<p>A generally more reliable method  of passing information to a CGI program is the POST method. This packages the information in exactly the same way as GET methods, but instead of sending it as a text string after a ? in the URL it sends it as a separate message. This message comes into the CGI script in the form of the standard input.</p>\n<p>Below is same hello_get.py script which handles GET as well as POST method.</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\n# Import modules for CGI handling \nimport cgi, cgitb \n\n# Create instance of FieldStorage \nform = cgi.FieldStorage() \n\n# Get data from fields\nfirst_name = form.getvalue('first_name')\nlast_name  = form.getvalue('last_name')\n\nprint \"Content-type:text/html\\r\\n\\r\\n\"\nprint \"&lt;html&gt;\"\nprint \"&lt;head&gt;\"\nprint \"&lt;title&gt;Hello - Second CGI Program&lt;/title&gt;\"\nprint \"&lt;/head&gt;\"\nprint \"&lt;body&gt;\"\nprint \"&lt;h2&gt;Hello %s %s&lt;/h2&gt;\" % (first_name, last_name)\nprint \"&lt;/body&gt;\"\nprint \"&lt;/html&gt;\"\n</pre>\n<p>Let us take again same example as above which passes two values using HTML FORM and submit button. We use same CGI script hello_get.py to handle this input.</p>\n<pre class=\"prettyprint notranslate\">\n&lt;form action = \"/cgi-bin/hello_get.py\" method = \"post\"&gt;\nFirst Name: &lt;input type = \"text\" name = \"first_name\"&gt;&lt;br /&gt;\nLast Name: &lt;input type = \"text\" name = \"last_name\" /&gt;\n\n&lt;input type = \"submit\" value = \"Submit\" /&gt;\n&lt;/form&gt;\n</pre>\n<p>Here is the actual output of the above form. You enter First and Last Name and then click submit button to see the result.</p>\n<form action=\"/cgi-bin/hello_get.py\" method=\"post\" target=\"_blank\">\nFirst Name: <input name=\"first_name\" type=\"text\"/><br/>\n\nLast Name: <input name=\"last_name\" type=\"text\"/>\n<input type=\"submit\" value=\"Submit\"/>\n</form>\n<h2>Passing Checkbox Data to CGI Program</h2>\n<p>Checkboxes are used when more than one option is required to be selected.</p>\n<p>Here is example HTML code for a form with two checkboxes \u2212</p>\n<pre class=\"prettyprint notranslate\">\n&lt;form action = \"/cgi-bin/checkbox.cgi\" method = \"POST\" target = \"_blank\"&gt;\n&lt;input type = \"checkbox\" name = \"maths\" value = \"on\" /&gt; Maths\n&lt;input type = \"checkbox\" name = \"physics\" value = \"on\" /&gt; Physics\n&lt;input type = \"submit\" value = \"Select Subject\" /&gt;\n&lt;/form&gt;\n</pre>\n<p>The result of this code is the following form \u2212</p>\n<form action=\"/cgi-bin/checkbox.py\" method=\"post\" target=\"_blank\">\n<input name=\"maths\" type=\"checkbox\" value=\"on\"/> Maths\n<input name=\"physics\" type=\"checkbox\" value=\"on\"/> Physics\n<input type=\"submit\" value=\"Select Subject\"/>\n</form>\n<p>Below is checkbox.cgi script to handle input given by web browser for checkbox button.</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\n# Import modules for CGI handling \nimport cgi, cgitb \n\n# Create instance of FieldStorage \nform = cgi.FieldStorage() \n\n# Get data from fields\nif form.getvalue('maths'):\n   math_flag = \"ON\"\nelse:\n   math_flag = \"OFF\"\n\nif form.getvalue('physics'):\n   physics_flag = \"ON\"\nelse:\n   physics_flag = \"OFF\"\n\nprint \"Content-type:text/html\\r\\n\\r\\n\"\nprint \"&lt;html&gt;\"\nprint \"&lt;head&gt;\"\nprint \"&lt;title&gt;Checkbox - Third CGI Program&lt;/title&gt;\"\nprint \"&lt;/head&gt;\"\nprint \"&lt;body&gt;\"\nprint \"&lt;h2&gt; CheckBox Maths is : %s&lt;/h2&gt;\" % math_flag\nprint \"&lt;h2&gt; CheckBox Physics is : %s&lt;/h2&gt;\" % physics_flag\nprint \"&lt;/body&gt;\"\nprint \"&lt;/html&gt;\"\n</pre>\n<h2>Passing Radio Button Data to CGI Program</h2>\n<p>Radio Buttons are used when only one option is required to be selected.</p>\n<p>Here is example HTML code for a form with two radio buttons \u2212</p>\n<pre class=\"prettyprint notranslate\">\n&lt;form action = \"/cgi-bin/radiobutton.py\" method = \"post\" target = \"_blank\"&gt;\n&lt;input type = \"radio\" name = \"subject\" value = \"maths\" /&gt; Maths\n&lt;input type = \"radio\" name = \"subject\" value = \"physics\" /&gt; Physics\n&lt;input type = \"submit\" value = \"Select Subject\" /&gt;\n&lt;/form&gt;\n</pre>\n<p>The result of this code is the following form \u2212</p>\n<form action=\"/cgi-bin/radiobutton.py\" method=\"post\" target=\"_blank\">\n<input name=\"subject\" type=\"radio\" value=\"Maths\"/> Maths\n<input name=\"subject\" type=\"radio\" value=\"Physics\"/> Physics\n<input type=\"submit\" value=\"Select Subject\"/>\n</form>\n<p>Below is radiobutton.py script to handle input given by web browser for radio button \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\n# Import modules for CGI handling \nimport cgi, cgitb \n\n# Create instance of FieldStorage \nform = cgi.FieldStorage() \n\n# Get data from fields\nif form.getvalue('subject'):\n   subject = form.getvalue('subject')\nelse:\n   subject = \"Not set\"\n\nprint \"Content-type:text/html\\r\\n\\r\\n\"\nprint \"&lt;html&gt;\"\nprint \"&lt;head&gt;\"\nprint \"&lt;title&gt;Radio - Fourth CGI Program&lt;/title&gt;\"\nprint \"&lt;/head&gt;\"\nprint \"&lt;body&gt;\"\nprint \"&lt;h2&gt; Selected Subject is %s&lt;/h2&gt;\" % subject\nprint \"&lt;/body&gt;\"\nprint \"&lt;/html&gt;\"\n</pre>\n<h2>Passing Text Area Data to CGI Program</h2>\n<p>TEXTAREA element is used when multiline text has to be passed to the CGI Program.</p>\n<p>Here is example HTML code for a form with a TEXTAREA box \u2212</p>\n<pre class=\"prettyprint notranslate\">\n&lt;form action = \"/cgi-bin/textarea.py\" method = \"post\" target = \"_blank\"&gt;\n&lt;textarea name = \"textcontent\" cols = \"40\" rows = \"4\"&gt;\nType your text here...\n&lt;/textarea&gt;\n&lt;input type = \"submit\" value = \"Submit\" /&gt;\n&lt;/form&gt;\n</pre>\n<p>The result of this code is the following form \u2212</p>\n<form action=\"/cgi-bin/textarea.py\" method=\"post\" target=\"_blank\">\n<textarea cols=\"40\" name=\"textcontent\" rows=\"4\">Type your text here...</textarea>\n<input type=\"submit\" value=\"Submit\"/>\n</form>\n<p>Below is textarea.cgi script to handle input given by web browser \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\n# Import modules for CGI handling \nimport cgi, cgitb \n\n# Create instance of FieldStorage \nform = cgi.FieldStorage() \n\n# Get data from fields\nif form.getvalue('textcontent'):\n   text_content = form.getvalue('textcontent')\nelse:\n   text_content = \"Not entered\"\n\nprint \"Content-type:text/html\\r\\n\\r\\n\"\nprint \"&lt;html&gt;\"\nprint \"&lt;head&gt;\";\nprint \"&lt;title&gt;Text Area - Fifth CGI Program&lt;/title&gt;\"\nprint \"&lt;/head&gt;\"\nprint \"&lt;body&gt;\"\nprint \"&lt;h2&gt; Entered Text Content is %s&lt;/h2&gt;\" % text_content\nprint \"&lt;/body&gt;\"\n</pre>\n<h2>Passing Drop Down Box Data to CGI Program</h2>\n<p>Drop Down Box is used when we have many options available but only one or two will be selected.</p>\n<p>Here is example HTML code for a form with one drop down box \u2212</p>\n<pre class=\"prettyprint notranslate\">\n&lt;form action = \"/cgi-bin/dropdown.py\" method = \"post\" target = \"_blank\"&gt;\n&lt;select name = \"dropdown\"&gt;\n&lt;option value = \"Maths\" selected&gt;Maths&lt;/option&gt;\n&lt;option value = \"Physics\"&gt;Physics&lt;/option&gt;\n&lt;/select&gt;\n&lt;input type = \"submit\" value = \"Submit\"/&gt;\n&lt;/form&gt;\n</pre>\n<p>The result of this code is the following form \u2212</p>\n<form action=\"/cgi-bin/dropdown.py\" method=\"post\" target=\"_blank\">\n<select name=\"dropdown\">\n<option selected=\"selected\" value=\"Maths\">Maths</option>\n<option value=\"Physics\">Physics</option>\n</select>\n<input type=\"submit\" value=\"Submit\"/>\n</form>\n<p>Below is dropdown.py script to handle input given by web browser.</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\n# Import modules for CGI handling \nimport cgi, cgitb \n\n# Create instance of FieldStorage \nform = cgi.FieldStorage() \n\n# Get data from fields\nif form.getvalue('dropdown'):\n   subject = form.getvalue('dropdown')\nelse:\n   subject = \"Not entered\"\n\nprint \"Content-type:text/html\\r\\n\\r\\n\"\nprint \"&lt;html&gt;\"\nprint \"&lt;head&gt;\"\nprint \"&lt;title&gt;Dropdown Box - Sixth CGI Program&lt;/title&gt;\"\nprint \"&lt;/head&gt;\"\nprint \"&lt;body&gt;\"\nprint \"&lt;h2&gt; Selected Subject is %s&lt;/h2&gt;\" % subject\nprint \"&lt;/body&gt;\"\nprint \"&lt;/html&gt;\"\n</pre>\n<h2>Using Cookies in CGI</h2>\n<p>HTTP protocol is a stateless protocol. For a commercial website, it is required to maintain session information  among different pages. For example, one user registration ends after completing many pages. How to maintain user's session information across all the web pages?</p>\n<p>In many situations, using cookies is the most efficient method of remembering and tracking preferences, purchases, commissions, and other information required for better visitor experience or site statistics.</p>\n<h2>How It Works?</h2>\n<p>Your server sends some data to the visitor's browser in the form of a cookie. The browser may accept the cookie. If it does, it is stored as a plain text record on the visitor's hard drive. Now, when the visitor arrives at another page on your site, the cookie is available for retrieval. Once retrieved, your server knows/remembers what was stored.</p>\n<p>Cookies are a plain text data record of 5 variable-length fields \u2212</p>\n<ul class=\"list\">\n<li><p><b>Expires</b> \u2212 The date the cookie will expire. If this is blank, the cookie will expire when the visitor quits the browser.</p></li>\n<li><p><b>Domain</b> \u2212 The domain name of your site.</p></li>\n<li><p><b>Path</b> \u2212 The path to the directory or web page that sets the cookie. This may be blank if you want to retrieve the cookie from any directory or page.</p></li>\n<li><p><b>Secure</b> \u2212 If this field contains the word \"secure\", then the cookie may only be retrieved with a secure server. If this field is blank, no such restriction exists.</p></li>\n<li><p><b>Name=Value</b> \u2212 Cookies are set and retrieved in the form of key and value pairs.</p></li>\n</ul>\n<h2>Setting up Cookies</h2>\n<p>It is very easy to send cookies to browser. These cookies are sent along with HTTP Header before to Content-type field. Assuming you want to set UserID and Password as cookies. Setting the cookies is done as follows \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nprint \"Set-Cookie:UserID = XYZ;\\r\\n\"\nprint \"Set-Cookie:Password = XYZ123;\\r\\n\"\nprint \"Set-Cookie:Expires = Tuesday, 31-Dec-2007 23:12:40 GMT\";\\r\\n\"\nprint \"Set-Cookie:Domain = www.tutorialspoint.com;\\r\\n\"\nprint \"Set-Cookie:Path = /perl;\\n\"\nprint \"Content-type:text/html\\r\\n\\r\\n\"\n...........Rest of the HTML Content....\n</pre>\n<p>From this example, you must have understood how to set cookies. We use <b>Set-Cookie</b> HTTP header to set cookies.</p>\n<p>It is optional to set cookies attributes like Expires, Domain, and Path. It is notable that cookies are set before sending magic line <b>\"Content-type:text/html\\r\\n\\r\\n</b>.</p>\n<h2>Retrieving Cookies</h2>\n<p>It is very easy to retrieve all the set cookies. Cookies are stored in CGI environment variable HTTP_COOKIE and they will have following form \u2212</p>\n<pre class=\"result notranslate\">\nkey1 = value1;key2 = value2;key3 = value3....\n</pre>\n<p>Here is an example of how to retrieve cookies.</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\n# Import modules for CGI handling \nfrom os import environ\nimport cgi, cgitb\n\nif environ.has_key('HTTP_COOKIE'):\n   for cookie in map(strip, split(environ['HTTP_COOKIE'], ';')):\n      (key, value ) = split(cookie, '=');\n      if key == \"UserID\":\n         user_id = value\n\n      if key == \"Password\":\n         password = value\n\nprint \"User ID  = %s\" % user_id\nprint \"Password = %s\" % password\n</pre>\n<p>This produces the following result for the cookies set by above script \u2212</p>\n<pre class=\"result notranslate\">\nUser ID = XYZ\nPassword = XYZ123\n</pre>\n<h2>File Upload Example</h2>\n<p>To upload a file, the HTML form must have the enctype attribute set to <b>multipart/form-data</b>. The input tag with the file type creates a \"Browse\" button.</p>\n<pre class=\"prettyprint notranslate\">\n&lt;html&gt;\n&lt;body&gt;\n   &lt;form enctype = \"multipart/form-data\" \n                     action = \"save_file.py\" method = \"post\"&gt;\n   &lt;p&gt;File: &lt;input type = \"file\" name = \"filename\" /&gt;&lt;/p&gt;\n   &lt;p&gt;&lt;input type = \"submit\" value = \"Upload\" /&gt;&lt;/p&gt;\n   &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>The result of this code is the following form \u2212</p>\n<form action=\"save_file.py\" enctype=\"multipart/form-data\" method=\"post\">\n<p>File: <input name=\"filename\" type=\"file\"/></p>\n<p><input type=\"reset\" value=\"Upload\"/></p>\n</form>\n<p>Above example has been disabled intentionally to save people uploading file on our server, but you can try above code with your server.</p>\n<p>Here is the script <b>save_file.py</b> to handle file upload \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nimport cgi, os\nimport cgitb; cgitb.enable()\n\nform = cgi.FieldStorage()\n\n# Get filename here.\nfileitem = form['filename']\n\n# Test if the file was uploaded\nif fileitem.filename:\n   # strip leading path from file name to avoid \n   # directory traversal attacks\n   fn = os.path.basename(fileitem.filename)\n   open('/tmp/' + fn, 'wb').write(fileitem.file.read())\n\n   message = 'The file \"' + fn + '\" was uploaded successfully'\n   \nelse:\n   message = 'No file was uploaded'\n   \nprint \"\"\"\\\nContent-Type: text/html\\n\n&lt;html&gt;\n&lt;body&gt;\n   &lt;p&gt;%s&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\"\"\" % (message,)\n</pre>\n<p>If you run the above script on Unix/Linux, then you need to take care of replacing  file separator as follows, otherwise on your windows machine above open() statement should work fine.</p>\n<pre class=\"result notranslate\">\nfn = os.path.basename(fileitem.filename.replace(\"\\\\\", \"/\" ))\n</pre>\n<h2>How To Raise a \"File Download\" Dialog Box?</h2>\n<p>Sometimes, it is desired that you want to give option where a user can click a link and it will pop up a \"File Download\" dialogue box to the user instead of displaying actual content. This is very easy and can be achieved through HTTP header. This HTTP header is be different from the header mentioned in previous section.</p>\n<p>For example, if you want make a <b>FileName</b> file downloadable from a given link, then its syntax is as follows \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\n# HTTP Header\nprint \"<b>Content-Type:</b>application/octet-stream; name = \\\"FileName\\\"\\r\\n\";\nprint \"<b>Content-Disposition:</b> attachment; filename = \\\"FileName\\\"\\r\\n\\n\";\n\n# Actual File Content will go here.\nfo = open(\"foo.txt\", \"rb\")\n\nstr = fo.read();\nprint str\n\n# Close opend file\nfo.close()\n</pre>\n<p>Hope you enjoyed this tutorial. If yes, please send me your feedback at: <a href=\"/about/contact_us.htm\">Contact Us</a></p>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_reg_expressions.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_database_access.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</img></div>"}