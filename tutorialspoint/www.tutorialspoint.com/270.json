{"title_html": "<h1>Python - Files I/O</h1>", "content": "\n Python - Files I/O \n  \n Advertisements \n \n<!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//-->\n\n\n \n  \n \n Previous Page\n \n \nNext Page \u00a0\n \n  \n  \n This chapter covers all the basic I/O functions available in Python. For more functions, please refer to standard Python documentation. \n Printing to the Screen \n The simplest way to produce output is using the print statement where you can pass zero or more expressions separated by commas. This function converts the expressions you pass into a string and writes the result to standard output as follows \u2212 \n  Live Demo \n \n#!/usr/bin/python\n\nprint \"Python is really a great language,\", \"isn't it?\"\n \n This produces the following result on your standard screen \u2212 \n \nPython is really a great language, isn't it?\n \n Reading Keyboard Input \n Python provides two built-in functions to read a line of text from standard input, which by default comes from the keyboard. These functions are \u2212 \n \nraw_input\ninput\n \n The raw_input Function \n The raw_input([prompt]) function reads one line from standard input and returns it as a string (removing the trailing newline). \n \n#!/usr/bin/python\n\nstr = raw_input(\"Enter your input: \");\nprint \"Received input is : \", str\n \n This prompts you to enter any string and it would display same string on the screen. When I typed \"Hello Python!\", its output is like this \u2212 \n \nEnter your input: Hello Python\nReceived input is :  Hello Python\n \n The input Function \n The input([prompt]) function is equivalent to raw_input, except that it assumes the input is a valid Python expression and returns the evaluated result to you. \n \n#!/usr/bin/python\n\nstr = input(\"Enter your input: \");\nprint \"Received input is : \", str\n \n This would produce the following result against the entered input \u2212 \n \nEnter your input: [x*5 for x in range(2,10,2)]\nRecieved input is :  [10, 20, 30, 40]\n \n Opening and Closing Files \n Until now, you have been reading and writing to the standard input and output. Now, we will see how to use actual data files. \n Python provides basic functions and methods necessary to manipulate files by default. You can do most of the file manipulation using a file object. \n The open Function \n Before you can read or write a file, you have to open it using Python's built-in open() function. This function creates a file object, which would be utilized to call other support methods associated with it. \n Syntax \n \nfile object = open(file_name [, access_mode][, buffering])\n \n Here are parameter details \u2212 \n \nfile_name \u2212 The file_name argument is a string value that contains the name of the file that you want to access.\naccess_mode \u2212 The access_mode determines the mode in which the file has to be opened, i.e., read, write, append, etc. A complete list of possible values is given below in the table. This is optional parameter and the default file access mode is read (r).\nbuffering \u2212 If the buffering value is set to 0, no buffering  takes place. If the buffering value is 1, line buffering is performed while accessing a file. If you specify the buffering value as an integer greater than 1, then buffering action is performed with the indicated buffer size. If negative, the buffer size is the system default(default behavior).\n \n Here is a list of the different modes of opening a file \u2212 \n \n\nSr.No.\nModes & Description\n\n\n1\nr\nOpens a file for reading only. The file pointer is placed at the beginning of the file. This is the default mode.\n\n\n2\nrb\nOpens a file for reading only in binary format. The file pointer is placed at the beginning of the file. This is the default mode.\n\n\n3\nr+\nOpens a file for both reading and writing. The file pointer placed at the beginning of the file.\n\n\n4\nrb+\nOpens a file for both reading and writing in binary format. The file pointer placed at the beginning of the file.\n\n\n5\nw\nOpens a file for writing only. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing.\n\n\n6\nwb\nOpens a file for writing only in binary format. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing.\n\n\n7\nw+\nOpens a file for both writing and reading. Overwrites the existing file if the file exists. If the file does not exist, creates a new file for reading and writing.\n\n\n8\nwb+\nOpens a file for both writing and reading in binary format. Overwrites the existing file if the file exists. If the file does not exist, creates a new file for reading and writing.\n\n\n9\na\nOpens a file for appending. The file pointer is at the end of the file if the file exists. That is, the file is in the append mode. If the file does not exist, it creates a new file for writing.\n\n\n10\nab\nOpens a file for appending in binary format. The file pointer is at the end of the file if the file exists. That is, the file is in the append mode. If the file does not exist, it creates a new file for writing.\n\n\n11\na+\nOpens a file for both appending and reading. The file pointer is at the end of the file if the file exists. The file opens in the append mode. If the file does not exist, it creates a new file for reading and writing.\n\n\n12\nab+\nOpens a file for both appending and reading in binary format. The file pointer is at the end of the file if the file exists. The file opens in the append mode. If the file does not exist, it creates a new file for reading and writing.\n\n \n The file Object Attributes \n Once a file is opened and you have one file object, you can get various information related to that file. \n Here is a list of all attributes related to file object \u2212 \n \n\nSr.No.\nAttribute & Description\n\n\n1\nfile.closed\nReturns true if file is closed, false otherwise.\n\n\n2\nfile.mode\nReturns access mode with which file was opened.\n\n\n3\nfile.name\nReturns name of the file.\n\n\n4\nfile.softspace\nReturns false if space explicitly required with print, true otherwise.\n\n \n Example \n  Live Demo \n \n#!/usr/bin/python\n\n# Open a file\nfo = open(\"foo.txt\", \"wb\")\nprint \"Name of the file: \", fo.name\nprint \"Closed or not : \", fo.closed\nprint \"Opening mode : \", fo.mode\nprint \"Softspace flag : \", fo.softspace\n \n This produces the following result \u2212 \n \nName of the file:  foo.txt\nClosed or not :  False\nOpening mode :  wb\nSoftspace flag :  0\n \n The close() Method \n The close() method of a file object flushes any unwritten information and closes the file object, after which no more writing can be done. \n Python automatically closes a file when the reference object of a file is reassigned to another file. It is a good practice to use the close() method to close a file. \n Syntax \n \nfileObject.close();\n \n Example \n  Live Demo \n \n#!/usr/bin/python\n\n# Open a file\nfo = open(\"foo.txt\", \"wb\")\nprint \"Name of the file: \", fo.name\n\n# Close opend file\nfo.close()\n \n This produces the following result \u2212 \n \nName of the file:  foo.txt\n \n Reading and Writing Files \n The file object provides a set of access methods to make our lives easier. We would see how to use read() and write() methods to read and write files. \n The write() Method \n The write() method writes any string to an open file. It is important to note that Python strings can have binary data and not just text. \n The write() method does not add a newline character ('\\n') to the end of the string \u2212 \n Syntax \n \nfileObject.write(string);\n \n Here, passed parameter is the content to be written into the opened file. \n Example \n \n#!/usr/bin/python\n\n# Open a file\nfo = open(\"foo.txt\", \"wb\")\nfo.write( \"Python is a great language.\\nYeah its great!!\\n\");\n\n# Close opend file\nfo.close()\n \n The above method would create foo.txt file and would write given content in that file and finally it would close that file. If you would open this file, it would have following content. \n \nPython is a great language.\nYeah its great!!\n \n The read() Method \n The read() method reads a string from an open file. It is important to note that Python strings can have binary data. apart from text data. \n Syntax \n \nfileObject.read([count]);\n \n Here, passed parameter is the number of bytes to be read from the opened file. This method starts reading from the beginning of the file and if count is missing, then it tries to read as much as possible, maybe until the end of file. \n Example \n  Let's take a file foo.txt, which we created above. \n \n#!/usr/bin/python\n\n# Open a file\nfo = open(\"foo.txt\", \"r+\")\nstr = fo.read(10);\nprint \"Read String is : \", str\n# Close opend file\nfo.close()\n \n This produces the following result \u2212 \n \nRead String is :  Python is\n \n File Positions \n The tell() method tells you the current position within the file; in other words, the next read or write will occur at that many bytes from the beginning of the file. \n The seek(offset[, from]) method changes the current file position. The offset argument indicates the number of bytes to be moved. The from argument specifies the reference position from where the bytes are to be moved. \n If from is set to 0, it means use the beginning of the file as the reference position and 1 means use the current position as the reference position and if it is set to 2 then the end of the file would be taken as the reference position. \n Example \n  Let us take a file foo.txt, which we created above. \n \n#!/usr/bin/python\n\n# Open a file\nfo = open(\"foo.txt\", \"r+\")\nstr = fo.read(10);\nprint \"Read String is : \", str\n\n# Check current position\nposition = fo.tell();\nprint \"Current file position : \", position\n\n# Reposition pointer at the beginning once again\nposition = fo.seek(0, 0);\nstr = fo.read(10);\nprint \"Again read String is : \", str\n# Close opend file\nfo.close()\n \n This produces the following result \u2212 \n \nRead String is :  Python is\nCurrent file position :  10\nAgain read String is :  Python is\n \n Renaming and Deleting Files \n Python os module provides methods that help you perform file-processing operations, such as renaming and deleting files. \n To use this module you need to import it first and then you can call any related functions. \n The rename() Method \n The rename() method takes two arguments, the current filename and the new filename. \n Syntax \n \nos.rename(current_file_name, new_file_name)\n \n Example \n Following is the example to rename an existing file test1.txt \u2212 \n \n#!/usr/bin/python\nimport os\n\n# Rename a file from test1.txt to test2.txt\nos.rename( \"test1.txt\", \"test2.txt\" )\n\n \n The remove() Method \n You can use the remove() method to delete files by supplying the name of the file to be deleted as the argument. \n Syntax \n \nos.remove(file_name)\n \n Example \n Following is the example to delete an existing file test2.txt \u2212 \n \n#!/usr/bin/python\nimport os\n\n# Delete file test2.txt\nos.remove(\"text2.txt\")\n \n Directories in Python \n All files are contained within various directories, and Python has no problem handling these too. The os module has several methods that help you create, remove, and change directories. \n The mkdir() Method \n You can use the mkdir() method of the os module to create directories in the current directory. You need to supply an argument to this method which contains the name of the directory to be created. \n Syntax \n \nos.mkdir(\"newdir\")\n \n Example \n Following is the example to create a directory test in the current directory \u2212 \n \n#!/usr/bin/python\nimport os\n\n# Create a directory \"test\"\nos.mkdir(\"test\")\n \n The chdir() Method \n You can use the chdir() method to change the current directory. The chdir() method takes an argument, which is the name of the directory that you want to make the current directory. \n Syntax \n \nos.chdir(\"newdir\")\n \n Example \n Following is the example to go into \"/home/newdir\" directory \u2212 \n \n#!/usr/bin/python\nimport os\n\n# Changing a directory to \"/home/newdir\"\nos.chdir(\"/home/newdir\")\n \n The getcwd() Method \n The getcwd() method displays the current working directory. \n Syntax \n \nos.getcwd()\n \n Example \n Following is the example to give current directory \u2212 \n \n#!/usr/bin/python\nimport os\n\n# This would give location of the current directory\nos.getcwd()\n \n The rmdir() Method \n The rmdir() method deletes the directory, which is passed as an argument in the method. \n Before removing a directory, all the contents in it should be removed. \n Syntax \n \nos.rmdir('dirname')\n \n Example \n Following is the example to remove \"/tmp/test\" directory. It is required to give fully qualified name of the directory, otherwise it would search for that directory in the current directory. \n \n#!/usr/bin/python\nimport os\n\n# This would  remove \"/tmp/test\"  directory.\nos.rmdir( \"/tmp/test\"  )\n \n File & Directory Related Methods \n There are three important sources, which provide a wide range of utility methods to handle and manipulate files & directories on Windows and Unix operating systems. They are as follows \u2212 \n \nFile Object Methods: The file object provides functions to manipulate files.\nOS Object Methods: This provides methods to process files as well as directories. \n\n \n  \n \n Previous Page\n \n \n Print\n \n \nNext Page \u00a0\n \n  \n  PRINTING ENDS HERE  \n \nAdvertisements\n<!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//-->\n\n\n \n", "url": "https://www.tutorialspoint.com/python/python_files_io.htm", "html": "<!DOCTYPE html>\n\n<!--[if IE 8]><html class=\"ie ie8\"> <![endif]-->\n<!--[if IE 9]><html class=\"ie ie9\"> <![endif]-->\n<!--[if gt IE 9]><!--> <html> <!--<![endif]-->\n<head>\n<!-- Basic -->\n<meta charset=\"utf-8\"/>\n<title>Python Files I/O</title>\n<meta content=\"Python Files I/O - Learn Python in simple and easy steps starting from basic to advanced concepts with examples including Python Syntax Object Oriented Language, Methods, Tuples, Tools/Utilities, Exceptions Handling, Sockets, GUI, Extentions, XML Programming.\" name=\"description\">\n<meta content=\"Python, Tutorials, Learning, Beginners, Basics, Object Oriented Language, Methods, Overriding, Networking, Multithreading,Methods, Tuples, Tools/Utilities, Exceptions Handling, Sockets, GUI, Extentions, XML, Programming.\" name=\"Keywords\"/>\n<base href=\"https://www.tutorialspoint.com/\"/>\n<link href=\"/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"/>\n<meta content=\"width=device-width,initial-scale=1.0,user-scalable=yes\" name=\"viewport\"/>\n<meta content=\"en_US\" property=\"og:locale\">\n<meta content=\"website\" property=\"og:type\"/>\n<meta content=\"471319149685276\" property=\"fb:app_id\"/>\n<meta content=\"www.tutorialspoint.com\" property=\"og:site_name\"/>\n<meta content=\"yes\" name=\"apple-mobile-web-app-capable\"/>\n<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"/>\n<meta content=\"tutorialspoint.com\" name=\"author\"/>\n<script src=\"https://www.tutorialspoint.com/theme/js/script-min-v4.js?v=2\" type=\"text/javascript\"></script>\n<link href=\"https://www.tutorialspoint.com/theme/css/style-min.css?v=3.1\" rel=\"stylesheet\"/>\n<script>\r\nfunction openNav() {\t\r\n  document.getElementById(\"mySidenav\").style.width = \"250px\";\r\n  document.getElementById(\"right_obs\").style.display = \"block\";\r\n}\r\nfunction closeNav() {\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\nfunction close_obs_sidenav(){\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\n</script>\n<!-- Head Libs -->\n<!--[if IE 8]>\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/theme/css/ie8.css\">\r\n<![endif]-->\n<style>\r\n#privacy-banner {\r\n    position: fixed;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    max-width: 100%;\r\n    padding: 1rem .5rem;\r\n    background: #fff;\r\n    z-index: 1030;\r\n    color: #000;\r\n    font-size: 14px;\r\n    margin: 0;\r\n    display: none;\r\n    border-top: 2px solid rgb(130, 130, 130);\r\n  }\r\n  #privacy-banner p {\r\n    margin: 0;\r\n    color: #000;\r\n    text-align: center;\r\n  }\r\n  #privacy-banner a {\r\n    text-decoration: none;\r\n    margin: 20px auto 0 auto;\r\n    display: block;\r\n    max-width: 150px;\r\n  }\r\n  #privacy-banner a:hover {\r\n    text-decoration: underline;\r\n  }\r\n  #banner-learn {\r\n    color: #000;\r\n  }\r\n  #banner-accept {\r\n    padding: 7px 15px;\r\n    color: #fff;\r\n    border-radius: 5px;\r\n    background:#737373 !important;\r\n  }\r\n  @media (min-width: 768px) {\r\n    #privacy-banner {\r\n      padding: 1.5rem .5rem;\r\n    }\r\n    #privacy-banner a {\r\n      display: inline-block;\r\n      margin: 0 10px;\r\n    }\r\n}\r\npre.prettyprint.tryit {min-height:37px; background: #eee url(/python/images/try-it.jpg) top right no-repeat !important}select{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }\r\n.btnsbmt{ background: #fdbf00 !important;}\r\nul.nav-list.primary>li a.videolink{    background: none; margin: 0px; padding: 0px; border: 1px solid #d6d6d6;}\r\ndiv.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #fdbf00 url(/images/pattern.png) repeat center center !important;}\r\n.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #fdbf00 !important;}\r\n.submenu-item{ border-bottom: 2px solid #fdbf00 !important; border-top: 2px solid #fdbf00 !important }\r\n.ace_scroller{overflow: auto!important;}\r\na.demo{font-family: \"Open Sans\",Arial,sans-serif; background:#fdbf00; color:#fff; font-size:13px; padding:3px 10px; border:1px solid #d6d6d6; position:absolute; right:5px; margin:-6px 17px 0px 0px;}\r\na.demo:hover{opacity:.8}\r\n</style>\n<script>\r\n$(document).ready(function() {\r\n  $('input[name=\"q\"]').keydown(function(event){\r\n    if(event.keyCode == 13) {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n  });\r\n});\r\n</script>\n</meta></meta></head>\n<body onload=\"prettyPrint()\">\n<div class=\"wrapLoader\">\n<div class=\"imgLoader\">\n<img alt=\"\" height=\"70\" src=\"/images/loading-cg.gif\" width=\"70\"/>\n</div>\n</div>\n<div class=\"display-none\" id=\"right_obs\" onclick=\"close_obs_sidenav()\"></div>\n<header>\n<div class=\"container\">\n<h1 class=\"logo\">\n<a href=\"index.htm\" title=\"tutorialspoint\">\n<img alt=\"tutorialspoint\" src=\"/python/images/logo.png\"/>\n</a>\n</h1>\n<ul class=\"tp-inline-block pull-right\" id=\"tp-head-icons\">\n<li>\n<div class=\"tp-second-nav tp-display-none tp-pointer\" onclick=\"openNav()\">\n<i class=\"fa fa-th-large fa-lg\"></i>\n</div>\n</li>\n</ul>\n<button class=\"btn btn-responsive-nav btn-inverse\" data-target=\".nav-main-collapse\" data-toggle=\"collapse\" id=\"pull\" style=\"top: 24px!important\"> <i class=\"icon icon-bars\"></i> </button>\n<nav>\n<ul class=\"nav nav-pills nav-top\">\n<li><a href=\"/about/about_careers.htm\" style=\"background: #fffb09; font-weight: bold;\"><i class=\"icon icon-suitcase\"></i> Jobs</a></li>\n<li> <a href=\"/programming_examples/\" target=\"_blank\"><i class=\"fa fa-cubes\"></i> \u00a0Examples</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/whiteboard.htm\"><img alt=\"Whiteboard\" src=\"theme/css/icons/image-editor.png\" title=\"Whiteboard\"/> \u00a0Whiteboard</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/netmeeting.php\"><i class=\"fa-camera\"></i> \u00a0Net Meeting</a> </li>\n<li> <a href=\"/online_dev_tools.htm\"> <i class=\"dev-tools-menu\" style=\"opacity:.5\"></i> Tools </a> </li>\n<li> <a href=\"/articles/index.php\"><i class=\"icon icon-file-text-o\"></i> \u00a0Articles</a> </li>\n<li class=\"top-icons\">\n<ul class=\"social-icons\">\n<li class=\"facebook\"><a data-placement=\"bottom\" href=\"https://www.facebook.com/tutorialspointindia\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Facebook\">Facebook</a></li>\n<li class=\"googleplus\"><a data-placement=\"bottom\" href=\"https://plus.google.com/u/0/116678774017490391259/posts\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Google+\">Google+</a></li>\n<li class=\"twitter\"><a data-placement=\"bottom\" href=\"https://www.twitter.com/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Twitter\">Twitter</a></li>\n<li class=\"linkedin\"><a data-placement=\"bottom\" href=\"https://www.linkedin.com/company/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Linkedin\">Linkedin</a></li>\n<li class=\"youtube\"><a data-placement=\"bottom\" href=\"https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint YouTube\">YouTube</a></li>\n</ul>\n</li>\n</ul>\n</nav>\n</div>\n<div class=\"sidenav\" id=\"mySidenav\">\n<div class=\"navbar nav-main\">\n<div class=\"container\">\n<nav class=\"nav-main mega-menu\">\n<ul class=\"nav nav-pills nav-main\" id=\"mainMenu\">\n<li class=\"dropdown no-sub-menu\"> <a class=\"dropdown\" href=\"index.htm\"><i class=\"icon icon-home\"></i> Home</a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"/questions/index.php\"><i class=\"fa fa-send\"></i> Q/A </a> </li>\n<li class=\"dropdown\"><a class=\"dropdown\" href=\"tutorialslibrary.htm\"><span class=\"tut-lib\"> Library </span></a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"videotutorials/index.htm\"><i class=\"fa-toggle-right\"></i> Videos </a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"tutor_connect/index.php\"><i class=\"fa-user\"> </i> Tutors</a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"codingground.htm\"><i class=\"fa-code\"></i> Coding Ground </a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"https://store.tutorialspoint.com/\"><i class=\"fa-usd\"></i> Store </a> </li>\n<li class=\"dropdown no-sub-menu\">\n<div class=\"searchform-popup\">\n<input autocomplete=\"off\" class=\"header-search-box\" id=\"search-string\" name=\"q\" onblur=\"if (this.value == '') {this.value = 'Search your favorite tutorials...';}\" onfocus=\"if (this.value == 'Search your favorite tutorials...') {this.value = '';}\" placeholder=\"Search your favorite tutorials...\" type=\"text\"/>\n<div class=\"magnifying-glass\"><i class=\"icon-search\"></i> Search </div>\n</div>\n</li>\n</ul>\n</nav>\n</div>\n</div>\n</div>\n</header></body></html>\n\n<div style=\"clear:both;\"></div>\n<div class=\"main\" role=\"main\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-2\">\n<aside class=\"sidebar\">\n<style>\r\n.ts {\r\n   text-align:center !important;\r\n   vertical-align:middle !important;\r\n}\r\n</style>\n<div class=\"mini-logo\">\n<img alt=\"Python Tutorial\" src=\"/python/images/python-mini.jpg\">\n</img></div>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Python Basic Tutorial</li>\n<li><a href=\"/python/index.htm\" target=\"_top\">Python - Home</a></li>\n<li><a href=\"/python/python_overview.htm\" target=\"_top\">Python - Overview</a></li>\n<li><a href=\"/python/python_environment.htm\" target=\"_top\">Python - Environment Setup</a></li>\n<li><a href=\"/python/python_basic_syntax.htm\" target=\"_top\">Python - Basic Syntax</a></li>\n<li><a href=\"/python/python_variable_types.htm\" target=\"_top\">Python - Variable Types</a></li>\n<li><a href=\"/python/python_basic_operators.htm\" target=\"_top\">Python - Basic Operators</a></li>\n<li><a href=\"/python/python_decision_making.htm\" target=\"_top\">Python - Decision Making</a></li>\n<li><a href=\"/python/python_loops.htm\" target=\"_top\">Python - Loops</a></li>\n<li><a href=\"/python/python_numbers.htm\" target=\"_top\">Python - Numbers</a></li>\n<li><a href=\"/python/python_strings.htm\" target=\"_top\">Python - Strings</a></li>\n<li><a href=\"/python/python_lists.htm\" target=\"_top\">Python - Lists</a></li>\n<li><a href=\"/python/python_tuples.htm\" target=\"_top\">Python - Tuples</a></li>\n<li><a href=\"/python/python_dictionary.htm\" target=\"_top\">Python - Dictionary</a></li>\n<li><a href=\"/python/python_date_time.htm\" target=\"_top\">Python - Date &amp; Time</a></li>\n<li><a href=\"/python/python_functions.htm\" target=\"_top\">Python - Functions</a></li>\n<li><a href=\"/python/python_modules.htm\" target=\"_top\">Python - Modules</a></li>\n<li><a href=\"/python/python_files_io.htm\" target=\"_top\">Python - Files I/O</a></li>\n<li><a href=\"/python/python_exceptions.htm\" target=\"_top\">Python - Exceptions</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Python Advanced Tutorial</li>\n<li><a href=\"/python/python_classes_objects.htm\" target=\"_top\">Python - Classes/Objects</a></li>\n<li><a href=\"/python/python_reg_expressions.htm\" target=\"_top\">Python - Reg Expressions</a></li>\n<li><a href=\"/python/python_cgi_programming.htm\" target=\"_top\">Python - CGI Programming</a></li>\n<li><a href=\"/python/python_database_access.htm\" target=\"_top\">Python - Database Access</a></li>\n<li><a href=\"/python/python_networking.htm\" target=\"_top\">Python - Networking</a></li>\n<li><a href=\"/python/python_sending_email.htm\" target=\"_top\">Python - Sending Email</a></li>\n<li><a href=\"/python/python_multithreading.htm\" target=\"_top\">Python - Multithreading</a></li>\n<li><a href=\"/python/python_xml_processing.htm\" target=\"_top\">Python - XML Processing</a></li>\n<li><a href=\"/python/python_gui_programming.htm\" target=\"_top\">Python - GUI Programming</a></li>\n<li><a href=\"/python/python_further_extensions.htm\" target=\"_top\">Python - Further Extensions</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Python  Useful Resources</li>\n<li><a href=\"/python/python_questions_answers.htm\" target=\"_top\">Python - Questions and Answers</a></li>\n<li><a href=\"/python/python_quick_guide.htm\" target=\"_top\">Python - Quick Guide</a></li>\n<li><a href=\"/python/python_tools_utilities.htm\" target=\"_top\">Python - Tools/Utilities</a></li>\n<li><a href=\"/python/python_useful_resources.htm\" target=\"_top\">Python - Useful Resources</a></li>\n<li><a href=\"/python/python_discussion.htm\" target=\"_top\">Python - Discussion</a></li>\n</ul>\n<ul class=\"nav nav-list primary push-bottom left-menu special\">\n<li class=\"sreading\">Selected Reading</li>\n<li><a href=\"/upsc_ias_exams.htm\" target=\"_top\">UPSC IAS Exams Notes</a></li>\n<li><a href=\"/developers_best_practices/index.htm\" target=\"_top\">Developer's Best Practices</a></li>\n<li><a href=\"/questions_and_answers.htm\" target=\"_top\">Questions and Answers</a></li>\n<li><a href=\"/effective_resume_writing.htm\" target=\"_top\">Effective Resume Writing</a></li>\n<li><a href=\"/hr_interview_questions/index.htm\" target=\"_top\">HR Interview Questions</a></li>\n<li><a href=\"/computer_glossary.htm\" target=\"_top\">Computer Glossary</a></li>\n<li><a href=\"/computer_whoiswho.htm\" target=\"_top\">Who is Who</a></li>\n</ul>\n</aside>\n</div>\n<!-- PRINTING STARTS HERE -->\n<div class=\"row\">\n<div class=\"content\">\n<div class=\"col-md-7 middle-col\">\n<h1>Python - Files I/O</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_modules.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_exceptions.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>This chapter covers all the basic I/O functions available in Python. For more functions, please refer to standard Python documentation.</p>\n<h2>Printing to the Screen</h2>\n<p>The simplest way to produce output is using the <i>print</i> statement where you can pass zero or more expressions separated by commas. This function converts the expressions you pass into a string and writes the result to standard output as follows \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/SkYY22\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nprint \"Python is really a great language,\", \"isn't it?\"\n</pre>\n<p>This produces the following result on your standard screen \u2212</p>\n<pre class=\"result notranslate\">\nPython is really a great language, isn't it?\n</pre>\n<h2>Reading Keyboard Input</h2>\n<p>Python provides two built-in functions to read a line of text from standard input, which by default comes from the keyboard. These functions are \u2212</p>\n<ul class=\"list\">\n<li>raw_input</li>\n<li>input</li>\n</ul>\n<h2>The <i>raw_input</i> Function</h2>\n<p>The <i>raw_input([prompt])</i> function reads one line from standard input and returns it as a string (removing the trailing newline).</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nstr = raw_input(\"Enter your input: \");\nprint \"Received input is : \", str\n</pre>\n<p>This prompts you to enter any string and it would display same string on the screen. When I typed \"Hello Python!\", its output is like this \u2212</p>\n<pre class=\"result notranslate\">\nEnter your input: Hello Python\nReceived input is :  Hello Python\n</pre>\n<h2>The <i>input</i> Function</h2>\n<p>The <i>input([prompt])</i> function is equivalent to raw_input, except that it assumes the input is a valid Python expression and returns the evaluated result to you.</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nstr = input(\"Enter your input: \");\nprint \"Received input is : \", str\n</pre>\n<p>This would produce the following result against the entered input \u2212</p>\n<pre class=\"result notranslate\">\nEnter your input: [x*5 for x in range(2,10,2)]\nRecieved input is :  [10, 20, 30, 40]\n</pre>\n<h2>Opening and Closing Files</h2>\n<p>Until now, you have been reading and writing to the standard input and output. Now, we will see how to use actual data files.</p>\n<p>Python provides basic functions and methods necessary to manipulate files by default. You can do most of the file manipulation using a <b>file</b> object.</p>\n<h2>The <i>open</i> Function</h2>\n<p>Before you can read or write a file, you have to open it using Python's built-in <i>open()</i> function. This function creates a <b>file</b> object, which would be utilized to call other support methods associated with it.</p>\n<h3>Syntax</h3>\n<pre class=\"result notranslate\">\nfile object = open(file_name [, access_mode][, buffering])\n</pre>\n<p>Here are parameter details \u2212</p>\n<ul class=\"list\">\n<li><p><b>file_name</b> \u2212 The file_name argument is a string value that contains the name of the file that you want to access.</p></li>\n<li><p><b>access_mode</b> \u2212 The access_mode determines the mode in which the file has to be opened, i.e., read, write, append, etc. A complete list of possible values is given below in the table. This is optional parameter and the default file access mode is read (r).</p></li>\n<li><p><b>buffering</b> \u2212 If the buffering value is set to 0, no buffering  takes place. If the buffering value is 1, line buffering is performed while accessing a file. If you specify the buffering value as an integer greater than 1, then buffering action is performed with the indicated buffer size. If negative, the buffer size is the system default(default behavior).</p></li>\n</ul>\n<p>Here is a list of the different modes of opening a file \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\">Sr.No.</th>\n<th style=\"text-align:center;\">Modes &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>r</b></p>\n<p>Opens a file for reading only. The file pointer is placed at the beginning of the file. This is the default mode.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>rb</b></p>\n<p>Opens a file for reading only in binary format. The file pointer is placed at the beginning of the file. This is the default mode.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>r+</b></p>\n<p>Opens a file for both reading and writing. The file pointer placed at the beginning of the file.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>rb+</b></p>\n<p>Opens a file for both reading and writing in binary format. The file pointer placed at the beginning of the file.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>w</b></p>\n<p>Opens a file for writing only. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><p><b>wb</b></p>\n<p>Opens a file for writing only in binary format. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">7</td>\n<td><p><b>w+</b></p>\n<p>Opens a file for both writing and reading. Overwrites the existing file if the file exists. If the file does not exist, creates a new file for reading and writing.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">8</td>\n<td><p><b>wb+</b></p>\n<p>Opens a file for both writing and reading in binary format. Overwrites the existing file if the file exists. If the file does not exist, creates a new file for reading and writing.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">9</td>\n<td><p><b>a</b></p>\n<p>Opens a file for appending. The file pointer is at the end of the file if the file exists. That is, the file is in the append mode. If the file does not exist, it creates a new file for writing.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">10</td>\n<td><p><b>ab</b></p>\n<p>Opens a file for appending in binary format. The file pointer is at the end of the file if the file exists. That is, the file is in the append mode. If the file does not exist, it creates a new file for writing.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">11</td>\n<td><p><b>a+</b></p>\n<p>Opens a file for both appending and reading. The file pointer is at the end of the file if the file exists. The file opens in the append mode. If the file does not exist, it creates a new file for reading and writing.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">12</td>\n<td><p><b>ab+</b></p>\n<p>Opens a file for both appending and reading in binary format. The file pointer is at the end of the file if the file exists. The file opens in the append mode. If the file does not exist, it creates a new file for reading and writing.</p></td>\n</tr>\n</table>\n<h2>The <i>file</i> Object Attributes</h2>\n<p>Once a file is opened and you have one <i>file</i> object, you can get various information related to that file.</p>\n<p>Here is a list of all attributes related to file object \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\">Sr.No.</th>\n<th style=\"text-align:center;\">Attribute &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>file.closed</b></p>\n<p>Returns true if file is closed, false otherwise.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>file.mode</b></p>\n<p>Returns access mode with which file was opened.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>file.name</b></p>\n<p>Returns name of the file.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>file.softspace</b></p>\n<p>Returns false if space explicitly required with print, true otherwise.</p></td>\n</tr>\n</table>\n<h3>Example</h3>\n<a class=\"demo\" href=\"http://tpcg.io/mIm72J\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\n# Open a file\nfo = open(\"foo.txt\", \"wb\")\nprint \"Name of the file: \", fo.name\nprint \"Closed or not : \", fo.closed\nprint \"Opening mode : \", fo.mode\nprint \"Softspace flag : \", fo.softspace\n</pre>\n<p>This produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nName of the file:  foo.txt\nClosed or not :  False\nOpening mode :  wb\nSoftspace flag :  0\n</pre>\n<h2>The <i>close()</i> Method</h2>\n<p>The close() method of a <i>file</i> object flushes any unwritten information and closes the file object, after which no more writing can be done.</p>\n<p>Python automatically closes a file when the reference object of a file is reassigned to another file. It is a good practice to use the close() method to close a file.</p>\n<h3>Syntax</h3>\n<pre class=\"result notranslate\">\nfileObject.close();\n</pre>\n<h3>Example</h3>\n<a class=\"demo\" href=\"http://tpcg.io/pMu0CZ\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\n# Open a file\nfo = open(\"foo.txt\", \"wb\")\nprint \"Name of the file: \", fo.name\n\n# Close opend file\nfo.close()\n</pre>\n<p>This produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nName of the file:  foo.txt\n</pre>\n<h2>Reading and Writing Files</h2>\n<p>The <i>file</i> object provides a set of access methods to make our lives easier. We would see how to use <i>read()</i> and <i>write()</i> methods to read and write files.</p>\n<h2>The <i>write()</i> Method</h2>\n<p>The <i>write()</i> method writes any string to an open file. It is important to note that Python strings can have binary data and not just text.</p>\n<p>The write() method does not add a newline character ('\\n') to the end of the string \u2212</p>\n<h3>Syntax</h3>\n<pre class=\"result notranslate\">\nfileObject.write(string);\n</pre>\n<p>Here, passed parameter is the content to be written into the opened file.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\n# Open a file\nfo = open(\"foo.txt\", \"wb\")\nfo.write( \"Python is a great language.\\nYeah its great!!\\n\");\n\n# Close opend file\nfo.close()\n</pre>\n<p>The above method would create <i>foo.txt</i> file and would write given content in that file and finally it would close that file. If you would open this file, it would have following content.</p>\n<pre class=\"result notranslate\">\nPython is a great language.\nYeah its great!!\n</pre>\n<h2>The <i>read()</i> Method</h2>\n<p>The <i>read()</i> method reads a string from an open file. It is important to note that Python strings can have binary data. apart from text data.</p>\n<h3>Syntax</h3>\n<pre class=\"result notranslate\">\nfileObject.read([count]);\n</pre>\n<p>Here, passed parameter is the number of bytes to be read from the opened file. This method starts reading from the beginning of the file and if <i>count</i> is missing, then it tries to read as much as possible, maybe until the end of file.</p>\n<h3>Example</h3>\n<p> Let's take a file <i>foo.txt</i>, which we created above.</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\n# Open a file\nfo = open(\"foo.txt\", \"r+\")\nstr = fo.read(10);\nprint \"Read String is : \", str\n# Close opend file\nfo.close()\n</pre>\n<p>This produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nRead String is :  Python is\n</pre>\n<h2>File Positions</h2>\n<p>The <i>tell()</i> method tells you the current position within the file; in other words, the next read or write will occur at that many bytes from the beginning of the file.</p>\n<p>The <i>seek(offset[, from])</i> method changes the current file position. The <i>offset</i> argument indicates the number of bytes to be moved. The <i>from</i> argument specifies the reference position from where the bytes are to be moved.</p>\n<p>If <i>from</i> is set to 0, it means use the beginning of the file as the reference position and 1 means use the current position as the reference position and if it is set to 2 then the end of the file would be taken as the reference position.</p>\n<h3>Example</h3>\n<p> Let us take a file <i>foo.txt</i>, which we created above.</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\n# Open a file\nfo = open(\"foo.txt\", \"r+\")\nstr = fo.read(10);\nprint \"Read String is : \", str\n\n# Check current position\nposition = fo.tell();\nprint \"Current file position : \", position\n\n# Reposition pointer at the beginning once again\nposition = fo.seek(0, 0);\nstr = fo.read(10);\nprint \"Again read String is : \", str\n# Close opend file\nfo.close()\n</pre>\n<p>This produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nRead String is :  Python is\nCurrent file position :  10\nAgain read String is :  Python is\n</pre>\n<h2>Renaming and Deleting Files</h2>\n<p>Python <b>os</b> module provides methods that help you perform file-processing operations, such as renaming and deleting files.</p>\n<p>To use this module you need to import it first and then you can call any related functions.</p>\n<h2>The rename() Method</h2>\n<p>The <i>rename()</i> method takes two arguments, the current filename and the new filename.</p>\n<h3>Syntax</h3>\n<pre class=\"result notranslate\">\nos.rename(current_file_name, new_file_name)\n</pre>\n<h3>Example</h3>\n<p>Following is the example to rename an existing file <i>test1.txt</i> \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\nimport os\n\n# Rename a file from test1.txt to test2.txt\nos.rename( \"test1.txt\", \"test2.txt\" )\n\n</pre>\n<h2>The <i>remove()</i> Method</h2>\n<p>You can use the <i>remove()</i> method to delete files by supplying the name of the file to be deleted as the argument.</p>\n<h3>Syntax</h3>\n<pre class=\"result notranslate\">\nos.remove(file_name)\n</pre>\n<h3>Example</h3>\n<p>Following is the example to delete an existing file <i>test2.txt</i> \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\nimport os\n\n# Delete file test2.txt\nos.remove(\"text2.txt\")\n</pre>\n<h2>Directories in Python</h2>\n<p>All files are contained within various directories, and Python has no problem handling these too. The <b>os</b> module has several methods that help you create, remove, and change directories.</p>\n<h2>The <i>mkdir()</i> Method</h2>\n<p>You can use the <i>mkdir()</i> method of the <b>os</b> module to create directories in the current directory. You need to supply an argument to this method which contains the name of the directory to be created.</p>\n<h3>Syntax</h3>\n<pre class=\"result notranslate\">\nos.mkdir(\"newdir\")\n</pre>\n<h3>Example</h3>\n<p>Following is the example to create a directory <i>test</i> in the current directory \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\nimport os\n\n# Create a directory \"test\"\nos.mkdir(\"test\")\n</pre>\n<h2>The <i>chdir()</i> Method</h2>\n<p>You can use the <i>chdir()</i> method to change the current directory. The chdir() method takes an argument, which is the name of the directory that you want to make the current directory.</p>\n<h3>Syntax</h3>\n<pre class=\"result notranslate\">\nos.chdir(\"newdir\")\n</pre>\n<h3>Example</h3>\n<p>Following is the example to go into \"/home/newdir\" directory \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\nimport os\n\n# Changing a directory to \"/home/newdir\"\nos.chdir(\"/home/newdir\")\n</pre>\n<h2>The <i>getcwd()</i> Method</h2>\n<p>The <i>getcwd()</i> method displays the current working directory.</p>\n<h3>Syntax</h3>\n<pre class=\"result notranslate\">\nos.getcwd()\n</pre>\n<h3>Example</h3>\n<p>Following is the example to give current directory \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\nimport os\n\n# This would give location of the current directory\nos.getcwd()\n</pre>\n<h2>The <i>rmdir()</i> Method</h2>\n<p>The <i>rmdir()</i> method deletes the directory, which is passed as an argument in the method.</p>\n<p>Before removing a directory, all the contents in it should be removed.</p>\n<h3>Syntax</h3>\n<pre class=\"result notranslate\">\nos.rmdir('dirname')\n</pre>\n<h3>Example</h3>\n<p>Following is the example to remove \"/tmp/test\" directory. It is required to give fully qualified name of the directory, otherwise it would search for that directory in the current directory.</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\nimport os\n\n# This would  remove \"/tmp/test\"  directory.\nos.rmdir( \"/tmp/test\"  )\n</pre>\n<h2>File &amp; Directory Related Methods</h2>\n<p>There are three important sources, which provide a wide range of utility methods to handle and manipulate files &amp; directories on Windows and Unix operating systems. They are as follows \u2212</p>\n<ul class=\"list\">\n<li><p><a href=\"/python/file_methods.htm\">File Object Methods</a>: The <i>file</i> object provides functions to manipulate files.</p></li>\n<li><p><a href=\"/python/os_file_methods.htm\">OS Object Methods</a>: This provides methods to process files as well as directories. </p></li>\n<!--\n<li><p><a href=\"/python/os_path_methods.htm\">OS.Path Object Methods.</a>: This provides important functions to get information about a file or directory. </p></li>\n-->\n</ul>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_modules.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_exceptions.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n<div class=\"row\">\n<div class=\"col-md-3\" id=\"rightbar\">\n<div class=\"simple-ad\">\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.facebook.com/sharer.php?u=' + 'https://www.tutorialspoint.com/python/python_files_io.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/facebookIcon.jpg\">\n</img></a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://twitter.com/share?url=' + 'https://www.tutorialspoint.com/python/python_files_io.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/twitterIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'https://www.tutorialspoint.com/python/python_files_io.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/linkedinIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=https://www.tutorialspoint.com/python/python_files_io.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/googlePlusIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.stumbleupon.com/submit?url=https://www.tutorialspoint.com/python/python_files_io.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/StumbleUponIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://reddit.com/submit?url=https://www.tutorialspoint.com/python/python_files_io.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/reddit.jpg\"/>\n</a>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\ngoogle_ad_format = \"300x250_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 600;\ngoogle_ad_format = \"300x600_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"ca-pub-2537027957187252\";\n/* Right Side Ad */\ngoogle_ad_slot = \"right_side_ad\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\n//-->\n</script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"footer-copyright\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-1\">\n<a class=\"logo\" href=\"index.htm\"> <img alt=\"Tutorials Point\" class=\"img-responsive\" src=\"/scripts/img/logo-footer.png\"/> </a>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<nav id=\"sub-menu\">\n<ul>\n<li><a href=\"/about/about_privacy.htm\">Privacy Policy</a></li>\n<li><a href=\"/about/about_cookies.htm\">Cookies Policy</a></li>\n<li><a href=\"/about/contact_us.htm\">Contact</a></li>\n</ul>\n</nav>\n</div>\n<div class=\"col-md-3 col-sm-12 col-xs-12\">\n<p>\u00a9 Copyright 2019. All Rights Reserved.</p>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<div class=\"news-group\">\n<input autocomplete=\"off\" class=\"form-control-foot search\" id=\"textemail\" name=\"textemail\" onblur=\"if (this.value == '') {this.value = 'Enter email for newsletter...';}\" onfocus=\"if (this.value == 'Enter email for newsletter...') {this.value = '';}\" placeholder=\"Enter email for newsletter\" type=\"text\"/>\n<span class=\"input-group-btn\"> <button class=\"btn btn-default btn-footer\" id=\"btnemail\" onclick=\"javascript:void(0);\" type=\"submit\">go</button> </span>\n<div id=\"newsresponse\"></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"privacy-banner\">\n<div>\n<p>\n      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.\n      <a href=\"javascript:void(0)\" id=\"banner-accept\">Accept</a>\n<a href=\"/about/about_cookies.htm\" id=\"banner-learn\" target=\"_blank\">Learn more</a>\n</p>\n</div>\n</div>\n<script>\n// Banner Trigger if Not Closed\nif (!localStorage.bannerClosed) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n} else {\n  document.getElementById('privacy-banner').style.display = \"none\";\n}\ndocument.getElementById('banner-accept').addEventListener('click', function() {\n  document.getElementById('privacy-banner').style.display = \"none\";\n  localStorage.bannerClosed = 'true';\n});\nif (navigator.userAgent.match(/Opera|OPR\\//)) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n}\n</script>\n<!-- Libs -->\n<script src=\"/theme/js/custom-min.js?v=7\"></script>\n<script src=\"https://www.google-analytics.com/urchin.js\">\n</script>\n<script>\n_uacct = \"UA-232293-6\";\nurchinTracker();\n$('.pg-icon').click(function(){\n   $('.wrapLoader').show();\n});\n</script>\n<script src=\"/theme/js/jquery.colorbox-min.js\"></script>\n<script>\n   var tryit = new $.TryIt('/python/try_python.php');\n   tryit.compile();\n</script>\n\n\n", "title": "Python - Files I/O", "content_html": "<div class=\"col-md-7 middle-col\">\n<h1>Python - Files I/O</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_modules.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_exceptions.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>This chapter covers all the basic I/O functions available in Python. For more functions, please refer to standard Python documentation.</p>\n<h2>Printing to the Screen</h2>\n<p>The simplest way to produce output is using the <i>print</i> statement where you can pass zero or more expressions separated by commas. This function converts the expressions you pass into a string and writes the result to standard output as follows \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/SkYY22\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nprint \"Python is really a great language,\", \"isn't it?\"\n</pre>\n<p>This produces the following result on your standard screen \u2212</p>\n<pre class=\"result notranslate\">\nPython is really a great language, isn't it?\n</pre>\n<h2>Reading Keyboard Input</h2>\n<p>Python provides two built-in functions to read a line of text from standard input, which by default comes from the keyboard. These functions are \u2212</p>\n<ul class=\"list\">\n<li>raw_input</li>\n<li>input</li>\n</ul>\n<h2>The <i>raw_input</i> Function</h2>\n<p>The <i>raw_input([prompt])</i> function reads one line from standard input and returns it as a string (removing the trailing newline).</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nstr = raw_input(\"Enter your input: \");\nprint \"Received input is : \", str\n</pre>\n<p>This prompts you to enter any string and it would display same string on the screen. When I typed \"Hello Python!\", its output is like this \u2212</p>\n<pre class=\"result notranslate\">\nEnter your input: Hello Python\nReceived input is :  Hello Python\n</pre>\n<h2>The <i>input</i> Function</h2>\n<p>The <i>input([prompt])</i> function is equivalent to raw_input, except that it assumes the input is a valid Python expression and returns the evaluated result to you.</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nstr = input(\"Enter your input: \");\nprint \"Received input is : \", str\n</pre>\n<p>This would produce the following result against the entered input \u2212</p>\n<pre class=\"result notranslate\">\nEnter your input: [x*5 for x in range(2,10,2)]\nRecieved input is :  [10, 20, 30, 40]\n</pre>\n<h2>Opening and Closing Files</h2>\n<p>Until now, you have been reading and writing to the standard input and output. Now, we will see how to use actual data files.</p>\n<p>Python provides basic functions and methods necessary to manipulate files by default. You can do most of the file manipulation using a <b>file</b> object.</p>\n<h2>The <i>open</i> Function</h2>\n<p>Before you can read or write a file, you have to open it using Python's built-in <i>open()</i> function. This function creates a <b>file</b> object, which would be utilized to call other support methods associated with it.</p>\n<h3>Syntax</h3>\n<pre class=\"result notranslate\">\nfile object = open(file_name [, access_mode][, buffering])\n</pre>\n<p>Here are parameter details \u2212</p>\n<ul class=\"list\">\n<li><p><b>file_name</b> \u2212 The file_name argument is a string value that contains the name of the file that you want to access.</p></li>\n<li><p><b>access_mode</b> \u2212 The access_mode determines the mode in which the file has to be opened, i.e., read, write, append, etc. A complete list of possible values is given below in the table. This is optional parameter and the default file access mode is read (r).</p></li>\n<li><p><b>buffering</b> \u2212 If the buffering value is set to 0, no buffering  takes place. If the buffering value is 1, line buffering is performed while accessing a file. If you specify the buffering value as an integer greater than 1, then buffering action is performed with the indicated buffer size. If negative, the buffer size is the system default(default behavior).</p></li>\n</ul>\n<p>Here is a list of the different modes of opening a file \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\">Sr.No.</th>\n<th style=\"text-align:center;\">Modes &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>r</b></p>\n<p>Opens a file for reading only. The file pointer is placed at the beginning of the file. This is the default mode.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>rb</b></p>\n<p>Opens a file for reading only in binary format. The file pointer is placed at the beginning of the file. This is the default mode.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>r+</b></p>\n<p>Opens a file for both reading and writing. The file pointer placed at the beginning of the file.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>rb+</b></p>\n<p>Opens a file for both reading and writing in binary format. The file pointer placed at the beginning of the file.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>w</b></p>\n<p>Opens a file for writing only. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><p><b>wb</b></p>\n<p>Opens a file for writing only in binary format. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">7</td>\n<td><p><b>w+</b></p>\n<p>Opens a file for both writing and reading. Overwrites the existing file if the file exists. If the file does not exist, creates a new file for reading and writing.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">8</td>\n<td><p><b>wb+</b></p>\n<p>Opens a file for both writing and reading in binary format. Overwrites the existing file if the file exists. If the file does not exist, creates a new file for reading and writing.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">9</td>\n<td><p><b>a</b></p>\n<p>Opens a file for appending. The file pointer is at the end of the file if the file exists. That is, the file is in the append mode. If the file does not exist, it creates a new file for writing.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">10</td>\n<td><p><b>ab</b></p>\n<p>Opens a file for appending in binary format. The file pointer is at the end of the file if the file exists. That is, the file is in the append mode. If the file does not exist, it creates a new file for writing.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">11</td>\n<td><p><b>a+</b></p>\n<p>Opens a file for both appending and reading. The file pointer is at the end of the file if the file exists. The file opens in the append mode. If the file does not exist, it creates a new file for reading and writing.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">12</td>\n<td><p><b>ab+</b></p>\n<p>Opens a file for both appending and reading in binary format. The file pointer is at the end of the file if the file exists. The file opens in the append mode. If the file does not exist, it creates a new file for reading and writing.</p></td>\n</tr>\n</table>\n<h2>The <i>file</i> Object Attributes</h2>\n<p>Once a file is opened and you have one <i>file</i> object, you can get various information related to that file.</p>\n<p>Here is a list of all attributes related to file object \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\">Sr.No.</th>\n<th style=\"text-align:center;\">Attribute &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>file.closed</b></p>\n<p>Returns true if file is closed, false otherwise.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>file.mode</b></p>\n<p>Returns access mode with which file was opened.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>file.name</b></p>\n<p>Returns name of the file.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>file.softspace</b></p>\n<p>Returns false if space explicitly required with print, true otherwise.</p></td>\n</tr>\n</table>\n<h3>Example</h3>\n<a class=\"demo\" href=\"http://tpcg.io/mIm72J\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\n# Open a file\nfo = open(\"foo.txt\", \"wb\")\nprint \"Name of the file: \", fo.name\nprint \"Closed or not : \", fo.closed\nprint \"Opening mode : \", fo.mode\nprint \"Softspace flag : \", fo.softspace\n</pre>\n<p>This produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nName of the file:  foo.txt\nClosed or not :  False\nOpening mode :  wb\nSoftspace flag :  0\n</pre>\n<h2>The <i>close()</i> Method</h2>\n<p>The close() method of a <i>file</i> object flushes any unwritten information and closes the file object, after which no more writing can be done.</p>\n<p>Python automatically closes a file when the reference object of a file is reassigned to another file. It is a good practice to use the close() method to close a file.</p>\n<h3>Syntax</h3>\n<pre class=\"result notranslate\">\nfileObject.close();\n</pre>\n<h3>Example</h3>\n<a class=\"demo\" href=\"http://tpcg.io/pMu0CZ\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\n# Open a file\nfo = open(\"foo.txt\", \"wb\")\nprint \"Name of the file: \", fo.name\n\n# Close opend file\nfo.close()\n</pre>\n<p>This produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nName of the file:  foo.txt\n</pre>\n<h2>Reading and Writing Files</h2>\n<p>The <i>file</i> object provides a set of access methods to make our lives easier. We would see how to use <i>read()</i> and <i>write()</i> methods to read and write files.</p>\n<h2>The <i>write()</i> Method</h2>\n<p>The <i>write()</i> method writes any string to an open file. It is important to note that Python strings can have binary data and not just text.</p>\n<p>The write() method does not add a newline character ('\\n') to the end of the string \u2212</p>\n<h3>Syntax</h3>\n<pre class=\"result notranslate\">\nfileObject.write(string);\n</pre>\n<p>Here, passed parameter is the content to be written into the opened file.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\n# Open a file\nfo = open(\"foo.txt\", \"wb\")\nfo.write( \"Python is a great language.\\nYeah its great!!\\n\");\n\n# Close opend file\nfo.close()\n</pre>\n<p>The above method would create <i>foo.txt</i> file and would write given content in that file and finally it would close that file. If you would open this file, it would have following content.</p>\n<pre class=\"result notranslate\">\nPython is a great language.\nYeah its great!!\n</pre>\n<h2>The <i>read()</i> Method</h2>\n<p>The <i>read()</i> method reads a string from an open file. It is important to note that Python strings can have binary data. apart from text data.</p>\n<h3>Syntax</h3>\n<pre class=\"result notranslate\">\nfileObject.read([count]);\n</pre>\n<p>Here, passed parameter is the number of bytes to be read from the opened file. This method starts reading from the beginning of the file and if <i>count</i> is missing, then it tries to read as much as possible, maybe until the end of file.</p>\n<h3>Example</h3>\n<p> Let's take a file <i>foo.txt</i>, which we created above.</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\n# Open a file\nfo = open(\"foo.txt\", \"r+\")\nstr = fo.read(10);\nprint \"Read String is : \", str\n# Close opend file\nfo.close()\n</pre>\n<p>This produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nRead String is :  Python is\n</pre>\n<h2>File Positions</h2>\n<p>The <i>tell()</i> method tells you the current position within the file; in other words, the next read or write will occur at that many bytes from the beginning of the file.</p>\n<p>The <i>seek(offset[, from])</i> method changes the current file position. The <i>offset</i> argument indicates the number of bytes to be moved. The <i>from</i> argument specifies the reference position from where the bytes are to be moved.</p>\n<p>If <i>from</i> is set to 0, it means use the beginning of the file as the reference position and 1 means use the current position as the reference position and if it is set to 2 then the end of the file would be taken as the reference position.</p>\n<h3>Example</h3>\n<p> Let us take a file <i>foo.txt</i>, which we created above.</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\n# Open a file\nfo = open(\"foo.txt\", \"r+\")\nstr = fo.read(10);\nprint \"Read String is : \", str\n\n# Check current position\nposition = fo.tell();\nprint \"Current file position : \", position\n\n# Reposition pointer at the beginning once again\nposition = fo.seek(0, 0);\nstr = fo.read(10);\nprint \"Again read String is : \", str\n# Close opend file\nfo.close()\n</pre>\n<p>This produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nRead String is :  Python is\nCurrent file position :  10\nAgain read String is :  Python is\n</pre>\n<h2>Renaming and Deleting Files</h2>\n<p>Python <b>os</b> module provides methods that help you perform file-processing operations, such as renaming and deleting files.</p>\n<p>To use this module you need to import it first and then you can call any related functions.</p>\n<h2>The rename() Method</h2>\n<p>The <i>rename()</i> method takes two arguments, the current filename and the new filename.</p>\n<h3>Syntax</h3>\n<pre class=\"result notranslate\">\nos.rename(current_file_name, new_file_name)\n</pre>\n<h3>Example</h3>\n<p>Following is the example to rename an existing file <i>test1.txt</i> \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\nimport os\n\n# Rename a file from test1.txt to test2.txt\nos.rename( \"test1.txt\", \"test2.txt\" )\n\n</pre>\n<h2>The <i>remove()</i> Method</h2>\n<p>You can use the <i>remove()</i> method to delete files by supplying the name of the file to be deleted as the argument.</p>\n<h3>Syntax</h3>\n<pre class=\"result notranslate\">\nos.remove(file_name)\n</pre>\n<h3>Example</h3>\n<p>Following is the example to delete an existing file <i>test2.txt</i> \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\nimport os\n\n# Delete file test2.txt\nos.remove(\"text2.txt\")\n</pre>\n<h2>Directories in Python</h2>\n<p>All files are contained within various directories, and Python has no problem handling these too. The <b>os</b> module has several methods that help you create, remove, and change directories.</p>\n<h2>The <i>mkdir()</i> Method</h2>\n<p>You can use the <i>mkdir()</i> method of the <b>os</b> module to create directories in the current directory. You need to supply an argument to this method which contains the name of the directory to be created.</p>\n<h3>Syntax</h3>\n<pre class=\"result notranslate\">\nos.mkdir(\"newdir\")\n</pre>\n<h3>Example</h3>\n<p>Following is the example to create a directory <i>test</i> in the current directory \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\nimport os\n\n# Create a directory \"test\"\nos.mkdir(\"test\")\n</pre>\n<h2>The <i>chdir()</i> Method</h2>\n<p>You can use the <i>chdir()</i> method to change the current directory. The chdir() method takes an argument, which is the name of the directory that you want to make the current directory.</p>\n<h3>Syntax</h3>\n<pre class=\"result notranslate\">\nos.chdir(\"newdir\")\n</pre>\n<h3>Example</h3>\n<p>Following is the example to go into \"/home/newdir\" directory \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\nimport os\n\n# Changing a directory to \"/home/newdir\"\nos.chdir(\"/home/newdir\")\n</pre>\n<h2>The <i>getcwd()</i> Method</h2>\n<p>The <i>getcwd()</i> method displays the current working directory.</p>\n<h3>Syntax</h3>\n<pre class=\"result notranslate\">\nos.getcwd()\n</pre>\n<h3>Example</h3>\n<p>Following is the example to give current directory \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\nimport os\n\n# This would give location of the current directory\nos.getcwd()\n</pre>\n<h2>The <i>rmdir()</i> Method</h2>\n<p>The <i>rmdir()</i> method deletes the directory, which is passed as an argument in the method.</p>\n<p>Before removing a directory, all the contents in it should be removed.</p>\n<h3>Syntax</h3>\n<pre class=\"result notranslate\">\nos.rmdir('dirname')\n</pre>\n<h3>Example</h3>\n<p>Following is the example to remove \"/tmp/test\" directory. It is required to give fully qualified name of the directory, otherwise it would search for that directory in the current directory.</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\nimport os\n\n# This would  remove \"/tmp/test\"  directory.\nos.rmdir( \"/tmp/test\"  )\n</pre>\n<h2>File &amp; Directory Related Methods</h2>\n<p>There are three important sources, which provide a wide range of utility methods to handle and manipulate files &amp; directories on Windows and Unix operating systems. They are as follows \u2212</p>\n<ul class=\"list\">\n<li><p><a href=\"/python/file_methods.htm\">File Object Methods</a>: The <i>file</i> object provides functions to manipulate files.</p></li>\n<li><p><a href=\"/python/os_file_methods.htm\">OS Object Methods</a>: This provides methods to process files as well as directories. </p></li>\n<!--\n<li><p><a href=\"/python/os_path_methods.htm\">OS.Path Object Methods.</a>: This provides important functions to get information about a file or directory. </p></li>\n-->\n</ul>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_modules.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_exceptions.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>"}