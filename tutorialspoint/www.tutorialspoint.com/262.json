{"title_html": "<h1>Python - Object Oriented</h1>", "content": "\n Python - Object Oriented \n  \n Advertisements \n \n<!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//-->\n\n\n \n  \n \n Previous Page\n \n \nNext Page \u00a0\n \n  \n  \n Python has been an object-oriented language since it existed. Because of this, creating and using classes and objects are downright easy. This chapter helps you become an expert in using Python's object-oriented programming support. \n If you do not have any previous experience with object-oriented (OO) programming, you may want to consult an introductory course on it or at least a tutorial of some sort so that you have a grasp of the basic concepts. \n However, here is small introduction of Object-Oriented Programming (OOP) to bring you at speed \u2212 \n Overview of OOP Terminology \n \nClass \u2212 A user-defined prototype for an object that defines a set of attributes that characterize any object of the class. The attributes are data members (class variables and instance variables) and methods, accessed via dot notation.\nClass variable \u2212 A variable that is shared by all instances of a class. Class variables are defined within a class but outside any of the class's methods. Class variables are not used as frequently as instance variables are.\nData member \u2212 A class variable or instance variable that holds data associated with a class and its objects.\nFunction overloading \u2212 The assignment of more than one behavior to a particular function. The operation performed varies by the types of objects or arguments involved.\nInstance variable \u2212 A variable that is defined inside a method and belongs only to the current instance of a class.\nInheritance \u2212 The transfer of the characteristics of a class to other classes that are derived from it.\nInstance \u2212  An individual object of a certain class. An object obj that belongs to a class Circle, for example, is an instance of the class Circle.\nInstantiation \u2212 The creation of an instance of a class.\nMethod \u2212 A special kind of function that is defined in a class definition.\nObject \u2212 A unique instance of a data structure that's defined by its class. An object comprises both data members (class variables and instance variables) and methods.\nOperator overloading \u2212 The assignment of more than one function to a particular operator.\n \n Creating Classes \n The class statement creates a new class definition. The name of the class immediately follows the keyword class followed by a colon as follows \u2212 \n \nclass ClassName:\n   'Optional class documentation string'\n   class_suite\n \n \nThe class has a documentation string, which can be accessed via ClassName.__doc__.\nThe class_suite consists of all the component statements defining class members, data attributes and functions.\n \n Example \n Following is the example of a simple Python class \u2212 \n \nclass Employee:\n   'Common base class for all employees'\n   empCount = 0\n\n   def __init__(self, name, salary):\n      self.name = name\n      self.salary = salary\n      Employee.empCount += 1\n   \n   def displayCount(self):\n     print \"Total Employee %d\" % Employee.empCount\n\n   def displayEmployee(self):\n      print \"Name : \", self.name,  \", Salary: \", self.salary\n \n \nThe variable empCount is a class variable whose value is shared among all instances of a this class. This can be accessed as Employee.empCount from inside the class or outside the class.\nThe first method __init__() is a special method, which is called class constructor or initialization method that Python calls when you create a new instance of this class.\nYou declare other class methods like normal functions with the exception that the first argument to each method is self. Python adds the self argument to the list for you; you do not need to include it when you call the methods.\n \n Creating Instance Objects \n To create instances of a class, you call the class using class name and pass in whatever arguments its __init__ method accepts. \n \n\"This would create first object of Employee class\"\nemp1 = Employee(\"Zara\", 2000)\n\"This would create second object of Employee class\"\nemp2 = Employee(\"Manni\", 5000)\n \n Accessing Attributes \n You access the object's attributes using the dot operator with object. Class variable would be accessed using class name as follows \u2212 \n \nemp1.displayEmployee()\nemp2.displayEmployee()\nprint \"Total Employee %d\" % Employee.empCount\n \n Now, putting all  the concepts together \u2212 \n  Live Demo \n \n#!/usr/bin/python\n\nclass Employee:\n   'Common base class for all employees'\n   empCount = 0\n\n   def __init__(self, name, salary):\n      self.name = name\n      self.salary = salary\n      Employee.empCount += 1\n   \n   def displayCount(self):\n     print \"Total Employee %d\" % Employee.empCount\n\n   def displayEmployee(self):\n      print \"Name : \", self.name,  \", Salary: \", self.salary\n\n\"This would create first object of Employee class\"\nemp1 = Employee(\"Zara\", 2000)\n\"This would create second object of Employee class\"\nemp2 = Employee(\"Manni\", 5000)\nemp1.displayEmployee()\nemp2.displayEmployee()\nprint \"Total Employee %d\" % Employee.empCount\n \n When the above code is  executed, it produces the following result \u2212 \n \nName :  Zara ,Salary:  2000\nName :  Manni ,Salary:  5000\nTotal Employee 2\n \n You can add, remove, or modify attributes of classes and objects at any time \u2212 \n \nemp1.age = 7  # Add an 'age' attribute.\nemp1.age = 8  # Modify 'age' attribute.\ndel emp1.age  # Delete 'age' attribute.\n \n Instead of using the normal statements to access attributes, you can use the following functions \u2212 \n \nThe getattr(obj, name[, default]) \u2212 to access the attribute of object.\nThe hasattr(obj,name) \u2212 to check if an attribute exists or not.\nThe setattr(obj,name,value) \u2212 to set an attribute. If attribute does not exist, then it would be created.\nThe delattr(obj, name) \u2212 to delete an attribute.\n \n \nhasattr(emp1, 'age')    # Returns true if 'age' attribute exists\ngetattr(emp1, 'age')    # Returns value of 'age' attribute\nsetattr(emp1, 'age', 8) # Set attribute 'age' at 8\ndelattr(empl, 'age')    # Delete attribute 'age'\n \n Built-In Class Attributes \n Every Python class keeps following built-in attributes and they can be accessed using dot operator like any other attribute \u2212 \n \n__dict__ \u2212 Dictionary containing the class's namespace.\n__doc__ \u2212 Class documentation string or none, if undefined. \n__name__ \u2212 Class name.\n__module__ \u2212 Module name in which the class is defined. This attribute is \"__main__\" in interactive mode. \n__bases__ \u2212 A possibly empty tuple containing the base classes, in the order of their occurrence in the base class list.\n \n For the above class let us try to access all these attributes \u2212 \n  Live Demo \n \n#!/usr/bin/python\n\nclass Employee:\n   'Common base class for all employees'\n   empCount = 0\n\n   def __init__(self, name, salary):\n      self.name = name\n      self.salary = salary\n      Employee.empCount += 1\n   \n   def displayCount(self):\n     print \"Total Employee %d\" % Employee.empCount\n\n   def displayEmployee(self):\n      print \"Name : \", self.name,  \", Salary: \", self.salary\n\nprint \"Employee.__doc__:\", Employee.__doc__\nprint \"Employee.__name__:\", Employee.__name__\nprint \"Employee.__module__:\", Employee.__module__\nprint \"Employee.__bases__:\", Employee.__bases__\nprint \"Employee.__dict__:\", Employee.__dict__\n \n When the above code is  executed, it produces the following result \u2212 \n \nEmployee.__doc__: Common base class for all employees\nEmployee.__name__: Employee\nEmployee.__module__: __main__\nEmployee.__bases__: ()\nEmployee.__dict__: {'__module__': '__main__', 'displayCount':\n<function displayCount at 0xb7c84994>, 'empCount': 2, \n'displayEmployee': <function displayEmployee at 0xb7c8441c>, \n'__doc__': 'Common base class for all employees', \n'__init__': <function __init__ at 0xb7c846bc>}\n \n Destroying Objects (Garbage Collection) \n Python deletes unneeded objects (built-in types or class instances) automatically to free the memory space. The process by which Python periodically reclaims blocks of memory that no longer are in use is termed Garbage Collection. \n Python's garbage collector runs during program execution and is triggered when an object's reference count reaches zero. An object's reference count changes as the number of aliases that point to it changes. \n An object's reference count increases when it is assigned a new name or placed in a container (list, tuple, or dictionary). The object's reference count decreases when it's deleted with del, its reference is reassigned, or its reference goes out of scope. When an object's reference count reaches zero, Python collects it automatically. \n \na = 40      # Create object <40>\nb = a       # Increase ref. count  of <40> \nc = [b]     # Increase ref. count  of <40> \n\ndel a       # Decrease ref. count  of <40>\nb = 100     # Decrease ref. count  of <40> \nc[0] = -1   # Decrease ref. count  of <40> \n \n You normally will not notice when the garbage collector destroys an orphaned instance and reclaims its space. But a class can implement the special method __del__(), called a destructor, that is invoked when the instance is about to be destroyed. This method might be used to clean up any non memory resources used by an instance. \n Example \n This __del__() destructor prints the class name of an instance that is about to be destroyed \u2212 \n  Live Demo \n \n#!/usr/bin/python\n\nclass Point:\n   def __init__( self, x=0, y=0):\n      self.x = x\n      self.y = y\n   def __del__(self):\n      class_name = self.__class__.__name__\n      print class_name, \"destroyed\"\n\npt1 = Point()\npt2 = pt1\npt3 = pt1\nprint id(pt1), id(pt2), id(pt3) # prints the ids of the obejcts\ndel pt1\ndel pt2\ndel pt3\n \n When the above code is  executed, it produces following result \u2212 \n \n3083401324 3083401324 3083401324\nPoint destroyed\n \n Note \u2212 Ideally, you should define your classes in separate file, then you should import them in your main program file using import statement. \n Class Inheritance \n Instead of starting from scratch, you can create a class by deriving it from a preexisting class by listing the parent class in parentheses after the new class name. \n The child class inherits the attributes of its parent class, and you can use those attributes as if they were defined in the child class. A child class can also override data members and methods from the parent. \n Syntax \n Derived classes are declared much like their parent class; however, a list of base classes to inherit from is given after the class name \u2212 \n \nclass SubClassName (ParentClass1[, ParentClass2, ...]):\n   'Optional class documentation string'\n   class_suite\n \n Example \n  Live Demo \n \n#!/usr/bin/python\n\nclass Parent:        # define parent class\n   parentAttr = 100\n   def __init__(self):\n      print \"Calling parent constructor\"\n\n   def parentMethod(self):\n      print 'Calling parent method'\n\n   def setAttr(self, attr):\n      Parent.parentAttr = attr\n\n   def getAttr(self):\n      print \"Parent attribute :\", Parent.parentAttr\n\nclass Child(Parent): # define child class\n   def __init__(self):\n      print \"Calling child constructor\"\n\n   def childMethod(self):\n      print 'Calling child method'\n\nc = Child()          # instance of child\nc.childMethod()      # child calls its method\nc.parentMethod()     # calls parent's method\nc.setAttr(200)       # again call parent's method\nc.getAttr()          # again call parent's method\n \n When the above code is  executed, it produces the following result \u2212 \n \nCalling child constructor\nCalling child method\nCalling parent method\nParent attribute : 200\n \n Similar way, you can drive a class from multiple parent classes as follows \u2212 \n \nclass A:        # define your class A\n.....\n\nclass B:         # define your class B\n.....\n\nclass C(A, B):   # subclass of A and B\n.....\n \n You can use issubclass() or isinstance() functions to check a relationships of two classes and instances. \n \nThe issubclass(sub, sup) boolean function returns true if the given subclass sub is indeed a subclass of the superclass sup.\nThe isinstance(obj, Class) boolean function returns true if obj is an instance of class Class or is an instance of a subclass of Class\n \n Overriding Methods \n You can always override your parent class methods. One reason for overriding parent's methods is because you may want special or different functionality in your subclass. \n Example \n  Live Demo \n \n#!/usr/bin/python\n\nclass Parent:        # define parent class\n   def myMethod(self):\n      print 'Calling parent method'\n\nclass Child(Parent): # define child class\n   def myMethod(self):\n      print 'Calling child method'\n\nc = Child()          # instance of child\nc.myMethod()         # child calls overridden method\n \n When the above code is  executed, it produces the following result \u2212 \n \nCalling child method\n \n Base Overloading Methods \n Following table lists some generic functionality that you can override in your own classes \u2212 \n \n\nSr.No.\nMethod, Description & Sample Call\n\n\n1\n__init__ ( self [,args...] )\nConstructor (with any optional arguments)\nSample Call : obj = className(args)\n\n\n2\n__del__( self )\nDestructor, deletes an object\nSample Call : del obj\n\n\n3\n__repr__( self )\nEvaluable string representation\nSample Call : repr(obj)\n\n\n4\n__str__( self )\nPrintable string representation\nSample Call : str(obj)\n\n\n5\n__cmp__ ( self, x )\nObject comparison\nSample Call : cmp(obj, x)\n\n \n Overloading Operators \n Suppose you have created a Vector class to represent two-dimensional vectors, what happens when you use the plus operator to add them? Most likely Python will yell at you. \n You could, however, define the __add__ method in your class to perform vector addition and then the plus operator would behave as per expectation \u2212 \n Example \n  Live Demo \n \n#!/usr/bin/python\n\nclass Vector:\n   def __init__(self, a, b):\n      self.a = a\n      self.b = b\n\n   def __str__(self):\n      return 'Vector (%d, %d)' % (self.a, self.b)\n   \n   def __add__(self,other):\n      return Vector(self.a + other.a, self.b + other.b)\n\nv1 = Vector(2,10)\nv2 = Vector(5,-2)\nprint v1 + v2\n \n When the above code is  executed, it produces the following result \u2212 \n \nVector(7,8)\n \n Data Hiding \n An object's attributes may or may not be visible outside the class definition. You need to name attributes with a double underscore prefix, and those attributes then are not be directly visible to outsiders. \n Example \n  Live Demo \n \n#!/usr/bin/python\n\nclass JustCounter:\n   __secretCount = 0\n  \n   def count(self):\n      self.__secretCount += 1\n      print self.__secretCount\n\ncounter = JustCounter()\ncounter.count()\ncounter.count()\nprint counter.__secretCount\n \n When the above code is  executed, it produces the following result \u2212 \n \n1\n2\nTraceback (most recent call last):\n   File \"test.py\", line 12, in <module>\n      print counter.__secretCount\nAttributeError: JustCounter instance has no attribute '__secretCount'\n \n Python protects those members by internally changing the name to include the class name. You can access such attributes as object._className__attrName. If you would replace your last line as following, then it works for you \u2212 \n \n.........................\nprint counter._JustCounter__secretCount\n \n When the above code is  executed, it produces the following result \u2212 \n \n1\n2\n2\n \n  \n \n Previous Page\n \n \n Print\n \n \nNext Page \u00a0\n \n  \n  PRINTING ENDS HERE  \n \nAdvertisements\n<!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//-->\n\n\n \n", "url": "https://www.tutorialspoint.com/python/python_classes_objects.htm", "html": "<!DOCTYPE html>\n\n<!--[if IE 8]><html class=\"ie ie8\"> <![endif]-->\n<!--[if IE 9]><html class=\"ie ie9\"> <![endif]-->\n<!--[if gt IE 9]><!--> <html> <!--<![endif]-->\n<head>\n<!-- Basic -->\n<meta charset=\"utf-8\"/>\n<title>Python Object Oriented</title>\n<meta content=\"Python Object Oriented - Learn Python in simple and easy steps starting from basic to advanced concepts with examples including Python Syntax Object Oriented Language, Methods, Tuples, Tools/Utilities, Exceptions Handling, Sockets, GUI, Extentions, XML Programming.\" name=\"description\">\n<meta content=\"Python, Tutorials, Learning, Beginners, Basics, Object Oriented Language, Methods, Overriding, Networking, Multithreading,Methods, Tuples, Tools/Utilities, Exceptions Handling, Sockets, GUI, Extentions, XML, Programming.\" name=\"Keywords\"/>\n<base href=\"https://www.tutorialspoint.com/\"/>\n<link href=\"/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"/>\n<meta content=\"width=device-width,initial-scale=1.0,user-scalable=yes\" name=\"viewport\"/>\n<meta content=\"en_US\" property=\"og:locale\">\n<meta content=\"website\" property=\"og:type\"/>\n<meta content=\"471319149685276\" property=\"fb:app_id\"/>\n<meta content=\"www.tutorialspoint.com\" property=\"og:site_name\"/>\n<meta content=\"yes\" name=\"apple-mobile-web-app-capable\"/>\n<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"/>\n<meta content=\"tutorialspoint.com\" name=\"author\"/>\n<script src=\"https://www.tutorialspoint.com/theme/js/script-min-v4.js?v=2\" type=\"text/javascript\"></script>\n<link href=\"https://www.tutorialspoint.com/theme/css/style-min.css?v=3.1\" rel=\"stylesheet\"/>\n<script>\r\nfunction openNav() {\t\r\n  document.getElementById(\"mySidenav\").style.width = \"250px\";\r\n  document.getElementById(\"right_obs\").style.display = \"block\";\r\n}\r\nfunction closeNav() {\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\nfunction close_obs_sidenav(){\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\n</script>\n<!-- Head Libs -->\n<!--[if IE 8]>\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/theme/css/ie8.css\">\r\n<![endif]-->\n<style>\r\n#privacy-banner {\r\n    position: fixed;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    max-width: 100%;\r\n    padding: 1rem .5rem;\r\n    background: #fff;\r\n    z-index: 1030;\r\n    color: #000;\r\n    font-size: 14px;\r\n    margin: 0;\r\n    display: none;\r\n    border-top: 2px solid rgb(130, 130, 130);\r\n  }\r\n  #privacy-banner p {\r\n    margin: 0;\r\n    color: #000;\r\n    text-align: center;\r\n  }\r\n  #privacy-banner a {\r\n    text-decoration: none;\r\n    margin: 20px auto 0 auto;\r\n    display: block;\r\n    max-width: 150px;\r\n  }\r\n  #privacy-banner a:hover {\r\n    text-decoration: underline;\r\n  }\r\n  #banner-learn {\r\n    color: #000;\r\n  }\r\n  #banner-accept {\r\n    padding: 7px 15px;\r\n    color: #fff;\r\n    border-radius: 5px;\r\n    background:#737373 !important;\r\n  }\r\n  @media (min-width: 768px) {\r\n    #privacy-banner {\r\n      padding: 1.5rem .5rem;\r\n    }\r\n    #privacy-banner a {\r\n      display: inline-block;\r\n      margin: 0 10px;\r\n    }\r\n}\r\npre.prettyprint.tryit {min-height:37px; background: #eee url(/python/images/try-it.jpg) top right no-repeat !important}select{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }\r\n.btnsbmt{ background: #fdbf00 !important;}\r\nul.nav-list.primary>li a.videolink{    background: none; margin: 0px; padding: 0px; border: 1px solid #d6d6d6;}\r\ndiv.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #fdbf00 url(/images/pattern.png) repeat center center !important;}\r\n.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #fdbf00 !important;}\r\n.submenu-item{ border-bottom: 2px solid #fdbf00 !important; border-top: 2px solid #fdbf00 !important }\r\n.ace_scroller{overflow: auto!important;}\r\na.demo{font-family: \"Open Sans\",Arial,sans-serif; background:#fdbf00; color:#fff; font-size:13px; padding:3px 10px; border:1px solid #d6d6d6; position:absolute; right:5px; margin:-6px 17px 0px 0px;}\r\na.demo:hover{opacity:.8}\r\n</style>\n<script>\r\n$(document).ready(function() {\r\n  $('input[name=\"q\"]').keydown(function(event){\r\n    if(event.keyCode == 13) {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n  });\r\n});\r\n</script>\n</meta></meta></head>\n<body onload=\"prettyPrint()\">\n<div class=\"wrapLoader\">\n<div class=\"imgLoader\">\n<img alt=\"\" height=\"70\" src=\"/images/loading-cg.gif\" width=\"70\"/>\n</div>\n</div>\n<div class=\"display-none\" id=\"right_obs\" onclick=\"close_obs_sidenav()\"></div>\n<header>\n<div class=\"container\">\n<h1 class=\"logo\">\n<a href=\"index.htm\" title=\"tutorialspoint\">\n<img alt=\"tutorialspoint\" src=\"/python/images/logo.png\"/>\n</a>\n</h1>\n<ul class=\"tp-inline-block pull-right\" id=\"tp-head-icons\">\n<li>\n<div class=\"tp-second-nav tp-display-none tp-pointer\" onclick=\"openNav()\">\n<i class=\"fa fa-th-large fa-lg\"></i>\n</div>\n</li>\n</ul>\n<button class=\"btn btn-responsive-nav btn-inverse\" data-target=\".nav-main-collapse\" data-toggle=\"collapse\" id=\"pull\" style=\"top: 24px!important\"> <i class=\"icon icon-bars\"></i> </button>\n<nav>\n<ul class=\"nav nav-pills nav-top\">\n<li><a href=\"/about/about_careers.htm\" style=\"background: #fffb09; font-weight: bold;\"><i class=\"icon icon-suitcase\"></i> Jobs</a></li>\n<li> <a href=\"/programming_examples/\" target=\"_blank\"><i class=\"fa fa-cubes\"></i> \u00a0Examples</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/whiteboard.htm\"><img alt=\"Whiteboard\" src=\"theme/css/icons/image-editor.png\" title=\"Whiteboard\"/> \u00a0Whiteboard</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/netmeeting.php\"><i class=\"fa-camera\"></i> \u00a0Net Meeting</a> </li>\n<li> <a href=\"/online_dev_tools.htm\"> <i class=\"dev-tools-menu\" style=\"opacity:.5\"></i> Tools </a> </li>\n<li> <a href=\"/articles/index.php\"><i class=\"icon icon-file-text-o\"></i> \u00a0Articles</a> </li>\n<li class=\"top-icons\">\n<ul class=\"social-icons\">\n<li class=\"facebook\"><a data-placement=\"bottom\" href=\"https://www.facebook.com/tutorialspointindia\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Facebook\">Facebook</a></li>\n<li class=\"googleplus\"><a data-placement=\"bottom\" href=\"https://plus.google.com/u/0/116678774017490391259/posts\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Google+\">Google+</a></li>\n<li class=\"twitter\"><a data-placement=\"bottom\" href=\"https://www.twitter.com/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Twitter\">Twitter</a></li>\n<li class=\"linkedin\"><a data-placement=\"bottom\" href=\"https://www.linkedin.com/company/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Linkedin\">Linkedin</a></li>\n<li class=\"youtube\"><a data-placement=\"bottom\" href=\"https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint YouTube\">YouTube</a></li>\n</ul>\n</li>\n</ul>\n</nav>\n</div>\n<div class=\"sidenav\" id=\"mySidenav\">\n<div class=\"navbar nav-main\">\n<div class=\"container\">\n<nav class=\"nav-main mega-menu\">\n<ul class=\"nav nav-pills nav-main\" id=\"mainMenu\">\n<li class=\"dropdown no-sub-menu\"> <a class=\"dropdown\" href=\"index.htm\"><i class=\"icon icon-home\"></i> Home</a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"/questions/index.php\"><i class=\"fa fa-send\"></i> Q/A </a> </li>\n<li class=\"dropdown\"><a class=\"dropdown\" href=\"tutorialslibrary.htm\"><span class=\"tut-lib\"> Library </span></a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"videotutorials/index.htm\"><i class=\"fa-toggle-right\"></i> Videos </a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"tutor_connect/index.php\"><i class=\"fa-user\"> </i> Tutors</a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"codingground.htm\"><i class=\"fa-code\"></i> Coding Ground </a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"https://store.tutorialspoint.com/\"><i class=\"fa-usd\"></i> Store </a> </li>\n<li class=\"dropdown no-sub-menu\">\n<div class=\"searchform-popup\">\n<input autocomplete=\"off\" class=\"header-search-box\" id=\"search-string\" name=\"q\" onblur=\"if (this.value == '') {this.value = 'Search your favorite tutorials...';}\" onfocus=\"if (this.value == 'Search your favorite tutorials...') {this.value = '';}\" placeholder=\"Search your favorite tutorials...\" type=\"text\"/>\n<div class=\"magnifying-glass\"><i class=\"icon-search\"></i> Search </div>\n</div>\n</li>\n</ul>\n</nav>\n</div>\n</div>\n</div>\n</header></body></html>\n\n<div style=\"clear:both;\"></div>\n<div class=\"main\" role=\"main\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-2\">\n<aside class=\"sidebar\">\n<style>\r\n.ts {\r\n   text-align:center !important;\r\n   vertical-align:middle !important;\r\n}\r\n</style>\n<div class=\"mini-logo\">\n<img alt=\"Python Tutorial\" src=\"/python/images/python-mini.jpg\">\n</img></div>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Python Basic Tutorial</li>\n<li><a href=\"/python/index.htm\" target=\"_top\">Python - Home</a></li>\n<li><a href=\"/python/python_overview.htm\" target=\"_top\">Python - Overview</a></li>\n<li><a href=\"/python/python_environment.htm\" target=\"_top\">Python - Environment Setup</a></li>\n<li><a href=\"/python/python_basic_syntax.htm\" target=\"_top\">Python - Basic Syntax</a></li>\n<li><a href=\"/python/python_variable_types.htm\" target=\"_top\">Python - Variable Types</a></li>\n<li><a href=\"/python/python_basic_operators.htm\" target=\"_top\">Python - Basic Operators</a></li>\n<li><a href=\"/python/python_decision_making.htm\" target=\"_top\">Python - Decision Making</a></li>\n<li><a href=\"/python/python_loops.htm\" target=\"_top\">Python - Loops</a></li>\n<li><a href=\"/python/python_numbers.htm\" target=\"_top\">Python - Numbers</a></li>\n<li><a href=\"/python/python_strings.htm\" target=\"_top\">Python - Strings</a></li>\n<li><a href=\"/python/python_lists.htm\" target=\"_top\">Python - Lists</a></li>\n<li><a href=\"/python/python_tuples.htm\" target=\"_top\">Python - Tuples</a></li>\n<li><a href=\"/python/python_dictionary.htm\" target=\"_top\">Python - Dictionary</a></li>\n<li><a href=\"/python/python_date_time.htm\" target=\"_top\">Python - Date &amp; Time</a></li>\n<li><a href=\"/python/python_functions.htm\" target=\"_top\">Python - Functions</a></li>\n<li><a href=\"/python/python_modules.htm\" target=\"_top\">Python - Modules</a></li>\n<li><a href=\"/python/python_files_io.htm\" target=\"_top\">Python - Files I/O</a></li>\n<li><a href=\"/python/python_exceptions.htm\" target=\"_top\">Python - Exceptions</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Python Advanced Tutorial</li>\n<li><a href=\"/python/python_classes_objects.htm\" target=\"_top\">Python - Classes/Objects</a></li>\n<li><a href=\"/python/python_reg_expressions.htm\" target=\"_top\">Python - Reg Expressions</a></li>\n<li><a href=\"/python/python_cgi_programming.htm\" target=\"_top\">Python - CGI Programming</a></li>\n<li><a href=\"/python/python_database_access.htm\" target=\"_top\">Python - Database Access</a></li>\n<li><a href=\"/python/python_networking.htm\" target=\"_top\">Python - Networking</a></li>\n<li><a href=\"/python/python_sending_email.htm\" target=\"_top\">Python - Sending Email</a></li>\n<li><a href=\"/python/python_multithreading.htm\" target=\"_top\">Python - Multithreading</a></li>\n<li><a href=\"/python/python_xml_processing.htm\" target=\"_top\">Python - XML Processing</a></li>\n<li><a href=\"/python/python_gui_programming.htm\" target=\"_top\">Python - GUI Programming</a></li>\n<li><a href=\"/python/python_further_extensions.htm\" target=\"_top\">Python - Further Extensions</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Python  Useful Resources</li>\n<li><a href=\"/python/python_questions_answers.htm\" target=\"_top\">Python - Questions and Answers</a></li>\n<li><a href=\"/python/python_quick_guide.htm\" target=\"_top\">Python - Quick Guide</a></li>\n<li><a href=\"/python/python_tools_utilities.htm\" target=\"_top\">Python - Tools/Utilities</a></li>\n<li><a href=\"/python/python_useful_resources.htm\" target=\"_top\">Python - Useful Resources</a></li>\n<li><a href=\"/python/python_discussion.htm\" target=\"_top\">Python - Discussion</a></li>\n</ul>\n<ul class=\"nav nav-list primary push-bottom left-menu special\">\n<li class=\"sreading\">Selected Reading</li>\n<li><a href=\"/upsc_ias_exams.htm\" target=\"_top\">UPSC IAS Exams Notes</a></li>\n<li><a href=\"/developers_best_practices/index.htm\" target=\"_top\">Developer's Best Practices</a></li>\n<li><a href=\"/questions_and_answers.htm\" target=\"_top\">Questions and Answers</a></li>\n<li><a href=\"/effective_resume_writing.htm\" target=\"_top\">Effective Resume Writing</a></li>\n<li><a href=\"/hr_interview_questions/index.htm\" target=\"_top\">HR Interview Questions</a></li>\n<li><a href=\"/computer_glossary.htm\" target=\"_top\">Computer Glossary</a></li>\n<li><a href=\"/computer_whoiswho.htm\" target=\"_top\">Who is Who</a></li>\n</ul>\n</aside>\n</div>\n<!-- PRINTING STARTS HERE -->\n<div class=\"row\">\n<div class=\"content\">\n<div class=\"col-md-7 middle-col\">\n<h1>Python - Object Oriented</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_exceptions.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_reg_expressions.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>Python has been an object-oriented language since it existed. Because of this, creating and using classes and objects are downright easy. This chapter helps you become an expert in using Python's object-oriented programming support.</p>\n<p>If you do not have any previous experience with object-oriented (OO) programming, you may want to consult an introductory course on it or at least a tutorial of some sort so that you have a grasp of the basic concepts.</p>\n<p>However, here is small introduction of Object-Oriented Programming (OOP) to bring you at speed \u2212</p>\n<h2>Overview of OOP Terminology</h2>\n<ul class=\"list\">\n<li><p><b>Class</b> \u2212 A user-defined prototype for an object that defines a set of attributes that characterize any object of the class. The attributes are data members (class variables and instance variables) and methods, accessed via dot notation.</p></li>\n<li><p><b>Class variable</b> \u2212 A variable that is shared by all instances of a class. Class variables are defined within a class but outside any of the class's methods. Class variables are not used as frequently as instance variables are.</p></li>\n<li><p><b>Data member</b> \u2212 A class variable or instance variable that holds data associated with a class and its objects.</p></li>\n<li><p><b>Function overloading</b> \u2212 The assignment of more than one behavior to a particular function. The operation performed varies by the types of objects or arguments involved.</p></li>\n<li><p><b>Instance variable</b> \u2212 A variable that is defined inside a method and belongs only to the current instance of a class.</p></li>\n<li><p><b>Inheritance</b> \u2212 The transfer of the characteristics of a class to other classes that are derived from it.</p></li>\n<li><p><b>Instance</b> \u2212  An individual object of a certain class. An object obj that belongs to a class Circle, for example, is an instance of the class Circle.</p></li>\n<li><p><b>Instantiation</b> \u2212 The creation of an instance of a class.</p></li>\n<li><p><b>Method</b> \u2212 A special kind of function that is defined in a class definition.</p></li>\n<li><p><b>Object</b> \u2212 A unique instance of a data structure that's defined by its class. An object comprises both data members (class variables and instance variables) and methods.</p></li>\n<li><p><b>Operator overloading</b> \u2212 The assignment of more than one function to a particular operator.</p></li>\n</ul>\n<h2>Creating Classes</h2>\n<p>The <i>class</i> statement creates a new class definition. The name of the class immediately follows the keyword <i>class</i> followed by a colon as follows \u2212</p>\n<pre class=\"result notranslate\">\nclass ClassName:\n   'Optional class documentation string'\n   class_suite\n</pre>\n<ul class=\"list\">\n<li><p>The class has a documentation string, which can be accessed via <i>ClassName.__doc__</i>.</p></li>\n<li><p>The <i>class_suite</i> consists of all the component statements defining class members, data attributes and functions.</p></li>\n</ul>\n<h3>Example</h3>\n<p>Following is the example of a simple Python class \u2212</p>\n<pre class=\"prettyprint notranslate\">\nclass Employee:\n   'Common base class for all employees'\n   empCount = 0\n\n   def __init__(self, name, salary):\n      self.name = name\n      self.salary = salary\n      Employee.empCount += 1\n   \n   def displayCount(self):\n     print \"Total Employee %d\" % Employee.empCount\n\n   def displayEmployee(self):\n      print \"Name : \", self.name,  \", Salary: \", self.salary\n</pre>\n<ul class=\"list\">\n<li><p>The variable <i>empCount</i> is a class variable whose value is shared among all instances of a this class. This can be accessed as <i>Employee.empCount</i> from inside the class or outside the class.</p></li>\n<li><p>The first method <i>__init__()</i> is a special method, which is called class constructor or initialization method that Python calls when you create a new instance of this class.</p></li>\n<li><p>You declare other class methods like normal functions with the exception that the first argument to each method is <i>self</i>. Python adds the <i>self</i> argument to the list for you; you do not need to include it when you call the methods.</p></li>\n</ul>\n<h2>Creating Instance Objects</h2>\n<p>To create instances of a class, you call the class using class name and pass in whatever arguments its <i>__init__</i> method accepts.</p>\n<pre class=\"result notranslate\">\n\"This would create first object of Employee class\"\nemp1 = Employee(\"Zara\", 2000)\n\"This would create second object of Employee class\"\nemp2 = Employee(\"Manni\", 5000)\n</pre>\n<h2>Accessing Attributes</h2>\n<p>You access the object's attributes using the dot operator with object. Class variable would be accessed using class name as follows \u2212</p>\n<pre class=\"result notranslate\">\nemp1.displayEmployee()\nemp2.displayEmployee()\nprint \"Total Employee %d\" % Employee.empCount\n</pre>\n<p>Now, putting all  the concepts together \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/hbnZb4\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nclass Employee:\n   'Common base class for all employees'\n   empCount = 0\n\n   def __init__(self, name, salary):\n      self.name = name\n      self.salary = salary\n      Employee.empCount += 1\n   \n   def displayCount(self):\n     print \"Total Employee %d\" % Employee.empCount\n\n   def displayEmployee(self):\n      print \"Name : \", self.name,  \", Salary: \", self.salary\n\n\"This would create first object of Employee class\"\nemp1 = Employee(\"Zara\", 2000)\n\"This would create second object of Employee class\"\nemp2 = Employee(\"Manni\", 5000)\nemp1.displayEmployee()\nemp2.displayEmployee()\nprint \"Total Employee %d\" % Employee.empCount\n</pre>\n<p>When the above code is  executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nName :  Zara ,Salary:  2000\nName :  Manni ,Salary:  5000\nTotal Employee 2\n</pre>\n<p>You can add, remove, or modify attributes of classes and objects at any time \u2212</p>\n<pre class=\"result notranslate\">\nemp1.age = 7  # Add an 'age' attribute.\nemp1.age = 8  # Modify 'age' attribute.\ndel emp1.age  # Delete 'age' attribute.\n</pre>\n<p>Instead of using the normal statements to access attributes, you can use the following functions \u2212</p>\n<ul class=\"list\">\n<li><p>The <b>getattr(obj, name[, default])</b> \u2212 to access the attribute of object.</p></li>\n<li><p>The <b>hasattr(obj,name)</b> \u2212 to check if an attribute exists or not.</p></li>\n<li><p>The <b>setattr(obj,name,value)</b> \u2212 to set an attribute. If attribute does not exist, then it would be created.</p></li>\n<li><p>The <b>delattr(obj, name)</b> \u2212 to delete an attribute.</p></li>\n</ul>\n<pre class=\"result notranslate\">\nhasattr(emp1, 'age')    # Returns true if 'age' attribute exists\ngetattr(emp1, 'age')    # Returns value of 'age' attribute\nsetattr(emp1, 'age', 8) # Set attribute 'age' at 8\ndelattr(empl, 'age')    # Delete attribute 'age'\n</pre>\n<h2>Built-In Class Attributes</h2>\n<p>Every Python class keeps following built-in attributes and they can be accessed using dot operator like any other attribute \u2212</p>\n<ul class=\"list\">\n<li><p><b>__dict__</b> \u2212 Dictionary containing the class's namespace.</p></li>\n<li><p><b>__doc__</b> \u2212 Class documentation string or none, if undefined. </p></li>\n<li><p><b>__name__</b> \u2212 Class name.</p></li>\n<li><p><b>__module__</b> \u2212 Module name in which the class is defined. This attribute is \"__main__\" in interactive mode. </p></li>\n<li><p><b>__bases__</b> \u2212 A possibly empty tuple containing the base classes, in the order of their occurrence in the base class list.</p></li>\n</ul>\n<p>For the above class let us try to access all these attributes \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/CESJr8\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nclass Employee:\n   'Common base class for all employees'\n   empCount = 0\n\n   def __init__(self, name, salary):\n      self.name = name\n      self.salary = salary\n      Employee.empCount += 1\n   \n   def displayCount(self):\n     print \"Total Employee %d\" % Employee.empCount\n\n   def displayEmployee(self):\n      print \"Name : \", self.name,  \", Salary: \", self.salary\n\nprint \"Employee.__doc__:\", Employee.__doc__\nprint \"Employee.__name__:\", Employee.__name__\nprint \"Employee.__module__:\", Employee.__module__\nprint \"Employee.__bases__:\", Employee.__bases__\nprint \"Employee.__dict__:\", Employee.__dict__\n</pre>\n<p>When the above code is  executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nEmployee.__doc__: Common base class for all employees\nEmployee.__name__: Employee\nEmployee.__module__: __main__\nEmployee.__bases__: ()\nEmployee.__dict__: {'__module__': '__main__', 'displayCount':\n&lt;function displayCount at 0xb7c84994&gt;, 'empCount': 2, \n'displayEmployee': &lt;function displayEmployee at 0xb7c8441c&gt;, \n'__doc__': 'Common base class for all employees', \n'__init__': &lt;function __init__ at 0xb7c846bc&gt;}\n</pre>\n<h2>Destroying Objects (Garbage Collection)</h2>\n<p>Python deletes unneeded objects (built-in types or class instances) automatically to free the memory space. The process by which Python periodically reclaims blocks of memory that no longer are in use is termed Garbage Collection.</p>\n<p>Python's garbage collector runs during program execution and is triggered when an object's reference count reaches zero. An object's reference count changes as the number of aliases that point to it changes.</p>\n<p>An object's reference count increases when it is assigned a new name or placed in a container (list, tuple, or dictionary). The object's reference count decreases when it's deleted with <i>del</i>, its reference is reassigned, or its reference goes out of scope. When an object's reference count reaches zero, Python collects it automatically.</p>\n<pre class=\"result notranslate\">\na = 40      # Create object &lt;40&gt;\nb = a       # Increase ref. count  of &lt;40&gt; \nc = [b]     # Increase ref. count  of &lt;40&gt; \n\ndel a       # Decrease ref. count  of &lt;40&gt;\nb = 100     # Decrease ref. count  of &lt;40&gt; \nc[0] = -1   # Decrease ref. count  of &lt;40&gt; \n</pre>\n<p>You normally will not notice when the garbage collector destroys an orphaned instance and reclaims its space. But a class can implement the special method <i>__del__()</i>, called a destructor, that is invoked when the instance is about to be destroyed. This method might be used to clean up any non memory resources used by an instance.</p>\n<h3>Example</h3>\n<p>This __del__() destructor prints the class name of an instance that is about to be destroyed \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/x2iiCA\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nclass Point:\n   def __init__( self, x=0, y=0):\n      self.x = x\n      self.y = y\n   def __del__(self):\n      class_name = self.__class__.__name__\n      print class_name, \"destroyed\"\n\npt1 = Point()\npt2 = pt1\npt3 = pt1\nprint id(pt1), id(pt2), id(pt3) # prints the ids of the obejcts\ndel pt1\ndel pt2\ndel pt3\n</pre>\n<p>When the above code is  executed, it produces following result \u2212</p>\n<pre class=\"result notranslate\">\n3083401324 3083401324 3083401324\nPoint destroyed\n</pre>\n<p><b>Note</b> \u2212 Ideally, you should define your classes in separate file, then you should import them in your main program file using <i>import</i> statement.</p>\n<h2>Class Inheritance</h2>\n<p>Instead of starting from scratch, you can create a class by deriving it from a preexisting class by listing the parent class in parentheses after the new class name.</p>\n<p>The child class inherits the attributes of its parent class, and you can use those attributes as if they were defined in the child class. A child class can also override data members and methods from the parent.</p>\n<h3>Syntax</h3>\n<p>Derived classes are declared much like their parent class; however, a list of base classes to inherit from is given after the class name \u2212</p>\n<pre class=\"prettyprint notranslate\">\nclass SubClassName (ParentClass1[, ParentClass2, ...]):\n   'Optional class documentation string'\n   class_suite\n</pre>\n<h3>Example</h3>\n<a class=\"demo\" href=\"http://tpcg.io/6qlvTh\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nclass Parent:        # define parent class\n   parentAttr = 100\n   def __init__(self):\n      print \"Calling parent constructor\"\n\n   def parentMethod(self):\n      print 'Calling parent method'\n\n   def setAttr(self, attr):\n      Parent.parentAttr = attr\n\n   def getAttr(self):\n      print \"Parent attribute :\", Parent.parentAttr\n\nclass Child(Parent): # define child class\n   def __init__(self):\n      print \"Calling child constructor\"\n\n   def childMethod(self):\n      print 'Calling child method'\n\nc = Child()          # instance of child\nc.childMethod()      # child calls its method\nc.parentMethod()     # calls parent's method\nc.setAttr(200)       # again call parent's method\nc.getAttr()          # again call parent's method\n</pre>\n<p>When the above code is  executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nCalling child constructor\nCalling child method\nCalling parent method\nParent attribute : 200\n</pre>\n<p>Similar way, you can drive a class from multiple parent classes as follows \u2212</p>\n<pre class=\"result notranslate\">\nclass A:        # define your class A\n.....\n\nclass B:         # define your class B\n.....\n\nclass C(A, B):   # subclass of A and B\n.....\n</pre>\n<p>You can use issubclass() or isinstance() functions to check a relationships of two classes and instances.</p>\n<ul class=\"list\">\n<li><p>The <b>issubclass(sub, sup)</b> boolean function returns true if the given subclass <b>sub</b> is indeed a subclass of the superclass <b>sup</b>.</p></li>\n<li><p>The <b>isinstance(obj, Class)</b> boolean function returns true if <i>obj</i> is an instance of class <i>Class</i> or is an instance of a subclass of Class</p></li>\n</ul>\n<h2>Overriding Methods</h2>\n<p>You can always override your parent class methods. One reason for overriding parent's methods is because you may want special or different functionality in your subclass.</p>\n<h3>Example</h3>\n<a class=\"demo\" href=\"http://tpcg.io/94KY94\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nclass Parent:        # define parent class\n   def myMethod(self):\n      print 'Calling parent method'\n\nclass Child(Parent): # define child class\n   def myMethod(self):\n      print 'Calling child method'\n\nc = Child()          # instance of child\nc.myMethod()         # child calls overridden method\n</pre>\n<p>When the above code is  executed, it produces the following result \u2212</p>\n<pre class=\"prettyprint notranslate\">\nCalling child method\n</pre>\n<h2>Base Overloading Methods</h2>\n<p>Following table lists some generic functionality that you can override in your own classes \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;width:10%\">Sr.No.</th>\n<th style=\"text-align:center;\">Method, Description &amp; Sample Call</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>__init__ ( self [,args...] )</b></p>\n<p>Constructor (with any optional arguments)</p>\n<p>Sample Call : <i>obj = className(args)</i></p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>__del__( self )</b></p>\n<p>Destructor, deletes an object</p>\n<p>Sample Call : <i>del obj</i></p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>__repr__( self )</b></p>\n<p>Evaluable string representation</p>\n<p>Sample Call : <i>repr(obj)</i></p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>__str__( self )</b></p>\n<p>Printable string representation</p>\n<p>Sample Call : <i>str(obj)</i></p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>__cmp__ ( self, x )</b></p>\n<p>Object comparison</p>\n<p>Sample Call : <i>cmp(obj, x)</i></p></td>\n</tr>\n</table>\n<h2>Overloading Operators</h2>\n<p>Suppose you have created a Vector class to represent two-dimensional vectors, what happens when you use the plus operator to add them? Most likely Python will yell at you.</p>\n<p>You could, however, define the <i>__add__</i> method in your class to perform vector addition and then the plus operator would behave as per expectation \u2212</p>\n<h3>Example</h3>\n<a class=\"demo\" href=\"http://tpcg.io/HNbb5f\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nclass Vector:\n   def __init__(self, a, b):\n      self.a = a\n      self.b = b\n\n   def __str__(self):\n      return 'Vector (%d, %d)' % (self.a, self.b)\n   \n   def __add__(self,other):\n      return Vector(self.a + other.a, self.b + other.b)\n\nv1 = Vector(2,10)\nv2 = Vector(5,-2)\nprint v1 + v2\n</pre>\n<p>When the above code is  executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nVector(7,8)\n</pre>\n<h2>Data Hiding</h2>\n<p>An object's attributes may or may not be visible outside the class definition. You need to name attributes with a double underscore prefix, and those attributes then are not be directly visible to outsiders.</p>\n<h3>Example</h3>\n<a class=\"demo\" href=\"http://tpcg.io/T0JYMC\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nclass JustCounter:\n   __secretCount = 0\n  \n   def count(self):\n      self.__secretCount += 1\n      print self.__secretCount\n\ncounter = JustCounter()\ncounter.count()\ncounter.count()\nprint counter.__secretCount\n</pre>\n<p>When the above code is  executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\n1\n2\nTraceback (most recent call last):\n   File \"test.py\", line 12, in &lt;module&gt;\n      print counter.__secretCount\nAttributeError: JustCounter instance has no attribute '__secretCount'\n</pre>\n<p>Python protects those members by internally changing the name to include the class name. You can access such attributes as <i>object._className__attrName</i>. If you would replace your last line as following, then it works for you \u2212</p>\n<pre class=\"result notranslate\">\n.........................\nprint counter._JustCounter__secretCount\n</pre>\n<p>When the above code is  executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\n1\n2\n2\n</pre>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_exceptions.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_reg_expressions.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n<div class=\"row\">\n<div class=\"col-md-3\" id=\"rightbar\">\n<div class=\"simple-ad\">\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.facebook.com/sharer.php?u=' + 'https://www.tutorialspoint.com/python/python_classes_objects.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/facebookIcon.jpg\">\n</img></a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://twitter.com/share?url=' + 'https://www.tutorialspoint.com/python/python_classes_objects.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/twitterIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'https://www.tutorialspoint.com/python/python_classes_objects.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/linkedinIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=https://www.tutorialspoint.com/python/python_classes_objects.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/googlePlusIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.stumbleupon.com/submit?url=https://www.tutorialspoint.com/python/python_classes_objects.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/StumbleUponIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://reddit.com/submit?url=https://www.tutorialspoint.com/python/python_classes_objects.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/reddit.jpg\"/>\n</a>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\ngoogle_ad_format = \"300x250_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 600;\ngoogle_ad_format = \"300x600_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"ca-pub-2537027957187252\";\n/* Right Side Ad */\ngoogle_ad_slot = \"right_side_ad\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\n//-->\n</script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"footer-copyright\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-1\">\n<a class=\"logo\" href=\"index.htm\"> <img alt=\"Tutorials Point\" class=\"img-responsive\" src=\"/scripts/img/logo-footer.png\"/> </a>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<nav id=\"sub-menu\">\n<ul>\n<li><a href=\"/about/about_privacy.htm\">Privacy Policy</a></li>\n<li><a href=\"/about/about_cookies.htm\">Cookies Policy</a></li>\n<li><a href=\"/about/contact_us.htm\">Contact</a></li>\n</ul>\n</nav>\n</div>\n<div class=\"col-md-3 col-sm-12 col-xs-12\">\n<p>\u00a9 Copyright 2019. All Rights Reserved.</p>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<div class=\"news-group\">\n<input autocomplete=\"off\" class=\"form-control-foot search\" id=\"textemail\" name=\"textemail\" onblur=\"if (this.value == '') {this.value = 'Enter email for newsletter...';}\" onfocus=\"if (this.value == 'Enter email for newsletter...') {this.value = '';}\" placeholder=\"Enter email for newsletter\" type=\"text\"/>\n<span class=\"input-group-btn\"> <button class=\"btn btn-default btn-footer\" id=\"btnemail\" onclick=\"javascript:void(0);\" type=\"submit\">go</button> </span>\n<div id=\"newsresponse\"></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"privacy-banner\">\n<div>\n<p>\n      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.\n      <a href=\"javascript:void(0)\" id=\"banner-accept\">Accept</a>\n<a href=\"/about/about_cookies.htm\" id=\"banner-learn\" target=\"_blank\">Learn more</a>\n</p>\n</div>\n</div>\n<script>\n// Banner Trigger if Not Closed\nif (!localStorage.bannerClosed) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n} else {\n  document.getElementById('privacy-banner').style.display = \"none\";\n}\ndocument.getElementById('banner-accept').addEventListener('click', function() {\n  document.getElementById('privacy-banner').style.display = \"none\";\n  localStorage.bannerClosed = 'true';\n});\nif (navigator.userAgent.match(/Opera|OPR\\//)) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n}\n</script>\n<!-- Libs -->\n<script src=\"/theme/js/custom-min.js?v=7\"></script>\n<script src=\"https://www.google-analytics.com/urchin.js\">\n</script>\n<script>\n_uacct = \"UA-232293-6\";\nurchinTracker();\n$('.pg-icon').click(function(){\n   $('.wrapLoader').show();\n});\n</script>\n<script src=\"/theme/js/jquery.colorbox-min.js\"></script>\n<script>\n   var tryit = new $.TryIt('/python/try_python.php');\n   tryit.compile();\n</script>\n\n\n", "title": "Python - Object Oriented", "content_html": "<div class=\"col-md-7 middle-col\">\n<h1>Python - Object Oriented</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_exceptions.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_reg_expressions.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>Python has been an object-oriented language since it existed. Because of this, creating and using classes and objects are downright easy. This chapter helps you become an expert in using Python's object-oriented programming support.</p>\n<p>If you do not have any previous experience with object-oriented (OO) programming, you may want to consult an introductory course on it or at least a tutorial of some sort so that you have a grasp of the basic concepts.</p>\n<p>However, here is small introduction of Object-Oriented Programming (OOP) to bring you at speed \u2212</p>\n<h2>Overview of OOP Terminology</h2>\n<ul class=\"list\">\n<li><p><b>Class</b> \u2212 A user-defined prototype for an object that defines a set of attributes that characterize any object of the class. The attributes are data members (class variables and instance variables) and methods, accessed via dot notation.</p></li>\n<li><p><b>Class variable</b> \u2212 A variable that is shared by all instances of a class. Class variables are defined within a class but outside any of the class's methods. Class variables are not used as frequently as instance variables are.</p></li>\n<li><p><b>Data member</b> \u2212 A class variable or instance variable that holds data associated with a class and its objects.</p></li>\n<li><p><b>Function overloading</b> \u2212 The assignment of more than one behavior to a particular function. The operation performed varies by the types of objects or arguments involved.</p></li>\n<li><p><b>Instance variable</b> \u2212 A variable that is defined inside a method and belongs only to the current instance of a class.</p></li>\n<li><p><b>Inheritance</b> \u2212 The transfer of the characteristics of a class to other classes that are derived from it.</p></li>\n<li><p><b>Instance</b> \u2212  An individual object of a certain class. An object obj that belongs to a class Circle, for example, is an instance of the class Circle.</p></li>\n<li><p><b>Instantiation</b> \u2212 The creation of an instance of a class.</p></li>\n<li><p><b>Method</b> \u2212 A special kind of function that is defined in a class definition.</p></li>\n<li><p><b>Object</b> \u2212 A unique instance of a data structure that's defined by its class. An object comprises both data members (class variables and instance variables) and methods.</p></li>\n<li><p><b>Operator overloading</b> \u2212 The assignment of more than one function to a particular operator.</p></li>\n</ul>\n<h2>Creating Classes</h2>\n<p>The <i>class</i> statement creates a new class definition. The name of the class immediately follows the keyword <i>class</i> followed by a colon as follows \u2212</p>\n<pre class=\"result notranslate\">\nclass ClassName:\n   'Optional class documentation string'\n   class_suite\n</pre>\n<ul class=\"list\">\n<li><p>The class has a documentation string, which can be accessed via <i>ClassName.__doc__</i>.</p></li>\n<li><p>The <i>class_suite</i> consists of all the component statements defining class members, data attributes and functions.</p></li>\n</ul>\n<h3>Example</h3>\n<p>Following is the example of a simple Python class \u2212</p>\n<pre class=\"prettyprint notranslate\">\nclass Employee:\n   'Common base class for all employees'\n   empCount = 0\n\n   def __init__(self, name, salary):\n      self.name = name\n      self.salary = salary\n      Employee.empCount += 1\n   \n   def displayCount(self):\n     print \"Total Employee %d\" % Employee.empCount\n\n   def displayEmployee(self):\n      print \"Name : \", self.name,  \", Salary: \", self.salary\n</pre>\n<ul class=\"list\">\n<li><p>The variable <i>empCount</i> is a class variable whose value is shared among all instances of a this class. This can be accessed as <i>Employee.empCount</i> from inside the class or outside the class.</p></li>\n<li><p>The first method <i>__init__()</i> is a special method, which is called class constructor or initialization method that Python calls when you create a new instance of this class.</p></li>\n<li><p>You declare other class methods like normal functions with the exception that the first argument to each method is <i>self</i>. Python adds the <i>self</i> argument to the list for you; you do not need to include it when you call the methods.</p></li>\n</ul>\n<h2>Creating Instance Objects</h2>\n<p>To create instances of a class, you call the class using class name and pass in whatever arguments its <i>__init__</i> method accepts.</p>\n<pre class=\"result notranslate\">\n\"This would create first object of Employee class\"\nemp1 = Employee(\"Zara\", 2000)\n\"This would create second object of Employee class\"\nemp2 = Employee(\"Manni\", 5000)\n</pre>\n<h2>Accessing Attributes</h2>\n<p>You access the object's attributes using the dot operator with object. Class variable would be accessed using class name as follows \u2212</p>\n<pre class=\"result notranslate\">\nemp1.displayEmployee()\nemp2.displayEmployee()\nprint \"Total Employee %d\" % Employee.empCount\n</pre>\n<p>Now, putting all  the concepts together \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/hbnZb4\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nclass Employee:\n   'Common base class for all employees'\n   empCount = 0\n\n   def __init__(self, name, salary):\n      self.name = name\n      self.salary = salary\n      Employee.empCount += 1\n   \n   def displayCount(self):\n     print \"Total Employee %d\" % Employee.empCount\n\n   def displayEmployee(self):\n      print \"Name : \", self.name,  \", Salary: \", self.salary\n\n\"This would create first object of Employee class\"\nemp1 = Employee(\"Zara\", 2000)\n\"This would create second object of Employee class\"\nemp2 = Employee(\"Manni\", 5000)\nemp1.displayEmployee()\nemp2.displayEmployee()\nprint \"Total Employee %d\" % Employee.empCount\n</pre>\n<p>When the above code is  executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nName :  Zara ,Salary:  2000\nName :  Manni ,Salary:  5000\nTotal Employee 2\n</pre>\n<p>You can add, remove, or modify attributes of classes and objects at any time \u2212</p>\n<pre class=\"result notranslate\">\nemp1.age = 7  # Add an 'age' attribute.\nemp1.age = 8  # Modify 'age' attribute.\ndel emp1.age  # Delete 'age' attribute.\n</pre>\n<p>Instead of using the normal statements to access attributes, you can use the following functions \u2212</p>\n<ul class=\"list\">\n<li><p>The <b>getattr(obj, name[, default])</b> \u2212 to access the attribute of object.</p></li>\n<li><p>The <b>hasattr(obj,name)</b> \u2212 to check if an attribute exists or not.</p></li>\n<li><p>The <b>setattr(obj,name,value)</b> \u2212 to set an attribute. If attribute does not exist, then it would be created.</p></li>\n<li><p>The <b>delattr(obj, name)</b> \u2212 to delete an attribute.</p></li>\n</ul>\n<pre class=\"result notranslate\">\nhasattr(emp1, 'age')    # Returns true if 'age' attribute exists\ngetattr(emp1, 'age')    # Returns value of 'age' attribute\nsetattr(emp1, 'age', 8) # Set attribute 'age' at 8\ndelattr(empl, 'age')    # Delete attribute 'age'\n</pre>\n<h2>Built-In Class Attributes</h2>\n<p>Every Python class keeps following built-in attributes and they can be accessed using dot operator like any other attribute \u2212</p>\n<ul class=\"list\">\n<li><p><b>__dict__</b> \u2212 Dictionary containing the class's namespace.</p></li>\n<li><p><b>__doc__</b> \u2212 Class documentation string or none, if undefined. </p></li>\n<li><p><b>__name__</b> \u2212 Class name.</p></li>\n<li><p><b>__module__</b> \u2212 Module name in which the class is defined. This attribute is \"__main__\" in interactive mode. </p></li>\n<li><p><b>__bases__</b> \u2212 A possibly empty tuple containing the base classes, in the order of their occurrence in the base class list.</p></li>\n</ul>\n<p>For the above class let us try to access all these attributes \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/CESJr8\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nclass Employee:\n   'Common base class for all employees'\n   empCount = 0\n\n   def __init__(self, name, salary):\n      self.name = name\n      self.salary = salary\n      Employee.empCount += 1\n   \n   def displayCount(self):\n     print \"Total Employee %d\" % Employee.empCount\n\n   def displayEmployee(self):\n      print \"Name : \", self.name,  \", Salary: \", self.salary\n\nprint \"Employee.__doc__:\", Employee.__doc__\nprint \"Employee.__name__:\", Employee.__name__\nprint \"Employee.__module__:\", Employee.__module__\nprint \"Employee.__bases__:\", Employee.__bases__\nprint \"Employee.__dict__:\", Employee.__dict__\n</pre>\n<p>When the above code is  executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nEmployee.__doc__: Common base class for all employees\nEmployee.__name__: Employee\nEmployee.__module__: __main__\nEmployee.__bases__: ()\nEmployee.__dict__: {'__module__': '__main__', 'displayCount':\n&lt;function displayCount at 0xb7c84994&gt;, 'empCount': 2, \n'displayEmployee': &lt;function displayEmployee at 0xb7c8441c&gt;, \n'__doc__': 'Common base class for all employees', \n'__init__': &lt;function __init__ at 0xb7c846bc&gt;}\n</pre>\n<h2>Destroying Objects (Garbage Collection)</h2>\n<p>Python deletes unneeded objects (built-in types or class instances) automatically to free the memory space. The process by which Python periodically reclaims blocks of memory that no longer are in use is termed Garbage Collection.</p>\n<p>Python's garbage collector runs during program execution and is triggered when an object's reference count reaches zero. An object's reference count changes as the number of aliases that point to it changes.</p>\n<p>An object's reference count increases when it is assigned a new name or placed in a container (list, tuple, or dictionary). The object's reference count decreases when it's deleted with <i>del</i>, its reference is reassigned, or its reference goes out of scope. When an object's reference count reaches zero, Python collects it automatically.</p>\n<pre class=\"result notranslate\">\na = 40      # Create object &lt;40&gt;\nb = a       # Increase ref. count  of &lt;40&gt; \nc = [b]     # Increase ref. count  of &lt;40&gt; \n\ndel a       # Decrease ref. count  of &lt;40&gt;\nb = 100     # Decrease ref. count  of &lt;40&gt; \nc[0] = -1   # Decrease ref. count  of &lt;40&gt; \n</pre>\n<p>You normally will not notice when the garbage collector destroys an orphaned instance and reclaims its space. But a class can implement the special method <i>__del__()</i>, called a destructor, that is invoked when the instance is about to be destroyed. This method might be used to clean up any non memory resources used by an instance.</p>\n<h3>Example</h3>\n<p>This __del__() destructor prints the class name of an instance that is about to be destroyed \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/x2iiCA\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nclass Point:\n   def __init__( self, x=0, y=0):\n      self.x = x\n      self.y = y\n   def __del__(self):\n      class_name = self.__class__.__name__\n      print class_name, \"destroyed\"\n\npt1 = Point()\npt2 = pt1\npt3 = pt1\nprint id(pt1), id(pt2), id(pt3) # prints the ids of the obejcts\ndel pt1\ndel pt2\ndel pt3\n</pre>\n<p>When the above code is  executed, it produces following result \u2212</p>\n<pre class=\"result notranslate\">\n3083401324 3083401324 3083401324\nPoint destroyed\n</pre>\n<p><b>Note</b> \u2212 Ideally, you should define your classes in separate file, then you should import them in your main program file using <i>import</i> statement.</p>\n<h2>Class Inheritance</h2>\n<p>Instead of starting from scratch, you can create a class by deriving it from a preexisting class by listing the parent class in parentheses after the new class name.</p>\n<p>The child class inherits the attributes of its parent class, and you can use those attributes as if they were defined in the child class. A child class can also override data members and methods from the parent.</p>\n<h3>Syntax</h3>\n<p>Derived classes are declared much like their parent class; however, a list of base classes to inherit from is given after the class name \u2212</p>\n<pre class=\"prettyprint notranslate\">\nclass SubClassName (ParentClass1[, ParentClass2, ...]):\n   'Optional class documentation string'\n   class_suite\n</pre>\n<h3>Example</h3>\n<a class=\"demo\" href=\"http://tpcg.io/6qlvTh\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nclass Parent:        # define parent class\n   parentAttr = 100\n   def __init__(self):\n      print \"Calling parent constructor\"\n\n   def parentMethod(self):\n      print 'Calling parent method'\n\n   def setAttr(self, attr):\n      Parent.parentAttr = attr\n\n   def getAttr(self):\n      print \"Parent attribute :\", Parent.parentAttr\n\nclass Child(Parent): # define child class\n   def __init__(self):\n      print \"Calling child constructor\"\n\n   def childMethod(self):\n      print 'Calling child method'\n\nc = Child()          # instance of child\nc.childMethod()      # child calls its method\nc.parentMethod()     # calls parent's method\nc.setAttr(200)       # again call parent's method\nc.getAttr()          # again call parent's method\n</pre>\n<p>When the above code is  executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nCalling child constructor\nCalling child method\nCalling parent method\nParent attribute : 200\n</pre>\n<p>Similar way, you can drive a class from multiple parent classes as follows \u2212</p>\n<pre class=\"result notranslate\">\nclass A:        # define your class A\n.....\n\nclass B:         # define your class B\n.....\n\nclass C(A, B):   # subclass of A and B\n.....\n</pre>\n<p>You can use issubclass() or isinstance() functions to check a relationships of two classes and instances.</p>\n<ul class=\"list\">\n<li><p>The <b>issubclass(sub, sup)</b> boolean function returns true if the given subclass <b>sub</b> is indeed a subclass of the superclass <b>sup</b>.</p></li>\n<li><p>The <b>isinstance(obj, Class)</b> boolean function returns true if <i>obj</i> is an instance of class <i>Class</i> or is an instance of a subclass of Class</p></li>\n</ul>\n<h2>Overriding Methods</h2>\n<p>You can always override your parent class methods. One reason for overriding parent's methods is because you may want special or different functionality in your subclass.</p>\n<h3>Example</h3>\n<a class=\"demo\" href=\"http://tpcg.io/94KY94\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nclass Parent:        # define parent class\n   def myMethod(self):\n      print 'Calling parent method'\n\nclass Child(Parent): # define child class\n   def myMethod(self):\n      print 'Calling child method'\n\nc = Child()          # instance of child\nc.myMethod()         # child calls overridden method\n</pre>\n<p>When the above code is  executed, it produces the following result \u2212</p>\n<pre class=\"prettyprint notranslate\">\nCalling child method\n</pre>\n<h2>Base Overloading Methods</h2>\n<p>Following table lists some generic functionality that you can override in your own classes \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;width:10%\">Sr.No.</th>\n<th style=\"text-align:center;\">Method, Description &amp; Sample Call</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>__init__ ( self [,args...] )</b></p>\n<p>Constructor (with any optional arguments)</p>\n<p>Sample Call : <i>obj = className(args)</i></p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>__del__( self )</b></p>\n<p>Destructor, deletes an object</p>\n<p>Sample Call : <i>del obj</i></p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>__repr__( self )</b></p>\n<p>Evaluable string representation</p>\n<p>Sample Call : <i>repr(obj)</i></p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>__str__( self )</b></p>\n<p>Printable string representation</p>\n<p>Sample Call : <i>str(obj)</i></p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>__cmp__ ( self, x )</b></p>\n<p>Object comparison</p>\n<p>Sample Call : <i>cmp(obj, x)</i></p></td>\n</tr>\n</table>\n<h2>Overloading Operators</h2>\n<p>Suppose you have created a Vector class to represent two-dimensional vectors, what happens when you use the plus operator to add them? Most likely Python will yell at you.</p>\n<p>You could, however, define the <i>__add__</i> method in your class to perform vector addition and then the plus operator would behave as per expectation \u2212</p>\n<h3>Example</h3>\n<a class=\"demo\" href=\"http://tpcg.io/HNbb5f\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nclass Vector:\n   def __init__(self, a, b):\n      self.a = a\n      self.b = b\n\n   def __str__(self):\n      return 'Vector (%d, %d)' % (self.a, self.b)\n   \n   def __add__(self,other):\n      return Vector(self.a + other.a, self.b + other.b)\n\nv1 = Vector(2,10)\nv2 = Vector(5,-2)\nprint v1 + v2\n</pre>\n<p>When the above code is  executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nVector(7,8)\n</pre>\n<h2>Data Hiding</h2>\n<p>An object's attributes may or may not be visible outside the class definition. You need to name attributes with a double underscore prefix, and those attributes then are not be directly visible to outsiders.</p>\n<h3>Example</h3>\n<a class=\"demo\" href=\"http://tpcg.io/T0JYMC\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nclass JustCounter:\n   __secretCount = 0\n  \n   def count(self):\n      self.__secretCount += 1\n      print self.__secretCount\n\ncounter = JustCounter()\ncounter.count()\ncounter.count()\nprint counter.__secretCount\n</pre>\n<p>When the above code is  executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\n1\n2\nTraceback (most recent call last):\n   File \"test.py\", line 12, in &lt;module&gt;\n      print counter.__secretCount\nAttributeError: JustCounter instance has no attribute '__secretCount'\n</pre>\n<p>Python protects those members by internally changing the name to include the class name. You can access such attributes as <i>object._className__attrName</i>. If you would replace your last line as following, then it works for you \u2212</p>\n<pre class=\"result notranslate\">\n.........................\nprint counter._JustCounter__secretCount\n</pre>\n<p>When the above code is  executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\n1\n2\n2\n</pre>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_exceptions.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_reg_expressions.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>"}