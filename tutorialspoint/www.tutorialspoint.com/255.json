{"title_html": "<h1>Python - Multithreaded Programming</h1>", "content": "\n Python - Multithreaded Programming \n  \n Advertisements \n \n<!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//-->\n\n\n \n  \n \n Previous Page\n \n \nNext Page \u00a0\n \n  \n  \n Running several threads is similar to running several different programs concurrently, but with the following benefits \u2212 \n \nMultiple threads within a process share the same data space with the main thread and can therefore share information or communicate with each other more easily than if they were separate processes.\nThreads sometimes called light-weight processes and they do not require much memory overhead; they are cheaper than processes.\n \n A thread has a beginning, an execution sequence, and a conclusion. It has an instruction pointer that keeps track of where within its context it is currently running. \n \nIt can be pre-empted (interrupted)\nIt can temporarily be put on hold (also known as sleeping) while other threads are running - this is called yielding.\n \n Starting a New Thread \n To spawn another thread, you need to call following method available in thread module \u2212 \n \nthread.start_new_thread ( function, args[, kwargs] )\n \n This method call enables a fast and efficient way to create new threads in both Linux and Windows. \n The method call returns immediately and the child thread starts and calls function with the passed list of args. When function returns, the thread terminates. \n Here, args is a tuple of arguments; use an empty tuple to call function without passing any arguments. kwargs is an optional dictionary of keyword arguments. \n Example \n \n#!/usr/bin/python\n\nimport thread\nimport time\n\n# Define a function for the thread\ndef print_time( threadName, delay):\n   count = 0\n   while count < 5:\n      time.sleep(delay)\n      count += 1\n      print \"%s: %s\" % ( threadName, time.ctime(time.time()) )\n\n# Create two threads as follows\ntry:\n   thread.start_new_thread( print_time, (\"Thread-1\", 2, ) )\n   thread.start_new_thread( print_time, (\"Thread-2\", 4, ) )\nexcept:\n   print \"Error: unable to start thread\"\n\nwhile 1:\n   pass\n \n When the above code is  executed, it produces the following result \u2212 \n \nThread-1: Thu Jan 22 15:42:17 2009\nThread-1: Thu Jan 22 15:42:19 2009\nThread-2: Thu Jan 22 15:42:19 2009\nThread-1: Thu Jan 22 15:42:21 2009\nThread-2: Thu Jan 22 15:42:23 2009\nThread-1: Thu Jan 22 15:42:23 2009\nThread-1: Thu Jan 22 15:42:25 2009\nThread-2: Thu Jan 22 15:42:27 2009\nThread-2: Thu Jan 22 15:42:31 2009\nThread-2: Thu Jan 22 15:42:35 2009\n \n Although it is very effective for low-level threading, but the thread module is very limited compared to the newer threading module. \n The Threading Module \n The newer threading module included with Python 2.4 provides much more powerful, high-level support for threads than the thread module discussed in the previous section. \n The threading module exposes all the methods of the thread module and provides some additional methods \u2212 \n \nthreading.activeCount() \u2212 Returns the number of thread objects that are active.\nthreading.currentThread() \u2212 Returns the number of thread objects in the caller's thread control.\nthreading.enumerate() \u2212 Returns a list of all thread objects that are currently active.\n \n In addition to the methods, the threading module has the Thread class that implements threading. The methods provided by the Thread class are as follows \u2212 \n \nrun() \u2212 The run() method is the entry point for a thread.\nstart() \u2212 The start() method starts a thread by calling the run method.\n join([time]) \u2212 The join() waits for threads to terminate.\n isAlive() \u2212 The isAlive() method checks whether a thread is still executing.\n getName() \u2212 The getName() method returns the name of a thread.\n setName() \u2212 The setName() method sets the name of a thread.\n \n Creating Thread Using Threading Module \n To implement a new thread using the threading module, you have to do the following \u2212 \n \nDefine a new subclass of the Thread class.\nOverride the __init__(self [,args]) method to add additional arguments.\nThen, override the run(self [,args]) method to implement what the thread should do when started.\n \n Once you have created the new Thread subclass, you can create an instance of it and then start a new thread by invoking the start(), which in turn calls run() method. \n Example \n \n#!/usr/bin/python\n\nimport threading\nimport time\n\nexitFlag = 0\n\nclass myThread (threading.Thread):\n   def __init__(self, threadID, name, counter):\n      threading.Thread.__init__(self)\n      self.threadID = threadID\n      self.name = name\n      self.counter = counter\n   def run(self):\n      print \"Starting \" + self.name\n      print_time(self.name, 5, self.counter)\n      print \"Exiting \" + self.name\n\ndef print_time(threadName, counter, delay):\n   while counter:\n      if exitFlag:\n         threadName.exit()\n      time.sleep(delay)\n      print \"%s: %s\" % (threadName, time.ctime(time.time()))\n      counter -= 1\n\n# Create new threads\nthread1 = myThread(1, \"Thread-1\", 1)\nthread2 = myThread(2, \"Thread-2\", 2)\n\n# Start new Threads\nthread1.start()\nthread2.start()\n\nprint \"Exiting Main Thread\"\n \n When the above code is  executed, it produces the following result \u2212 \n \nStarting Thread-1\nStarting Thread-2\nExiting Main Thread\nThread-1: Thu Mar 21 09:10:03 2013\nThread-1: Thu Mar 21 09:10:04 2013\nThread-2: Thu Mar 21 09:10:04 2013\nThread-1: Thu Mar 21 09:10:05 2013\nThread-1: Thu Mar 21 09:10:06 2013\nThread-2: Thu Mar 21 09:10:06 2013\nThread-1: Thu Mar 21 09:10:07 2013\nExiting Thread-1\nThread-2: Thu Mar 21 09:10:08 2013\nThread-2: Thu Mar 21 09:10:10 2013\nThread-2: Thu Mar 21 09:10:12 2013\nExiting Thread-2\n \n Synchronizing Threads \n The threading module provided with Python includes a simple-to-implement locking mechanism that allows you to synchronize threads. A new lock is created by calling the Lock() method, which returns the new lock. \n The acquire(blocking) method of the new lock object is used to force threads to run synchronously. The optional blocking parameter enables you to control whether the thread waits to acquire the lock. \n If blocking is set to 0, the thread returns immediately with a 0 value if the lock cannot be acquired and with a 1 if the lock was acquired. If blocking is set to 1, the thread blocks and wait for the lock to be released. \n The release() method of the new lock object is used to release the lock when it is no longer required. \n Example \n \n#!/usr/bin/python\n\nimport threading\nimport time\n\nclass myThread (threading.Thread):\n   def __init__(self, threadID, name, counter):\n      threading.Thread.__init__(self)\n      self.threadID = threadID\n      self.name = name\n      self.counter = counter\n   def run(self):\n      print \"Starting \" + self.name\n      # Get lock to synchronize threads\n      threadLock.acquire()\n      print_time(self.name, self.counter, 3)\n      # Free lock to release next thread\n      threadLock.release()\n\ndef print_time(threadName, delay, counter):\n   while counter:\n      time.sleep(delay)\n      print \"%s: %s\" % (threadName, time.ctime(time.time()))\n      counter -= 1\n\nthreadLock = threading.Lock()\nthreads = []\n\n# Create new threads\nthread1 = myThread(1, \"Thread-1\", 1)\nthread2 = myThread(2, \"Thread-2\", 2)\n\n# Start new Threads\nthread1.start()\nthread2.start()\n\n# Add threads to thread list\nthreads.append(thread1)\nthreads.append(thread2)\n\n# Wait for all threads to complete\nfor t in threads:\n    t.join()\nprint \"Exiting Main Thread\"\n \n When the above code is  executed, it produces the following result \u2212 \n \nStarting Thread-1\nStarting Thread-2\nThread-1: Thu Mar 21 09:11:28 2013\nThread-1: Thu Mar 21 09:11:29 2013\nThread-1: Thu Mar 21 09:11:30 2013\nThread-2: Thu Mar 21 09:11:32 2013\nThread-2: Thu Mar 21 09:11:34 2013\nThread-2: Thu Mar 21 09:11:36 2013\nExiting Main Thread\n \n Multithreaded Priority Queue \n The Queue module allows you to create a new queue object that can hold a specific number of items. There are following methods to control the Queue \u2212 \n \nget() \u2212 The get() removes and returns an item from the queue.\nput() \u2212 The put adds item to a queue.\nqsize() \u2212 The qsize() returns the number of items that are currently in the queue.\nempty() \u2212 The empty( ) returns True if queue is empty; otherwise, False.\nfull() \u2212 the full() returns True if queue is full; otherwise, False.\n \n Example \n \n#!/usr/bin/python\n\nimport Queue\nimport threading\nimport time\n\nexitFlag = 0\n\nclass myThread (threading.Thread):\n   def __init__(self, threadID, name, q):\n      threading.Thread.__init__(self)\n      self.threadID = threadID\n      self.name = name\n      self.q = q\n   def run(self):\n      print \"Starting \" + self.name\n      process_data(self.name, self.q)\n      print \"Exiting \" + self.name\n\ndef process_data(threadName, q):\n   while not exitFlag:\n      queueLock.acquire()\n         if not workQueue.empty():\n            data = q.get()\n            queueLock.release()\n            print \"%s processing %s\" % (threadName, data)\n         else:\n            queueLock.release()\n         time.sleep(1)\n\nthreadList = [\"Thread-1\", \"Thread-2\", \"Thread-3\"]\nnameList = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"]\nqueueLock = threading.Lock()\nworkQueue = Queue.Queue(10)\nthreads = []\nthreadID = 1\n\n# Create new threads\nfor tName in threadList:\n   thread = myThread(threadID, tName, workQueue)\n   thread.start()\n   threads.append(thread)\n   threadID += 1\n\n# Fill the queue\nqueueLock.acquire()\nfor word in nameList:\n   workQueue.put(word)\nqueueLock.release()\n\n# Wait for queue to empty\nwhile not workQueue.empty():\n   pass\n\n# Notify threads it's time to exit\nexitFlag = 1\n\n# Wait for all threads to complete\nfor t in threads:\n   t.join()\nprint \"Exiting Main Thread\"\n \n When the above code is  executed, it produces the following result \u2212 \n \nStarting Thread-1\nStarting Thread-2\nStarting Thread-3\nThread-1 processing One\nThread-2 processing Two\nThread-3 processing Three\nThread-1 processing Four\nThread-2 processing Five\nExiting Thread-3\nExiting Thread-1\nExiting Thread-2\nExiting Main Thread\n \n  \n \n Previous Page\n \n \n Print\n \n \nNext Page \u00a0\n \n  \n  PRINTING ENDS HERE  \n \nAdvertisements\n<!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//-->\n\n\n \n", "url": "https://www.tutorialspoint.com/python/python_multithreading.htm", "html": "<!DOCTYPE html>\n\n<!--[if IE 8]><html class=\"ie ie8\"> <![endif]-->\n<!--[if IE 9]><html class=\"ie ie9\"> <![endif]-->\n<!--[if gt IE 9]><!--> <html> <!--<![endif]-->\n<head>\n<!-- Basic -->\n<meta charset=\"utf-8\"/>\n<title>Python Multithreaded Programming</title>\n<meta content=\"Python Multithreaded Programming - Learn Python in simple and easy steps starting from basic to advanced concepts with examples including Python Syntax Object Oriented Language, Methods, Tuples, Tools/Utilities, Exceptions Handling, Sockets, GUI, Extentions, XML Programming.\" name=\"description\">\n<meta content=\"Python, Tutorials, Learning, Beginners, Basics, Object Oriented Language, Methods, Overriding, Networking, Multithreading,Methods, Tuples, Tools/Utilities, Exceptions Handling, Sockets, GUI, Extentions, XML, Programming.\" name=\"Keywords\"/>\n<base href=\"https://www.tutorialspoint.com/\"/>\n<link href=\"/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"/>\n<meta content=\"width=device-width,initial-scale=1.0,user-scalable=yes\" name=\"viewport\"/>\n<meta content=\"en_US\" property=\"og:locale\">\n<meta content=\"website\" property=\"og:type\"/>\n<meta content=\"471319149685276\" property=\"fb:app_id\"/>\n<meta content=\"www.tutorialspoint.com\" property=\"og:site_name\"/>\n<meta content=\"yes\" name=\"apple-mobile-web-app-capable\"/>\n<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"/>\n<meta content=\"tutorialspoint.com\" name=\"author\"/>\n<script src=\"https://www.tutorialspoint.com/theme/js/script-min-v4.js?v=2\" type=\"text/javascript\"></script>\n<link href=\"https://www.tutorialspoint.com/theme/css/style-min.css?v=3.1\" rel=\"stylesheet\"/>\n<script>\r\nfunction openNav() {\t\r\n  document.getElementById(\"mySidenav\").style.width = \"250px\";\r\n  document.getElementById(\"right_obs\").style.display = \"block\";\r\n}\r\nfunction closeNav() {\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\nfunction close_obs_sidenav(){\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\n</script>\n<!-- Head Libs -->\n<!--[if IE 8]>\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/theme/css/ie8.css\">\r\n<![endif]-->\n<style>\r\n#privacy-banner {\r\n    position: fixed;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    max-width: 100%;\r\n    padding: 1rem .5rem;\r\n    background: #fff;\r\n    z-index: 1030;\r\n    color: #000;\r\n    font-size: 14px;\r\n    margin: 0;\r\n    display: none;\r\n    border-top: 2px solid rgb(130, 130, 130);\r\n  }\r\n  #privacy-banner p {\r\n    margin: 0;\r\n    color: #000;\r\n    text-align: center;\r\n  }\r\n  #privacy-banner a {\r\n    text-decoration: none;\r\n    margin: 20px auto 0 auto;\r\n    display: block;\r\n    max-width: 150px;\r\n  }\r\n  #privacy-banner a:hover {\r\n    text-decoration: underline;\r\n  }\r\n  #banner-learn {\r\n    color: #000;\r\n  }\r\n  #banner-accept {\r\n    padding: 7px 15px;\r\n    color: #fff;\r\n    border-radius: 5px;\r\n    background:#737373 !important;\r\n  }\r\n  @media (min-width: 768px) {\r\n    #privacy-banner {\r\n      padding: 1.5rem .5rem;\r\n    }\r\n    #privacy-banner a {\r\n      display: inline-block;\r\n      margin: 0 10px;\r\n    }\r\n}\r\npre.prettyprint.tryit {min-height:37px; background: #eee url(/python/images/try-it.jpg) top right no-repeat !important}select{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }\r\n.btnsbmt{ background: #fdbf00 !important;}\r\nul.nav-list.primary>li a.videolink{    background: none; margin: 0px; padding: 0px; border: 1px solid #d6d6d6;}\r\ndiv.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #fdbf00 url(/images/pattern.png) repeat center center !important;}\r\n.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #fdbf00 !important;}\r\n.submenu-item{ border-bottom: 2px solid #fdbf00 !important; border-top: 2px solid #fdbf00 !important }\r\n.ace_scroller{overflow: auto!important;}\r\na.demo{font-family: \"Open Sans\",Arial,sans-serif; background:#fdbf00; color:#fff; font-size:13px; padding:3px 10px; border:1px solid #d6d6d6; position:absolute; right:5px; margin:-6px 17px 0px 0px;}\r\na.demo:hover{opacity:.8}\r\n</style>\n<script>\r\n$(document).ready(function() {\r\n  $('input[name=\"q\"]').keydown(function(event){\r\n    if(event.keyCode == 13) {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n  });\r\n});\r\n</script>\n</meta></meta></head>\n<body onload=\"prettyPrint()\">\n<div class=\"wrapLoader\">\n<div class=\"imgLoader\">\n<img alt=\"\" height=\"70\" src=\"/images/loading-cg.gif\" width=\"70\"/>\n</div>\n</div>\n<div class=\"display-none\" id=\"right_obs\" onclick=\"close_obs_sidenav()\"></div>\n<header>\n<div class=\"container\">\n<h1 class=\"logo\">\n<a href=\"index.htm\" title=\"tutorialspoint\">\n<img alt=\"tutorialspoint\" src=\"/python/images/logo.png\"/>\n</a>\n</h1>\n<ul class=\"tp-inline-block pull-right\" id=\"tp-head-icons\">\n<li>\n<div class=\"tp-second-nav tp-display-none tp-pointer\" onclick=\"openNav()\">\n<i class=\"fa fa-th-large fa-lg\"></i>\n</div>\n</li>\n</ul>\n<button class=\"btn btn-responsive-nav btn-inverse\" data-target=\".nav-main-collapse\" data-toggle=\"collapse\" id=\"pull\" style=\"top: 24px!important\"> <i class=\"icon icon-bars\"></i> </button>\n<nav>\n<ul class=\"nav nav-pills nav-top\">\n<li><a href=\"/about/about_careers.htm\" style=\"background: #fffb09; font-weight: bold;\"><i class=\"icon icon-suitcase\"></i> Jobs</a></li>\n<li> <a href=\"/programming_examples/\" target=\"_blank\"><i class=\"fa fa-cubes\"></i> \u00a0Examples</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/whiteboard.htm\"><img alt=\"Whiteboard\" src=\"theme/css/icons/image-editor.png\" title=\"Whiteboard\"/> \u00a0Whiteboard</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/netmeeting.php\"><i class=\"fa-camera\"></i> \u00a0Net Meeting</a> </li>\n<li> <a href=\"/online_dev_tools.htm\"> <i class=\"dev-tools-menu\" style=\"opacity:.5\"></i> Tools </a> </li>\n<li> <a href=\"/articles/index.php\"><i class=\"icon icon-file-text-o\"></i> \u00a0Articles</a> </li>\n<li class=\"top-icons\">\n<ul class=\"social-icons\">\n<li class=\"facebook\"><a data-placement=\"bottom\" href=\"https://www.facebook.com/tutorialspointindia\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Facebook\">Facebook</a></li>\n<li class=\"googleplus\"><a data-placement=\"bottom\" href=\"https://plus.google.com/u/0/116678774017490391259/posts\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Google+\">Google+</a></li>\n<li class=\"twitter\"><a data-placement=\"bottom\" href=\"https://www.twitter.com/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Twitter\">Twitter</a></li>\n<li class=\"linkedin\"><a data-placement=\"bottom\" href=\"https://www.linkedin.com/company/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Linkedin\">Linkedin</a></li>\n<li class=\"youtube\"><a data-placement=\"bottom\" href=\"https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint YouTube\">YouTube</a></li>\n</ul>\n</li>\n</ul>\n</nav>\n</div>\n<div class=\"sidenav\" id=\"mySidenav\">\n<div class=\"navbar nav-main\">\n<div class=\"container\">\n<nav class=\"nav-main mega-menu\">\n<ul class=\"nav nav-pills nav-main\" id=\"mainMenu\">\n<li class=\"dropdown no-sub-menu\"> <a class=\"dropdown\" href=\"index.htm\"><i class=\"icon icon-home\"></i> Home</a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"/questions/index.php\"><i class=\"fa fa-send\"></i> Q/A </a> </li>\n<li class=\"dropdown\"><a class=\"dropdown\" href=\"tutorialslibrary.htm\"><span class=\"tut-lib\"> Library </span></a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"videotutorials/index.htm\"><i class=\"fa-toggle-right\"></i> Videos </a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"tutor_connect/index.php\"><i class=\"fa-user\"> </i> Tutors</a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"codingground.htm\"><i class=\"fa-code\"></i> Coding Ground </a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"https://store.tutorialspoint.com/\"><i class=\"fa-usd\"></i> Store </a> </li>\n<li class=\"dropdown no-sub-menu\">\n<div class=\"searchform-popup\">\n<input autocomplete=\"off\" class=\"header-search-box\" id=\"search-string\" name=\"q\" onblur=\"if (this.value == '') {this.value = 'Search your favorite tutorials...';}\" onfocus=\"if (this.value == 'Search your favorite tutorials...') {this.value = '';}\" placeholder=\"Search your favorite tutorials...\" type=\"text\"/>\n<div class=\"magnifying-glass\"><i class=\"icon-search\"></i> Search </div>\n</div>\n</li>\n</ul>\n</nav>\n</div>\n</div>\n</div>\n</header></body></html>\n\n<div style=\"clear:both;\"></div>\n<div class=\"main\" role=\"main\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-2\">\n<aside class=\"sidebar\">\n<style>\r\n.ts {\r\n   text-align:center !important;\r\n   vertical-align:middle !important;\r\n}\r\n</style>\n<div class=\"mini-logo\">\n<img alt=\"Python Tutorial\" src=\"/python/images/python-mini.jpg\">\n</img></div>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Python Basic Tutorial</li>\n<li><a href=\"/python/index.htm\" target=\"_top\">Python - Home</a></li>\n<li><a href=\"/python/python_overview.htm\" target=\"_top\">Python - Overview</a></li>\n<li><a href=\"/python/python_environment.htm\" target=\"_top\">Python - Environment Setup</a></li>\n<li><a href=\"/python/python_basic_syntax.htm\" target=\"_top\">Python - Basic Syntax</a></li>\n<li><a href=\"/python/python_variable_types.htm\" target=\"_top\">Python - Variable Types</a></li>\n<li><a href=\"/python/python_basic_operators.htm\" target=\"_top\">Python - Basic Operators</a></li>\n<li><a href=\"/python/python_decision_making.htm\" target=\"_top\">Python - Decision Making</a></li>\n<li><a href=\"/python/python_loops.htm\" target=\"_top\">Python - Loops</a></li>\n<li><a href=\"/python/python_numbers.htm\" target=\"_top\">Python - Numbers</a></li>\n<li><a href=\"/python/python_strings.htm\" target=\"_top\">Python - Strings</a></li>\n<li><a href=\"/python/python_lists.htm\" target=\"_top\">Python - Lists</a></li>\n<li><a href=\"/python/python_tuples.htm\" target=\"_top\">Python - Tuples</a></li>\n<li><a href=\"/python/python_dictionary.htm\" target=\"_top\">Python - Dictionary</a></li>\n<li><a href=\"/python/python_date_time.htm\" target=\"_top\">Python - Date &amp; Time</a></li>\n<li><a href=\"/python/python_functions.htm\" target=\"_top\">Python - Functions</a></li>\n<li><a href=\"/python/python_modules.htm\" target=\"_top\">Python - Modules</a></li>\n<li><a href=\"/python/python_files_io.htm\" target=\"_top\">Python - Files I/O</a></li>\n<li><a href=\"/python/python_exceptions.htm\" target=\"_top\">Python - Exceptions</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Python Advanced Tutorial</li>\n<li><a href=\"/python/python_classes_objects.htm\" target=\"_top\">Python - Classes/Objects</a></li>\n<li><a href=\"/python/python_reg_expressions.htm\" target=\"_top\">Python - Reg Expressions</a></li>\n<li><a href=\"/python/python_cgi_programming.htm\" target=\"_top\">Python - CGI Programming</a></li>\n<li><a href=\"/python/python_database_access.htm\" target=\"_top\">Python - Database Access</a></li>\n<li><a href=\"/python/python_networking.htm\" target=\"_top\">Python - Networking</a></li>\n<li><a href=\"/python/python_sending_email.htm\" target=\"_top\">Python - Sending Email</a></li>\n<li><a href=\"/python/python_multithreading.htm\" target=\"_top\">Python - Multithreading</a></li>\n<li><a href=\"/python/python_xml_processing.htm\" target=\"_top\">Python - XML Processing</a></li>\n<li><a href=\"/python/python_gui_programming.htm\" target=\"_top\">Python - GUI Programming</a></li>\n<li><a href=\"/python/python_further_extensions.htm\" target=\"_top\">Python - Further Extensions</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Python  Useful Resources</li>\n<li><a href=\"/python/python_questions_answers.htm\" target=\"_top\">Python - Questions and Answers</a></li>\n<li><a href=\"/python/python_quick_guide.htm\" target=\"_top\">Python - Quick Guide</a></li>\n<li><a href=\"/python/python_tools_utilities.htm\" target=\"_top\">Python - Tools/Utilities</a></li>\n<li><a href=\"/python/python_useful_resources.htm\" target=\"_top\">Python - Useful Resources</a></li>\n<li><a href=\"/python/python_discussion.htm\" target=\"_top\">Python - Discussion</a></li>\n</ul>\n<ul class=\"nav nav-list primary push-bottom left-menu special\">\n<li class=\"sreading\">Selected Reading</li>\n<li><a href=\"/upsc_ias_exams.htm\" target=\"_top\">UPSC IAS Exams Notes</a></li>\n<li><a href=\"/developers_best_practices/index.htm\" target=\"_top\">Developer's Best Practices</a></li>\n<li><a href=\"/questions_and_answers.htm\" target=\"_top\">Questions and Answers</a></li>\n<li><a href=\"/effective_resume_writing.htm\" target=\"_top\">Effective Resume Writing</a></li>\n<li><a href=\"/hr_interview_questions/index.htm\" target=\"_top\">HR Interview Questions</a></li>\n<li><a href=\"/computer_glossary.htm\" target=\"_top\">Computer Glossary</a></li>\n<li><a href=\"/computer_whoiswho.htm\" target=\"_top\">Who is Who</a></li>\n</ul>\n</aside>\n</div>\n<!-- PRINTING STARTS HERE -->\n<div class=\"row\">\n<div class=\"content\">\n<div class=\"col-md-7 middle-col\">\n<h1>Python - Multithreaded Programming</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_sending_email.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_xml_processing.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>Running several threads is similar to running several different programs concurrently, but with the following benefits \u2212</p>\n<ul class=\"list\">\n<li><p>Multiple threads within a process share the same data space with the main thread and can therefore share information or communicate with each other more easily than if they were separate processes.</p></li>\n<li><p>Threads sometimes called light-weight processes and they do not require much memory overhead; they are cheaper than processes.</p></li>\n</ul>\n<p>A thread has a beginning, an execution sequence, and a conclusion. It has an instruction pointer that keeps track of where within its context it is currently running.</p>\n<ul class=\"list\">\n<li><p>It can be pre-empted (interrupted)</p></li>\n<li><p>It can temporarily be put on hold (also known as sleeping) while other threads are running - this is called yielding.</p></li>\n</ul>\n<h2>Starting a New Thread</h2>\n<p>To spawn another thread, you need to call following method available in <i>thread</i> module \u2212</p>\n<pre class=\"result notranslate\">\nthread.start_new_thread ( function, args[, kwargs] )\n</pre>\n<p>This method call enables a fast and efficient way to create new threads in both Linux and Windows.</p>\n<p>The method call returns immediately and the child thread starts and calls function with the passed list of <i>args</i>. When function returns, the thread terminates.</p>\n<p>Here, <i>args</i> is a tuple of arguments; use an empty tuple to call function without passing any arguments. <i>kwargs </i>is an optional dictionary of keyword arguments.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nimport thread\nimport time\n\n# Define a function for the thread\ndef print_time( threadName, delay):\n   count = 0\n   while count &lt; 5:\n      time.sleep(delay)\n      count += 1\n      print \"%s: %s\" % ( threadName, time.ctime(time.time()) )\n\n# Create two threads as follows\ntry:\n   thread.start_new_thread( print_time, (\"Thread-1\", 2, ) )\n   thread.start_new_thread( print_time, (\"Thread-2\", 4, ) )\nexcept:\n   print \"Error: unable to start thread\"\n\nwhile 1:\n   pass\n</pre>\n<p>When the above code is  executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nThread-1: Thu Jan 22 15:42:17 2009\nThread-1: Thu Jan 22 15:42:19 2009\nThread-2: Thu Jan 22 15:42:19 2009\nThread-1: Thu Jan 22 15:42:21 2009\nThread-2: Thu Jan 22 15:42:23 2009\nThread-1: Thu Jan 22 15:42:23 2009\nThread-1: Thu Jan 22 15:42:25 2009\nThread-2: Thu Jan 22 15:42:27 2009\nThread-2: Thu Jan 22 15:42:31 2009\nThread-2: Thu Jan 22 15:42:35 2009\n</pre>\n<p>Although it is very effective for low-level threading, but the <i>thread</i> module is very limited compared to the newer threading module.</p>\n<h2>The <i>Threading</i> Module</h2>\n<p>The newer threading module included with Python 2.4 provides much more powerful, high-level support for threads than the thread module discussed in the previous section.</p>\n<p>The <i>threading</i> module exposes all the methods of the <i>thread</i> module and provides some additional methods \u2212</p>\n<ul class=\"list\">\n<li><p><b>threading.activeCount()</b> \u2212 Returns the number of thread objects that are active.</p></li>\n<li><p><b>threading.currentThread()</b> \u2212 Returns the number of thread objects in the caller's thread control.</p></li>\n<li><p><b>threading.enumerate()</b> \u2212 Returns a list of all thread objects that are currently active.</p></li>\n</ul>\n<p>In addition to the methods, the threading module has the <i>Thread</i> class that implements threading. The methods provided by the <i>Thread</i> class are as follows \u2212</p>\n<ul class=\"list\">\n<li><p><b>run()</b> \u2212 The run() method is the entry point for a thread.</p></li>\n<li><p><b>start()</b> \u2212 The start() method starts a thread by calling the run method.</p></li>\n<li><p><b> join([time])</b> \u2212 The join() waits for threads to terminate.</p></li>\n<li><p><b> isAlive()</b> \u2212 The isAlive() method checks whether a thread is still executing.</p></li>\n<li><p><b> getName()</b> \u2212 The getName() method returns the name of a thread.</p></li>\n<li><p><b> setName()</b> \u2212 The setName() method sets the name of a thread.</p></li>\n</ul>\n<h2>Creating Thread Using <i>Threading</i> Module</h2>\n<p>To implement a new thread using the threading module, you have to do the following \u2212</p>\n<ul class=\"list\">\n<li><p>Define a new subclass of the <i>Thread</i> class.</p></li>\n<li><p>Override the <i>__init__(self [,args])</i> method to add additional arguments.</p></li>\n<li><p>Then, override the run(self [,args]) method to implement what the thread should do when started.</p></li>\n</ul>\n<p>Once you have created the new <i>Thread</i> subclass, you can create an instance of it and then start a new thread by invoking the <i>start()</i>, which in turn calls <i>run()</i> method.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nimport threading\nimport time\n\nexitFlag = 0\n\nclass myThread (threading.Thread):\n   def __init__(self, threadID, name, counter):\n      threading.Thread.__init__(self)\n      self.threadID = threadID\n      self.name = name\n      self.counter = counter\n   def run(self):\n      print \"Starting \" + self.name\n      print_time(self.name, 5, self.counter)\n      print \"Exiting \" + self.name\n\ndef print_time(threadName, counter, delay):\n   while counter:\n      if exitFlag:\n         threadName.exit()\n      time.sleep(delay)\n      print \"%s: %s\" % (threadName, time.ctime(time.time()))\n      counter -= 1\n\n# Create new threads\nthread1 = myThread(1, \"Thread-1\", 1)\nthread2 = myThread(2, \"Thread-2\", 2)\n\n# Start new Threads\nthread1.start()\nthread2.start()\n\nprint \"Exiting Main Thread\"\n</pre>\n<p>When the above code is  executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nStarting Thread-1\nStarting Thread-2\nExiting Main Thread\nThread-1: Thu Mar 21 09:10:03 2013\nThread-1: Thu Mar 21 09:10:04 2013\nThread-2: Thu Mar 21 09:10:04 2013\nThread-1: Thu Mar 21 09:10:05 2013\nThread-1: Thu Mar 21 09:10:06 2013\nThread-2: Thu Mar 21 09:10:06 2013\nThread-1: Thu Mar 21 09:10:07 2013\nExiting Thread-1\nThread-2: Thu Mar 21 09:10:08 2013\nThread-2: Thu Mar 21 09:10:10 2013\nThread-2: Thu Mar 21 09:10:12 2013\nExiting Thread-2\n</pre>\n<h2>Synchronizing Threads</h2>\n<p>The threading module provided with Python includes a simple-to-implement locking mechanism that allows you to synchronize threads. A new lock is created by calling the <i>Lock()</i> method, which returns the new lock.</p>\n<p>The <i>acquire(blocking)</i> method of the new lock object is used to force threads to run synchronously. The optional <i>blocking</i> parameter enables you to control whether the thread waits to acquire the lock.</p>\n<p>If <i>blocking</i> is set to 0, the thread returns immediately with a 0 value if the lock cannot be acquired and with a 1 if the lock was acquired. If blocking is set to 1, the thread blocks and wait for the lock to be released.</p>\n<p>The <i>release()</i> method of the new lock object is used to release the lock when it is no longer required.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nimport threading\nimport time\n\nclass myThread (threading.Thread):\n   def __init__(self, threadID, name, counter):\n      threading.Thread.__init__(self)\n      self.threadID = threadID\n      self.name = name\n      self.counter = counter\n   def run(self):\n      print \"Starting \" + self.name\n      # Get lock to synchronize threads\n      threadLock.acquire()\n      print_time(self.name, self.counter, 3)\n      # Free lock to release next thread\n      threadLock.release()\n\ndef print_time(threadName, delay, counter):\n   while counter:\n      time.sleep(delay)\n      print \"%s: %s\" % (threadName, time.ctime(time.time()))\n      counter -= 1\n\nthreadLock = threading.Lock()\nthreads = []\n\n# Create new threads\nthread1 = myThread(1, \"Thread-1\", 1)\nthread2 = myThread(2, \"Thread-2\", 2)\n\n# Start new Threads\nthread1.start()\nthread2.start()\n\n# Add threads to thread list\nthreads.append(thread1)\nthreads.append(thread2)\n\n# Wait for all threads to complete\nfor t in threads:\n    t.join()\nprint \"Exiting Main Thread\"\n</pre>\n<p>When the above code is  executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nStarting Thread-1\nStarting Thread-2\nThread-1: Thu Mar 21 09:11:28 2013\nThread-1: Thu Mar 21 09:11:29 2013\nThread-1: Thu Mar 21 09:11:30 2013\nThread-2: Thu Mar 21 09:11:32 2013\nThread-2: Thu Mar 21 09:11:34 2013\nThread-2: Thu Mar 21 09:11:36 2013\nExiting Main Thread\n</pre>\n<h2>Multithreaded Priority Queue</h2>\n<p>The <i>Queue</i> module allows you to create a new queue object that can hold a specific number of items. There are following methods to control the Queue \u2212</p>\n<ul class=\"list\">\n<li><p><b>get()</b> \u2212 The get() removes and returns an item from the queue.</p></li>\n<li><p><b>put()</b> \u2212 The put adds item to a queue.</p></li>\n<li><p><b>qsize()</b> \u2212 The qsize() returns the number of items that are currently in the queue.</p></li>\n<li><p><b>empty()</b> \u2212 The empty( ) returns True if queue is empty; otherwise, False.</p></li>\n<li><p><b>full()</b> \u2212 the full() returns True if queue is full; otherwise, False.</p></li>\n</ul>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nimport Queue\nimport threading\nimport time\n\nexitFlag = 0\n\nclass myThread (threading.Thread):\n   def __init__(self, threadID, name, q):\n      threading.Thread.__init__(self)\n      self.threadID = threadID\n      self.name = name\n      self.q = q\n   def run(self):\n      print \"Starting \" + self.name\n      process_data(self.name, self.q)\n      print \"Exiting \" + self.name\n\ndef process_data(threadName, q):\n   while not exitFlag:\n      queueLock.acquire()\n         if not workQueue.empty():\n            data = q.get()\n            queueLock.release()\n            print \"%s processing %s\" % (threadName, data)\n         else:\n            queueLock.release()\n         time.sleep(1)\n\nthreadList = [\"Thread-1\", \"Thread-2\", \"Thread-3\"]\nnameList = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"]\nqueueLock = threading.Lock()\nworkQueue = Queue.Queue(10)\nthreads = []\nthreadID = 1\n\n# Create new threads\nfor tName in threadList:\n   thread = myThread(threadID, tName, workQueue)\n   thread.start()\n   threads.append(thread)\n   threadID += 1\n\n# Fill the queue\nqueueLock.acquire()\nfor word in nameList:\n   workQueue.put(word)\nqueueLock.release()\n\n# Wait for queue to empty\nwhile not workQueue.empty():\n   pass\n\n# Notify threads it's time to exit\nexitFlag = 1\n\n# Wait for all threads to complete\nfor t in threads:\n   t.join()\nprint \"Exiting Main Thread\"\n</pre>\n<p>When the above code is  executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nStarting Thread-1\nStarting Thread-2\nStarting Thread-3\nThread-1 processing One\nThread-2 processing Two\nThread-3 processing Three\nThread-1 processing Four\nThread-2 processing Five\nExiting Thread-3\nExiting Thread-1\nExiting Thread-2\nExiting Main Thread\n</pre>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_sending_email.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_xml_processing.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n<div class=\"row\">\n<div class=\"col-md-3\" id=\"rightbar\">\n<div class=\"simple-ad\">\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.facebook.com/sharer.php?u=' + 'https://www.tutorialspoint.com/python/python_multithreading.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/facebookIcon.jpg\">\n</img></a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://twitter.com/share?url=' + 'https://www.tutorialspoint.com/python/python_multithreading.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/twitterIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'https://www.tutorialspoint.com/python/python_multithreading.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/linkedinIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=https://www.tutorialspoint.com/python/python_multithreading.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/googlePlusIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.stumbleupon.com/submit?url=https://www.tutorialspoint.com/python/python_multithreading.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/StumbleUponIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://reddit.com/submit?url=https://www.tutorialspoint.com/python/python_multithreading.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/reddit.jpg\"/>\n</a>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\ngoogle_ad_format = \"300x250_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 600;\ngoogle_ad_format = \"300x600_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"ca-pub-2537027957187252\";\n/* Right Side Ad */\ngoogle_ad_slot = \"right_side_ad\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\n//-->\n</script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"footer-copyright\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-1\">\n<a class=\"logo\" href=\"index.htm\"> <img alt=\"Tutorials Point\" class=\"img-responsive\" src=\"/scripts/img/logo-footer.png\"/> </a>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<nav id=\"sub-menu\">\n<ul>\n<li><a href=\"/about/about_privacy.htm\">Privacy Policy</a></li>\n<li><a href=\"/about/about_cookies.htm\">Cookies Policy</a></li>\n<li><a href=\"/about/contact_us.htm\">Contact</a></li>\n</ul>\n</nav>\n</div>\n<div class=\"col-md-3 col-sm-12 col-xs-12\">\n<p>\u00a9 Copyright 2019. All Rights Reserved.</p>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<div class=\"news-group\">\n<input autocomplete=\"off\" class=\"form-control-foot search\" id=\"textemail\" name=\"textemail\" onblur=\"if (this.value == '') {this.value = 'Enter email for newsletter...';}\" onfocus=\"if (this.value == 'Enter email for newsletter...') {this.value = '';}\" placeholder=\"Enter email for newsletter\" type=\"text\"/>\n<span class=\"input-group-btn\"> <button class=\"btn btn-default btn-footer\" id=\"btnemail\" onclick=\"javascript:void(0);\" type=\"submit\">go</button> </span>\n<div id=\"newsresponse\"></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"privacy-banner\">\n<div>\n<p>\n      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.\n      <a href=\"javascript:void(0)\" id=\"banner-accept\">Accept</a>\n<a href=\"/about/about_cookies.htm\" id=\"banner-learn\" target=\"_blank\">Learn more</a>\n</p>\n</div>\n</div>\n<script>\n// Banner Trigger if Not Closed\nif (!localStorage.bannerClosed) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n} else {\n  document.getElementById('privacy-banner').style.display = \"none\";\n}\ndocument.getElementById('banner-accept').addEventListener('click', function() {\n  document.getElementById('privacy-banner').style.display = \"none\";\n  localStorage.bannerClosed = 'true';\n});\nif (navigator.userAgent.match(/Opera|OPR\\//)) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n}\n</script>\n<!-- Libs -->\n<script src=\"/theme/js/custom-min.js?v=7\"></script>\n<script src=\"https://www.google-analytics.com/urchin.js\">\n</script>\n<script>\n_uacct = \"UA-232293-6\";\nurchinTracker();\n$('.pg-icon').click(function(){\n   $('.wrapLoader').show();\n});\n</script>\n<script src=\"/theme/js/jquery.colorbox-min.js\"></script>\n<script>\n   var tryit = new $.TryIt('/python/try_python.php');\n   tryit.compile();\n</script>\n\n\n", "title": "Python - Multithreaded Programming", "content_html": "<div class=\"col-md-7 middle-col\">\n<h1>Python - Multithreaded Programming</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_sending_email.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_xml_processing.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>Running several threads is similar to running several different programs concurrently, but with the following benefits \u2212</p>\n<ul class=\"list\">\n<li><p>Multiple threads within a process share the same data space with the main thread and can therefore share information or communicate with each other more easily than if they were separate processes.</p></li>\n<li><p>Threads sometimes called light-weight processes and they do not require much memory overhead; they are cheaper than processes.</p></li>\n</ul>\n<p>A thread has a beginning, an execution sequence, and a conclusion. It has an instruction pointer that keeps track of where within its context it is currently running.</p>\n<ul class=\"list\">\n<li><p>It can be pre-empted (interrupted)</p></li>\n<li><p>It can temporarily be put on hold (also known as sleeping) while other threads are running - this is called yielding.</p></li>\n</ul>\n<h2>Starting a New Thread</h2>\n<p>To spawn another thread, you need to call following method available in <i>thread</i> module \u2212</p>\n<pre class=\"result notranslate\">\nthread.start_new_thread ( function, args[, kwargs] )\n</pre>\n<p>This method call enables a fast and efficient way to create new threads in both Linux and Windows.</p>\n<p>The method call returns immediately and the child thread starts and calls function with the passed list of <i>args</i>. When function returns, the thread terminates.</p>\n<p>Here, <i>args</i> is a tuple of arguments; use an empty tuple to call function without passing any arguments. <i>kwargs </i>is an optional dictionary of keyword arguments.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nimport thread\nimport time\n\n# Define a function for the thread\ndef print_time( threadName, delay):\n   count = 0\n   while count &lt; 5:\n      time.sleep(delay)\n      count += 1\n      print \"%s: %s\" % ( threadName, time.ctime(time.time()) )\n\n# Create two threads as follows\ntry:\n   thread.start_new_thread( print_time, (\"Thread-1\", 2, ) )\n   thread.start_new_thread( print_time, (\"Thread-2\", 4, ) )\nexcept:\n   print \"Error: unable to start thread\"\n\nwhile 1:\n   pass\n</pre>\n<p>When the above code is  executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nThread-1: Thu Jan 22 15:42:17 2009\nThread-1: Thu Jan 22 15:42:19 2009\nThread-2: Thu Jan 22 15:42:19 2009\nThread-1: Thu Jan 22 15:42:21 2009\nThread-2: Thu Jan 22 15:42:23 2009\nThread-1: Thu Jan 22 15:42:23 2009\nThread-1: Thu Jan 22 15:42:25 2009\nThread-2: Thu Jan 22 15:42:27 2009\nThread-2: Thu Jan 22 15:42:31 2009\nThread-2: Thu Jan 22 15:42:35 2009\n</pre>\n<p>Although it is very effective for low-level threading, but the <i>thread</i> module is very limited compared to the newer threading module.</p>\n<h2>The <i>Threading</i> Module</h2>\n<p>The newer threading module included with Python 2.4 provides much more powerful, high-level support for threads than the thread module discussed in the previous section.</p>\n<p>The <i>threading</i> module exposes all the methods of the <i>thread</i> module and provides some additional methods \u2212</p>\n<ul class=\"list\">\n<li><p><b>threading.activeCount()</b> \u2212 Returns the number of thread objects that are active.</p></li>\n<li><p><b>threading.currentThread()</b> \u2212 Returns the number of thread objects in the caller's thread control.</p></li>\n<li><p><b>threading.enumerate()</b> \u2212 Returns a list of all thread objects that are currently active.</p></li>\n</ul>\n<p>In addition to the methods, the threading module has the <i>Thread</i> class that implements threading. The methods provided by the <i>Thread</i> class are as follows \u2212</p>\n<ul class=\"list\">\n<li><p><b>run()</b> \u2212 The run() method is the entry point for a thread.</p></li>\n<li><p><b>start()</b> \u2212 The start() method starts a thread by calling the run method.</p></li>\n<li><p><b> join([time])</b> \u2212 The join() waits for threads to terminate.</p></li>\n<li><p><b> isAlive()</b> \u2212 The isAlive() method checks whether a thread is still executing.</p></li>\n<li><p><b> getName()</b> \u2212 The getName() method returns the name of a thread.</p></li>\n<li><p><b> setName()</b> \u2212 The setName() method sets the name of a thread.</p></li>\n</ul>\n<h2>Creating Thread Using <i>Threading</i> Module</h2>\n<p>To implement a new thread using the threading module, you have to do the following \u2212</p>\n<ul class=\"list\">\n<li><p>Define a new subclass of the <i>Thread</i> class.</p></li>\n<li><p>Override the <i>__init__(self [,args])</i> method to add additional arguments.</p></li>\n<li><p>Then, override the run(self [,args]) method to implement what the thread should do when started.</p></li>\n</ul>\n<p>Once you have created the new <i>Thread</i> subclass, you can create an instance of it and then start a new thread by invoking the <i>start()</i>, which in turn calls <i>run()</i> method.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nimport threading\nimport time\n\nexitFlag = 0\n\nclass myThread (threading.Thread):\n   def __init__(self, threadID, name, counter):\n      threading.Thread.__init__(self)\n      self.threadID = threadID\n      self.name = name\n      self.counter = counter\n   def run(self):\n      print \"Starting \" + self.name\n      print_time(self.name, 5, self.counter)\n      print \"Exiting \" + self.name\n\ndef print_time(threadName, counter, delay):\n   while counter:\n      if exitFlag:\n         threadName.exit()\n      time.sleep(delay)\n      print \"%s: %s\" % (threadName, time.ctime(time.time()))\n      counter -= 1\n\n# Create new threads\nthread1 = myThread(1, \"Thread-1\", 1)\nthread2 = myThread(2, \"Thread-2\", 2)\n\n# Start new Threads\nthread1.start()\nthread2.start()\n\nprint \"Exiting Main Thread\"\n</pre>\n<p>When the above code is  executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nStarting Thread-1\nStarting Thread-2\nExiting Main Thread\nThread-1: Thu Mar 21 09:10:03 2013\nThread-1: Thu Mar 21 09:10:04 2013\nThread-2: Thu Mar 21 09:10:04 2013\nThread-1: Thu Mar 21 09:10:05 2013\nThread-1: Thu Mar 21 09:10:06 2013\nThread-2: Thu Mar 21 09:10:06 2013\nThread-1: Thu Mar 21 09:10:07 2013\nExiting Thread-1\nThread-2: Thu Mar 21 09:10:08 2013\nThread-2: Thu Mar 21 09:10:10 2013\nThread-2: Thu Mar 21 09:10:12 2013\nExiting Thread-2\n</pre>\n<h2>Synchronizing Threads</h2>\n<p>The threading module provided with Python includes a simple-to-implement locking mechanism that allows you to synchronize threads. A new lock is created by calling the <i>Lock()</i> method, which returns the new lock.</p>\n<p>The <i>acquire(blocking)</i> method of the new lock object is used to force threads to run synchronously. The optional <i>blocking</i> parameter enables you to control whether the thread waits to acquire the lock.</p>\n<p>If <i>blocking</i> is set to 0, the thread returns immediately with a 0 value if the lock cannot be acquired and with a 1 if the lock was acquired. If blocking is set to 1, the thread blocks and wait for the lock to be released.</p>\n<p>The <i>release()</i> method of the new lock object is used to release the lock when it is no longer required.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nimport threading\nimport time\n\nclass myThread (threading.Thread):\n   def __init__(self, threadID, name, counter):\n      threading.Thread.__init__(self)\n      self.threadID = threadID\n      self.name = name\n      self.counter = counter\n   def run(self):\n      print \"Starting \" + self.name\n      # Get lock to synchronize threads\n      threadLock.acquire()\n      print_time(self.name, self.counter, 3)\n      # Free lock to release next thread\n      threadLock.release()\n\ndef print_time(threadName, delay, counter):\n   while counter:\n      time.sleep(delay)\n      print \"%s: %s\" % (threadName, time.ctime(time.time()))\n      counter -= 1\n\nthreadLock = threading.Lock()\nthreads = []\n\n# Create new threads\nthread1 = myThread(1, \"Thread-1\", 1)\nthread2 = myThread(2, \"Thread-2\", 2)\n\n# Start new Threads\nthread1.start()\nthread2.start()\n\n# Add threads to thread list\nthreads.append(thread1)\nthreads.append(thread2)\n\n# Wait for all threads to complete\nfor t in threads:\n    t.join()\nprint \"Exiting Main Thread\"\n</pre>\n<p>When the above code is  executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nStarting Thread-1\nStarting Thread-2\nThread-1: Thu Mar 21 09:11:28 2013\nThread-1: Thu Mar 21 09:11:29 2013\nThread-1: Thu Mar 21 09:11:30 2013\nThread-2: Thu Mar 21 09:11:32 2013\nThread-2: Thu Mar 21 09:11:34 2013\nThread-2: Thu Mar 21 09:11:36 2013\nExiting Main Thread\n</pre>\n<h2>Multithreaded Priority Queue</h2>\n<p>The <i>Queue</i> module allows you to create a new queue object that can hold a specific number of items. There are following methods to control the Queue \u2212</p>\n<ul class=\"list\">\n<li><p><b>get()</b> \u2212 The get() removes and returns an item from the queue.</p></li>\n<li><p><b>put()</b> \u2212 The put adds item to a queue.</p></li>\n<li><p><b>qsize()</b> \u2212 The qsize() returns the number of items that are currently in the queue.</p></li>\n<li><p><b>empty()</b> \u2212 The empty( ) returns True if queue is empty; otherwise, False.</p></li>\n<li><p><b>full()</b> \u2212 the full() returns True if queue is full; otherwise, False.</p></li>\n</ul>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nimport Queue\nimport threading\nimport time\n\nexitFlag = 0\n\nclass myThread (threading.Thread):\n   def __init__(self, threadID, name, q):\n      threading.Thread.__init__(self)\n      self.threadID = threadID\n      self.name = name\n      self.q = q\n   def run(self):\n      print \"Starting \" + self.name\n      process_data(self.name, self.q)\n      print \"Exiting \" + self.name\n\ndef process_data(threadName, q):\n   while not exitFlag:\n      queueLock.acquire()\n         if not workQueue.empty():\n            data = q.get()\n            queueLock.release()\n            print \"%s processing %s\" % (threadName, data)\n         else:\n            queueLock.release()\n         time.sleep(1)\n\nthreadList = [\"Thread-1\", \"Thread-2\", \"Thread-3\"]\nnameList = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"]\nqueueLock = threading.Lock()\nworkQueue = Queue.Queue(10)\nthreads = []\nthreadID = 1\n\n# Create new threads\nfor tName in threadList:\n   thread = myThread(threadID, tName, workQueue)\n   thread.start()\n   threads.append(thread)\n   threadID += 1\n\n# Fill the queue\nqueueLock.acquire()\nfor word in nameList:\n   workQueue.put(word)\nqueueLock.release()\n\n# Wait for queue to empty\nwhile not workQueue.empty():\n   pass\n\n# Notify threads it's time to exit\nexitFlag = 1\n\n# Wait for all threads to complete\nfor t in threads:\n   t.join()\nprint \"Exiting Main Thread\"\n</pre>\n<p>When the above code is  executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nStarting Thread-1\nStarting Thread-2\nStarting Thread-3\nThread-1 processing One\nThread-2 processing Two\nThread-3 processing Three\nThread-1 processing Four\nThread-2 processing Five\nExiting Thread-3\nExiting Thread-1\nExiting Thread-2\nExiting Main Thread\n</pre>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_sending_email.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_xml_processing.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>"}