{"title_html": "<h1>Python - XML Processing</h1>", "content": "\n Python - XML Processing \n  \n Advertisements \n \n<!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//-->\n\n\n \n  \n \n Previous Page\n \n \nNext Page \u00a0\n \n  \n  \n XML is a portable, open source language that allows programmers to develop applications that can be read by other applications, regardless of operating system and/or developmental language. \n What is XML? \n The Extensible Markup Language (XML) is a markup language much like HTML or SGML. This is recommended by the World Wide Web Consortium and available as an open standard. \n XML is extremely useful for keeping track of small to medium amounts of data without requiring a SQL-based backbone. \n XML Parser Architectures and APIs \n The Python standard library provides a minimal but useful set of interfaces to work with XML. \n The two most basic and broadly used APIs to XML data are the SAX and DOM interfaces. \n \nSimple API for XML (SAX) \u2212 Here, you register callbacks for events of interest and then let the parser proceed through the document. This is useful when your documents are large or you have memory limitations, it parses the file as it reads it from disk and the entire file is never stored in memory.\nDocument Object Model (DOM) API \u2212 This is a World Wide Web Consortium recommendation wherein the entire file is read into memory and stored in a hierarchical (tree-based) form to represent all the features of an XML document.\n\n \n SAX obviously cannot process information as fast as DOM can when working with large files. On the other hand, using DOM exclusively can really kill your resources, especially if used on a lot of small files. \n SAX is read-only, while DOM allows changes to the XML file. Since these two different APIs literally complement each other, there is no reason why you cannot use them both for large projects. \n For all our XML code examples, let's use a simple XML file movies.xml as an input \u2212 \n \n<collection shelf=\"New Arrivals\">\n<movie title=\"Enemy Behind\">\n   <type>War, Thriller</type>\n   <format>DVD</format>\n   <year>2003</year>\n   <rating>PG</rating>\n   <stars>10</stars>\n   <description>Talk about a US-Japan war</description>\n</movie>\n<movie title=\"Transformers\">\n   <type>Anime, Science Fiction</type>\n   <format>DVD</format>\n   <year>1989</year>\n   <rating>R</rating>\n   <stars>8</stars>\n   <description>A schientific fiction</description>\n</movie>\n   <movie title=\"Trigun\">\n   <type>Anime, Action</type>\n   <format>DVD</format>\n   <episodes>4</episodes>\n   <rating>PG</rating>\n   <stars>10</stars>\n   <description>Vash the Stampede!</description>\n</movie>\n<movie title=\"Ishtar\">\n   <type>Comedy</type>\n   <format>VHS</format>\n   <rating>PG</rating>\n   <stars>2</stars>\n   <description>Viewable boredom</description>\n</movie>\n</collection>\n \n Parsing XML with SAX APIs \n SAX is a standard interface for event-driven XML parsing. Parsing XML with SAX generally requires you to create your own ContentHandler by subclassing xml.sax.ContentHandler. \n Your ContentHandler handles the particular tags and attributes of your flavor(s) of XML. A ContentHandler object provides methods to handle various parsing events. Its owning parser calls ContentHandler methods as it parses the XML file. \n The methods startDocument and endDocument are called at the start and the end of the XML file. The method characters(text) is passed character data of the XML file via the parameter text. \n The ContentHandler is called at the start and end of each element. If the parser is not in namespace mode, the methods startElement(tag, attributes) and endElement(tag) are called; otherwise, the corresponding methods startElementNS and endElementNS are called. Here, tag is the element tag, and attributes is an Attributes object. \n Here are other important methods to understand before proceeding \u2212 \n The make_parser Method \n Following method creates a new parser object and returns it. The parser object created will be of the first parser type the system finds. \n \nxml.sax.make_parser( [parser_list] )\n \n Here is the detail of the parameters \u2212 \n \nparser_list \u2212 The optional argument consisting of a list of parsers to use which must all implement the make_parser method.\n \n The parse Method \n Following method creates a SAX parser and uses it to parse a document. \n \nxml.sax.parse( xmlfile, contenthandler[, errorhandler])\n \n Here is the detail of the parameters \u2212 \n \nxmlfile \u2212 This is the name of the XML file to read from.\ncontenthandler \u2212 This must be a ContentHandler object.\nerrorhandler \u2212 If specified, errorhandler must be a SAX ErrorHandler object.\n \n The parseString Method \n There is one more method to create a SAX parser and to parse the specified XML string. \n \nxml.sax.parseString(xmlstring, contenthandler[, errorhandler])\n \n Here is the detail of the parameters \u2212 \n \nxmlstring \u2212 This is the name of the XML string to read from.\ncontenthandler \u2212 This must be a ContentHandler object.\nerrorhandler \u2212 If specified, errorhandler must be a SAX ErrorHandler object.\n \n Example \n \n#!/usr/bin/python\n\nimport xml.sax\n\nclass MovieHandler( xml.sax.ContentHandler ):\n   def __init__(self):\n      self.CurrentData = \"\"\n      self.type = \"\"\n      self.format = \"\"\n      self.year = \"\"\n      self.rating = \"\"\n      self.stars = \"\"\n      self.description = \"\"\n\n   # Call when an element starts\n   def startElement(self, tag, attributes):\n      self.CurrentData = tag\n      if tag == \"movie\":\n         print \"*****Movie*****\"\n         title = attributes[\"title\"]\n         print \"Title:\", title\n\n   # Call when an elements ends\n   def endElement(self, tag):\n      if self.CurrentData == \"type\":\n         print \"Type:\", self.type\n      elif self.CurrentData == \"format\":\n         print \"Format:\", self.format\n      elif self.CurrentData == \"year\":\n         print \"Year:\", self.year\n      elif self.CurrentData == \"rating\":\n         print \"Rating:\", self.rating\n      elif self.CurrentData == \"stars\":\n         print \"Stars:\", self.stars\n      elif self.CurrentData == \"description\":\n         print \"Description:\", self.description\n      self.CurrentData = \"\"\n\n   # Call when a character is read\n   def characters(self, content):\n      if self.CurrentData == \"type\":\n         self.type = content\n      elif self.CurrentData == \"format\":\n         self.format = content\n      elif self.CurrentData == \"year\":\n         self.year = content\n      elif self.CurrentData == \"rating\":\n         self.rating = content\n      elif self.CurrentData == \"stars\":\n         self.stars = content\n      elif self.CurrentData == \"description\":\n         self.description = content\n  \nif ( __name__ == \"__main__\"):\n   \n   # create an XMLReader\n   parser = xml.sax.make_parser()\n   # turn off namepsaces\n   parser.setFeature(xml.sax.handler.feature_namespaces, 0)\n\n   # override the default ContextHandler\n   Handler = MovieHandler()\n   parser.setContentHandler( Handler )\n   \n   parser.parse(\"movies.xml\")\n \n This would produce following result \u2212 \n \n*****Movie*****\nTitle: Enemy Behind\nType: War, Thriller\nFormat: DVD\nYear: 2003\nRating: PG\nStars: 10\nDescription: Talk about a US-Japan war\n*****Movie*****\nTitle: Transformers\nType: Anime, Science Fiction\nFormat: DVD\nYear: 1989\nRating: R\nStars: 8\nDescription: A schientific fiction\n*****Movie*****\nTitle: Trigun\nType: Anime, Action\nFormat: DVD\nRating: PG\nStars: 10\nDescription: Vash the Stampede!\n*****Movie*****\nTitle: Ishtar\nType: Comedy\nFormat: VHS\nRating: PG\nStars: 2\nDescription: Viewable boredom\n \n For a complete detail on SAX API documentation, please refer to standard Python SAX APIs. \n Parsing XML with DOM APIs \n The Document Object Model (\"DOM\") is a cross-language API from the World Wide Web Consortium (W3C) for accessing and modifying XML documents. \n The DOM is extremely useful for random-access applications. SAX only allows you a view of one bit of the document at a time. If you are looking at one SAX element, you have no access to another. \n Here is the easiest way to quickly load an XML document and to create a minidom object using the xml.dom module. The minidom object provides a simple parser method that quickly creates a DOM tree from the XML file. \n The sample phrase calls the parse( file [,parser] ) function of the minidom object to parse the XML file designated by file into a DOM tree object. \n \n#!/usr/bin/python\n\nfrom xml.dom.minidom import parse\nimport xml.dom.minidom\n\n# Open XML document using minidom parser\nDOMTree = xml.dom.minidom.parse(\"movies.xml\")\ncollection = DOMTree.documentElement\nif collection.hasAttribute(\"shelf\"):\n   print \"Root element : %s\" % collection.getAttribute(\"shelf\")\n\n# Get all the movies in the collection\nmovies = collection.getElementsByTagName(\"movie\")\n\n# Print detail of each movie.\nfor movie in movies:\n   print \"*****Movie*****\"\n   if movie.hasAttribute(\"title\"):\n      print \"Title: %s\" % movie.getAttribute(\"title\")\n\n   type = movie.getElementsByTagName('type')[0]\n   print \"Type: %s\" % type.childNodes[0].data\n   format = movie.getElementsByTagName('format')[0]\n   print \"Format: %s\" % format.childNodes[0].data\n   rating = movie.getElementsByTagName('rating')[0]\n   print \"Rating: %s\" % rating.childNodes[0].data\n   description = movie.getElementsByTagName('description')[0]\n   print \"Description: %s\" % description.childNodes[0].data\n \n This would produce the following result \u2212 \n \nRoot element : New Arrivals\n*****Movie*****\nTitle: Enemy Behind\nType: War, Thriller\nFormat: DVD\nRating: PG\nDescription: Talk about a US-Japan war\n*****Movie*****\nTitle: Transformers\nType: Anime, Science Fiction\nFormat: DVD\nRating: R\nDescription: A schientific fiction\n*****Movie*****\nTitle: Trigun\nType: Anime, Action\nFormat: DVD\nRating: PG\nDescription: Vash the Stampede!\n*****Movie*****\nTitle: Ishtar\nType: Comedy\nFormat: VHS\nRating: PG\nDescription: Viewable boredom\n \n For a complete detail on DOM API documentation, please refer to standard Python DOM APIs. \n  \n \n Previous Page\n \n \n Print\n \n \nNext Page \u00a0\n \n  \n  PRINTING ENDS HERE  \n \nAdvertisements\n<!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//-->\n\n\n \n", "url": "https://www.tutorialspoint.com/python/python_xml_processing.htm", "html": "<!DOCTYPE html>\n\n<!--[if IE 8]><html class=\"ie ie8\"> <![endif]-->\n<!--[if IE 9]><html class=\"ie ie9\"> <![endif]-->\n<!--[if gt IE 9]><!--> <html> <!--<![endif]-->\n<head>\n<!-- Basic -->\n<meta charset=\"utf-8\"/>\n<title>Python XML Processing</title>\n<meta content=\"Python XML Processing - Learn Python in simple and easy steps starting from basic to advanced concepts with examples including Python Syntax Object Oriented Language, Methods, Tuples, Tools/Utilities, Exceptions Handling, Sockets, GUI, Extentions, XML Programming.\" name=\"description\">\n<meta content=\"Python, Tutorials, Learning, Beginners, Basics, Object Oriented Language, Methods, Overriding, Networking, Multithreading,Methods, Tuples, Tools/Utilities, Exceptions Handling, Sockets, GUI, Extentions, XML, Programming.\" name=\"Keywords\"/>\n<base href=\"https://www.tutorialspoint.com/\"/>\n<link href=\"/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"/>\n<meta content=\"width=device-width,initial-scale=1.0,user-scalable=yes\" name=\"viewport\"/>\n<meta content=\"en_US\" property=\"og:locale\">\n<meta content=\"website\" property=\"og:type\"/>\n<meta content=\"471319149685276\" property=\"fb:app_id\"/>\n<meta content=\"www.tutorialspoint.com\" property=\"og:site_name\"/>\n<meta content=\"yes\" name=\"apple-mobile-web-app-capable\"/>\n<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"/>\n<meta content=\"tutorialspoint.com\" name=\"author\"/>\n<script src=\"https://www.tutorialspoint.com/theme/js/script-min-v4.js?v=2\" type=\"text/javascript\"></script>\n<link href=\"https://www.tutorialspoint.com/theme/css/style-min.css?v=3.1\" rel=\"stylesheet\"/>\n<script>\r\nfunction openNav() {\t\r\n  document.getElementById(\"mySidenav\").style.width = \"250px\";\r\n  document.getElementById(\"right_obs\").style.display = \"block\";\r\n}\r\nfunction closeNav() {\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\nfunction close_obs_sidenav(){\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\n</script>\n<!-- Head Libs -->\n<!--[if IE 8]>\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/theme/css/ie8.css\">\r\n<![endif]-->\n<style>\r\n#privacy-banner {\r\n    position: fixed;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    max-width: 100%;\r\n    padding: 1rem .5rem;\r\n    background: #fff;\r\n    z-index: 1030;\r\n    color: #000;\r\n    font-size: 14px;\r\n    margin: 0;\r\n    display: none;\r\n    border-top: 2px solid rgb(130, 130, 130);\r\n  }\r\n  #privacy-banner p {\r\n    margin: 0;\r\n    color: #000;\r\n    text-align: center;\r\n  }\r\n  #privacy-banner a {\r\n    text-decoration: none;\r\n    margin: 20px auto 0 auto;\r\n    display: block;\r\n    max-width: 150px;\r\n  }\r\n  #privacy-banner a:hover {\r\n    text-decoration: underline;\r\n  }\r\n  #banner-learn {\r\n    color: #000;\r\n  }\r\n  #banner-accept {\r\n    padding: 7px 15px;\r\n    color: #fff;\r\n    border-radius: 5px;\r\n    background:#737373 !important;\r\n  }\r\n  @media (min-width: 768px) {\r\n    #privacy-banner {\r\n      padding: 1.5rem .5rem;\r\n    }\r\n    #privacy-banner a {\r\n      display: inline-block;\r\n      margin: 0 10px;\r\n    }\r\n}\r\npre.prettyprint.tryit {min-height:37px; background: #eee url(/python/images/try-it.jpg) top right no-repeat !important}select{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }\r\n.btnsbmt{ background: #fdbf00 !important;}\r\nul.nav-list.primary>li a.videolink{    background: none; margin: 0px; padding: 0px; border: 1px solid #d6d6d6;}\r\ndiv.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #fdbf00 url(/images/pattern.png) repeat center center !important;}\r\n.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #fdbf00 !important;}\r\n.submenu-item{ border-bottom: 2px solid #fdbf00 !important; border-top: 2px solid #fdbf00 !important }\r\n.ace_scroller{overflow: auto!important;}\r\na.demo{font-family: \"Open Sans\",Arial,sans-serif; background:#fdbf00; color:#fff; font-size:13px; padding:3px 10px; border:1px solid #d6d6d6; position:absolute; right:5px; margin:-6px 17px 0px 0px;}\r\na.demo:hover{opacity:.8}\r\n</style>\n<script>\r\n$(document).ready(function() {\r\n  $('input[name=\"q\"]').keydown(function(event){\r\n    if(event.keyCode == 13) {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n  });\r\n});\r\n</script>\n</meta></meta></head>\n<body onload=\"prettyPrint()\">\n<div class=\"wrapLoader\">\n<div class=\"imgLoader\">\n<img alt=\"\" height=\"70\" src=\"/images/loading-cg.gif\" width=\"70\"/>\n</div>\n</div>\n<div class=\"display-none\" id=\"right_obs\" onclick=\"close_obs_sidenav()\"></div>\n<header>\n<div class=\"container\">\n<h1 class=\"logo\">\n<a href=\"index.htm\" title=\"tutorialspoint\">\n<img alt=\"tutorialspoint\" src=\"/python/images/logo.png\"/>\n</a>\n</h1>\n<ul class=\"tp-inline-block pull-right\" id=\"tp-head-icons\">\n<li>\n<div class=\"tp-second-nav tp-display-none tp-pointer\" onclick=\"openNav()\">\n<i class=\"fa fa-th-large fa-lg\"></i>\n</div>\n</li>\n</ul>\n<button class=\"btn btn-responsive-nav btn-inverse\" data-target=\".nav-main-collapse\" data-toggle=\"collapse\" id=\"pull\" style=\"top: 24px!important\"> <i class=\"icon icon-bars\"></i> </button>\n<nav>\n<ul class=\"nav nav-pills nav-top\">\n<li><a href=\"/about/about_careers.htm\" style=\"background: #fffb09; font-weight: bold;\"><i class=\"icon icon-suitcase\"></i> Jobs</a></li>\n<li> <a href=\"/programming_examples/\" target=\"_blank\"><i class=\"fa fa-cubes\"></i> \u00a0Examples</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/whiteboard.htm\"><img alt=\"Whiteboard\" src=\"theme/css/icons/image-editor.png\" title=\"Whiteboard\"/> \u00a0Whiteboard</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/netmeeting.php\"><i class=\"fa-camera\"></i> \u00a0Net Meeting</a> </li>\n<li> <a href=\"/online_dev_tools.htm\"> <i class=\"dev-tools-menu\" style=\"opacity:.5\"></i> Tools </a> </li>\n<li> <a href=\"/articles/index.php\"><i class=\"icon icon-file-text-o\"></i> \u00a0Articles</a> </li>\n<li class=\"top-icons\">\n<ul class=\"social-icons\">\n<li class=\"facebook\"><a data-placement=\"bottom\" href=\"https://www.facebook.com/tutorialspointindia\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Facebook\">Facebook</a></li>\n<li class=\"googleplus\"><a data-placement=\"bottom\" href=\"https://plus.google.com/u/0/116678774017490391259/posts\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Google+\">Google+</a></li>\n<li class=\"twitter\"><a data-placement=\"bottom\" href=\"https://www.twitter.com/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Twitter\">Twitter</a></li>\n<li class=\"linkedin\"><a data-placement=\"bottom\" href=\"https://www.linkedin.com/company/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Linkedin\">Linkedin</a></li>\n<li class=\"youtube\"><a data-placement=\"bottom\" href=\"https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint YouTube\">YouTube</a></li>\n</ul>\n</li>\n</ul>\n</nav>\n</div>\n<div class=\"sidenav\" id=\"mySidenav\">\n<div class=\"navbar nav-main\">\n<div class=\"container\">\n<nav class=\"nav-main mega-menu\">\n<ul class=\"nav nav-pills nav-main\" id=\"mainMenu\">\n<li class=\"dropdown no-sub-menu\"> <a class=\"dropdown\" href=\"index.htm\"><i class=\"icon icon-home\"></i> Home</a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"/questions/index.php\"><i class=\"fa fa-send\"></i> Q/A </a> </li>\n<li class=\"dropdown\"><a class=\"dropdown\" href=\"tutorialslibrary.htm\"><span class=\"tut-lib\"> Library </span></a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"videotutorials/index.htm\"><i class=\"fa-toggle-right\"></i> Videos </a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"tutor_connect/index.php\"><i class=\"fa-user\"> </i> Tutors</a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"codingground.htm\"><i class=\"fa-code\"></i> Coding Ground </a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"https://store.tutorialspoint.com/\"><i class=\"fa-usd\"></i> Store </a> </li>\n<li class=\"dropdown no-sub-menu\">\n<div class=\"searchform-popup\">\n<input autocomplete=\"off\" class=\"header-search-box\" id=\"search-string\" name=\"q\" onblur=\"if (this.value == '') {this.value = 'Search your favorite tutorials...';}\" onfocus=\"if (this.value == 'Search your favorite tutorials...') {this.value = '';}\" placeholder=\"Search your favorite tutorials...\" type=\"text\"/>\n<div class=\"magnifying-glass\"><i class=\"icon-search\"></i> Search </div>\n</div>\n</li>\n</ul>\n</nav>\n</div>\n</div>\n</div>\n</header></body></html>\n\n<div style=\"clear:both;\"></div>\n<div class=\"main\" role=\"main\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-2\">\n<aside class=\"sidebar\">\n<style>\r\n.ts {\r\n   text-align:center !important;\r\n   vertical-align:middle !important;\r\n}\r\n</style>\n<div class=\"mini-logo\">\n<img alt=\"Python Tutorial\" src=\"/python/images/python-mini.jpg\">\n</img></div>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Python Basic Tutorial</li>\n<li><a href=\"/python/index.htm\" target=\"_top\">Python - Home</a></li>\n<li><a href=\"/python/python_overview.htm\" target=\"_top\">Python - Overview</a></li>\n<li><a href=\"/python/python_environment.htm\" target=\"_top\">Python - Environment Setup</a></li>\n<li><a href=\"/python/python_basic_syntax.htm\" target=\"_top\">Python - Basic Syntax</a></li>\n<li><a href=\"/python/python_variable_types.htm\" target=\"_top\">Python - Variable Types</a></li>\n<li><a href=\"/python/python_basic_operators.htm\" target=\"_top\">Python - Basic Operators</a></li>\n<li><a href=\"/python/python_decision_making.htm\" target=\"_top\">Python - Decision Making</a></li>\n<li><a href=\"/python/python_loops.htm\" target=\"_top\">Python - Loops</a></li>\n<li><a href=\"/python/python_numbers.htm\" target=\"_top\">Python - Numbers</a></li>\n<li><a href=\"/python/python_strings.htm\" target=\"_top\">Python - Strings</a></li>\n<li><a href=\"/python/python_lists.htm\" target=\"_top\">Python - Lists</a></li>\n<li><a href=\"/python/python_tuples.htm\" target=\"_top\">Python - Tuples</a></li>\n<li><a href=\"/python/python_dictionary.htm\" target=\"_top\">Python - Dictionary</a></li>\n<li><a href=\"/python/python_date_time.htm\" target=\"_top\">Python - Date &amp; Time</a></li>\n<li><a href=\"/python/python_functions.htm\" target=\"_top\">Python - Functions</a></li>\n<li><a href=\"/python/python_modules.htm\" target=\"_top\">Python - Modules</a></li>\n<li><a href=\"/python/python_files_io.htm\" target=\"_top\">Python - Files I/O</a></li>\n<li><a href=\"/python/python_exceptions.htm\" target=\"_top\">Python - Exceptions</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Python Advanced Tutorial</li>\n<li><a href=\"/python/python_classes_objects.htm\" target=\"_top\">Python - Classes/Objects</a></li>\n<li><a href=\"/python/python_reg_expressions.htm\" target=\"_top\">Python - Reg Expressions</a></li>\n<li><a href=\"/python/python_cgi_programming.htm\" target=\"_top\">Python - CGI Programming</a></li>\n<li><a href=\"/python/python_database_access.htm\" target=\"_top\">Python - Database Access</a></li>\n<li><a href=\"/python/python_networking.htm\" target=\"_top\">Python - Networking</a></li>\n<li><a href=\"/python/python_sending_email.htm\" target=\"_top\">Python - Sending Email</a></li>\n<li><a href=\"/python/python_multithreading.htm\" target=\"_top\">Python - Multithreading</a></li>\n<li><a href=\"/python/python_xml_processing.htm\" target=\"_top\">Python - XML Processing</a></li>\n<li><a href=\"/python/python_gui_programming.htm\" target=\"_top\">Python - GUI Programming</a></li>\n<li><a href=\"/python/python_further_extensions.htm\" target=\"_top\">Python - Further Extensions</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Python  Useful Resources</li>\n<li><a href=\"/python/python_questions_answers.htm\" target=\"_top\">Python - Questions and Answers</a></li>\n<li><a href=\"/python/python_quick_guide.htm\" target=\"_top\">Python - Quick Guide</a></li>\n<li><a href=\"/python/python_tools_utilities.htm\" target=\"_top\">Python - Tools/Utilities</a></li>\n<li><a href=\"/python/python_useful_resources.htm\" target=\"_top\">Python - Useful Resources</a></li>\n<li><a href=\"/python/python_discussion.htm\" target=\"_top\">Python - Discussion</a></li>\n</ul>\n<ul class=\"nav nav-list primary push-bottom left-menu special\">\n<li class=\"sreading\">Selected Reading</li>\n<li><a href=\"/upsc_ias_exams.htm\" target=\"_top\">UPSC IAS Exams Notes</a></li>\n<li><a href=\"/developers_best_practices/index.htm\" target=\"_top\">Developer's Best Practices</a></li>\n<li><a href=\"/questions_and_answers.htm\" target=\"_top\">Questions and Answers</a></li>\n<li><a href=\"/effective_resume_writing.htm\" target=\"_top\">Effective Resume Writing</a></li>\n<li><a href=\"/hr_interview_questions/index.htm\" target=\"_top\">HR Interview Questions</a></li>\n<li><a href=\"/computer_glossary.htm\" target=\"_top\">Computer Glossary</a></li>\n<li><a href=\"/computer_whoiswho.htm\" target=\"_top\">Who is Who</a></li>\n</ul>\n</aside>\n</div>\n<!-- PRINTING STARTS HERE -->\n<div class=\"row\">\n<div class=\"content\">\n<div class=\"col-md-7 middle-col\">\n<h1>Python - XML Processing</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_multithreading.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_gui_programming.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>XML is a portable, open source language that allows programmers to develop applications that can be read by other applications, regardless of operating system and/or developmental language.</p>\n<h2>What is XML?</h2>\n<p>The Extensible Markup Language (XML) is a markup language much like HTML or SGML. This is recommended by the World Wide Web Consortium and available as an open standard.</p>\n<p>XML is extremely useful for keeping track of small to medium amounts of data without requiring a SQL-based backbone.</p>\n<h2>XML Parser Architectures and APIs</h2>\n<p>The Python standard library provides a minimal but useful set of interfaces to work with XML.</p>\n<p>The two most basic and broadly used APIs to XML data are the SAX and DOM interfaces.</p>\n<ul class=\"list\">\n<li><p><b>Simple API for XML (SAX)</b> \u2212 Here, you register callbacks for events of interest and then let the parser proceed through the document. This is useful when your documents are large or you have memory limitations, it parses the file as it reads it from disk and the entire file is never stored in memory.</p></li>\n<li><p><b>Document Object Model (DOM) API</b> \u2212 This is a World Wide Web Consortium recommendation wherein the entire file is read into memory and stored in a hierarchical (tree-based) form to represent all the features of an XML document.\n</p></li>\n</ul>\n<p>SAX obviously cannot process information as fast as DOM can when working with large files. On the other hand, using DOM exclusively can really kill your resources, especially if used on a lot of small files.</p>\n<p>SAX is read-only, while DOM allows changes to the XML file. Since these two different APIs literally complement each other, there is no reason why you cannot use them both for large projects.</p>\n<p>For all our XML code examples, let's use a simple XML file <i>movies.xml</i> as an input \u2212</p>\n<pre class=\"prettyprint notranslate\" id=\"movies_xml\">\n&lt;collection shelf=\"New Arrivals\"&gt;\n&lt;movie title=\"Enemy Behind\"&gt;\n   &lt;type&gt;War, Thriller&lt;/type&gt;\n   &lt;format&gt;DVD&lt;/format&gt;\n   &lt;year&gt;2003&lt;/year&gt;\n   &lt;rating&gt;PG&lt;/rating&gt;\n   &lt;stars&gt;10&lt;/stars&gt;\n   &lt;description&gt;Talk about a US-Japan war&lt;/description&gt;\n&lt;/movie&gt;\n&lt;movie title=\"Transformers\"&gt;\n   &lt;type&gt;Anime, Science Fiction&lt;/type&gt;\n   &lt;format&gt;DVD&lt;/format&gt;\n   &lt;year&gt;1989&lt;/year&gt;\n   &lt;rating&gt;R&lt;/rating&gt;\n   &lt;stars&gt;8&lt;/stars&gt;\n   &lt;description&gt;A schientific fiction&lt;/description&gt;\n&lt;/movie&gt;\n   &lt;movie title=\"Trigun\"&gt;\n   &lt;type&gt;Anime, Action&lt;/type&gt;\n   &lt;format&gt;DVD&lt;/format&gt;\n   &lt;episodes&gt;4&lt;/episodes&gt;\n   &lt;rating&gt;PG&lt;/rating&gt;\n   &lt;stars&gt;10&lt;/stars&gt;\n   &lt;description&gt;Vash the Stampede!&lt;/description&gt;\n&lt;/movie&gt;\n&lt;movie title=\"Ishtar\"&gt;\n   &lt;type&gt;Comedy&lt;/type&gt;\n   &lt;format&gt;VHS&lt;/format&gt;\n   &lt;rating&gt;PG&lt;/rating&gt;\n   &lt;stars&gt;2&lt;/stars&gt;\n   &lt;description&gt;Viewable boredom&lt;/description&gt;\n&lt;/movie&gt;\n&lt;/collection&gt;\n</pre>\n<h2>Parsing XML with SAX APIs</h2>\n<p>SAX is a standard interface for event-driven XML parsing. Parsing XML with SAX generally requires you to create your own ContentHandler by subclassing xml.sax.ContentHandler.</p>\n<p>Your <i>ContentHandler</i> handles the particular tags and attributes of your flavor(s) of XML. A ContentHandler object provides methods to handle various parsing events. Its owning parser calls ContentHandler methods as it parses the XML file.</p>\n<p>The methods <i>startDocument</i> and <i>endDocument</i> are called at the start and the end of the XML file. The method <i>characters(text)</i> is passed character data of the XML file via the parameter text.</p>\n<p>The ContentHandler is called at the start and end of each element. If the parser is not in namespace mode, the methods <i>startElement(tag, attributes)</i> and <i>endElement(tag)</i> are called; otherwise, the corresponding methods <i>startElementNS</i> and <i>endElementNS</i> are called. Here, tag is the element tag, and attributes is an Attributes object.</p>\n<p>Here are other important methods to understand before proceeding \u2212</p>\n<h2>The <i>make_parser</i> Method</h2>\n<p>Following method creates a new parser object and returns it. The parser object created will be of the first parser type the system finds.</p>\n<pre class=\"result notranslate\">\nxml.sax.make_parser( [parser_list] )\n</pre>\n<p>Here is the detail of the parameters \u2212</p>\n<ul class=\"list\">\n<li><p><b>parser_list</b> \u2212 The optional argument consisting of a list of parsers to use which must all implement the make_parser method.</p></li>\n</ul>\n<h2>The <i>parse</i> Method</h2>\n<p>Following method creates a SAX parser and uses it to parse a document.</p>\n<pre class=\"result notranslate\">\nxml.sax.parse( xmlfile, contenthandler[, errorhandler])\n</pre>\n<p>Here is the detail of the parameters \u2212</p>\n<ul class=\"list\">\n<li><p><b>xmlfile</b> \u2212 This is the name of the XML file to read from.</p></li>\n<li><p><b>contenthandler</b> \u2212 This must be a ContentHandler object.</p></li>\n<li><p><b>errorhandler</b> \u2212 If specified, errorhandler must be a SAX ErrorHandler object.</p></li>\n</ul>\n<h2>The <i>parseString</i> Method</h2>\n<p>There is one more method to create a SAX parser and to parse the specified <b>XML string</b>.</p>\n<pre class=\"result notranslate\">\nxml.sax.parseString(xmlstring, contenthandler[, errorhandler])\n</pre>\n<p>Here is the detail of the parameters \u2212</p>\n<ul class=\"list\">\n<li><p><b>xmlstring</b> \u2212 This is the name of the XML string to read from.</p></li>\n<li><p><b>contenthandler</b> \u2212 This must be a ContentHandler object.</p></li>\n<li><p><b>errorhandler</b> \u2212 If specified, errorhandler must be a SAX ErrorHandler object.</p></li>\n</ul>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\" title=\",,,movies_xml\">\n#!/usr/bin/python\n\nimport xml.sax\n\nclass MovieHandler( xml.sax.ContentHandler ):\n   def __init__(self):\n      self.CurrentData = \"\"\n      self.type = \"\"\n      self.format = \"\"\n      self.year = \"\"\n      self.rating = \"\"\n      self.stars = \"\"\n      self.description = \"\"\n\n   # Call when an element starts\n   def startElement(self, tag, attributes):\n      self.CurrentData = tag\n      if tag == \"movie\":\n         print \"*****Movie*****\"\n         title = attributes[\"title\"]\n         print \"Title:\", title\n\n   # Call when an elements ends\n   def endElement(self, tag):\n      if self.CurrentData == \"type\":\n         print \"Type:\", self.type\n      elif self.CurrentData == \"format\":\n         print \"Format:\", self.format\n      elif self.CurrentData == \"year\":\n         print \"Year:\", self.year\n      elif self.CurrentData == \"rating\":\n         print \"Rating:\", self.rating\n      elif self.CurrentData == \"stars\":\n         print \"Stars:\", self.stars\n      elif self.CurrentData == \"description\":\n         print \"Description:\", self.description\n      self.CurrentData = \"\"\n\n   # Call when a character is read\n   def characters(self, content):\n      if self.CurrentData == \"type\":\n         self.type = content\n      elif self.CurrentData == \"format\":\n         self.format = content\n      elif self.CurrentData == \"year\":\n         self.year = content\n      elif self.CurrentData == \"rating\":\n         self.rating = content\n      elif self.CurrentData == \"stars\":\n         self.stars = content\n      elif self.CurrentData == \"description\":\n         self.description = content\n  \nif ( __name__ == \"__main__\"):\n   \n   # create an XMLReader\n   parser = xml.sax.make_parser()\n   # turn off namepsaces\n   parser.setFeature(xml.sax.handler.feature_namespaces, 0)\n\n   # override the default ContextHandler\n   Handler = MovieHandler()\n   parser.setContentHandler( Handler )\n   \n   parser.parse(\"movies.xml\")\n</pre>\n<p>This would produce following result \u2212</p>\n<pre class=\"result notranslate\">\n*****Movie*****\nTitle: Enemy Behind\nType: War, Thriller\nFormat: DVD\nYear: 2003\nRating: PG\nStars: 10\nDescription: Talk about a US-Japan war\n*****Movie*****\nTitle: Transformers\nType: Anime, Science Fiction\nFormat: DVD\nYear: 1989\nRating: R\nStars: 8\nDescription: A schientific fiction\n*****Movie*****\nTitle: Trigun\nType: Anime, Action\nFormat: DVD\nRating: PG\nStars: 10\nDescription: Vash the Stampede!\n*****Movie*****\nTitle: Ishtar\nType: Comedy\nFormat: VHS\nRating: PG\nStars: 2\nDescription: Viewable boredom\n</pre>\n<p>For a complete detail on SAX API documentation, please refer to standard <a href=\"http://docs.python.org/library/xml.sax.html\" rel=\"nofollow\" target=\"_blank\">Python SAX APIs</a>.</p>\n<h2>Parsing XML with DOM APIs</h2>\n<p>The Document Object Model (\"DOM\") is a cross-language API from the World Wide Web Consortium (W3C) for accessing and modifying XML documents.</p>\n<p>The DOM is extremely useful for random-access applications. SAX only allows you a view of one bit of the document at a time. If you are looking at one SAX element, you have no access to another.</p>\n<p>Here is the easiest way to quickly load an XML document and to create a minidom object using the xml.dom module. The minidom object provides a simple parser method that quickly creates a DOM tree from the XML file.</p>\n<p>The sample phrase calls the parse( file [,parser] ) function of the minidom object to parse the XML file designated by file into a DOM tree object.</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nfrom xml.dom.minidom import parse\nimport xml.dom.minidom\n\n# Open XML document using minidom parser\nDOMTree = xml.dom.minidom.parse(\"movies.xml\")\ncollection = DOMTree.documentElement\nif collection.hasAttribute(\"shelf\"):\n   print \"Root element : %s\" % collection.getAttribute(\"shelf\")\n\n# Get all the movies in the collection\nmovies = collection.getElementsByTagName(\"movie\")\n\n# Print detail of each movie.\nfor movie in movies:\n   print \"*****Movie*****\"\n   if movie.hasAttribute(\"title\"):\n      print \"Title: %s\" % movie.getAttribute(\"title\")\n\n   type = movie.getElementsByTagName('type')[0]\n   print \"Type: %s\" % type.childNodes[0].data\n   format = movie.getElementsByTagName('format')[0]\n   print \"Format: %s\" % format.childNodes[0].data\n   rating = movie.getElementsByTagName('rating')[0]\n   print \"Rating: %s\" % rating.childNodes[0].data\n   description = movie.getElementsByTagName('description')[0]\n   print \"Description: %s\" % description.childNodes[0].data\n</pre>\n<p>This would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nRoot element : New Arrivals\n*****Movie*****\nTitle: Enemy Behind\nType: War, Thriller\nFormat: DVD\nRating: PG\nDescription: Talk about a US-Japan war\n*****Movie*****\nTitle: Transformers\nType: Anime, Science Fiction\nFormat: DVD\nRating: R\nDescription: A schientific fiction\n*****Movie*****\nTitle: Trigun\nType: Anime, Action\nFormat: DVD\nRating: PG\nDescription: Vash the Stampede!\n*****Movie*****\nTitle: Ishtar\nType: Comedy\nFormat: VHS\nRating: PG\nDescription: Viewable boredom\n</pre>\n<p>For a complete detail on DOM API documentation, please refer to standard <a href=\"http://docs.python.org/library/xml.dom.html\" rel=\"nofollow\" target=\"_blank\">Python DOM APIs</a>.</p>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_multithreading.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_gui_programming.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n<div class=\"row\">\n<div class=\"col-md-3\" id=\"rightbar\">\n<div class=\"simple-ad\">\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.facebook.com/sharer.php?u=' + 'https://www.tutorialspoint.com/python/python_xml_processing.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/facebookIcon.jpg\">\n</img></a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://twitter.com/share?url=' + 'https://www.tutorialspoint.com/python/python_xml_processing.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/twitterIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'https://www.tutorialspoint.com/python/python_xml_processing.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/linkedinIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=https://www.tutorialspoint.com/python/python_xml_processing.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/googlePlusIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.stumbleupon.com/submit?url=https://www.tutorialspoint.com/python/python_xml_processing.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/StumbleUponIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://reddit.com/submit?url=https://www.tutorialspoint.com/python/python_xml_processing.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/reddit.jpg\"/>\n</a>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\ngoogle_ad_format = \"300x250_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 600;\ngoogle_ad_format = \"300x600_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"ca-pub-2537027957187252\";\n/* Right Side Ad */\ngoogle_ad_slot = \"right_side_ad\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\n//-->\n</script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"footer-copyright\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-1\">\n<a class=\"logo\" href=\"index.htm\"> <img alt=\"Tutorials Point\" class=\"img-responsive\" src=\"/scripts/img/logo-footer.png\"/> </a>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<nav id=\"sub-menu\">\n<ul>\n<li><a href=\"/about/about_privacy.htm\">Privacy Policy</a></li>\n<li><a href=\"/about/about_cookies.htm\">Cookies Policy</a></li>\n<li><a href=\"/about/contact_us.htm\">Contact</a></li>\n</ul>\n</nav>\n</div>\n<div class=\"col-md-3 col-sm-12 col-xs-12\">\n<p>\u00a9 Copyright 2019. All Rights Reserved.</p>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<div class=\"news-group\">\n<input autocomplete=\"off\" class=\"form-control-foot search\" id=\"textemail\" name=\"textemail\" onblur=\"if (this.value == '') {this.value = 'Enter email for newsletter...';}\" onfocus=\"if (this.value == 'Enter email for newsletter...') {this.value = '';}\" placeholder=\"Enter email for newsletter\" type=\"text\"/>\n<span class=\"input-group-btn\"> <button class=\"btn btn-default btn-footer\" id=\"btnemail\" onclick=\"javascript:void(0);\" type=\"submit\">go</button> </span>\n<div id=\"newsresponse\"></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"privacy-banner\">\n<div>\n<p>\n      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.\n      <a href=\"javascript:void(0)\" id=\"banner-accept\">Accept</a>\n<a href=\"/about/about_cookies.htm\" id=\"banner-learn\" target=\"_blank\">Learn more</a>\n</p>\n</div>\n</div>\n<script>\n// Banner Trigger if Not Closed\nif (!localStorage.bannerClosed) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n} else {\n  document.getElementById('privacy-banner').style.display = \"none\";\n}\ndocument.getElementById('banner-accept').addEventListener('click', function() {\n  document.getElementById('privacy-banner').style.display = \"none\";\n  localStorage.bannerClosed = 'true';\n});\nif (navigator.userAgent.match(/Opera|OPR\\//)) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n}\n</script>\n<!-- Libs -->\n<script src=\"/theme/js/custom-min.js?v=7\"></script>\n<script src=\"https://www.google-analytics.com/urchin.js\">\n</script>\n<script>\n_uacct = \"UA-232293-6\";\nurchinTracker();\n$('.pg-icon').click(function(){\n   $('.wrapLoader').show();\n});\n</script>\n<script src=\"/theme/js/jquery.colorbox-min.js\"></script>\n<script>\n   var tryit = new $.TryIt('/python/try_python.php');\n   tryit.compile();\n</script>\n\n\n", "title": "Python - XML Processing", "content_html": "<div class=\"col-md-7 middle-col\">\n<h1>Python - XML Processing</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_multithreading.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_gui_programming.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>XML is a portable, open source language that allows programmers to develop applications that can be read by other applications, regardless of operating system and/or developmental language.</p>\n<h2>What is XML?</h2>\n<p>The Extensible Markup Language (XML) is a markup language much like HTML or SGML. This is recommended by the World Wide Web Consortium and available as an open standard.</p>\n<p>XML is extremely useful for keeping track of small to medium amounts of data without requiring a SQL-based backbone.</p>\n<h2>XML Parser Architectures and APIs</h2>\n<p>The Python standard library provides a minimal but useful set of interfaces to work with XML.</p>\n<p>The two most basic and broadly used APIs to XML data are the SAX and DOM interfaces.</p>\n<ul class=\"list\">\n<li><p><b>Simple API for XML (SAX)</b> \u2212 Here, you register callbacks for events of interest and then let the parser proceed through the document. This is useful when your documents are large or you have memory limitations, it parses the file as it reads it from disk and the entire file is never stored in memory.</p></li>\n<li><p><b>Document Object Model (DOM) API</b> \u2212 This is a World Wide Web Consortium recommendation wherein the entire file is read into memory and stored in a hierarchical (tree-based) form to represent all the features of an XML document.\n</p></li>\n</ul>\n<p>SAX obviously cannot process information as fast as DOM can when working with large files. On the other hand, using DOM exclusively can really kill your resources, especially if used on a lot of small files.</p>\n<p>SAX is read-only, while DOM allows changes to the XML file. Since these two different APIs literally complement each other, there is no reason why you cannot use them both for large projects.</p>\n<p>For all our XML code examples, let's use a simple XML file <i>movies.xml</i> as an input \u2212</p>\n<pre class=\"prettyprint notranslate\" id=\"movies_xml\">\n&lt;collection shelf=\"New Arrivals\"&gt;\n&lt;movie title=\"Enemy Behind\"&gt;\n   &lt;type&gt;War, Thriller&lt;/type&gt;\n   &lt;format&gt;DVD&lt;/format&gt;\n   &lt;year&gt;2003&lt;/year&gt;\n   &lt;rating&gt;PG&lt;/rating&gt;\n   &lt;stars&gt;10&lt;/stars&gt;\n   &lt;description&gt;Talk about a US-Japan war&lt;/description&gt;\n&lt;/movie&gt;\n&lt;movie title=\"Transformers\"&gt;\n   &lt;type&gt;Anime, Science Fiction&lt;/type&gt;\n   &lt;format&gt;DVD&lt;/format&gt;\n   &lt;year&gt;1989&lt;/year&gt;\n   &lt;rating&gt;R&lt;/rating&gt;\n   &lt;stars&gt;8&lt;/stars&gt;\n   &lt;description&gt;A schientific fiction&lt;/description&gt;\n&lt;/movie&gt;\n   &lt;movie title=\"Trigun\"&gt;\n   &lt;type&gt;Anime, Action&lt;/type&gt;\n   &lt;format&gt;DVD&lt;/format&gt;\n   &lt;episodes&gt;4&lt;/episodes&gt;\n   &lt;rating&gt;PG&lt;/rating&gt;\n   &lt;stars&gt;10&lt;/stars&gt;\n   &lt;description&gt;Vash the Stampede!&lt;/description&gt;\n&lt;/movie&gt;\n&lt;movie title=\"Ishtar\"&gt;\n   &lt;type&gt;Comedy&lt;/type&gt;\n   &lt;format&gt;VHS&lt;/format&gt;\n   &lt;rating&gt;PG&lt;/rating&gt;\n   &lt;stars&gt;2&lt;/stars&gt;\n   &lt;description&gt;Viewable boredom&lt;/description&gt;\n&lt;/movie&gt;\n&lt;/collection&gt;\n</pre>\n<h2>Parsing XML with SAX APIs</h2>\n<p>SAX is a standard interface for event-driven XML parsing. Parsing XML with SAX generally requires you to create your own ContentHandler by subclassing xml.sax.ContentHandler.</p>\n<p>Your <i>ContentHandler</i> handles the particular tags and attributes of your flavor(s) of XML. A ContentHandler object provides methods to handle various parsing events. Its owning parser calls ContentHandler methods as it parses the XML file.</p>\n<p>The methods <i>startDocument</i> and <i>endDocument</i> are called at the start and the end of the XML file. The method <i>characters(text)</i> is passed character data of the XML file via the parameter text.</p>\n<p>The ContentHandler is called at the start and end of each element. If the parser is not in namespace mode, the methods <i>startElement(tag, attributes)</i> and <i>endElement(tag)</i> are called; otherwise, the corresponding methods <i>startElementNS</i> and <i>endElementNS</i> are called. Here, tag is the element tag, and attributes is an Attributes object.</p>\n<p>Here are other important methods to understand before proceeding \u2212</p>\n<h2>The <i>make_parser</i> Method</h2>\n<p>Following method creates a new parser object and returns it. The parser object created will be of the first parser type the system finds.</p>\n<pre class=\"result notranslate\">\nxml.sax.make_parser( [parser_list] )\n</pre>\n<p>Here is the detail of the parameters \u2212</p>\n<ul class=\"list\">\n<li><p><b>parser_list</b> \u2212 The optional argument consisting of a list of parsers to use which must all implement the make_parser method.</p></li>\n</ul>\n<h2>The <i>parse</i> Method</h2>\n<p>Following method creates a SAX parser and uses it to parse a document.</p>\n<pre class=\"result notranslate\">\nxml.sax.parse( xmlfile, contenthandler[, errorhandler])\n</pre>\n<p>Here is the detail of the parameters \u2212</p>\n<ul class=\"list\">\n<li><p><b>xmlfile</b> \u2212 This is the name of the XML file to read from.</p></li>\n<li><p><b>contenthandler</b> \u2212 This must be a ContentHandler object.</p></li>\n<li><p><b>errorhandler</b> \u2212 If specified, errorhandler must be a SAX ErrorHandler object.</p></li>\n</ul>\n<h2>The <i>parseString</i> Method</h2>\n<p>There is one more method to create a SAX parser and to parse the specified <b>XML string</b>.</p>\n<pre class=\"result notranslate\">\nxml.sax.parseString(xmlstring, contenthandler[, errorhandler])\n</pre>\n<p>Here is the detail of the parameters \u2212</p>\n<ul class=\"list\">\n<li><p><b>xmlstring</b> \u2212 This is the name of the XML string to read from.</p></li>\n<li><p><b>contenthandler</b> \u2212 This must be a ContentHandler object.</p></li>\n<li><p><b>errorhandler</b> \u2212 If specified, errorhandler must be a SAX ErrorHandler object.</p></li>\n</ul>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\" title=\",,,movies_xml\">\n#!/usr/bin/python\n\nimport xml.sax\n\nclass MovieHandler( xml.sax.ContentHandler ):\n   def __init__(self):\n      self.CurrentData = \"\"\n      self.type = \"\"\n      self.format = \"\"\n      self.year = \"\"\n      self.rating = \"\"\n      self.stars = \"\"\n      self.description = \"\"\n\n   # Call when an element starts\n   def startElement(self, tag, attributes):\n      self.CurrentData = tag\n      if tag == \"movie\":\n         print \"*****Movie*****\"\n         title = attributes[\"title\"]\n         print \"Title:\", title\n\n   # Call when an elements ends\n   def endElement(self, tag):\n      if self.CurrentData == \"type\":\n         print \"Type:\", self.type\n      elif self.CurrentData == \"format\":\n         print \"Format:\", self.format\n      elif self.CurrentData == \"year\":\n         print \"Year:\", self.year\n      elif self.CurrentData == \"rating\":\n         print \"Rating:\", self.rating\n      elif self.CurrentData == \"stars\":\n         print \"Stars:\", self.stars\n      elif self.CurrentData == \"description\":\n         print \"Description:\", self.description\n      self.CurrentData = \"\"\n\n   # Call when a character is read\n   def characters(self, content):\n      if self.CurrentData == \"type\":\n         self.type = content\n      elif self.CurrentData == \"format\":\n         self.format = content\n      elif self.CurrentData == \"year\":\n         self.year = content\n      elif self.CurrentData == \"rating\":\n         self.rating = content\n      elif self.CurrentData == \"stars\":\n         self.stars = content\n      elif self.CurrentData == \"description\":\n         self.description = content\n  \nif ( __name__ == \"__main__\"):\n   \n   # create an XMLReader\n   parser = xml.sax.make_parser()\n   # turn off namepsaces\n   parser.setFeature(xml.sax.handler.feature_namespaces, 0)\n\n   # override the default ContextHandler\n   Handler = MovieHandler()\n   parser.setContentHandler( Handler )\n   \n   parser.parse(\"movies.xml\")\n</pre>\n<p>This would produce following result \u2212</p>\n<pre class=\"result notranslate\">\n*****Movie*****\nTitle: Enemy Behind\nType: War, Thriller\nFormat: DVD\nYear: 2003\nRating: PG\nStars: 10\nDescription: Talk about a US-Japan war\n*****Movie*****\nTitle: Transformers\nType: Anime, Science Fiction\nFormat: DVD\nYear: 1989\nRating: R\nStars: 8\nDescription: A schientific fiction\n*****Movie*****\nTitle: Trigun\nType: Anime, Action\nFormat: DVD\nRating: PG\nStars: 10\nDescription: Vash the Stampede!\n*****Movie*****\nTitle: Ishtar\nType: Comedy\nFormat: VHS\nRating: PG\nStars: 2\nDescription: Viewable boredom\n</pre>\n<p>For a complete detail on SAX API documentation, please refer to standard <a href=\"http://docs.python.org/library/xml.sax.html\" rel=\"nofollow\" target=\"_blank\">Python SAX APIs</a>.</p>\n<h2>Parsing XML with DOM APIs</h2>\n<p>The Document Object Model (\"DOM\") is a cross-language API from the World Wide Web Consortium (W3C) for accessing and modifying XML documents.</p>\n<p>The DOM is extremely useful for random-access applications. SAX only allows you a view of one bit of the document at a time. If you are looking at one SAX element, you have no access to another.</p>\n<p>Here is the easiest way to quickly load an XML document and to create a minidom object using the xml.dom module. The minidom object provides a simple parser method that quickly creates a DOM tree from the XML file.</p>\n<p>The sample phrase calls the parse( file [,parser] ) function of the minidom object to parse the XML file designated by file into a DOM tree object.</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nfrom xml.dom.minidom import parse\nimport xml.dom.minidom\n\n# Open XML document using minidom parser\nDOMTree = xml.dom.minidom.parse(\"movies.xml\")\ncollection = DOMTree.documentElement\nif collection.hasAttribute(\"shelf\"):\n   print \"Root element : %s\" % collection.getAttribute(\"shelf\")\n\n# Get all the movies in the collection\nmovies = collection.getElementsByTagName(\"movie\")\n\n# Print detail of each movie.\nfor movie in movies:\n   print \"*****Movie*****\"\n   if movie.hasAttribute(\"title\"):\n      print \"Title: %s\" % movie.getAttribute(\"title\")\n\n   type = movie.getElementsByTagName('type')[0]\n   print \"Type: %s\" % type.childNodes[0].data\n   format = movie.getElementsByTagName('format')[0]\n   print \"Format: %s\" % format.childNodes[0].data\n   rating = movie.getElementsByTagName('rating')[0]\n   print \"Rating: %s\" % rating.childNodes[0].data\n   description = movie.getElementsByTagName('description')[0]\n   print \"Description: %s\" % description.childNodes[0].data\n</pre>\n<p>This would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nRoot element : New Arrivals\n*****Movie*****\nTitle: Enemy Behind\nType: War, Thriller\nFormat: DVD\nRating: PG\nDescription: Talk about a US-Japan war\n*****Movie*****\nTitle: Transformers\nType: Anime, Science Fiction\nFormat: DVD\nRating: R\nDescription: A schientific fiction\n*****Movie*****\nTitle: Trigun\nType: Anime, Action\nFormat: DVD\nRating: PG\nDescription: Vash the Stampede!\n*****Movie*****\nTitle: Ishtar\nType: Comedy\nFormat: VHS\nRating: PG\nDescription: Viewable boredom\n</pre>\n<p>For a complete detail on DOM API documentation, please refer to standard <a href=\"http://docs.python.org/library/xml.dom.html\" rel=\"nofollow\" target=\"_blank\">Python DOM APIs</a>.</p>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_multithreading.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_gui_programming.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>"}