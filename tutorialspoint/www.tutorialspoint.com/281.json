{"title_html": "<h1>Python - Variable Types</h1>", "content": "\n Python - Variable Types \n  \n Advertisements \n \n<!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//-->\n\n\n \n  \n \n Previous Page\n \n \nNext Page \u00a0\n \n  \n  \n Variables are nothing but reserved memory locations to store values. This means that when you create a variable you reserve some space in memory. \n Based on the data type of a variable, the interpreter allocates memory and decides what can be stored in the reserved memory. Therefore, by assigning different data types to variables, you can store integers, decimals or characters in these variables. \n Assigning Values to Variables \n Python variables do not need explicit declaration to reserve memory space. The declaration happens automatically when you assign a value to a variable. The equal sign (=) is used to assign values to variables. \n The operand to the left of the = operator is the name of the variable and the operand to the right of the = operator is the value stored in the variable. For example \u2212 \n  Live Demo \n \n#!/usr/bin/python\n\ncounter = 100          # An integer assignment\nmiles   = 1000.0       # A floating point\nname    = \"John\"       # A string\n\nprint counter\nprint miles\nprint name\n \n Here, 100, 1000.0 and  \"John\" are the values assigned to counter, miles, and name variables, respectively. This produces the following result \u2212 \n \n100\n1000.0\nJohn\n \n Multiple Assignment \n Python allows you to assign a single value to several variables simultaneously. For example \u2212 \n \na = b = c = 1\n \n Here, an integer object is created with the value 1, and all three variables are assigned to the same memory location. You can also assign multiple objects to multiple variables. For example \u2212 \n \na,b,c = 1,2,\"john\"\n \n Here, two integer objects with values 1 and 2 are assigned to variables a and b respectively, and one string object with the value \"john\" is assigned to the variable c. \n Standard Data Types \n The data stored in memory can be of many types. For example, a person's age is stored as a numeric value and his or her address is stored as alphanumeric characters. Python has various standard data types that are used to define the operations possible on them and the storage method for each of them. \n Python has five standard data types \u2212 \n \nNumbers\nString\nList\nTuple\nDictionary\n \n Python Numbers \n Number data types store numeric values. Number objects are created when you assign a value to them. For example \u2212 \n \nvar1 = 1\nvar2 = 10\n \n You can also delete the reference to a number object by using the del statement. The syntax of the del statement is \u2212 \n \ndel var1[,var2[,var3[....,varN]]]]\n \n You can delete a single object or multiple objects by using the del statement. For example \u2212 \n \ndel var\ndel var_a, var_b\n \n Python supports four different numerical types \u2212 \n \nint (signed integers)\nlong (long integers, they can also be represented in octal and hexadecimal)\nfloat (floating point real values)\ncomplex (complex numbers)\n \n Examples \n Here are some examples of numbers \u2212 \n \n\nint\nlong\nfloat\ncomplex\n\n\n10\n51924361L\n0.0\n3.14j\n\n\n100\n-0x19323L\n15.20\n45.j\n\n\n-786\n0122L\n-21.9\n9.322e-36j\n\n\n080\n0xDEFABCECBDAECBFBAEl\n32.3+e18\n.876j\n\n\n-0490\n535633629843L\n-90.\n-.6545+0J\n\n\n-0x260\n-052318172735L\n-32.54e100\n3e+26J\n\n\n0x69\n-4721885298529L\n70.2-E12\n4.53e-7j\n\n \n \nPython allows you to use a lowercase l with long, but it is recommended that you use only an uppercase L to avoid confusion with the number 1. Python displays long integers with an uppercase L.\nA complex number consists of an ordered pair of real floating-point numbers denoted by x + yj, where x and y are the real numbers and j is the imaginary unit.\n \n Python Strings \n Strings in Python are identified as a contiguous set of characters represented in the quotation marks. Python allows for either pairs of single or double quotes. Subsets of strings can be taken using the slice operator ([ ] and [:] ) with indexes starting at 0 in the beginning of the string and working their way from -1 at the end. \n The plus (+) sign is the string concatenation operator and the asterisk (*) is the repetition operator. For example \u2212 \n  Live Demo \n \n#!/usr/bin/python\n\nstr = 'Hello World!'\n\nprint str          # Prints complete string\nprint str[0]       # Prints first character of the string\nprint str[2:5]     # Prints characters starting from 3rd to 5th\nprint str[2:]      # Prints string starting from 3rd character\nprint str * 2      # Prints string two times\nprint str + \"TEST\" # Prints concatenated string\n \n This will produce the following result \u2212 \n \nHello World!\nH\nllo\nllo World!\nHello World!Hello World!\nHello World!TEST\n \n Python Lists \n Lists are the most versatile of Python's compound data types. A list contains items separated by commas and enclosed within square brackets ([]). To some extent, lists are similar to arrays in C. One difference between them is that all the items belonging to a list can be of different data type. \n The values stored in a list can be accessed using the slice operator ([ ] and [:]) with indexes starting at 0 in the beginning of the list and working their way to end -1. The plus (+) sign is the list concatenation operator, and the asterisk (*) is the repetition operator. For example \u2212 \n \n#!/usr/bin/python\n\nlist = [ 'abcd', 786 , 2.23, 'john', 70.2 ]\ntinylist = [123, 'john']\n\nprint list          # Prints complete list\nprint list[0]       # Prints first element of the list\nprint list[1:3]     # Prints elements starting from 2nd till 3rd \nprint list[2:]      # Prints elements starting from 3rd element\nprint tinylist * 2  # Prints list two times\nprint list + tinylist # Prints concatenated lists\n \n This produce the following result \u2212 \n \n['abcd', 786, 2.23, 'john', 70.2]\nabcd\n[786, 2.23]\n[2.23, 'john', 70.2]\n[123, 'john', 123, 'john']\n['abcd', 786, 2.23, 'john', 70.2, 123, 'john']\n \n Python Tuples \n A tuple is another sequence data type that is similar to the list. A tuple consists of a number of values separated by commas. Unlike lists, however, tuples are enclosed within parentheses. \n The main differences between lists and tuples are: Lists are enclosed in brackets ( [ ] ) and their elements and size can be changed, while tuples are enclosed in parentheses ( ( ) ) and cannot be updated. Tuples can be thought of as read-only lists. For example \u2212 \n  Live Demo \n \n#!/usr/bin/python\n\ntuple = ( 'abcd', 786 , 2.23, 'john', 70.2  )\ntinytuple = (123, 'john')\n\nprint tuple           # Prints complete list\nprint tuple[0]        # Prints first element of the list\nprint tuple[1:3]      # Prints elements starting from 2nd till 3rd \nprint tuple[2:]       # Prints elements starting from 3rd element\nprint tinytuple * 2   # Prints list two times\nprint tuple + tinytuple # Prints concatenated lists\n \n This produce the following result \u2212 \n \n('abcd', 786, 2.23, 'john', 70.2)\nabcd\n(786, 2.23)\n(2.23, 'john', 70.2)\n(123, 'john', 123, 'john')\n('abcd', 786, 2.23, 'john', 70.2, 123, 'john')\n \n The following code is invalid with tuple, because we attempted to update a tuple, which is not allowed. Similar case is possible with lists \u2212 \n \n#!/usr/bin/python\n\ntuple = ( 'abcd', 786 , 2.23, 'john', 70.2  )\nlist = [ 'abcd', 786 , 2.23, 'john', 70.2  ]\ntuple[2] = 1000    # Invalid syntax with tuple\nlist[2] = 1000     # Valid syntax with list\n \n Python Dictionary \n Python's dictionaries are kind of hash table type. They work like associative arrays or hashes found in Perl and consist of key-value pairs. A dictionary key can be almost any Python type, but are usually numbers or strings. Values, on the other hand, can be any arbitrary Python object. \n Dictionaries are enclosed by curly braces ({ }) and values can be assigned and accessed using square braces ([]). For example \u2212 \n  Live Demo \n \n#!/usr/bin/python\n\ndict = {}\ndict['one'] = \"This is one\"\ndict[2]     = \"This is two\"\n\ntinydict = {'name': 'john','code':6734, 'dept': 'sales'}\n\n\nprint dict['one']       # Prints value for 'one' key\nprint dict[2]           # Prints value for 2 key\nprint tinydict          # Prints complete dictionary\nprint tinydict.keys()   # Prints all the keys\nprint tinydict.values() # Prints all the values\n \n This produce the following result \u2212 \n \nThis is one\nThis is two\n{'dept': 'sales', 'code': 6734, 'name': 'john'}\n['dept', 'code', 'name']\n['sales', 6734, 'john']\n \n Dictionaries have no concept of order among elements. It is incorrect to say that the elements are \"out of order\"; they are simply unordered. \n Data Type Conversion \n Sometimes, you may need to perform conversions between the built-in types. To convert between types, you simply use the type name as a function. \n There are several built-in functions to perform conversion from one data type to another. These functions return a new object representing the converted value. \n \n\nSr.No.\nFunction & Description\n\n\n1\nint(x [,base])\nConverts x to an integer. base specifies the base if x is a string.\n\n\n\n2\n\nlong(x [,base] )\nConverts x to a long integer. base specifies the base if x is a string.\n\n\n\n3\n\nfloat(x)\nConverts x to a floating-point number.\n\n\n\n4\n\ncomplex(real [,imag])\nCreates a complex number.\n\n\n\n5\n\nstr(x)\nConverts object x to a string representation.\n\n\n\n6\n\nrepr(x)\nConverts object x to an expression string.\n\n\n\n7\n\neval(str)\nEvaluates a string and returns an object.\n\n\n\n8\n\ntuple(s)\nConverts s to a tuple.\n\n\n\n9\n\nlist(s)\nConverts s to a list.\n\n\n\n10\n\nset(s)\nConverts s to a set.\n\n\n\n11\n\ndict(d)\nCreates a dictionary. d must be a sequence of (key,value) tuples.\n\n\n\n12\n\nfrozenset(s)\nConverts s to a frozen set.\n\n\n\n13\n\nchr(x)\nConverts an integer to a character.\n\n\n\n14\n\nunichr(x)\nConverts an integer to a Unicode character.\n\n\n\n15\n\nord(x)\nConverts a single character to its integer value.\n\n\n\n16\n\nhex(x)\nConverts an integer to a hexadecimal string.\n\n\n\n17\n\noct(x)\nConverts an integer to an octal string.\n\n\n \n  \n \n Previous Page\n \n \n Print\n \n \nNext Page \u00a0\n \n  \n  PRINTING ENDS HERE  \n \nAdvertisements\n<!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//-->\n\n\n \n", "url": "https://www.tutorialspoint.com/python/python_variable_types.htm", "html": "<!DOCTYPE html>\n\n<!--[if IE 8]><html class=\"ie ie8\"> <![endif]-->\n<!--[if IE 9]><html class=\"ie ie9\"> <![endif]-->\n<!--[if gt IE 9]><!--> <html> <!--<![endif]-->\n<head>\n<!-- Basic -->\n<meta charset=\"utf-8\"/>\n<title>Python Variable Types</title>\n<meta content=\"Python Variable Types - Learn Python in simple and easy steps starting from basic to advanced concepts with examples including Python Syntax Object Oriented Language, Methods, Tuples, Tools/Utilities, Exceptions Handling, Sockets, GUI, Extentions, XML Programming.\" name=\"description\">\n<meta content=\"Python, Tutorials, Learning, Beginners, Basics, Object Oriented Language, Methods, Overriding, Networking, Multithreading,Methods, Tuples, Tools/Utilities, Exceptions Handling, Sockets, GUI, Extentions, XML, Programming.\" name=\"Keywords\"/>\n<base href=\"https://www.tutorialspoint.com/\"/>\n<link href=\"/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"/>\n<meta content=\"width=device-width,initial-scale=1.0,user-scalable=yes\" name=\"viewport\"/>\n<meta content=\"en_US\" property=\"og:locale\">\n<meta content=\"website\" property=\"og:type\"/>\n<meta content=\"471319149685276\" property=\"fb:app_id\"/>\n<meta content=\"www.tutorialspoint.com\" property=\"og:site_name\"/>\n<meta content=\"yes\" name=\"apple-mobile-web-app-capable\"/>\n<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"/>\n<meta content=\"tutorialspoint.com\" name=\"author\"/>\n<script src=\"https://www.tutorialspoint.com/theme/js/script-min-v4.js?v=2\" type=\"text/javascript\"></script>\n<link href=\"https://www.tutorialspoint.com/theme/css/style-min.css?v=3.1\" rel=\"stylesheet\"/>\n<script>\r\nfunction openNav() {\t\r\n  document.getElementById(\"mySidenav\").style.width = \"250px\";\r\n  document.getElementById(\"right_obs\").style.display = \"block\";\r\n}\r\nfunction closeNav() {\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\nfunction close_obs_sidenav(){\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\n</script>\n<!-- Head Libs -->\n<!--[if IE 8]>\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/theme/css/ie8.css\">\r\n<![endif]-->\n<style>\r\n#privacy-banner {\r\n    position: fixed;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    max-width: 100%;\r\n    padding: 1rem .5rem;\r\n    background: #fff;\r\n    z-index: 1030;\r\n    color: #000;\r\n    font-size: 14px;\r\n    margin: 0;\r\n    display: none;\r\n    border-top: 2px solid rgb(130, 130, 130);\r\n  }\r\n  #privacy-banner p {\r\n    margin: 0;\r\n    color: #000;\r\n    text-align: center;\r\n  }\r\n  #privacy-banner a {\r\n    text-decoration: none;\r\n    margin: 20px auto 0 auto;\r\n    display: block;\r\n    max-width: 150px;\r\n  }\r\n  #privacy-banner a:hover {\r\n    text-decoration: underline;\r\n  }\r\n  #banner-learn {\r\n    color: #000;\r\n  }\r\n  #banner-accept {\r\n    padding: 7px 15px;\r\n    color: #fff;\r\n    border-radius: 5px;\r\n    background:#737373 !important;\r\n  }\r\n  @media (min-width: 768px) {\r\n    #privacy-banner {\r\n      padding: 1.5rem .5rem;\r\n    }\r\n    #privacy-banner a {\r\n      display: inline-block;\r\n      margin: 0 10px;\r\n    }\r\n}\r\npre.prettyprint.tryit {min-height:37px; background: #eee url(/python/images/try-it.jpg) top right no-repeat !important}select{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }\r\n.btnsbmt{ background: #fdbf00 !important;}\r\nul.nav-list.primary>li a.videolink{    background: none; margin: 0px; padding: 0px; border: 1px solid #d6d6d6;}\r\ndiv.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #fdbf00 url(/images/pattern.png) repeat center center !important;}\r\n.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #fdbf00 !important;}\r\n.submenu-item{ border-bottom: 2px solid #fdbf00 !important; border-top: 2px solid #fdbf00 !important }\r\n.ace_scroller{overflow: auto!important;}\r\na.demo{font-family: \"Open Sans\",Arial,sans-serif; background:#fdbf00; color:#fff; font-size:13px; padding:3px 10px; border:1px solid #d6d6d6; position:absolute; right:5px; margin:-6px 17px 0px 0px;}\r\na.demo:hover{opacity:.8}\r\n</style>\n<script>\r\n$(document).ready(function() {\r\n  $('input[name=\"q\"]').keydown(function(event){\r\n    if(event.keyCode == 13) {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n  });\r\n});\r\n</script>\n</meta></meta></head>\n<body onload=\"prettyPrint()\">\n<div class=\"wrapLoader\">\n<div class=\"imgLoader\">\n<img alt=\"\" height=\"70\" src=\"/images/loading-cg.gif\" width=\"70\"/>\n</div>\n</div>\n<div class=\"display-none\" id=\"right_obs\" onclick=\"close_obs_sidenav()\"></div>\n<header>\n<div class=\"container\">\n<h1 class=\"logo\">\n<a href=\"index.htm\" title=\"tutorialspoint\">\n<img alt=\"tutorialspoint\" src=\"/python/images/logo.png\"/>\n</a>\n</h1>\n<ul class=\"tp-inline-block pull-right\" id=\"tp-head-icons\">\n<li>\n<div class=\"tp-second-nav tp-display-none tp-pointer\" onclick=\"openNav()\">\n<i class=\"fa fa-th-large fa-lg\"></i>\n</div>\n</li>\n</ul>\n<button class=\"btn btn-responsive-nav btn-inverse\" data-target=\".nav-main-collapse\" data-toggle=\"collapse\" id=\"pull\" style=\"top: 24px!important\"> <i class=\"icon icon-bars\"></i> </button>\n<nav>\n<ul class=\"nav nav-pills nav-top\">\n<li><a href=\"/about/about_careers.htm\" style=\"background: #fffb09; font-weight: bold;\"><i class=\"icon icon-suitcase\"></i> Jobs</a></li>\n<li> <a href=\"/programming_examples/\" target=\"_blank\"><i class=\"fa fa-cubes\"></i> \u00a0Examples</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/whiteboard.htm\"><img alt=\"Whiteboard\" src=\"theme/css/icons/image-editor.png\" title=\"Whiteboard\"/> \u00a0Whiteboard</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/netmeeting.php\"><i class=\"fa-camera\"></i> \u00a0Net Meeting</a> </li>\n<li> <a href=\"/online_dev_tools.htm\"> <i class=\"dev-tools-menu\" style=\"opacity:.5\"></i> Tools </a> </li>\n<li> <a href=\"/articles/index.php\"><i class=\"icon icon-file-text-o\"></i> \u00a0Articles</a> </li>\n<li class=\"top-icons\">\n<ul class=\"social-icons\">\n<li class=\"facebook\"><a data-placement=\"bottom\" href=\"https://www.facebook.com/tutorialspointindia\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Facebook\">Facebook</a></li>\n<li class=\"googleplus\"><a data-placement=\"bottom\" href=\"https://plus.google.com/u/0/116678774017490391259/posts\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Google+\">Google+</a></li>\n<li class=\"twitter\"><a data-placement=\"bottom\" href=\"https://www.twitter.com/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Twitter\">Twitter</a></li>\n<li class=\"linkedin\"><a data-placement=\"bottom\" href=\"https://www.linkedin.com/company/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Linkedin\">Linkedin</a></li>\n<li class=\"youtube\"><a data-placement=\"bottom\" href=\"https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint YouTube\">YouTube</a></li>\n</ul>\n</li>\n</ul>\n</nav>\n</div>\n<div class=\"sidenav\" id=\"mySidenav\">\n<div class=\"navbar nav-main\">\n<div class=\"container\">\n<nav class=\"nav-main mega-menu\">\n<ul class=\"nav nav-pills nav-main\" id=\"mainMenu\">\n<li class=\"dropdown no-sub-menu\"> <a class=\"dropdown\" href=\"index.htm\"><i class=\"icon icon-home\"></i> Home</a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"/questions/index.php\"><i class=\"fa fa-send\"></i> Q/A </a> </li>\n<li class=\"dropdown\"><a class=\"dropdown\" href=\"tutorialslibrary.htm\"><span class=\"tut-lib\"> Library </span></a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"videotutorials/index.htm\"><i class=\"fa-toggle-right\"></i> Videos </a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"tutor_connect/index.php\"><i class=\"fa-user\"> </i> Tutors</a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"codingground.htm\"><i class=\"fa-code\"></i> Coding Ground </a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"https://store.tutorialspoint.com/\"><i class=\"fa-usd\"></i> Store </a> </li>\n<li class=\"dropdown no-sub-menu\">\n<div class=\"searchform-popup\">\n<input autocomplete=\"off\" class=\"header-search-box\" id=\"search-string\" name=\"q\" onblur=\"if (this.value == '') {this.value = 'Search your favorite tutorials...';}\" onfocus=\"if (this.value == 'Search your favorite tutorials...') {this.value = '';}\" placeholder=\"Search your favorite tutorials...\" type=\"text\"/>\n<div class=\"magnifying-glass\"><i class=\"icon-search\"></i> Search </div>\n</div>\n</li>\n</ul>\n</nav>\n</div>\n</div>\n</div>\n</header></body></html>\n\n<div style=\"clear:both;\"></div>\n<div class=\"main\" role=\"main\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-2\">\n<aside class=\"sidebar\">\n<style>\r\n.ts {\r\n   text-align:center !important;\r\n   vertical-align:middle !important;\r\n}\r\n</style>\n<div class=\"mini-logo\">\n<img alt=\"Python Tutorial\" src=\"/python/images/python-mini.jpg\">\n</img></div>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Python Basic Tutorial</li>\n<li><a href=\"/python/index.htm\" target=\"_top\">Python - Home</a></li>\n<li><a href=\"/python/python_overview.htm\" target=\"_top\">Python - Overview</a></li>\n<li><a href=\"/python/python_environment.htm\" target=\"_top\">Python - Environment Setup</a></li>\n<li><a href=\"/python/python_basic_syntax.htm\" target=\"_top\">Python - Basic Syntax</a></li>\n<li><a href=\"/python/python_variable_types.htm\" target=\"_top\">Python - Variable Types</a></li>\n<li><a href=\"/python/python_basic_operators.htm\" target=\"_top\">Python - Basic Operators</a></li>\n<li><a href=\"/python/python_decision_making.htm\" target=\"_top\">Python - Decision Making</a></li>\n<li><a href=\"/python/python_loops.htm\" target=\"_top\">Python - Loops</a></li>\n<li><a href=\"/python/python_numbers.htm\" target=\"_top\">Python - Numbers</a></li>\n<li><a href=\"/python/python_strings.htm\" target=\"_top\">Python - Strings</a></li>\n<li><a href=\"/python/python_lists.htm\" target=\"_top\">Python - Lists</a></li>\n<li><a href=\"/python/python_tuples.htm\" target=\"_top\">Python - Tuples</a></li>\n<li><a href=\"/python/python_dictionary.htm\" target=\"_top\">Python - Dictionary</a></li>\n<li><a href=\"/python/python_date_time.htm\" target=\"_top\">Python - Date &amp; Time</a></li>\n<li><a href=\"/python/python_functions.htm\" target=\"_top\">Python - Functions</a></li>\n<li><a href=\"/python/python_modules.htm\" target=\"_top\">Python - Modules</a></li>\n<li><a href=\"/python/python_files_io.htm\" target=\"_top\">Python - Files I/O</a></li>\n<li><a href=\"/python/python_exceptions.htm\" target=\"_top\">Python - Exceptions</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Python Advanced Tutorial</li>\n<li><a href=\"/python/python_classes_objects.htm\" target=\"_top\">Python - Classes/Objects</a></li>\n<li><a href=\"/python/python_reg_expressions.htm\" target=\"_top\">Python - Reg Expressions</a></li>\n<li><a href=\"/python/python_cgi_programming.htm\" target=\"_top\">Python - CGI Programming</a></li>\n<li><a href=\"/python/python_database_access.htm\" target=\"_top\">Python - Database Access</a></li>\n<li><a href=\"/python/python_networking.htm\" target=\"_top\">Python - Networking</a></li>\n<li><a href=\"/python/python_sending_email.htm\" target=\"_top\">Python - Sending Email</a></li>\n<li><a href=\"/python/python_multithreading.htm\" target=\"_top\">Python - Multithreading</a></li>\n<li><a href=\"/python/python_xml_processing.htm\" target=\"_top\">Python - XML Processing</a></li>\n<li><a href=\"/python/python_gui_programming.htm\" target=\"_top\">Python - GUI Programming</a></li>\n<li><a href=\"/python/python_further_extensions.htm\" target=\"_top\">Python - Further Extensions</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Python  Useful Resources</li>\n<li><a href=\"/python/python_questions_answers.htm\" target=\"_top\">Python - Questions and Answers</a></li>\n<li><a href=\"/python/python_quick_guide.htm\" target=\"_top\">Python - Quick Guide</a></li>\n<li><a href=\"/python/python_tools_utilities.htm\" target=\"_top\">Python - Tools/Utilities</a></li>\n<li><a href=\"/python/python_useful_resources.htm\" target=\"_top\">Python - Useful Resources</a></li>\n<li><a href=\"/python/python_discussion.htm\" target=\"_top\">Python - Discussion</a></li>\n</ul>\n<ul class=\"nav nav-list primary push-bottom left-menu special\">\n<li class=\"sreading\">Selected Reading</li>\n<li><a href=\"/upsc_ias_exams.htm\" target=\"_top\">UPSC IAS Exams Notes</a></li>\n<li><a href=\"/developers_best_practices/index.htm\" target=\"_top\">Developer's Best Practices</a></li>\n<li><a href=\"/questions_and_answers.htm\" target=\"_top\">Questions and Answers</a></li>\n<li><a href=\"/effective_resume_writing.htm\" target=\"_top\">Effective Resume Writing</a></li>\n<li><a href=\"/hr_interview_questions/index.htm\" target=\"_top\">HR Interview Questions</a></li>\n<li><a href=\"/computer_glossary.htm\" target=\"_top\">Computer Glossary</a></li>\n<li><a href=\"/computer_whoiswho.htm\" target=\"_top\">Who is Who</a></li>\n</ul>\n</aside>\n</div>\n<!-- PRINTING STARTS HERE -->\n<div class=\"row\">\n<div class=\"content\">\n<div class=\"col-md-7 middle-col\">\n<h1>Python - Variable Types</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_basic_syntax.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_basic_operators.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>Variables are nothing but reserved memory locations to store values. This means that when you create a variable you reserve some space in memory.</p>\n<p>Based on the data type of a variable, the interpreter allocates memory and decides what can be stored in the reserved memory. Therefore, by assigning different data types to variables, you can store integers, decimals or characters in these variables.</p>\n<h2>Assigning Values to Variables</h2>\n<p>Python variables do not need explicit declaration to reserve memory space. The declaration happens automatically when you assign a value to a variable. The equal sign (=) is used to assign values to variables.</p>\n<p>The operand to the left of the = operator is the name of the variable and the operand to the right of the = operator is the value stored in the variable. For example \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/Eh9FoM\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\ncounter = 100          # An integer assignment\nmiles   = 1000.0       # A floating point\nname    = \"John\"       # A string\n\nprint counter\nprint miles\nprint name\n</pre>\n<p>Here, 100, 1000.0 and  \"John\" are the values assigned to <i>counter</i>, <i>miles</i>, and <i>name</i> variables, respectively. This produces the following result \u2212</p>\n<pre class=\"result notranslate\">\n100\n1000.0\nJohn\n</pre>\n<h2>Multiple Assignment</h2>\n<p>Python allows you to assign a single value to several variables simultaneously. For example \u2212</p>\n<pre class=\"result notranslate\">\na = b = c = 1\n</pre>\n<p>Here, an integer object is created with the value 1, and all three variables are assigned to the same memory location. You can also assign multiple objects to multiple variables. For example \u2212</p>\n<pre class=\"result notranslate\">\na,b,c = 1,2,\"john\"\n</pre>\n<p>Here, two integer objects with values 1 and 2 are assigned to variables a and b respectively, and one string object with the value \"john\" is assigned to the variable c.</p>\n<h2>Standard Data Types</h2>\n<p>The data stored in memory can be of many types. For example, a person's age is stored as a numeric value and his or her address is stored as alphanumeric characters. Python has various standard data types that are used to define the operations possible on them and the storage method for each of them.</p>\n<p>Python has five standard data types \u2212</p>\n<ul class=\"list\">\n<li>Numbers</li>\n<li>String</li>\n<li>List</li>\n<li>Tuple</li>\n<li>Dictionary</li>\n</ul>\n<h2>Python Numbers</h2>\n<p>Number data types store numeric values. Number objects are created when you assign a value to them. For example \u2212</p>\n<pre class=\"result notranslate\">\nvar1 = 1\nvar2 = 10\n</pre>\n<p>You can also delete the reference to a number object by using the del statement. The syntax of the del statement is \u2212</p>\n<pre class=\"result notranslate\">\ndel var1[,var2[,var3[....,varN]]]]\n</pre>\n<p>You can delete a single object or multiple objects by using the del statement. For example \u2212</p>\n<pre class=\"result notranslate\">\ndel var\ndel var_a, var_b\n</pre>\n<p>Python supports four different numerical types \u2212</p>\n<ul class=\"list\">\n<li>int (signed integers)</li>\n<li>long (long integers, they can also be represented in octal and hexadecimal)</li>\n<li>float (floating point real values)</li>\n<li>complex (complex numbers)</li>\n</ul>\n<h3>Examples</h3>\n<p>Here are some examples of numbers \u2212</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<th style=\"text-align:center;\">int</th>\n<th style=\"text-align:center;\">long</th>\n<th style=\"text-align:center;\">float</th>\n<th style=\"text-align:center;\">complex</th>\n</tr>\n<tr>\n<td>10</td>\n<td>51924361L</td>\n<td>0.0</td>\n<td>3.14j</td>\n</tr>\n<tr>\n<td>100</td>\n<td>-0x19323L</td>\n<td>15.20</td>\n<td>45.j</td>\n</tr>\n<tr>\n<td>-786</td>\n<td>0122L</td>\n<td>-21.9</td>\n<td>9.322e-36j</td>\n</tr>\n<tr>\n<td>080</td>\n<td>0xDEFABCECBDAECBFBAEl</td>\n<td>32.3+e18</td>\n<td>.876j</td>\n</tr>\n<tr>\n<td>-0490</td>\n<td>535633629843L</td>\n<td>-90.</td>\n<td>-.6545+0J</td>\n</tr>\n<tr>\n<td>-0x260</td>\n<td>-052318172735L</td>\n<td>-32.54e100</td>\n<td>3e+26J</td>\n</tr>\n<tr>\n<td>0x69</td>\n<td>-4721885298529L</td>\n<td>70.2-E12</td>\n<td>4.53e-7j</td>\n</tr>\n</table>\n<ul class=\"list\">\n<li><p>Python allows you to use a lowercase l with long, but it is recommended that you use only an uppercase L to avoid confusion with the number 1. Python displays long integers with an uppercase L.</p></li>\n<li><p>A complex number consists of an ordered pair of real floating-point numbers denoted by x + yj, where x and y are the real numbers and j is the imaginary unit.</p></li>\n</ul>\n<h2>Python Strings</h2>\n<p>Strings in Python are identified as a contiguous set of characters represented in the quotation marks. Python allows for either pairs of single or double quotes. Subsets of strings can be taken using the slice operator ([ ] and [:] ) with indexes starting at 0 in the beginning of the string and working their way from -1 at the end.</p>\n<p>The plus (+) sign is the string concatenation operator and the asterisk (*) is the repetition operator. For example \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/PsSj6c\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nstr = 'Hello World!'\n\nprint str          # Prints complete string\nprint str[0]       # Prints first character of the string\nprint str[2:5]     # Prints characters starting from 3rd to 5th\nprint str[2:]      # Prints string starting from 3rd character\nprint str * 2      # Prints string two times\nprint str + \"TEST\" # Prints concatenated string\n</pre>\n<p>This will produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nHello World!\nH\nllo\nllo World!\nHello World!Hello World!\nHello World!TEST\n</pre>\n<h2>Python Lists</h2>\n<p>Lists are the most versatile of Python's compound data types. A list contains items separated by commas and enclosed within square brackets ([]). To some extent, lists are similar to arrays in C. One difference between them is that all the items belonging to a list can be of different data type.</p>\n<p>The values stored in a list can be accessed using the slice operator ([ ] and [:]) with indexes starting at 0 in the beginning of the list and working their way to end -1. The plus (+) sign is the list concatenation operator, and the asterisk (*) is the repetition operator. For example \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nlist = [ 'abcd', 786 , 2.23, 'john', 70.2 ]\ntinylist = [123, 'john']\n\nprint list          # Prints complete list\nprint list[0]       # Prints first element of the list\nprint list[1:3]     # Prints elements starting from 2nd till 3rd \nprint list[2:]      # Prints elements starting from 3rd element\nprint tinylist * 2  # Prints list two times\nprint list + tinylist # Prints concatenated lists\n</pre>\n<p>This produce the following result \u2212</p>\n<pre class=\"result notranslate\">\n['abcd', 786, 2.23, 'john', 70.2]\nabcd\n[786, 2.23]\n[2.23, 'john', 70.2]\n[123, 'john', 123, 'john']\n['abcd', 786, 2.23, 'john', 70.2, 123, 'john']\n</pre>\n<h2>Python Tuples</h2>\n<p>A tuple is another sequence data type that is similar to the list. A tuple consists of a number of values separated by commas. Unlike lists, however, tuples are enclosed within parentheses.</p>\n<p>The main differences between lists and tuples are: Lists are enclosed in brackets ( [ ] ) and their elements and size can be changed, while tuples are enclosed in parentheses ( ( ) ) and cannot be updated. Tuples can be thought of as <b>read-only</b> lists. For example \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/XYBk9k\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\ntuple = ( 'abcd', 786 , 2.23, 'john', 70.2  )\ntinytuple = (123, 'john')\n\nprint tuple           # Prints complete list\nprint tuple[0]        # Prints first element of the list\nprint tuple[1:3]      # Prints elements starting from 2nd till 3rd \nprint tuple[2:]       # Prints elements starting from 3rd element\nprint tinytuple * 2   # Prints list two times\nprint tuple + tinytuple # Prints concatenated lists\n</pre>\n<p>This produce the following result \u2212</p>\n<pre class=\"result notranslate\">\n('abcd', 786, 2.23, 'john', 70.2)\nabcd\n(786, 2.23)\n(2.23, 'john', 70.2)\n(123, 'john', 123, 'john')\n('abcd', 786, 2.23, 'john', 70.2, 123, 'john')\n</pre>\n<p>The following code is invalid with tuple, because we attempted to update a tuple, which is not allowed. Similar case is possible with lists \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\ntuple = ( 'abcd', 786 , 2.23, 'john', 70.2  )\nlist = [ 'abcd', 786 , 2.23, 'john', 70.2  ]\ntuple[2] = 1000    # Invalid syntax with tuple\nlist[2] = 1000     # Valid syntax with list\n</pre>\n<h2>Python Dictionary</h2>\n<p>Python's dictionaries are kind of hash table type. They work like associative arrays or hashes found in Perl and consist of key-value pairs. A dictionary key can be almost any Python type, but are usually numbers or strings. Values, on the other hand, can be any arbitrary Python object.</p>\n<p>Dictionaries are enclosed by curly braces ({ }) and values can be assigned and accessed using square braces ([]). For example \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/DlY1Gc\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\ndict = {}\ndict['one'] = \"This is one\"\ndict[2]     = \"This is two\"\n\ntinydict = {'name': 'john','code':6734, 'dept': 'sales'}\n\n\nprint dict['one']       # Prints value for 'one' key\nprint dict[2]           # Prints value for 2 key\nprint tinydict          # Prints complete dictionary\nprint tinydict.keys()   # Prints all the keys\nprint tinydict.values() # Prints all the values\n</pre>\n<p>This produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nThis is one\nThis is two\n{'dept': 'sales', 'code': 6734, 'name': 'john'}\n['dept', 'code', 'name']\n['sales', 6734, 'john']\n</pre>\n<p>Dictionaries have no concept of order among elements. It is incorrect to say that the elements are \"out of order\"; they are simply unordered.</p>\n<h2>Data Type Conversion</h2>\n<p>Sometimes, you may need to perform conversions between the built-in types. To convert between types, you simply use the type name as a function.</p>\n<p>There are several built-in functions to perform conversion from one data type to another. These functions return a new object representing the converted value.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\">Sr.No.</th>\n<th style=\"text-align:center;\">Function &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>int(x [,base])</b></p>\n<p>Converts x to an integer. base specifies the base if x is a string.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td>\n<p><b>long(x [,base] )</b></p>\n<p>Converts x to a long integer. base specifies the base if x is a string.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td>\n<p><b>float(x)</b></p>\n<p>Converts x to a floating-point number.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td>\n<p><b>complex(real [,imag])</b></p>\n<p>Creates a complex number.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td>\n<p><b>str(x)</b></p>\n<p>Converts object x to a string representation.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td>\n<p><b>repr(x)</b></p>\n<p>Converts object x to an expression string.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">7</td>\n<td>\n<p><b>eval(str)</b></p>\n<p>Evaluates a string and returns an object.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">8</td>\n<td>\n<p><b>tuple(s)</b></p>\n<p>Converts s to a tuple.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">9</td>\n<td>\n<p><b>list(s)</b></p>\n<p>Converts s to a list.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">10</td>\n<td>\n<p><b>set(s)</b></p>\n<p>Converts s to a set.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">11</td>\n<td>\n<p><b>dict(d)</b></p>\n<p>Creates a dictionary. d must be a sequence of (key,value) tuples.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">12</td>\n<td>\n<p><b>frozenset(s)</b></p>\n<p>Converts s to a frozen set.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">13</td>\n<td>\n<p><b>chr(x)</b></p>\n<p>Converts an integer to a character.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">14</td>\n<td>\n<p><b>unichr(x)</b></p>\n<p>Converts an integer to a Unicode character.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">15</td>\n<td>\n<p><b>ord(x)</b></p>\n<p>Converts a single character to its integer value.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">16</td>\n<td>\n<p><b>hex(x)</b></p>\n<p>Converts an integer to a hexadecimal string.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">17</td>\n<td>\n<p><b>oct(x)</b></p>\n<p>Converts an integer to an octal string.</p>\n</td>\n</tr>\n</table>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_basic_syntax.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_basic_operators.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n<div class=\"row\">\n<div class=\"col-md-3\" id=\"rightbar\">\n<div class=\"simple-ad\">\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.facebook.com/sharer.php?u=' + 'https://www.tutorialspoint.com/python/python_variable_types.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/facebookIcon.jpg\">\n</img></a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://twitter.com/share?url=' + 'https://www.tutorialspoint.com/python/python_variable_types.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/twitterIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'https://www.tutorialspoint.com/python/python_variable_types.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/linkedinIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=https://www.tutorialspoint.com/python/python_variable_types.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/googlePlusIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.stumbleupon.com/submit?url=https://www.tutorialspoint.com/python/python_variable_types.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/StumbleUponIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://reddit.com/submit?url=https://www.tutorialspoint.com/python/python_variable_types.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/reddit.jpg\"/>\n</a>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\ngoogle_ad_format = \"300x250_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 600;\ngoogle_ad_format = \"300x600_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"ca-pub-2537027957187252\";\n/* Right Side Ad */\ngoogle_ad_slot = \"right_side_ad\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\n//-->\n</script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"footer-copyright\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-1\">\n<a class=\"logo\" href=\"index.htm\"> <img alt=\"Tutorials Point\" class=\"img-responsive\" src=\"/scripts/img/logo-footer.png\"/> </a>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<nav id=\"sub-menu\">\n<ul>\n<li><a href=\"/about/about_privacy.htm\">Privacy Policy</a></li>\n<li><a href=\"/about/about_cookies.htm\">Cookies Policy</a></li>\n<li><a href=\"/about/contact_us.htm\">Contact</a></li>\n</ul>\n</nav>\n</div>\n<div class=\"col-md-3 col-sm-12 col-xs-12\">\n<p>\u00a9 Copyright 2019. All Rights Reserved.</p>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<div class=\"news-group\">\n<input autocomplete=\"off\" class=\"form-control-foot search\" id=\"textemail\" name=\"textemail\" onblur=\"if (this.value == '') {this.value = 'Enter email for newsletter...';}\" onfocus=\"if (this.value == 'Enter email for newsletter...') {this.value = '';}\" placeholder=\"Enter email for newsletter\" type=\"text\"/>\n<span class=\"input-group-btn\"> <button class=\"btn btn-default btn-footer\" id=\"btnemail\" onclick=\"javascript:void(0);\" type=\"submit\">go</button> </span>\n<div id=\"newsresponse\"></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"privacy-banner\">\n<div>\n<p>\n      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.\n      <a href=\"javascript:void(0)\" id=\"banner-accept\">Accept</a>\n<a href=\"/about/about_cookies.htm\" id=\"banner-learn\" target=\"_blank\">Learn more</a>\n</p>\n</div>\n</div>\n<script>\n// Banner Trigger if Not Closed\nif (!localStorage.bannerClosed) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n} else {\n  document.getElementById('privacy-banner').style.display = \"none\";\n}\ndocument.getElementById('banner-accept').addEventListener('click', function() {\n  document.getElementById('privacy-banner').style.display = \"none\";\n  localStorage.bannerClosed = 'true';\n});\nif (navigator.userAgent.match(/Opera|OPR\\//)) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n}\n</script>\n<!-- Libs -->\n<script src=\"/theme/js/custom-min.js?v=7\"></script>\n<script src=\"https://www.google-analytics.com/urchin.js\">\n</script>\n<script>\n_uacct = \"UA-232293-6\";\nurchinTracker();\n$('.pg-icon').click(function(){\n   $('.wrapLoader').show();\n});\n</script>\n<script src=\"/theme/js/jquery.colorbox-min.js\"></script>\n<script>\n   var tryit = new $.TryIt('/python/try_python.php');\n   tryit.compile();\n</script>\n\n\n", "title": "Python - Variable Types", "content_html": "<div class=\"col-md-7 middle-col\">\n<h1>Python - Variable Types</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_basic_syntax.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_basic_operators.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>Variables are nothing but reserved memory locations to store values. This means that when you create a variable you reserve some space in memory.</p>\n<p>Based on the data type of a variable, the interpreter allocates memory and decides what can be stored in the reserved memory. Therefore, by assigning different data types to variables, you can store integers, decimals or characters in these variables.</p>\n<h2>Assigning Values to Variables</h2>\n<p>Python variables do not need explicit declaration to reserve memory space. The declaration happens automatically when you assign a value to a variable. The equal sign (=) is used to assign values to variables.</p>\n<p>The operand to the left of the = operator is the name of the variable and the operand to the right of the = operator is the value stored in the variable. For example \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/Eh9FoM\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\ncounter = 100          # An integer assignment\nmiles   = 1000.0       # A floating point\nname    = \"John\"       # A string\n\nprint counter\nprint miles\nprint name\n</pre>\n<p>Here, 100, 1000.0 and  \"John\" are the values assigned to <i>counter</i>, <i>miles</i>, and <i>name</i> variables, respectively. This produces the following result \u2212</p>\n<pre class=\"result notranslate\">\n100\n1000.0\nJohn\n</pre>\n<h2>Multiple Assignment</h2>\n<p>Python allows you to assign a single value to several variables simultaneously. For example \u2212</p>\n<pre class=\"result notranslate\">\na = b = c = 1\n</pre>\n<p>Here, an integer object is created with the value 1, and all three variables are assigned to the same memory location. You can also assign multiple objects to multiple variables. For example \u2212</p>\n<pre class=\"result notranslate\">\na,b,c = 1,2,\"john\"\n</pre>\n<p>Here, two integer objects with values 1 and 2 are assigned to variables a and b respectively, and one string object with the value \"john\" is assigned to the variable c.</p>\n<h2>Standard Data Types</h2>\n<p>The data stored in memory can be of many types. For example, a person's age is stored as a numeric value and his or her address is stored as alphanumeric characters. Python has various standard data types that are used to define the operations possible on them and the storage method for each of them.</p>\n<p>Python has five standard data types \u2212</p>\n<ul class=\"list\">\n<li>Numbers</li>\n<li>String</li>\n<li>List</li>\n<li>Tuple</li>\n<li>Dictionary</li>\n</ul>\n<h2>Python Numbers</h2>\n<p>Number data types store numeric values. Number objects are created when you assign a value to them. For example \u2212</p>\n<pre class=\"result notranslate\">\nvar1 = 1\nvar2 = 10\n</pre>\n<p>You can also delete the reference to a number object by using the del statement. The syntax of the del statement is \u2212</p>\n<pre class=\"result notranslate\">\ndel var1[,var2[,var3[....,varN]]]]\n</pre>\n<p>You can delete a single object or multiple objects by using the del statement. For example \u2212</p>\n<pre class=\"result notranslate\">\ndel var\ndel var_a, var_b\n</pre>\n<p>Python supports four different numerical types \u2212</p>\n<ul class=\"list\">\n<li>int (signed integers)</li>\n<li>long (long integers, they can also be represented in octal and hexadecimal)</li>\n<li>float (floating point real values)</li>\n<li>complex (complex numbers)</li>\n</ul>\n<h3>Examples</h3>\n<p>Here are some examples of numbers \u2212</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<th style=\"text-align:center;\">int</th>\n<th style=\"text-align:center;\">long</th>\n<th style=\"text-align:center;\">float</th>\n<th style=\"text-align:center;\">complex</th>\n</tr>\n<tr>\n<td>10</td>\n<td>51924361L</td>\n<td>0.0</td>\n<td>3.14j</td>\n</tr>\n<tr>\n<td>100</td>\n<td>-0x19323L</td>\n<td>15.20</td>\n<td>45.j</td>\n</tr>\n<tr>\n<td>-786</td>\n<td>0122L</td>\n<td>-21.9</td>\n<td>9.322e-36j</td>\n</tr>\n<tr>\n<td>080</td>\n<td>0xDEFABCECBDAECBFBAEl</td>\n<td>32.3+e18</td>\n<td>.876j</td>\n</tr>\n<tr>\n<td>-0490</td>\n<td>535633629843L</td>\n<td>-90.</td>\n<td>-.6545+0J</td>\n</tr>\n<tr>\n<td>-0x260</td>\n<td>-052318172735L</td>\n<td>-32.54e100</td>\n<td>3e+26J</td>\n</tr>\n<tr>\n<td>0x69</td>\n<td>-4721885298529L</td>\n<td>70.2-E12</td>\n<td>4.53e-7j</td>\n</tr>\n</table>\n<ul class=\"list\">\n<li><p>Python allows you to use a lowercase l with long, but it is recommended that you use only an uppercase L to avoid confusion with the number 1. Python displays long integers with an uppercase L.</p></li>\n<li><p>A complex number consists of an ordered pair of real floating-point numbers denoted by x + yj, where x and y are the real numbers and j is the imaginary unit.</p></li>\n</ul>\n<h2>Python Strings</h2>\n<p>Strings in Python are identified as a contiguous set of characters represented in the quotation marks. Python allows for either pairs of single or double quotes. Subsets of strings can be taken using the slice operator ([ ] and [:] ) with indexes starting at 0 in the beginning of the string and working their way from -1 at the end.</p>\n<p>The plus (+) sign is the string concatenation operator and the asterisk (*) is the repetition operator. For example \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/PsSj6c\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nstr = 'Hello World!'\n\nprint str          # Prints complete string\nprint str[0]       # Prints first character of the string\nprint str[2:5]     # Prints characters starting from 3rd to 5th\nprint str[2:]      # Prints string starting from 3rd character\nprint str * 2      # Prints string two times\nprint str + \"TEST\" # Prints concatenated string\n</pre>\n<p>This will produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nHello World!\nH\nllo\nllo World!\nHello World!Hello World!\nHello World!TEST\n</pre>\n<h2>Python Lists</h2>\n<p>Lists are the most versatile of Python's compound data types. A list contains items separated by commas and enclosed within square brackets ([]). To some extent, lists are similar to arrays in C. One difference between them is that all the items belonging to a list can be of different data type.</p>\n<p>The values stored in a list can be accessed using the slice operator ([ ] and [:]) with indexes starting at 0 in the beginning of the list and working their way to end -1. The plus (+) sign is the list concatenation operator, and the asterisk (*) is the repetition operator. For example \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\nlist = [ 'abcd', 786 , 2.23, 'john', 70.2 ]\ntinylist = [123, 'john']\n\nprint list          # Prints complete list\nprint list[0]       # Prints first element of the list\nprint list[1:3]     # Prints elements starting from 2nd till 3rd \nprint list[2:]      # Prints elements starting from 3rd element\nprint tinylist * 2  # Prints list two times\nprint list + tinylist # Prints concatenated lists\n</pre>\n<p>This produce the following result \u2212</p>\n<pre class=\"result notranslate\">\n['abcd', 786, 2.23, 'john', 70.2]\nabcd\n[786, 2.23]\n[2.23, 'john', 70.2]\n[123, 'john', 123, 'john']\n['abcd', 786, 2.23, 'john', 70.2, 123, 'john']\n</pre>\n<h2>Python Tuples</h2>\n<p>A tuple is another sequence data type that is similar to the list. A tuple consists of a number of values separated by commas. Unlike lists, however, tuples are enclosed within parentheses.</p>\n<p>The main differences between lists and tuples are: Lists are enclosed in brackets ( [ ] ) and their elements and size can be changed, while tuples are enclosed in parentheses ( ( ) ) and cannot be updated. Tuples can be thought of as <b>read-only</b> lists. For example \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/XYBk9k\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\ntuple = ( 'abcd', 786 , 2.23, 'john', 70.2  )\ntinytuple = (123, 'john')\n\nprint tuple           # Prints complete list\nprint tuple[0]        # Prints first element of the list\nprint tuple[1:3]      # Prints elements starting from 2nd till 3rd \nprint tuple[2:]       # Prints elements starting from 3rd element\nprint tinytuple * 2   # Prints list two times\nprint tuple + tinytuple # Prints concatenated lists\n</pre>\n<p>This produce the following result \u2212</p>\n<pre class=\"result notranslate\">\n('abcd', 786, 2.23, 'john', 70.2)\nabcd\n(786, 2.23)\n(2.23, 'john', 70.2)\n(123, 'john', 123, 'john')\n('abcd', 786, 2.23, 'john', 70.2, 123, 'john')\n</pre>\n<p>The following code is invalid with tuple, because we attempted to update a tuple, which is not allowed. Similar case is possible with lists \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\ntuple = ( 'abcd', 786 , 2.23, 'john', 70.2  )\nlist = [ 'abcd', 786 , 2.23, 'john', 70.2  ]\ntuple[2] = 1000    # Invalid syntax with tuple\nlist[2] = 1000     # Valid syntax with list\n</pre>\n<h2>Python Dictionary</h2>\n<p>Python's dictionaries are kind of hash table type. They work like associative arrays or hashes found in Perl and consist of key-value pairs. A dictionary key can be almost any Python type, but are usually numbers or strings. Values, on the other hand, can be any arbitrary Python object.</p>\n<p>Dictionaries are enclosed by curly braces ({ }) and values can be assigned and accessed using square braces ([]). For example \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/DlY1Gc\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\n\ndict = {}\ndict['one'] = \"This is one\"\ndict[2]     = \"This is two\"\n\ntinydict = {'name': 'john','code':6734, 'dept': 'sales'}\n\n\nprint dict['one']       # Prints value for 'one' key\nprint dict[2]           # Prints value for 2 key\nprint tinydict          # Prints complete dictionary\nprint tinydict.keys()   # Prints all the keys\nprint tinydict.values() # Prints all the values\n</pre>\n<p>This produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nThis is one\nThis is two\n{'dept': 'sales', 'code': 6734, 'name': 'john'}\n['dept', 'code', 'name']\n['sales', 6734, 'john']\n</pre>\n<p>Dictionaries have no concept of order among elements. It is incorrect to say that the elements are \"out of order\"; they are simply unordered.</p>\n<h2>Data Type Conversion</h2>\n<p>Sometimes, you may need to perform conversions between the built-in types. To convert between types, you simply use the type name as a function.</p>\n<p>There are several built-in functions to perform conversion from one data type to another. These functions return a new object representing the converted value.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\">Sr.No.</th>\n<th style=\"text-align:center;\">Function &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>int(x [,base])</b></p>\n<p>Converts x to an integer. base specifies the base if x is a string.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td>\n<p><b>long(x [,base] )</b></p>\n<p>Converts x to a long integer. base specifies the base if x is a string.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td>\n<p><b>float(x)</b></p>\n<p>Converts x to a floating-point number.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td>\n<p><b>complex(real [,imag])</b></p>\n<p>Creates a complex number.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td>\n<p><b>str(x)</b></p>\n<p>Converts object x to a string representation.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td>\n<p><b>repr(x)</b></p>\n<p>Converts object x to an expression string.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">7</td>\n<td>\n<p><b>eval(str)</b></p>\n<p>Evaluates a string and returns an object.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">8</td>\n<td>\n<p><b>tuple(s)</b></p>\n<p>Converts s to a tuple.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">9</td>\n<td>\n<p><b>list(s)</b></p>\n<p>Converts s to a list.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">10</td>\n<td>\n<p><b>set(s)</b></p>\n<p>Converts s to a set.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">11</td>\n<td>\n<p><b>dict(d)</b></p>\n<p>Creates a dictionary. d must be a sequence of (key,value) tuples.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">12</td>\n<td>\n<p><b>frozenset(s)</b></p>\n<p>Converts s to a frozen set.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">13</td>\n<td>\n<p><b>chr(x)</b></p>\n<p>Converts an integer to a character.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">14</td>\n<td>\n<p><b>unichr(x)</b></p>\n<p>Converts an integer to a Unicode character.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">15</td>\n<td>\n<p><b>ord(x)</b></p>\n<p>Converts a single character to its integer value.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">16</td>\n<td>\n<p><b>hex(x)</b></p>\n<p>Converts an integer to a hexadecimal string.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">17</td>\n<td>\n<p><b>oct(x)</b></p>\n<p>Converts an integer to an octal string.</p>\n</td>\n</tr>\n</table>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_basic_syntax.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_basic_operators.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>"}