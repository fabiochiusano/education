{"title_html": "<h1>Python - Extension Programming with C</h1>", "content": "\n Python - Extension Programming with C \n  \n Advertisements \n \n<!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//-->\n\n\n \n  \n \n Previous Page\n \n \nNext Page \u00a0\n \n  \n  \n Any code that you write using any compiled language like C, C++, or Java can be integrated or imported into another Python script. This code is considered as an \"extension.\" \n A Python extension module is nothing more than a normal C library. On Unix machines, these libraries usually end in .so (for shared object). On Windows machines, you typically see .dll (for dynamically linked library). \n Pre-Requisites for Writing Extensions \n To start writing your extension, you are going to need the Python header files. \n \nOn Unix machines, this usually requires installing a developer-specific package such as python2.5-dev.\nWindows users get these headers as part of the package when they use the binary Python installer.\n \n Additionally, it is assumed that you have good knowledge of C or C++ to write any Python Extension using C programming. \n First look at a Python Extension \n For your first look at a Python extension module, you need to group your code into four part \u2212 \n \nThe header file Python.h.\nThe C functions you want to expose as the interface from your module.\nA table mapping the names of your functions as Python developers see them to C functions inside the extension module.\nAn initialization function.\n \n The Header File Python.h \n You need include Python.h header file in your C source file, which gives you access to the internal Python API used to hook your module into the interpreter. \n Make sure to include Python.h before any other headers you might need. You need to follow the includes with the functions you want to call from Python. \n The C Functions \n The signatures of the C implementation of your functions always takes one of the following three forms \u2212 \n \nstatic PyObject *MyFunction( PyObject *self, PyObject *args );\n\nstatic PyObject *MyFunctionWithKeywords(PyObject *self,\n                                 PyObject *args,\n                                 PyObject *kw);\n\nstatic PyObject *MyFunctionWithNoArgs( PyObject *self );\n \n Each one of the preceding declarations returns a Python object. There is no such thing as a void  function in Python as there is in C. If you do not want your functions to return a value, return the C equivalent of Python's None value. The Python headers define a macro, Py_RETURN_NONE, that does this for us. \n The names of your C functions can be whatever you like as they are never seen outside of the extension module. They are defined as static function. \n Your C functions usually are named by combining the Python module and function names together, as shown here \u2212 \n \nstatic PyObject *module_func(PyObject *self, PyObject *args) {\n   /* Do your stuff here. */\n   Py_RETURN_NONE;\n}\n \n This is a Python function called func inside of the module module. You will be putting pointers to your C functions into the method table for the module that usually comes next in your source code. \n The Method Mapping Table \n This method table is a simple array of PyMethodDef structures. That structure looks something like this \u2212 \n \nstruct PyMethodDef {\n   char *ml_name;\n   PyCFunction ml_meth;\n   int ml_flags;\n   char *ml_doc;\n};\n \n Here is the description of the members of this structure \u2212 \n \nml_name \u2212 This is the name of the function as the Python interpreter presents when it is used in Python programs.\nml_meth \u2212 This must be the address to a function that has any one of the signatures described in previous seection.\nml_flags \u2212 This tells the interpreter which of the three signatures ml_meth is using.\n\nThis flag usually has a value of METH_VARARGS.\nThis flag can be bitwise OR'ed with METH_KEYWORDS if you want to allow keyword arguments into your function.\nThis can also have a value of METH_NOARGS that indicates you do not want to accept any arguments.\n\n\nml_doc \u2212 This is the docstring for the function, which could be NULL if you do not feel like writing one.\n \n This table needs to be terminated with a sentinel that consists of NULL and 0 values for the appropriate members. \n Example \n For the above-defined function, we have following method mapping table \u2212 \n \nstatic PyMethodDef module_methods[] = {\n   { \"func\", (PyCFunction)module_func, METH_NOARGS, NULL },\n   { NULL, NULL, 0, NULL }\n};\n \n The Initialization Function \n The last part of your extension module is the initialization function. This function is called by the Python interpreter when the module is loaded. It is required that the function be named initModule, where Module is the name of the module. \n The initialization function needs to be exported from the library you will be building. The Python headers define PyMODINIT_FUNC to include the appropriate incantations for that to happen for the particular environment in which we're compiling. All you have to do is use it when defining the function. \n Your C initialization function generally has the following overall structure \u2212 \n \nPyMODINIT_FUNC initModule() {\n   Py_InitModule3(func, module_methods, \"docstring...\");\n}\n \n Here is the description of Py_InitModule3 function \u2212 \n \nfunc \u2212 This is the function to be exported.\nmodule_methods \u2212 This is the mapping table name defined above.\ndocstring \u2212 This is the comment you want to give in your extension.\n \n Putting this all together looks like the following \u2212 \n \n#include <Python.h>\n\nstatic PyObject *module_func(PyObject *self, PyObject *args) {\n   /* Do your stuff here. */\n   Py_RETURN_NONE;\n}\n\nstatic PyMethodDef module_methods[] = {\n   { \"func\", (PyCFunction)module_func, METH_NOARGS, NULL },\n   { NULL, NULL, 0, NULL }\n};\n\nPyMODINIT_FUNC initModule() {\n   Py_InitModule3(func, module_methods, \"docstring...\");\n}\n \n Example \n A simple example that makes use of all the above concepts \u2212 \n \n#include <Python.h>\n\nstatic PyObject* helloworld(PyObject* self) {\n   return Py_BuildValue(\"s\", \"Hello, Python extensions!!\");\n}\n\nstatic char helloworld_docs[] =\n   \"helloworld( ): Any message you want to put here!!\\n\";\n\nstatic PyMethodDef helloworld_funcs[] = {\n   {\"helloworld\", (PyCFunction)helloworld, \n      METH_NOARGS, helloworld_docs},\n      {NULL}\n};\n\nvoid inithelloworld(void) {\n   Py_InitModule3(\"helloworld\", helloworld_funcs,\n                  \"Extension module example!\");\n}\n \n Here the Py_BuildValue function is used to build a Python value. Save above code in hello.c file. We would see how to compile and install this module to be called from Python script. \n Building and Installing Extensions \n The distutils package makes it very easy to distribute Python modules, both pure Python and extension modules, in a standard way. Modules are distributed in source form and built and installed via a setup script usually called setup.py as follows. \n For the above module, you need to prepare following setup.py script \u2212 \n \nfrom distutils.core import setup, Extension\nsetup(name='helloworld', version='1.0',  \\\n      ext_modules=[Extension('helloworld', ['hello.c'])])\n \n Now, use the following command, which would perform all needed compilation and linking steps, with the right compiler and linker commands and flags, and copies the resulting dynamic library into an appropriate directory \u2212 \n \n$ python setup.py install\n \n On Unix-based systems, you'll most likely need to run this command as root in order to have permissions to write to the site-packages directory. This usually is not a problem on Windows. \n Importing Extensions \n Once you installed your extension, you would be able to import and call that extension in your Python script as follows \u2212 \n \n#!/usr/bin/python\nimport helloworld\n\nprint helloworld.helloworld()\n \n This would produce the following result \u2212 \n \nHello, Python extensions!!\n \n Passing Function Parameters \n As you will most likely want to define functions that accept arguments, you can use one of the other signatures for your C functions. For example, following function, that accepts some number of parameters, would be defined like this \u2212 \n \nstatic PyObject *module_func(PyObject *self, PyObject *args) {\n   /* Parse args and do something interesting here. */\n   Py_RETURN_NONE;\n}\n \n The method table containing an entry for the new function would look like this \u2212 \n \nstatic PyMethodDef module_methods[] = {\n   { \"func\", (PyCFunction)module_func, METH_NOARGS, NULL },\n   { \"func\", module_func, METH_VARARGS, NULL },\n   { NULL, NULL, 0, NULL }\n};\n \n You can use API PyArg_ParseTuple function to extract the arguments from the one PyObject pointer passed into your C function. \n The first argument to PyArg_ParseTuple is the args argument. This is the object you will be parsing. The second argument is a format string describing the arguments as you expect them to appear. Each argument is represented by one or more characters in the format string as follows. \n \nstatic PyObject *module_func(PyObject *self, PyObject *args) {\n   int i;\n   double d;\n   char *s;\n\n   if (!PyArg_ParseTuple(args, \"ids\", &i, &d, &s)) {\n      return NULL;\n   }\n   \n   /* Do something interesting here. */\n   Py_RETURN_NONE;\n}\n \n Compiling the new version of your module and importing it enables you to invoke the new function with any number of arguments of any type \u2212 \n \nmodule.func(1, s=\"three\", d=2.0)\nmodule.func(i=1, d=2.0, s=\"three\")\nmodule.func(s=\"three\", d=2.0, i=1)\n \n You can probably come up with even more variations. \n The PyArg_ParseTuple Function \n Here is the standard signature for PyArg_ParseTuple function \u2212 \n \nint PyArg_ParseTuple(PyObject* tuple,char* format,...)\n \n This function returns 0 for errors, and a value not equal to 0 for success. tuple is the PyObject* that was the C function's second argument. Here format is a C string that describes mandatory and optional arguments. \n Here is a list of format codes for PyArg_ParseTuple function \u2212 \n \n\nCode\nC type\nMeaning\n\n\nc\nchar\n A Python string of length 1 becomes a C char.\n\nd\ndouble\nA Python float becomes a C double.\n\nf\nfloat\nA Python float becomes a C float.\n\ni\nint\nA Python int becomes a C int.\n\nl\nlong\nA Python int becomes a C long.\n\nL\nlong long\nA Python int becomes a C long long\n\nO\nPyObject*\nGets non-NULL borrowed reference to Python argument.\n\ns\nchar*\nPython string without embedded nulls to C char*.\n\ns#\nchar*+int\nAny Python string to C address and length.\n\nt#\nchar*+int\nRead-only single-segment buffer to C address and length.\n\nu\nPy_UNICODE*\nPython Unicode without embedded nulls to C.\n\nu#\nPy_UNICODE*+int\nAny Python Unicode C address and length.\n\nw#\nchar*+int\nRead/write single-segment buffer to C address and length.\n\nz\nchar*\nLike s, also accepts None (sets C char* to NULL).\n\nz#\nchar*+int\nLike s#, also accepts None (sets C char* to NULL).\n\n(...)\nas per ...\nA Python sequence is treated as one argument per item.\n\n|\n\u00a0\nThe following arguments are optional.\n\n:\n\u00a0\nFormat end, followed by function name for error messages.\n\n;\n\u00a0\nFormat end, followed by entire error message text.\n \n Returning Values \n Py_BuildValue takes in a format string much like PyArg_ParseTuple does. Instead of passing in the addresses of the values you are building, you pass in the actual values. Here's an example showing how to implement an add function \u2212 \n \nstatic PyObject *foo_add(PyObject *self, PyObject *args) {\n   int a;\n   int b;\n\n   if (!PyArg_ParseTuple(args, \"ii\", &a, &b)) {\n      return NULL;\n   }\n   return Py_BuildValue(\"i\", a + b);\n}\n \n This is what it would look like if implemented in Python \u2212 \n \ndef add(a, b):\n   return (a + b)\n \n You can return two values from your function as follows, this would be cauptured using a list in Python. \n \nstatic PyObject *foo_add_subtract(PyObject *self, PyObject *args) {\n   int a;\n   int b;\n\n   if (!PyArg_ParseTuple(args, \"ii\", &a, &b)) {\n      return NULL;\n   }\n   return Py_BuildValue(\"ii\", a + b, a - b);\n}\n \n This is what it would look like if implemented in Python \u2212 \n \ndef add_subtract(a, b):\n   return (a + b, a - b)\n \n The Py_BuildValue Function \n Here is the standard signature for Py_BuildValue function \u2212 \n \nPyObject* Py_BuildValue(char* format,...)\n \n Here format is a C string that describes the Python object to build. The following arguments of Py_BuildValue are C values from which the result is built. The PyObject* result is a new reference. \n Following table lists the commonly used code strings, of which zero or more are joined into string format. \n \n\nCode\nC type\nMeaning\n\n\nc\nchar\nA C char becomes a Python string of length 1.\n\nd\ndouble\nA C double becomes a Python float.\n\nf\nfloat\nA C float becomes a Python float.\n\ni\nint\nA C int becomes a Python int.\n\nl\nlong\nA C long becomes a Python int.\n\nN\nPyObject*\nPasses a Python object and steals a reference.\n\nO\nPyObject*\nPasses a Python object and INCREFs it as normal.\n\nO&\nconvert+void*\nArbitrary conversion\n\ns\nchar*\nC 0-terminated char* to Python string, or NULL to None.\n\ns#\nchar*+int\nC char* and length to Python string, or NULL to None.\n\nu\nPy_UNICODE*\nC-wide, null-terminated string to Python Unicode, or NULL to None.\n\nu#\nPy_UNICODE*+int\nC-wide string and length to Python Unicode, or NULL to None.\n\nw#\nchar*+int\nRead/write single-segment buffer to C address and length.\n\nz\nchar*\nLike s, also accepts None (sets C char* to NULL).\n\nz#\nchar*+int\nLike s#, also accepts None (sets C char* to NULL).\n\n(...)\nas per ...\nBuilds Python tuple from C values.\n\n[...]\nas per ...\nBuilds Python list from C values.\n\n{...}\nas per ...\nBuilds Python dictionary from C values, alternating keys and values.\n \n Code {...} builds dictionaries from an even number of C values, alternately keys and values. For example, Py_BuildValue(\"{issi}\",23,\"zig\",\"zag\",42) returns a dictionary like Python's {23:'zig','zag':42}. \n  \n \n Previous Page\n \n \n Print\n \n \nNext Page \u00a0\n \n  \n  PRINTING ENDS HERE  \n \nAdvertisements\n<!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//-->\n\n\n \n", "url": "https://www.tutorialspoint.com/python/python_further_extensions.htm", "html": "<!DOCTYPE html>\n\n<!--[if IE 8]><html class=\"ie ie8\"> <![endif]-->\n<!--[if IE 9]><html class=\"ie ie9\"> <![endif]-->\n<!--[if gt IE 9]><!--> <html> <!--<![endif]-->\n<head>\n<!-- Basic -->\n<meta charset=\"utf-8\"/>\n<title>Python Extension Programming with C</title>\n<meta content=\"Python Extension Programming with C - Learn Python in simple and easy steps starting from basic to advanced concepts with examples including Python Syntax Object Oriented Language, Methods, Tuples, Tools/Utilities, Exceptions Handling, Sockets, GUI, Extentions, XML Programming.\" name=\"description\">\n<meta content=\"Python, Tutorials, Learning, Beginners, Basics, Object Oriented Language, Methods, Overriding, Networking, Multithreading,Methods, Tuples, Tools/Utilities, Exceptions Handling, Sockets, GUI, Extentions, XML, Programming.\" name=\"Keywords\"/>\n<base href=\"https://www.tutorialspoint.com/\"/>\n<link href=\"/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"/>\n<meta content=\"width=device-width,initial-scale=1.0,user-scalable=yes\" name=\"viewport\"/>\n<meta content=\"en_US\" property=\"og:locale\">\n<meta content=\"website\" property=\"og:type\"/>\n<meta content=\"471319149685276\" property=\"fb:app_id\"/>\n<meta content=\"www.tutorialspoint.com\" property=\"og:site_name\"/>\n<meta content=\"yes\" name=\"apple-mobile-web-app-capable\"/>\n<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"/>\n<meta content=\"tutorialspoint.com\" name=\"author\"/>\n<script src=\"https://www.tutorialspoint.com/theme/js/script-min-v4.js?v=2\" type=\"text/javascript\"></script>\n<link href=\"https://www.tutorialspoint.com/theme/css/style-min.css?v=3.1\" rel=\"stylesheet\"/>\n<script>\r\nfunction openNav() {\t\r\n  document.getElementById(\"mySidenav\").style.width = \"250px\";\r\n  document.getElementById(\"right_obs\").style.display = \"block\";\r\n}\r\nfunction closeNav() {\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\nfunction close_obs_sidenav(){\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\n</script>\n<!-- Head Libs -->\n<!--[if IE 8]>\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/theme/css/ie8.css\">\r\n<![endif]-->\n<style>\r\n#privacy-banner {\r\n    position: fixed;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    max-width: 100%;\r\n    padding: 1rem .5rem;\r\n    background: #fff;\r\n    z-index: 1030;\r\n    color: #000;\r\n    font-size: 14px;\r\n    margin: 0;\r\n    display: none;\r\n    border-top: 2px solid rgb(130, 130, 130);\r\n  }\r\n  #privacy-banner p {\r\n    margin: 0;\r\n    color: #000;\r\n    text-align: center;\r\n  }\r\n  #privacy-banner a {\r\n    text-decoration: none;\r\n    margin: 20px auto 0 auto;\r\n    display: block;\r\n    max-width: 150px;\r\n  }\r\n  #privacy-banner a:hover {\r\n    text-decoration: underline;\r\n  }\r\n  #banner-learn {\r\n    color: #000;\r\n  }\r\n  #banner-accept {\r\n    padding: 7px 15px;\r\n    color: #fff;\r\n    border-radius: 5px;\r\n    background:#737373 !important;\r\n  }\r\n  @media (min-width: 768px) {\r\n    #privacy-banner {\r\n      padding: 1.5rem .5rem;\r\n    }\r\n    #privacy-banner a {\r\n      display: inline-block;\r\n      margin: 0 10px;\r\n    }\r\n}\r\npre.prettyprint.tryit {min-height:37px; background: #eee url(/python/images/try-it.jpg) top right no-repeat !important}select{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }\r\n.btnsbmt{ background: #fdbf00 !important;}\r\nul.nav-list.primary>li a.videolink{    background: none; margin: 0px; padding: 0px; border: 1px solid #d6d6d6;}\r\ndiv.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #fdbf00 url(/images/pattern.png) repeat center center !important;}\r\n.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #fdbf00 !important;}\r\n.submenu-item{ border-bottom: 2px solid #fdbf00 !important; border-top: 2px solid #fdbf00 !important }\r\n.ace_scroller{overflow: auto!important;}\r\na.demo{font-family: \"Open Sans\",Arial,sans-serif; background:#fdbf00; color:#fff; font-size:13px; padding:3px 10px; border:1px solid #d6d6d6; position:absolute; right:5px; margin:-6px 17px 0px 0px;}\r\na.demo:hover{opacity:.8}\r\n</style>\n<script>\r\n$(document).ready(function() {\r\n  $('input[name=\"q\"]').keydown(function(event){\r\n    if(event.keyCode == 13) {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n  });\r\n});\r\n</script>\n</meta></meta></head>\n<body onload=\"prettyPrint()\">\n<div class=\"wrapLoader\">\n<div class=\"imgLoader\">\n<img alt=\"\" height=\"70\" src=\"/images/loading-cg.gif\" width=\"70\"/>\n</div>\n</div>\n<div class=\"display-none\" id=\"right_obs\" onclick=\"close_obs_sidenav()\"></div>\n<header>\n<div class=\"container\">\n<h1 class=\"logo\">\n<a href=\"index.htm\" title=\"tutorialspoint\">\n<img alt=\"tutorialspoint\" src=\"/python/images/logo.png\"/>\n</a>\n</h1>\n<ul class=\"tp-inline-block pull-right\" id=\"tp-head-icons\">\n<li>\n<div class=\"tp-second-nav tp-display-none tp-pointer\" onclick=\"openNav()\">\n<i class=\"fa fa-th-large fa-lg\"></i>\n</div>\n</li>\n</ul>\n<button class=\"btn btn-responsive-nav btn-inverse\" data-target=\".nav-main-collapse\" data-toggle=\"collapse\" id=\"pull\" style=\"top: 24px!important\"> <i class=\"icon icon-bars\"></i> </button>\n<nav>\n<ul class=\"nav nav-pills nav-top\">\n<li><a href=\"/about/about_careers.htm\" style=\"background: #fffb09; font-weight: bold;\"><i class=\"icon icon-suitcase\"></i> Jobs</a></li>\n<li> <a href=\"/programming_examples/\" target=\"_blank\"><i class=\"fa fa-cubes\"></i> \u00a0Examples</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/whiteboard.htm\"><img alt=\"Whiteboard\" src=\"theme/css/icons/image-editor.png\" title=\"Whiteboard\"/> \u00a0Whiteboard</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/netmeeting.php\"><i class=\"fa-camera\"></i> \u00a0Net Meeting</a> </li>\n<li> <a href=\"/online_dev_tools.htm\"> <i class=\"dev-tools-menu\" style=\"opacity:.5\"></i> Tools </a> </li>\n<li> <a href=\"/articles/index.php\"><i class=\"icon icon-file-text-o\"></i> \u00a0Articles</a> </li>\n<li class=\"top-icons\">\n<ul class=\"social-icons\">\n<li class=\"facebook\"><a data-placement=\"bottom\" href=\"https://www.facebook.com/tutorialspointindia\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Facebook\">Facebook</a></li>\n<li class=\"googleplus\"><a data-placement=\"bottom\" href=\"https://plus.google.com/u/0/116678774017490391259/posts\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Google+\">Google+</a></li>\n<li class=\"twitter\"><a data-placement=\"bottom\" href=\"https://www.twitter.com/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Twitter\">Twitter</a></li>\n<li class=\"linkedin\"><a data-placement=\"bottom\" href=\"https://www.linkedin.com/company/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Linkedin\">Linkedin</a></li>\n<li class=\"youtube\"><a data-placement=\"bottom\" href=\"https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint YouTube\">YouTube</a></li>\n</ul>\n</li>\n</ul>\n</nav>\n</div>\n<div class=\"sidenav\" id=\"mySidenav\">\n<div class=\"navbar nav-main\">\n<div class=\"container\">\n<nav class=\"nav-main mega-menu\">\n<ul class=\"nav nav-pills nav-main\" id=\"mainMenu\">\n<li class=\"dropdown no-sub-menu\"> <a class=\"dropdown\" href=\"index.htm\"><i class=\"icon icon-home\"></i> Home</a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"/questions/index.php\"><i class=\"fa fa-send\"></i> Q/A </a> </li>\n<li class=\"dropdown\"><a class=\"dropdown\" href=\"tutorialslibrary.htm\"><span class=\"tut-lib\"> Library </span></a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"videotutorials/index.htm\"><i class=\"fa-toggle-right\"></i> Videos </a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"tutor_connect/index.php\"><i class=\"fa-user\"> </i> Tutors</a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"codingground.htm\"><i class=\"fa-code\"></i> Coding Ground </a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"https://store.tutorialspoint.com/\"><i class=\"fa-usd\"></i> Store </a> </li>\n<li class=\"dropdown no-sub-menu\">\n<div class=\"searchform-popup\">\n<input autocomplete=\"off\" class=\"header-search-box\" id=\"search-string\" name=\"q\" onblur=\"if (this.value == '') {this.value = 'Search your favorite tutorials...';}\" onfocus=\"if (this.value == 'Search your favorite tutorials...') {this.value = '';}\" placeholder=\"Search your favorite tutorials...\" type=\"text\"/>\n<div class=\"magnifying-glass\"><i class=\"icon-search\"></i> Search </div>\n</div>\n</li>\n</ul>\n</nav>\n</div>\n</div>\n</div>\n</header></body></html>\n\n<div style=\"clear:both;\"></div>\n<div class=\"main\" role=\"main\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-2\">\n<aside class=\"sidebar\">\n<style>\r\n.ts {\r\n   text-align:center !important;\r\n   vertical-align:middle !important;\r\n}\r\n</style>\n<div class=\"mini-logo\">\n<img alt=\"Python Tutorial\" src=\"/python/images/python-mini.jpg\">\n</img></div>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Python Basic Tutorial</li>\n<li><a href=\"/python/index.htm\" target=\"_top\">Python - Home</a></li>\n<li><a href=\"/python/python_overview.htm\" target=\"_top\">Python - Overview</a></li>\n<li><a href=\"/python/python_environment.htm\" target=\"_top\">Python - Environment Setup</a></li>\n<li><a href=\"/python/python_basic_syntax.htm\" target=\"_top\">Python - Basic Syntax</a></li>\n<li><a href=\"/python/python_variable_types.htm\" target=\"_top\">Python - Variable Types</a></li>\n<li><a href=\"/python/python_basic_operators.htm\" target=\"_top\">Python - Basic Operators</a></li>\n<li><a href=\"/python/python_decision_making.htm\" target=\"_top\">Python - Decision Making</a></li>\n<li><a href=\"/python/python_loops.htm\" target=\"_top\">Python - Loops</a></li>\n<li><a href=\"/python/python_numbers.htm\" target=\"_top\">Python - Numbers</a></li>\n<li><a href=\"/python/python_strings.htm\" target=\"_top\">Python - Strings</a></li>\n<li><a href=\"/python/python_lists.htm\" target=\"_top\">Python - Lists</a></li>\n<li><a href=\"/python/python_tuples.htm\" target=\"_top\">Python - Tuples</a></li>\n<li><a href=\"/python/python_dictionary.htm\" target=\"_top\">Python - Dictionary</a></li>\n<li><a href=\"/python/python_date_time.htm\" target=\"_top\">Python - Date &amp; Time</a></li>\n<li><a href=\"/python/python_functions.htm\" target=\"_top\">Python - Functions</a></li>\n<li><a href=\"/python/python_modules.htm\" target=\"_top\">Python - Modules</a></li>\n<li><a href=\"/python/python_files_io.htm\" target=\"_top\">Python - Files I/O</a></li>\n<li><a href=\"/python/python_exceptions.htm\" target=\"_top\">Python - Exceptions</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Python Advanced Tutorial</li>\n<li><a href=\"/python/python_classes_objects.htm\" target=\"_top\">Python - Classes/Objects</a></li>\n<li><a href=\"/python/python_reg_expressions.htm\" target=\"_top\">Python - Reg Expressions</a></li>\n<li><a href=\"/python/python_cgi_programming.htm\" target=\"_top\">Python - CGI Programming</a></li>\n<li><a href=\"/python/python_database_access.htm\" target=\"_top\">Python - Database Access</a></li>\n<li><a href=\"/python/python_networking.htm\" target=\"_top\">Python - Networking</a></li>\n<li><a href=\"/python/python_sending_email.htm\" target=\"_top\">Python - Sending Email</a></li>\n<li><a href=\"/python/python_multithreading.htm\" target=\"_top\">Python - Multithreading</a></li>\n<li><a href=\"/python/python_xml_processing.htm\" target=\"_top\">Python - XML Processing</a></li>\n<li><a href=\"/python/python_gui_programming.htm\" target=\"_top\">Python - GUI Programming</a></li>\n<li><a href=\"/python/python_further_extensions.htm\" target=\"_top\">Python - Further Extensions</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Python  Useful Resources</li>\n<li><a href=\"/python/python_questions_answers.htm\" target=\"_top\">Python - Questions and Answers</a></li>\n<li><a href=\"/python/python_quick_guide.htm\" target=\"_top\">Python - Quick Guide</a></li>\n<li><a href=\"/python/python_tools_utilities.htm\" target=\"_top\">Python - Tools/Utilities</a></li>\n<li><a href=\"/python/python_useful_resources.htm\" target=\"_top\">Python - Useful Resources</a></li>\n<li><a href=\"/python/python_discussion.htm\" target=\"_top\">Python - Discussion</a></li>\n</ul>\n<ul class=\"nav nav-list primary push-bottom left-menu special\">\n<li class=\"sreading\">Selected Reading</li>\n<li><a href=\"/upsc_ias_exams.htm\" target=\"_top\">UPSC IAS Exams Notes</a></li>\n<li><a href=\"/developers_best_practices/index.htm\" target=\"_top\">Developer's Best Practices</a></li>\n<li><a href=\"/questions_and_answers.htm\" target=\"_top\">Questions and Answers</a></li>\n<li><a href=\"/effective_resume_writing.htm\" target=\"_top\">Effective Resume Writing</a></li>\n<li><a href=\"/hr_interview_questions/index.htm\" target=\"_top\">HR Interview Questions</a></li>\n<li><a href=\"/computer_glossary.htm\" target=\"_top\">Computer Glossary</a></li>\n<li><a href=\"/computer_whoiswho.htm\" target=\"_top\">Who is Who</a></li>\n</ul>\n</aside>\n</div>\n<!-- PRINTING STARTS HERE -->\n<div class=\"row\">\n<div class=\"content\">\n<div class=\"col-md-7 middle-col\">\n<h1>Python - Extension Programming with C</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_gui_programming.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_quick_guide.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>Any code that you write using any compiled language like C, C++, or Java can be integrated or imported into another Python script. This code is considered as an \"extension.\"</p>\n<p>A Python extension module is nothing more than a normal C library. On Unix machines, these libraries usually end in <b>.so</b> (for shared object). On Windows machines, you typically see <b>.dll</b> (for dynamically linked library).</p>\n<h2>Pre-Requisites for Writing Extensions</h2>\n<p>To start writing your extension, you are going to need the Python header files.</p>\n<ul class=\"list\">\n<li><p>On Unix machines, this usually requires installing a developer-specific package such as <a href=\"http://packages.debian.org/etch-m68k/python2.5-dev\" target=\"_blank\">python2.5-dev</a>.</p></li>\n<li><p>Windows users get these headers as part of the package when they use the binary Python installer.</p></li>\n</ul>\n<p>Additionally, it is assumed that you have good knowledge of C or C++ to write any Python Extension using C programming.</p>\n<h2>First look at a Python Extension</h2>\n<p>For your first look at a Python extension module, you need to group your code into four part \u2212</p>\n<ul class=\"list\">\n<li><p>The header file <i>Python.h</i>.</p></li>\n<li><p>The C functions you want to expose as the interface from your module.</p></li>\n<li><p>A table mapping the names of your functions as Python developers see them to C functions inside the extension module.</p></li>\n<li><p>An initialization function.</p></li>\n</ul>\n<h2>The Header File <i>Python.h</i></h2>\n<p>You need include <i>Python.h</i> header file in your C source file, which gives you access to the internal Python API used to hook your module into the interpreter.</p>\n<p>Make sure to include Python.h before any other headers you might need. You need to follow the includes with the functions you want to call from Python.</p>\n<h2>The C Functions</h2>\n<p>The signatures of the C implementation of your functions always takes one of the following three forms \u2212</p>\n<pre class=\"prettyprint notranslate\">\nstatic PyObject *MyFunction( PyObject *self, PyObject *args );\n\nstatic PyObject *MyFunctionWithKeywords(PyObject *self,\n                                 PyObject *args,\n                                 PyObject *kw);\n\nstatic PyObject *MyFunctionWithNoArgs( PyObject *self );\n</pre>\n<p>Each one of the preceding declarations returns a Python object. There is no such thing as a <i>void </i> function in Python as there is in C. If you do not want your functions to return a value, return the C equivalent of Python's <b>None</b> value. The Python headers define a macro, Py_RETURN_NONE, that does this for us.</p>\n<p>The names of your C functions can be whatever you like as they are never seen outside of the extension module. They are defined as <i>static</i> function.</p>\n<p>Your C functions usually are named by combining the Python module and function names together, as shown here \u2212</p>\n<pre class=\"prettyprint notranslate\">\nstatic PyObject *<i>module_func</i>(PyObject *self, PyObject *args) {\n   /* Do your stuff here. */\n   Py_RETURN_NONE;\n}\n</pre>\n<p>This is a Python function called <i>func</i> inside of the module <i>module</i>. You will be putting pointers to your C functions into the method table for the module that usually comes next in your source code.</p>\n<h2>The Method Mapping Table</h2>\n<p>This method table is a simple array of PyMethodDef structures. That structure looks something like this \u2212</p>\n<pre class=\"prettyprint notranslate\">\nstruct PyMethodDef {\n   char *ml_name;\n   PyCFunction ml_meth;\n   int ml_flags;\n   char *ml_doc;\n};\n</pre>\n<p>Here is the description of the members of this structure \u2212</p>\n<ul class=\"list\">\n<li><p><b>ml_name</b> \u2212 This is the name of the function as the Python interpreter presents when it is used in Python programs.</p></li>\n<li><p><b>ml_meth</b> \u2212 This must be the address to a function that has any one of the signatures described in previous seection.</p></li>\n<li><p><b>ml_flags</b> \u2212 This tells the interpreter which of the three signatures ml_meth is using.</p>\n<ul class=\"list\">\n<li><p>This flag usually has a value of METH_VARARGS.</p></li>\n<li><p>This flag can be bitwise OR'ed with METH_KEYWORDS if you want to allow keyword arguments into your function.</p></li>\n<li><p>This can also have a value of METH_NOARGS that indicates you do not want to accept any arguments.</p></li>\n</ul>\n</li>\n<li><p><b>ml_doc</b> \u2212 This is the docstring for the function, which could be NULL if you do not feel like writing one.</p></li>\n</ul>\n<p>This table needs to be terminated with a sentinel that consists of NULL and 0 values for the appropriate members.</p>\n<h3>Example</h3>\n<p>For the above-defined function, we have following method mapping table \u2212</p>\n<pre class=\"prettyprint notranslate\">\nstatic PyMethodDef <i>module</i>_methods[] = {\n   { \"<i>func</i>\", (PyCFunction)<i>module_func</i>, METH_NOARGS, NULL },\n   { NULL, NULL, 0, NULL }\n};\n</pre>\n<h2>The Initialization Function</h2>\n<p>The last part of your extension module is the initialization function. This function is called by the Python interpreter when the module is loaded. It is required that the function be named <b>init<i>Module</i></b>, where <i>Module</i> is the name of the module.</p>\n<p>The initialization function needs to be exported from the library you will be building. The Python headers define PyMODINIT_FUNC to include the appropriate incantations for that to happen for the particular environment in which we're compiling. All you have to do is use it when defining the function.</p>\n<p>Your C initialization function generally has the following overall structure \u2212</p>\n<pre class=\"prettyprint notranslate\">\nPyMODINIT_FUNC init<i>Module</i>() {\n   Py_InitModule3(<i>func</i>, <i>module</i>_methods, \"docstring...\");\n}\n</pre>\n<p>Here is the description of <i>Py_InitModule3</i> function \u2212</p>\n<ul class=\"list\">\n<li><p><b>func</b> \u2212 This is the function to be exported.</p></li>\n<li><p><b><i>module</i>_methods</b> \u2212 This is the mapping table name defined above.</p></li>\n<li><p><b><i>docstring</i></b> \u2212 This is the comment you want to give in your extension.</p></li>\n</ul>\n<p>Putting this all together looks like the following \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;Python.h&gt;\n\nstatic PyObject *<i>module_func</i>(PyObject *self, PyObject *args) {\n   /* Do your stuff here. */\n   Py_RETURN_NONE;\n}\n\nstatic PyMethodDef <i>module</i>_methods[] = {\n   { \"<i>func</i>\", (PyCFunction)<i>module_func</i>, METH_NOARGS, NULL },\n   { NULL, NULL, 0, NULL }\n};\n\nPyMODINIT_FUNC init<i>Module</i>() {\n   Py_InitModule3(<i>func</i>, <i>module</i>_methods, \"docstring...\");\n}\n</pre>\n<h3>Example</h3>\n<p>A simple example that makes use of all the above concepts \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;Python.h&gt;\n\nstatic PyObject* helloworld(PyObject* self) {\n   return Py_BuildValue(\"s\", \"Hello, Python extensions!!\");\n}\n\nstatic char helloworld_docs[] =\n   \"helloworld( ): Any message you want to put here!!\\n\";\n\nstatic PyMethodDef helloworld_funcs[] = {\n   {\"helloworld\", (PyCFunction)helloworld, \n      METH_NOARGS, helloworld_docs},\n      {NULL}\n};\n\nvoid inithelloworld(void) {\n   Py_InitModule3(\"helloworld\", helloworld_funcs,\n                  \"Extension module example!\");\n}\n</pre>\n<p>Here the <i>Py_BuildValue</i> function is used to build a Python value. Save above code in hello.c file. We would see how to compile and install this module to be called from Python script.</p>\n<h2>Building and Installing Extensions</h2>\n<p>The <i>distutils</i> package makes it very easy to distribute Python modules, both pure Python and extension modules, in a standard way. Modules are distributed in source form and built and installed via a setup script usually called <i>setup.py</i> as follows.</p>\n<p>For the above module, you need to prepare following setup.py script \u2212</p>\n<pre class=\"prettyprint notranslate\">\nfrom distutils.core import setup, Extension\nsetup(name='helloworld', version='1.0',  \\\n      ext_modules=[Extension('helloworld', ['hello.c'])])\n</pre>\n<p>Now, use the following command, which would perform all needed compilation and linking steps, with the right compiler and linker commands and flags, and copies the resulting dynamic library into an appropriate directory \u2212</p>\n<pre class=\"prettyprint notranslate\">\n$ python setup.py install\n</pre>\n<p>On Unix-based systems, you'll most likely need to run this command as root in order to have permissions to write to the site-packages directory. This usually is not a problem on Windows.</p>\n<h2>Importing Extensions</h2>\n<p>Once you installed your extension, you would be able to import and call that extension in your Python script as follows \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\nimport helloworld\n\nprint helloworld.helloworld()\n</pre>\n<p>This would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nHello, Python extensions!!\n</pre>\n<h2>Passing Function Parameters</h2>\n<p>As you will most likely want to define functions that accept arguments, you can use one of the other signatures for your C functions. For example, following function, that accepts some number of parameters, would be defined like this \u2212</p>\n<pre class=\"prettyprint notranslate\">\nstatic PyObject *<i>module_func</i>(PyObject *self, PyObject *args) {\n   /* Parse args and do something interesting here. */\n   Py_RETURN_NONE;\n}\n</pre>\n<p>The method table containing an entry for the new function would look like this \u2212</p>\n<pre class=\"prettyprint notranslate\">\nstatic PyMethodDef <i>module</i>_methods[] = {\n   { \"<i>func</i>\", (PyCFunction)<i>module_func</i>, METH_NOARGS, NULL },\n   { \"<i>func</i>\", <i>module_func</i>, METH_VARARGS, NULL },\n   { NULL, NULL, 0, NULL }\n};\n</pre>\n<p>You can use API <i>PyArg_ParseTuple</i> function to extract the arguments from the one PyObject pointer passed into your C function.</p>\n<p>The first argument to PyArg_ParseTuple is the args argument. This is the object you will be <i>parsing</i>. The second argument is a format string describing the arguments as you expect them to appear. Each argument is represented by one or more characters in the format string as follows.</p>\n<pre class=\"prettyprint notranslate\">\nstatic PyObject *<i>module_func</i>(PyObject *self, PyObject *args) {\n   int i;\n   double d;\n   char *s;\n\n   if (!PyArg_ParseTuple(args, \"ids\", &amp;i, &amp;d, &amp;s)) {\n      return NULL;\n   }\n   \n   /* Do something interesting here. */\n   Py_RETURN_NONE;\n}\n</pre>\n<p>Compiling the new version of your module and importing it enables you to invoke the new function with any number of arguments of any type \u2212</p>\n<pre class=\"prettyprint notranslate\">\nmodule.func(1, s=\"three\", d=2.0)\nmodule.func(i=1, d=2.0, s=\"three\")\nmodule.func(s=\"three\", d=2.0, i=1)\n</pre>\n<p>You can probably come up with even more variations.</p>\n<h2>The <i>PyArg_ParseTuple</i> Function</h2>\n<p>Here is the standard signature for <b>PyArg_ParseTuple</b> function \u2212</p>\n<pre class=\"result notranslate\">\nint PyArg_ParseTuple(PyObject* tuple,char* format,...)\n</pre>\n<p>This function returns 0 for errors, and a value not equal to 0 for success. tuple is the PyObject* that was the C function's second argument. Here <i>format</i> is a C string that describes mandatory and optional arguments.</p>\n<p>Here is a list of format codes for <b>PyArg_ParseTuple</b> function \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;width:10%\">Code</th>\n<th style=\"text-align:center;width:10%\">C type</th>\n<th style=\"text-align:center;\">Meaning</th>\n</tr>\n<tr>\n<td class=\"ts\">c</td>\n<td class=\"ts\">char</td>\n<td> A Python string of length 1 becomes a C char.</td></tr>\n<tr>\n<td class=\"ts\">d</td>\n<td class=\"ts\">double</td>\n<td>A Python float becomes a C double.</td></tr>\n<tr>\n<td class=\"ts\">f</td>\n<td class=\"ts\">float</td>\n<td>A Python float becomes a C float.</td></tr>\n<tr>\n<td class=\"ts\">i</td>\n<td class=\"ts\">int</td>\n<td>A Python int becomes a C int.</td></tr>\n<tr>\n<td class=\"ts\">l</td>\n<td class=\"ts\">long</td>\n<td>A Python int becomes a C long.</td></tr>\n<tr>\n<td class=\"ts\">L</td>\n<td class=\"ts\">long long</td>\n<td>A Python int becomes a C long long</td></tr>\n<tr>\n<td class=\"ts\">O</td>\n<td class=\"ts\">PyObject*</td>\n<td>Gets non-NULL borrowed reference to Python argument.</td></tr>\n<tr>\n<td class=\"ts\">s</td>\n<td class=\"ts\">char*</td>\n<td>Python string without embedded nulls to C char*.</td></tr>\n<tr>\n<td class=\"ts\">s#</td>\n<td class=\"ts\">char*+int</td>\n<td>Any Python string to C address and length.</td></tr>\n<tr>\n<td class=\"ts\">t#</td>\n<td class=\"ts\">char*+int</td>\n<td>Read-only single-segment buffer to C address and length.</td></tr>\n<tr>\n<td class=\"ts\">u</td>\n<td class=\"ts\">Py_UNICODE*</td>\n<td>Python Unicode without embedded nulls to C.</td></tr>\n<tr>\n<td class=\"ts\">u#</td>\n<td class=\"ts\">Py_UNICODE*+int</td>\n<td>Any Python Unicode C address and length.</td></tr>\n<tr>\n<td class=\"ts\">w#</td>\n<td class=\"ts\">char*+int</td>\n<td>Read/write single-segment buffer to C address and length.</td></tr>\n<tr>\n<td class=\"ts\">z</td>\n<td class=\"ts\">char*</td>\n<td>Like s, also accepts None (sets C char* to NULL).</td></tr>\n<tr>\n<td class=\"ts\">z#</td>\n<td class=\"ts\">char*+int</td>\n<td>Like s#, also accepts None (sets C char* to NULL).</td></tr>\n<tr>\n<td class=\"ts\">(...)</td>\n<td class=\"ts\">as per ...</td>\n<td>A Python sequence is treated as one argument per item.</td></tr>\n<tr>\n<td class=\"ts\">|</td>\n<td>\u00a0</td>\n<td>The following arguments are optional.</td></tr>\n<tr>\n<td class=\"ts\">:</td>\n<td>\u00a0</td>\n<td>Format end, followed by function name for error messages.</td></tr>\n<tr>\n<td class=\"ts\">;</td>\n<td>\u00a0</td>\n<td>Format end, followed by entire error message text.</td></tr>\n</table>\n<h2>Returning Values</h2>\n<p><i>Py_BuildValue</i> takes in a format string much like <i>PyArg_ParseTuple</i> does. Instead of passing in the addresses of the values you are building, you pass in the actual values. Here's an example showing how to implement an add function \u2212</p>\n<pre class=\"prettyprint notranslate\">\nstatic PyObject *foo_add(PyObject *self, PyObject *args) {\n   int a;\n   int b;\n\n   if (!PyArg_ParseTuple(args, \"ii\", &amp;a, &amp;b)) {\n      return NULL;\n   }\n   return Py_BuildValue(\"i\", a + b);\n}\n</pre>\n<p>This is what it would look like if implemented in Python \u2212</p>\n<pre class=\"result notranslate\">\ndef add(a, b):\n   return (a + b)\n</pre>\n<p>You can return two values from your function as follows, this would be cauptured using a list in Python.</p>\n<pre class=\"prettyprint notranslate\">\nstatic PyObject *foo_add_subtract(PyObject *self, PyObject *args) {\n   int a;\n   int b;\n\n   if (!PyArg_ParseTuple(args, \"ii\", &amp;a, &amp;b)) {\n      return NULL;\n   }\n   return Py_BuildValue(\"ii\", a + b, a - b);\n}\n</pre>\n<p>This is what it would look like if implemented in Python \u2212</p>\n<pre class=\"result notranslate\">\ndef add_subtract(a, b):\n   return (a + b, a - b)\n</pre>\n<h2>The <i>Py_BuildValue</i> Function</h2>\n<p>Here is the standard signature for <b>Py_BuildValue</b> function \u2212</p>\n<pre class=\"result notranslate\">\nPyObject* Py_BuildValue(char* format,...)\n</pre>\n<p>Here <i>format</i> is a C string that describes the Python object to build. The following arguments of <i>Py_BuildValue</i> are C values from which the result is built. The <i>PyObject*</i> result is a new reference.</p>\n<p>Following table lists the commonly used code strings, of which zero or more are joined into string format.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;width:10%\">Code</th>\n<th style=\"text-align:center;width:10%\">C type</th>\n<th style=\"text-align:center;\">Meaning</th>\n</tr>\n<tr>\n<td class=\"ts\">c</td>\n<td class=\"ts\">char</td>\n<td>A C char becomes a Python string of length 1.</td></tr>\n<tr>\n<td class=\"ts\">d</td>\n<td class=\"ts\">double</td>\n<td>A C double becomes a Python float.</td></tr>\n<tr>\n<td class=\"ts\">f</td>\n<td class=\"ts\">float</td>\n<td>A C float becomes a Python float.</td></tr>\n<tr>\n<td class=\"ts\">i</td>\n<td class=\"ts\">int</td>\n<td>A C int becomes a Python int.</td></tr>\n<tr>\n<td class=\"ts\">l</td>\n<td class=\"ts\">long</td>\n<td>A C long becomes a Python int.</td></tr>\n<tr>\n<td class=\"ts\">N</td>\n<td class=\"ts\">PyObject*</td>\n<td>Passes a Python object and steals a reference.</td></tr>\n<tr>\n<td class=\"ts\">O</td>\n<td class=\"ts\">PyObject*</td>\n<td>Passes a Python object and INCREFs it as normal.</td></tr>\n<tr>\n<td class=\"ts\">O&amp;</td>\n<td class=\"ts\">convert+void*</td>\n<td>Arbitrary conversion</td></tr>\n<tr>\n<td class=\"ts\">s</td>\n<td class=\"ts\">char*</td>\n<td>C 0-terminated char* to Python string, or NULL to None.</td></tr>\n<tr>\n<td class=\"ts\">s#</td>\n<td class=\"ts\">char*+int</td>\n<td>C char* and length to Python string, or NULL to None.</td></tr>\n<tr>\n<td class=\"ts\">u</td>\n<td class=\"ts\">Py_UNICODE*</td>\n<td>C-wide, null-terminated string to Python Unicode, or NULL to None.</td></tr>\n<tr>\n<td class=\"ts\">u#</td>\n<td class=\"ts\">Py_UNICODE*+int</td>\n<td>C-wide string and length to Python Unicode, or NULL to None.</td></tr>\n<tr>\n<td class=\"ts\">w#</td>\n<td class=\"ts\">char*+int</td>\n<td>Read/write single-segment buffer to C address and length.</td></tr>\n<tr>\n<td class=\"ts\">z</td>\n<td class=\"ts\">char*</td>\n<td>Like s, also accepts None (sets C char* to NULL).</td></tr>\n<tr>\n<td class=\"ts\">z#</td>\n<td class=\"ts\">char*+int</td>\n<td>Like s#, also accepts None (sets C char* to NULL).</td></tr>\n<tr>\n<td class=\"ts\">(...)</td>\n<td class=\"ts\">as per ...</td>\n<td>Builds Python tuple from C values.</td></tr>\n<tr>\n<td class=\"ts\">[...]</td>\n<td class=\"ts\">as per ...</td>\n<td>Builds Python list from C values.</td></tr>\n<tr>\n<td class=\"ts\">{...}</td>\n<td class=\"ts\">as per ...</td>\n<td>Builds Python dictionary from C values, alternating keys and values.</td></tr>\n</table>\n<p>Code {...} builds dictionaries from an even number of C values, alternately keys and values. For example, Py_BuildValue(\"{issi}\",23,\"zig\",\"zag\",42) returns a dictionary like Python's {23:'zig','zag':42}.</p>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_gui_programming.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_quick_guide.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n<div class=\"row\">\n<div class=\"col-md-3\" id=\"rightbar\">\n<div class=\"simple-ad\">\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.facebook.com/sharer.php?u=' + 'https://www.tutorialspoint.com/python/python_further_extensions.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/facebookIcon.jpg\">\n</img></a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://twitter.com/share?url=' + 'https://www.tutorialspoint.com/python/python_further_extensions.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/twitterIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'https://www.tutorialspoint.com/python/python_further_extensions.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/linkedinIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=https://www.tutorialspoint.com/python/python_further_extensions.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/googlePlusIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.stumbleupon.com/submit?url=https://www.tutorialspoint.com/python/python_further_extensions.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/StumbleUponIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://reddit.com/submit?url=https://www.tutorialspoint.com/python/python_further_extensions.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/reddit.jpg\"/>\n</a>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\ngoogle_ad_format = \"300x250_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 600;\ngoogle_ad_format = \"300x600_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"ca-pub-2537027957187252\";\n/* Right Side Ad */\ngoogle_ad_slot = \"right_side_ad\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\n//-->\n</script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"footer-copyright\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-1\">\n<a class=\"logo\" href=\"index.htm\"> <img alt=\"Tutorials Point\" class=\"img-responsive\" src=\"/scripts/img/logo-footer.png\"/> </a>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<nav id=\"sub-menu\">\n<ul>\n<li><a href=\"/about/about_privacy.htm\">Privacy Policy</a></li>\n<li><a href=\"/about/about_cookies.htm\">Cookies Policy</a></li>\n<li><a href=\"/about/contact_us.htm\">Contact</a></li>\n</ul>\n</nav>\n</div>\n<div class=\"col-md-3 col-sm-12 col-xs-12\">\n<p>\u00a9 Copyright 2019. All Rights Reserved.</p>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<div class=\"news-group\">\n<input autocomplete=\"off\" class=\"form-control-foot search\" id=\"textemail\" name=\"textemail\" onblur=\"if (this.value == '') {this.value = 'Enter email for newsletter...';}\" onfocus=\"if (this.value == 'Enter email for newsletter...') {this.value = '';}\" placeholder=\"Enter email for newsletter\" type=\"text\"/>\n<span class=\"input-group-btn\"> <button class=\"btn btn-default btn-footer\" id=\"btnemail\" onclick=\"javascript:void(0);\" type=\"submit\">go</button> </span>\n<div id=\"newsresponse\"></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"privacy-banner\">\n<div>\n<p>\n      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.\n      <a href=\"javascript:void(0)\" id=\"banner-accept\">Accept</a>\n<a href=\"/about/about_cookies.htm\" id=\"banner-learn\" target=\"_blank\">Learn more</a>\n</p>\n</div>\n</div>\n<script>\n// Banner Trigger if Not Closed\nif (!localStorage.bannerClosed) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n} else {\n  document.getElementById('privacy-banner').style.display = \"none\";\n}\ndocument.getElementById('banner-accept').addEventListener('click', function() {\n  document.getElementById('privacy-banner').style.display = \"none\";\n  localStorage.bannerClosed = 'true';\n});\nif (navigator.userAgent.match(/Opera|OPR\\//)) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n}\n</script>\n<!-- Libs -->\n<script src=\"/theme/js/custom-min.js?v=7\"></script>\n<script src=\"https://www.google-analytics.com/urchin.js\">\n</script>\n<script>\n_uacct = \"UA-232293-6\";\nurchinTracker();\n$('.pg-icon').click(function(){\n   $('.wrapLoader').show();\n});\n</script>\n<script src=\"/theme/js/jquery.colorbox-min.js\"></script>\n<script>\n   var tryit = new $.TryIt('/python/try_python.php');\n   tryit.compile();\n</script>\n\n\n", "title": "Python - Extension Programming with C", "content_html": "<div class=\"col-md-7 middle-col\">\n<h1>Python - Extension Programming with C</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_gui_programming.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_quick_guide.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>Any code that you write using any compiled language like C, C++, or Java can be integrated or imported into another Python script. This code is considered as an \"extension.\"</p>\n<p>A Python extension module is nothing more than a normal C library. On Unix machines, these libraries usually end in <b>.so</b> (for shared object). On Windows machines, you typically see <b>.dll</b> (for dynamically linked library).</p>\n<h2>Pre-Requisites for Writing Extensions</h2>\n<p>To start writing your extension, you are going to need the Python header files.</p>\n<ul class=\"list\">\n<li><p>On Unix machines, this usually requires installing a developer-specific package such as <a href=\"http://packages.debian.org/etch-m68k/python2.5-dev\" target=\"_blank\">python2.5-dev</a>.</p></li>\n<li><p>Windows users get these headers as part of the package when they use the binary Python installer.</p></li>\n</ul>\n<p>Additionally, it is assumed that you have good knowledge of C or C++ to write any Python Extension using C programming.</p>\n<h2>First look at a Python Extension</h2>\n<p>For your first look at a Python extension module, you need to group your code into four part \u2212</p>\n<ul class=\"list\">\n<li><p>The header file <i>Python.h</i>.</p></li>\n<li><p>The C functions you want to expose as the interface from your module.</p></li>\n<li><p>A table mapping the names of your functions as Python developers see them to C functions inside the extension module.</p></li>\n<li><p>An initialization function.</p></li>\n</ul>\n<h2>The Header File <i>Python.h</i></h2>\n<p>You need include <i>Python.h</i> header file in your C source file, which gives you access to the internal Python API used to hook your module into the interpreter.</p>\n<p>Make sure to include Python.h before any other headers you might need. You need to follow the includes with the functions you want to call from Python.</p>\n<h2>The C Functions</h2>\n<p>The signatures of the C implementation of your functions always takes one of the following three forms \u2212</p>\n<pre class=\"prettyprint notranslate\">\nstatic PyObject *MyFunction( PyObject *self, PyObject *args );\n\nstatic PyObject *MyFunctionWithKeywords(PyObject *self,\n                                 PyObject *args,\n                                 PyObject *kw);\n\nstatic PyObject *MyFunctionWithNoArgs( PyObject *self );\n</pre>\n<p>Each one of the preceding declarations returns a Python object. There is no such thing as a <i>void </i> function in Python as there is in C. If you do not want your functions to return a value, return the C equivalent of Python's <b>None</b> value. The Python headers define a macro, Py_RETURN_NONE, that does this for us.</p>\n<p>The names of your C functions can be whatever you like as they are never seen outside of the extension module. They are defined as <i>static</i> function.</p>\n<p>Your C functions usually are named by combining the Python module and function names together, as shown here \u2212</p>\n<pre class=\"prettyprint notranslate\">\nstatic PyObject *<i>module_func</i>(PyObject *self, PyObject *args) {\n   /* Do your stuff here. */\n   Py_RETURN_NONE;\n}\n</pre>\n<p>This is a Python function called <i>func</i> inside of the module <i>module</i>. You will be putting pointers to your C functions into the method table for the module that usually comes next in your source code.</p>\n<h2>The Method Mapping Table</h2>\n<p>This method table is a simple array of PyMethodDef structures. That structure looks something like this \u2212</p>\n<pre class=\"prettyprint notranslate\">\nstruct PyMethodDef {\n   char *ml_name;\n   PyCFunction ml_meth;\n   int ml_flags;\n   char *ml_doc;\n};\n</pre>\n<p>Here is the description of the members of this structure \u2212</p>\n<ul class=\"list\">\n<li><p><b>ml_name</b> \u2212 This is the name of the function as the Python interpreter presents when it is used in Python programs.</p></li>\n<li><p><b>ml_meth</b> \u2212 This must be the address to a function that has any one of the signatures described in previous seection.</p></li>\n<li><p><b>ml_flags</b> \u2212 This tells the interpreter which of the three signatures ml_meth is using.</p>\n<ul class=\"list\">\n<li><p>This flag usually has a value of METH_VARARGS.</p></li>\n<li><p>This flag can be bitwise OR'ed with METH_KEYWORDS if you want to allow keyword arguments into your function.</p></li>\n<li><p>This can also have a value of METH_NOARGS that indicates you do not want to accept any arguments.</p></li>\n</ul>\n</li>\n<li><p><b>ml_doc</b> \u2212 This is the docstring for the function, which could be NULL if you do not feel like writing one.</p></li>\n</ul>\n<p>This table needs to be terminated with a sentinel that consists of NULL and 0 values for the appropriate members.</p>\n<h3>Example</h3>\n<p>For the above-defined function, we have following method mapping table \u2212</p>\n<pre class=\"prettyprint notranslate\">\nstatic PyMethodDef <i>module</i>_methods[] = {\n   { \"<i>func</i>\", (PyCFunction)<i>module_func</i>, METH_NOARGS, NULL },\n   { NULL, NULL, 0, NULL }\n};\n</pre>\n<h2>The Initialization Function</h2>\n<p>The last part of your extension module is the initialization function. This function is called by the Python interpreter when the module is loaded. It is required that the function be named <b>init<i>Module</i></b>, where <i>Module</i> is the name of the module.</p>\n<p>The initialization function needs to be exported from the library you will be building. The Python headers define PyMODINIT_FUNC to include the appropriate incantations for that to happen for the particular environment in which we're compiling. All you have to do is use it when defining the function.</p>\n<p>Your C initialization function generally has the following overall structure \u2212</p>\n<pre class=\"prettyprint notranslate\">\nPyMODINIT_FUNC init<i>Module</i>() {\n   Py_InitModule3(<i>func</i>, <i>module</i>_methods, \"docstring...\");\n}\n</pre>\n<p>Here is the description of <i>Py_InitModule3</i> function \u2212</p>\n<ul class=\"list\">\n<li><p><b>func</b> \u2212 This is the function to be exported.</p></li>\n<li><p><b><i>module</i>_methods</b> \u2212 This is the mapping table name defined above.</p></li>\n<li><p><b><i>docstring</i></b> \u2212 This is the comment you want to give in your extension.</p></li>\n</ul>\n<p>Putting this all together looks like the following \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;Python.h&gt;\n\nstatic PyObject *<i>module_func</i>(PyObject *self, PyObject *args) {\n   /* Do your stuff here. */\n   Py_RETURN_NONE;\n}\n\nstatic PyMethodDef <i>module</i>_methods[] = {\n   { \"<i>func</i>\", (PyCFunction)<i>module_func</i>, METH_NOARGS, NULL },\n   { NULL, NULL, 0, NULL }\n};\n\nPyMODINIT_FUNC init<i>Module</i>() {\n   Py_InitModule3(<i>func</i>, <i>module</i>_methods, \"docstring...\");\n}\n</pre>\n<h3>Example</h3>\n<p>A simple example that makes use of all the above concepts \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;Python.h&gt;\n\nstatic PyObject* helloworld(PyObject* self) {\n   return Py_BuildValue(\"s\", \"Hello, Python extensions!!\");\n}\n\nstatic char helloworld_docs[] =\n   \"helloworld( ): Any message you want to put here!!\\n\";\n\nstatic PyMethodDef helloworld_funcs[] = {\n   {\"helloworld\", (PyCFunction)helloworld, \n      METH_NOARGS, helloworld_docs},\n      {NULL}\n};\n\nvoid inithelloworld(void) {\n   Py_InitModule3(\"helloworld\", helloworld_funcs,\n                  \"Extension module example!\");\n}\n</pre>\n<p>Here the <i>Py_BuildValue</i> function is used to build a Python value. Save above code in hello.c file. We would see how to compile and install this module to be called from Python script.</p>\n<h2>Building and Installing Extensions</h2>\n<p>The <i>distutils</i> package makes it very easy to distribute Python modules, both pure Python and extension modules, in a standard way. Modules are distributed in source form and built and installed via a setup script usually called <i>setup.py</i> as follows.</p>\n<p>For the above module, you need to prepare following setup.py script \u2212</p>\n<pre class=\"prettyprint notranslate\">\nfrom distutils.core import setup, Extension\nsetup(name='helloworld', version='1.0',  \\\n      ext_modules=[Extension('helloworld', ['hello.c'])])\n</pre>\n<p>Now, use the following command, which would perform all needed compilation and linking steps, with the right compiler and linker commands and flags, and copies the resulting dynamic library into an appropriate directory \u2212</p>\n<pre class=\"prettyprint notranslate\">\n$ python setup.py install\n</pre>\n<p>On Unix-based systems, you'll most likely need to run this command as root in order to have permissions to write to the site-packages directory. This usually is not a problem on Windows.</p>\n<h2>Importing Extensions</h2>\n<p>Once you installed your extension, you would be able to import and call that extension in your Python script as follows \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/python\nimport helloworld\n\nprint helloworld.helloworld()\n</pre>\n<p>This would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nHello, Python extensions!!\n</pre>\n<h2>Passing Function Parameters</h2>\n<p>As you will most likely want to define functions that accept arguments, you can use one of the other signatures for your C functions. For example, following function, that accepts some number of parameters, would be defined like this \u2212</p>\n<pre class=\"prettyprint notranslate\">\nstatic PyObject *<i>module_func</i>(PyObject *self, PyObject *args) {\n   /* Parse args and do something interesting here. */\n   Py_RETURN_NONE;\n}\n</pre>\n<p>The method table containing an entry for the new function would look like this \u2212</p>\n<pre class=\"prettyprint notranslate\">\nstatic PyMethodDef <i>module</i>_methods[] = {\n   { \"<i>func</i>\", (PyCFunction)<i>module_func</i>, METH_NOARGS, NULL },\n   { \"<i>func</i>\", <i>module_func</i>, METH_VARARGS, NULL },\n   { NULL, NULL, 0, NULL }\n};\n</pre>\n<p>You can use API <i>PyArg_ParseTuple</i> function to extract the arguments from the one PyObject pointer passed into your C function.</p>\n<p>The first argument to PyArg_ParseTuple is the args argument. This is the object you will be <i>parsing</i>. The second argument is a format string describing the arguments as you expect them to appear. Each argument is represented by one or more characters in the format string as follows.</p>\n<pre class=\"prettyprint notranslate\">\nstatic PyObject *<i>module_func</i>(PyObject *self, PyObject *args) {\n   int i;\n   double d;\n   char *s;\n\n   if (!PyArg_ParseTuple(args, \"ids\", &amp;i, &amp;d, &amp;s)) {\n      return NULL;\n   }\n   \n   /* Do something interesting here. */\n   Py_RETURN_NONE;\n}\n</pre>\n<p>Compiling the new version of your module and importing it enables you to invoke the new function with any number of arguments of any type \u2212</p>\n<pre class=\"prettyprint notranslate\">\nmodule.func(1, s=\"three\", d=2.0)\nmodule.func(i=1, d=2.0, s=\"three\")\nmodule.func(s=\"three\", d=2.0, i=1)\n</pre>\n<p>You can probably come up with even more variations.</p>\n<h2>The <i>PyArg_ParseTuple</i> Function</h2>\n<p>Here is the standard signature for <b>PyArg_ParseTuple</b> function \u2212</p>\n<pre class=\"result notranslate\">\nint PyArg_ParseTuple(PyObject* tuple,char* format,...)\n</pre>\n<p>This function returns 0 for errors, and a value not equal to 0 for success. tuple is the PyObject* that was the C function's second argument. Here <i>format</i> is a C string that describes mandatory and optional arguments.</p>\n<p>Here is a list of format codes for <b>PyArg_ParseTuple</b> function \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;width:10%\">Code</th>\n<th style=\"text-align:center;width:10%\">C type</th>\n<th style=\"text-align:center;\">Meaning</th>\n</tr>\n<tr>\n<td class=\"ts\">c</td>\n<td class=\"ts\">char</td>\n<td> A Python string of length 1 becomes a C char.</td></tr>\n<tr>\n<td class=\"ts\">d</td>\n<td class=\"ts\">double</td>\n<td>A Python float becomes a C double.</td></tr>\n<tr>\n<td class=\"ts\">f</td>\n<td class=\"ts\">float</td>\n<td>A Python float becomes a C float.</td></tr>\n<tr>\n<td class=\"ts\">i</td>\n<td class=\"ts\">int</td>\n<td>A Python int becomes a C int.</td></tr>\n<tr>\n<td class=\"ts\">l</td>\n<td class=\"ts\">long</td>\n<td>A Python int becomes a C long.</td></tr>\n<tr>\n<td class=\"ts\">L</td>\n<td class=\"ts\">long long</td>\n<td>A Python int becomes a C long long</td></tr>\n<tr>\n<td class=\"ts\">O</td>\n<td class=\"ts\">PyObject*</td>\n<td>Gets non-NULL borrowed reference to Python argument.</td></tr>\n<tr>\n<td class=\"ts\">s</td>\n<td class=\"ts\">char*</td>\n<td>Python string without embedded nulls to C char*.</td></tr>\n<tr>\n<td class=\"ts\">s#</td>\n<td class=\"ts\">char*+int</td>\n<td>Any Python string to C address and length.</td></tr>\n<tr>\n<td class=\"ts\">t#</td>\n<td class=\"ts\">char*+int</td>\n<td>Read-only single-segment buffer to C address and length.</td></tr>\n<tr>\n<td class=\"ts\">u</td>\n<td class=\"ts\">Py_UNICODE*</td>\n<td>Python Unicode without embedded nulls to C.</td></tr>\n<tr>\n<td class=\"ts\">u#</td>\n<td class=\"ts\">Py_UNICODE*+int</td>\n<td>Any Python Unicode C address and length.</td></tr>\n<tr>\n<td class=\"ts\">w#</td>\n<td class=\"ts\">char*+int</td>\n<td>Read/write single-segment buffer to C address and length.</td></tr>\n<tr>\n<td class=\"ts\">z</td>\n<td class=\"ts\">char*</td>\n<td>Like s, also accepts None (sets C char* to NULL).</td></tr>\n<tr>\n<td class=\"ts\">z#</td>\n<td class=\"ts\">char*+int</td>\n<td>Like s#, also accepts None (sets C char* to NULL).</td></tr>\n<tr>\n<td class=\"ts\">(...)</td>\n<td class=\"ts\">as per ...</td>\n<td>A Python sequence is treated as one argument per item.</td></tr>\n<tr>\n<td class=\"ts\">|</td>\n<td>\u00a0</td>\n<td>The following arguments are optional.</td></tr>\n<tr>\n<td class=\"ts\">:</td>\n<td>\u00a0</td>\n<td>Format end, followed by function name for error messages.</td></tr>\n<tr>\n<td class=\"ts\">;</td>\n<td>\u00a0</td>\n<td>Format end, followed by entire error message text.</td></tr>\n</table>\n<h2>Returning Values</h2>\n<p><i>Py_BuildValue</i> takes in a format string much like <i>PyArg_ParseTuple</i> does. Instead of passing in the addresses of the values you are building, you pass in the actual values. Here's an example showing how to implement an add function \u2212</p>\n<pre class=\"prettyprint notranslate\">\nstatic PyObject *foo_add(PyObject *self, PyObject *args) {\n   int a;\n   int b;\n\n   if (!PyArg_ParseTuple(args, \"ii\", &amp;a, &amp;b)) {\n      return NULL;\n   }\n   return Py_BuildValue(\"i\", a + b);\n}\n</pre>\n<p>This is what it would look like if implemented in Python \u2212</p>\n<pre class=\"result notranslate\">\ndef add(a, b):\n   return (a + b)\n</pre>\n<p>You can return two values from your function as follows, this would be cauptured using a list in Python.</p>\n<pre class=\"prettyprint notranslate\">\nstatic PyObject *foo_add_subtract(PyObject *self, PyObject *args) {\n   int a;\n   int b;\n\n   if (!PyArg_ParseTuple(args, \"ii\", &amp;a, &amp;b)) {\n      return NULL;\n   }\n   return Py_BuildValue(\"ii\", a + b, a - b);\n}\n</pre>\n<p>This is what it would look like if implemented in Python \u2212</p>\n<pre class=\"result notranslate\">\ndef add_subtract(a, b):\n   return (a + b, a - b)\n</pre>\n<h2>The <i>Py_BuildValue</i> Function</h2>\n<p>Here is the standard signature for <b>Py_BuildValue</b> function \u2212</p>\n<pre class=\"result notranslate\">\nPyObject* Py_BuildValue(char* format,...)\n</pre>\n<p>Here <i>format</i> is a C string that describes the Python object to build. The following arguments of <i>Py_BuildValue</i> are C values from which the result is built. The <i>PyObject*</i> result is a new reference.</p>\n<p>Following table lists the commonly used code strings, of which zero or more are joined into string format.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;width:10%\">Code</th>\n<th style=\"text-align:center;width:10%\">C type</th>\n<th style=\"text-align:center;\">Meaning</th>\n</tr>\n<tr>\n<td class=\"ts\">c</td>\n<td class=\"ts\">char</td>\n<td>A C char becomes a Python string of length 1.</td></tr>\n<tr>\n<td class=\"ts\">d</td>\n<td class=\"ts\">double</td>\n<td>A C double becomes a Python float.</td></tr>\n<tr>\n<td class=\"ts\">f</td>\n<td class=\"ts\">float</td>\n<td>A C float becomes a Python float.</td></tr>\n<tr>\n<td class=\"ts\">i</td>\n<td class=\"ts\">int</td>\n<td>A C int becomes a Python int.</td></tr>\n<tr>\n<td class=\"ts\">l</td>\n<td class=\"ts\">long</td>\n<td>A C long becomes a Python int.</td></tr>\n<tr>\n<td class=\"ts\">N</td>\n<td class=\"ts\">PyObject*</td>\n<td>Passes a Python object and steals a reference.</td></tr>\n<tr>\n<td class=\"ts\">O</td>\n<td class=\"ts\">PyObject*</td>\n<td>Passes a Python object and INCREFs it as normal.</td></tr>\n<tr>\n<td class=\"ts\">O&amp;</td>\n<td class=\"ts\">convert+void*</td>\n<td>Arbitrary conversion</td></tr>\n<tr>\n<td class=\"ts\">s</td>\n<td class=\"ts\">char*</td>\n<td>C 0-terminated char* to Python string, or NULL to None.</td></tr>\n<tr>\n<td class=\"ts\">s#</td>\n<td class=\"ts\">char*+int</td>\n<td>C char* and length to Python string, or NULL to None.</td></tr>\n<tr>\n<td class=\"ts\">u</td>\n<td class=\"ts\">Py_UNICODE*</td>\n<td>C-wide, null-terminated string to Python Unicode, or NULL to None.</td></tr>\n<tr>\n<td class=\"ts\">u#</td>\n<td class=\"ts\">Py_UNICODE*+int</td>\n<td>C-wide string and length to Python Unicode, or NULL to None.</td></tr>\n<tr>\n<td class=\"ts\">w#</td>\n<td class=\"ts\">char*+int</td>\n<td>Read/write single-segment buffer to C address and length.</td></tr>\n<tr>\n<td class=\"ts\">z</td>\n<td class=\"ts\">char*</td>\n<td>Like s, also accepts None (sets C char* to NULL).</td></tr>\n<tr>\n<td class=\"ts\">z#</td>\n<td class=\"ts\">char*+int</td>\n<td>Like s#, also accepts None (sets C char* to NULL).</td></tr>\n<tr>\n<td class=\"ts\">(...)</td>\n<td class=\"ts\">as per ...</td>\n<td>Builds Python tuple from C values.</td></tr>\n<tr>\n<td class=\"ts\">[...]</td>\n<td class=\"ts\">as per ...</td>\n<td>Builds Python list from C values.</td></tr>\n<tr>\n<td class=\"ts\">{...}</td>\n<td class=\"ts\">as per ...</td>\n<td>Builds Python dictionary from C values, alternating keys and values.</td></tr>\n</table>\n<p>Code {...} builds dictionaries from an even number of C values, alternately keys and values. For example, Py_BuildValue(\"{issi}\",23,\"zig\",\"zag\",42) returns a dictionary like Python's {23:'zig','zag':42}.</p>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/python/python_gui_programming.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/python/python_quick_guide.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>"}