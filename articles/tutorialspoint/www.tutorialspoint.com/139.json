{"content": "\n C++ Functions \n  \n Advertisements \n \n<!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//-->\n\n\n \n  \n \n Previous Page\n \n \nNext Page \u00a0\n \n  \n  \n A function is a group of statements that together perform a task. Every C++ program has at least one function, which is main(), and all the most trivial programs can define additional functions. \n You can divide up your code into separate functions. How you divide up your code among different functions is up to you, but logically the division usually is such that each function performs a specific task. \n A function declaration tells the compiler about a function's name, return type, and parameters. A function definition provides the actual body of the function. \n The C++ standard library provides numerous built-in functions that your program can call. For example, function strcat() to concatenate two strings, function memcpy() to copy one memory location to another location and many more functions. \n A function is known with various names like a method or a sub-routine or a procedure etc. \n Defining a Function \n The general form of a C++ function definition is as follows \u2212 \n \nreturn_type function_name( parameter list ) {\n   body of the function\n}\n \n A C++ function definition consists of a function header and a function body. Here are all the parts of a function \u2212 \n \nReturn Type \u2212 A function may return a value. The return_type is the data type of the value the function returns. Some functions perform the desired operations without returning a value. In this case, the return_type is the keyword void.\nFunction Name \u2212 This is the actual name of the function. The function name and the parameter list together constitute the function signature.\nParameters \u2212 A parameter is like a placeholder. When a function is invoked, you pass a value to the parameter. This value is referred to as actual parameter or argument. The parameter list refers to the type, order, and number of the parameters of a function. Parameters are optional; that is, a function may contain no parameters.\nFunction Body \u2212 The function body contains a collection of statements that define what the function does.\n \n Example \n Following is the source code for a function called max(). This function takes two parameters num1 and num2 and return the biggest of both \u2212 \n \n// function returning the max between two numbers\n \nint max(int num1, int num2) {\n   // local variable declaration\n   int result;\n \n   if (num1 > num2)\n      result = num1;\n   else\n      result = num2;\n \n   return result; \n}\n \n Function Declarations \n A function declaration tells the compiler about a function name and how to call the function. The actual body of the function can be defined separately. \n A function declaration has the following parts \u2212 \n \nreturn_type function_name( parameter list );\n \n For the above defined function max(), following is the function declaration \u2212 \n \nint max(int num1, int num2);\n \n Parameter names are not important in function declaration only their type is required, so following is also valid declaration \u2212 \n \nint max(int, int);\n \n Function declaration is required when you define a function in one source file and you call that function in another file. In such case, you should declare the function at the top of the file calling the function. \n Calling a Function \n While creating a C++ function, you give a definition of what the function has to do. To use a function, you will have to call or invoke that function. \n When a program calls a function, program control is transferred to the called function. A called function performs defined task and when it\u2019s return statement is executed or when its function-ending closing brace is reached, it returns program control back to the main program. \n To call a function, you simply need to pass the required parameters along with function name, and if function returns a value, then you can store returned value. For example \u2212 \n  Live Demo \n \n#include <iostream>\nusing namespace std;\n \n// function declaration\nint max(int num1, int num2);\n \nint main () {\n   // local variable declaration:\n   int a = 100;\n   int b = 200;\n   int ret;\n \n   // calling a function to get max value.\n   ret = max(a, b);\n   cout << \"Max value is : \" << ret << endl;\n \n   return 0;\n}\n \n// function returning the max between two numbers\nint max(int num1, int num2) {\n   // local variable declaration\n   int result;\n \n   if (num1 > num2)\n      result = num1;\n   else\n      result = num2;\n \n   return result; \n}\n \n I kept max() function along with main() function and compiled the source code. While running final executable, it would produce the following result \u2212 \n \nMax value is : 200\n \n Function Arguments \n If a function is to use arguments, it must declare variables that accept the values of the arguments. These variables are called the formal parameters of the function. \n The formal parameters behave like other local variables inside the function and are created upon entry into the function and destroyed upon exit. \n While calling a function, there are two ways that arguments can be passed to a function \u2212 \n \n\nSr.No\nCall Type & Description\n\n\n1\nCall by Value\nThis method copies the actual value of an argument into the formal parameter of the function. In this case, changes made to the parameter inside the function have no effect on the argument.\n\n\n2\nCall by Pointer\nThis method copies the address of an argument into the formal parameter. Inside the function, the address is used to access the actual argument used in the call. This means that changes made to the parameter affect the argument.\n\n\n3\nCall by Reference\nThis method copies the reference of an argument into the formal parameter. Inside the function, the reference is used to access the actual argument used in the call. This means that changes made to the parameter affect the argument.\n\n \n By default, C++ uses call by value to pass arguments. In general, this means that code within a function cannot alter the arguments used to call the function and above mentioned example while calling max() function used the same method. \n Default Values for Parameters \n When you define a function, you can specify a default value for each of the last parameters. This value will be used if the corresponding argument is left blank when calling to the function. \n This is done by using the assignment operator and assigning values for the arguments in the function definition. If a value for that parameter is not passed when the function is called, the default given value is used, but if a value is specified, this default value is ignored and the passed value is used instead. Consider the following example \u2212 \n  Live Demo \n \n#include <iostream>\nusing namespace std;\n \nint sum(int a, int b = 20) {\n   int result;\n   result = a + b;\n  \n   return (result);\n}\nint main () {\n   // local variable declaration:\n   int a = 100;\n   int b = 200;\n   int result;\n \n   // calling a function to add the values.\n   result = sum(a, b);\n   cout << \"Total value is :\" << result << endl;\n\n   // calling a function again as follows.\n   result = sum(a);\n   cout << \"Total value is :\" << result << endl;\n \n   return 0;\n}\n \n When the above code is compiled and executed, it produces the following result \u2212 \n \nTotal value is :300\nTotal value is :120\n \n  \n \n Previous Page\n \n \n Print\n \n \nNext Page \u00a0\n \n  \n  PRINTING ENDS HERE  \n \nAdvertisements\n<!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//-->\n\n\n \n", "title": "C++ Functions", "content_html": "<div class=\"col-md-7 middle-col\">\n<h1>C++ Functions</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/cplusplus/cpp_decision_making.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/cplusplus/cpp_numbers.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>A function is a group of statements that together perform a task. Every C++ program has at least one function, which is <b>main()</b>, and all the most trivial programs can define additional functions.</p>\n<p>You can divide up your code into separate functions. How you divide up your code among different functions is up to you, but logically the division usually is such that each function performs a specific task.</p>\n<p>A function <b>declaration</b> tells the compiler about a function's name, return type, and parameters. A function <b>definition</b> provides the actual body of the function.</p>\n<p>The C++ standard library provides numerous built-in functions that your program can call. For example, function <b>strcat()</b> to concatenate two strings, function <b>memcpy()</b> to copy one memory location to another location and many more functions.</p>\n<p>A function is known with various names like a method or a sub-routine or a procedure etc.</p>\n<h2>Defining a Function</h2>\n<p>The general form of a C++ function definition is as follows \u2212</p>\n<pre class=\"result notranslate\">\nreturn_type function_name( parameter list ) {\n   body of the function\n}\n</pre>\n<p>A C++ function definition consists of a function header and a function body. Here are all the parts of a function \u2212</p>\n<ul class=\"list\">\n<li><p><b>Return Type</b> \u2212 A function may return a value. The <b>return_type</b> is the data type of the value the function returns. Some functions perform the desired operations without returning a value. In this case, the return_type is the keyword <b>void</b>.</p></li>\n<li><p><b>Function Name</b> \u2212 This is the actual name of the function. The function name and the parameter list together constitute the function signature.</p></li>\n<li><p><b>Parameters</b> \u2212 A parameter is like a placeholder. When a function is invoked, you pass a value to the parameter. This value is referred to as actual parameter or argument. The parameter list refers to the type, order, and number of the parameters of a function. Parameters are optional; that is, a function may contain no parameters.</p></li>\n<li><p><b>Function Body</b> \u2212 The function body contains a collection of statements that define what the function does.</p></li>\n</ul>\n<h2>Example</h2>\n<p>Following is the source code for a function called <b>max()</b>. This function takes two parameters num1 and num2 and return the biggest of both \u2212</p>\n<pre class=\"result notranslate\">\n// function returning the max between two numbers\n \nint max(int num1, int num2) {\n   // local variable declaration\n   int result;\n \n   if (num1 &gt; num2)\n      result = num1;\n   else\n      result = num2;\n \n   return result; \n}\n</pre>\n<h2>Function Declarations</h2>\n<p>A function <b>declaration</b> tells the compiler about a function name and how to call the function. The actual body of the function can be defined separately.</p>\n<p>A function declaration has the following parts \u2212</p>\n<pre class=\"result notranslate\">\nreturn_type function_name( parameter list );\n</pre>\n<p>For the above defined function max(), following is the function declaration \u2212</p>\n<pre class=\"result notranslate\">\nint max(int num1, int num2);\n</pre>\n<p>Parameter names are not important in function declaration only their type is required, so following is also valid declaration \u2212</p>\n<pre class=\"result notranslate\">\nint max(int, int);\n</pre>\n<p>Function declaration is required when you define a function in one source file and you call that function in another file. In such case, you should declare the function at the top of the file calling the function.</p>\n<h2>Calling a Function</h2>\n<p>While creating a C++ function, you give a definition of what the function has to do. To use a function, you will have to call or invoke that function.</p>\n<p>When a program calls a function, program control is transferred to the called function. A called function performs defined task and when it\u2019s return statement is executed or when its function-ending closing brace is reached, it returns program control back to the main program.</p>\n<p>To call a function, you simply need to pass the required parameters along with function name, and if function returns a value, then you can store returned value. For example \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/XuXfLz\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n \n// function declaration\nint max(int num1, int num2);\n \nint main () {\n   // local variable declaration:\n   int a = 100;\n   int b = 200;\n   int ret;\n \n   // calling a function to get max value.\n   ret = max(a, b);\n   cout &lt;&lt; \"Max value is : \" &lt;&lt; ret &lt;&lt; endl;\n \n   return 0;\n}\n \n// function returning the max between two numbers\nint max(int num1, int num2) {\n   // local variable declaration\n   int result;\n \n   if (num1 &gt; num2)\n      result = num1;\n   else\n      result = num2;\n \n   return result; \n}\n</pre>\n<p>I kept max() function along with main() function and compiled the source code. While running final executable, it would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nMax value is : 200\n</pre>\n<h2>Function Arguments</h2>\n<p>If a function is to use arguments, it must declare variables that accept the values of the arguments. These variables are called the <b>formal parameters</b> of the function.</p>\n<p>The formal parameters behave like other local variables inside the function and are created upon entry into the function and destroyed upon exit.</p>\n<p>While calling a function, there are two ways that arguments can be passed to a function \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Call Type &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><a href=\"/cplusplus/cpp_function_call_by_value.htm\" title=\"C++ function call by value\">Call by Value</a>\n<p>This method copies the actual value of an argument into the formal parameter of the function. In this case, changes made to the parameter inside the function have no effect on the argument.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><a href=\"/cplusplus/cpp_function_call_by_pointer.htm\" title=\"C++ function call by pointer\">Call by Pointer</a>\n<p>This method copies the address of an argument into the formal parameter. Inside the function, the address is used to access the actual argument used in the call. This means that changes made to the parameter affect the argument.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><a href=\"/cplusplus/cpp_function_call_by_reference.htm\" title=\"C++ function call by reference\">Call by Reference</a>\n<p>This method copies the reference of an argument into the formal parameter. Inside the function, the reference is used to access the actual argument used in the call. This means that changes made to the parameter affect the argument.</p></td>\n</tr>\n</table>\n<p>By default, C++ uses <b>call by value</b> to pass arguments. In general, this means that code within a function cannot alter the arguments used to call the function and above mentioned example while calling max() function used the same method.</p>\n<h2>Default Values for Parameters</h2>\n<p>When you define a function, you can specify a default value for each of the last parameters. This value will be used if the corresponding argument is left blank when calling to the function.</p>\n<p>This is done by using the assignment operator and assigning values for the arguments in the function definition. If a value for that parameter is not passed when the function is called, the default given value is used, but if a value is specified, this default value is ignored and the passed value is used instead. Consider the following example \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/KoJLUN\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n \nint sum(int a, int b = 20) {\n   int result;\n   result = a + b;\n  \n   return (result);\n}\nint main () {\n   // local variable declaration:\n   int a = 100;\n   int b = 200;\n   int result;\n \n   // calling a function to add the values.\n   result = sum(a, b);\n   cout &lt;&lt; \"Total value is :\" &lt;&lt; result &lt;&lt; endl;\n\n   // calling a function again as follows.\n   result = sum(a);\n   cout &lt;&lt; \"Total value is :\" &lt;&lt; result &lt;&lt; endl;\n \n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nTotal value is :300\nTotal value is :120\n</pre>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/cplusplus/cpp_decision_making.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/cplusplus/cpp_numbers.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>", "html": "<!DOCTYPE html>\n\n<!--[if IE 8]><html class=\"ie ie8\"> <![endif]-->\n<!--[if IE 9]><html class=\"ie ie9\"> <![endif]-->\n<!--[if gt IE 9]><!--> <html> <!--<![endif]-->\n<head>\n<!-- Basic -->\n<meta charset=\"utf-8\"/>\n<title>C++ Functions</title>\n<meta content=\"C++ Functions - Learning C++ in simple and easy steps : A beginner's tutorial containing complete knowledge of C++ Syntax Object Oriented Language, Methods, Overriding, Inheritance, Polymorphism, Interfaces, STL, Iterators, Algorithms, Exception Handling, Overloading,Templates, Namespaces and Signal Handling.\" name=\"description\">\n<meta content=\"C++, Tutorials, Learning, Beginners, Basics, Object Oriented Language, Methods, Overriding, Inheritance, Polymorphism, Interfaces, STL, Iterators, Algorithms, Exception Handling, Overloading, Templates, Namespaces, Signal Handling.\" name=\"Keywords\"/>\n<base href=\"https://www.tutorialspoint.com/\"/>\n<link href=\"/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"/>\n<meta content=\"width=device-width,initial-scale=1.0,user-scalable=yes\" name=\"viewport\"/>\n<meta content=\"en_US\" property=\"og:locale\">\n<meta content=\"website\" property=\"og:type\"/>\n<meta content=\"471319149685276\" property=\"fb:app_id\"/>\n<meta content=\"www.tutorialspoint.com\" property=\"og:site_name\"/>\n<meta content=\"yes\" name=\"apple-mobile-web-app-capable\"/>\n<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"/>\n<meta content=\"tutorialspoint.com\" name=\"author\"/>\n<script src=\"https://www.tutorialspoint.com/theme/js/script-min-v4.js?v=2\" type=\"text/javascript\"></script>\n<link href=\"https://www.tutorialspoint.com/theme/css/style-min.css?v=3.1\" rel=\"stylesheet\"/>\n<script>\r\nfunction openNav() {\t\r\n  document.getElementById(\"mySidenav\").style.width = \"250px\";\r\n  document.getElementById(\"right_obs\").style.display = \"block\";\r\n}\r\nfunction closeNav() {\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\nfunction close_obs_sidenav(){\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\n</script>\n<!-- Head Libs -->\n<!--[if IE 8]>\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/theme/css/ie8.css\">\r\n<![endif]-->\n<style>\r\n#privacy-banner {\r\n    position: fixed;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    max-width: 100%;\r\n    padding: 1rem .5rem;\r\n    background: #fff;\r\n    z-index: 1030;\r\n    color: #000;\r\n    font-size: 14px;\r\n    margin: 0;\r\n    display: none;\r\n    border-top: 2px solid rgb(130, 130, 130);\r\n  }\r\n  #privacy-banner p {\r\n    margin: 0;\r\n    color: #000;\r\n    text-align: center;\r\n  }\r\n  #privacy-banner a {\r\n    text-decoration: none;\r\n    margin: 20px auto 0 auto;\r\n    display: block;\r\n    max-width: 150px;\r\n  }\r\n  #privacy-banner a:hover {\r\n    text-decoration: underline;\r\n  }\r\n  #banner-learn {\r\n    color: #000;\r\n  }\r\n  #banner-accept {\r\n    padding: 7px 15px;\r\n    color: #fff;\r\n    border-radius: 5px;\r\n    background:#737373 !important;\r\n  }\r\n  @media (min-width: 768px) {\r\n    #privacy-banner {\r\n      padding: 1.5rem .5rem;\r\n    }\r\n    #privacy-banner a {\r\n      display: inline-block;\r\n      margin: 0 10px;\r\n    }\r\n}\r\nselect{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }\r\n.btnsbmt{ background: #004481 !important;}\r\nul.nav-list.primary>li a.videolink{    background: none; margin: 0px; padding: 0px; border: 1px solid #d6d6d6;}\r\ndiv.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #004481 url(/images/pattern.png) repeat center center !important;}\r\n.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #004481 !important;}\r\n.submenu-item{ border-bottom: 2px solid #004481 !important; border-top: 2px solid #004481 !important }\r\n.ace_scroller{overflow: auto!important;}\r\na.demo{font-family: \"Open Sans\",Arial,sans-serif; background:#004481; color:#fff; font-size:13px; padding:3px 10px; border:1px solid #d6d6d6; position:absolute; right:5px; margin:-6px 17px 0px 0px;}\r\na.demo:hover{opacity:.8}\r\n</style>\n<script>\r\n$(document).ready(function() {\r\n  $('input[name=\"q\"]').keydown(function(event){\r\n    if(event.keyCode == 13) {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n  });\r\n});\r\n</script>\n</meta></meta></head>\n<body onload=\"prettyPrint()\">\n<div class=\"wrapLoader\">\n<div class=\"imgLoader\">\n<img alt=\"\" height=\"70\" src=\"/images/loading-cg.gif\" width=\"70\"/>\n</div>\n</div>\n<div class=\"display-none\" id=\"right_obs\" onclick=\"close_obs_sidenav()\"></div>\n<header>\n<div class=\"container\">\n<h1 class=\"logo\">\n<a href=\"index.htm\" title=\"tutorialspoint\">\n<img alt=\"tutorialspoint\" src=\"/cplusplus/images/logo.png\"/>\n</a>\n</h1>\n<ul class=\"tp-inline-block pull-right\" id=\"tp-head-icons\">\n<li>\n<div class=\"tp-second-nav tp-display-none tp-pointer\" onclick=\"openNav()\">\n<i class=\"fa fa-th-large fa-lg\"></i>\n</div>\n</li>\n</ul>\n<button class=\"btn btn-responsive-nav btn-inverse\" data-target=\".nav-main-collapse\" data-toggle=\"collapse\" id=\"pull\" style=\"top: 24px!important\"> <i class=\"icon icon-bars\"></i> </button>\n<nav>\n<ul class=\"nav nav-pills nav-top\">\n<li><a href=\"/about/about_careers.htm\" style=\"background: #fffb09; font-weight: bold;\"><i class=\"icon icon-suitcase\"></i> Jobs</a></li>\n<li> <a href=\"/programming_examples/\" target=\"_blank\"><i class=\"fa fa-cubes\"></i> \u00a0Examples</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/whiteboard.htm\"><img alt=\"Whiteboard\" src=\"theme/css/icons/image-editor.png\" title=\"Whiteboard\"/> \u00a0Whiteboard</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/netmeeting.php\"><i class=\"fa-camera\"></i> \u00a0Net Meeting</a> </li>\n<li> <a href=\"/online_dev_tools.htm\"> <i class=\"dev-tools-menu\" style=\"opacity:.5\"></i> Tools </a> </li>\n<li> <a href=\"/articles/index.php\"><i class=\"icon icon-file-text-o\"></i> \u00a0Articles</a> </li>\n<li class=\"top-icons\">\n<ul class=\"social-icons\">\n<li class=\"facebook\"><a data-placement=\"bottom\" href=\"https://www.facebook.com/tutorialspointindia\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Facebook\">Facebook</a></li>\n<li class=\"googleplus\"><a data-placement=\"bottom\" href=\"https://plus.google.com/u/0/116678774017490391259/posts\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Google+\">Google+</a></li>\n<li class=\"twitter\"><a data-placement=\"bottom\" href=\"https://www.twitter.com/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Twitter\">Twitter</a></li>\n<li class=\"linkedin\"><a data-placement=\"bottom\" href=\"https://www.linkedin.com/company/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Linkedin\">Linkedin</a></li>\n<li class=\"youtube\"><a data-placement=\"bottom\" href=\"https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint YouTube\">YouTube</a></li>\n</ul>\n</li>\n</ul>\n</nav>\n</div>\n<div class=\"sidenav\" id=\"mySidenav\">\n<div class=\"navbar nav-main\">\n<div class=\"container\">\n<nav class=\"nav-main mega-menu\">\n<ul class=\"nav nav-pills nav-main\" id=\"mainMenu\">\n<li class=\"dropdown no-sub-menu\"> <a class=\"dropdown\" href=\"index.htm\"><i class=\"icon icon-home\"></i> Home</a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"/questions/index.php\"><i class=\"fa fa-send\"></i> Q/A </a> </li>\n<li class=\"dropdown\"><a class=\"dropdown\" href=\"tutorialslibrary.htm\"><span class=\"tut-lib\"> Library </span></a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"videotutorials/index.htm\"><i class=\"fa-toggle-right\"></i> Videos </a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"tutor_connect/index.php\"><i class=\"fa-user\"> </i> Tutors</a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"codingground.htm\"><i class=\"fa-code\"></i> Coding Ground </a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"https://store.tutorialspoint.com/\"><i class=\"fa-usd\"></i> Store </a> </li>\n<li class=\"dropdown no-sub-menu\">\n<div class=\"searchform-popup\">\n<input autocomplete=\"off\" class=\"header-search-box\" id=\"search-string\" name=\"q\" onblur=\"if (this.value == '') {this.value = 'Search your favorite tutorials...';}\" onfocus=\"if (this.value == 'Search your favorite tutorials...') {this.value = '';}\" placeholder=\"Search your favorite tutorials...\" type=\"text\"/>\n<div class=\"magnifying-glass\"><i class=\"icon-search\"></i> Search </div>\n</div>\n</li>\n</ul>\n</nav>\n</div>\n</div>\n</div>\n</header></body></html>\n\n<div style=\"clear:both;\"></div>\n<div class=\"main\" role=\"main\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-2\">\n<aside class=\"sidebar\">\n<style>\r\n.ts {\r\n   text-align:center !important;\r\n   vertical-align:middle !important;\r\n}\r\n</style>\n<div class=\"mini-logo\">\n<img alt=\"C++ Tutorial\" src=\"/cplusplus/images/cpp-mini-logo.jpg\">\n</img></div>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">C++ Basics</li>\n<li><a href=\"/cplusplus/index.htm\">C++ Home</a></li>\n<li><a href=\"/cplusplus/cpp_overview.htm\">C++ Overview</a></li>\n<li><a href=\"/cplusplus/cpp_environment_setup.htm\">C++ Environment Setup</a></li>\n<li><a href=\"/cplusplus/cpp_basic_syntax.htm\">C++ Basic Syntax</a></li>\n<li><a href=\"/cplusplus/cpp_comments.htm\">C++ Comments</a></li>\n<li><a href=\"/cplusplus/cpp_data_types.htm\">C++ Data Types</a></li>\n<li><a href=\"/cplusplus/cpp_variable_types.htm\">C++ Variable Types</a></li>\n<li><a href=\"/cplusplus/cpp_variable_scope.htm\">C++ Variable Scope</a></li>\n<li><a href=\"/cplusplus/cpp_constants_literals.htm\">C++ Constants/Literals</a></li>\n<li><a href=\"/cplusplus/cpp_modifier_types.htm\">C++ Modifier Types</a></li>\n<li><a href=\"/cplusplus/cpp_storage_classes.htm\">C++ Storage Classes</a></li>\n<li><a href=\"/cplusplus/cpp_operators.htm\">C++ Operators</a></li>\n<li><a href=\"/cplusplus/cpp_loop_types.htm\">C++ Loop Types</a></li>\n<li><a href=\"/cplusplus/cpp_decision_making.htm\">C++ Decision Making</a></li>\n<li><a href=\"/cplusplus/cpp_functions.htm\">C++ Functions</a></li>\n<li><a href=\"/cplusplus/cpp_numbers.htm\">C++ Numbers</a></li>\n<li><a href=\"/cplusplus/cpp_arrays.htm\">C++ Arrays</a></li>\n<li><a href=\"/cplusplus/cpp_strings.htm\">C++ Strings</a></li>\n<li><a href=\"/cplusplus/cpp_pointers.htm\">C++ Pointers</a></li>\n<li><a href=\"/cplusplus/cpp_references.htm\">C++ References</a></li>\n<li><a href=\"/cplusplus/cpp_date_time.htm\">C++ Date &amp; Time</a></li>\n<li><a href=\"/cplusplus/cpp_basic_input_output.htm\">C++ Basic Input/Output</a></li>\n<li><a href=\"/cplusplus/cpp_data_structures.htm\">C++ Data Structures</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">C++ Object Oriented</li>\n<li><a href=\"/cplusplus/cpp_classes_objects.htm\">C++ Classes &amp; Objects</a></li>\n<li><a href=\"/cplusplus/cpp_inheritance.htm\">C++ Inheritance</a></li>\n<li><a href=\"/cplusplus/cpp_overloading.htm\">C++ Overloading</a></li>\n<li><a href=\"/cplusplus/cpp_polymorphism.htm\">C++ Polymorphism</a></li>\n<li><a href=\"/cplusplus/cpp_data_abstraction.htm\">C++ Abstraction</a></li>\n<li><a href=\"/cplusplus/cpp_data_encapsulation.htm\">C++ Encapsulation</a></li>\n<li><a href=\"/cplusplus/cpp_interfaces.htm\">C++ Interfaces</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">C++ Advanced</li>\n<li><a href=\"/cplusplus/cpp_files_streams.htm\">C++ Files and Streams</a></li>\n<li><a href=\"/cplusplus/cpp_exceptions_handling.htm\">C++ Exception Handling</a></li>\n<li><a href=\"/cplusplus/cpp_dynamic_memory.htm\">C++ Dynamic Memory</a></li>\n<li><a href=\"/cplusplus/cpp_namespaces.htm\">C++ Namespaces</a></li>\n<li><a href=\"/cplusplus/cpp_templates.htm\">C++ Templates</a></li>\n<li><a href=\"/cplusplus/cpp_preprocessor.htm\">C++ Preprocessor</a></li>\n<li><a href=\"/cplusplus/cpp_signal_handling.htm\">C++ Signal Handling</a></li>\n<li><a href=\"/cplusplus/cpp_multithreading.htm\">C++ Multithreading</a></li>\n<li><a href=\"/cplusplus/cpp_web_programming.htm\">C++ Web Programming</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">C++ Useful Resources</li>\n<li><a href=\"/cplusplus/cpp_questions_answers.htm\">C++ Questions and Answers</a></li>\n<li><a href=\"/cplusplus/cpp_quick_guide.htm\">C++ Quick Guide</a></li>\n<li><a href=\"/cplusplus/cpp_object_oriented.htm\">C++ Object Oriented</a></li>\n<li><a href=\"/cplusplus/cpp_stl_tutorial.htm\">C++ STL Tutorial</a></li>\n<li><a href=\"/cplusplus/cpp_standard_library.htm\">C++ Standard Library</a></li>\n<li><a href=\"/cplusplus/cpp_useful_resources.htm\">C++ Useful Resources</a></li>\n<li><a href=\"/cplusplus/cpp_discussion.htm\">C++ Discussion</a></li>\n</ul>\n<ul class=\"nav nav-list primary push-bottom left-menu special\">\n<li class=\"sreading\">Selected Reading</li>\n<li><a href=\"/upsc_ias_exams.htm\" target=\"_top\">UPSC IAS Exams Notes</a></li>\n<li><a href=\"/developers_best_practices/index.htm\" target=\"_top\">Developer's Best Practices</a></li>\n<li><a href=\"/questions_and_answers.htm\" target=\"_top\">Questions and Answers</a></li>\n<li><a href=\"/effective_resume_writing.htm\" target=\"_top\">Effective Resume Writing</a></li>\n<li><a href=\"/hr_interview_questions/index.htm\" target=\"_top\">HR Interview Questions</a></li>\n<li><a href=\"/computer_glossary.htm\" target=\"_top\">Computer Glossary</a></li>\n<li><a href=\"/computer_whoiswho.htm\" target=\"_top\">Who is Who</a></li>\n</ul>\n</aside>\n</div>\n<!-- PRINTING STARTS HERE -->\n<div class=\"row\">\n<div class=\"content\">\n<div class=\"col-md-7 middle-col\">\n<h1>C++ Functions</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/cplusplus/cpp_decision_making.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/cplusplus/cpp_numbers.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>A function is a group of statements that together perform a task. Every C++ program has at least one function, which is <b>main()</b>, and all the most trivial programs can define additional functions.</p>\n<p>You can divide up your code into separate functions. How you divide up your code among different functions is up to you, but logically the division usually is such that each function performs a specific task.</p>\n<p>A function <b>declaration</b> tells the compiler about a function's name, return type, and parameters. A function <b>definition</b> provides the actual body of the function.</p>\n<p>The C++ standard library provides numerous built-in functions that your program can call. For example, function <b>strcat()</b> to concatenate two strings, function <b>memcpy()</b> to copy one memory location to another location and many more functions.</p>\n<p>A function is known with various names like a method or a sub-routine or a procedure etc.</p>\n<h2>Defining a Function</h2>\n<p>The general form of a C++ function definition is as follows \u2212</p>\n<pre class=\"result notranslate\">\nreturn_type function_name( parameter list ) {\n   body of the function\n}\n</pre>\n<p>A C++ function definition consists of a function header and a function body. Here are all the parts of a function \u2212</p>\n<ul class=\"list\">\n<li><p><b>Return Type</b> \u2212 A function may return a value. The <b>return_type</b> is the data type of the value the function returns. Some functions perform the desired operations without returning a value. In this case, the return_type is the keyword <b>void</b>.</p></li>\n<li><p><b>Function Name</b> \u2212 This is the actual name of the function. The function name and the parameter list together constitute the function signature.</p></li>\n<li><p><b>Parameters</b> \u2212 A parameter is like a placeholder. When a function is invoked, you pass a value to the parameter. This value is referred to as actual parameter or argument. The parameter list refers to the type, order, and number of the parameters of a function. Parameters are optional; that is, a function may contain no parameters.</p></li>\n<li><p><b>Function Body</b> \u2212 The function body contains a collection of statements that define what the function does.</p></li>\n</ul>\n<h2>Example</h2>\n<p>Following is the source code for a function called <b>max()</b>. This function takes two parameters num1 and num2 and return the biggest of both \u2212</p>\n<pre class=\"result notranslate\">\n// function returning the max between two numbers\n \nint max(int num1, int num2) {\n   // local variable declaration\n   int result;\n \n   if (num1 &gt; num2)\n      result = num1;\n   else\n      result = num2;\n \n   return result; \n}\n</pre>\n<h2>Function Declarations</h2>\n<p>A function <b>declaration</b> tells the compiler about a function name and how to call the function. The actual body of the function can be defined separately.</p>\n<p>A function declaration has the following parts \u2212</p>\n<pre class=\"result notranslate\">\nreturn_type function_name( parameter list );\n</pre>\n<p>For the above defined function max(), following is the function declaration \u2212</p>\n<pre class=\"result notranslate\">\nint max(int num1, int num2);\n</pre>\n<p>Parameter names are not important in function declaration only their type is required, so following is also valid declaration \u2212</p>\n<pre class=\"result notranslate\">\nint max(int, int);\n</pre>\n<p>Function declaration is required when you define a function in one source file and you call that function in another file. In such case, you should declare the function at the top of the file calling the function.</p>\n<h2>Calling a Function</h2>\n<p>While creating a C++ function, you give a definition of what the function has to do. To use a function, you will have to call or invoke that function.</p>\n<p>When a program calls a function, program control is transferred to the called function. A called function performs defined task and when it\u2019s return statement is executed or when its function-ending closing brace is reached, it returns program control back to the main program.</p>\n<p>To call a function, you simply need to pass the required parameters along with function name, and if function returns a value, then you can store returned value. For example \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/XuXfLz\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n \n// function declaration\nint max(int num1, int num2);\n \nint main () {\n   // local variable declaration:\n   int a = 100;\n   int b = 200;\n   int ret;\n \n   // calling a function to get max value.\n   ret = max(a, b);\n   cout &lt;&lt; \"Max value is : \" &lt;&lt; ret &lt;&lt; endl;\n \n   return 0;\n}\n \n// function returning the max between two numbers\nint max(int num1, int num2) {\n   // local variable declaration\n   int result;\n \n   if (num1 &gt; num2)\n      result = num1;\n   else\n      result = num2;\n \n   return result; \n}\n</pre>\n<p>I kept max() function along with main() function and compiled the source code. While running final executable, it would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nMax value is : 200\n</pre>\n<h2>Function Arguments</h2>\n<p>If a function is to use arguments, it must declare variables that accept the values of the arguments. These variables are called the <b>formal parameters</b> of the function.</p>\n<p>The formal parameters behave like other local variables inside the function and are created upon entry into the function and destroyed upon exit.</p>\n<p>While calling a function, there are two ways that arguments can be passed to a function \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Call Type &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><a href=\"/cplusplus/cpp_function_call_by_value.htm\" title=\"C++ function call by value\">Call by Value</a>\n<p>This method copies the actual value of an argument into the formal parameter of the function. In this case, changes made to the parameter inside the function have no effect on the argument.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><a href=\"/cplusplus/cpp_function_call_by_pointer.htm\" title=\"C++ function call by pointer\">Call by Pointer</a>\n<p>This method copies the address of an argument into the formal parameter. Inside the function, the address is used to access the actual argument used in the call. This means that changes made to the parameter affect the argument.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><a href=\"/cplusplus/cpp_function_call_by_reference.htm\" title=\"C++ function call by reference\">Call by Reference</a>\n<p>This method copies the reference of an argument into the formal parameter. Inside the function, the reference is used to access the actual argument used in the call. This means that changes made to the parameter affect the argument.</p></td>\n</tr>\n</table>\n<p>By default, C++ uses <b>call by value</b> to pass arguments. In general, this means that code within a function cannot alter the arguments used to call the function and above mentioned example while calling max() function used the same method.</p>\n<h2>Default Values for Parameters</h2>\n<p>When you define a function, you can specify a default value for each of the last parameters. This value will be used if the corresponding argument is left blank when calling to the function.</p>\n<p>This is done by using the assignment operator and assigning values for the arguments in the function definition. If a value for that parameter is not passed when the function is called, the default given value is used, but if a value is specified, this default value is ignored and the passed value is used instead. Consider the following example \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/KoJLUN\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n \nint sum(int a, int b = 20) {\n   int result;\n   result = a + b;\n  \n   return (result);\n}\nint main () {\n   // local variable declaration:\n   int a = 100;\n   int b = 200;\n   int result;\n \n   // calling a function to add the values.\n   result = sum(a, b);\n   cout &lt;&lt; \"Total value is :\" &lt;&lt; result &lt;&lt; endl;\n\n   // calling a function again as follows.\n   result = sum(a);\n   cout &lt;&lt; \"Total value is :\" &lt;&lt; result &lt;&lt; endl;\n \n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nTotal value is :300\nTotal value is :120\n</pre>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/cplusplus/cpp_decision_making.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/cplusplus/cpp_numbers.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n<div class=\"row\">\n<div class=\"col-md-3\" id=\"rightbar\">\n<div class=\"simple-ad\">\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.facebook.com/sharer.php?u=' + 'https://www.tutorialspoint.com/cplusplus/cpp_functions.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/facebookIcon.jpg\">\n</img></a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://twitter.com/share?url=' + 'https://www.tutorialspoint.com/cplusplus/cpp_functions.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/twitterIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'https://www.tutorialspoint.com/cplusplus/cpp_functions.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/linkedinIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=https://www.tutorialspoint.com/cplusplus/cpp_functions.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/googlePlusIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.stumbleupon.com/submit?url=https://www.tutorialspoint.com/cplusplus/cpp_functions.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/StumbleUponIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://reddit.com/submit?url=https://www.tutorialspoint.com/cplusplus/cpp_functions.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/reddit.jpg\"/>\n</a>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\ngoogle_ad_format = \"300x250_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 600;\ngoogle_ad_format = \"300x600_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"ca-pub-2537027957187252\";\n/* Right Side Ad */\ngoogle_ad_slot = \"right_side_ad\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\n//-->\n</script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"footer-copyright\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-1\">\n<a class=\"logo\" href=\"index.htm\"> <img alt=\"Tutorials Point\" class=\"img-responsive\" src=\"/scripts/img/logo-footer.png\"/> </a>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<nav id=\"sub-menu\">\n<ul>\n<li><a href=\"/about/about_privacy.htm\">Privacy Policy</a></li>\n<li><a href=\"/about/about_cookies.htm\">Cookies Policy</a></li>\n<li><a href=\"/about/contact_us.htm\">Contact</a></li>\n</ul>\n</nav>\n</div>\n<div class=\"col-md-3 col-sm-12 col-xs-12\">\n<p>\u00a9 Copyright 2019. All Rights Reserved.</p>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<div class=\"news-group\">\n<input autocomplete=\"off\" class=\"form-control-foot search\" id=\"textemail\" name=\"textemail\" onblur=\"if (this.value == '') {this.value = 'Enter email for newsletter...';}\" onfocus=\"if (this.value == 'Enter email for newsletter...') {this.value = '';}\" placeholder=\"Enter email for newsletter\" type=\"text\"/>\n<span class=\"input-group-btn\"> <button class=\"btn btn-default btn-footer\" id=\"btnemail\" onclick=\"javascript:void(0);\" type=\"submit\">go</button> </span>\n<div id=\"newsresponse\"></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"privacy-banner\">\n<div>\n<p>\n      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.\n      <a href=\"javascript:void(0)\" id=\"banner-accept\">Accept</a>\n<a href=\"/about/about_cookies.htm\" id=\"banner-learn\" target=\"_blank\">Learn more</a>\n</p>\n</div>\n</div>\n<script>\n// Banner Trigger if Not Closed\nif (!localStorage.bannerClosed) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n} else {\n  document.getElementById('privacy-banner').style.display = \"none\";\n}\ndocument.getElementById('banner-accept').addEventListener('click', function() {\n  document.getElementById('privacy-banner').style.display = \"none\";\n  localStorage.bannerClosed = 'true';\n});\nif (navigator.userAgent.match(/Opera|OPR\\//)) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n}\n</script>\n<!-- Libs -->\n<script src=\"/theme/js/custom-min.js?v=7\"></script>\n<script src=\"https://www.google-analytics.com/urchin.js\">\n</script>\n<script>\n_uacct = \"UA-232293-6\";\nurchinTracker();\n$('.pg-icon').click(function(){\n   $('.wrapLoader').show();\n});\n</script>\n\n\n\n", "url": "https://www.tutorialspoint.com/cplusplus/cpp_functions.htm", "title_html": "<h1>C++ Functions</h1>"}