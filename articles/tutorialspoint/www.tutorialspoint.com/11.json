{"content_html": "<p>Queue is an abstract data structure, somewhat similar to Stacks. Unlike stacks, a queue is open at both its ends. One end is always used to insert data (enqueue) and the other is used to remove data (dequeue). Queue follows First-In-First-Out methodology, i.e., the data item stored first will be accessed first.</p> ", "url": "https://www.tutorialspoint.com/data_structures_algorithms/dsa_queue.htm", "html": "<!DOCTYPE html>\n\n<!--[if IE 8]><html class=\"ie ie8\"> <![endif]-->\n<!--[if IE 9]><html class=\"ie ie9\"> <![endif]-->\n<!--[if gt IE 9]><!--> <html> <!--<![endif]-->\n<head>\n<meta charset=\"utf-8\"/>\n<title>Data Structures and Algorithms Queue</title>\n<meta content=\"Data Structures and Algorithms Queue - Learn Data Structures and Algorithm using c, C++ and Java in simple and easy steps starting from basic to advanced concepts with examples including Overview, Environment Setup, Algorithm, Asymptotic Analysis, Greedy Algorithms, Divide and Conquer, Dynamic Programming, Data Structures, Array, Linked List, Doubly Linked List, Circular List, Stack, Parsing Expression, Queue, Priority queue, Linear, Binary, Interpolation Search, Tree, Tree Traversal, Binary Search Tree, B+, AVL, Spanning, Tower of Hanoi, Hash Table, Heap, Graph, Depth, Breadth First Traversal, Search techniques, Sorting techniques, Sorting Algorithm, Bubble, Merge Sort Algorithm, Insertion, Selection, Shell, Quick Sort, Recursion, Fibonacci Series.\" name=\"Description\">\n<meta content=\"Overview, Environment Setup, Algorithm, Asymptotic Analysis, Greedy Algorithms, Divide and Conquer, Dynamic Programming, Data Structures, Array, Linked List, Doubly Linked List, Circular List, Stack, Parsing Expression, Queue, Priority queue, Linear, Binary, Interpolation Search, Tree, Tree Traversal, Binary Search Tree, B+, AVL, Spanning, Tower of Hanoi, Hash Table, Heap, Graph, Depth, Breadth First Traversal, Search techniques, Sorting techniques, Sorting Algorithm, Bubble, Merge Sort Algorithm, Insertion, Selection, Shell, Quick Sort, Recursion, Fibonacci Series.\" name=\"Keywords\"/>\n<base href=\"https://www.tutorialspoint.com/\"/>\n<link href=\"/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"/>\n<meta content=\"width=device-width,initial-scale=1.0,user-scalable=yes\" name=\"viewport\"/>\n<meta content=\"en_US\" property=\"og:locale\">\n<meta content=\"website\" property=\"og:type\"/>\n<meta content=\"471319149685276\" property=\"fb:app_id\"/>\n<meta content=\"www.tutorialspoint.com\" property=\"og:site_name\"/>\n<meta content=\"yes\" name=\"apple-mobile-web-app-capable\"/>\n<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"/>\n<meta content=\"tutorialspoint.com\" name=\"author\"/>\n<script src=\"https://www.tutorialspoint.com/theme/js/script-min-v4.js?v=2\" type=\"text/javascript\"></script>\n<link href=\"https://www.tutorialspoint.com/theme/css/style-min.css?v=3.1\" rel=\"stylesheet\"/>\n<script>\r\nfunction openNav() {\t\r\n  document.getElementById(\"mySidenav\").style.width = \"250px\";\r\n  document.getElementById(\"right_obs\").style.display = \"block\";\r\n}\r\nfunction closeNav() {\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\nfunction close_obs_sidenav(){\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\n</script>\n<!-- Head Libs -->\n<!--[if IE 8]>\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/theme/css/ie8.css\">\r\n<![endif]-->\n<style>\r\n#privacy-banner {\r\n    position: fixed;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    max-width: 100%;\r\n    padding: 1rem .5rem;\r\n    background: #fff;\r\n    z-index: 1030;\r\n    color: #000;\r\n    font-size: 14px;\r\n    margin: 0;\r\n    display: none;\r\n    border-top: 2px solid rgb(130, 130, 130);\r\n  }\r\n  #privacy-banner p {\r\n    margin: 0;\r\n    color: #000;\r\n    text-align: center;\r\n  }\r\n  #privacy-banner a {\r\n    text-decoration: none;\r\n    margin: 20px auto 0 auto;\r\n    display: block;\r\n    max-width: 150px;\r\n  }\r\n  #privacy-banner a:hover {\r\n    text-decoration: underline;\r\n  }\r\n  #banner-learn {\r\n    color: #000;\r\n  }\r\n  #banner-accept {\r\n    padding: 7px 15px;\r\n    color: #fff;\r\n    border-radius: 5px;\r\n    background:#737373 !important;\r\n  }\r\n  @media (min-width: 768px) {\r\n    #privacy-banner {\r\n      padding: 1.5rem .5rem;\r\n    }\r\n    #privacy-banner a {\r\n      display: inline-block;\r\n      margin: 0 10px;\r\n    }\r\n}\r\nselect{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }\r\n.btnsbmt{ background: #cd3300 !important;}\r\nul.nav-list.primary>li a.videolink{    background: none; margin: 0px; padding: 0px; border: 1px solid #d6d6d6;}\r\ndiv.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #cd3300 url(/images/pattern.png) repeat center center !important;}\r\n.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #cd3300 !important;}\r\n.submenu-item{ border-bottom: 2px solid #cd3300 !important; border-top: 2px solid #cd3300 !important }\r\n.ace_scroller{overflow: auto!important;}\r\na.demo{font-family: \"Open Sans\",Arial,sans-serif; background:#cd3300; color:#fff; font-size:13px; padding:3px 10px; border:1px solid #d6d6d6; position:absolute; right:5px; margin:-6px 17px 0px 0px;}\r\na.demo:hover{opacity:.8}\r\n</style>\n<script>\r\n$(document).ready(function() {\r\n  $('input[name=\"q\"]').keydown(function(event){\r\n    if(event.keyCode == 13) {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n  });\r\n});\r\n</script>\n</meta></meta></head>\n<body onload=\"prettyPrint()\">\n<div class=\"wrapLoader\">\n<div class=\"imgLoader\">\n<img alt=\"\" height=\"70\" src=\"/images/loading-cg.gif\" width=\"70\"/>\n</div>\n</div>\n<div class=\"display-none\" id=\"right_obs\" onclick=\"close_obs_sidenav()\"></div>\n<header>\n<div class=\"container\">\n<h1 class=\"logo\">\n<a href=\"index.htm\" title=\"tutorialspoint\">\n<img alt=\"tutorialspoint\" src=\"/data_structures_algorithms/images/logo.png\"/>\n</a>\n</h1>\n<ul class=\"tp-inline-block pull-right\" id=\"tp-head-icons\">\n<li>\n<div class=\"tp-second-nav tp-display-none tp-pointer\" onclick=\"openNav()\">\n<i class=\"fa fa-th-large fa-lg\"></i>\n</div>\n</li>\n</ul>\n<button class=\"btn btn-responsive-nav btn-inverse\" data-target=\".nav-main-collapse\" data-toggle=\"collapse\" id=\"pull\" style=\"top: 24px!important\"> <i class=\"icon icon-bars\"></i> </button>\n<nav>\n<ul class=\"nav nav-pills nav-top\">\n<li><a href=\"/about/about_careers.htm\" style=\"background: #fffb09; font-weight: bold;\"><i class=\"icon icon-suitcase\"></i> Jobs</a></li>\n<li> <a href=\"/programming_examples/\" target=\"_blank\"><i class=\"fa fa-cubes\"></i> \u00a0Examples</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/whiteboard.htm\"><img alt=\"Whiteboard\" src=\"theme/css/icons/image-editor.png\" title=\"Whiteboard\"/> \u00a0Whiteboard</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/netmeeting.php\"><i class=\"fa-camera\"></i> \u00a0Net Meeting</a> </li>\n<li> <a href=\"/online_dev_tools.htm\"> <i class=\"dev-tools-menu\" style=\"opacity:.5\"></i> Tools </a> </li>\n<li> <a href=\"/articles/index.php\"><i class=\"icon icon-file-text-o\"></i> \u00a0Articles</a> </li>\n<li class=\"top-icons\">\n<ul class=\"social-icons\">\n<li class=\"facebook\"><a data-placement=\"bottom\" href=\"https://www.facebook.com/tutorialspointindia\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Facebook\">Facebook</a></li>\n<li class=\"googleplus\"><a data-placement=\"bottom\" href=\"https://plus.google.com/u/0/116678774017490391259/posts\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Google+\">Google+</a></li>\n<li class=\"twitter\"><a data-placement=\"bottom\" href=\"https://www.twitter.com/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Twitter\">Twitter</a></li>\n<li class=\"linkedin\"><a data-placement=\"bottom\" href=\"https://www.linkedin.com/company/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Linkedin\">Linkedin</a></li>\n<li class=\"youtube\"><a data-placement=\"bottom\" href=\"https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint YouTube\">YouTube</a></li>\n</ul>\n</li>\n</ul>\n</nav>\n</div>\n<div class=\"sidenav\" id=\"mySidenav\">\n<div class=\"navbar nav-main\">\n<div class=\"container\">\n<nav class=\"nav-main mega-menu\">\n<ul class=\"nav nav-pills nav-main\" id=\"mainMenu\">\n<li class=\"dropdown no-sub-menu\"> <a class=\"dropdown\" href=\"index.htm\"><i class=\"icon icon-home\"></i> Home</a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"/questions/index.php\"><i class=\"fa fa-send\"></i> Q/A </a> </li>\n<li class=\"dropdown\"><a class=\"dropdown\" href=\"tutorialslibrary.htm\"><span class=\"tut-lib\"> Library </span></a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"videotutorials/index.htm\"><i class=\"fa-toggle-right\"></i> Videos </a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"tutor_connect/index.php\"><i class=\"fa-user\"> </i> Tutors</a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"codingground.htm\"><i class=\"fa-code\"></i> Coding Ground </a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"https://store.tutorialspoint.com/\"><i class=\"fa-usd\"></i> Store </a> </li>\n<li class=\"dropdown no-sub-menu\">\n<div class=\"searchform-popup\">\n<input autocomplete=\"off\" class=\"header-search-box\" id=\"search-string\" name=\"q\" onblur=\"if (this.value == '') {this.value = 'Search your favorite tutorials...';}\" onfocus=\"if (this.value == 'Search your favorite tutorials...') {this.value = '';}\" placeholder=\"Search your favorite tutorials...\" type=\"text\"/>\n<div class=\"magnifying-glass\"><i class=\"icon-search\"></i> Search </div>\n</div>\n</li>\n</ul>\n</nav>\n</div>\n</div>\n</div>\n</header></body></html>\n\n<div style=\"clear:both;\"></div>\n<div class=\"main\" role=\"main\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-2\">\n<aside class=\"sidebar\">\n<style>\r\n.ts {\r\n   text-align:center !important;\r\n   vertical-align:middle !important;\r\n}\r\n</style>\n<div class=\"mini-logo\">\n<img alt=\"Data Structures &amp; Algorithms Tutorial\" src=\"/data_structures_algorithms/images/data-structure-mini-logo.jpg\">\n</img></div>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Data Structures &amp; Algorithms</li>\n<li><a href=\"/data_structures_algorithms/index.htm\">DSA - Home</a></li>\n<li><a href=\"/data_structures_algorithms/data_structure_overview.htm\">DSA - Overview</a></li>\n<li><a href=\"/data_structures_algorithms/data_structure_environment.htm\">DSA - Environment Setup</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Algorithm</li>\n<li><a href=\"/data_structures_algorithms/algorithms_basics.htm\">DSA - Algorithms Basics</a></li>\n<li><a href=\"/data_structures_algorithms/asymptotic_analysis.htm\">DSA - Asymptotic Analysis</a></li>\n<li><a href=\"/data_structures_algorithms/greedy_algorithms.htm\">DSA - Greedy Algorithms</a></li>\n<li><a href=\"/data_structures_algorithms/divide_and_conquer.htm\">DSA - Divide and Conquer</a></li>\n<li><a href=\"/data_structures_algorithms/dynamic_programming.htm\">DSA - Dynamic Programming</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Data Structures</li>\n<li><a href=\"/data_structures_algorithms/data_structures_basics.htm\">DSA - Data Structure Basics</a></li>\n<li><a href=\"/data_structures_algorithms/array_data_structure.htm\">DSA - Array Data Structure</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Linked Lists</li></ul></aside></div></div></div></div>\n<li><a href=\"/data_structures_algorithms/linked_list_algorithms.htm\">DSA - Linked List Basics</a></li>\n<li><a href=\"/data_structures_algorithms/doubly_linked_list_algorithm.htm\">DSA - Doubly Linked List</a></li>\n<li><a href=\"/data_structures_algorithms/circular_linked_list_algorithm.htm\">DSA - Circular Linked List</a></li>\n\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Stack &amp; Queue</li>\n<li><a href=\"/data_structures_algorithms/stack_algorithm.htm\">DSA - Stack</a></li>\n<li><a href=\"/data_structures_algorithms/expression_parsing.htm\">DSA - Expression Parsing</a></li>\n<li><a href=\"/data_structures_algorithms/dsa_queue.htm\">DSA - Queue</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Searching Techniques</li>\n<!--<li style=\"background:yellow;\"><a href=\"/data_structures_algorithms/searching_algorithms.htm\">DSA - Searching Algorithms</a></li>-->\n<li><a href=\"/data_structures_algorithms/linear_search_algorithm.htm\">DSA - Linear Search</a></li>\n<li><a href=\"/data_structures_algorithms/binary_search_algorithm.htm\">DSA - Binary Search</a></li>\n<li><a href=\"/data_structures_algorithms/interpolation_search_algorithm.htm\">DSA - Interpolation Search</a></li>\n<li><a href=\"/data_structures_algorithms/hash_data_structure.htm\">DSA - Hash Table</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Sorting Techniques</li>\n<li><a href=\"/data_structures_algorithms/sorting_algorithms.htm\">DSA - Sorting Algorithms</a></li>\n<li><a href=\"/data_structures_algorithms/bubble_sort_algorithm.htm\">DSA - Bubble Sort</a></li>\n<li><a href=\"/data_structures_algorithms/insertion_sort_algorithm.htm\">DSA - Insertion Sort</a></li>\n<li><a href=\"/data_structures_algorithms/selection_sort_algorithm.htm\">DSA - Selection Sort</a></li>\n<li><a href=\"/data_structures_algorithms/merge_sort_algorithm.htm\">DSA - Merge Sort</a></li>\n<li><a href=\"/data_structures_algorithms/shell_sort_algorithm.htm\">DSA - Shell Sort</a></li>\n<li><a href=\"/data_structures_algorithms/quick_sort_algorithm.htm\">DSA - Quick Sort</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Graph Data Structure</li>\n<li><a href=\"/data_structures_algorithms/graph_data_structure.htm\">DSA - Graph Data Structure</a></li>\n<li><a href=\"/data_structures_algorithms/depth_first_traversal.htm\">DSA - Depth First Traversal</a></li>\n<li><a href=\"/data_structures_algorithms/breadth_first_traversal.htm\">DSA - Breadth First Traversal</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Tree Data Structure</li>\n<li><a href=\"/data_structures_algorithms/tree_data_structure.htm\">DSA - Tree Data Structure</a></li>\n<li><a href=\"/data_structures_algorithms/tree_traversal.htm\">DSA - Tree Traversal</a></li>\n<li><a href=\"/data_structures_algorithms/binary_search_tree.htm\">DSA - Binary Search Tree</a></li>\n<li><a href=\"/data_structures_algorithms/avl_tree_algorithm.htm\">DSA - AVL Tree</a></li>\n<li><a href=\"/data_structures_algorithms/spanning_tree.htm\">DSA - Spanning Tree</a></li>\n<li><a href=\"/data_structures_algorithms/heap_data_structure.htm\">DSA - Heap</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Recursion</li>\n<li><a href=\"/data_structures_algorithms/recursion_basics.htm\">DSA - Recursion Basics</a></li>\n<li><a href=\"/data_structures_algorithms/tower_of_hanoi.htm\">DSA - Tower of Hanoi</a></li>\n<li><a href=\"/data_structures_algorithms/fibonacci_series.htm\">DSA - Fibonacci Series</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">DSA Useful Resources</li>\n<li><a href=\"/data_structures_algorithms/data_structures_algorithms_questions_answers.htm\">DSA - Questions and Answers</a></li>\n<li><a href=\"/data_structures_algorithms/dsa_quick_guide.htm\">DSA - Quick Guide</a></li>\n<li><a href=\"/data_structures_algorithms/dsa_useful_resources.htm\">DSA - Useful Resources</a></li>\n<li><a href=\"/data_structures_algorithms/dsa_discussion.htm\">DSA - Discussion</a></li>\n</ul>\n<ul class=\"nav nav-list primary push-bottom left-menu special\">\n<li class=\"sreading\">Selected Reading</li>\n<li><a href=\"/upsc_ias_exams.htm\" target=\"_top\">UPSC IAS Exams Notes</a></li>\n<li><a href=\"/developers_best_practices/index.htm\" target=\"_top\">Developer's Best Practices</a></li>\n<li><a href=\"/questions_and_answers.htm\" target=\"_top\">Questions and Answers</a></li>\n<li><a href=\"/effective_resume_writing.htm\" target=\"_top\">Effective Resume Writing</a></li>\n<li><a href=\"/hr_interview_questions/index.htm\" target=\"_top\">HR Interview Questions</a></li>\n<li><a href=\"/computer_glossary.htm\" target=\"_top\">Computer Glossary</a></li>\n<li><a href=\"/computer_whoiswho.htm\" target=\"_top\">Who is Who</a></li>\n</ul>\n\n\n<!-- PRINTING STARTS HERE -->\n<div class=\"row\">\n<div class=\"content\">\n<div class=\"col-md-7 middle-col\">\n<h1>Data Structure and Algorithms - Queue</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/data_structures_algorithms/expression_parsing.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/data_structures_algorithms/linear_search_algorithm.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>Queue is an abstract data structure, somewhat similar to Stacks. Unlike stacks, a queue is open at both its ends. One end is always used to insert data (enqueue) and the other is used to remove data (dequeue). Queue follows First-In-First-Out methodology, i.e., the data item stored first will be accessed first.</p>\n<img alt=\"Queue Example\" src=\"/data_structures_algorithms/images/queue_example.jpg\">\n<p>A real-world example of queue can be a single-lane one-way road, where the vehicle enters first, exits first. More real-world examples can be seen as queues at the ticket windows and bus-stops.</p>\n<h2>Queue Representation</h2>\n<p>As we now understand that in queue, we access both ends for different reasons. The following diagram given below tries to explain queue representation as data structure \u2212</p>\n<img alt=\"Queue Example\" src=\"/data_structures_algorithms/images/queue_diagram.jpg\"/>\n<p>As in stacks, a queue can also be implemented using Arrays, Linked-lists, Pointers and Structures. For the sake of simplicity, we shall implement queues using one-dimensional array.</p>\n<h2>Basic Operations</h2>\n<p>Queue operations may involve initializing or defining the queue, utilizing it, and then completely erasing it from the memory. Here we shall try to understand the basic operations associated with queues \u2212</p>\n<ul class=\"list\">\n<li><p><b>enqueue()</b> \u2212 add (store) an item to the queue.</p></li>\n<li><p><b>dequeue()</b> \u2212 remove (access) an item from the queue.</p></li>\n</ul>\n<p>Few more functions are required to make the above-mentioned queue operation efficient. These are \u2212</p>\n<ul class=\"list\">\n<li><p><b>peek()</b> \u2212 Gets the element at the front of the queue without removing it.</p></li>\n<li><p><b>isfull()</b> \u2212 Checks if the queue is full.</p></li>\n<li><p><b>isempty()</b> \u2212 Checks if the queue is empty.</p></li>\n</ul>\n<p>In queue, we always dequeue (or access) data, pointed by <b>front</b> pointer and while enqueing (or storing) data in the queue we take help of <b>rear</b> pointer.</p>\n<p>Let's first learn about supportive functions of a queue \u2212</p>\n<h3>peek()</h3>\n<p>This function helps to see the data at the <b>front</b> of the queue. The algorithm of peek() function is as follows \u2212</p>\n<p><b>Algorithm</b></p>\n<pre class=\"result notranslate\">\nbegin procedure peek\n   return queue[front]\nend procedure\n</pre>\n<p>Implementation of peek() function in C programming language \u2212</p>\n<p><b>Example</b></p>\n<pre class=\"prettyprint notranslate\">\nint peek() {\n   return queue[front];\n}\n</pre>\n<h3>isfull()</h3>\n<p>As we are using single dimension array to implement queue, we just check for the rear pointer to reach at MAXSIZE to determine that the queue is full. In case we maintain the queue in a circular linked-list, the algorithm will differ. Algorithm of isfull() function \u2212</p>\n<p><b>Algorithm</b></p>\n<pre class=\"prettyprint notranslate\">\nbegin procedure isfull\n\n   if rear equals to MAXSIZE\n      return true\n   else\n      return false\n   endif\n   \nend procedure\n</pre>\n<p>Implementation of isfull() function in C programming language \u2212</p>\n<p><b>Example</b></p>\n<pre class=\"prettyprint notranslate\">\nbool isfull() {\n   if(rear == MAXSIZE - 1)\n      return true;\n   else\n      return false;\n}\n</pre>\n<h3>isempty()</h3>\n<p>Algorithm of isempty() function \u2212</p>\n<p><b>Algorithm</b></p>\n<pre class=\"prettyprint notranslate\">\nbegin procedure isempty\n\n   if front is less than MIN  OR front is greater than rear\n      return true\n   else\n      return false\n   endif\n   \nend procedure\n</pre>\n<p>If the value of <b>front</b> is less than MIN or 0, it tells that the queue is not yet initialized, hence empty.</p>\n<p>Here's the C programming code \u2212</p>\n<p><b>Example</b></p>\n<pre class=\"prettyprint notranslate\">\nbool isempty() {\n   if(front &lt; 0 || front &gt; rear) \n      return true;\n   else\n      return false;\n}\n</pre>\n<h2>Enqueue Operation</h2>\n<p>Queues maintain two data pointers, <b>front</b> and <b>rear</b>. Therefore, its operations are comparatively difficult to implement than that of stacks.</p>\n<p>The following steps should be taken to enqueue (insert) data into a queue \u2212</p>\n<ul class=\"list\">\n<li><p><b>Step 1</b> \u2212 Check if the queue is full.</p></li>\n<li><p><b>Step 2</b> \u2212 If the queue is full, produce overflow error and exit.</p></li>\n<li><p><b>Step 3</b> \u2212 If the queue is not full, increment <b>rear</b> pointer to point the next empty space.</p></li>\n<li><p><b>Step 4</b> \u2212 Add data element to the queue location, where the rear is pointing.</p></li>\n<li><p><b>Step 5</b> \u2212 return success.</p></li>\n</ul>\n<img alt=\"Insert Operation\" src=\"/data_structures_algorithms/images/queue_enqueue_diagram.jpg\"/>\n<p>Sometimes, we also check to see if a queue is initialized or not, to handle any unforeseen situations.</p>\n<h3>Algorithm for enqueue operation</h3>\n<pre class=\"prettyprint notranslate\">\nprocedure enqueue(data)      \n   \n   if queue is full\n      return overflow\n   endif\n   \n   rear \u2190 rear + 1\n   queue[rear] \u2190 data\n   return true\n   \nend procedure\n</pre>\n<p>Implementation of enqueue() in C programming language \u2212</p>\n<p><b>Example</b></p>\n<pre class=\"prettyprint notranslate\">\nint enqueue(int data)      \n   if(isfull())\n      return 0;\n   \n   rear = rear &amp;plus 1;\n   queue[rear] = data;\n   \n   return 1;\nend procedure\n</pre>\n<h2>Dequeue Operation</h2>\n<p>Accessing data from the queue is a process of two tasks \u2212 access the data where <b>front</b> is pointing and remove the data after access. The following steps are taken to perform <b>dequeue</b> operation \u2212</p>\n<ul class=\"list\">\n<li><p><b>Step 1</b> \u2212 Check if the queue is empty.</p></li>\n<li><p><b>Step 2</b> \u2212 If the queue is empty, produce underflow error and exit.</p></li>\n<li><p><b>Step 3</b> \u2212 If the queue is not empty, access the data where <b>front</b> is pointing.</p></li>\n<li><p><b>Step 4</b> \u2212 Increment <b>front</b> pointer to point to the next available data element.</p></li>\n<li><p><b>Step 5</b> \u2212 Return success.</p></li>\n</ul>\n<img alt=\"Remove Operation\" src=\"/data_structures_algorithms/images/queue_dequeue_diagram.jpg\"/>\n<h3>Algorithm for dequeue operation</h3>\n<pre class=\"prettyprint notranslate\">\nprocedure dequeue\n   \n   if queue is empty\n      return underflow\n   end if\n\n   data = queue[front]\n   front \u2190 front + 1\n   return true\n\nend procedure\n</pre>\n<p>Implementation of dequeue() in C programming language \u2212</p>\n<p><b>Example</b></p>\n<pre class=\"prettyprint notranslate\">\nint dequeue() {\n   if(isempty())\n      return 0;\n\n   int data = queue[front];\n   front = front + 1;\n\n   return data;\n}\n</pre>\n<p>For a complete Queue program in C programming language, please <a href=\"/data_structures_algorithms/queue_program_in_c.htm\">click here</a>.</p>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/data_structures_algorithms/expression_parsing.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/data_structures_algorithms/linear_search_algorithm.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</img></div>\n</div>\n<div class=\"row\">\n<div class=\"col-md-3\" id=\"rightbar\">\n<div class=\"simple-ad\">\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.facebook.com/sharer.php?u=' + 'https://www.tutorialspoint.com/data_structures_algorithms/dsa_queue.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/facebookIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://twitter.com/share?url=' + 'https://www.tutorialspoint.com/data_structures_algorithms/dsa_queue.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/twitterIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'https://www.tutorialspoint.com/data_structures_algorithms/dsa_queue.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/linkedinIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=https://www.tutorialspoint.com/data_structures_algorithms/dsa_queue.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/googlePlusIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.stumbleupon.com/submit?url=https://www.tutorialspoint.com/data_structures_algorithms/dsa_queue.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/StumbleUponIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://reddit.com/submit?url=https://www.tutorialspoint.com/data_structures_algorithms/dsa_queue.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/reddit.jpg\"/>\n</a>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\ngoogle_ad_format = \"300x250_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 600;\ngoogle_ad_format = \"300x600_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"ca-pub-2537027957187252\";\n/* Right Side Ad */\ngoogle_ad_slot = \"right_side_ad\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\n//-->\n</script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n</div>\n\n\n<div class=\"footer-copyright\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-1\">\n<a class=\"logo\" href=\"index.htm\"> <img alt=\"Tutorials Point\" class=\"img-responsive\" src=\"/scripts/img/logo-footer.png\"/> </a>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<nav id=\"sub-menu\">\n<ul>\n<li><a href=\"/about/about_privacy.htm\">Privacy Policy</a></li>\n<li><a href=\"/about/about_cookies.htm\">Cookies Policy</a></li>\n<li><a href=\"/about/contact_us.htm\">Contact</a></li>\n</ul>\n</nav>\n</div>\n<div class=\"col-md-3 col-sm-12 col-xs-12\">\n<p>\u00a9 Copyright 2019. All Rights Reserved.</p>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<div class=\"news-group\">\n<input autocomplete=\"off\" class=\"form-control-foot search\" id=\"textemail\" name=\"textemail\" onblur=\"if (this.value == '') {this.value = 'Enter email for newsletter...';}\" onfocus=\"if (this.value == 'Enter email for newsletter...') {this.value = '';}\" placeholder=\"Enter email for newsletter\" type=\"text\"/>\n<span class=\"input-group-btn\"> <button class=\"btn btn-default btn-footer\" id=\"btnemail\" onclick=\"javascript:void(0);\" type=\"submit\">go</button> </span>\n<div id=\"newsresponse\"></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n\n<div id=\"privacy-banner\">\n<div>\n<p>\n      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.\n      <a href=\"javascript:void(0)\" id=\"banner-accept\">Accept</a>\n<a href=\"/about/about_cookies.htm\" id=\"banner-learn\" target=\"_blank\">Learn more</a>\n</p>\n</div>\n</div>\n<script>\n// Banner Trigger if Not Closed\nif (!localStorage.bannerClosed) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n} else {\n  document.getElementById('privacy-banner').style.display = \"none\";\n}\ndocument.getElementById('banner-accept').addEventListener('click', function() {\n  document.getElementById('privacy-banner').style.display = \"none\";\n  localStorage.bannerClosed = 'true';\n});\nif (navigator.userAgent.match(/Opera|OPR\\//)) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n}\n</script>\n<!-- Libs -->\n<script src=\"/theme/js/custom-min.js?v=7\"></script>\n<script src=\"https://www.google-analytics.com/urchin.js\">\n</script>\n<script>\n_uacct = \"UA-232293-6\";\nurchinTracker();\n$('.pg-icon').click(function(){\n   $('.wrapLoader').show();\n});\n</script>\n\n\n\n", "title": "Data Structure and Algorithms - Queue  ", "content": "Queue is an abstract data structure, somewhat similar to Stacks. Unlike stacks, a queue is open at both its ends. One end is always used to insert data (enqueue) and the other is used to remove data (dequeue). Queue follows First-In-First-Out methodology, i.e., the data item stored first will be accessed first.  ", "title_html": "<h1>Data Structure and Algorithms - Queue</h1> "}