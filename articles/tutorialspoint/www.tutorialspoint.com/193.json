{"content": "\n PL/SQL - Data Types \n  \n Advertisements \n \n<!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//-->\n\n\n \n  \n \n Previous Page\n \n \nNext Page \u00a0\n \n  \n  \n In this chapter, we will discuss the Data Types in PL/SQL. The PL/SQL variables, constants and parameters must have a valid data type, which specifies a storage format, constraints, and a valid range of values. We will focus on the SCALAR and the LOB data types in this chapter. The other two data types will be covered in other chapters. \n \n\nS.No\nCategory & Description\n\n\n1\nScalar\nSingle values with no internal components, such as a NUMBER, DATE, or BOOLEAN.\n\n\n2\nLarge Object (LOB)\nPointers to large objects that are stored separately from other data items, such as text, graphic images, video clips, and sound waveforms.\n\n\n3\nComposite\nData items that have internal components that can be accessed individually. For example, collections and records.\n\n\n4\nReference\nPointers to other data items.\n\n \n PL/SQL Scalar Data Types and Subtypes \n PL/SQL Scalar Data Types and Subtypes come under the following categories \u2212 \n \n\nS.No\nDate Type & Description\n\n\n1\nNumeric\nNumeric values on which arithmetic operations are performed.\n\n\n2\nCharacter\nAlphanumeric values that represent single characters or strings of characters.\n\n\n3\nBoolean\nLogical values on which logical operations are performed.\n\n\n4\nDatetime\nDates and times.\n\n \n PL/SQL provides subtypes of data types. For example, the data type NUMBER has a subtype called INTEGER. You can use the subtypes in your PL/SQL program to make the data types compatible with data types in other programs while embedding the PL/SQL code in another program, such as a Java program. \n PL/SQL Numeric Data Types and Subtypes \n Following table lists out the PL/SQL pre-defined numeric data types and their sub-types \u2212 \n \n\nS.No\nData Type & Description\n\n\n1\nPLS_INTEGER\nSigned integer in range -2,147,483,648 through 2,147,483,647, represented in 32 bits\n\n\n2\nBINARY_INTEGER\nSigned integer in range -2,147,483,648 through 2,147,483,647, represented in 32 bits\n\n\n3\nBINARY_FLOAT\nSingle-precision IEEE 754-format floating-point number\n\n\n4\nBINARY_DOUBLE\nDouble-precision IEEE 754-format floating-point number\n\n\n5\nNUMBER(prec, scale)\nFixed-point or floating-point number with absolute value in range 1E-130 to (but not including) 1.0E126. A NUMBER variable can also represent 0\n\n\n6\nDEC(prec, scale)\nANSI specific fixed-point type with maximum precision of 38 decimal digits\n\n\n7\nDECIMAL(prec, scale)\nIBM specific fixed-point type with maximum precision of 38 decimal digits\n\n\n8\nNUMERIC(pre, secale)\nFloating type with maximum precision of 38 decimal digits\n\n\n9\nDOUBLE PRECISION\nANSI specific floating-point type with maximum precision of 126 binary digits (approximately 38 decimal digits)\n\n\n10\nFLOAT\nANSI and IBM specific floating-point type with maximum precision of 126 binary digits (approximately 38 decimal digits)\n\n\n11\nINT\nANSI specific integer type with maximum precision of 38 decimal digits\n\n\n12\nINTEGER\nANSI and IBM specific integer type with maximum precision of 38 decimal digits\n\n\n13\nSMALLINT\nANSI and IBM specific integer type with maximum precision of 38 decimal digits\n\n\n14\nREAL\nFloating-point type with maximum precision of 63 binary digits (approximately 18 decimal digits)\n\n \n Following is a valid declaration \u2212 \n \nDECLARE \n   num1 INTEGER; \n   num2 REAL; \n   num3 DOUBLE PRECISION; \nBEGIN \n   null; \nEND; \n/ \n \n When the above code is compiled and executed, it produces the following result \u2212 \n \nPL/SQL procedure successfully completed \n \n PL/SQL Character Data Types and Subtypes \n Following is the detail of PL/SQL pre-defined character data types and their sub-types \u2212 \n \n\nS.No\nData Type & Description\n\n\n1\nCHAR\nFixed-length character string with maximum size of 32,767 bytes\n\n\n2\nVARCHAR2\nVariable-length character string with maximum size of 32,767 bytes\n\n\n3\nRAW\nVariable-length binary or byte string with maximum size of 32,767 bytes, not interpreted by PL/SQL\n\n\n4\nNCHAR\nFixed-length national character string with maximum size of 32,767 bytes\n\n\n5\nNVARCHAR2\nVariable-length national character string with maximum size of 32,767 bytes\n\n\n6\nLONG\nVariable-length character string with maximum size of 32,760 bytes\n\n\n7\nLONG RAW\nVariable-length binary or byte string with maximum size of 32,760 bytes, not interpreted by PL/SQL\n\n\n8\nROWID\nPhysical row identifier, the address of a row in an ordinary table\n\n\n9\nUROWID\nUniversal row identifier (physical, logical, or foreign row identifier)\n\n \n PL/SQL Boolean Data Types \n The BOOLEAN data type stores logical values that are used in logical operations. The logical values are the Boolean values TRUE and FALSE and the value NULL. \n However, SQL has no data type equivalent to BOOLEAN. Therefore, Boolean values cannot be used in \u2212  \n \nSQL statements\nBuilt-in SQL functions (such as TO_CHAR)\nPL/SQL functions invoked from SQL statements\n \n PL/SQL Datetime and Interval Types \n The DATE datatype is used to store fixed-length datetimes, which include the time of day in seconds since midnight. Valid dates range from January 1, 4712 BC to December 31, 9999 AD. \n The default date format is set by the Oracle initialization parameter NLS_DATE_FORMAT. For example, the default might be 'DD-MON-YY', which includes a two-digit number for the day of the month, an abbreviation of the month name, and the last two digits of the year. For example, 01-OCT-12. \n Each DATE includes the century, year, month, day, hour, minute, and second. The following table shows the valid values for each field \u2212 \n \n\nField Name\nValid Datetime Values\nValid Interval Values\n\n\nYEAR\n-4712 to 9999 (excluding year 0)\nAny nonzero integer\n\n\nMONTH\n01 to 12\n0 to 11\n\n\nDAY\n01 to 31 (limited by the values of MONTH and YEAR, according to the rules of the calendar for the locale)\nAny nonzero integer\n\n\nHOUR\n00 to 23\n0 to 23\n\n\nMINUTE\n00 to 59\n0 to 59\n\n\nSECOND\n00 to 59.9(n), where 9(n) is the precision of time fractional seconds\n0 to 59.9(n), where 9(n) is the precision of interval fractional seconds\n\n\nTIMEZONE_HOUR\n-12 to 14 (range accommodates daylight savings time changes)\nNot applicable\n\n\nTIMEZONE_MINUTE\n00 to 59\nNot applicable\n\n\nTIMEZONE_REGION\nFound in the dynamic performance view V$TIMEZONE_NAMES\nNot applicable\n\n\nTIMEZONE_ABBR\nFound in the dynamic performance view V$TIMEZONE_NAMES\nNot applicable\n\n \n PL/SQL Large Object (LOB) Data Types \n Large Object (LOB) data types refer to large data items such as text, graphic images, video clips, and sound waveforms. LOB data types allow efficient, random, piecewise access to this data. Following are the predefined PL/SQL LOB data types \u2212 \n \n\nData Type\nDescription\nSize\n\n\nBFILE\nUsed to store large binary objects in operating system files outside the database.\nSystem-dependent. Cannot exceed 4 gigabytes (GB).\n\n\nBLOB\nUsed to store large binary objects in the database.\n8 to 128 terabytes (TB)\n\n\nCLOB\nUsed to store large blocks of character data in the database.\n8 to 128 TB\n\n\nNCLOB\nUsed to store large blocks of NCHAR data in the database.\n8 to 128 TB\n\n \n PL/SQL User-Defined Subtypes \n A subtype is a subset of another data type, which is called its base type. A subtype has the same valid operations as its base type, but only a subset of its valid values. \n PL/SQL predefines several subtypes in package STANDARD. For example, PL/SQL predefines the subtypes CHARACTER and INTEGER as follows \u2212 \n \nSUBTYPE CHARACTER IS CHAR; \nSUBTYPE INTEGER IS NUMBER(38,0);\n \n You can define and use your own subtypes. The following program illustrates defining and using a user-defined subtype \u2212 \n \nDECLARE \n   SUBTYPE name IS char(20); \n   SUBTYPE message IS varchar2(100); \n   salutation name; \n   greetings message; \nBEGIN \n   salutation := 'Reader '; \n   greetings := 'Welcome to the World of PL/SQL'; \n   dbms_output.put_line('Hello ' || salutation || greetings); \nEND; \n/ \n \n When the above code is executed at the SQL prompt, it produces the following result \u2212 \n \nHello Reader Welcome to the World of PL/SQL \n \nPL/SQL procedure successfully completed. \n \n NULLs in PL/SQL \n PL/SQL NULL values represent missing or unknown data and they are not an integer, a character, or any other specific data type. Note that NULL is not the same as an empty data string or the null character value '\\0'. A null can be assigned but it cannot be equated with anything, including itself. \n  \n \n Previous Page\n \n \n Print\n \n \nNext Page \u00a0\n \n  \n  PRINTING ENDS HERE  \n \nAdvertisements\n<!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//-->\n\n\n \n", "title": "PL/SQL - Data Types", "content_html": "<div class=\"col-md-7 middle-col\">\n<h1>PL/SQL - Data Types</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/plsql/plsql_basic_syntax.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/plsql/plsql_variable_types.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>In this chapter, we will discuss the Data Types in PL/SQL. The PL/SQL variables, constants and parameters must have a valid data type, which specifies a storage format, constraints, and a valid range of values. We will focus on the <b>SCALAR</b> and the <b>LOB</b> data types in this chapter. The other two data types will be covered in other chapters.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\">S.No</th>\n<th style=\"text-align:center;\">Category &amp; Description</th>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">1</td>\n<td><p><b>Scalar</b></p>\n<p>Single values with no internal components, such as a <b>NUMBER, DATE,</b> or <b>BOOLEAN</b>.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">2</td>\n<td><p><b>Large Object (LOB)</b></p>\n<p>Pointers to large objects that are stored separately from other data items, such as text, graphic images, video clips, and sound waveforms.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">3</td>\n<td><p><b>Composite</b></p>\n<p>Data items that have internal components that can be accessed individually. For example, collections and records.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">4</td>\n<td><p><b>Reference</b></p>\n<p>Pointers to other data items.</p></td>\n</tr>\n</table>\n<h2>PL/SQL Scalar Data Types and Subtypes</h2>\n<p>PL/SQL Scalar Data Types and Subtypes come under the following categories \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\">S.No</th>\n<th style=\"text-align:center;\">Date Type &amp; Description</th>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">1</td>\n<td><p><b>Numeric</b></p>\n<p>Numeric values on which arithmetic operations are performed.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">2</td>\n<td><p><b>Character</b></p>\n<p>Alphanumeric values that represent single characters or strings of characters.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">3</td>\n<td><p><b>Boolean</b></p>\n<p>Logical values on which logical operations are performed.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">4</td>\n<td><p><b>Datetime</b></p>\n<p>Dates and times.</p></td>\n</tr>\n</table>\n<p>PL/SQL provides subtypes of data types. For example, the data type NUMBER has a subtype called INTEGER. You can use the subtypes in your PL/SQL program to make the data types compatible with data types in other programs while embedding the PL/SQL code in another program, such as a Java program.</p>\n<h2>PL/SQL Numeric Data Types and Subtypes</h2>\n<p>Following table lists out the PL/SQL pre-defined numeric data types and their sub-types \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\">S.No</th>\n<th style=\"text-align:center;\">Data Type &amp; Description</th>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">1</td>\n<td><p><b>PLS_INTEGER</b></p>\n<p>Signed integer in range -2,147,483,648 through 2,147,483,647, represented in 32 bits</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">2</td>\n<td><p><b>BINARY_INTEGER</b></p>\n<p>Signed integer in range -2,147,483,648 through 2,147,483,647, represented in 32 bits</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">3</td>\n<td><p><b>BINARY_FLOAT</b></p>\n<p>Single-precision IEEE 754-format floating-point number</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">4</td>\n<td><p><b>BINARY_DOUBLE</b></p>\n<p>Double-precision IEEE 754-format floating-point number</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">5</td>\n<td><p><b>NUMBER(prec, scale)</b></p>\n<p>Fixed-point or floating-point number with absolute value in range 1E-130 to (but not including) 1.0E126. A NUMBER variable can also represent 0</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">6</td>\n<td><p><b>DEC(prec, scale)</b></p>\n<p>ANSI specific fixed-point type with maximum precision of 38 decimal digits</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">7</td>\n<td><p><b>DECIMAL(prec, scale)</b></p>\n<p>IBM specific fixed-point type with maximum precision of 38 decimal digits</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">8</td>\n<td><p><b>NUMERIC(pre, secale)</b></p>\n<p>Floating type with maximum precision of 38 decimal digits</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">9</td>\n<td><p><b>DOUBLE PRECISION</b></p>\n<p>ANSI specific floating-point type with maximum precision of 126 binary digits (approximately 38 decimal digits)</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">10</td>\n<td><p><b>FLOAT</b></p>\n<p>ANSI and IBM specific floating-point type with maximum precision of 126 binary digits (approximately 38 decimal digits)</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">11</td>\n<td><p><b>INT</b></p>\n<p>ANSI specific integer type with maximum precision of 38 decimal digits</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">12</td>\n<td><p><b>INTEGER</b></p>\n<p>ANSI and IBM specific integer type with maximum precision of 38 decimal digits</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">13</td>\n<td><p><b>SMALLINT</b></p>\n<p>ANSI and IBM specific integer type with maximum precision of 38 decimal digits</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">14</td>\n<td><p><b>REAL</b></p>\n<p>Floating-point type with maximum precision of 63 binary digits (approximately 18 decimal digits)</p></td>\n</tr>\n</table>\n<p>Following is a valid declaration \u2212</p>\n<pre class=\"prettyprint notranslate\">\nDECLARE \n   num1 INTEGER; \n   num2 REAL; \n   num3 DOUBLE PRECISION; \nBEGIN \n   null; \nEND; \n/ \n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"prettyprint notranslate\">\nPL/SQL procedure successfully completed \n</pre>\n<h2>PL/SQL Character Data Types and Subtypes</h2>\n<p>Following is the detail of PL/SQL pre-defined character data types and their sub-types \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\">S.No</th>\n<th style=\"text-align:center;\">Data Type &amp; Description</th>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">1</td>\n<td><p><b>CHAR</b></p>\n<p>Fixed-length character string with maximum size of 32,767 bytes</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">2</td>\n<td><p><b>VARCHAR2</b></p>\n<p>Variable-length character string with maximum size of 32,767 bytes</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">3</td>\n<td><p><b>RAW</b></p>\n<p>Variable-length binary or byte string with maximum size of 32,767 bytes, not interpreted by PL/SQL</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">4</td>\n<td><p><b>NCHAR</b></p>\n<p>Fixed-length national character string with maximum size of 32,767 bytes</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">5</td>\n<td><p><b>NVARCHAR2</b></p>\n<p>Variable-length national character string with maximum size of 32,767 bytes</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">6</td>\n<td><p><b>LONG</b></p>\n<p>Variable-length character string with maximum size of 32,760 bytes</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">7</td>\n<td><p><b>LONG RAW</b></p>\n<p>Variable-length binary or byte string with maximum size of 32,760 bytes, not interpreted by PL/SQL</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">8</td>\n<td><p><b>ROWID</b></p>\n<p>Physical row identifier, the address of a row in an ordinary table</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">9</td>\n<td><p><b>UROWID</b></p>\n<p>Universal row identifier (physical, logical, or foreign row identifier)</p></td>\n</tr>\n</table>\n<h2>PL/SQL Boolean Data Types</h2>\n<p>The <b>BOOLEAN</b> data type stores logical values that are used in logical operations. The logical values are the Boolean values <b>TRUE</b> and <b>FALSE</b> and the value <b>NULL</b>.</p>\n<p>However, SQL has no data type equivalent to BOOLEAN. Therefore, Boolean values cannot be used in \u2212 </p>\n<ul class=\"list\">\n<li>SQL statements</li>\n<li>Built-in SQL functions (such as <b>TO_CHAR</b>)</li>\n<li>PL/SQL functions invoked from SQL statements</li>\n</ul>\n<h2>PL/SQL Datetime and Interval Types</h2>\n<p>The <b>DATE</b> datatype is used to store fixed-length datetimes, which include the time of day in seconds since midnight. Valid dates range from January 1, 4712 BC to December 31, 9999 AD.</p>\n<p>The default date format is set by the Oracle initialization parameter NLS_DATE_FORMAT. For example, the default might be 'DD-MON-YY', which includes a two-digit number for the day of the month, an abbreviation of the month name, and the last two digits of the year. For example, 01-OCT-12.</p>\n<p>Each DATE includes the century, year, month, day, hour, minute, and second. The following table shows the valid values for each field \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\">Field Name</th>\n<th style=\"text-align:center;\">Valid Datetime Values</th>\n<th style=\"text-align:center;\">Valid Interval Values</th>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">YEAR</td>\n<td>-4712 to 9999 (excluding year 0)</td>\n<td style=\"vertical-align:middle;\">Any nonzero integer</td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">MONTH</td>\n<td>01 to 12</td>\n<td>0 to 11</td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">DAY</td>\n<td>01 to 31 (limited by the values of MONTH and YEAR, according to the rules of the calendar for the locale)</td>\n<td style=\"vertical-align:middle;\">Any nonzero integer</td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">HOUR</td>\n<td>00 to 23</td>\n<td>0 to 23</td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">MINUTE</td>\n<td>00 to 59</td>\n<td>0 to 59</td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">SECOND</td>\n<td>00 to 59.9(n), where 9(n) is the precision of time fractional seconds</td>\n<td>0 to 59.9(n), where 9(n) is the precision of interval fractional seconds</td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">TIMEZONE_HOUR</td>\n<td>-12 to 14 (range accommodates daylight savings time changes)</td>\n<td style=\"vertical-align:middle;\">Not applicable</td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">TIMEZONE_MINUTE</td>\n<td>00 to 59</td>\n<td style=\"vertical-align:middle;\">Not applicable</td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">TIMEZONE_REGION</td>\n<td>Found in the dynamic performance view V$TIMEZONE_NAMES</td>\n<td style=\"vertical-align:middle;\">Not applicable</td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">TIMEZONE_ABBR</td>\n<td>Found in the dynamic performance view V$TIMEZONE_NAMES</td>\n<td style=\"vertical-align:middle;\">Not applicable</td>\n</tr>\n</table>\n<h2>PL/SQL Large Object (LOB) Data Types</h2>\n<p>Large Object (LOB) data types refer to large data items such as text, graphic images, video clips, and sound waveforms. LOB data types allow efficient, random, piecewise access to this data. Following are the predefined PL/SQL LOB data types \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center; width:20%\">Data Type</th>\n<th style=\"text-align:center;\">Description</th>\n<th style=\"text-align:center;\">Size</th>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">BFILE</td>\n<td>Used to store large binary objects in operating system files outside the database.</td>\n<td>System-dependent. Cannot exceed 4 gigabytes (GB).</td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">BLOB</td>\n<td>Used to store large binary objects in the database.</td>\n<td>8 to 128 terabytes (TB)</td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">CLOB</td>\n<td>Used to store large blocks of character data in the database.</td>\n<td>8 to 128 TB</td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">NCLOB</td>\n<td>Used to store large blocks of NCHAR data in the database.</td>\n<td>8 to 128 TB</td>\n</tr>\n</table>\n<h2>PL/SQL User-Defined Subtypes</h2>\n<p>A subtype is a subset of another data type, which is called its base type. A subtype has the same valid operations as its base type, but only a subset of its valid values.</p>\n<p>PL/SQL predefines several subtypes in package <b>STANDARD</b>. For example, PL/SQL predefines the subtypes <b>CHARACTER</b> and <b>INTEGER</b> as follows \u2212</p>\n<pre class=\"result notranslate\">\nSUBTYPE CHARACTER IS CHAR; \nSUBTYPE INTEGER IS NUMBER(38,0);\n</pre>\n<p>You can define and use your own subtypes. The following program illustrates defining and using a user-defined subtype \u2212</p>\n<pre class=\"prettyprint notranslate\">\nDECLARE \n   SUBTYPE name IS char(20); \n   SUBTYPE message IS varchar2(100); \n   salutation name; \n   greetings message; \nBEGIN \n   salutation := 'Reader '; \n   greetings := 'Welcome to the World of PL/SQL'; \n   dbms_output.put_line('Hello ' || salutation || greetings); \nEND; \n/ \n</pre>\n<p>When the above code is executed at the SQL prompt, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nHello Reader Welcome to the World of PL/SQL \n \nPL/SQL procedure successfully completed. \n</pre>\n<h2>NULLs in PL/SQL</h2>\n<p>PL/SQL NULL values represent <b>missing</b> or <b>unknown data</b> and they are not an integer, a character, or any other specific data type. Note that <b>NULL</b> is not the same as an empty data string or the null character value <b>'\\0'</b>. A null can be assigned but it cannot be equated with anything, including itself.</p>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/plsql/plsql_basic_syntax.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/plsql/plsql_variable_types.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>", "html": "<!DOCTYPE html>\n\n<!--[if IE 8]><html class=\"ie ie8\"> <![endif]-->\n<!--[if IE 9]><html class=\"ie ie9\"> <![endif]-->\n<!--[if gt IE 9]><!--> <html> <!--<![endif]-->\n<head>\n<!-- Basic -->\n<meta charset=\"utf-8\"/>\n<title>PL/SQL Data Types</title>\n<meta content=\"PL/SQL Data Types - Learn PL/SQL programming in simple and easy steps starting with PL/SQL syntax, Environment Setup, Operators, Transactions, Date and Time, data types, variables, constants, records, conditional statements, iterative statements, cursors, procedures, functions, exception handling, triggers, packages, collections, external procedures, arrays, strings, dbms output.\" name=\"description\">\n<meta content=\"PL/SQL, syntax, Environment Setup, Operators, Transactions, Date and Time, data types, variables, constants, records, conditional statements, iterative statements, cursors, procedures, functions, exception handling, triggers, packages, collections, external procedures, arrays, strings, dbms output.\" name=\"keywords\"/>\n<base href=\"https://www.tutorialspoint.com/\"/>\n<link href=\"/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"/>\n<meta content=\"width=device-width,initial-scale=1.0,user-scalable=yes\" name=\"viewport\"/>\n<meta content=\"en_US\" property=\"og:locale\">\n<meta content=\"website\" property=\"og:type\"/>\n<meta content=\"471319149685276\" property=\"fb:app_id\"/>\n<meta content=\"www.tutorialspoint.com\" property=\"og:site_name\"/>\n<meta content=\"yes\" name=\"apple-mobile-web-app-capable\"/>\n<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"/>\n<meta content=\"tutorialspoint.com\" name=\"author\"/>\n<script src=\"https://www.tutorialspoint.com/theme/js/script-min-v4.js?v=2\" type=\"text/javascript\"></script>\n<link href=\"https://www.tutorialspoint.com/theme/css/style-min.css?v=3.1\" rel=\"stylesheet\"/>\n<script>\r\nfunction openNav() {\t\r\n  document.getElementById(\"mySidenav\").style.width = \"250px\";\r\n  document.getElementById(\"right_obs\").style.display = \"block\";\r\n}\r\nfunction closeNav() {\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\nfunction close_obs_sidenav(){\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\n</script>\n<!-- Head Libs -->\n<!--[if IE 8]>\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/theme/css/ie8.css\">\r\n<![endif]-->\n<style>\r\n#privacy-banner {\r\n    position: fixed;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    max-width: 100%;\r\n    padding: 1rem .5rem;\r\n    background: #fff;\r\n    z-index: 1030;\r\n    color: #000;\r\n    font-size: 14px;\r\n    margin: 0;\r\n    display: none;\r\n    border-top: 2px solid rgb(130, 130, 130);\r\n  }\r\n  #privacy-banner p {\r\n    margin: 0;\r\n    color: #000;\r\n    text-align: center;\r\n  }\r\n  #privacy-banner a {\r\n    text-decoration: none;\r\n    margin: 20px auto 0 auto;\r\n    display: block;\r\n    max-width: 150px;\r\n  }\r\n  #privacy-banner a:hover {\r\n    text-decoration: underline;\r\n  }\r\n  #banner-learn {\r\n    color: #000;\r\n  }\r\n  #banner-accept {\r\n    padding: 7px 15px;\r\n    color: #fff;\r\n    border-radius: 5px;\r\n    background:#737373 !important;\r\n  }\r\n  @media (min-width: 768px) {\r\n    #privacy-banner {\r\n      padding: 1.5rem .5rem;\r\n    }\r\n    #privacy-banner a {\r\n      display: inline-block;\r\n      margin: 0 10px;\r\n    }\r\n}\r\nselect{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }\r\n.btnsbmt{ background: #d02023 !important;}\r\nul.nav-list.primary>li a.videolink{    background: none; margin: 0px; padding: 0px; border: 1px solid #d6d6d6;}\r\ndiv.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #d02023 url(/images/pattern.png) repeat center center !important;}\r\n.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #d02023 !important;}\r\n.submenu-item{ border-bottom: 2px solid #d02023 !important; border-top: 2px solid #d02023 !important }\r\n.ace_scroller{overflow: auto!important;}\r\na.demo{font-family: \"Open Sans\",Arial,sans-serif; background:#d02023; color:#fff; font-size:13px; padding:3px 10px; border:1px solid #d6d6d6; position:absolute; right:5px; margin:-6px 17px 0px 0px;}\r\na.demo:hover{opacity:.8}\r\n</style>\n<script>\r\n$(document).ready(function() {\r\n  $('input[name=\"q\"]').keydown(function(event){\r\n    if(event.keyCode == 13) {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n  });\r\n});\r\n</script>\n</meta></meta></head>\n<body onload=\"prettyPrint()\">\n<div class=\"wrapLoader\">\n<div class=\"imgLoader\">\n<img alt=\"\" height=\"70\" src=\"/images/loading-cg.gif\" width=\"70\"/>\n</div>\n</div>\n<div class=\"display-none\" id=\"right_obs\" onclick=\"close_obs_sidenav()\"></div>\n<header>\n<div class=\"container\">\n<h1 class=\"logo\">\n<a href=\"index.htm\" title=\"tutorialspoint\">\n<img alt=\"tutorialspoint\" src=\"/plsql/images/logo.png\"/>\n</a>\n</h1>\n<ul class=\"tp-inline-block pull-right\" id=\"tp-head-icons\">\n<li>\n<div class=\"tp-second-nav tp-display-none tp-pointer\" onclick=\"openNav()\">\n<i class=\"fa fa-th-large fa-lg\"></i>\n</div>\n</li>\n</ul>\n<button class=\"btn btn-responsive-nav btn-inverse\" data-target=\".nav-main-collapse\" data-toggle=\"collapse\" id=\"pull\" style=\"top: 24px!important\"> <i class=\"icon icon-bars\"></i> </button>\n<nav>\n<ul class=\"nav nav-pills nav-top\">\n<li><a href=\"/about/about_careers.htm\" style=\"background: #fffb09; font-weight: bold;\"><i class=\"icon icon-suitcase\"></i> Jobs</a></li>\n<li> <a href=\"/programming_examples/\" target=\"_blank\"><i class=\"fa fa-cubes\"></i> \u00a0Examples</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/whiteboard.htm\"><img alt=\"Whiteboard\" src=\"theme/css/icons/image-editor.png\" title=\"Whiteboard\"/> \u00a0Whiteboard</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/netmeeting.php\"><i class=\"fa-camera\"></i> \u00a0Net Meeting</a> </li>\n<li> <a href=\"/online_dev_tools.htm\"> <i class=\"dev-tools-menu\" style=\"opacity:.5\"></i> Tools </a> </li>\n<li> <a href=\"/articles/index.php\"><i class=\"icon icon-file-text-o\"></i> \u00a0Articles</a> </li>\n<li class=\"top-icons\">\n<ul class=\"social-icons\">\n<li class=\"facebook\"><a data-placement=\"bottom\" href=\"https://www.facebook.com/tutorialspointindia\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Facebook\">Facebook</a></li>\n<li class=\"googleplus\"><a data-placement=\"bottom\" href=\"https://plus.google.com/u/0/116678774017490391259/posts\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Google+\">Google+</a></li>\n<li class=\"twitter\"><a data-placement=\"bottom\" href=\"https://www.twitter.com/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Twitter\">Twitter</a></li>\n<li class=\"linkedin\"><a data-placement=\"bottom\" href=\"https://www.linkedin.com/company/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Linkedin\">Linkedin</a></li>\n<li class=\"youtube\"><a data-placement=\"bottom\" href=\"https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint YouTube\">YouTube</a></li>\n</ul>\n</li>\n</ul>\n</nav>\n</div>\n<div class=\"sidenav\" id=\"mySidenav\">\n<div class=\"navbar nav-main\">\n<div class=\"container\">\n<nav class=\"nav-main mega-menu\">\n<ul class=\"nav nav-pills nav-main\" id=\"mainMenu\">\n<li class=\"dropdown no-sub-menu\"> <a class=\"dropdown\" href=\"index.htm\"><i class=\"icon icon-home\"></i> Home</a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"/questions/index.php\"><i class=\"fa fa-send\"></i> Q/A </a> </li>\n<li class=\"dropdown\"><a class=\"dropdown\" href=\"tutorialslibrary.htm\"><span class=\"tut-lib\"> Library </span></a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"videotutorials/index.htm\"><i class=\"fa-toggle-right\"></i> Videos </a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"tutor_connect/index.php\"><i class=\"fa-user\"> </i> Tutors</a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"codingground.htm\"><i class=\"fa-code\"></i> Coding Ground </a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"https://store.tutorialspoint.com/\"><i class=\"fa-usd\"></i> Store </a> </li>\n<li class=\"dropdown no-sub-menu\">\n<div class=\"searchform-popup\">\n<input autocomplete=\"off\" class=\"header-search-box\" id=\"search-string\" name=\"q\" onblur=\"if (this.value == '') {this.value = 'Search your favorite tutorials...';}\" onfocus=\"if (this.value == 'Search your favorite tutorials...') {this.value = '';}\" placeholder=\"Search your favorite tutorials...\" type=\"text\"/>\n<div class=\"magnifying-glass\"><i class=\"icon-search\"></i> Search </div>\n</div>\n</li>\n</ul>\n</nav>\n</div>\n</div>\n</div>\n</header></body></html>\n\n<div style=\"clear:both;\"></div>\n<div class=\"main\" role=\"main\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-2\">\n<aside class=\"sidebar\">\n<div class=\"mini-logo\">\n<img alt=\"PL/SQL Tutorial\" src=\"/plsql/images/plsql-mini-logo.jpg\">\n</img></div>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">PL/SQL Tutorial</li>\n<li><a href=\"/plsql/index.htm\">PL/SQL - Home</a></li>\n<li><a href=\"/plsql/plsql_overview.htm\">PL/SQL - Overview</a></li>\n<li><a href=\"/plsql/plsql_environment_setup.htm\">PL/SQL - Environment</a></li>\n<li><a href=\"/plsql/plsql_basic_syntax.htm\">PL/SQL - Basic Syntax</a></li>\n<li><a href=\"/plsql/plsql_data_types.htm\">PL/SQL - Data Types</a></li>\n<li><a href=\"/plsql/plsql_variable_types.htm\">PL/SQL - Variables</a></li>\n<li><a href=\"/plsql/plsql_constants.htm\">PL/SQL - Constants and Literals</a></li>\n<li><a href=\"/plsql/plsql_operators.htm\">PL/SQL - Operators</a></li>\n<li><a href=\"/plsql/plsql_conditional_control.htm\">PL/SQL - Conditions</a></li>\n<li><a href=\"/plsql/plsql_loops.htm\">PL/SQL - Loops </a></li>\n<li><a href=\"/plsql/plsql_strings.htm\">PL/SQL - Strings</a></li>\n<li><a href=\"/plsql/plsql_arrays.htm\">PL/SQL - Arrays</a></li>\n<li><a href=\"/plsql/plsql_procedures.htm\">PL/SQL - Procedures</a></li>\n<li><a href=\"/plsql/plsql_functions.htm\">PL/SQL - Functions</a></li>\n<li><a href=\"/plsql/plsql_cursors.htm\">PL/SQL - Cursors</a></li>\n<li><a href=\"/plsql/plsql_records.htm\">PL/SQL - Records</a></li>\n<li><a href=\"/plsql/plsql_exceptions.htm\">PL/SQL - Exceptions</a></li>\n<li><a href=\"/plsql/plsql_triggers.htm\">PL/SQL - Triggers</a></li>\n<li><a href=\"/plsql/plsql_packages.htm\">PL/SQL - Packages</a></li>\n<li><a href=\"/plsql/plsql_collections.htm\">PL/SQL - Collections</a></li>\n<li><a href=\"/plsql/plsql_transactions.htm\">PL/SQL - Transactions</a></li>\n<li><a href=\"/plsql/plsql_date_time.htm\">PL/SQL - Date &amp; Time</a></li>\n<li><a href=\"/plsql/plsql_dbms_output.htm\">PL/SQL - DBMS Output</a></li>\n<li><a href=\"/plsql/plsql_object_oriented.htm\">PL/SQL - Object Oriented</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">PL/SQL Useful Resources</li>\n<li><a href=\"/plsql/plsql_questions_answers.htm\">PL/SQL - Questions and Answers</a></li>\n<li><a href=\"/plsql/plsql_quick_guide.htm\">PL/SQL - Quick Guide</a></li>\n<li><a href=\"/plsql/plsql_useful_resources.htm\">PL/SQL - Useful Resources</a></li>\n<li><a href=\"/plsql/plsql_discussion.htm\">PL/SQL - Discussion</a></li>\n</ul>\n<ul class=\"nav nav-list primary push-bottom left-menu special\">\n<li class=\"sreading\">Selected Reading</li>\n<li><a href=\"/upsc_ias_exams.htm\" target=\"_top\">UPSC IAS Exams Notes</a></li>\n<li><a href=\"/developers_best_practices/index.htm\" target=\"_top\">Developer's Best Practices</a></li>\n<li><a href=\"/questions_and_answers.htm\" target=\"_top\">Questions and Answers</a></li>\n<li><a href=\"/effective_resume_writing.htm\" target=\"_top\">Effective Resume Writing</a></li>\n<li><a href=\"/hr_interview_questions/index.htm\" target=\"_top\">HR Interview Questions</a></li>\n<li><a href=\"/computer_glossary.htm\" target=\"_top\">Computer Glossary</a></li>\n<li><a href=\"/computer_whoiswho.htm\" target=\"_top\">Who is Who</a></li>\n</ul>\n</aside>\n</div>\n<!-- PRINTING STARTS HERE -->\n<div class=\"row\">\n<div class=\"content\">\n<div class=\"col-md-7 middle-col\">\n<h1>PL/SQL - Data Types</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/plsql/plsql_basic_syntax.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/plsql/plsql_variable_types.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>In this chapter, we will discuss the Data Types in PL/SQL. The PL/SQL variables, constants and parameters must have a valid data type, which specifies a storage format, constraints, and a valid range of values. We will focus on the <b>SCALAR</b> and the <b>LOB</b> data types in this chapter. The other two data types will be covered in other chapters.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\">S.No</th>\n<th style=\"text-align:center;\">Category &amp; Description</th>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">1</td>\n<td><p><b>Scalar</b></p>\n<p>Single values with no internal components, such as a <b>NUMBER, DATE,</b> or <b>BOOLEAN</b>.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">2</td>\n<td><p><b>Large Object (LOB)</b></p>\n<p>Pointers to large objects that are stored separately from other data items, such as text, graphic images, video clips, and sound waveforms.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">3</td>\n<td><p><b>Composite</b></p>\n<p>Data items that have internal components that can be accessed individually. For example, collections and records.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">4</td>\n<td><p><b>Reference</b></p>\n<p>Pointers to other data items.</p></td>\n</tr>\n</table>\n<h2>PL/SQL Scalar Data Types and Subtypes</h2>\n<p>PL/SQL Scalar Data Types and Subtypes come under the following categories \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\">S.No</th>\n<th style=\"text-align:center;\">Date Type &amp; Description</th>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">1</td>\n<td><p><b>Numeric</b></p>\n<p>Numeric values on which arithmetic operations are performed.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">2</td>\n<td><p><b>Character</b></p>\n<p>Alphanumeric values that represent single characters or strings of characters.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">3</td>\n<td><p><b>Boolean</b></p>\n<p>Logical values on which logical operations are performed.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">4</td>\n<td><p><b>Datetime</b></p>\n<p>Dates and times.</p></td>\n</tr>\n</table>\n<p>PL/SQL provides subtypes of data types. For example, the data type NUMBER has a subtype called INTEGER. You can use the subtypes in your PL/SQL program to make the data types compatible with data types in other programs while embedding the PL/SQL code in another program, such as a Java program.</p>\n<h2>PL/SQL Numeric Data Types and Subtypes</h2>\n<p>Following table lists out the PL/SQL pre-defined numeric data types and their sub-types \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\">S.No</th>\n<th style=\"text-align:center;\">Data Type &amp; Description</th>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">1</td>\n<td><p><b>PLS_INTEGER</b></p>\n<p>Signed integer in range -2,147,483,648 through 2,147,483,647, represented in 32 bits</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">2</td>\n<td><p><b>BINARY_INTEGER</b></p>\n<p>Signed integer in range -2,147,483,648 through 2,147,483,647, represented in 32 bits</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">3</td>\n<td><p><b>BINARY_FLOAT</b></p>\n<p>Single-precision IEEE 754-format floating-point number</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">4</td>\n<td><p><b>BINARY_DOUBLE</b></p>\n<p>Double-precision IEEE 754-format floating-point number</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">5</td>\n<td><p><b>NUMBER(prec, scale)</b></p>\n<p>Fixed-point or floating-point number with absolute value in range 1E-130 to (but not including) 1.0E126. A NUMBER variable can also represent 0</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">6</td>\n<td><p><b>DEC(prec, scale)</b></p>\n<p>ANSI specific fixed-point type with maximum precision of 38 decimal digits</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">7</td>\n<td><p><b>DECIMAL(prec, scale)</b></p>\n<p>IBM specific fixed-point type with maximum precision of 38 decimal digits</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">8</td>\n<td><p><b>NUMERIC(pre, secale)</b></p>\n<p>Floating type with maximum precision of 38 decimal digits</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">9</td>\n<td><p><b>DOUBLE PRECISION</b></p>\n<p>ANSI specific floating-point type with maximum precision of 126 binary digits (approximately 38 decimal digits)</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">10</td>\n<td><p><b>FLOAT</b></p>\n<p>ANSI and IBM specific floating-point type with maximum precision of 126 binary digits (approximately 38 decimal digits)</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">11</td>\n<td><p><b>INT</b></p>\n<p>ANSI specific integer type with maximum precision of 38 decimal digits</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">12</td>\n<td><p><b>INTEGER</b></p>\n<p>ANSI and IBM specific integer type with maximum precision of 38 decimal digits</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">13</td>\n<td><p><b>SMALLINT</b></p>\n<p>ANSI and IBM specific integer type with maximum precision of 38 decimal digits</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">14</td>\n<td><p><b>REAL</b></p>\n<p>Floating-point type with maximum precision of 63 binary digits (approximately 18 decimal digits)</p></td>\n</tr>\n</table>\n<p>Following is a valid declaration \u2212</p>\n<pre class=\"prettyprint notranslate\">\nDECLARE \n   num1 INTEGER; \n   num2 REAL; \n   num3 DOUBLE PRECISION; \nBEGIN \n   null; \nEND; \n/ \n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"prettyprint notranslate\">\nPL/SQL procedure successfully completed \n</pre>\n<h2>PL/SQL Character Data Types and Subtypes</h2>\n<p>Following is the detail of PL/SQL pre-defined character data types and their sub-types \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\">S.No</th>\n<th style=\"text-align:center;\">Data Type &amp; Description</th>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">1</td>\n<td><p><b>CHAR</b></p>\n<p>Fixed-length character string with maximum size of 32,767 bytes</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">2</td>\n<td><p><b>VARCHAR2</b></p>\n<p>Variable-length character string with maximum size of 32,767 bytes</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">3</td>\n<td><p><b>RAW</b></p>\n<p>Variable-length binary or byte string with maximum size of 32,767 bytes, not interpreted by PL/SQL</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">4</td>\n<td><p><b>NCHAR</b></p>\n<p>Fixed-length national character string with maximum size of 32,767 bytes</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">5</td>\n<td><p><b>NVARCHAR2</b></p>\n<p>Variable-length national character string with maximum size of 32,767 bytes</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">6</td>\n<td><p><b>LONG</b></p>\n<p>Variable-length character string with maximum size of 32,760 bytes</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">7</td>\n<td><p><b>LONG RAW</b></p>\n<p>Variable-length binary or byte string with maximum size of 32,760 bytes, not interpreted by PL/SQL</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">8</td>\n<td><p><b>ROWID</b></p>\n<p>Physical row identifier, the address of a row in an ordinary table</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">9</td>\n<td><p><b>UROWID</b></p>\n<p>Universal row identifier (physical, logical, or foreign row identifier)</p></td>\n</tr>\n</table>\n<h2>PL/SQL Boolean Data Types</h2>\n<p>The <b>BOOLEAN</b> data type stores logical values that are used in logical operations. The logical values are the Boolean values <b>TRUE</b> and <b>FALSE</b> and the value <b>NULL</b>.</p>\n<p>However, SQL has no data type equivalent to BOOLEAN. Therefore, Boolean values cannot be used in \u2212 </p>\n<ul class=\"list\">\n<li>SQL statements</li>\n<li>Built-in SQL functions (such as <b>TO_CHAR</b>)</li>\n<li>PL/SQL functions invoked from SQL statements</li>\n</ul>\n<h2>PL/SQL Datetime and Interval Types</h2>\n<p>The <b>DATE</b> datatype is used to store fixed-length datetimes, which include the time of day in seconds since midnight. Valid dates range from January 1, 4712 BC to December 31, 9999 AD.</p>\n<p>The default date format is set by the Oracle initialization parameter NLS_DATE_FORMAT. For example, the default might be 'DD-MON-YY', which includes a two-digit number for the day of the month, an abbreviation of the month name, and the last two digits of the year. For example, 01-OCT-12.</p>\n<p>Each DATE includes the century, year, month, day, hour, minute, and second. The following table shows the valid values for each field \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\">Field Name</th>\n<th style=\"text-align:center;\">Valid Datetime Values</th>\n<th style=\"text-align:center;\">Valid Interval Values</th>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">YEAR</td>\n<td>-4712 to 9999 (excluding year 0)</td>\n<td style=\"vertical-align:middle;\">Any nonzero integer</td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">MONTH</td>\n<td>01 to 12</td>\n<td>0 to 11</td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">DAY</td>\n<td>01 to 31 (limited by the values of MONTH and YEAR, according to the rules of the calendar for the locale)</td>\n<td style=\"vertical-align:middle;\">Any nonzero integer</td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">HOUR</td>\n<td>00 to 23</td>\n<td>0 to 23</td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">MINUTE</td>\n<td>00 to 59</td>\n<td>0 to 59</td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">SECOND</td>\n<td>00 to 59.9(n), where 9(n) is the precision of time fractional seconds</td>\n<td>0 to 59.9(n), where 9(n) is the precision of interval fractional seconds</td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">TIMEZONE_HOUR</td>\n<td>-12 to 14 (range accommodates daylight savings time changes)</td>\n<td style=\"vertical-align:middle;\">Not applicable</td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">TIMEZONE_MINUTE</td>\n<td>00 to 59</td>\n<td style=\"vertical-align:middle;\">Not applicable</td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">TIMEZONE_REGION</td>\n<td>Found in the dynamic performance view V$TIMEZONE_NAMES</td>\n<td style=\"vertical-align:middle;\">Not applicable</td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">TIMEZONE_ABBR</td>\n<td>Found in the dynamic performance view V$TIMEZONE_NAMES</td>\n<td style=\"vertical-align:middle;\">Not applicable</td>\n</tr>\n</table>\n<h2>PL/SQL Large Object (LOB) Data Types</h2>\n<p>Large Object (LOB) data types refer to large data items such as text, graphic images, video clips, and sound waveforms. LOB data types allow efficient, random, piecewise access to this data. Following are the predefined PL/SQL LOB data types \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center; width:20%\">Data Type</th>\n<th style=\"text-align:center;\">Description</th>\n<th style=\"text-align:center;\">Size</th>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">BFILE</td>\n<td>Used to store large binary objects in operating system files outside the database.</td>\n<td>System-dependent. Cannot exceed 4 gigabytes (GB).</td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">BLOB</td>\n<td>Used to store large binary objects in the database.</td>\n<td>8 to 128 terabytes (TB)</td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">CLOB</td>\n<td>Used to store large blocks of character data in the database.</td>\n<td>8 to 128 TB</td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">NCLOB</td>\n<td>Used to store large blocks of NCHAR data in the database.</td>\n<td>8 to 128 TB</td>\n</tr>\n</table>\n<h2>PL/SQL User-Defined Subtypes</h2>\n<p>A subtype is a subset of another data type, which is called its base type. A subtype has the same valid operations as its base type, but only a subset of its valid values.</p>\n<p>PL/SQL predefines several subtypes in package <b>STANDARD</b>. For example, PL/SQL predefines the subtypes <b>CHARACTER</b> and <b>INTEGER</b> as follows \u2212</p>\n<pre class=\"result notranslate\">\nSUBTYPE CHARACTER IS CHAR; \nSUBTYPE INTEGER IS NUMBER(38,0);\n</pre>\n<p>You can define and use your own subtypes. The following program illustrates defining and using a user-defined subtype \u2212</p>\n<pre class=\"prettyprint notranslate\">\nDECLARE \n   SUBTYPE name IS char(20); \n   SUBTYPE message IS varchar2(100); \n   salutation name; \n   greetings message; \nBEGIN \n   salutation := 'Reader '; \n   greetings := 'Welcome to the World of PL/SQL'; \n   dbms_output.put_line('Hello ' || salutation || greetings); \nEND; \n/ \n</pre>\n<p>When the above code is executed at the SQL prompt, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nHello Reader Welcome to the World of PL/SQL \n \nPL/SQL procedure successfully completed. \n</pre>\n<h2>NULLs in PL/SQL</h2>\n<p>PL/SQL NULL values represent <b>missing</b> or <b>unknown data</b> and they are not an integer, a character, or any other specific data type. Note that <b>NULL</b> is not the same as an empty data string or the null character value <b>'\\0'</b>. A null can be assigned but it cannot be equated with anything, including itself.</p>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/plsql/plsql_basic_syntax.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/plsql/plsql_variable_types.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n<div class=\"row\">\n<div class=\"col-md-3\" id=\"rightbar\">\n<div class=\"simple-ad\">\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.facebook.com/sharer.php?u=' + 'https://www.tutorialspoint.com/plsql/plsql_data_types.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/facebookIcon.jpg\">\n</img></a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://twitter.com/share?url=' + 'https://www.tutorialspoint.com/plsql/plsql_data_types.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/twitterIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'https://www.tutorialspoint.com/plsql/plsql_data_types.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/linkedinIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=https://www.tutorialspoint.com/plsql/plsql_data_types.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/googlePlusIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.stumbleupon.com/submit?url=https://www.tutorialspoint.com/plsql/plsql_data_types.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/StumbleUponIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://reddit.com/submit?url=https://www.tutorialspoint.com/plsql/plsql_data_types.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/reddit.jpg\"/>\n</a>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\ngoogle_ad_format = \"300x250_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 600;\ngoogle_ad_format = \"300x600_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"ca-pub-2537027957187252\";\n/* Right Side Ad */\ngoogle_ad_slot = \"right_side_ad\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\n//-->\n</script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"footer-copyright\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-1\">\n<a class=\"logo\" href=\"index.htm\"> <img alt=\"Tutorials Point\" class=\"img-responsive\" src=\"/scripts/img/logo-footer.png\"/> </a>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<nav id=\"sub-menu\">\n<ul>\n<li><a href=\"/about/about_privacy.htm\">Privacy Policy</a></li>\n<li><a href=\"/about/about_cookies.htm\">Cookies Policy</a></li>\n<li><a href=\"/about/contact_us.htm\">Contact</a></li>\n</ul>\n</nav>\n</div>\n<div class=\"col-md-3 col-sm-12 col-xs-12\">\n<p>\u00a9 Copyright 2019. All Rights Reserved.</p>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<div class=\"news-group\">\n<input autocomplete=\"off\" class=\"form-control-foot search\" id=\"textemail\" name=\"textemail\" onblur=\"if (this.value == '') {this.value = 'Enter email for newsletter...';}\" onfocus=\"if (this.value == 'Enter email for newsletter...') {this.value = '';}\" placeholder=\"Enter email for newsletter\" type=\"text\"/>\n<span class=\"input-group-btn\"> <button class=\"btn btn-default btn-footer\" id=\"btnemail\" onclick=\"javascript:void(0);\" type=\"submit\">go</button> </span>\n<div id=\"newsresponse\"></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"privacy-banner\">\n<div>\n<p>\n      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.\n      <a href=\"javascript:void(0)\" id=\"banner-accept\">Accept</a>\n<a href=\"/about/about_cookies.htm\" id=\"banner-learn\" target=\"_blank\">Learn more</a>\n</p>\n</div>\n</div>\n<script>\n// Banner Trigger if Not Closed\nif (!localStorage.bannerClosed) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n} else {\n  document.getElementById('privacy-banner').style.display = \"none\";\n}\ndocument.getElementById('banner-accept').addEventListener('click', function() {\n  document.getElementById('privacy-banner').style.display = \"none\";\n  localStorage.bannerClosed = 'true';\n});\nif (navigator.userAgent.match(/Opera|OPR\\//)) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n}\n</script>\n<!-- Libs -->\n<script src=\"/theme/js/custom-min.js?v=7\"></script>\n<script src=\"https://www.google-analytics.com/urchin.js\">\n</script>\n<script>\n_uacct = \"UA-232293-6\";\nurchinTracker();\n$('.pg-icon').click(function(){\n   $('.wrapLoader').show();\n});\n</script>\n\n\n\n", "url": "https://www.tutorialspoint.com/plsql/plsql_data_types.htm", "title_html": "<h1>PL/SQL - Data Types</h1>"}