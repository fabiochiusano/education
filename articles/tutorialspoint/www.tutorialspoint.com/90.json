{"content": "\n Operating System - Multi-Threading \n  \n Advertisements \n \n<!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//-->\n\n\n \n  \n \n Previous Page\n \n \nNext Page \u00a0\n \n  \n  \n What is Thread? \n A thread is a flow of execution through the process code, with its own program counter that keeps track of which instruction to execute next, system registers which hold its current working variables, and a stack which contains the execution history. \n A thread shares with its peer threads few information like code segment, data segment and open files. When one thread alters a code segment memory item, all other threads see that. \n A thread is also called a lightweight process. Threads provide a way to improve application performance through parallelism. Threads represent a software approach to improving performance of operating system by reducing the overhead thread is equivalent to a classical process. \n Each thread belongs to exactly one process and no thread can exist outside a process. Each thread represents a separate flow of control. Threads have been successfully used in implementing network servers and web server. They also provide a suitable foundation for parallel execution of applications on shared memory multiprocessors. The following figure shows the working of a single-threaded and a multithreaded process. \n  \n Difference between Process and Thread \n \n\nS.N.\nProcess\nThread\n\n\n1\nProcess is heavy weight or resource intensive.\nThread is light weight, taking lesser resources than a process.\n\n\n2\nProcess switching needs interaction with operating system.\nThread switching does not need to interact with operating system.\n\n\n3\nIn multiple processing environments, each process executes the same code but has its own memory and file resources.\nAll threads can share same set of open files, child processes.\n\n\n4\nIf one process is blocked, then no other process can execute until the first process is unblocked.\nWhile one thread is blocked and waiting, a second thread in the same task can run.\n\n\n5\nMultiple processes without using threads use more resources.\nMultiple threaded processes use fewer resources.\n\n\n6\nIn multiple processes each process operates independently of the others.\nOne thread can read, write or change another thread's data.\n\n \n Advantages of Thread \n \nThreads minimize the context switching time.\nUse of threads provides concurrency within a process.\nEfficient communication.\nIt is more economical to create and context switch threads.\nThreads allow utilization of multiprocessor architectures to a greater scale and efficiency.\n \n Types of Thread \n Threads are implemented in following two ways \u2212 \n \nUser Level Threads \u2212 User managed threads.\nKernel Level Threads \u2212 Operating System managed threads acting on kernel, an operating system core.\n \n User Level Threads \n In this case, the thread management kernel is not aware of the existence of threads. The thread library contains code for creating and destroying threads, for passing message and data between threads, for scheduling thread execution and for saving and restoring thread contexts. The application starts with a single thread. \n  \n Advantages \n \nThread switching does not require Kernel mode privileges.\nUser level thread can run on any operating system.\nScheduling can be application specific in the user level thread.\nUser level threads are fast to create and manage.\n \n Disadvantages \n \nIn a typical operating system, most system calls are blocking.\nMultithreaded application cannot take advantage of multiprocessing.\n \n Kernel Level Threads \n In this case, thread management is done by the Kernel. There is no thread management code in the application area. Kernel threads are supported directly by the operating system. Any application can be programmed to be multithreaded. All of the threads within an application are supported within a single process. \n The Kernel maintains context information for the process as a whole and for individuals threads within the process. Scheduling by the Kernel is done on a thread basis. The Kernel performs thread creation, scheduling and management in Kernel space. Kernel threads are generally slower to create and manage than the user threads. \n Advantages \n \nKernel can simultaneously schedule multiple threads from the same process on multiple processes.\nIf one thread in a process is blocked, the Kernel can schedule another thread of the same process.\nKernel routines themselves can be multithreaded.\n \n Disadvantages \n \nKernel threads are generally slower to create and manage than the user threads.\nTransfer of control from one thread to another within the same process requires a mode switch to the Kernel.\n \n Multithreading Models \n Some operating system provide a combined user level thread and Kernel level thread facility. Solaris is a good example of this combined approach. In a combined system, multiple threads within the same application can run in parallel on multiple processors and a blocking system call need not block the entire process. Multithreading models are three types \n \nMany to many relationship.\nMany to one relationship.\nOne to one relationship.\n \n Many to Many Model \n The many-to-many model multiplexes any number of user threads onto an equal or smaller number of kernel threads. \n The following diagram shows the many-to-many threading model where 6 user level threads are multiplexing with 6 kernel level threads. In this model, developers can create as many user threads as necessary and the corresponding Kernel threads can run in parallel on a multiprocessor machine. This model provides the best accuracy on concurrency and when a thread performs a blocking system call, the kernel can schedule another thread for execution. \n  \n Many to One Model \n Many-to-one model maps many user level threads to one Kernel-level thread. Thread management is done in user space by the thread library. When thread makes a blocking system call, the entire process will be blocked. Only one thread can access the Kernel at a time, so multiple threads are unable to run in parallel on multiprocessors. \n If the user-level thread libraries are implemented in the operating system in such a way that the system does not support them, then the Kernel threads use the many-to-one relationship modes. \n  \n One to One Model \n There is one-to-one relationship of user-level thread to the kernel-level thread. This model provides more concurrency than the many-to-one model. It also allows another thread to run when a thread makes a blocking system call. It supports multiple threads to execute in parallel on microprocessors. \n Disadvantage of this model is that creating user thread requires the corresponding Kernel thread. OS/2, windows NT and windows 2000 use one to one relationship model. \n  \n Difference between User-Level & Kernel-Level Thread \n \n\nS.N.\nUser-Level Threads\nKernel-Level Thread\n\n\n1\nUser-level threads are faster to create and manage.\nKernel-level threads are slower to create and manage.\n\n\n2\nImplementation is by a thread library at the user level.\nOperating system supports creation of Kernel threads.\n\n\n3\nUser-level thread is generic and can run on any operating system.\nKernel-level thread is specific to the operating system.\n\n\n4\nMulti-threaded applications cannot take advantage of multiprocessing.\nKernel routines themselves can be multithreaded.\n\n \n  \n \n Previous Page\n \n \n Print\n \n \nNext Page \u00a0\n \n  \n  PRINTING ENDS HERE  \n \nAdvertisements\n<!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//-->\n\n\n \n", "title": "Operating System - Multi-Threading", "content_html": "<div class=\"col-md-7 middle-col\">\n<h1>Operating System - Multi-Threading</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/operating_system/os_process_scheduling_algorithms.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/operating_system/os_memory_management.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<h2>What is Thread?</h2>\n<p>A thread is a flow of execution through the process code, with its own program counter that keeps track of which instruction to execute next, system registers which hold its current working variables, and a stack which contains the execution history.</p>\n<p>A thread shares with its peer threads few information like code segment, data segment and open files. When one thread alters a code segment memory item, all other threads see that.</p>\n<p>A thread is also called a <b>lightweight process</b>. Threads provide a way to improve application performance through parallelism. Threads represent a software approach to improving performance of operating system by reducing the overhead thread is equivalent to a classical process.</p>\n<p>Each thread belongs to exactly one process and no thread can exist outside a process. Each thread represents a separate flow of control. Threads have been successfully used in implementing network servers and web server. They also provide a suitable foundation for parallel execution of applications on shared memory multiprocessors. The following figure shows the working of a single-threaded and a multithreaded process.</p>\n<img alt=\"Single vs Multithreaded Process\" src=\"/operating_system/images/thread_processes.jpg\"/>\n<h2>Difference between Process and Thread</h2>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"width:5%;\">S.N.</th>\n<th style=\"width:45%;\">Process</th>\n<th>Thread</th>\n</tr>\n<tr>\n<td>1</td>\n<td>Process is heavy weight or resource intensive.</td>\n<td>Thread is light weight, taking lesser resources than a process.</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Process switching needs interaction with operating system.</td>\n<td>Thread switching does not need to interact with operating system.</td>\n</tr>\n<tr>\n<td>3</td>\n<td>In multiple processing environments, each process executes the same code but has its own memory and file resources.</td>\n<td>All threads can share same set of open files, child processes.</td>\n</tr>\n<tr>\n<td>4</td>\n<td>If one process is blocked, then no other process can execute until the first process is unblocked.</td>\n<td>While one thread is blocked and waiting, a second thread in the same task can run.</td>\n</tr>\n<tr>\n<td>5</td>\n<td>Multiple processes without using threads use more resources.</td>\n<td>Multiple threaded processes use fewer resources.</td>\n</tr>\n<tr>\n<td>6</td>\n<td>In multiple processes each process operates independently of the others.</td>\n<td>One thread can read, write or change another thread's data.</td>\n</tr>\n</table>\n<h2>Advantages of Thread</h2>\n<ul class=\"list\">\n<li>Threads minimize the context switching time.</li>\n<li>Use of threads provides concurrency within a process.</li>\n<li>Efficient communication.</li>\n<li>It is more economical to create and context switch threads.</li>\n<li>Threads allow utilization of multiprocessor architectures to a greater scale and efficiency.</li>\n</ul>\n<h2>Types of Thread</h2>\n<p>Threads are implemented in following two ways \u2212</p>\n<ul class=\"list\">\n<li><p><b>User Level Threads</b> \u2212 User managed threads.</p></li>\n<li><p><b>Kernel Level Threads</b> \u2212 Operating System managed threads acting on kernel, an operating system core.</p></li>\n</ul>\n<h2>User Level Threads</h2>\n<p>In this case, the thread management kernel is not aware of the existence of threads. The thread library contains code for creating and destroying threads, for passing message and data between threads, for scheduling thread execution and for saving and restoring thread contexts. The application starts with a single thread.</p>\n<img alt=\"User level thread\" src=\"/operating_system/images/user_threads.jpg\"/>\n<h3>Advantages</h3>\n<ul class=\"list\">\n<li>Thread switching does not require Kernel mode privileges.</li>\n<li>User level thread can run on any operating system.</li>\n<li>Scheduling can be application specific in the user level thread.</li>\n<li>User level threads are fast to create and manage.</li>\n</ul>\n<h3>Disadvantages</h3>\n<ul class=\"list\">\n<li>In a typical operating system, most system calls are blocking.</li>\n<li>Multithreaded application cannot take advantage of multiprocessing.</li>\n</ul>\n<h2>Kernel Level Threads</h2>\n<p>In this case, thread management is done by the Kernel. There is no thread management code in the application area. Kernel threads are supported directly by the operating system. Any application can be programmed to be multithreaded. All of the threads within an application are supported within a single process.</p>\n<p>The Kernel maintains context information for the process as a whole and for individuals threads within the process. Scheduling by the Kernel is done on a thread basis. The Kernel performs thread creation, scheduling and management in Kernel space. Kernel threads are generally slower to create and manage than the user threads.</p>\n<h3>Advantages</h3>\n<ul class=\"list\">\n<li>Kernel can simultaneously schedule multiple threads from the same process on multiple processes.</li>\n<li>If one thread in a process is blocked, the Kernel can schedule another thread of the same process.</li>\n<li>Kernel routines themselves can be multithreaded.</li>\n</ul>\n<h3>Disadvantages</h3>\n<ul class=\"list\">\n<li>Kernel threads are generally slower to create and manage than the user threads.</li>\n<li>Transfer of control from one thread to another within the same process requires a mode switch to the Kernel.</li>\n</ul>\n<h2>Multithreading Models</h2>\n<p>Some operating system provide a combined user level thread and Kernel level thread facility. Solaris is a good example of this combined approach. In a combined system, multiple threads within the same application can run in parallel on multiple processors and a blocking system call need not block the entire process. Multithreading models are three types</p>\n<ul class=\"list\">\n<li>Many to many relationship.</li>\n<li>Many to one relationship.</li>\n<li>One to one relationship.</li>\n</ul>\n<h2>Many to Many Model</h2>\n<p>The many-to-many model multiplexes any number of user threads onto an equal or smaller number of kernel threads.</p>\n<p>The following diagram shows the many-to-many threading model where 6 user level threads are multiplexing with 6 kernel level threads. In this model, developers can create as many user threads as necessary and the corresponding Kernel threads can run in parallel on a multiprocessor machine. This model provides the best accuracy on concurrency and when a thread performs a blocking system call, the kernel can schedule another thread for execution.</p>\n<img alt=\"Many to many thread model\" src=\"/operating_system/images/many_to_many.jpg\"/>\n<h2>Many to One Model</h2>\n<p>Many-to-one model maps many user level threads to one Kernel-level thread. Thread management is done in user space by the thread library. When thread makes a blocking system call, the entire process will be blocked. Only one thread can access the Kernel at a time, so multiple threads are unable to run in parallel on multiprocessors.</p>\n<p>If the user-level thread libraries are implemented in the operating system in such a way that the system does not support them, then the Kernel threads use the many-to-one relationship modes.</p>\n<img alt=\"Many to one thread model\" src=\"/operating_system/images/many_to_one.jpg\"/>\n<h2>One to One Model</h2>\n<p>There is one-to-one relationship of user-level thread to the kernel-level thread. This model provides more concurrency than the many-to-one model. It also allows another thread to run when a thread makes a blocking system call. It supports multiple threads to execute in parallel on microprocessors.</p>\n<p>Disadvantage of this model is that creating user thread requires the corresponding Kernel thread. OS/2, windows NT and windows 2000 use one to one relationship model.</p>\n<img alt=\"One to one thread model\" src=\"/operating_system/images/one_to_one.jpg\"/>\n<h2>Difference between User-Level &amp; Kernel-Level Thread</h2>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"width:5%; text-align:center\">S.N.</th>\n<th style=\"width:45%; text-align:center\">User-Level Threads</th>\n<th style=\"width:45%; text-align:center\">Kernel-Level Thread</th>\n</tr>\n<tr>\n<td>1</td>\n<td>User-level threads are faster to create and manage.</td>\n<td>Kernel-level threads are slower to create and manage.</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Implementation is by a thread library at the user level.</td>\n<td>Operating system supports creation of Kernel threads.</td>\n</tr>\n<tr>\n<td>3</td>\n<td>User-level thread is generic and can run on any operating system.</td>\n<td>Kernel-level thread is specific to the operating system.</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Multi-threaded applications cannot take advantage of multiprocessing.</td>\n<td>Kernel routines themselves can be multithreaded.</td>\n</tr>\n</table>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/operating_system/os_process_scheduling_algorithms.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/operating_system/os_memory_management.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>", "html": "<!DOCTYPE html>\n\n<!--[if IE 8]><html class=\"ie ie8\"> <![endif]-->\n<!--[if IE 9]><html class=\"ie ie9\"> <![endif]-->\n<!--[if gt IE 9]><!--> <html> <!--<![endif]-->\n<head>\n<!-- Basic -->\n<meta charset=\"utf-8\"/>\n<title>Operating System Multi-Threading</title>\n<meta content=\"Operating System Multi-Threading - Learning operating system in simple and easy steps starting from basic to advanced concepts with examples including Definition, Functions, Conceptual View, Program Execution, Program Execution, Communication, Error Handling, User Account Management, Multitasking, Real Time System, Process, Program, Memory Management, and Security, Overview, Types, Services, Properties, Processes, Process Scheduling, Scheduling Algorithms, Multithreading, Virtual Memory, I/O Hardware, I/O Software, File System, Linux.\" name=\"description\">\n<meta content=\"Operating System, Tutorials, Learning, Beginners, Basics, Definition, Functions, Conceptual View, Program Execution, Program Execution, Communication, Error Handling, User Account Management, Multitasking, Real Time System, Process, Program, Memory Management, Security, Overview, Types, Services, Properties, Processes, Process Scheduling, Scheduling Algorithms, Multithreading, Virtual Memory, I/O Hardware, I/O Software, File System, Linux.\" name=\"Keywords\"/>\n<base href=\"https://www.tutorialspoint.com/\"/>\n<link href=\"/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"/>\n<meta content=\"width=device-width,initial-scale=1.0,user-scalable=yes\" name=\"viewport\"/>\n<meta content=\"en_US\" property=\"og:locale\">\n<meta content=\"website\" property=\"og:type\"/>\n<meta content=\"471319149685276\" property=\"fb:app_id\"/>\n<meta content=\"www.tutorialspoint.com\" property=\"og:site_name\"/>\n<meta content=\"yes\" name=\"apple-mobile-web-app-capable\"/>\n<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"/>\n<meta content=\"tutorialspoint.com\" name=\"author\"/>\n<script src=\"https://www.tutorialspoint.com/theme/js/script-min-v4.js?v=2\" type=\"text/javascript\"></script>\n<link href=\"https://www.tutorialspoint.com/theme/css/style-min.css?v=3.1\" rel=\"stylesheet\"/>\n<script>\r\nfunction openNav() {\t\r\n  document.getElementById(\"mySidenav\").style.width = \"250px\";\r\n  document.getElementById(\"right_obs\").style.display = \"block\";\r\n}\r\nfunction closeNav() {\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\nfunction close_obs_sidenav(){\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\n</script>\n<!-- Head Libs -->\n<!--[if IE 8]>\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/theme/css/ie8.css\">\r\n<![endif]-->\n<style>\r\n#privacy-banner {\r\n    position: fixed;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    max-width: 100%;\r\n    padding: 1rem .5rem;\r\n    background: #fff;\r\n    z-index: 1030;\r\n    color: #000;\r\n    font-size: 14px;\r\n    margin: 0;\r\n    display: none;\r\n    border-top: 2px solid rgb(130, 130, 130);\r\n  }\r\n  #privacy-banner p {\r\n    margin: 0;\r\n    color: #000;\r\n    text-align: center;\r\n  }\r\n  #privacy-banner a {\r\n    text-decoration: none;\r\n    margin: 20px auto 0 auto;\r\n    display: block;\r\n    max-width: 150px;\r\n  }\r\n  #privacy-banner a:hover {\r\n    text-decoration: underline;\r\n  }\r\n  #banner-learn {\r\n    color: #000;\r\n  }\r\n  #banner-accept {\r\n    padding: 7px 15px;\r\n    color: #fff;\r\n    border-radius: 5px;\r\n    background:#737373 !important;\r\n  }\r\n  @media (min-width: 768px) {\r\n    #privacy-banner {\r\n      padding: 1.5rem .5rem;\r\n    }\r\n    #privacy-banner a {\r\n      display: inline-block;\r\n      margin: 0 10px;\r\n    }\r\n}\r\nselect{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }\r\n.btnsbmt{ background: #3896c2 !important;}\r\nul.nav-list.primary>li a.videolink{    background: none; margin: 0px; padding: 0px; border: 1px solid #d6d6d6;}\r\ndiv.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #3896c2 url(/images/pattern.png) repeat center center !important;}\r\n.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #3896c2 !important;}\r\n.submenu-item{ border-bottom: 2px solid #3896c2 !important; border-top: 2px solid #3896c2 !important }\r\n.ace_scroller{overflow: auto!important;}\r\na.demo{font-family: \"Open Sans\",Arial,sans-serif; background:#3896c2; color:#fff; font-size:13px; padding:3px 10px; border:1px solid #d6d6d6; position:absolute; right:5px; margin:-6px 17px 0px 0px;}\r\na.demo:hover{opacity:.8}\r\n</style>\n<script>\r\n$(document).ready(function() {\r\n  $('input[name=\"q\"]').keydown(function(event){\r\n    if(event.keyCode == 13) {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n  });\r\n});\r\n</script>\n</meta></meta></head>\n<body onload=\"prettyPrint()\">\n<div class=\"wrapLoader\">\n<div class=\"imgLoader\">\n<img alt=\"\" height=\"70\" src=\"/images/loading-cg.gif\" width=\"70\"/>\n</div>\n</div>\n<div class=\"display-none\" id=\"right_obs\" onclick=\"close_obs_sidenav()\"></div>\n<header>\n<div class=\"container\">\n<h1 class=\"logo\">\n<a href=\"index.htm\" title=\"tutorialspoint\">\n<img alt=\"tutorialspoint\" src=\"/operating_system/images/logo.png\"/>\n</a>\n</h1>\n<ul class=\"tp-inline-block pull-right\" id=\"tp-head-icons\">\n<li>\n<div class=\"tp-second-nav tp-display-none tp-pointer\" onclick=\"openNav()\">\n<i class=\"fa fa-th-large fa-lg\"></i>\n</div>\n</li>\n</ul>\n<button class=\"btn btn-responsive-nav btn-inverse\" data-target=\".nav-main-collapse\" data-toggle=\"collapse\" id=\"pull\" style=\"top: 24px!important\"> <i class=\"icon icon-bars\"></i> </button>\n<nav>\n<ul class=\"nav nav-pills nav-top\">\n<li><a href=\"/about/about_careers.htm\" style=\"background: #fffb09; font-weight: bold;\"><i class=\"icon icon-suitcase\"></i> Jobs</a></li>\n<li> <a href=\"/programming_examples/\" target=\"_blank\"><i class=\"fa fa-cubes\"></i> \u00a0Examples</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/whiteboard.htm\"><img alt=\"Whiteboard\" src=\"theme/css/icons/image-editor.png\" title=\"Whiteboard\"/> \u00a0Whiteboard</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/netmeeting.php\"><i class=\"fa-camera\"></i> \u00a0Net Meeting</a> </li>\n<li> <a href=\"/online_dev_tools.htm\"> <i class=\"dev-tools-menu\" style=\"opacity:.5\"></i> Tools </a> </li>\n<li> <a href=\"/articles/index.php\"><i class=\"icon icon-file-text-o\"></i> \u00a0Articles</a> </li>\n<li class=\"top-icons\">\n<ul class=\"social-icons\">\n<li class=\"facebook\"><a data-placement=\"bottom\" href=\"https://www.facebook.com/tutorialspointindia\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Facebook\">Facebook</a></li>\n<li class=\"googleplus\"><a data-placement=\"bottom\" href=\"https://plus.google.com/u/0/116678774017490391259/posts\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Google+\">Google+</a></li>\n<li class=\"twitter\"><a data-placement=\"bottom\" href=\"https://www.twitter.com/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Twitter\">Twitter</a></li>\n<li class=\"linkedin\"><a data-placement=\"bottom\" href=\"https://www.linkedin.com/company/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Linkedin\">Linkedin</a></li>\n<li class=\"youtube\"><a data-placement=\"bottom\" href=\"https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint YouTube\">YouTube</a></li>\n</ul>\n</li>\n</ul>\n</nav>\n</div>\n<div class=\"sidenav\" id=\"mySidenav\">\n<div class=\"navbar nav-main\">\n<div class=\"container\">\n<nav class=\"nav-main mega-menu\">\n<ul class=\"nav nav-pills nav-main\" id=\"mainMenu\">\n<li class=\"dropdown no-sub-menu\"> <a class=\"dropdown\" href=\"index.htm\"><i class=\"icon icon-home\"></i> Home</a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"/questions/index.php\"><i class=\"fa fa-send\"></i> Q/A </a> </li>\n<li class=\"dropdown\"><a class=\"dropdown\" href=\"tutorialslibrary.htm\"><span class=\"tut-lib\"> Library </span></a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"videotutorials/index.htm\"><i class=\"fa-toggle-right\"></i> Videos </a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"tutor_connect/index.php\"><i class=\"fa-user\"> </i> Tutors</a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"codingground.htm\"><i class=\"fa-code\"></i> Coding Ground </a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"https://store.tutorialspoint.com/\"><i class=\"fa-usd\"></i> Store </a> </li>\n<li class=\"dropdown no-sub-menu\">\n<div class=\"searchform-popup\">\n<input autocomplete=\"off\" class=\"header-search-box\" id=\"search-string\" name=\"q\" onblur=\"if (this.value == '') {this.value = 'Search your favorite tutorials...';}\" onfocus=\"if (this.value == 'Search your favorite tutorials...') {this.value = '';}\" placeholder=\"Search your favorite tutorials...\" type=\"text\"/>\n<div class=\"magnifying-glass\"><i class=\"icon-search\"></i> Search </div>\n</div>\n</li>\n</ul>\n</nav>\n</div>\n</div>\n</div>\n</header></body></html>\n\n<div style=\"clear:both;\"></div>\n<div class=\"main\" role=\"main\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-2\">\n<aside class=\"sidebar\">\n<div class=\"mini-logo\">\n<img alt=\"Operating System Tutorial\" src=\"/operating_system/images/os-mini-logo.jpg\">\n</img></div>\n<ul class=\"nav nav-list primary left-menu\">\n<li><a class=\"videolink\" href=\"/operating_system/index.asp\" target=\"_blank\"><img alt=\"Operating System Video Tutorials\" src=\"/operating_system/images/operating-system-video-tutorials.jpg\"/></a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Operating System Tutorial</li>\n<li><a href=\"/operating_system/index.htm\">OS - Home</a></li>\n<li><a href=\"/operating_system/os_overview.htm\">OS - Overview</a></li>\n<li><a href=\"/operating_system/os_types.htm\">OS - Types</a></li>\n<li><a href=\"/operating_system/os_services.htm\">OS - Services</a></li>\n<li><a href=\"/operating_system/os_properties.htm\">OS - Properties</a></li>\n<li><a href=\"/operating_system/os_processes.htm\">OS - Processes</a></li>\n<li><a href=\"/operating_system/os_process_scheduling.htm\">OS - Process Scheduling</a></li>\n<li><a href=\"/operating_system/os_process_scheduling_algorithms.htm\">OS - Scheduling algorithms</a></li>\n<li><a href=\"/operating_system/os_multi_threading.htm\">OS -  Multi-threading</a></li>\n<li><a href=\"/operating_system/os_memory_management.htm\">OS - Memory Management</a></li>\n<li><a href=\"/operating_system/os_virtual_memory.htm\">OS -  Virtual Memory</a></li>\n<li><a href=\"/operating_system/os_io_hardware.htm\">OS -  I/O Hardware</a></li>\n<li><a href=\"/operating_system/os_io_software.htm\">OS - I/O Software</a></li>\n<li><a href=\"/operating_system/os_file_system.htm\">OS -  File System</a></li>\n<li><a href=\"/operating_system/os_security.htm\">OS - Security</a></li>\n<li><a href=\"/operating_system/os_linux.htm\">OS - Linux</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">OS - Exams Questions with Answers</li>\n<li><a class=\"left\" href=\"/operating_system/os_exams_questions_answers.htm\">OS - Exams Questions with Answers</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Operating System Useful Resources</li>\n<li><a class=\"left\" href=\"/operating_system/os_quick_guide.htm\">OS - Quick Guide</a></li>\n<li><a class=\"left\" href=\"/operating_system/os_useful_resources.htm\">OS - Useful Resources</a></li>\n<li><a class=\"left\" href=\"/operating_system/os_discussion.htm\">OS - Discussion</a></li>\n</ul>\n<ul class=\"nav nav-list primary push-bottom left-menu special\">\n<li class=\"sreading\">Selected Reading</li>\n<li><a href=\"/upsc_ias_exams.htm\" target=\"_top\">UPSC IAS Exams Notes</a></li>\n<li><a href=\"/developers_best_practices/index.htm\" target=\"_top\">Developer's Best Practices</a></li>\n<li><a href=\"/questions_and_answers.htm\" target=\"_top\">Questions and Answers</a></li>\n<li><a href=\"/effective_resume_writing.htm\" target=\"_top\">Effective Resume Writing</a></li>\n<li><a href=\"/hr_interview_questions/index.htm\" target=\"_top\">HR Interview Questions</a></li>\n<li><a href=\"/computer_glossary.htm\" target=\"_top\">Computer Glossary</a></li>\n<li><a href=\"/computer_whoiswho.htm\" target=\"_top\">Who is Who</a></li>\n</ul>\n</aside>\n</div>\n<!-- PRINTING STARTS HERE -->\n<div class=\"row\">\n<div class=\"content\">\n<div class=\"col-md-7 middle-col\">\n<h1>Operating System - Multi-Threading</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/operating_system/os_process_scheduling_algorithms.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/operating_system/os_memory_management.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<h2>What is Thread?</h2>\n<p>A thread is a flow of execution through the process code, with its own program counter that keeps track of which instruction to execute next, system registers which hold its current working variables, and a stack which contains the execution history.</p>\n<p>A thread shares with its peer threads few information like code segment, data segment and open files. When one thread alters a code segment memory item, all other threads see that.</p>\n<p>A thread is also called a <b>lightweight process</b>. Threads provide a way to improve application performance through parallelism. Threads represent a software approach to improving performance of operating system by reducing the overhead thread is equivalent to a classical process.</p>\n<p>Each thread belongs to exactly one process and no thread can exist outside a process. Each thread represents a separate flow of control. Threads have been successfully used in implementing network servers and web server. They also provide a suitable foundation for parallel execution of applications on shared memory multiprocessors. The following figure shows the working of a single-threaded and a multithreaded process.</p>\n<img alt=\"Single vs Multithreaded Process\" src=\"/operating_system/images/thread_processes.jpg\"/>\n<h2>Difference between Process and Thread</h2>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"width:5%;\">S.N.</th>\n<th style=\"width:45%;\">Process</th>\n<th>Thread</th>\n</tr>\n<tr>\n<td>1</td>\n<td>Process is heavy weight or resource intensive.</td>\n<td>Thread is light weight, taking lesser resources than a process.</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Process switching needs interaction with operating system.</td>\n<td>Thread switching does not need to interact with operating system.</td>\n</tr>\n<tr>\n<td>3</td>\n<td>In multiple processing environments, each process executes the same code but has its own memory and file resources.</td>\n<td>All threads can share same set of open files, child processes.</td>\n</tr>\n<tr>\n<td>4</td>\n<td>If one process is blocked, then no other process can execute until the first process is unblocked.</td>\n<td>While one thread is blocked and waiting, a second thread in the same task can run.</td>\n</tr>\n<tr>\n<td>5</td>\n<td>Multiple processes without using threads use more resources.</td>\n<td>Multiple threaded processes use fewer resources.</td>\n</tr>\n<tr>\n<td>6</td>\n<td>In multiple processes each process operates independently of the others.</td>\n<td>One thread can read, write or change another thread's data.</td>\n</tr>\n</table>\n<h2>Advantages of Thread</h2>\n<ul class=\"list\">\n<li>Threads minimize the context switching time.</li>\n<li>Use of threads provides concurrency within a process.</li>\n<li>Efficient communication.</li>\n<li>It is more economical to create and context switch threads.</li>\n<li>Threads allow utilization of multiprocessor architectures to a greater scale and efficiency.</li>\n</ul>\n<h2>Types of Thread</h2>\n<p>Threads are implemented in following two ways \u2212</p>\n<ul class=\"list\">\n<li><p><b>User Level Threads</b> \u2212 User managed threads.</p></li>\n<li><p><b>Kernel Level Threads</b> \u2212 Operating System managed threads acting on kernel, an operating system core.</p></li>\n</ul>\n<h2>User Level Threads</h2>\n<p>In this case, the thread management kernel is not aware of the existence of threads. The thread library contains code for creating and destroying threads, for passing message and data between threads, for scheduling thread execution and for saving and restoring thread contexts. The application starts with a single thread.</p>\n<img alt=\"User level thread\" src=\"/operating_system/images/user_threads.jpg\"/>\n<h3>Advantages</h3>\n<ul class=\"list\">\n<li>Thread switching does not require Kernel mode privileges.</li>\n<li>User level thread can run on any operating system.</li>\n<li>Scheduling can be application specific in the user level thread.</li>\n<li>User level threads are fast to create and manage.</li>\n</ul>\n<h3>Disadvantages</h3>\n<ul class=\"list\">\n<li>In a typical operating system, most system calls are blocking.</li>\n<li>Multithreaded application cannot take advantage of multiprocessing.</li>\n</ul>\n<h2>Kernel Level Threads</h2>\n<p>In this case, thread management is done by the Kernel. There is no thread management code in the application area. Kernel threads are supported directly by the operating system. Any application can be programmed to be multithreaded. All of the threads within an application are supported within a single process.</p>\n<p>The Kernel maintains context information for the process as a whole and for individuals threads within the process. Scheduling by the Kernel is done on a thread basis. The Kernel performs thread creation, scheduling and management in Kernel space. Kernel threads are generally slower to create and manage than the user threads.</p>\n<h3>Advantages</h3>\n<ul class=\"list\">\n<li>Kernel can simultaneously schedule multiple threads from the same process on multiple processes.</li>\n<li>If one thread in a process is blocked, the Kernel can schedule another thread of the same process.</li>\n<li>Kernel routines themselves can be multithreaded.</li>\n</ul>\n<h3>Disadvantages</h3>\n<ul class=\"list\">\n<li>Kernel threads are generally slower to create and manage than the user threads.</li>\n<li>Transfer of control from one thread to another within the same process requires a mode switch to the Kernel.</li>\n</ul>\n<h2>Multithreading Models</h2>\n<p>Some operating system provide a combined user level thread and Kernel level thread facility. Solaris is a good example of this combined approach. In a combined system, multiple threads within the same application can run in parallel on multiple processors and a blocking system call need not block the entire process. Multithreading models are three types</p>\n<ul class=\"list\">\n<li>Many to many relationship.</li>\n<li>Many to one relationship.</li>\n<li>One to one relationship.</li>\n</ul>\n<h2>Many to Many Model</h2>\n<p>The many-to-many model multiplexes any number of user threads onto an equal or smaller number of kernel threads.</p>\n<p>The following diagram shows the many-to-many threading model where 6 user level threads are multiplexing with 6 kernel level threads. In this model, developers can create as many user threads as necessary and the corresponding Kernel threads can run in parallel on a multiprocessor machine. This model provides the best accuracy on concurrency and when a thread performs a blocking system call, the kernel can schedule another thread for execution.</p>\n<img alt=\"Many to many thread model\" src=\"/operating_system/images/many_to_many.jpg\"/>\n<h2>Many to One Model</h2>\n<p>Many-to-one model maps many user level threads to one Kernel-level thread. Thread management is done in user space by the thread library. When thread makes a blocking system call, the entire process will be blocked. Only one thread can access the Kernel at a time, so multiple threads are unable to run in parallel on multiprocessors.</p>\n<p>If the user-level thread libraries are implemented in the operating system in such a way that the system does not support them, then the Kernel threads use the many-to-one relationship modes.</p>\n<img alt=\"Many to one thread model\" src=\"/operating_system/images/many_to_one.jpg\"/>\n<h2>One to One Model</h2>\n<p>There is one-to-one relationship of user-level thread to the kernel-level thread. This model provides more concurrency than the many-to-one model. It also allows another thread to run when a thread makes a blocking system call. It supports multiple threads to execute in parallel on microprocessors.</p>\n<p>Disadvantage of this model is that creating user thread requires the corresponding Kernel thread. OS/2, windows NT and windows 2000 use one to one relationship model.</p>\n<img alt=\"One to one thread model\" src=\"/operating_system/images/one_to_one.jpg\"/>\n<h2>Difference between User-Level &amp; Kernel-Level Thread</h2>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"width:5%; text-align:center\">S.N.</th>\n<th style=\"width:45%; text-align:center\">User-Level Threads</th>\n<th style=\"width:45%; text-align:center\">Kernel-Level Thread</th>\n</tr>\n<tr>\n<td>1</td>\n<td>User-level threads are faster to create and manage.</td>\n<td>Kernel-level threads are slower to create and manage.</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Implementation is by a thread library at the user level.</td>\n<td>Operating system supports creation of Kernel threads.</td>\n</tr>\n<tr>\n<td>3</td>\n<td>User-level thread is generic and can run on any operating system.</td>\n<td>Kernel-level thread is specific to the operating system.</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Multi-threaded applications cannot take advantage of multiprocessing.</td>\n<td>Kernel routines themselves can be multithreaded.</td>\n</tr>\n</table>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/operating_system/os_process_scheduling_algorithms.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/operating_system/os_memory_management.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n<div class=\"row\">\n<div class=\"col-md-3\" id=\"rightbar\">\n<div class=\"simple-ad\">\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.facebook.com/sharer.php?u=' + 'https://www.tutorialspoint.com/operating_system/os_multi_threading.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/facebookIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://twitter.com/share?url=' + 'https://www.tutorialspoint.com/operating_system/os_multi_threading.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/twitterIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'https://www.tutorialspoint.com/operating_system/os_multi_threading.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/linkedinIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=https://www.tutorialspoint.com/operating_system/os_multi_threading.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/googlePlusIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.stumbleupon.com/submit?url=https://www.tutorialspoint.com/operating_system/os_multi_threading.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/StumbleUponIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://reddit.com/submit?url=https://www.tutorialspoint.com/operating_system/os_multi_threading.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/reddit.jpg\"/>\n</a>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\ngoogle_ad_format = \"300x250_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 600;\ngoogle_ad_format = \"300x600_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"ca-pub-2537027957187252\";\n/* Right Side Ad */\ngoogle_ad_slot = \"right_side_ad\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\n//-->\n</script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"footer-copyright\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-1\">\n<a class=\"logo\" href=\"index.htm\"> <img alt=\"Tutorials Point\" class=\"img-responsive\" src=\"/scripts/img/logo-footer.png\"/> </a>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<nav id=\"sub-menu\">\n<ul>\n<li><a href=\"/about/about_privacy.htm\">Privacy Policy</a></li>\n<li><a href=\"/about/about_cookies.htm\">Cookies Policy</a></li>\n<li><a href=\"/about/contact_us.htm\">Contact</a></li>\n</ul>\n</nav>\n</div>\n<div class=\"col-md-3 col-sm-12 col-xs-12\">\n<p>\u00a9 Copyright 2019. All Rights Reserved.</p>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<div class=\"news-group\">\n<input autocomplete=\"off\" class=\"form-control-foot search\" id=\"textemail\" name=\"textemail\" onblur=\"if (this.value == '') {this.value = 'Enter email for newsletter...';}\" onfocus=\"if (this.value == 'Enter email for newsletter...') {this.value = '';}\" placeholder=\"Enter email for newsletter\" type=\"text\"/>\n<span class=\"input-group-btn\"> <button class=\"btn btn-default btn-footer\" id=\"btnemail\" onclick=\"javascript:void(0);\" type=\"submit\">go</button> </span>\n<div id=\"newsresponse\"></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"privacy-banner\">\n<div>\n<p>\n      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.\n      <a href=\"javascript:void(0)\" id=\"banner-accept\">Accept</a>\n<a href=\"/about/about_cookies.htm\" id=\"banner-learn\" target=\"_blank\">Learn more</a>\n</p>\n</div>\n</div>\n<script>\n// Banner Trigger if Not Closed\nif (!localStorage.bannerClosed) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n} else {\n  document.getElementById('privacy-banner').style.display = \"none\";\n}\ndocument.getElementById('banner-accept').addEventListener('click', function() {\n  document.getElementById('privacy-banner').style.display = \"none\";\n  localStorage.bannerClosed = 'true';\n});\nif (navigator.userAgent.match(/Opera|OPR\\//)) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n}\n</script>\n<!-- Libs -->\n<script src=\"/theme/js/custom-min.js?v=7\"></script>\n<script src=\"https://www.google-analytics.com/urchin.js\">\n</script>\n<script>\n_uacct = \"UA-232293-6\";\nurchinTracker();\n$('.pg-icon').click(function(){\n   $('.wrapLoader').show();\n});\n</script>\n\n\n\n", "url": "https://www.tutorialspoint.com/operating_system/os_multi_threading.htm", "title_html": "<h1>Operating System - Multi-Threading</h1>"}