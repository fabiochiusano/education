{"content_html": "<p>Data Structure is a systematic way to organize data in order to use it efficiently. Following terms are the foundation terms of a data structure.</p> <p>As applications are getting complex and data rich, there are three common problems that applications face now-a-days.</p> <p>To solve the above-mentioned problems, data structures come to rescue. Data can be organized in a data structure in such a way that all items may not be required to be searched, and the required data can be searched almost instantly.</p> <p>There are three cases which are usually used to compare various data structure's execution time in a relative manner.</p> <p>You really do not need to set up your own environment to start learning C programming language. Reason is very simple, we already have set up C Programming environment online, so that you can compile and execute all the available examples online at the same time when you are doing your theory work. This gives you confidence in what you are reading and to check the result with different options. Feel free to modify any example and execute it online.</p> <p>Try the following example using the <b>Try it</b> option available at the top right corner of the sample code box \u2212</p> <p>For most of the examples given in this tutorial, you will find Try it option, so just make use of it and enjoy your learning.</p> <p>If you are still willing to set up your environment for C programming language, you need the following two tools available on your computer, (a) Text Editor and (b) The C Compiler.</p> <p>This will be used to type your program. Examples of few editors include Windows Notepad, OS Edit command, Brief, Epsilon, EMACS, and vim or vi.</p> <p>The name and the version of the text editor can vary on different operating systems. For example, Notepad will be used on Windows, and vim or vi can be used on Windows as well as Linux or UNIX.</p> <p>The files you create with your editor are called source files and contain program source code. The source files for C programs are typically named with the extension \"<b>.c</b>\".</p> <p>Before starting your programming, make sure you have one text editor in place and you have enough experience to write a computer program, save it in a file, compile it, and finally execute it.</p> <p>The source code written in the source file is the human readable source for your program. It needs to be \"compiled\", to turn into machine language so that your CPU can actually execute the program as per the given instructions.</p> <p>This C programming language compiler will be used to compile your source code into a final executable program. We assume you have the basic knowledge about a programming language compiler.</p> <p>Most frequently used and free available compiler is GNU C/C&amp;plus&amp;plus compiler. Otherwise, you can have compilers either from HP or Solaris if you have respective Operating Systems (OS).</p> <p>The following section guides you on how to install GNU C/C&amp;plus&amp;plus compiler on various OS. We are mentioning C/C&amp;plus&amp;plus together because GNU GCC compiler works for both C and C&amp;plus&amp;plus programming languages.</p> <p>If you are using <b>Linux or UNIX</b>, then check whether GCC is installed on your system by entering the following command from the command line \u2212</p> <p>If you have GNU compiler installed on your machine, then it should print a message such as the following \u2212</p> <p>If GCC is not installed, then you will have to install it yourself using the detailed instructions available at <a href=\"https://gcc.gnu.org/install/\" rel=\"nofollow\" target=\"_blank\">https://gcc.gnu.org/install/</a></p> <p>This tutorial has been written based on Linux and all the given examples have been compiled on Cent OS flavor of Linux system.</p> <p>If you use Mac OS X, the easiest way to obtain GCC is to download the Xcode development environment from Apple's website and follow the simple installation instructions. Once you have Xcode setup, you will be able to use GNU compiler for C/C&amp;plus&amp;plus.</p> <p>Xcode is currently available at <a href=\"https://developer.apple.com/technologies/tools/\" rel=\"nofollow\" target=\"_blank\">developer.apple.com/technologies/tools/</a></p> <p>To install GCC on Windows, you need to install MinGW. To install MinGW, go to the MinGW homepage, <a href=\"http://www.mingw.org\" rel=\"nofollow\" target=\"_blank\">www.mingw.org</a>, and follow the link to the MinGW download page. Download the latest version of the MinGW installation program, which should be named MinGW-&lt;version&gt;.exe.</p> <p>While installing MinWG, at a minimum, you must install gcc-core, gcc-g&amp;plus&amp;plus, binutils, and the MinGW runtime, but you may wish to install more.</p> <p>Add the bin subdirectory of your MinGW installation to your <b>PATH</b> environment variable, so that you can specify these tools on the command line by their simple names.</p> <p>When the installation is complete, you will be able to run gcc, g&amp;plus&amp;plus, ar, ranlib, dlltool, and several other GNU tools from the Windows command line.</p> <p>Algorithm is a step-by-step procedure, which defines a set of instructions to be executed in a certain order to get the desired output. Algorithms are generally created independent of underlying languages, i.e. an algorithm can be implemented in more than one programming language.</p> <p>From the data structure point of view, following are some important categories of algorithms \u2212</p> <p>Not all procedures can be called an algorithm. An algorithm should have the following characteristics \u2212</p> <p>There are no well-defined standards for writing algorithms. Rather, it is problem and resource dependent. Algorithms are never written to support a particular programming code.</p> <p>As we know that all programming languages share basic code constructs like loops (do, for, while), flow-control (if-else), etc. These common constructs can be used to write an algorithm.</p> <p>We write algorithms in a step-by-step manner, but it is not always the case. Algorithm writing is a process and is executed after the problem domain is well-defined. That is, we should know the problem domain, for which we are designing a solution.</p> <p>Let's try to learn algorithm-writing by using an example.</p> <p><b>Problem</b> \u2212 Design an algorithm to add two numbers and display the result.</p> <p>Algorithms tell the programmers how to code the program. Alternatively, the algorithm can be written as \u2212</p> <p>In design and analysis of algorithms, usually the second method is used to describe an algorithm. It makes it easy for the analyst to analyze the algorithm ignoring all unwanted definitions. He can observe what operations are being used and how the process is flowing.</p> <p>Writing <b>step numbers</b>, is optional.</p> <p>We design an algorithm to get a solution of a given problem. A problem can be solved in more than one ways.</p> ", "url": "https://www.tutorialspoint.com/data_structures_algorithms/dsa_quick_guide.htm", "html": "<!DOCTYPE html>\n\n<!--[if IE 8]><html class=\"ie ie8\"> <![endif]-->\n<!--[if IE 9]><html class=\"ie ie9\"> <![endif]-->\n<!--[if gt IE 9]><!--> <html> <!--<![endif]-->\n<head>\n<!-- Basic -->\n<meta charset=\"utf-8\"/>\n<title>Data Structures and Algorithms Quick Guide</title>\n<meta content=\"Data Structures and Algorithms Quick Guide - Learn Data Structures and Algorithm using c, C++ and Java in simple and easy steps starting from basic to advanced concepts with examples including Overview, Environment Setup, Algorithm, Asymptotic Analysis, Greedy Algorithms, Divide and Conquer, Dynamic Programming, Data Structures, Array, Linked List, Doubly Linked List, Circular List, Stack, Parsing Expression, Queue, Priority queue, Linear, Binary, Interpolation Search, Tree, Tree Traversal, Binary Search Tree, B+, AVL, Spanning, Tower of Hanoi, Hash Table, Heap, Graph, Depth, Breadth First Traversal, Search techniques, Sorting techniques, Sorting Algorithm, Bubble, Merge Sort Algorithm, Insertion, Selection, Shell, Quick Sort, Recursion, Fibonacci Series.\" name=\"description\">\n<meta content=\"Overview, Environment Setup, Algorithm, Asymptotic Analysis, Greedy Algorithms, Divide and Conquer, Dynamic Programming, Data Structures, Array, Linked List, Doubly Linked List, Circular List, Stack, Parsing Expression, Queue, Priority queue, Linear, Binary, Interpolation Search, Tree, Tree Traversal, Binary Search Tree, B+, AVL, Spanning, Tower of Hanoi, Hash Table, Heap, Graph, Depth, Breadth First Traversal, Search techniques, Sorting techniques, Sorting Algorithm, Bubble, Merge Sort Algorithm, Insertion, Selection, Shell, Quick Sort, Recursion, Fibonacci Series.\" name=\"Keywords\"/>\n<base href=\"https://www.tutorialspoint.com/\"/>\n<link href=\"/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"/>\n<meta content=\"width=device-width,initial-scale=1.0,user-scalable=yes\" name=\"viewport\"/>\n<meta content=\"en_US\" property=\"og:locale\">\n<meta content=\"website\" property=\"og:type\"/>\n<meta content=\"471319149685276\" property=\"fb:app_id\"/>\n<meta content=\"www.tutorialspoint.com\" property=\"og:site_name\"/>\n<meta content=\"yes\" name=\"apple-mobile-web-app-capable\"/>\n<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"/>\n<meta content=\"tutorialspoint.com\" name=\"author\"/>\n<script src=\"https://www.tutorialspoint.com/theme/js/script-min-v4.js?v=2\" type=\"text/javascript\"></script>\n<link href=\"https://www.tutorialspoint.com/theme/css/style-min.css?v=3.1\" rel=\"stylesheet\"/>\n<script>\r\nfunction openNav() {\t\r\n  document.getElementById(\"mySidenav\").style.width = \"250px\";\r\n  document.getElementById(\"right_obs\").style.display = \"block\";\r\n}\r\nfunction closeNav() {\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\nfunction close_obs_sidenav(){\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\n</script>\n<!-- Head Libs -->\n<!--[if IE 8]>\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/theme/css/ie8.css\">\r\n<![endif]-->\n<style>\r\n#privacy-banner {\r\n    position: fixed;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    max-width: 100%;\r\n    padding: 1rem .5rem;\r\n    background: #fff;\r\n    z-index: 1030;\r\n    color: #000;\r\n    font-size: 14px;\r\n    margin: 0;\r\n    display: none;\r\n    border-top: 2px solid rgb(130, 130, 130);\r\n  }\r\n  #privacy-banner p {\r\n    margin: 0;\r\n    color: #000;\r\n    text-align: center;\r\n  }\r\n  #privacy-banner a {\r\n    text-decoration: none;\r\n    margin: 20px auto 0 auto;\r\n    display: block;\r\n    max-width: 150px;\r\n  }\r\n  #privacy-banner a:hover {\r\n    text-decoration: underline;\r\n  }\r\n  #banner-learn {\r\n    color: #000;\r\n  }\r\n  #banner-accept {\r\n    padding: 7px 15px;\r\n    color: #fff;\r\n    border-radius: 5px;\r\n    background:#737373 !important;\r\n  }\r\n  @media (min-width: 768px) {\r\n    #privacy-banner {\r\n      padding: 1.5rem .5rem;\r\n    }\r\n    #privacy-banner a {\r\n      display: inline-block;\r\n      margin: 0 10px;\r\n    }\r\n}\r\nselect{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }\r\n.btnsbmt{ background: #cd3300 !important;}\r\nul.nav-list.primary>li a.videolink{    background: none; margin: 0px; padding: 0px; border: 1px solid #d6d6d6;}\r\ndiv.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #cd3300 url(/images/pattern.png) repeat center center !important;}\r\n.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #cd3300 !important;}\r\n.submenu-item{ border-bottom: 2px solid #cd3300 !important; border-top: 2px solid #cd3300 !important }\r\n.ace_scroller{overflow: auto!important;}\r\na.demo{font-family: \"Open Sans\",Arial,sans-serif; background:#cd3300; color:#fff; font-size:13px; padding:3px 10px; border:1px solid #d6d6d6; position:absolute; right:5px; margin:-6px 17px 0px 0px;}\r\na.demo:hover{opacity:.8}\r\n</style>\n<script>\r\n$(document).ready(function() {\r\n  $('input[name=\"q\"]').keydown(function(event){\r\n    if(event.keyCode == 13) {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n  });\r\n});\r\n</script>\n</meta></meta></head>\n<body onload=\"prettyPrint()\">\n<div class=\"wrapLoader\">\n<div class=\"imgLoader\">\n<img alt=\"\" height=\"70\" src=\"/images/loading-cg.gif\" width=\"70\"/>\n</div>\n</div>\n<div class=\"display-none\" id=\"right_obs\" onclick=\"close_obs_sidenav()\"></div>\n<header>\n<div class=\"container\">\n<h1 class=\"logo\">\n<a href=\"index.htm\" title=\"tutorialspoint\">\n<img alt=\"tutorialspoint\" src=\"/data_structures_algorithms/images/logo.png\"/>\n</a>\n</h1>\n<ul class=\"tp-inline-block pull-right\" id=\"tp-head-icons\">\n<li>\n<div class=\"tp-second-nav tp-display-none tp-pointer\" onclick=\"openNav()\">\n<i class=\"fa fa-th-large fa-lg\"></i>\n</div>\n</li>\n</ul>\n<button class=\"btn btn-responsive-nav btn-inverse\" data-target=\".nav-main-collapse\" data-toggle=\"collapse\" id=\"pull\" style=\"top: 24px!important\"> <i class=\"icon icon-bars\"></i> </button>\n<nav>\n<ul class=\"nav nav-pills nav-top\">\n<li><a href=\"/about/about_careers.htm\" style=\"background: #fffb09; font-weight: bold;\"><i class=\"icon icon-suitcase\"></i> Jobs</a></li>\n<li> <a href=\"/programming_examples/\" target=\"_blank\"><i class=\"fa fa-cubes\"></i> \u00a0Examples</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/whiteboard.htm\"><img alt=\"Whiteboard\" src=\"theme/css/icons/image-editor.png\" title=\"Whiteboard\"/> \u00a0Whiteboard</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/netmeeting.php\"><i class=\"fa-camera\"></i> \u00a0Net Meeting</a> </li>\n<li> <a href=\"/online_dev_tools.htm\"> <i class=\"dev-tools-menu\" style=\"opacity:.5\"></i> Tools </a> </li>\n<li> <a href=\"/articles/index.php\"><i class=\"icon icon-file-text-o\"></i> \u00a0Articles</a> </li>\n<li class=\"top-icons\">\n<ul class=\"social-icons\">\n<li class=\"facebook\"><a data-placement=\"bottom\" href=\"https://www.facebook.com/tutorialspointindia\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Facebook\">Facebook</a></li>\n<li class=\"googleplus\"><a data-placement=\"bottom\" href=\"https://plus.google.com/u/0/116678774017490391259/posts\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Google+\">Google+</a></li>\n<li class=\"twitter\"><a data-placement=\"bottom\" href=\"https://www.twitter.com/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Twitter\">Twitter</a></li>\n<li class=\"linkedin\"><a data-placement=\"bottom\" href=\"https://www.linkedin.com/company/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Linkedin\">Linkedin</a></li>\n<li class=\"youtube\"><a data-placement=\"bottom\" href=\"https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint YouTube\">YouTube</a></li>\n</ul>\n</li>\n</ul>\n</nav>\n</div>\n<div class=\"sidenav\" id=\"mySidenav\">\n<div class=\"navbar nav-main\">\n<div class=\"container\">\n<nav class=\"nav-main mega-menu\">\n<ul class=\"nav nav-pills nav-main\" id=\"mainMenu\">\n<li class=\"dropdown no-sub-menu\"> <a class=\"dropdown\" href=\"index.htm\"><i class=\"icon icon-home\"></i> Home</a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"/questions/index.php\"><i class=\"fa fa-send\"></i> Q/A </a> </li>\n<li class=\"dropdown\"><a class=\"dropdown\" href=\"tutorialslibrary.htm\"><span class=\"tut-lib\"> Library </span></a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"videotutorials/index.htm\"><i class=\"fa-toggle-right\"></i> Videos </a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"tutor_connect/index.php\"><i class=\"fa-user\"> </i> Tutors</a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"codingground.htm\"><i class=\"fa-code\"></i> Coding Ground </a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"https://store.tutorialspoint.com/\"><i class=\"fa-usd\"></i> Store </a> </li>\n<li class=\"dropdown no-sub-menu\">\n<div class=\"searchform-popup\">\n<input autocomplete=\"off\" class=\"header-search-box\" id=\"search-string\" name=\"q\" onblur=\"if (this.value == '') {this.value = 'Search your favorite tutorials...';}\" onfocus=\"if (this.value == 'Search your favorite tutorials...') {this.value = '';}\" placeholder=\"Search your favorite tutorials...\" type=\"text\"/>\n<div class=\"magnifying-glass\"><i class=\"icon-search\"></i> Search </div>\n</div>\n</li>\n</ul>\n</nav>\n</div>\n</div>\n</div>\n</header></body></html>\n\n<div style=\"clear:both;\"></div>\n<div class=\"main\" role=\"main\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-2\">\n<aside class=\"sidebar\">\n<style>\r\n.ts {\r\n   text-align:center !important;\r\n   vertical-align:middle !important;\r\n}\r\n</style>\n<div class=\"mini-logo\">\n<img alt=\"Data Structures &amp; Algorithms Tutorial\" src=\"/data_structures_algorithms/images/data-structure-mini-logo.jpg\">\n</img></div>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Data Structures &amp; Algorithms</li>\n<li><a href=\"/data_structures_algorithms/index.htm\">DSA - Home</a></li>\n<li><a href=\"/data_structures_algorithms/data_structure_overview.htm\">DSA - Overview</a></li>\n<li><a href=\"/data_structures_algorithms/data_structure_environment.htm\">DSA - Environment Setup</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Algorithm</li>\n<li><a href=\"/data_structures_algorithms/algorithms_basics.htm\">DSA - Algorithms Basics</a></li>\n<li><a href=\"/data_structures_algorithms/asymptotic_analysis.htm\">DSA - Asymptotic Analysis</a></li>\n<li><a href=\"/data_structures_algorithms/greedy_algorithms.htm\">DSA - Greedy Algorithms</a></li>\n<li><a href=\"/data_structures_algorithms/divide_and_conquer.htm\">DSA - Divide and Conquer</a></li>\n<li><a href=\"/data_structures_algorithms/dynamic_programming.htm\">DSA - Dynamic Programming</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Data Structures</li>\n<li><a href=\"/data_structures_algorithms/data_structures_basics.htm\">DSA - Data Structure Basics</a></li>\n<li><a href=\"/data_structures_algorithms/array_data_structure.htm\">DSA - Array Data Structure</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Linked Lists</li></ul></aside></div></div></div></div>\n<li><a href=\"/data_structures_algorithms/linked_list_algorithms.htm\">DSA - Linked List Basics</a></li>\n<li><a href=\"/data_structures_algorithms/doubly_linked_list_algorithm.htm\">DSA - Doubly Linked List</a></li>\n<li><a href=\"/data_structures_algorithms/circular_linked_list_algorithm.htm\">DSA - Circular Linked List</a></li>\n\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Stack &amp; Queue</li>\n<li><a href=\"/data_structures_algorithms/stack_algorithm.htm\">DSA - Stack</a></li>\n<li><a href=\"/data_structures_algorithms/expression_parsing.htm\">DSA - Expression Parsing</a></li>\n<li><a href=\"/data_structures_algorithms/dsa_queue.htm\">DSA - Queue</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Searching Techniques</li>\n<!--<li style=\"background:yellow;\"><a href=\"/data_structures_algorithms/searching_algorithms.htm\">DSA - Searching Algorithms</a></li>-->\n<li><a href=\"/data_structures_algorithms/linear_search_algorithm.htm\">DSA - Linear Search</a></li>\n<li><a href=\"/data_structures_algorithms/binary_search_algorithm.htm\">DSA - Binary Search</a></li>\n<li><a href=\"/data_structures_algorithms/interpolation_search_algorithm.htm\">DSA - Interpolation Search</a></li>\n<li><a href=\"/data_structures_algorithms/hash_data_structure.htm\">DSA - Hash Table</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Sorting Techniques</li>\n<li><a href=\"/data_structures_algorithms/sorting_algorithms.htm\">DSA - Sorting Algorithms</a></li>\n<li><a href=\"/data_structures_algorithms/bubble_sort_algorithm.htm\">DSA - Bubble Sort</a></li>\n<li><a href=\"/data_structures_algorithms/insertion_sort_algorithm.htm\">DSA - Insertion Sort</a></li>\n<li><a href=\"/data_structures_algorithms/selection_sort_algorithm.htm\">DSA - Selection Sort</a></li>\n<li><a href=\"/data_structures_algorithms/merge_sort_algorithm.htm\">DSA - Merge Sort</a></li>\n<li><a href=\"/data_structures_algorithms/shell_sort_algorithm.htm\">DSA - Shell Sort</a></li>\n<li><a href=\"/data_structures_algorithms/quick_sort_algorithm.htm\">DSA - Quick Sort</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Graph Data Structure</li>\n<li><a href=\"/data_structures_algorithms/graph_data_structure.htm\">DSA - Graph Data Structure</a></li>\n<li><a href=\"/data_structures_algorithms/depth_first_traversal.htm\">DSA - Depth First Traversal</a></li>\n<li><a href=\"/data_structures_algorithms/breadth_first_traversal.htm\">DSA - Breadth First Traversal</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Tree Data Structure</li>\n<li><a href=\"/data_structures_algorithms/tree_data_structure.htm\">DSA - Tree Data Structure</a></li>\n<li><a href=\"/data_structures_algorithms/tree_traversal.htm\">DSA - Tree Traversal</a></li>\n<li><a href=\"/data_structures_algorithms/binary_search_tree.htm\">DSA - Binary Search Tree</a></li>\n<li><a href=\"/data_structures_algorithms/avl_tree_algorithm.htm\">DSA - AVL Tree</a></li>\n<li><a href=\"/data_structures_algorithms/spanning_tree.htm\">DSA - Spanning Tree</a></li>\n<li><a href=\"/data_structures_algorithms/heap_data_structure.htm\">DSA - Heap</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Recursion</li>\n<li><a href=\"/data_structures_algorithms/recursion_basics.htm\">DSA - Recursion Basics</a></li>\n<li><a href=\"/data_structures_algorithms/tower_of_hanoi.htm\">DSA - Tower of Hanoi</a></li>\n<li><a href=\"/data_structures_algorithms/fibonacci_series.htm\">DSA - Fibonacci Series</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">DSA Useful Resources</li>\n<li><a href=\"/data_structures_algorithms/data_structures_algorithms_questions_answers.htm\">DSA - Questions and Answers</a></li>\n<li><a href=\"/data_structures_algorithms/dsa_quick_guide.htm\">DSA - Quick Guide</a></li>\n<li><a href=\"/data_structures_algorithms/dsa_useful_resources.htm\">DSA - Useful Resources</a></li>\n<li><a href=\"/data_structures_algorithms/dsa_discussion.htm\">DSA - Discussion</a></li>\n</ul>\n<ul class=\"nav nav-list primary push-bottom left-menu special\">\n<li class=\"sreading\">Selected Reading</li>\n<li><a href=\"/upsc_ias_exams.htm\" target=\"_top\">UPSC IAS Exams Notes</a></li>\n<li><a href=\"/developers_best_practices/index.htm\" target=\"_top\">Developer's Best Practices</a></li>\n<li><a href=\"/questions_and_answers.htm\" target=\"_top\">Questions and Answers</a></li>\n<li><a href=\"/effective_resume_writing.htm\" target=\"_top\">Effective Resume Writing</a></li>\n<li><a href=\"/hr_interview_questions/index.htm\" target=\"_top\">HR Interview Questions</a></li>\n<li><a href=\"/computer_glossary.htm\" target=\"_top\">Computer Glossary</a></li>\n<li><a href=\"/computer_whoiswho.htm\" target=\"_top\">Who is Who</a></li>\n</ul>\n\n\n<!-- PRINTING STARTS HERE -->\n<div class=\"row\">\n<div class=\"content\">\n<div class=\"col-md-7 middle-col\">\n<h1>Data Structures &amp; Algorithms - Quick Guide</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/data_structures_algorithms/data_structures_algorithms_questions_answers.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/data_structures_algorithms/dsa_useful_resources.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<h1>Data Structures &amp; Algorithms - Overview</h1>\n<p>Data Structure is a systematic way to organize data in order to use it efficiently. Following terms are the foundation terms of a data structure.</p>\n<ul class=\"list\">\n<li><p><b>Interface</b> \u2212 Each data structure has an interface. Interface represents the set of operations that a data structure supports. An interface only provides the list of supported operations, type of parameters they can accept and return type of these operations.</p></li>\n<li><p><b>Implementation</b> \u2212 Implementation provides the internal representation of a data structure. Implementation also provides the definition of the algorithms used in the operations of the data structure.</p></li>\n</ul>\n<h2>Characteristics of a Data Structure</h2>\n<ul class=\"list\">\n<li><p><b>Correctness</b> \u2212 Data structure implementation should implement its interface correctly.</p></li>\n<li><p><b>Time Complexity</b> \u2212 Running time or the execution time of operations of data structure must be as small as possible.</p></li>\n<li><p><b>Space Complexity</b> \u2212 Memory usage of a data structure operation should be as little as possible.</p></li>\n</ul>\n<h2>Need for Data Structure</h2>\n<p>As applications are getting complex and data rich, there are three common problems that applications face now-a-days.</p>\n<ul class=\"list\">\n<li><p><b>Data Search</b> \u2212 Consider an inventory of 1 million(10<sup>6</sup>) items of a store. If the application is to search an item, it has to search an item in 1 million(10<sup>6</sup>) items every time slowing down the search. As data grows, search will become slower.</p></li>\n<li><p><b>Processor speed</b> \u2212 Processor speed although being very high, falls limited if the data grows to billion records.</p></li>\n<li><p><b>Multiple requests</b> \u2212 As thousands of users can search data simultaneously on a web server, even the fast server fails while searching the data.</p></li>\n</ul>\n<p>To solve the above-mentioned problems, data structures come to rescue. Data can be organized in a data structure in such a way that all items may not be required to be searched, and the required data can be searched almost instantly.</p>\n<h2>Execution Time Cases</h2>\n<p>There are three cases which are usually used to compare various data structure's execution time in a relative manner.</p>\n<ul class=\"list\">\n<li><p><b>Worst Case</b> \u2212 This is the scenario where a particular data structure operation takes maximum time it can take. If an operation's worst case time is \u0192(n) then this operation will not take more than \u0192(n) time where \u0192(n) represents function of n.</p></li>\n<li><p><b>Average Case</b> \u2212 This is the scenario depicting the average execution time of an operation of a data structure. If an operation takes \u0192(n) time in execution, then m operations will take m\u0192(n) time.</p></li>\n<li><p><b>Best Case</b> \u2212 This is the scenario depicting the least possible execution time of an operation of a data structure. If an operation takes \u0192(n) time in execution, then the actual operation may take time as the random number which would be maximum as \u0192(n).</p></li>\n</ul>\n<h2>Basic Terminology</h2>\n<ul class=\"list\">\n<li><p><b>Data</b> \u2212 Data are values or set of values.</p></li>\n<li><p><b>Data Item</b> \u2212 Data item refers to single unit of values.</p></li>\n<li><p><b>Group Items</b> \u2212 Data items that are divided into sub items are called as Group Items.</p></li>\n<li><p><b>Elementary Items</b> \u2212 Data items that cannot be divided are called as Elementary Items.</p></li>\n<li><p><b>Attribute and Entity</b> \u2212 An entity is that which contains certain attributes or properties, which may be assigned values.</p></li>\n<li><p><b>Entity Set</b> \u2212 Entities of similar attributes form an entity set.</p></li>\n<li><p><b>Field</b> \u2212 Field is a single elementary unit of information representing an attribute of an entity.</p></li>\n<li><p><b>Record</b> \u2212 Record is a collection of field values of a given entity.</p></li>\n<li><p><b>File</b> \u2212 File is a collection of records of the entities in a given entity set.</p></li>\n</ul>\n<h1>Data Structures - Environment Setup</h1>\n<h2>Try it Option Online</h2>\n<p>You really do not need to set up your own environment to start learning C programming language. Reason is very simple, we already have set up C Programming environment online, so that you can compile and execute all the available examples online at the same time when you are doing your theory work. This gives you confidence in what you are reading and to check the result with different options. Feel free to modify any example and execute it online.</p>\n<p>Try the following example using the <b>Try it</b> option available at the top right corner of the sample code box \u2212</p>\n<pre class=\"result notranslate\">\n#include &lt;stdio.h&gt;\nint main(){\n   /* My first program in C */\n   printf(\"Hello, World! \\n\");\n   return 0;\n}\n</pre>\n<p>For most of the examples given in this tutorial, you will find Try it option, so just make use of it and enjoy your learning.</p>\n<h2>Local Environment Setup</h2>\n<p>If you are still willing to set up your environment for C programming language, you need the following two tools available on your computer, (a) Text Editor and (b) The C Compiler.</p>\n<h3>Text Editor</h3>\n<p>This will be used to type your program. Examples of few editors include Windows Notepad, OS Edit command, Brief, Epsilon, EMACS, and vim or vi.</p>\n<p>The name and the version of the text editor can vary on different operating systems. For example, Notepad will be used on Windows, and vim or vi can be used on Windows as well as Linux or UNIX.</p>\n<p>The files you create with your editor are called source files and contain program source code. The source files for C programs are typically named with the extension \"<b>.c</b>\".</p>\n<p>Before starting your programming, make sure you have one text editor in place and you have enough experience to write a computer program, save it in a file, compile it, and finally execute it.</p>\n<h3>The C Compiler</h3>\n<p>The source code written in the source file is the human readable source for your program. It needs to be \"compiled\", to turn into machine language so that your CPU can actually execute the program as per the given instructions.</p>\n<p>This C programming language compiler will be used to compile your source code into a final executable program. We assume you have the basic knowledge about a programming language compiler.</p>\n<p>Most frequently used and free available compiler is GNU C/C&amp;plus&amp;plus compiler. Otherwise, you can have compilers either from HP or Solaris if you have respective Operating Systems (OS).</p>\n<p>The following section guides you on how to install GNU C/C&amp;plus&amp;plus compiler on various OS. We are mentioning C/C&amp;plus&amp;plus together because GNU GCC compiler works for both C and C&amp;plus&amp;plus programming languages.</p>\n<h2>Installation on UNIX/Linux</h2>\n<p>If you are using <b>Linux or UNIX</b>, then check whether GCC is installed on your system by entering the following command from the command line \u2212</p>\n<pre class=\"result notranslate\">\n$ gcc -v\n</pre>\n<p>If you have GNU compiler installed on your machine, then it should print a message such as the following \u2212</p>\n<pre class=\"result notranslate\">\nUsing built-in specs.\nTarget: i386-redhat-linux\nConfigured with: ../configure --prefix = /usr .......\nThread model: posix\ngcc version 4.1.2 20080704 (Red Hat 4.1.2-46)\n</pre>\n<p>If GCC is not installed, then you will have to install it yourself using the detailed instructions available at <a href=\"https://gcc.gnu.org/install/\" rel=\"nofollow\" target=\"_blank\">https://gcc.gnu.org/install/</a></p>\n<p>This tutorial has been written based on Linux and all the given examples have been compiled on Cent OS flavor of Linux system.</p>\n<h2>Installation on Mac OS</h2>\n<p>If you use Mac OS X, the easiest way to obtain GCC is to download the Xcode development environment from Apple's website and follow the simple installation instructions. Once you have Xcode setup, you will be able to use GNU compiler for C/C&amp;plus&amp;plus.</p>\n<p>Xcode is currently available at <a href=\"https://developer.apple.com/technologies/tools/\" rel=\"nofollow\" target=\"_blank\">developer.apple.com/technologies/tools/</a></p>\n<h2>Installation on Windows</h2>\n<p>To install GCC on Windows, you need to install MinGW. To install MinGW, go to the MinGW homepage, <a href=\"http://www.mingw.org\" rel=\"nofollow\" target=\"_blank\">www.mingw.org</a>, and follow the link to the MinGW download page. Download the latest version of the MinGW installation program, which should be named MinGW-&lt;version&gt;.exe.</p>\n<p>While installing MinWG, at a minimum, you must install gcc-core, gcc-g&amp;plus&amp;plus, binutils, and the MinGW runtime, but you may wish to install more.</p>\n<p>Add the bin subdirectory of your MinGW installation to your <b>PATH</b> environment variable, so that you can specify these tools on the command line by their simple names.</p>\n<p>When the installation is complete, you will be able to run gcc, g&amp;plus&amp;plus, ar, ranlib, dlltool, and several other GNU tools from the Windows command line.</p>\n<h1>Data Structures - Algorithms Basics</h1>\n<p>Algorithm is a step-by-step procedure, which defines a set of instructions to be executed in a certain order to get the desired output. Algorithms are generally created independent of underlying languages, i.e. an algorithm can be implemented in more than one programming language.</p>\n<p>From the data structure point of view, following are some important categories of algorithms \u2212</p>\n<ul class=\"list\">\n<li><p><b>Search</b> \u2212 Algorithm to search an item in a data structure.</p></li>\n<li><p><b>Sort</b> \u2212 Algorithm to sort items in a certain order.</p></li>\n<li><p><b>Insert</b> \u2212 Algorithm to insert item in a data structure.</p></li>\n<li><p><b>Update</b> \u2212  Algorithm to update an existing item in a data structure.</p></li>\n<li><p><b>Delete</b> \u2212 Algorithm to delete an existing item from a data structure.</p></li>\n</ul>\n<h2>Characteristics of an Algorithm</h2>\n<p>Not all procedures can be called an algorithm. An algorithm should have the following characteristics \u2212</p>\n<ul class=\"list\">\n<li><p><b>Unambiguous</b> \u2212 Algorithm should be clear and unambiguous. Each of its steps (or phases), and their inputs/outputs should be clear and must lead to only one meaning.</p></li>\n<li><p><b>Input</b> \u2212 An algorithm should have 0 or more well-defined inputs.</p></li>\n<li><p><b>Output</b> \u2212 An algorithm should have 1 or more well-defined outputs, and should match the desired output.</p></li>\n<li><p><b>Finiteness</b> \u2212 Algorithms must terminate after a finite number of steps.</p></li>\n<li><p><b>Feasibility</b> \u2212 Should be feasible with the available resources.</p></li>\n<li><p><b>Independent</b> \u2212 An algorithm should have step-by-step directions, which should be independent of any programming code.</p></li>\n</ul>\n<h2>How to Write an Algorithm?</h2>\n<p>There are no well-defined standards for writing algorithms. Rather, it is problem and resource dependent. Algorithms are never written to support a particular programming code.</p>\n<p>As we know that all programming languages share basic code constructs like loops (do, for, while), flow-control (if-else), etc. These common constructs can be used to write an algorithm.</p>\n<p>We write algorithms in a step-by-step manner, but it is not always the case. Algorithm writing is a process and is executed after the problem domain is well-defined. That is, we should know the problem domain, for which we are designing a solution.</p>\n<h3>Example</h3>\n<p>Let's try to learn algorithm-writing by using an example.</p>\n<p><b>Problem</b> \u2212 Design an algorithm to add two numbers and display the result.</p>\n<pre class=\"result notranslate\">\n<b>Step 1</b> \u2212 START\n<b>Step 2</b> \u2212 declare three integers <b>a</b>, <b>b</b> &amp; <b>c</b>\n<b>Step 3</b> \u2212 define values of <b>a</b> &amp; <b>b</b>\n<b>Step 4</b> \u2212 add values of <b>a</b> &amp; <b>b</b>\n<b>Step 5</b> \u2212 store output of <u>step 4</u> to <b>c</b>\n<b>Step 6</b> \u2212 print <b>c</b>\n<b>Step 7</b> \u2212 STOP\n</pre>\n<p>Algorithms tell the programmers how to code the program. Alternatively, the algorithm can be written as \u2212</p>\n<pre class=\"result notranslate\">\n<b>Step 1</b> \u2212 START ADD\n<b>Step 2</b> \u2212 get values of <b>a</b> &amp; <b>b</b>\n<b>Step 3</b> \u2212 c \u2190 a &amp;plus b\n<b>Step 4</b> \u2212 display c\n<b>Step 5</b> \u2212 STOP\n</pre>\n<p>In design and analysis of algorithms, usually the second method is used to describe an algorithm. It makes it easy for the analyst to analyze the algorithm ignoring all unwanted definitions. He can observe what operations are being used and how the process is flowing.</p>\n<p>Writing <b>step numbers</b>, is optional.</p>\n<p>We design an algorithm to get a solution of a given problem. A problem can be solved in more than one ways.</p>\n<img alt=\"one problem many solutions\" src=\"/data_structures_algorithms/images/problem_solutions.jpg\">\n<p>Hence, many solution algorithms can be derived for a given problem. The next step is to analyze those proposed solution algorithms and implement the best suitable solution.</p>\n<h2>Algorithm Analysis</h2>\n<p>Efficiency of an algorithm can be analyzed at two different stages, before implementation and after implementation. They are the following \u2212</p>\n<ul class=\"list\">\n<li><p><b><i>A Priori</i> Analysis</b> \u2212 This is a theoretical analysis of an algorithm. Efficiency of an algorithm is measured by assuming that all other factors, for example, processor speed, are constant and have no effect on the implementation.</p></li>\n<li><p><b><i>A Posterior</i> Analysis</b> \u2212 This is an empirical analysis of an algorithm. The selected algorithm is implemented using programming language. This is then executed on target computer machine. In this analysis, actual statistics like running time and space required, are collected.</p></li>\n</ul>\n<p>We shall learn about <i>a priori</i> algorithm analysis. Algorithm analysis deals with the execution or running time of various operations involved. The running time of an operation can be defined as the number of computer instructions executed per operation.</p>\n<h2>Algorithm Complexity</h2>\n<p>Suppose <b>X</b> is an algorithm and <b>n</b> is the size of input data, the time and space used by the algorithm X are the two main factors, which decide the efficiency of X.</p>\n<ul class=\"list\">\n<li><p><b>Time Factor</b> \u2212 Time is measured by counting the number of key operations such as comparisons in the sorting algorithm.</p></li>\n<li><p><b>Space Factor</b> \u2212 Space is measured by counting the maximum memory space required by the algorithm.</p></li>\n</ul>\n<p>The complexity of an algorithm <b>f(n)</b> gives the running time and/or the storage space required by the algorithm in terms of <b>n</b> as the size of input data.</p>\n<h2>Space Complexity</h2>\n<p>Space complexity of an algorithm represents the amount of memory space required by the algorithm in its life cycle. The space required by an algorithm is equal to the sum of the following two components \u2212</p>\n<ul class=\"list\">\n<li><p>A fixed part that is a space required to store certain data and variables, that are independent of the size of the problem. For example, simple variables and constants used, program size, etc.</p></li>\n<li><p>A variable part is a space required by variables, whose size depends on the size of the problem. For example, dynamic memory allocation, recursion stack space, etc.</p></li>\n</ul>\n<p>Space complexity S(P) of any algorithm P is S(P) = C &amp;plus SP(I), where C is the fixed part and S(I) is the variable part of the algorithm, which depends on instance characteristic I. Following is a simple example that tries to explain the concept \u2212</p>\n<pre class=\"result notranslate\">\nAlgorithm: SUM(A, B)\nStep 1 -  START\nStep 2 -  C \u2190 A &amp;plus B &amp;plus 10\nStep 3 -  Stop\n</pre>\n<p>Here we have three variables A, B, and C and one constant. Hence S(P) = 1 &amp;plus 3. Now, space depends on data types of given variables and constant types and it will be multiplied accordingly.</p>\n<h2>Time Complexity</h2>\n<p>Time complexity of an algorithm represents the amount of time required by the algorithm to run to completion. Time requirements can be defined as a numerical function T(n), where T(n) can be measured as the number of steps, provided each step consumes constant time.</p>\n<p>For example, addition of two n-bit integers takes <b>n</b> steps. Consequently, the total computational time is T(n) = c \u2217 n, where c is the time taken for the addition of two bits. Here, we observe that T(n) grows linearly as the input size increases.</p>\n<h1>Data Structures - Asymptotic Analysis</h1>\n<p>Asymptotic analysis of an algorithm refers to defining the mathematical boundation/framing of its run-time performance. Using asymptotic analysis, we can very well conclude the best case, average case, and worst case scenario of an algorithm.</p>\n<p>Asymptotic analysis is input bound i.e., if there's no input to the algorithm, it is concluded to work in a constant time. Other than the \"input\" all other factors are considered constant.</p>\n<p>Asymptotic analysis refers to computing the running time of any operation in mathematical units of computation. For example, the running time of one operation is computed as <i>f</i>(n) and may be for another operation it is computed as <i>g</i>(n<sup>2</sup>). This means the first operation running time will increase linearly with the increase in <b>n</b> and the running time of the second operation will increase exponentially when <b>n</b> increases. Similarly, the running time of both operations will be nearly the same if <b>n</b> is significantly small.</p>\n<p>Usually, the time required by an algorithm falls under three types \u2212</p>\n<ul class=\"list\">\n<li><p><b>Best Case</b> \u2212 Minimum time required for program execution.</p></li>\n<li><p><b>Average Case</b> \u2212 Average time required for program execution.</p></li>\n<li><p><b>Worst Case</b> \u2212 Maximum time required for program execution.</p></li>\n</ul>\n<h2>Asymptotic Notations</h2>\n<p>Following are the commonly used asymptotic notations to calculate the running time complexity of an algorithm.</p>\n<ul class=\"list\">\n<li>\u039f Notation</li>\n<li>\u03a9 Notation</li>\n<li>\u03b8 Notation</li>\n</ul>\n<h3>Big Oh Notation, \u039f</h3>\n<p>The notation \u039f(n) is the formal way to express the upper bound of an algorithm's running time. It measures the worst case time complexity or the longest amount of time an algorithm can possibly take to complete.</p>\n<img alt=\"Big O Notation\" src=\"/data_structures_algorithms/images/big_o_notation.jpg\"/>\n<p>For example, for a function <b><i>f</i>(n)</b></p>\n<pre class=\"result notranslate\">\n\u039f(<i>f</i>(n)) = { <i>g</i>(n) : there exists c &gt; 0 and n<sub>0</sub> such that <i>f</i>(n) \u2264 c.<i>g</i>(n) for all n &gt; n<sub>0</sub>. }\n</pre>\n<h3>Omega Notation, \u03a9</h3>\n<p>The notation \u03a9(n) is the formal way to express the lower bound of an algorithm's running time. It measures the best case time complexity or the best amount of time an algorithm can possibly take to complete.</p>\n<img alt=\"Omega Notation\" src=\"/data_structures_algorithms/images/omega_notation.jpg\"/>\n<p>For example, for a function <b><i>f</i>(n)</b></p>\n<pre class=\"result notranslate\">\n\u03a9(<i>f</i>(n)) \u2265 { <i>g</i>(n) : there exists c &gt; 0 and n<sub>0</sub> such that <i>g</i>(n) \u2264 c.<i>f</i>(n) for all n &gt; n<sub>0</sub>. }\n</pre>\n<h3>Theta Notation, \u03b8</h3>\n<p>The notation \u03b8(n) is the formal way to express both the lower bound and the upper bound of an algorithm's running time. It is represented as follows \u2212</p>\n<img alt=\"Theta Notation\" src=\"/data_structures_algorithms/images/theta_notation.jpg\"/>\n<pre class=\"result notranslate\">\n\u03b8(<i>f</i>(n)) = { <i>g</i>(n) if and only if <i>g</i>(n) =  \u039f(<i>f</i>(n)) and <i>g</i>(n) = \u03a9(<i>f</i>(n)) for all n &gt; n<sub>0</sub>. }\n</pre>\n<h2>Common Asymptotic Notations</h2>\n<p>Following is a list of some common asymptotic notations \u2212</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<td>constant</td>\n<td>\u2212</td>\n<td>\u039f(1)</td>\n</tr>\n<tr>\n<td>logarithmic</td>\n<td>\u2212</td>\n<td>\u039f(log n)</td>\n</tr>\n<tr>\n<td>linear</td>\n<td>\u2212</td>\n<td>\u039f(n)</td>\n</tr>\n<tr>\n<td>n log n</td>\n<td>\u2212</td>\n<td>\u039f(n log n)</td>\n</tr>\n<tr>\n<td>quadratic</td>\n<td>\u2212</td>\n<td>\u039f(n<sup>2</sup>)</td>\n</tr>\n<tr>\n<td>cubic</td>\n<td>\u2212</td>\n<td>\u039f(n<sup>3</sup>)</td>\n</tr>\n<tr>\n<td>polynomial</td>\n<td>\u2212</td>\n<td>n<sup>\u039f(1)</sup></td>\n</tr>\n<tr>\n<td>exponential</td>\n<td>\u2212</td>\n<td>2<sup>\u039f(n)</sup></td>\n</tr>\n</table>\n<h1>Data Structures - Greedy Algorithms</h1>\n<p>An algorithm is designed to achieve optimum solution for a given problem. In greedy algorithm approach, decisions are made from the given solution domain. As being greedy, the closest solution that seems to provide an optimum solution is chosen.</p>\n<p>Greedy algorithms try to find a localized optimum solution, which may eventually lead to globally optimized solutions. However, generally greedy algorithms do not provide globally optimized solutions.</p>\n<h2>Counting Coins</h2>\n<p>This problem is to count to a desired value by choosing the least possible coins and the greedy approach forces the algorithm to pick the largest possible coin. If we are provided coins of \u20b9 1, 2, 5 and 10 and we are asked to count \u20b9 18 then the greedy procedure will be \u2212</p>\n<ul class=\"list\">\n<li><p><b>1</b> \u2212 Select one \u20b9 10 coin, the remaining count is 8</p></li>\n<li><p><b>2</b> \u2212 Then select one \u20b9 5 coin, the remaining count is 3</p></li>\n<li><p><b>3</b> \u2212 Then select one \u20b9 2 coin, the remaining count is 1</p></li>\n<li><p><b>4</b> \u2212 And finally, the selection of one \u20b9 1 coins solves the problem</p></li>\n</ul>\n<p>Though, it seems to be working fine, for this count we need to pick only 4 coins. But if we slightly change the problem then the same approach may not be able to produce the same optimum result.</p>\n<p>For the currency system, where we have coins of 1, 7, 10 value, counting coins for value 18 will be absolutely optimum but for count like 15, it may use more coins than necessary. For example, the greedy approach will use 10 &amp;plus 1 &amp;plus 1 &amp;plus 1 &amp;plus 1 &amp;plus 1, total 6 coins. Whereas the same problem could be solved by using only 3 coins (7 &amp;plus 7 &amp;plus 1)</p>\n<p>Hence, we may conclude that the greedy approach picks an immediate optimized solution and may fail where global optimization is a major concern.</p>\n<h3>Examples</h3>\n<p>Most networking algorithms use the greedy approach. Here is a list of few of them \u2212</p>\n<ul class=\"list\">\n<li>Travelling Salesman Problem</li>\n<li>Prim's Minimal Spanning Tree Algorithm</li>\n<li>Kruskal's Minimal Spanning Tree Algorithm</li>\n<li>Dijkstra's Minimal Spanning Tree Algorithm</li>\n<li>Graph - Map Coloring</li>\n<li>Graph - Vertex Cover</li>\n<li>Knapsack Problem</li>\n<li>Job Scheduling Problem</li>\n</ul>\n<p>There are lots of similar problems that uses the greedy approach to find an optimum solution.</p>\n<h1>Data Structures - Divide and Conquer</h1>\n<p>In divide and conquer approach, the problem in hand, is divided into smaller sub-problems and then each problem is solved independently. When we keep on dividing the subproblems into even smaller sub-problems, we may eventually reach a stage where no more division is possible. Those \"atomic\" smallest possible sub-problem (fractions) are solved. The solution of all sub-problems is finally merged in order to obtain the solution of an original problem.</p>\n<img alt=\"Divide and Conquer\" src=\"/data_structures_algorithms/images/divide_and_conquer.jpg\"/>\n<p>Broadly, we can understand <b>divide-and-conquer</b> approach in a three-step process.</p>\n<h2>Divide/Break</h2>\n<p>This step involves breaking the problem into smaller sub-problems. Sub-problems should represent a part of the original problem. This step generally takes a recursive approach to divide the problem until no sub-problem is further divisible. At this stage, sub-problems become atomic in nature but still represent some part of the actual problem.</p>\n<h2>Conquer/Solve</h2>\n<p>This step receives a lot of smaller sub-problems to be solved. Generally, at this level, the problems are considered 'solved' on their own.</p>\n<h2>Merge/Combine</h2>\n<p>When the smaller sub-problems are solved, this stage recursively combines them until they formulate a solution of the original problem. This algorithmic approach works recursively and conquer &amp; merge steps works so close that they appear as one.</p>\n<h3>Examples</h3>\n<p>The following computer algorithms are based on <b>divide-and-conquer</b> programming approach \u2212</p>\n<ul class=\"list\">\n<li>Merge Sort</li>\n<li>Quick Sort</li>\n<li>Binary Search</li>\n<li>Strassen's Matrix Multiplication</li>\n<li>Closest pair (points)</li>\n</ul>\n<p>There are various ways available to solve any computer problem, but the mentioned are a good example of divide and conquer approach.</p>\n<h1>Data Structures - Dynamic Programming</h1>\n<p>Dynamic programming approach is similar to divide and conquer in breaking down the problem into smaller and yet smaller possible sub-problems. But unlike, divide and conquer, these sub-problems are not solved independently. Rather, results of these smaller sub-problems are remembered and used for similar or overlapping sub-problems.</p>\n<p>Dynamic programming is used where we have problems, which can be divided into similar sub-problems, so that their results can be re-used. Mostly, these algorithms are used for optimization. Before solving the in-hand sub-problem, dynamic algorithm will try to examine the results of the previously solved sub-problems. The solutions of sub-problems are combined in order to achieve the best solution.</p>\n<p>So we can say that \u2212</p>\n<ul class=\"list\">\n<li><p>The problem should be able to be divided into smaller overlapping sub-problem.</p></li>\n<li><p>An optimum solution can be achieved by using an optimum solution of smaller sub-problems.</p></li>\n<li><p>Dynamic algorithms use Memoization.</p></li>\n</ul>\n<h2>Comparison</h2>\n<p>In contrast to greedy algorithms, where local optimization is addressed, dynamic algorithms are motivated for an overall optimization of the problem.</p>\n<p>In contrast to divide and conquer algorithms, where solutions are combined to achieve an overall solution, dynamic algorithms use the output of a smaller sub-problem and then try to optimize a bigger sub-problem. Dynamic algorithms use Memoization to remember the output of already solved sub-problems.</p>\n<h3>Example</h3>\n<p>The following computer problems can be solved using dynamic programming approach \u2212</p>\n<ul class=\"list\">\n<li>Fibonacci number series</li>\n<li>Knapsack problem</li>\n<li>Tower of Hanoi</li>\n<li>All pair shortest path by Floyd-Warshall</li>\n<li>Shortest path by Dijkstra</li>\n<li>Project scheduling</li>\n</ul>\n<p>Dynamic programming can be used in both top-down and bottom-up manner. And of course, most of the times, referring to the previous solution output is cheaper than recomputing in terms of CPU cycles.</p>\n<h1>Data Structures &amp; Algorithm Basic Concepts</h1>\n<p>This chapter explains the basic terms related to data structure.</p>\n<h2>Data Definition</h2>\n<p>Data Definition defines a particular data with the following characteristics.</p>\n<ul class=\"list\">\n<li><p><b>Atomic</b> \u2212 Definition should define a single concept.</p></li>\n<li><p><b>Traceable</b> \u2212 Definition should be able to be mapped to some data element.</p></li>\n<li><p><b>Accurate</b> \u2212 Definition should be unambiguous.</p></li>\n<li><p><b>Clear and Concise</b> \u2212 Definition should be understandable.</p></li>\n</ul>\n<h2>Data Object</h2>\n<p>Data Object represents an object having a data.</p>\n<h2>Data Type</h2>\n<p>Data type is a way to classify various types of data such as integer, string, etc. which determines the values that can be used with the corresponding type of data, the type of operations that can be performed on the corresponding type of data. There are two data types \u2212</p>\n<ul class=\"list\">\n<li>Built-in Data Type</li>\n<li>Derived Data Type</li>\n</ul>\n<h3>Built-in Data Type</h3>\n<p>Those data types for which a language has built-in support are known as Built-in Data types. For example, most of the languages provide the following built-in data types.</p>\n<ul class=\"list\">\n<li>Integers</li>\n<li>Boolean (true, false)</li>\n<li>Floating (Decimal numbers)</li>\n<li>Character and Strings</li>\n</ul>\n<h3>Derived Data Type</h3>\n<p>Those data types which are implementation independent as they can be implemented in one or the other way are known as derived data types. These data types are normally built by the combination of primary or built-in data types and associated operations on them. For example \u2212</p>\n<ul class=\"list\">\n<li>List</li>\n<li>Array</li>\n<li>Stack</li>\n<li>Queue</li>\n</ul>\n<h2>Basic Operations</h2>\n<p>The data in the data structures are processed by certain operations. The particular data structure chosen largely depends on the frequency of the operation that needs to be performed on the data structure.</p>\n<ul class=\"list\">\n<li>Traversing</li>\n<li>Searching</li>\n<li>Insertion</li>\n<li>Deletion</li>\n<li>Sorting</li>\n<li>Merging</li>\n</ul>\n<h1>Data Structures and Algorithms - Arrays</h1>\n<p>Array is a container which can hold a fix number of items and these items should be of the same type. Most of the data structures make use of arrays to implement their algorithms. Following are the important terms to understand the concept of Array.</p>\n<ul class=\"list\">\n<li><p><b>Element</b> \u2212 Each item stored in an array is called an element.</p></li>\n<li><p><b>Index</b> \u2212 Each location of an element in an array has a numerical index, which is used to identify the element.</p></li>\n</ul>\n<h2>Array Representation</h2>\n<p>Arrays can be declared in various ways in different languages. For illustration, let's take C array declaration.</p>\n<img alt=\"Array Declaration\" src=\"/data_structures_algorithms/images/array_declaration.jpg\"/>\n<p>Arrays can be declared in various ways in different languages. For illustration, let's take C array declaration.</p>\n<img alt=\"Array Representation\" src=\"/data_structures_algorithms/images/array_representation.jpg\"/>\n<p>As per the above illustration, following are the important points to be considered.</p>\n<ul class=\"list\">\n<li><p>Index starts with 0.</p></li>\n<li><p>Array length is 10 which means it can store 10 elements.</p></li>\n<li><p>Each element can be accessed via its index. For example, we can fetch an element at index 6 as 9.</p></li>\n</ul>\n<h2>Basic Operations</h2>\n<p>Following are the basic operations supported by an array.</p>\n<ul class=\"list\">\n<li><p><b>Traverse</b> \u2212 print all the array elements one by one.</p></li>\n<li><p><b>Insertion</b> \u2212 Adds an element at the given index.</p></li>\n<li><p><b>Deletion</b> \u2212 Deletes an element at the given index.</p></li>\n<li><p><b>Search</b> \u2212 Searches an element using the given index or by the value.</p></li>\n<li><p><b>Update</b> \u2212 Updates an element at the given index.</p></li>\n</ul>\n<p>In C, when an array is initialized with size, then it assigns defaults values to its elements in following order.</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<th style=\"text-align:center;\">Data Type</th>\n<th style=\"text-align:center;\">Default Value</th>\n</tr>\n<tr>\n<td>bool</td>\n<td>false</td>\n</tr>\n<tr>\n<td>char</td>\n<td>0</td>\n</tr>\n<tr>\n<td>int</td>\n<td>0</td>\n</tr>\n<tr>\n<td>float</td>\n<td>0.0</td>\n</tr>\n<tr>\n<td>double</td>\n<td>0.0f</td>\n</tr>\n<tr>\n<td>void</td>\n<td></td>\n</tr>\n<tr>\n<td>wchar_t</td>\n<td>0</td>\n</tr>\n</table>\n<h2>Insertion Operation</h2>\n<p>Insert operation is to insert one or more data elements into an array. Based on the requirement, a new element can be added at the beginning, end, or any given index of array.</p>\n<p>Here, we see a practical implementation of insertion operation, where we add data at the end of the array \u2212</p>\n<h3>Algorithm</h3>\n<p>Let <b>Array</b> be a linear unordered array of <b>MAX</b> elements.</p>\n<h3>Example</h3>\n<p><b>Result</b></p>\n<p>Let <b>LA</b> be a Linear Array (unordered) with <b>N</b> elements and <b>K</b> is a positive integer such that <b>K&lt;=N</b>. Following is the algorithm where ITEM is inserted into the K<sup>th</sup> position of LA \u2212</p>\n<pre class=\"result notranslate\">\n1. Start\n2. Set J = N\n3. Set N = N&amp;plus1\n4. Repeat steps 5 and 6 while J &gt;= K\n5. Set LA[J+1] = LA[J]\n6. Set J = J-1\n7. Set LA[K] = ITEM\n8. Stop\n</pre>\n<h3>Example</h3>\n<p>Following is the implementation of the above algorithm \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/YpAUzN\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;stdio.h&gt;\n\nmain() {\n   int LA[] = {1,3,5,7,8};\n   int item = 10, k = 3, n = 5;\n   int i = 0, j = n;\n   \n   printf(\"The original array elements are :\\n\");\n\n   for(i = 0; i&lt;n; i++) {\n      printf(\"LA[%d] = %d \\n\", i, LA[i]);\n   }\n\n   n = n &amp;plus 1;\n\t\n   while( j &gt;= k) {\n      LA[j&amp;plus1] = LA[j];\n      j = j - 1;\n   }\n\n   LA[k] = item;\n\n   printf(\"The array elements after insertion :\\n\");\n\n   for(i = 0; i&lt;n; i++) {\n      printf(\"LA[%d] = %d \\n\", i, LA[i]);\n   }\n}\n</pre>\n<p>When we compile and execute the above program, it produces the following result \u2212</p>\n<h3>Output</h3>\n<pre class=\"result notranslate\">\nThe original array elements are :\nLA[0] = 1 \nLA[1] = 3 \nLA[2] = 5 \nLA[3] = 7 \nLA[4] = 8 \nThe array elements after insertion :\nLA[0] = 1 \nLA[1] = 3 \nLA[2] = 5 \nLA[3] = 10 \nLA[4] = 7 \nLA[5] = 8 \n</pre>\n<p>For other variations of array insertion operation <a href=\"/data_structures_algorithms/array_insertion_algorithm.htm\" target=\"_blank\">click here</a></p>\n<h2>Deletion Operation</h2>\n<p>Deletion refers to removing an existing element from the array and re-organizing all elements of an array.</p>\n<h3>Algorithm</h3>\n<p>Consider <b>LA</b> is a linear array with <b>N</b> elements and <b>K</b> is a positive integer such that <b>K&lt;=N</b>. Following is the algorithm to delete an element available at the K<sup>th</sup> position of LA.</p>\n<pre class=\"result notranslate\">\n1. Start\n2. Set J = K\n3. Repeat steps 4 and 5 while J &lt; N\n4. Set LA[J] = LA[J + 1]\n5. Set J = J&amp;plus1\n6. Set N = N-1\n7. Stop\n</pre>\n<h3>Example</h3>\n<p>Following is the implementation of the above algorithm \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/3FCSPD\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;stdio.h&gt;\n\nvoid main() {\n   int LA[] = {1,3,5,7,8};\n   int k = 3, n = 5;\n   int i, j;\n   \n   printf(\"The original array elements are :\\n\");\n\t\n   for(i = 0; i&lt;n; i++) {\n      printf(\"LA[%d] = %d \\n\", i, LA[i]);\n   }\n    \n   j = k;\n\t\n   while( j &lt; n) {\n      LA[j-1] = LA[j];\n      j = j &amp;plus 1;\n   }\n\t\n   n = n -1;\n   \n   printf(\"The array elements after deletion :\\n\");\n\t\n   for(i = 0; i&lt;n; i&amp;plus&amp;plus) {\n      printf(\"LA[%d] = %d \\n\", i, LA[i]);\n   }\n}\n</pre>\n<p>When we compile and execute the above program, it produces the following result \u2212</p>\n<h3>Output</h3>\n<pre class=\"result notranslate\">\nThe original array elements are :\nLA[0] = 1 \nLA[1] = 3 \nLA[2] = 5 \nLA[3] = 7 \nLA[4] = 8 \nThe array elements after deletion :\nLA[0] = 1 \nLA[1] = 3 \nLA[2] = 7 \nLA[3] = 8 \n</pre>\n<h2>Search Operation</h2>\n<p>You can perform a search for an array element based on its value or its index.</p>\n<h3>Algorithm</h3>\n<p>Consider <b>LA</b> is a linear array with <b>N</b> elements and <b>K</b> is a positive integer such that <b>K&lt;=N</b>. Following is the algorithm to find an element with a value of ITEM using sequential search.</p>\n<pre class=\"result notranslate\">\n1. Start\n2. Set J = 0\n3. Repeat steps 4 and 5 while J &lt; N\n4. IF LA[J] is equal ITEM THEN GOTO STEP 6\n5. Set J = J +1\n6. PRINT J, ITEM\n7. Stop\n</pre>\n<h3>Example</h3>\n<p>Following is the implementation of the above algorithm \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/613FSK\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;stdio.h&gt;\n\nvoid main() {\n   int LA[] = {1,3,5,7,8};\n   int item = 5, n = 5;\n   int i = 0, j = 0;\n   \n   printf(\"The original array elements are :\\n\");\n\t\n   for(i = 0; i&lt;n; i++) {\n      printf(\"LA[%d] = %d \\n\", i, LA[i]);\n   }\n    \n   while( j &lt; n){\n      if( LA[j] == item ) {\n         break;\n      }\n\t\t\n      j = j + 1;\n   }\n\t\n   printf(\"Found element %d at position %d\\n\", item, j+1);\n}\n</pre>\n<p>When we compile and execute the above program, it produces the following result \u2212</p>\n<h3>Output</h3>\n<pre class=\"result notranslate\">\nThe original array elements are :\nLA[0] = 1 \nLA[1] = 3 \nLA[2] = 5 \nLA[3] = 7 \nLA[4] = 8 \nFound element 5 at position 3\n</pre>\n<h2>Update Operation</h2>\n<p>Update operation refers to updating an existing element from the array at a given index.</p>\n<h3>Algorithm</h3>\n<p>Consider <b>LA</b> is a linear array with <b>N</b> elements and <b>K</b> is a positive integer such that <b>K&lt;=N</b>. Following is the algorithm to update an element available at the K<sup>th</sup> position of LA.</p>\n<pre class=\"result notranslate\">\n1. Start\n2. Set LA[K-1] = ITEM\n3. Stop\n</pre>\n<h3>Example</h3>\n<p>Following is the implementation of the above algorithm \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/EQ4FEy\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;stdio.h&gt;\n\nvoid main() {\n   int LA[] = {1,3,5,7,8};\n   int k = 3, n = 5, item = 10;\n   int i, j;\n   \n   printf(\"The original array elements are :\\n\");\n\t\n   for(i = 0; i&lt;n; i++) {\n      printf(\"LA[%d] = %d \\n\", i, LA[i]);\n   }\n    \n   LA[k-1] = item;\n\n   printf(\"The array elements after updation :\\n\");\n\t\n   for(i = 0; i&lt;n; i++) {\n      printf(\"LA[%d] = %d \\n\", i, LA[i]);\n   }\n}\n</pre>\n<p>When we compile and execute the above program, it produces the following result \u2212</p>\n<h3>Output</h3>\n<pre class=\"result notranslate\">\nThe original array elements are :\nLA[0] = 1 \nLA[1] = 3 \nLA[2] = 5 \nLA[3] = 7 \nLA[4] = 8 \nThe array elements after updation :\nLA[0] = 1 \nLA[1] = 3 \nLA[2] = 10 \nLA[3] = 7 \nLA[4] = 8 \n</pre>\n<h1>Data Structure and Algorithms - Linked List</h1>\n<p>A linked list is a sequence of data structures, which are connected together via links.</p>\n<p>Linked List is a sequence of links which contains items. Each link contains a connection to another link. Linked list is the second most-used data structure after array. Following are the important terms to understand the concept of Linked List.</p>\n<ul class=\"list\">\n<li><p><b>Link</b> \u2212 Each link of a linked list can store a data called an element.</p></li>\n<li><p><b>Next</b> \u2212 Each link of a linked list contains a link to the next link called Next.</p></li>\n<li><p><b>LinkedList</b> \u2212 A Linked List contains the connection link to the first link called First.</p></li>\n</ul>\n<h2>Linked List Representation</h2>\n<p>Linked list can be visualized as a chain of nodes, where every node points to the next node.</p>\n<img alt=\"Linked List\" src=\"/data_structures_algorithms/images/linked_list.jpg\"/>\n<p>As per the above illustration, following are the important points to be considered.</p>\n<ul class=\"list\">\n<li><p>Linked List contains a link element called first.</p></li>\n<li><p>Each link carries a data field(s) and a link field called next.</p></li>\n<li><p>Each link is linked with its next link using its next link.</p></li>\n<li><p>Last link carries a link as null to mark the end of the list.</p></li>\n</ul>\n<h2>Types of Linked List</h2>\n<p>Following are the various types of linked list.</p>\n<ul class=\"list\">\n<li><p><b>Simple Linked List</b> \u2212 Item navigation is forward only.</p></li>\n<li><p><b>Doubly Linked List</b> \u2212 Items can be navigated forward and backward.</p></li>\n<li><p><b>Circular Linked List</b> \u2212 Last item contains link of the first element as next and the first element has a link to the last element as previous.</p></li>\n</ul>\n<h2>Basic Operations</h2>\n<p>Following are the basic operations supported by a list.</p>\n<ul class=\"list\">\n<li><p><b>Insertion</b> \u2212 Adds an element at the beginning of the list.</p></li>\n<li><p><b>Deletion</b> \u2212 Deletes an element at the beginning of the list.</p></li>\n<li><p><b>Display</b> \u2212 Displays the complete list.</p></li>\n<li><p><b>Search</b> \u2212 Searches an element using the given key.</p></li>\n<li><p><b>Delete</b> \u2212 Deletes an element using the given key.</p></li>\n</ul>\n<h2>Insertion Operation</h2>\n<p>Adding a new node in linked list is a more than one step activity. We shall learn this with diagrams here. First, create a node using the same structure and find the location where it has to be inserted.</p>\n<img alt=\"Linked List Insertion\" src=\"/data_structures_algorithms/images/linked_list_insertion_0.jpg\"/>\n<p>Imagine that we are inserting a node <b>B</b> (NewNode), between <b>A</b> (LeftNode) and <b>C</b> (RightNode). Then point B.next to C \u2212</p>\n<pre class=\"result notranslate\">\nNewNode.next \u2212&gt; RightNode;\n</pre>\n<p>It should look like this \u2212</p>\n<img alt=\"Linked List Insertion\" src=\"/data_structures_algorithms/images/linked_list_insertion_1.jpg\"/>\n<p>Now, the next node at the left should point to the new node.</p>\n<pre class=\"result notranslate\">\nLeftNode.next \u2212&gt; NewNode;\n</pre>\n<img alt=\"Linked List Insertion\" src=\"/data_structures_algorithms/images/linked_list_insertion_2.jpg\"/>\n<p>This will put the new node in the middle of the two. The new list should look like this \u2212</p>\n<img alt=\"Linked List Insertion\" src=\"/data_structures_algorithms/images/linked_list_insertion_3.jpg\"/>\n<p>Similar steps should be taken if the node is being inserted at the beginning of the list. While inserting it at the end, the second last node of the list should point to the new node and the new node will point to NULL.</p>\n<h2>Deletion Operation</h2>\n<p>Deletion is also a more than one step process. We shall learn with pictorial representation. First, locate the target node to be removed, by using searching algorithms.</p>\n<img alt=\"Linked List Deletion\" src=\"/data_structures_algorithms/images/linked_list_deletion_0.jpg\"/>\n<p>The left (previous) node of the target node now should point to the next node of the target node \u2212</p>\n<pre class=\"result notranslate\">\nLeftNode.next \u2212&gt; TargetNode.next;\n</pre>\n<img alt=\"Linked List Deletion\" src=\"/data_structures_algorithms/images/linked_list_deletion_1.jpg\"/>\n<p>This will remove the link that was pointing to the target node. Now, using the following code, we will remove what the target node is pointing at.</p>\n<pre class=\"result notranslate\">\nTargetNode.next \u2212&gt; NULL;\n</pre>\n<img alt=\"Linked List Deletion\" src=\"/data_structures_algorithms/images/linked_list_deletion_2.jpg\"/>\n<p>We need to use the deleted node. We can keep that in memory otherwise we can simply deallocate memory and wipe off the target node completely.</p>\n<img alt=\"Linked List Deletion\" src=\"/data_structures_algorithms/images/linked_list_deletion_3.jpg\"/>\n<h2>Reverse Operation</h2>\n<p>This operation is a thorough one. We need to make the last node to be pointed by the head node and reverse the whole linked list.</p>\n<img alt=\"Linked List Reverse Operation\" src=\"/data_structures_algorithms/images/linked_list_reverse_0.jpg\"/>\n<p>First, we traverse to the end of the list. It should be pointing to NULL. Now, we shall make it point to its previous node \u2212</p>\n<img alt=\"Linked List Reverse Operation\" src=\"/data_structures_algorithms/images/linked_list_reverse_1.jpg\"/>\n<p>We have to make sure that the last node is not the lost node. So we'll have some temp node, which looks like the head node pointing to the last node. Now, we shall make all left side nodes point to their previous nodes one by one.</p>\n<img alt=\"Linked List Reverse Operation\" src=\"/data_structures_algorithms/images/linked_list_reverse_2.jpg\"/>\n<p>Except the node (first node) pointed by the head node, all nodes should point to their predecessor, making them their new successor. The first node will point to NULL.</p>\n<img alt=\"Linked List Reverse Operation\" src=\"/data_structures_algorithms/images/linked_list_reverse_3.jpg\"/>\n<p>We'll make the head node point to the new first node by using the temp node.</p>\n<img alt=\"Linked List Reverse Operation\" src=\"/data_structures_algorithms/images/linked_list_reverse_4.jpg\"/>\n<p>The linked list is now reversed. To see linked list implementation in C programming language, please <a href=\"/data_structures_algorithms/linked_list_program_in_c.htm\">click here</a>.</p>\n<h1>Data Structure - Doubly Linked List</h1>\n<p>Doubly Linked List is a variation of Linked list in which navigation is possible in both ways, either forward and backward easily as compared to Single Linked List. Following are the important terms to understand the concept of doubly linked list.</p>\n<ul class=\"list\">\n<li><p><b>Link</b> \u2212 Each link of a linked list can store a data called an element.</p></li>\n<li><p><b>Next</b> \u2212 Each link of a linked list contains a link to the next link called Next.</p></li>\n<li><p><b>Prev</b> \u2212 Each link of a linked list contains a link to the previous link called Prev.</p></li>\n<li><p><b>LinkedList</b> \u2212 A Linked List contains the connection link to the first link called First and to the last link called Last.</p></li>\n</ul>\n<h2>Doubly Linked List Representation</h2>\n<img alt=\"Doubly Linked List\" src=\"/data_structures_algorithms/images/doubly_linked_list.jpg\"/>\n<p>As per the above illustration, following are the important points to be considered.</p>\n<ul class=\"list\">\n<li><p>Doubly Linked List contains a link element called first and last.</p></li>\n<li><p>Each link carries a data field(s) and two link fields called next and prev.</p></li>\n<li><p>Each link is linked with its next link using its next link.</p></li>\n<li><p>Each link is linked with its previous link using its previous link.</p></li>\n<li><p>The last link carries a link as null to mark the end of the list.</p></li>\n</ul>\n<h2>Basic Operations</h2>\n<p>Following are the basic operations supported by a list.</p>\n<ul class=\"list\">\n<li><p><b>Insertion</b> \u2212 Adds an element at the beginning of the list.</p></li>\n<li><p><b>Deletion</b> \u2212 Deletes an element at the beginning of the list.</p></li>\n<li><p><b>Insert Last</b> \u2212 Adds an element at the end of the list.</p></li>\n<li><p><b>Delete Last</b> \u2212 Deletes an element from the end of the list.</p></li>\n<li><p><b>Insert After</b> \u2212 Adds an element after an item of the list.</p></li>\n<li><p><b>Delete</b> \u2212 Deletes an element from the list using the key.</p></li>\n<li><p><b>Display forward</b> \u2212 Displays the complete list in a forward manner.</p></li>\n<li><p><b>Display backward</b> \u2212 Displays the complete list in a backward manner.</p></li>\n</ul>\n<h2>Insertion Operation</h2>\n<p>Following code demonstrates the insertion operation at the beginning of a doubly linked list.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\n//insert link at the first location\nvoid insertFirst(int key, int data) {\n\n   //create a link\n   struct node *link = (struct node*) malloc(sizeof(struct node));\n   link-&gt;key = key;\n   link-&gt;data = data;\n\t\n   if(isEmpty()) {\n      //make it the last link\n      last = link;\n   } else {\n      //update first prev link\n      head-&gt;prev = link;\n   }\n\n   //point it to old first link\n   link-&gt;next = head;\n\t\n   //point first to new first link\n   head = link;\n}\n</pre>\n<h2>Deletion Operation</h2>\n<p>Following code demonstrates the deletion operation at the beginning of a doubly linked list.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\n//delete first item\nstruct node* deleteFirst() {\n\n   //save reference to first link\n   struct node *tempLink = head;\n\t\n   //if only one link\n   if(head-&gt;next == NULL) {\n      last = NULL;\n   } else {\n      head-&gt;next-&gt;prev = NULL;\n   }\n\t\n   head = head-&gt;next;\n\t\n   //return the deleted link\n   return tempLink;\n}\n</pre>\n<h2>Insertion at the End of an Operation</h2>\n<p>Following code demonstrates the insertion operation at the last position of a doubly linked list.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\n//insert link at the last location\nvoid insertLast(int key, int data) {\n\n   //create a link\n   struct node *link = (struct node*) malloc(sizeof(struct node));\n   link-&gt;key = key;\n   link-&gt;data = data;\n\t\n   if(isEmpty()) {\n      //make it the last link\n      last = link;\n   } else {\n      //make link a new last link\n      last-&gt;next = link;     \n      \n      //mark old last node as prev of new link\n      link-&gt;prev = last;\n   }\n\n   //point last to new last node\n   last = link;\n}\n</pre>\n<p>To see the implementation in C programming language, please <a href=\"/data_structures_algorithms/doubly_linked_list_program_in_c.htm\">click here</a>.</p>\n<h1>Data Structure - Circular Linked List</h1>\n<p>Circular Linked List is a variation of Linked list in which the first element points to the last element and the last element points to the first element. Both Singly Linked List and Doubly Linked List can be made into a circular linked list.</p>\n<h2>Singly Linked List as Circular</h2>\n<p>In singly linked list, the next pointer of the last node points to the first node.</p>\n<img alt=\"Singly Linked List as Circular Linked List\" src=\"/data_structures_algorithms/images/singly_circular_linked_list.jpg\"/>\n<h2>Doubly Linked List as Circular</h2>\n<p>In doubly linked list, the next pointer of the last node points to the first node and the previous pointer of the first node points to the last node making the circular in both directions.</p>\n<img alt=\"Doubly Linked List as Circular Linked List\" src=\"/data_structures_algorithms/images/doubly_circular_linked_list.jpg\"/>\n<p>As per the above illustration, following are the important points to be considered.</p>\n<ul class=\"list\">\n<li><p>The last link's next points to the first link of the list in both cases of singly as well as doubly linked list.</p></li>\n<li><p>The first link's previous points to the last of the list in case of doubly linked list.</p></li>\n</ul>\n<h2>Basic Operations</h2>\n<p>Following are the important operations supported by a circular list.</p>\n<ul class=\"list\">\n<li><p><b>insert</b> \u2212 Inserts an element at the start of the list.</p></li>\n<li><p><b>delete</b> \u2212 Deletes an element from the start of the list.</p></li>\n<li><p><b>display</b> \u2212 Displays the list.</p></li>\n</ul>\n<h2>Insertion Operation</h2>\n<p>Following code demonstrates the insertion operation in a circular linked list based on single linked list.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\n//insert link at the first location\nvoid insertFirst(int key, int data) {\n   //create a link\n   struct node *link = (struct node*) malloc(sizeof(struct node));\n   link-&gt;key = key;\n   link-&gt;data= data;\n\t\n   if (isEmpty()) {\n      head = link;\n      head-&gt;next = head;\n   } else {\n      //point it to old first node\n      link-&gt;next = head;\n\t\t\n      //point first to new first node\n      head = link;\n   }   \n}\n</pre>\n<h2>Deletion Operation</h2>\n<p>Following code demonstrates the deletion operation in a circular linked list based on single linked list.</p>\n<pre class=\"prettyprint notranslate\">\n//delete first item\nstruct node * deleteFirst() {\n   //save reference to first link\n   struct node *tempLink = head;\n\t\n   if(head-&gt;next == head) {  \n      head = NULL;\n      return tempLink;\n   }     \n\n   //mark next to first link as first \n   head = head-&gt;next;\n\t\n   //return the deleted link\n   return tempLink;\n}\n</pre>\n<h2>Display List Operation</h2>\n<p>Following code demonstrates the display list operation in a circular linked list.</p>\n<pre class=\"prettyprint notranslate\">\n//display the list\nvoid printList() {\n   struct node *ptr = head;\n   printf(\"\\n[ \");\n\t\n   //start from the beginning\n   if(head != NULL) {\n      while(ptr-&gt;next != ptr) {     \n         printf(\"(%d,%d) \",ptr-&gt;key,ptr-&gt;data);\n         ptr = ptr-&gt;next;\n      }\n   }\n\t\n   printf(\" ]\");\n}\n</pre>\n<p>To know about its implementation in C programming language, please <a href=\"/data_structures_algorithms/circular_linked_list_program_in_c.htm\">click here</a>.</p>\n<h1>Data Structure and Algorithms - Stack</h1>\n<p>A stack is an Abstract Data Type (ADT), commonly used in most programming languages. It is named stack as it behaves like a real-world stack, for example \u2013 a deck of cards or a pile of plates, etc.</p>\n<img alt=\"Stack Example\" src=\"/data_structures_algorithms/images/stack_example.jpg\"/>\n<p>A real-world stack allows operations at one end only. For example, we can place or remove a card or plate from the top of the stack only. Likewise, Stack ADT allows all data operations at one end only. At any given time, we can only access the top element of a stack.</p>\n<p>This feature makes it LIFO data structure. LIFO stands for Last-in-first-out. Here, the element which is placed (inserted or added) last, is accessed first. In stack terminology, insertion operation is called <b>PUSH</b> operation and removal operation is called <b>POP</b> operation.</p>\n<h2>Stack Representation</h2>\n<p>The following diagram depicts a stack and its operations \u2212</p>\n<img alt=\"Stack Representation\" src=\"/data_structures_algorithms/images/stack_representation.jpg\"/>\n<p>A stack can be implemented by means of Array, Structure, Pointer, and Linked List. Stack can either be a fixed size one or it may have a sense of dynamic resizing. Here, we are going to implement stack using arrays, which makes it a fixed size stack implementation.</p>\n<h2>Basic Operations</h2>\n<p>Stack operations may involve initializing the stack, using it and then de-initializing it. Apart from these basic stuffs, a stack is used for the following two primary operations \u2212</p>\n<ul class=\"list\">\n<li><p><b>push()</b> \u2212 Pushing (storing) an element on the stack.</p></li>\n<li><p><b>pop()</b> \u2212 Removing (accessing) an element from the stack.</p></li>\n</ul>\n<p>When data is PUSHed onto stack.</p>\n<p>To use a stack efficiently, we need to check the status of stack as well. For the same purpose, the following functionality is added to stacks \u2212</p>\n<ul class=\"list\">\n<li><p><b>peek()</b> \u2212 get the top data element of the stack, without removing it.</p></li>\n<li><p><b>isFull()</b> \u2212 check if stack is full.</p></li>\n<li><p><b>isEmpty()</b> \u2212 check if stack is empty.</p></li>\n</ul>\n<p>At all times, we maintain a pointer to the last PUSHed data on the stack. As this pointer always represents the top of the stack, hence named <b>top</b>. The <b>top</b> pointer provides top value of the stack without actually removing it.</p>\n<p>First we should learn about procedures to support stack functions \u2212</p>\n<h3>peek()</h3>\n<p>Algorithm of peek() function \u2212</p>\n<pre class=\"result notranslate\">\nbegin procedure peek\n   return stack[top]\nend procedure\n</pre>\n<p>Implementation of peek() function in C programming language \u2212</p>\n<p><b>Example</b></p>\n<pre class=\"prettyprint notranslate\">\nint peek() {\n   return stack[top];\n}\n</pre>\n<h3>isfull()</h3>\n<p>Algorithm of isfull() function \u2212</p>\n<pre class=\"prettyprint notranslate\">\nbegin procedure isfull\n\n   if top equals to MAXSIZE\n      return true\n   else\n      return false\n   endif\n   \nend procedure\n</pre>\n<p>Implementation of isfull() function in C programming language \u2212</p>\n<p><b>Example</b></p>\n<pre class=\"prettyprint notranslate\">\nbool isfull() {\n   if(top == MAXSIZE)\n      return true;\n   else\n      return false;\n}\n</pre>\n<h3>isempty()</h3>\n<p>Algorithm of isempty() function \u2212</p>\n<pre class=\"prettyprint notranslate\">\nbegin procedure isempty\n\n   if top less than 1\n      return true\n   else\n      return false\n   endif\n   \nend procedure\n</pre>\n<p>Implementation of isempty() function in C programming language is slightly different. We initialize top at -1, as the index in array starts from 0. So we check if the top is below zero or -1 to determine if the stack is empty. Here's the code \u2212</p>\n<p><b>Example</b></p>\n<pre class=\"prettyprint notranslate\">\nbool isempty() {\n   if(top == -1)\n      return true;\n   else\n      return false;\n}\n</pre>\n<h2>Push Operation</h2>\n<p>The process of putting a new data element onto stack is known as a Push Operation. Push operation involves a series of steps \u2212</p>\n<ul class=\"list\">\n<li><p><b>Step 1</b> \u2212 Checks if the stack is full.</p></li>\n<li><p><b>Step 2</b> \u2212 If the stack is full, produces an error and exit.</p></li>\n<li><p><b>Step 3</b> \u2212 If the stack is not full, increments <b>top</b> to point next empty space.</p></li>\n<li><p><b>Step 4</b> \u2212 Adds data element to the stack location, where top is pointing.</p></li>\n<li><p><b>Step 5</b> \u2212 Returns success.</p></li>\n</ul>\n<img alt=\"Stack Push Operation\" src=\"/data_structures_algorithms/images/stack_push_operation.jpg\"/>\n<p>If the linked list is used to implement the stack, then in step 3, we need to allocate space dynamically.</p>\n<h3>Algorithm for PUSH Operation</h3>\n<p>A simple algorithm for Push operation can be derived as follows \u2212</p>\n<pre class=\"prettyprint notranslate\">\nbegin procedure push: stack, data\n\n   if stack is full\n      return null\n   endif\n   \n   top \u2190 top + 1\n   stack[top] \u2190 data\n\nend procedure\n</pre>\n<p>Implementation of this algorithm in C, is very easy. See the following code \u2212</p>\n<p><b>Example</b></p>\n<pre class=\"prettyprint notranslate\">\nvoid push(int data) {\n   if(!isFull()) {\n      top = top &amp;plus 1;   \n      stack[top] = data;\n   } else {\n      printf(\"Could not insert data, Stack is full.\\n\");\n   }\n}\n</pre>\n<h2>Pop Operation</h2>\n<p>Accessing the content while removing it from the stack, is known as a Pop Operation. In an array implementation of pop() operation, the data element is not actually removed, instead <b>top</b> is decremented to a lower position in the stack to point to the next value. But in linked-list implementation, pop() actually removes data element and deallocates memory space.</p>\n<p>A Pop operation may involve the following steps \u2212</p>\n<ul class=\"list\">\n<li><p><b>Step 1</b> \u2212 Checks if the stack is empty.</p></li>\n<li><p><b>Step 2</b> \u2212 If the stack is empty, produces an error and exit.</p></li>\n<li><p><b>Step 3</b> \u2212 If the stack is not empty, accesses the data element at which <b>top</b> is pointing.</p></li>\n<li><p><b>Step 4</b> \u2212 Decreases the value of top by 1.</p></li>\n<li><p><b>Step 5</b> \u2212 Returns success.</p></li>\n</ul>\n<img alt=\"Stack Pop Operation\" src=\"/data_structures_algorithms/images/stack_pop_operation.jpg\"/>\n<h3>Algorithm for Pop Operation</h3>\n<p>A simple algorithm for Pop operation can be derived as follows \u2212</p>\n<pre class=\"prettyprint notranslate\">\nbegin procedure pop: stack\n\n   if stack is empty\n      return null\n   endif\n   \n   data \u2190 stack[top]\n   top \u2190 top - 1\n   return data\n\nend procedure\n</pre>\n<p>Implementation of this algorithm in C, is as follows \u2212</p>\n<p><b>Example</b></p>\n<pre class=\"prettyprint notranslate\">\nint pop(int data) {\n\n   if(!isempty()) {\n      data = stack[top];\n      top = top - 1;   \n      return data;\n   } else {\n      printf(\"Could not retrieve data, Stack is empty.\\n\");\n   }\n}\n</pre>\n<p>For a complete stack program in C programming language, please <a alt=\"Stack Program in C\" href=\"/data_structures_algorithms/stack_program_in_c.htm\">click here</a>.</p>\n<h1>Data Structure - Expression Parsing</h1>\n<p>The way to write arithmetic expression is known as a <b>notation</b>. An arithmetic expression can be written in three different but equivalent notations, i.e., without changing the essence or output of an expression. These notations are \u2212</p>\n<ul class=\"list\">\n<li>Infix Notation</li>\n<li>Prefix (Polish) Notation</li>\n<li>Postfix (Reverse-Polish) Notation</li>\n</ul>\n<p>These notations are named as how they use operator in expression. We shall learn the same here in this chapter.</p>\n<h2>Infix Notation</h2>\n<p>We write expression in <b>infix</b> notation, e.g. a - b &amp;plus c, where operators are used <b>in</b>-between operands. It is easy for us humans to read, write, and speak in infix notation but the same does not go well with computing devices. An algorithm to process infix notation could be difficult and costly in terms of time and space consumption.</p>\n<h2>Prefix Notation</h2>\n<p>In this notation, operator is <b>prefix</b>ed to operands, i.e. operator is written ahead of operands. For example, <b>&amp;plusab</b>. This is equivalent to its infix notation <b>a &amp;plus b</b>. Prefix notation is also known as <b>Polish Notation</b>.</p>\n<h2>Postfix Notation</h2>\n<p>This notation style is known as <b>Reversed Polish Notation</b>. In this notation style, the operator is <b>postfix</b>ed to the operands i.e., the operator is written after the operands. For example, <b>ab&amp;plus</b>. This is equivalent to its infix notation <b>a &amp;plus b</b>.</p>\n<p>The following table briefly tries to show the difference in all three notations \u2212</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<th style=\"text-align:center;\">Sr.No.</th>\n<th style=\"text-align:center;\">Infix Notation</th>\n<th style=\"text-align:center;\">Prefix Notation</th>\n<th style=\"text-align:center;\">Postfix Notation</th>\n</tr>\n<tr>\n<td>1</td>\n<td>a &amp;plus b</td>\n<td>&amp;plus a b</td>\n<td>a b &amp;plus</td>\n</tr>\n<tr>\n<td>2</td>\n<td>(a &amp;plus b) \u2217 c</td>\n<td>\u2217 &amp;plus a b c</td>\n<td>a b &amp;plus c \u2217</td>\n</tr>\n<tr>\n<td>3</td>\n<td>a \u2217 (b &amp;plus c)</td>\n<td>\u2217 a &amp;plus b c</td>\n<td>a b c &amp;plus \u2217</td>\n</tr>\n<tr>\n<td>4</td>\n<td>a / b &amp;plus c / d</td>\n<td>&amp;plus / a b / c d</td>\n<td>a b / c d / &amp;plus</td>\n</tr>\n<tr>\n<td>5</td>\n<td>(a &amp;plus b) \u2217 (c &amp;plus d)</td>\n<td>\u2217 &amp;plus a b &amp;plus c d</td>\n<td>a b &amp;plus c d &amp;plus \u2217</td>\n</tr>\n<tr>\n<td>6</td>\n<td>((a &amp;plus b) \u2217 c) - d</td>\n<td>- \u2217 &amp;plus  a b c d</td>\n<td>a b &amp;plus c \u2217 d -</td>\n</tr>\n</table>\n<h2>Parsing Expressions</h2>\n<p>As we have discussed, it is not a very efficient way to design an algorithm or program to parse infix notations. Instead, these infix notations are first converted into either postfix or prefix notations and then computed.</p>\n<p>To parse any arithmetic expression, we need to take care of operator precedence and associativity also.</p>\n<h3>Precedence</h3>\n<p>When an operand is in between two different operators, which operator will take the operand first, is decided by the precedence of an operator over others. For example \u2212</p>\n<img alt=\"Operator Precendence\" src=\"/data_structures_algorithms/images/operator_precedence.jpg\"/>\n<p>As multiplication operation has precedence over addition, b * c will be evaluated first. A table of operator precedence is provided later.</p>\n<h3>Associativity</h3>\n<p>Associativity describes the rule where operators with the same precedence appear in an expression. For example, in expression a &amp;plus b \u2212 c, both &amp;plus and \u2013 have the same precedence, then which part of the expression will be evaluated first, is determined by associativity of those operators. Here, both &amp;plus and \u2212 are left associative, so the expression will be evaluated as <b>(a &amp;plus b) \u2212 c</b>.</p>\n<p>Precedence and associativity determines the order of evaluation of an expression. Following is an operator precedence and associativity table (highest to lowest) \u2212</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<th style=\"text-align:center;\">Sr.No.</th>\n<th style=\"text-align:center;\">Operator</th>\n<th style=\"text-align:center;\">Precedence</th>\n<th style=\"text-align:center;\">Associativity</th>\n</tr>\n<tr>\n<td>1</td>\n<td>Exponentiation ^</td>\n<td>Highest</td>\n<td>Right Associative</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Multiplication ( \u2217 ) &amp; Division ( / )</td>\n<td>Second Highest</td>\n<td>Left Associative</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Addition ( &amp;plus ) &amp; Subtraction ( \u2212 )</td>\n<td>Lowest</td>\n<td>Left Associative</td>\n</tr>\n</table>\n<p>The above table shows the default behavior of operators. At any point of time in expression evaluation, the order can be altered by using parenthesis. For example \u2212</p>\n<p>In <b>a &amp;plus b*c</b>, the expression part <b>b</b>*<b>c</b> will be evaluated first, with multiplication as precedence over addition. We here use parenthesis for <b>a &amp;plus b</b> to be evaluated first, like <b>(a &amp;plus b)*c</b>.</p>\n<h2>Postfix Evaluation Algorithm</h2>\n<p>We shall now look at the algorithm on how to evaluate postfix notation \u2212</p>\n<pre class=\"result notranslate\">\nStep 1 \u2212 scan the expression from left to right \nStep 2 \u2212 if it is an operand push it to stack \nStep 3 \u2212 if it is an operator pull operand from stack and perform operation \nStep 4 \u2212 store the output of step 3, back to stack \nStep 5 \u2212 scan the expression until all operands are consumed \nStep 6 \u2212 pop the stack and perform operation\n</pre>\n<p>To see the implementation in C programming language, please <a href=\"/data_structures_algorithms/expression_parsing_using_statck.htm\">click here</a>.</p>\n<h1>Data Structure and Algorithms - Queue</h1>\n<p>Queue is an abstract data structure, somewhat similar to Stacks. Unlike stacks, a queue is open at both its ends. One end is always used to insert data (enqueue) and the other is used to remove data (dequeue). Queue follows First-In-First-Out methodology, i.e., the data item stored first will be accessed first.</p>\n<img alt=\"Queue Example\" src=\"/data_structures_algorithms/images/queue_example.jpg\"/>\n<p>A real-world example of queue can be a single-lane one-way road, where the vehicle enters first, exits first. More real-world examples can be seen as queues at the ticket windows and bus-stops.</p>\n<h2>Queue Representation</h2>\n<p>As we now understand that in queue, we access both ends for different reasons. The following diagram given below tries to explain queue representation as data structure \u2212</p>\n<img alt=\"Queue Example\" src=\"/data_structures_algorithms/images/queue_diagram.jpg\"/>\n<p>As in stacks, a queue can also be implemented using Arrays, Linked-lists, Pointers and Structures. For the sake of simplicity, we shall implement queues using one-dimensional array.</p>\n<h2>Basic Operations</h2>\n<p>Queue operations may involve initializing or defining the queue, utilizing it, and then completely erasing it from the memory. Here we shall try to understand the basic operations associated with queues \u2212</p>\n<ul class=\"list\">\n<li><p><b>enqueue()</b> \u2212 add (store) an item to the queue.</p></li>\n<li><p><b>dequeue()</b> \u2212 remove (access) an item from the queue.</p></li>\n</ul>\n<p>Few more functions are required to make the above-mentioned queue operation efficient. These are \u2212</p>\n<ul class=\"list\">\n<li><p><b>peek()</b> \u2212 Gets the element at the front of the queue without removing it.</p></li>\n<li><p><b>isfull()</b> \u2212 Checks if the queue is full.</p></li>\n<li><p><b>isempty()</b> \u2212 Checks if the queue is empty.</p></li>\n</ul>\n<p>In queue, we always dequeue (or access) data, pointed by <b>front</b> pointer and while enqueing (or storing) data in the queue we take help of <b>rear</b> pointer.</p>\n<p>Let's first learn about supportive functions of a queue \u2212</p>\n<h3>peek()</h3>\n<p>This function helps to see the data at the <b>front</b> of the queue. The algorithm of peek() function is as follows \u2212</p>\n<p><b>Algorithm</b></p>\n<pre class=\"result notranslate\">\nbegin procedure peek\n   return queue[front]\nend procedure\n</pre>\n<p>Implementation of peek() function in C programming language \u2212</p>\n<p><b>Example</b></p>\n<pre class=\"prettyprint notranslate\">\nint peek() {\n   return queue[front];\n}\n</pre>\n<h3>isfull()</h3>\n<p>As we are using single dimension array to implement queue, we just check for the rear pointer to reach at MAXSIZE to determine that the queue is full. In case we maintain the queue in a circular linked-list, the algorithm will differ. Algorithm of isfull() function \u2212</p>\n<p><b>Algorithm</b></p>\n<pre class=\"prettyprint notranslate\">\nbegin procedure isfull\n\n   if rear equals to MAXSIZE\n      return true\n   else\n      return false\n   endif\n   \nend procedure\n</pre>\n<p>Implementation of isfull() function in C programming language \u2212</p>\n<p><b>Example</b></p>\n<pre class=\"prettyprint notranslate\">\nbool isfull() {\n   if(rear == MAXSIZE - 1)\n      return true;\n   else\n      return false;\n}\n</pre>\n<h3>isempty()</h3>\n<p>Algorithm of isempty() function \u2212</p>\n<p><b>Algorithm</b></p>\n<pre class=\"prettyprint notranslate\">\nbegin procedure isempty\n\n   if front is less than MIN  OR front is greater than rear\n      return true\n   else\n      return false\n   endif\n   \nend procedure\n</pre>\n<p>If the value of <b>front</b> is less than MIN or 0, it tells that the queue is not yet initialized, hence empty.</p>\n<p>Here's the C programming code \u2212</p>\n<p><b>Example</b></p>\n<pre class=\"prettyprint notranslate\">\nbool isempty() {\n   if(front &lt; 0 || front &gt; rear) \n      return true;\n   else\n      return false;\n}\n</pre>\n<h2>Enqueue Operation</h2>\n<p>Queues maintain two data pointers, <b>front</b> and <b>rear</b>. Therefore, its operations are comparatively difficult to implement than that of stacks.</p>\n<p>The following steps should be taken to enqueue (insert) data into a queue \u2212</p>\n<ul class=\"list\">\n<li><p><b>Step 1</b> \u2212 Check if the queue is full.</p></li>\n<li><p><b>Step 2</b> \u2212 If the queue is full, produce overflow error and exit.</p></li>\n<li><p><b>Step 3</b> \u2212 If the queue is not full, increment <b>rear</b> pointer to point the next empty space.</p></li>\n<li><p><b>Step 4</b> \u2212 Add data element to the queue location, where the rear is pointing.</p></li>\n<li><p><b>Step 5</b> \u2212 return success.</p></li>\n</ul>\n<img alt=\"Insert Operation\" src=\"/data_structures_algorithms/images/queue_enqueue_diagram.jpg\"/>\n<p>Sometimes, we also check to see if a queue is initialized or not, to handle any unforeseen situations.</p>\n<h3>Algorithm for enqueue operation</h3>\n<pre class=\"prettyprint notranslate\">\nprocedure enqueue(data)      \n   \n   if queue is full\n      return overflow\n   endif\n   \n   rear \u2190 rear + 1\n   queue[rear] \u2190 data\n   return true\n   \nend procedure\n</pre>\n<p>Implementation of enqueue() in C programming language \u2212</p>\n<p><b>Example</b></p>\n<pre class=\"prettyprint notranslate\">\nint enqueue(int data)      \n   if(isfull())\n      return 0;\n   \n   rear = rear &amp;plus 1;\n   queue[rear] = data;\n   \n   return 1;\nend procedure\n</pre>\n<h2>Dequeue Operation</h2>\n<p>Accessing data from the queue is a process of two tasks \u2212 access the data where <b>front</b> is pointing and remove the data after access. The following steps are taken to perform <b>dequeue</b> operation \u2212</p>\n<ul class=\"list\">\n<li><p><b>Step 1</b> \u2212 Check if the queue is empty.</p></li>\n<li><p><b>Step 2</b> \u2212 If the queue is empty, produce underflow error and exit.</p></li>\n<li><p><b>Step 3</b> \u2212 If the queue is not empty, access the data where <b>front</b> is pointing.</p></li>\n<li><p><b>Step 4</b> \u2212 Increment <b>front</b> pointer to point to the next available data element.</p></li>\n<li><p><b>Step 5</b> \u2212 Return success.</p></li>\n</ul>\n<img alt=\"Remove Operation\" src=\"/data_structures_algorithms/images/queue_dequeue_diagram.jpg\"/>\n<h3>Algorithm for dequeue operation</h3>\n<pre class=\"prettyprint notranslate\">\nprocedure dequeue\n   \n   if queue is empty\n      return underflow\n   end if\n\n   data = queue[front]\n   front \u2190 front + 1\n   return true\n\nend procedure\n</pre>\n<p>Implementation of dequeue() in C programming language \u2212</p>\n<p><b>Example</b></p>\n<pre class=\"prettyprint notranslate\">\nint dequeue() {\n   if(isempty())\n      return 0;\n\n   int data = queue[front];\n   front = front + 1;\n\n   return data;\n}\n</pre>\n<p>For a complete Queue program in C programming language, please <a href=\"/data_structures_algorithms/queue_program_in_c.htm\">click here</a>.</p>\n<h1>Data Structure and Algorithms Linear Search</h1>\n<p>Linear search is a very simple search algorithm. In this type of search, a sequential search is made over all items one by one. Every item is checked and if a match is found then that particular item is returned, otherwise the search continues till the end of the data collection.</p>\n<img alt=\"Linear Search Animation\" src=\"/data_structures_algorithms/images/linear_search.gif\"/>\n<h2>Algorithm</h2>\n<pre class=\"result notranslate\">\nLinear Search ( Array A, Value x)\n\nStep 1: Set i to 1\nStep 2: if i &gt; n then go to step 7\nStep 3: if A[i] = x then go to step 6\nStep 4: Set i to i + 1\nStep 5: Go to Step 2\nStep 6: Print Element x Found at index i and go to step 8\nStep 7: Print element not found\nStep 8: Exit\n</pre>\n<h2>Pseudocode</h2>\n<pre class=\"prettyprint notranslate\">\nprocedure linear_search (list, value)\n\n   for each item in the list\n      if match item == value\n         return the item's location\n      end if\n   end for\n\nend procedure\n</pre>\n<p>To know about linear search implementation in C programming language, please <a href=\"/data_structures_algorithms/linear_search_program_in_c.htm\">click-here</a>.</p>\n<h1>Data Structure and Algorithms Binary Search</h1>\n<p>Binary search is a fast search algorithm with run-time complexity of \u039f(log n). This search algorithm works on the principle of divide and conquer. For this algorithm to work properly, the data collection should be in the sorted form.</p>\n<p>Binary search looks for a particular item by comparing the middle most item of the collection. If a match occurs, then the index of item is returned. If the middle item is greater than the item, then the item is searched in the sub-array to the left of the middle item. Otherwise, the item is searched for in the sub-array to the right of the middle item. This process continues on the sub-array as well until the size of the subarray reduces to zero.</p>\n<h2>How Binary Search Works?</h2>\n<p>For a binary search to work, it is mandatory for the target array to be sorted. We shall learn the process of binary search with a pictorial example. The following is our sorted array and let us assume that we need to search the location of value 31 using binary search.</p>\n<img alt=\"Binary search\" src=\"/data_structures_algorithms/images/binary_search_0.jpg\"/>\n<p>First, we shall determine half of the array by using this formula \u2212</p>\n<pre class=\"result notranslate\">\nmid = low &amp;plus (high - low) / 2\n</pre>\n<p>Here it is, 0 &amp;plus (9 - 0 ) / 2 = 4 (integer value of 4.5). So, 4 is the mid of the array.</p>\n<img alt=\"Binary search\" src=\"/data_structures_algorithms/images/binary_search_1.jpg\"/>\n<p>Now we compare the value stored at location 4, with the value being searched, i.e. 31. We find that the value at location 4 is 27, which is not a match. As the value is greater than 27 and we have a sorted array, so we also know that the target value must be in the upper portion of the array.</p>\n<img alt=\"Binary search\" src=\"/data_structures_algorithms/images/binary_search_2.jpg\"/>\n<p>We change our low to mid &amp;plus 1 and find the new mid value again.</p>\n<pre class=\"result notranslate\">\nlow = mid &amp;plus 1\nmid = low &amp;plus (high - low) / 2\n</pre>\n<p>Our new mid is 7 now. We compare the value stored at location 7 with our target value 31.</p>\n<img alt=\"Binary search\" src=\"/data_structures_algorithms/images/binary_search_3.jpg\"/>\n<p>The value stored at location 7 is not a match, rather it is more than what we are looking for. So, the value must be in the lower part from this location.</p>\n<img alt=\"Binary search\" src=\"/data_structures_algorithms/images/binary_search_4.jpg\"/>\n<p>Hence, we calculate the mid again. This time it is 5.</p>\n<img alt=\"Binary search\" src=\"/data_structures_algorithms/images/binary_search_5.jpg\"/>\n<p>We compare the value stored at location 5 with our target value. We find that it is a match.</p>\n<img alt=\"Binary search\" src=\"/data_structures_algorithms/images/binary_search_6.jpg\"/>\n<p>We conclude that the target value 31 is stored at location 5.</p>\n<p>Binary search halves the searchable items and thus reduces the count of comparisons to be made to very less numbers.</p>\n<h2>Pseudocode</h2>\n<p>The pseudocode of binary search algorithms should look like this \u2212</p>\n<pre class=\"prettyprint notranslate\">\nProcedure binary_search\n   A \u2190 sorted array\n   n \u2190 size of array\n   x \u2190 value to be searched\n\n   Set lowerBound = 1\n   Set upperBound = n \n\n   while x not found\n      if upperBound &lt; lowerBound \n         EXIT: x does not exists.\n   \n      set midPoint = lowerBound &amp;plus ( upperBound - lowerBound ) / 2\n      \n      if A[midPoint] &lt; x\n         set lowerBound = midPoint &amp;plus 1\n         \n      if A[midPoint] &gt; x\n         set upperBound = midPoint - 1 \n\n      if A[midPoint] = x \n         EXIT: x found at location midPoint\n   end while\n   \nend procedure\n</pre>\n<p>To know about binary search implementation using array in C programming language, please <a href=\"/data_structures_algorithms/binary_search_program_in_c.htm\">click here</a>.</p>\n<h1>Data Structure - Interpolation Search</h1>\n<p>Interpolation search is an improved variant of binary search. This search algorithm works on the probing position of the required value. For this algorithm to work properly, the data collection should be in a sorted form and equally distributed.</p>\n<p>Binary search has a huge advantage of time complexity over linear search. Linear search has worst-case complexity of \u039f(n) whereas binary search has \u039f(log n).</p>\n<p>There are cases where the location of target data may be known in advance. For example, in case of a telephone directory, if we want to search the telephone number of Morphius. Here, linear search and even binary search will seem slow as we can directly jump to memory space where the names start from 'M' are stored.</p>\n<h2>Positioning in Binary Search</h2>\n<p>In binary search, if the desired data is not found then the rest of the list is divided in two parts, lower and higher. The search is carried out in either of them.</p>\n<img alt=\"BST Step One\" src=\"/data_structures_algorithms/images/bst_step_one.jpg\"/>\n<img alt=\"BST Step Two\" src=\"/data_structures_algorithms/images/bst_step_two.jpg\"/>\n<img alt=\"BST Step Three\" src=\"/data_structures_algorithms/images/bst_step_three.jpg\"/>\n<img alt=\"BST Step Four\" src=\"/data_structures_algorithms/images/bst_step_four.jpg\"/>\n<p>Even when the data is sorted, binary search does not take advantage to probe the position of the desired data.</p>\n<h2>Position Probing in Interpolation Search</h2>\n<p>Interpolation search finds a particular item by computing the probe position. Initially, the probe position is the position of the middle most item of the collection.</p>\n<img alt=\"Interpolation Step One\" src=\"/data_structures_algorithms/images/interpolation_step_one.jpg\"/>\n<img alt=\"Interpolation Step Two\" src=\"/data_structures_algorithms/images/interpolation_step_two.jpg\"/>\n<p>If a match occurs, then the index of the item is returned. To split the list into two parts, we use the following method \u2212</p>\n<pre class=\"result notranslate\">\nmid = Lo &amp;plus ((Hi - Lo) / (A[Hi] - A[Lo])) * (X - A[Lo])\n\nwhere \u2212\n   A    = list\n   Lo   = Lowest index of the list\n   Hi   = Highest index of the list\n   A[n] = Value stored at index n in the list\n</pre>\n<p>If the middle item is greater than the item, then the probe position is again calculated in the sub-array to the right of the middle item. Otherwise, the item is searched in the subarray to the left of the middle item. This process continues on the sub-array as well until the size of subarray reduces to zero.</p>\n<p>Runtime complexity of interpolation search algorithm is <b>\u039f(log (log n))</b> as compared to <b>\u039f(log n)</b> of BST in favorable situations.</p>\n<h3>Algorithm</h3>\n<p>As it is an improvisation of the existing BST algorithm, we are mentioning the steps to search the 'target' data value index, using position probing \u2212</p>\n<pre class=\"result notranslate\">\nStep 1 \u2212 Start searching <b>data</b> from middle of the list.\nStep 2 \u2212 If it is a match, return the index of the item, and exit.\nStep 3 \u2212 If it is not a match, probe position.\nStep 4 \u2212 Divide the list using probing formula and find the new midle.\nStep 5 \u2212 If data is greater than middle, search in higher sub-list.\nStep 6 \u2212 If data is smaller than middle, search in lower sub-list.\nStep 7 \u2212 Repeat until match.\n</pre>\n<h2>Pseudocode</h2>\n<pre class=\"prettyprint notranslate\">\nA \u2192 Array list\nN \u2192 Size of A\nX \u2192 Target Value\n\nProcedure Interpolation_Search()\n\n   Set Lo  \u2192  0\n   Set Mid \u2192 -1\n   Set Hi  \u2192  N-1\n\n   While X does not match\n   \n      if Lo equals to Hi OR A[Lo] equals to A[Hi]\n         EXIT: Failure, Target not found\n      end if\n      \n      Set Mid = Lo + ((Hi - Lo) / (A[Hi] - A[Lo])) * (X - A[Lo]) \n\n      if A[Mid] = X\n         EXIT: Success, Target found at Mid\n      else \n         if A[Mid] &lt; X\n            Set Lo to Mid+1\n         else if A[Mid] &gt; X\n            Set Hi to Mid-1\n         end if\n      end if\n   End While\n\nEnd Procedure\n</pre>\n<p>To know about the implementation of interpolation search in C programming language, <a href=\"/data_structures_algorithms/interpolation_search_in_c.htm\">click here</a>.</p>\n<h1>Data Structure and Algorithms - Hash Table</h1>\n<p>Hash Table is a data structure which stores data in an associative manner. In a hash table, data is stored in an array format, where each data value has its own unique index value. Access of data becomes very fast if we know the index of the desired data.</p>\n<p>Thus, it becomes a data structure in which insertion and search operations are very fast irrespective of the size of the data. Hash Table uses an array as a storage medium and uses hash technique to generate an index where an element is to be inserted or is to be located from.</p>\n<h2>Hashing</h2>\n<p>Hashing is a technique to convert a range of key values into a range of indexes of an array. We're going to use modulo operator to get a range of key values. Consider an example of hash table of size 20, and the following items are to be stored. Item are in the (key,value) format.</p>\n<img alt=\"Hash Function\" src=\"/data_structures_algorithms/images/hash_function.jpg\"/>\n<ul class=\"list\">\n<li>(1,20)</li>\n<li>(2,70)</li>\n<li>(42,80)</li>\n<li>(4,25)</li>\n<li>(12,44)</li>\n<li>(14,32)</li>\n<li>(17,11)</li>\n<li>(13,78)</li>\n<li>(37,98)</li>\n</ul>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<th style=\"text-align:center;\">Sr.No.</th>\n<th style=\"text-align:center;\">Key</th>\n<th style=\"text-align:center;\">Hash</th>\n<th style=\"text-align:center;\">Array Index</th>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1 % 20 = 1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2</td>\n<td>2 % 20 = 2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>42</td>\n<td>42 % 20 = 2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>4</td>\n<td>4</td>\n<td>4 % 20 = 4</td>\n<td>4</td>\n</tr>\n<tr>\n<td>5</td>\n<td>12</td>\n<td>12 % 20 = 12</td>\n<td>12</td>\n</tr>\n<tr>\n<td>6</td>\n<td>14</td>\n<td>14 % 20 = 14</td>\n<td>14</td>\n</tr>\n<tr>\n<td>7</td>\n<td>17</td>\n<td>17 % 20 = 17</td>\n<td>17</td>\n</tr>\n<tr>\n<td>8</td>\n<td>13</td>\n<td>13 % 20 = 13</td>\n<td>13</td>\n</tr>\n<tr>\n<td>9</td>\n<td>37</td>\n<td>37 % 20 = 17</td>\n<td>17</td>\n</tr>\n</table>\n<h2>Linear Probing</h2>\n<p>As we can see, it may happen that the hashing technique is used to create an already used index of the array. In such a case, we can search the next empty location in the array by looking into the next cell until we find an empty cell. This technique is called linear probing.</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<th style=\"text-align:center;vertical-align:middle;width:12%\">Sr.No.</th>\n<th style=\"text-align:center;vertical-align:middle;width:8%\">Key</th>\n<th style=\"text-align:center;vertical-align:middle;width:20%\">Hash</th>\n<th style=\"text-align:center;vertical-align:middle;width:20%\">Array Index</th>\n<th style=\"text-align:center;width:40%\">After Linear Probing, Array Index</th>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1 % 20 = 1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2</td>\n<td>2 % 20 = 2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>42</td>\n<td>42 % 20 = 2</td>\n<td>2</td>\n<td>3</td>\n</tr>\n<tr>\n<td>4</td>\n<td>4</td>\n<td>4 % 20 = 4</td>\n<td>4</td>\n<td>4</td>\n</tr>\n<tr>\n<td>5</td>\n<td>12</td>\n<td>12 % 20 = 12</td>\n<td>12</td>\n<td>12</td>\n</tr>\n<tr>\n<td>6</td>\n<td>14</td>\n<td>14 % 20 = 14</td>\n<td>14</td>\n<td>14</td>\n</tr>\n<tr>\n<td>7</td>\n<td>17</td>\n<td>17 % 20 = 17</td>\n<td>17</td>\n<td>17</td>\n</tr>\n<tr>\n<td>8</td>\n<td>13</td>\n<td>13 % 20 = 13</td>\n<td>13</td>\n<td>13</td>\n</tr>\n<tr>\n<td>9</td>\n<td>37</td>\n<td>37 % 20 = 17</td>\n<td>17</td>\n<td>18</td>\n</tr>\n</table>\n<h2>Basic Operations</h2>\n<p>Following are the basic primary operations of a hash table.</p>\n<ul class=\"list\">\n<li><p><b>Search</b> \u2212 Searches an element in a hash table.</p></li>\n<li><p><b>Insert</b> \u2212 inserts an element in a hash table.</p></li>\n<li><p><b>delete</b> \u2212 Deletes an element from a hash table.</p></li>\n</ul>\n<h2>DataItem</h2>\n<p>Define a data item having some data and key, based on which the search is to be conducted in a hash table.</p>\n<pre class=\"result notranslate\">\nstruct DataItem {\n   int data;\n   int key;\n};\n</pre>\n<h2>Hash Method</h2>\n<p>Define a hashing method to compute the hash code of the key of the data item.</p>\n<pre class=\"prettyprint notranslate\">\nint hashCode(int key){\n   return key % SIZE;\n}\n</pre>\n<h2>Search Operation</h2>\n<p>Whenever an element is to be searched, compute the hash code of the key passed and locate the element using that hash code as index in the array. Use linear probing to get the element ahead if the element is not found at the computed hash code.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\nstruct DataItem *search(int key) {\n   //get the hash\n   int hashIndex = hashCode(key);\n\t\n   //move in array until an empty\n   while(hashArray[hashIndex] != NULL) {\n\t\n      if(hashArray[hashIndex]-&gt;key == key)\n         return hashArray[hashIndex];\n\t\t\t\n      //go to next cell\n      ++hashIndex;\n\t\t\n      //wrap around the table\n      hashIndex %= SIZE;\n   }\n\n   return NULL;        \n}\n</pre>\n<h2>Insert Operation</h2>\n<p>Whenever an element is to be inserted, compute the hash code of the key passed and locate the index using that hash code as an index in the array. Use linear probing for empty location, if an element is found at the computed hash code.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\nvoid insert(int key,int data) {\n   struct DataItem *item = (struct DataItem*) malloc(sizeof(struct DataItem));\n   item-&gt;data = data;  \n   item-&gt;key = key;     \n\n   //get the hash \n   int hashIndex = hashCode(key);\n\n   //move in array until an empty or deleted cell\n   while(hashArray[hashIndex] != NULL &amp;&amp; hashArray[hashIndex]-&gt;key != -1) {\n      //go to next cell\n      ++hashIndex;\n\t\t\n      //wrap around the table\n      hashIndex %= SIZE;\n   }\n\t\n   hashArray[hashIndex] = item;        \n}\n</pre>\n<h2>Delete Operation</h2>\n<p>Whenever an element is to be deleted, compute the hash code of the key passed and locate the index using that hash code as an index in the array. Use linear probing to get the element ahead if an element is not found at the computed hash code. When found, store a dummy item there to keep the performance of the hash table intact.</p>\n<h3>Example</h3>\n<pre class=\"prettyprint notranslate\">\nstruct DataItem* delete(struct DataItem* item) {\n   int key = item-&gt;key;\n\n   //get the hash \n   int hashIndex = hashCode(key);\n\n   //move in array until an empty \n   while(hashArray[hashIndex] !=NULL) {\n\t\n      if(hashArray[hashIndex]-&gt;key == key) {\n         struct DataItem* temp = hashArray[hashIndex]; \n\t\t\t\n         //assign a dummy item at deleted position\n         hashArray[hashIndex] = dummyItem; \n         return temp;\n      } \n\t\t\n      //go to next cell\n      ++hashIndex;\n\t\t\n      //wrap around the table\n      hashIndex %= SIZE;\n   }  \n\t\n   return NULL;        \n}\n</pre>\n<p>To know about hash implementation in C programming language, please <a href=\"/data_structures_algorithms/hash_table_program_in_c.htm\">click here</a>.</p>\n<h1>Data Structure - Sorting Techniques</h1>\n<p>Sorting refers to arranging data in a particular format. Sorting algorithm specifies the way to arrange data in a particular order. Most common orders are in numerical or lexicographical order.</p>\n<p>The importance of sorting lies in the fact that data searching can be optimized to a very high level, if data is stored in a sorted manner. Sorting is also used to represent data in more readable formats. Following are some of the examples of sorting in real-life scenarios \u2212</p>\n<ul class=\"list\">\n<li><p><b>Telephone Directory</b> \u2212 The telephone directory stores the telephone numbers of people sorted by their names, so that the names can be searched easily.</p></li>\n<li><p><b>Dictionary</b> \u2212 The dictionary stores words in an alphabetical order so that searching of any word becomes easy.</p></li>\n</ul>\n<h2>In-place Sorting and Not-in-place Sorting</h2>\n<p>Sorting algorithms may require some extra space for comparison and temporary storage of few data elements. These algorithms do not require any extra space and sorting is said to happen in-place, or for example, within the array itself. This is called <b>in-place sorting</b>. Bubble sort is an example of in-place sorting.</p>\n<p>However, in some sorting algorithms, the program requires space which is more than or equal to the elements being sorted. Sorting which uses equal or more space is called <b>not-in-place sorting</b>. Merge-sort is an example of not-in-place sorting.</p>\n<h2>Stable and Not Stable Sorting</h2>\n<p>If a sorting algorithm, after sorting the contents, does not change the sequence of similar content in which they appear, it is called <b>stable sorting</b>.</p>\n<img alt=\"Stable Sorting\" src=\"/data_structures_algorithms/images/stable_sort.jpg\"/>\n<p>If a sorting algorithm, after sorting the contents, changes the sequence of similar content in which they appear, it is called <b>unstable sorting</b>.</p>\n<img alt=\"Unstable Sorting\" src=\"/data_structures_algorithms/images/unstable_sort.jpg\"/>\n<p>Stability of an algorithm matters when we wish to maintain the sequence of original elements, like in a tuple for example.</p>\n<h2>Adaptive and Non-Adaptive Sorting Algorithm</h2>\n<p>A sorting algorithm is said to be adaptive, if it takes advantage of already 'sorted' elements in the list that is to be sorted. That is, while sorting if the source list has some element already sorted, adaptive algorithms will take this into account and will try not to re-order them.</p>\n<p>A non-adaptive algorithm is one which does not take into account the elements which are already sorted. They try to force every single element to be re-ordered to confirm their sortedness.</p>\n<h2>Important Terms</h2>\n<p>Some terms are generally coined while discussing sorting techniques, here is a brief introduction to them \u2212</p>\n<h3>Increasing Order</h3>\n<p>A sequence of values is said to be in <b>increasing order</b>, if the successive element is greater than the previous one. For example, 1, 3, 4, 6, 8, 9 are in increasing order, as every next element is greater than the previous element.</p>\n<h3>Decreasing Order</h3>\n<p>A sequence of values is said to be in <b>decreasing order</b>, if the successive element is less than the current one. For example, 9, 8, 6, 4, 3, 1 are in decreasing order, as every next element is less than the previous element.</p>\n<h3>Non-Increasing Order</h3>\n<p>A sequence of values is said to be in <b>non-increasing order</b>, if the successive element is less than or equal to its previous element in the sequence. This order occurs when the sequence contains duplicate values. For example, 9, 8, 6, 3, 3, 1 are in non-increasing order, as every next element is less than or equal to (in case of 3) but not greater than any previous element.</p>\n<h3>Non-Decreasing Order</h3>\n<p>A sequence of values is said to be in <b>non-decreasing order</b>, if the successive element is greater than or equal to its previous element in the sequence. This order occurs when the sequence contains duplicate values. For example, 1, 3, 3, 6, 8, 9 are in non-decreasing order, as every next element is greater than or equal to (in case of 3) but not less than the previous one.</p>\n<h1>Data Structure - Bubble Sort Algorithm</h1>\n<p>Bubble sort is a simple sorting algorithm. This sorting algorithm is comparison-based algorithm in which each pair of adjacent elements is compared and the elements are swapped if they are not in order. This algorithm is not suitable for large data sets as its average and worst case complexity are of \u039f(n<sup>2</sup>) where <b>n</b> is the number of items.</p>\n<h2>How Bubble Sort Works?</h2>\n<p>We take an unsorted array for our example. Bubble sort takes \u039f(n<sup>2</sup>) time so we're keeping it short and precise.</p>\n<img alt=\"Bubble Sort\" src=\"/data_structures_algorithms/images/bubble_sort_0.jpg\"/>\n<p>Bubble sort starts with very first two elements, comparing them to check which one is greater.</p>\n<img alt=\"Bubble Sort\" src=\"/data_structures_algorithms/images/bubble_sort_1.jpg\"/>\n<p>In this case, value 33 is greater than 14, so it is already in sorted locations. Next, we compare 33 with 27.</p>\n<img alt=\"Bubble Sort\" src=\"/data_structures_algorithms/images/bubble_sort_2.jpg\"/>\n<p>We find that 27 is smaller than 33 and these two values must be swapped.</p>\n<img alt=\"Bubble Sort\" src=\"/data_structures_algorithms/images/bubble_sort_3.jpg\"/>\n<p>The new array should look like this \u2212</p>\n<img alt=\"Bubble Sort\" src=\"/data_structures_algorithms/images/bubble_sort_4.jpg\"/>\n<p>Next we compare 33 and 35. We find that both are in already sorted positions.</p>\n<img alt=\"Bubble Sort\" src=\"/data_structures_algorithms/images/bubble_sort_5.jpg\"/>\n<p>Then we move to the next two values, 35 and 10.</p>\n<img alt=\"Bubble Sort\" src=\"/data_structures_algorithms/images/bubble_sort_6.jpg\"/>\n<p>We know then that 10 is smaller 35. Hence they are not sorted.</p>\n<img alt=\"Bubble Sort\" src=\"/data_structures_algorithms/images/bubble_sort_7.jpg\"/>\n<p>We swap these values. We find that we have reached the end of the array. After one iteration, the array should look like this \u2212</p>\n<img alt=\"Bubble Sort\" src=\"/data_structures_algorithms/images/bubble_sort_8.jpg\"/>\n<p>To be precise, we are now showing how an array should look like after each iteration. After the second iteration, it should look like this \u2212</p>\n<img alt=\"Bubble Sort\" src=\"/data_structures_algorithms/images/bubble_sort_9.jpg\"/>\n<p>Notice that after each iteration, at least one value moves at the end.</p>\n<img alt=\"Bubble Sort\" src=\"/data_structures_algorithms/images/bubble_sort_10.jpg\"/>\n<p>And when there's no swap required, bubble sorts learns that an array is completely sorted.</p>\n<img alt=\"Bubble Sort\" src=\"/data_structures_algorithms/images/bubble_sort_11.jpg\"/>\n<p>Now we should look into some practical aspects of bubble sort.</p>\n<h2>Algorithm</h2>\n<p>We assume <b>list</b> is an array of <b>n</b> elements. We further assume that <b>swap</b> function swaps the values of the given array elements.</p>\n<pre class=\"prettyprint notranslate\">\nbegin BubbleSort(list)\n\n   for all elements of list\n      if list[i] &gt; list[i+1]\n         swap(list[i], list[i+1])\n      end if\n   end for\n   \n   return list\n   \nend BubbleSort\n</pre>\n<h2>Pseudocode</h2>\n<p>We observe in algorithm that Bubble Sort compares each pair of array element unless the whole array is completely sorted in an ascending order. This may cause a few complexity issues like what if the array needs no more swapping as all the elements are already ascending.</p>\n<p>To ease-out the issue, we use one flag variable <b>swapped</b> which will help us see if any swap has happened or not. If no swap has occurred, i.e. the array requires no more processing to be sorted, it will come out of the loop.</p>\n<p>Pseudocode of BubbleSort algorithm can be written as follows \u2212</p>\n<pre class=\"prettyprint notranslate\">\nprocedure bubbleSort( list : array of items )\n\n   loop = list.count;\n   \n   for i = 0 to loop-1 do:\n      swapped = false\n\t\t\n      for j = 0 to loop-1 do:\n      \n         /* compare the adjacent elements */   \n         if list[j] &gt; list[j+1] then\n            /* swap them */\n            swap( list[j], list[j+1] )\t\t \n            swapped = true\n         end if\n         \n      end for\n      \n      /*if no number was swapped that means \n      array is sorted now, break the loop.*/\n      \n      if(not swapped) then\n         break\n      end if\n      \n   end for\n   \nend procedure return list\n</pre>\n<h2>Implementation</h2>\n<p>One more issue we did not address in our original algorithm and its improvised pseudocode, is that, after every iteration the highest values settles down at the end of the array. Hence, the next iteration need not include already sorted elements. For this purpose, in our implementation, we restrict the inner loop to avoid already sorted values.</p>\n<p>To know about bubble sort implementation in C programming language, please <a href=\"/data_structures_algorithms/bubble_sort_program_in_c.htm\">click here</a>.</p>\n<h1>Data Structure and Algorithms Insertion Sort</h1>\n<p>This is an in-place comparison-based sorting algorithm. Here, a sub-list is maintained which is always sorted. For example, the lower part of an array is maintained to be sorted. An element which is to be 'insert'ed in this sorted sub-list, has to find its appropriate place and then it has to be inserted there. Hence the name, <b>insertion sort</b>.</p>\n<p>The array is searched sequentially and unsorted items are moved and inserted into the sorted sub-list (in the same array). This algorithm is not suitable for large data sets as its average and worst case complexity are of \u039f(n<sup>2</sup>), where <b>n</b> is the number of items.</p>\n<h2>How Insertion Sort Works?</h2>\n<p>We take an unsorted array for our example.</p>\n<img alt=\"Unsorted Array\" src=\"/data_structures_algorithms/images/unsorted_array.jpg\"/>\n<p>Insertion sort compares the first two elements.</p>\n<img alt=\"Insertion Sort\" src=\"/data_structures_algorithms/images/insertion_sort_1.jpg\"/>\n<p>It finds that both 14 and 33 are already in ascending order. For now, 14 is in sorted sub-list.</p>\n<img alt=\"Insertion Sort\" src=\"/data_structures_algorithms/images/insertion_sort_2.jpg\"/>\n<p>Insertion sort moves ahead and compares 33 with 27.</p>\n<img alt=\"Insertion Sort\" src=\"/data_structures_algorithms/images/insertion_sort_3.jpg\"/>\n<p>And finds that 33 is not in the correct position.</p>\n<img alt=\"Insertion Sort\" src=\"/data_structures_algorithms/images/insertion_sort_4.jpg\"/>\n<p>It swaps 33 with 27. It also checks with all the elements of sorted sub-list. Here we see that the sorted sub-list has only one element 14, and 27 is greater than 14. Hence, the sorted sub-list remains sorted after swapping.</p>\n<img alt=\"Insertion Sort\" src=\"/data_structures_algorithms/images/insertion_sort_5.jpg\"/>\n<p>By now we have 14 and 27 in the sorted sub-list. Next, it compares 33 with 10.</p>\n<img alt=\"Insertion Sort\" src=\"/data_structures_algorithms/images/insertion_sort_6.jpg\"/>\n<p>These values are not in a sorted order.</p>\n<img alt=\"Insertion Sort\" src=\"/data_structures_algorithms/images/insertion_sort_7.jpg\"/>\n<p>So we swap them.</p>\n<img alt=\"Insertion Sort\" src=\"/data_structures_algorithms/images/insertion_sort_8.jpg\"/>\n<p>However, swapping makes 27 and 10 unsorted.</p>\n<img alt=\"Insertion Sort\" src=\"/data_structures_algorithms/images/insertion_sort_9.jpg\"/>\n<p>Hence, we swap them too.</p>\n<img alt=\"Insertion Sort\" src=\"/data_structures_algorithms/images/insertion_sort_10.jpg\"/>\n<p>Again we find 14 and 10 in an unsorted order.</p>\n<img alt=\"Insertion Sort\" src=\"/data_structures_algorithms/images/insertion_sort_11.jpg\"/>\n<p>We swap them again. By the end of third iteration, we have a sorted sub-list of 4 items.</p>\n<img alt=\"Insertion Sort\" src=\"/data_structures_algorithms/images/insertion_sort_12.jpg\"/>\n<p>This process goes on until all the unsorted values are covered in a sorted sub-list. Now we shall see some programming aspects of insertion sort.</p>\n<h3>Algorithm</h3>\n<p>Now we have a bigger picture of how this sorting technique works, so we can derive simple steps by which we can achieve insertion sort.</p>\n<pre class=\"result notranslate\">\n<b>Step 1</b> \u2212 If it is the first element, it is already sorted. return 1;\n<b>Step 2</b> \u2212 Pick next element\n<b>Step 3</b> \u2212 Compare with all elements in the sorted sub-list\n<b>Step 4</b> \u2212 Shift all the elements in the sorted sub-list that is greater than the \n         value to be sorted\n<b>Step 5</b> \u2212 Insert the value\n<b>Step 6</b> \u2212 Repeat until list is sorted\n</pre>\n<h2>Pseudocode</h2>\n<pre class=\"prettyprint notranslate\">\nprocedure insertionSort( A : array of items )\n   int holePosition\n   int valueToInsert\n\t\n   for i = 1 to length(A) inclusive do:\n\t\n      /* select value to be inserted */\n      valueToInsert = A[i]\n      holePosition = i\n      \n      /*locate hole position for the element to be inserted */\n\t\t\n      while holePosition &gt; 0 and A[holePosition-1] &gt; valueToInsert do:\n         A[holePosition] = A[holePosition-1]\n         holePosition = holePosition -1\n      end while\n\t\t\n      /* insert the number at hole position */\n      A[holePosition] = valueToInsert\n      \n   end for\n\t\nend procedure\n</pre>\n<p>To know about insertion sort implementation in C programming language, please <a href=\"/data_structures_algorithms/insertion_sort_program_in_c.htm\">click here</a>.</p>\n<h1>Data Structure and Algorithms Selection Sort</h1>\n<p>Selection sort is a simple sorting algorithm. This sorting algorithm is an in-place comparison-based algorithm in which the list is divided into two parts, the sorted part at the left end and the unsorted part at the right end. Initially, the sorted part is empty and the unsorted part is the entire list.</p>\n<p>The smallest element is selected from the unsorted array and swapped with the leftmost element, and that element becomes a part of the sorted array. This process continues moving unsorted array boundary by one element to the right.</p>\n<p>This algorithm is not suitable for large data sets as its average and worst case complexities are of \u039f(n<sup>2</sup>), where <b>n</b> is the number of items.</p>\n<h2>How Selection Sort Works?</h2>\n<p>Consider the following depicted array as an example.</p>\n<img alt=\"Unsorted Array\" src=\"/data_structures_algorithms/images/unsorted_array.jpg\"/>\n<p>For the first position in the sorted list, the whole list is scanned sequentially. The first position where 14 is stored presently, we search the whole list and find that 10 is the lowest value.</p>\n<img alt=\"Selection Sort\" src=\"/data_structures_algorithms/images/selection_sort_1.jpg\"/>\n<p>So we replace 14 with 10. After one iteration 10, which happens to be the minimum value in the list, appears in the first position of the sorted list.</p>\n<img alt=\"Selection Sort\" src=\"/data_structures_algorithms/images/selection_sort_2.jpg\"/>\n<p>For the second position, where 33 is residing, we start scanning the rest of the list in a linear manner.</p>\n<img alt=\"Selection Sort\" src=\"/data_structures_algorithms/images/selection_sort_3.jpg\"/>\n<p>We find that 14 is the second lowest value in the list and it should appear at the second place. We swap these values.</p>\n<img alt=\"Selection Sort\" src=\"/data_structures_algorithms/images/selection_sort_4.jpg\"/>\n<p>After two iterations, two least values are positioned at the beginning in a sorted manner.</p>\n<img alt=\"Selection Sort\" src=\"/data_structures_algorithms/images/selection_sort_5.jpg\"/>\n<p>The same process is applied to the rest of the items in the array.</p>\n<p>Following is a pictorial depiction of the entire sorting process \u2212</p>\n<img alt=\"Selection Sort\" src=\"/data_structures_algorithms/images/selection_sort.jpg\"/>\n<p>Now, let us learn some programming aspects of selection sort.</p>\n<h3>Algorithm</h3>\n<pre class=\"result notranslate\">\n<b>Step 1</b> \u2212 Set MIN to location 0\n<b>Step 2</b> \u2212 Search the minimum element in the list\n<b>Step 3</b> \u2212 Swap with value at location MIN\n<b>Step 4</b> \u2212 Increment MIN to point to next element\n<b>Step 5</b> \u2212 Repeat until list is sorted\n</pre>\n<h3>Pseudocode</h3>\n<pre class=\"prettyprint notranslate\">\nprocedure selection sort \n   list  : array of items\n   n     : size of list\n\n   for i = 1 to n - 1\n   /* set current element as minimum*/\n      min = i    \n  \n      /* check the element to be minimum */\n\n      for j = i&amp;plus1 to n \n         if list[j] &lt; list[min] then\n            min = j;\n         end if\n      end for\n\n      /* swap the minimum element with the current element*/\n      if indexMin != i  then\n         swap list[min] and list[i]\n      end if\n   end for\n\t\nend procedure\n</pre>\n<p>To know about selection sort implementation in C programming language, please <a href=\"/data_structures_algorithms/selection_sort_program_in_c.htm\">click here</a>.</p>\n<h1>Data Structures - Merge Sort Algorithm</h1>\n<p>Merge sort is a sorting technique based on divide and conquer technique. With worst-case time complexity being \u039f(n log n), it is one of the most respected algorithms.</p>\n<p>Merge sort first divides the array into equal halves and then combines them in a sorted manner.</p>\n<h2>How Merge Sort Works?</h2>\n<p>To understand merge sort, we take an unsorted array as the following \u2212</p>\n<img alt=\"Unsorted Array\" src=\"/data_structures_algorithms/images/unsorted_array.jpg\"/>\n<p>We know that merge sort first divides the whole array iteratively into equal halves unless the atomic values are achieved. We see here that an array of 8 items is divided into two arrays of size 4.</p>\n<img alt=\"Merge Sort Division\" src=\"/data_structures_algorithms/images/merge_sort_divide_1.jpg\"/>\n<p>This does not change the sequence of appearance of items in the original. Now we divide these two arrays into halves.</p>\n<img alt=\"Merge Sort Division\" src=\"/data_structures_algorithms/images/merge_sort_divide_2.jpg\"/>\n<p>We further divide these arrays and we achieve atomic value which can no more be divided.</p>\n<img alt=\"Merge Sort Division\" src=\"/data_structures_algorithms/images/merge_sort_divide_3.jpg\"/>\n<p>Now, we combine them in exactly the same manner as they were broken down. Please note the color codes given to these lists.</p>\n<p>We first compare the element for each list and then combine them into another list in a sorted manner. We see that 14 and 33 are in sorted positions. We compare 27 and 10 and in the target list of 2 values we put 10 first, followed by 27. We change the order of 19 and 35 whereas 42 and 44 are placed sequentially.</p>\n<img alt=\"Merge Sort Combine\" src=\"/data_structures_algorithms/images/merge_sort_combine_1.jpg\"/>\n<p>In the next iteration of the combining phase, we compare lists of two data values, and merge them into a list of found data values placing all in a sorted order.</p>\n<img alt=\"Merge Sort Combine\" src=\"/data_structures_algorithms/images/merge_sort_combine_2.jpg\"/>\n<p>After the final merging, the list should look like this \u2212</p>\n<img alt=\"Merge Sort\" src=\"/data_structures_algorithms/images/merge_sort.jpg\"/>\n<p>Now we should learn some programming aspects of merge sorting.</p>\n<h3>Algorithm</h3>\n<p>Merge sort keeps on dividing the list into equal halves until it can no more be divided. By definition, if it is only one element in the list, it is sorted. Then, merge sort combines the smaller sorted lists keeping the new list sorted too.</p>\n<pre class=\"result notranslate\">\n<b>Step 1</b> \u2212 if it is only one element in the list it is already sorted, return.\n<b>Step 2</b> \u2212 divide the list recursively into two halves until it can no more be divided.\n<b>Step 3</b> \u2212 merge the smaller lists into new list in sorted order.\n</pre>\n<h3>Pseudocode</h3>\n<p>We shall now see the pseudocodes for merge sort functions. As our algorithms point out two main functions \u2212 divide &amp; merge.</p>\n<p>Merge sort works with recursion and we shall see our implementation in the same way.</p>\n<pre class=\"prettyprint notranslate\">\nprocedure mergesort( var a as array )\n   if ( n == 1 ) return a\n\n   var l1 as array = a[0] ... a[n/2]\n   var l2 as array = a[n/2+1] ... a[n]\n\n   l1 = mergesort( l1 )\n   l2 = mergesort( l2 )\n\n   return merge( l1, l2 )\nend procedure\n\nprocedure merge( var a as array, var b as array )\n\n   var c as array\n   while ( a and b have elements )\n      if ( a[0] &gt; b[0] )\n         add b[0] to the end of c\n         remove b[0] from b\n      else\n         add a[0] to the end of c\n         remove a[0] from a\n      end if\n   end while\n   \n   while ( a has elements )\n      add a[0] to the end of c\n      remove a[0] from a\n   end while\n   \n   while ( b has elements )\n      add b[0] to the end of c\n      remove b[0] from b\n   end while\n   \n   return c\n\t\nend procedure\n</pre>\n<p>To know about merge sort implementation in C programming language, please <a href=\"/data_structures_algorithms/merge_sort_program_in_c.htm\">click here</a>.</p>\n<p>Shell sort is a highly efficient sorting algorithm and is based on insertion sort algorithm. This algorithm avoids large shifts as in case of insertion sort, if the smaller value is to the far right and has to be moved to the far left.</p>\n<p>This algorithm uses insertion sort on a widely spread elements, first to sort them and then sorts the less widely spaced elements. This spacing is termed as <b>interval</b>. This interval is calculated based on Knuth's formula as \u2212</p>\n<h3>Knuth's Formula</h3>\n<pre class=\"result notranslate\">\nh = h * 3 &amp;plus 1\nwhere \u2212\n   h is interval with initial value 1\n</pre>\n<p>This algorithm is quite efficient for medium-sized data sets as its average and worst case complexity are of \u039f(n), where <b>n</b> is the number of items.</p>\n<h2>How Shell Sort Works?</h2>\n<p>Let us consider the following example to have an idea of how shell sort works. We take the same array we have used in our previous examples. For our example and ease of understanding, we take the interval of 4. Make a virtual sub-list of all values located at the interval of 4 positions. Here these values are {35, 14}, {33, 19}, {42, 27} and {10, 44}</p>\n<img alt=\"Shell Sort\" src=\"/data_structures_algorithms/images/shell_sort_gap_4.jpg\"/>\n<p>We compare values in each sub-list and swap them (if necessary) in the original array. After this step, the new array should look like this \u2212</p>\n<img alt=\"Shell Sort\" src=\"/data_structures_algorithms/images/shell_sort_step_1.jpg\"/>\n<p>Then, we take interval of 2 and this gap generates two sub-lists - {14, 27, 35, 42}, {19, 10, 33, 44}</p>\n<img alt=\"Shell Sort\" src=\"/data_structures_algorithms/images/shell_sort_gap_2.jpg\"/>\n<p>We compare and swap the values, if required, in the original array. After this step, the array should look like this \u2212</p>\n<img alt=\"Shell Sort\" src=\"/data_structures_algorithms/images/shell_sort_step_2.jpg\"/>\n<p>Finally, we sort the rest of the array using interval of value 1. Shell sort uses insertion sort to sort the array.</p>\n<p>Following is the step-by-step depiction \u2212</p>\n<img alt=\"Shell Sort\" src=\"/data_structures_algorithms/images/shell_sort.jpg\"/>\n<p>We see that it required only four swaps to sort the rest of the array.</p>\n<h3>Algorithm</h3>\n<p>Following is the algorithm for shell sort.</p>\n<pre class=\"result notranslate\">\n<b>Step 1</b> \u2212 Initialize the value of <i>h</i>\n<b>Step 2</b> \u2212 Divide the list into smaller sub-list of equal interval <i>h</i>\n<b>Step 3</b> \u2212 Sort these sub-lists using <b>insertion sort</b>\n<b>Step 3</b> \u2212 Repeat until complete list is sorted\n</pre>\n<h2>Pseudocode</h2>\n<p>Following is the pseudocode for shell sort.</p>\n<pre class=\"prettyprint notranslate\">\nprocedure shellSort()\n   A : array of items \n\t\n   /* calculate interval*/\n   while interval &lt; A.length /3 do:\n      interval = interval * 3 + 1\t    \n   end while\n   \n   while interval &gt; 0 do:\n\n      for outer = interval; outer &lt; A.length; outer ++ do:\n\n      /* select value to be inserted */\n      valueToInsert = A[outer]\n      inner = outer;\n\n         /*shift element towards right*/\n         while inner &gt; interval -1 &amp;&amp; A[inner - interval] &gt;= valueToInsert do:\n            A[inner] = A[inner - interval]\n            inner = inner - interval\n         end while\n\n      /* insert the number at hole position */\n      A[inner] = valueToInsert\n\n      end for\n\n   /* calculate interval*/\n   interval = (interval -1) /3;\t  \n\n   end while\n   \nend procedure\n</pre>\n<p>To know about shell sort implementation in C programming language, please <a href=\"/data_structures_algorithms/shell_sort_program_in_c.htm\">click here</a>.</p>\n<h1>Data Structure and Algorithms - Shell Sort</h1>\n<p>Shell sort is a highly efficient sorting algorithm and is based on insertion sort algorithm. This algorithm avoids large shifts as in case of insertion sort, if the smaller value is to the far right and has to be moved to the far left.</p>\n<p>This algorithm uses insertion sort on a widely spread elements, first to sort them and then sorts the less widely spaced elements. This spacing is termed as <b>interval</b>. This interval is calculated based on Knuth's formula as \u2212</p>\n<h3>Knuth's Formula</h3>\n<pre class=\"result notranslate\">\nh = h * 3 &amp;plus 1\nwhere \u2212\n   h is interval with initial value 1\n</pre>\n<p>This algorithm is quite efficient for medium-sized data sets as its average and worst-case complexity of this algorithm depends on the gap sequence the best known is \u039f(n), where n is the number of items. And the worst case space complexity is O(n).</p>\n<h2>How Shell Sort Works?</h2>\n<p>Let us consider the following example to have an idea of how shell sort works. We take the same array we have used in our previous examples. For our example and ease of understanding, we take the interval of 4. Make a virtual sub-list of all values located at the interval of 4 positions. Here these values are {35, 14}, {33, 19}, {42, 27} and {10, 44}</p>\n<img alt=\"Shell Sort\" src=\"/data_structures_algorithms/images/shell_sort_gap_4.jpg\"/>\n<p>We compare values in each sub-list and swap them (if necessary) in the original array. After this step, the new array should look like this \u2212</p>\n<img alt=\"Shell Sort\" src=\"/data_structures_algorithms/images/shell_sort_step_1.jpg\"/>\n<p>Then, we take interval of 1 and this gap generates two sub-lists - {14, 27, 35, 42}, {19, 10, 33, 44}</p>\n<img alt=\"Shell Sort\" src=\"/data_structures_algorithms/images/shell_sort_gap_2.jpg\"/>\n<p>We compare and swap the values, if required, in the original array. After this step, the array should look like this \u2212</p>\n<img alt=\"Shell Sort\" src=\"/data_structures_algorithms/images/shell_sort_step_2.jpg\"/>\n<p>Finally, we sort the rest of the array using interval of value 1. Shell sort uses insertion sort to sort the array.</p>\n<p>Following is the step-by-step depiction \u2212</p>\n<img alt=\"Shell Sort\" src=\"/data_structures_algorithms/images/shell_sort.jpg\"/>\n<p>We see that it required only four swaps to sort the rest of the array.</p>\n<h3>Algorithm</h3>\n<p>Following is the algorithm for shell sort.</p>\n<pre class=\"result notranslate\">\n<b>Step 1</b> \u2212 Initialize the value of <i>h</i>\n<b>Step 2</b> \u2212 Divide the list into smaller sub-list of equal interval <i>h</i>\n<b>Step 3</b> \u2212 Sort these sub-lists using <b>insertion sort</b>\n<b>Step 3</b> \u2212 Repeat until complete list is sorted\n</pre>\n<h2>Pseudocode</h2>\n<p>Following is the pseudocode for shell sort.</p>\n<pre class=\"prettyprint notranslate\">\nprocedure shellSort()\n   A : array of items \n\t\n   /* calculate interval*/\n   while interval &lt; A.length /3 do:\n      interval = interval * 3 + 1\t    \n   end while\n   \n   while interval &gt; 0 do:\n\n      for outer = interval; outer &lt; A.length; outer ++ do:\n\n      /* select value to be inserted */\n      valueToInsert = A[outer]\n      inner = outer;\n\n         /*shift element towards right*/\n         while inner &gt; interval -1 &amp;&amp; A[inner - interval] &gt;= valueToInsert do:\n            A[inner] = A[inner - interval]\n            inner = inner - interval\n         end while\n\n      /* insert the number at hole position */\n      A[inner] = valueToInsert\n\n      end for\n\n   /* calculate interval*/\n   interval = (interval -1) /3;\t  \n\n   end while\n   \nend procedure\n</pre>\n<p>To know about shell sort implementation in C programming language, please <a href=\"/data_structures_algorithms/shell_sort_program_in_c.htm\">click here</a>.</p>\n</img></div></div></div>\n<h1>Data Structure and Algorithms - Quick Sort</h1>\n<p>Quick sort is a highly efficient sorting algorithm and is based on partitioning of array of data into smaller arrays. A large array is partitioned into two arrays one of which holds values smaller than the specified value, say pivot, based on which the partition is made and another array holds values greater than the pivot value.</p>\n<p>Quick sort partitions an array and then calls itself recursively twice to sort the two resulting subarrays. This algorithm is quite efficient for large-sized data sets as its average and worst case complexity are of \u039f(n<sup>2</sup>), where <b>n</b> is the number of items.</p>\n<h2>Partition in Quick Sort</h2>\n<p>Following animated representation explains how to find the pivot value in an array.</p>\n<img alt=\"Quick Sort Partition Animation\" src=\"/data_structures_algorithms/images/quick_sort_partition_animation.gif\"/>\n<p>The pivot value divides the list into two parts. And recursively, we find the pivot for each sub-lists until all lists contains only one element.</p>\n<h2>Quick Sort Pivot Algorithm</h2>\n<p>Based on our understanding of partitioning in quick sort, we will now try to write an algorithm for it, which is as follows.</p>\n<pre class=\"result notranslate\">\n<b>Step 1</b> \u2212 Choose the highest index value has pivot\n<b>Step 2</b> \u2212 Take two variables to point left and right of the list excluding pivot\n<b>Step 3</b> \u2212 left points to the low index\n<b>Step 4</b> \u2212 right points to the high\n<b>Step 5</b> \u2212 while value at left is less than pivot move right\n<b>Step 6</b> \u2212 while value at right is greater than pivot move left\n<b>Step 7</b> \u2212 if both step 5 and step 6 does not match swap left and right\n<b>Step 8</b> \u2212 if left \u2265 right, the point where they met is new pivot\n</pre>\n<h2>Quick Sort Pivot Pseudocode</h2>\n<p>The pseudocode for the above algorithm can be derived as \u2212</p>\n<pre class=\"prettyprint notranslate\">\nfunction partitionFunc(left, right, pivot)\n   leftPointer = left\n   rightPointer = right - 1\n\n   while True do\n      while A[&amp;plus&amp;plusleftPointer] &lt; pivot do\n         //do-nothing            \n      end while\n\t\t\n      while rightPointer &gt; 0 &amp;&amp; A[--rightPointer] &gt; pivot do\n         //do-nothing         \n      end while\n\t\t\n      if leftPointer &gt;= rightPointer\n         break\n      else                \n         swap leftPointer,rightPointer\n      end if\n\t\t\n   end while \n\t\n   swap leftPointer,right\n   return leftPointer\n\t\nend function\n</pre>\n<h2>Quick Sort Algorithm</h2>\n<p>Using pivot algorithm recursively, we end up with smaller possible partitions. Each partition is then processed for quick sort. We define recursive algorithm for quicksort as follows \u2212</p>\n<pre class=\"result notranslate\">\n<b>Step 1</b> \u2212 Make the right-most index value pivot\n<b>Step 2</b> \u2212 partition the array using pivot value\n<b>Step 3</b> \u2212 quicksort left partition recursively\n<b>Step 4</b> \u2212 quicksort right partition recursively\n</pre>\n<h2>Quick Sort Pseudocode</h2>\n<p>To get more into it, let see the pseudocode for quick sort algorithm \u2212</p>\n<pre class=\"prettyprint notranslate\">\nprocedure quickSort(left, right)\n\n   if right-left &lt;= 0\n      return\n   else     \n      pivot = A[right]\n      partition = partitionFunc(left, right, pivot)\n      quickSort(left,partition-1)\n      quickSort(partition&amp;plus1,right)    \n   end if\t\t\n   \nend procedure\n</pre>\n<p>To know about quick sort implementation in C programming language, please <a href=\"/data_structures_algorithms/quick_sort_program_in_c.htm\">click here</a>.</p>\n<h1>Data Structure - Graph Data Structure</h1>\n<p>A graph is a pictorial representation of a set of objects where some pairs of objects are connected by links. The interconnected objects are represented by points termed as <b>vertices</b>, and the links that connect the vertices are called <b>edges</b>.</p>\n<p>Formally, a graph is a pair of sets <b>(V, E)</b>, where <b>V</b> is the set of vertices and <b>E</b> is the set of edges, connecting the pairs of vertices. Take a look at the following graph \u2212</p>\n<img alt=\"Graph Basics\" src=\"/data_structures_algorithms/images/graph_basics.jpg\"/>\n<p>In the above graph,</p>\n<p style=\"padding-left:8%;\">V = {a, b, c, d, e}</p>\n<p style=\"padding-left:8%;\">E = {ab, ac, bd, cd, de}</p>\n<h2>Graph Data Structure</h2>\n<p>Mathematical graphs can be represented in data structure. We can represent a graph using an array of vertices and a two-dimensional array of edges. Before we proceed further, let's familiarize ourselves with some important terms \u2212</p>\n<ul class=\"list\">\n<li><p><b>Vertex</b> \u2212 Each node of the graph is represented as a vertex. In the following example, the labeled circle represents vertices. Thus, A to G are vertices. We can represent them using an array as shown in the following image. Here A can be identified by index 0. B can be identified using index 1 and so on.</p></li>\n<li><p><b>Edge</b> \u2212 Edge represents a path between two vertices or a line between two vertices. In the following example, the lines from A to B, B to C, and so on represents edges. We can use a two-dimensional array to represent an array as shown in the following image. Here AB can be represented as 1 at row 0, column 1, BC as 1 at row 1, column 2 and so on, keeping other combinations as 0.</p></li>\n<li><p><b>Adjacency</b> \u2212 Two node or vertices are adjacent if they are connected to each other through an edge. In the following example, B is adjacent to A, C is adjacent to B, and so on.</p></li>\n<li><p><b>Path</b> \u2212 Path represents a sequence of edges between the two vertices. In the following example, ABCD represents a path from A to D.</p></li>\n</ul>\n<img alt=\"graph\" src=\"/data_structures_algorithms/images/graph.jpg\"/>\n<h2>Basic Operations</h2>\n<p>Following are basic primary operations of a Graph \u2212</p>\n<ul class=\"list\">\n<li><p><b>Add Vertex</b> \u2212 Adds a vertex to the graph.</p></li>\n<li><p><b>Add Edge</b> \u2212 Adds an edge between the two vertices of the graph.</p></li>\n<li><p><b>Display Vertex</b> \u2212 Displays a vertex of the graph.</p></li>\n</ul>\n<p>To know more about Graph, please read <a href=\"/graph_theory/index.htm\">Graph Theory Tutorial</a>. We shall learn about traversing a graph in the coming chapters.</p>\n<h1>Data Structure - Depth First Traversal</h1>\n<p>Depth First Search (DFS) algorithm traverses a graph in a depthward motion and uses a stack to remember to get the next vertex to start a search, when a dead end occurs in any iteration.</p>\n<img alt=\"Depth First Travesal\" src=\"/data_structures_algorithms/images/depth_first_traversal.jpg\"/>\n<p>As in the example given above, DFS algorithm traverses from S to A to D to G to E to B first, then to F and lastly to C. It employs the following rules.</p>\n<ul class=\"list\">\n<li><p><b>Rule 1</b> \u2212 Visit the adjacent unvisited vertex. Mark it as visited. Display it. Push it in a stack.</p></li>\n<li><p><b>Rule 2</b> \u2212 If no adjacent vertex is found, pop up a vertex from the stack. (It will pop up all the vertices from the stack, which do not have adjacent vertices.)</p></li>\n<li><p><b>Rule 3</b> \u2212 Repeat Rule 1 and Rule 2 until the stack is empty.</p></li>\n</ul>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\">Step</th>\n<th style=\"text-align:center;\">Traversal</th>\n<th style=\"text-align:center;\">Description</th>\n</tr>\n<tr>\n<td class=\"ts\" style=\"width:5%;\">1</td>\n<td style=\"width:50%\"><img alt=\"Depth First Search Step One\" src=\"/data_structures_algorithms/images/dfs_one.jpg\"/></td>\n<td style=\"vertical-align:middle;\">Initialize the stack.</td>\n</tr>\n<tr>\n<td class=\"ts\" style=\"width:5%;\">2</td>\n<td style=\"width:50%\"><img alt=\"Depth First Search Step Two\" src=\"/data_structures_algorithms/images/dfs_two.jpg\"/></td>\n<td style=\"vertical-align:middle;\">Mark <b>S</b> as visited and put it onto the stack. Explore any unvisited adjacent node from <b>S</b>. We have three nodes and we can pick any of them. For this example, we shall take the node in an alphabetical order.</td>\n</tr>\n<tr>\n<td class=\"ts\" style=\"width:5%;\">3</td>\n<td style=\"width:50%\"><img alt=\"Depth First Search Step Three\" src=\"/data_structures_algorithms/images/dfs_three.jpg\"/></td>\n<td style=\"vertical-align:middle;\">Mark <b>A</b> as visited and put it onto the stack. Explore any unvisited adjacent node from A. Both <b>S</b> and <b>D</b> are adjacent to <b>A</b> but we are concerned for unvisited nodes only.</td>\n</tr>\n<tr>\n<td class=\"ts\" style=\"width:5%;\">4</td>\n<td style=\"width:50%\"><img alt=\"Depth First Search Step Four\" src=\"/data_structures_algorithms/images/dfs_four.jpg\"/></td>\n<td style=\"vertical-align:middle;\">Visit <b>D</b> and mark it as visited and put onto the stack. Here, we have <b>B</b> and <b>C</b> nodes, which are adjacent to <b>D</b> and both are unvisited. However, we shall again choose in an alphabetical order.</td>\n</tr>\n<tr>\n<td class=\"ts\" style=\"width:5%;\">5</td>\n<td style=\"width:50%\"><img alt=\"Depth First Search Step Five\" src=\"/data_structures_algorithms/images/dfs_five.jpg\"/></td>\n<td style=\"vertical-align:middle;\">We choose <b>B</b>, mark it as visited and put onto the stack. Here <b>B</b> does not have any unvisited adjacent node. So, we pop <b>B</b> from the stack.</td>\n</tr>\n<tr>\n<td class=\"ts\" style=\"width:5%;\">6</td>\n<td style=\"width:50%\"><img alt=\"Depth First Search Step Six\" src=\"/data_structures_algorithms/images/dfs_six.jpg\"/></td>\n<td style=\"vertical-align:middle;\">We check the stack top for return to the previous node and check if it has any unvisited nodes. Here, we find <b>D</b> to be on the top of the stack.</td>\n</tr>\n<tr>\n<td class=\"ts\" style=\"width:5%;\">7</td>\n<td style=\"width:50%\"><img alt=\"Depth First Search Step Seven\" src=\"/data_structures_algorithms/images/dfs_seven.jpg\"/></td>\n<td style=\"vertical-align:middle;\">Only unvisited adjacent node is from <b>D</b> is <b>C</b> now. So we visit <b>C</b>, mark it as visited and put it onto the stack.</td>\n</tr>\n</table>\n<p>As <b>C</b> does not have any unvisited adjacent node so we keep popping the stack until we find a node that has an unvisited adjacent node. In this case, there's none and we keep popping until the stack is empty.</p>\n<p>To know about the implementation of this algorithm in C programming language, <a href=\"/data_structures_algorithms/depth_first_traversal_in_c.htm\">click here</a>.</p>\n<h1>Data Structure - Breadth First Traversal</h1>\n<p>Breadth First Search (BFS) algorithm traverses a graph in a breadthward motion and uses a queue to remember to get the next vertex to start a search, when a dead end occurs in any iteration.</p>\n<img alt=\"Breadth First Traversal\" src=\"/data_structures_algorithms/images/breadth_first_traversal.jpg\"/>\n<p>As in the example given above, BFS algorithm traverses from A to B to E to F first then to C and G lastly to D. It employs the following rules.</p>\n<ul class=\"list\">\n<li><p><b>Rule 1</b> \u2212 Visit the adjacent unvisited vertex. Mark it as visited. Display it. Insert it in a queue.</p></li>\n<li><p><b>Rule 2</b> \u2212 If no adjacent vertex is found, remove the first vertex from the queue.</p></li>\n<li><p><b>Rule 3</b> \u2212 Repeat Rule 1 and Rule 2 until the queue is empty.</p></li>\n</ul>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\">Step</th>\n<th style=\"text-align:center;\">Traversal</th>\n<th style=\"text-align:center;\">Description</th>\n</tr>\n<tr>\n<td class=\"ts\" style=\"width:5%;\">1</td>\n<td style=\"width:50%\"><img alt=\"Breadth First Search Step One\" src=\"/data_structures_algorithms/images/bfs_one.jpg\"/></td>\n<td style=\"vertical-align:middle;\">Initialize the queue.</td>\n</tr>\n<tr>\n<td class=\"ts\" style=\"width:5%;\">2</td>\n<td style=\"width:50%\"><img alt=\"Breadth First Search Step Two\" src=\"/data_structures_algorithms/images/bfs_two.jpg\"/></td>\n<td style=\"vertical-align:middle;\">We start from visiting <b>S</b> (starting node), and mark it as visited.</td>\n</tr>\n<tr>\n<td class=\"ts\" style=\"width:5%;\">3</td>\n<td style=\"width:50%\"><img alt=\"Breadth First Search Step Three\" src=\"/data_structures_algorithms/images/bfs_three.jpg\"/></td>\n<td style=\"vertical-align:middle;\">We then see an unvisited adjacent node from <b>S</b>. In this example, we have three nodes but alphabetically we choose <b>A</b>, mark it as visited and enqueue it.</td>\n</tr>\n<tr>\n<td class=\"ts\" style=\"width:5%;\">4</td>\n<td style=\"width:50%\"><img alt=\"Breadth First Search Step Four\" src=\"/data_structures_algorithms/images/bfs_four.jpg\"/></td>\n<td style=\"vertical-align:middle;\">Next, the unvisited adjacent node from <b>S</b> is <b>B</b>. We mark it as visited and enqueue it.</td>\n</tr>\n<tr>\n<td class=\"ts\" style=\"width:5%;\">5</td>\n<td style=\"width:50%\"><img alt=\"Breadth First Search Step Five\" src=\"/data_structures_algorithms/images/bfs_five.jpg\"/></td>\n<td style=\"vertical-align:middle;\">Next, the unvisited adjacent node from <b>S</b> is <b>C</b>. We mark it as visited and enqueue it.</td>\n</tr>\n<tr>\n<td class=\"ts\" style=\"width:5%;\">6</td>\n<td style=\"width:50%\"><img alt=\"Breadth First Search Step Six\" src=\"/data_structures_algorithms/images/bfs_six.jpg\"/></td>\n<td style=\"vertical-align:middle;\">Now, <b>S</b> is left with no unvisited adjacent nodes. So, we dequeue and find <b>A</b>.</td>\n</tr>\n<tr>\n<td class=\"ts\" style=\"width:5%;\">7</td>\n<td style=\"width:50%\"><img alt=\"Breadth First Search Step Seven\" src=\"/data_structures_algorithms/images/bfs_seven.jpg\"/></td>\n<td style=\"vertical-align:middle;\">From <b>A</b> we have <b>D</b> as unvisited adjacent node. We mark it as visited and enqueue it.</td>\n</tr>\n</table>\n<p>At this stage, we are left with no unmarked (unvisited) nodes. But as per the algorithm we keep on dequeuing in order to get all unvisited nodes. When the queue gets emptied, the program is over.</p>\n<p>The implementation of this algorithm in C programming language can be <a href=\"/data_structures_algorithms/breadth_first_traversal_in_c.htm\">seen here</a>.</p>\n<h1>Data Structure and Algorithms - Tree</h1>\n<p>Tree represents the nodes connected by edges. We will discuss binary tree or binary search tree specifically.</p>\n<p>Binary Tree is a special datastructure used for data storage purposes. A binary tree has a special condition that each node can have a maximum of two children. A binary tree has the benefits of both an ordered array and a linked list as search is as quick as in a sorted array and insertion or deletion operation are as fast as in linked list.</p>\n<img alt=\"Binary Tree\" src=\"/data_structures_algorithms/images/binary_tree.jpg\"/>\n<h2>Important Terms</h2>\n<p>Following are the important terms with respect to tree.</p>\n<ul class=\"list\">\n<li><p><b>Path</b> \u2212 Path refers to the sequence of nodes along the edges of a tree.</p></li>\n<li><p><b>Root</b> \u2212 The node at the top of the tree is called root. There is only one root per tree and one path from the root node to any node.</p></li>\n<li><p><b>Parent</b> \u2212 Any node except the root node has one edge upward to a node called parent.</p></li>\n<li><p><b>Child</b> \u2212 The node below a given node connected by its edge downward is called its child node.</p></li>\n<li><p><b>Leaf</b> \u2212 The node which does not have any child node is called the leaf node.</p></li>\n<li><p><b>Subtree</b> \u2212 Subtree represents the descendants of a node.</p></li>\n<li><p><b>Visiting</b> \u2212 Visiting refers to checking the value of a node when control is on the node.</p></li>\n<li><p><b>Traversing</b> \u2212 Traversing means passing through nodes in a specific order.</p></li>\n<li><p><b>Levels</b> \u2212 Level of a node represents the generation of a node. If the root node is at level 0, then its next child node is at level 1, its grandchild is at level 2, and so on.</p></li>\n<li><p><b>keys</b> \u2212 Key represents a value of a node based on which a search operation is to be carried out for a node.</p></li>\n</ul>\n<h2>Binary Search Tree Representation</h2>\n<p>Binary Search tree exhibits a special behavior. A node's left child must have a value less than its parent's value and the node's right child must have a value greater than its parent value.</p>\n<img alt=\"Binary Search Tree\" src=\"/data_structures_algorithms/images/binary_search_tree.jpg\"/>\n<p>We're going to implement tree using node object and connecting them through references.</p>\n<h2>Tree Node</h2>\n<p>The code to write a tree node would be similar to what is given below. It has a data part and references to its left and right child nodes.</p>\n<pre class=\"prettyprint notranslate\">\nstruct node {\n   int data;   \n   struct node *leftChild;\n   struct node *rightChild;\n};\n</pre>\n<p>In a tree, all nodes share common construct.</p>\n<h2>BST Basic Operations</h2>\n<p>The basic operations that can be performed on a binary search tree data structure, are the following \u2212</p>\n<ul class=\"list\">\n<li><p><b>Insert</b> \u2212 Inserts an element in a tree/create a tree.</p></li>\n<li><p><b>Search</b> \u2212 Searches an element in a tree.</p></li>\n<li><p><b>Preorder Traversal</b> \u2212 Traverses a tree in a pre-order manner.</p></li>\n<li><p><b>Inorder Traversal</b> \u2212 Traverses a tree in an in-order manner.</p></li>\n<li><p><b>Postorder Traversal</b> \u2212 Traverses a tree in a post-order manner.</p></li>\n</ul>\n<p>We shall learn creating (inserting into) a tree structure and searching a data item in a tree in this chapter. We shall learn about tree traversing methods in the coming chapter.</p>\n<h2>Insert Operation</h2>\n<p>The very first insertion creates the tree. Afterwards, whenever an element is to be inserted, first locate its proper location. Start searching from the root node, then if the data is less than the key value, search for the empty location in the left subtree and insert the data. Otherwise, search for the empty location in the right subtree and insert the data.</p>\n<h3>Algorithm</h3>\n<pre class=\"prettyprint notranslate\">\nIf root is NULL \n   then create root node\nreturn\n\nIf root exists then\n   compare the data with node.data\n   \n   while until insertion position is located\n\n      If data is greater than node.data\n         goto right subtree\n      else\n         goto left subtree\n\n   endwhile \n   \n   insert data\n\t\nend If      \n</pre>\n<h3>Implementation</h3>\n<p>The implementation of insert function should look like this \u2212</p>\n<pre class=\"prettyprint notranslate\">\nvoid insert(int data) {\n   struct node *tempNode = (struct node*) malloc(sizeof(struct node));\n   struct node *current;\n   struct node *parent;\n\n   tempNode-&gt;data = data;\n   tempNode-&gt;leftChild = NULL;\n   tempNode-&gt;rightChild = NULL;\n\n   //if tree is empty, create root node\n   if(root == NULL) {\n      root = tempNode;\n   } else {\n      current = root;\n      parent  = NULL;\n\n      while(1) {                \n         parent = current;\n\n         //go to left of the tree\n         if(data &lt; parent-&gt;data) {\n            current = current-&gt;leftChild;                \n            \n            //insert to the left\n            if(current == NULL) {\n               parent-&gt;leftChild = tempNode;\n               return;\n            }\n         }\n\t\t\t\n         //go to right of the tree\n         else {\n            current = current-&gt;rightChild;\n            \n            //insert to the right\n            if(current == NULL) {\n               parent-&gt;rightChild = tempNode;\n               return;\n            }\n         }\n      }            \n   }\n}\n</pre>\n<h2>Search Operation</h2>\n<p>Whenever an element is to be searched, start searching from the root node, then if the data is less than the key value, search for the element in the left subtree. Otherwise, search for the element in the right subtree. Follow the same algorithm for each node.</p>\n<h3>Algorithm</h3>\n<pre class=\"prettyprint notranslate\">\nIf root.data is equal to search.data\n   return root\nelse\n   while data not found\n\n      If data is greater than node.data\n         goto right subtree\n      else\n         goto left subtree\n         \n      If data found\n         return node\n   endwhile \n   \n   return data not found\n   \nend if      \n</pre>\n<p>The implementation of this algorithm should look like this.</p>\n<pre class=\"prettyprint notranslate\">\nstruct node* search(int data) {\n   struct node *current = root;\n   printf(\"Visiting elements: \");\n\n   while(current-&gt;data != data) {\n      if(current != NULL)\n      printf(\"%d \",current-&gt;data); \n      \n      //go to left tree\n\n      if(current-&gt;data &gt; data) {\n         current = current-&gt;leftChild;\n      }\n      //else go to right tree\n      else {                \n         current = current-&gt;rightChild;\n      }\n\n      //not found\n      if(current == NULL) {\n         return NULL;\n      }\n\n      return current;\n   }  \n}\n</pre>\n<p>To know about the implementation of binary search tree data structure, please <a href=\"/data_structures_algorithms/tree_traversal_in_c.htm\"> click here</a>.</p>\n<h1>Data Structure &amp; Algorithms - Tree Traversal</h1>\n<p>Traversal is a process to visit all the nodes of a tree and may print their values too. Because, all nodes are connected via edges (links) we always start from the root (head) node. That is, we cannot randomly access a node in a tree. There are three ways which we use to traverse a tree \u2212</p>\n<ul class=\"list\">\n<li>In-order Traversal</li>\n<li>Pre-order Traversal</li>\n<li>Post-order Traversal</li>\n</ul>\n<p>Generally, we traverse a tree to search or locate a given item or key in the tree or to print all the values it contains.</p>\n<h2>In-order Traversal</h2>\n<p>In this traversal method, the left subtree is visited first, then the root and later the right sub-tree. We should always remember that every node may represent a subtree itself.</p>\n<p>If a binary tree is traversed <b>in-order</b>, the output will produce sorted key values in an ascending order.</p>\n<img alt=\"In Order Traversal\" src=\"/data_structures_algorithms/images/inorder_traversal.jpg\"/>\n<p>We start from <b>A</b>, and following in-order traversal, we move to its left subtree <b>B</b>. <b>B</b> is also traversed in-order. The process goes on until all the nodes are visited. The output of inorder traversal of this tree will be \u2212</p>\n<p style=\"text-align:center;\"><b><i>D \u2192 B \u2192 E \u2192 A \u2192 F \u2192 C \u2192 G</i></b></p>\n<h3>Algorithm</h3>\n<pre class=\"result notranslate\">\nUntil all nodes are traversed \u2212\n<b>Step 1</b> \u2212 Recursively traverse left subtree.\n<b>Step 2</b> \u2212 Visit root node.\n<b>Step 3</b> \u2212 Recursively traverse right subtree.\n</pre>\n<h2>Pre-order Traversal</h2>\n<p>In this traversal method, the root node is visited first, then the left subtree and finally the right subtree.</p>\n<img alt=\"Pre Order Traversal\" src=\"/data_structures_algorithms/images/preorder_traversal.jpg\"/>\n<p>We start from <b>A</b>, and following pre-order traversal, we first visit <b>A</b> itself and then move to its left subtree <b>B</b>. <b>B</b> is also traversed pre-order. The process goes on until all the nodes are visited. The output of pre-order traversal of this tree will be \u2212</p>\n<p style=\"text-align:center;\"><b><i>A \u2192 B \u2192 D \u2192 E \u2192 C \u2192 F \u2192 G</i></b></p>\n<h3>Algorithm</h3>\n<pre class=\"result notranslate\">\nUntil all nodes are traversed \u2212\n<b>Step 1</b> \u2212 Visit root node.\n<b>Step 2</b> \u2212 Recursively traverse left subtree.\n<b>Step 3</b> \u2212 Recursively traverse right subtree.\n</pre>\n<h2>Post-order Traversal</h2>\n<p>In this traversal method, the root node is visited last, hence the name. First we traverse the left subtree, then the right subtree and finally the root node.</p>\n<img alt=\"Post Order Traversal\" src=\"/data_structures_algorithms/images/postorder_traversal.jpg\"/>\n<p>We start from <b>A</b>, and following Post-order traversal, we first visit the left subtree <b>B</b>. <b>B</b> is also traversed post-order. The process goes on until all the nodes are visited. The output of post-order traversal of this tree will be \u2212</p>\n<p style=\"text-align:center;\"><b><i>D \u2192 E \u2192 B \u2192 F \u2192 G \u2192 C \u2192 A</i></b></p>\n<h3>Algorithm</h3>\n<pre class=\"result notranslate\">\nUntil all nodes are traversed \u2212\n<b>Step 1</b> \u2212 Recursively traverse left subtree.\n<b>Step 2</b> \u2212 Recursively traverse right subtree.\n<b>Step 3</b> \u2212 Visit root node.\n</pre>\n<p>To check the C implementation of tree traversing, please <a href=\"/data_structures_algorithms/tree_traversal_in_c.htm\">click here</a>.</p>\n<h1>Data Structure - Binary Search Tree</h1>\n<p>A Binary Search Tree (BST) is a tree in which all the nodes follow the below-mentioned properties \u2212</p>\n<ul class=\"list\">\n<li><p>The left sub-tree of a node has a key less than or equal to its parent node's key.</p></li>\n<li><p>The right sub-tree of a node has a key greater than to its parent node's key.</p></li>\n</ul>\n<p>Thus, BST divides all its sub-trees into two segments; the left sub-tree and the right sub-tree and can be defined as \u2212</p>\n<pre class=\"result notranslate\">\nleft_subtree (keys)  \u2264  node (key)  \u2264  right_subtree (keys)\n</pre>\n<h2>Representation</h2>\n<p>BST is a collection of nodes arranged in a way where they maintain BST properties. Each node has a key and an associated value. While searching, the desired key is compared to the keys in BST and if found, the associated value is retrieved.</p>\n<p>Following is a pictorial representation of BST \u2212</p>\n<img alt=\"Binary Search Tree\" src=\"/data_structures_algorithms/images/binary_search_tree.jpg\"/>\n<p>We observe that the root node key (27) has all less-valued keys on the left sub-tree and the higher valued keys on the right sub-tree.</p>\n<h2>Basic Operations</h2>\n<p>Following are the basic operations of a tree \u2212</p>\n<ul class=\"list\">\n<li><p><b>Search</b> \u2212 Searches an element in a tree.</p></li>\n<li><p><b>Insert</b> \u2212 Inserts an element in a tree.</p></li>\n<li><p><b>Pre-order Traversal</b> \u2212 Traverses a tree in a pre-order manner.</p></li>\n<li><p><b>In-order Traversal</b> \u2212 Traverses a tree in an in-order manner.</p></li>\n<li><p><b>Post-order Traversal</b> \u2212 Traverses a tree in a post-order manner.</p></li>\n</ul>\n<h2>Node</h2>\n<p>Define a node having some data, references to its left and right child nodes.</p>\n<pre class=\"prettyprint notranslate\">\nstruct node {\n   int data;   \n   struct node *leftChild;\n   struct node *rightChild;\n};\n</pre>\n<h2>Search Operation</h2>\n<p>Whenever an element is to be searched, start searching from the root node. Then if the data is less than the key value, search for the element in the left subtree. Otherwise, search for the element in the right subtree. Follow the same algorithm for each node.</p>\n<h3>Algorithm</h3>\n<pre class=\"prettyprint notranslate\">\nstruct node* search(int data){\n   struct node *current = root;\n   printf(\"Visiting elements: \");\n\t\n   while(current-&gt;data != data){\n\t\n      if(current != NULL) {\n         printf(\"%d \",current-&gt;data);\n\t\t\t\n         //go to left tree\n         if(current-&gt;data &gt; data){\n            current = current-&gt;leftChild;\n         }  //else go to right tree\n         else {                \n            current = current-&gt;rightChild;\n         }\n\t\t\t\n         //not found\n         if(current == NULL){\n            return NULL;\n         }\n      }\t\t\t\n   }\n   \n   return current;\n}\n</pre>\n<h2>Insert Operation</h2>\n<p>Whenever an element is to be inserted, first locate its proper location. Start searching from the root node, then if the data is less than the key value, search for the empty location in the left subtree and insert the data. Otherwise, search for the empty location in the right subtree and insert the data.</p>\n<h3>Algorithm</h3>\n<pre class=\"prettyprint notranslate\">\nvoid insert(int data) {\n   struct node *tempNode = (struct node*) malloc(sizeof(struct node));\n   struct node *current;\n   struct node *parent;\n\n   tempNode-&gt;data = data;\n   tempNode-&gt;leftChild = NULL;\n   tempNode-&gt;rightChild = NULL;\n\n   //if tree is empty\n   if(root == NULL) {\n      root = tempNode;\n   } else {\n      current = root;\n      parent = NULL;\n\n      while(1) {                \n         parent = current;\n\t\t\t\n         //go to left of the tree\n         if(data &lt; parent-&gt;data) {\n            current = current-&gt;leftChild;                \n            //insert to the left\n\t\t\t\t\n            if(current == NULL) {\n               parent-&gt;leftChild = tempNode;\n               return;\n            }\n         }  //go to right of the tree\n         else {\n            current = current-&gt;rightChild;\n            \n            //insert to the right\n            if(current == NULL) {\n               parent-&gt;rightChild = tempNode;\n               return;\n            }\n         }\n      }            \n   }\n}        \n</pre>\n<h1>Data Structure and Algorithms - AVL Trees</h1>\n<p>What if the input to binary search tree comes in a sorted (ascending or descending) manner? It will then look like this \u2212</p>\n<img alt=\"Unbalanced BST\" src=\"/data_structures_algorithms/images/unbalanced_bst.jpg\"/>\n<p>It is observed that BST's worst-case performance is closest to linear search algorithms, that is \u039f(n). In real-time data, we cannot predict data pattern and their frequencies. So, a need arises to balance out the existing BST.</p>\n<p>Named after their inventor <b>Adelson</b>, <b>Velski</b> &amp; <b>Landis</b>, <b>AVL trees</b> are height balancing binary search tree. AVL tree checks the height of the left and the right sub-trees and assures that the difference is not more than 1. This difference is called the <b>Balance Factor</b>.</p>\n<p>Here we see that the first tree is balanced and the next two trees are not balanced \u2212</p>\n<img alt=\"Unbalanced AVL Trees\" src=\"/data_structures_algorithms/images/unbalanced_avl_trees.jpg\"/>\n<p>In the second tree, the left subtree of <b>C</b> has height 2 and the right subtree has height 0, so the difference is 2. In the third tree, the right subtree of <b>A</b> has height 2 and the left is missing, so it is 0, and the difference is 2 again. AVL tree permits difference (balance factor) to be only 1.</p>\n<pre class=\"result notranslate\">\n<i><b>BalanceFactor</b></i> = height(left-sutree) \u2212 height(right-sutree)\n</pre>\n<p>If the difference in the height of left and right sub-trees is more than 1, the tree is balanced using some rotation techniques.</p>\n<h2>AVL Rotations</h2>\n<p>To balance itself, an AVL tree may perform the following four kinds of rotations \u2212</p>\n<ul class=\"list\">\n<li>Left rotation</li>\n<li>Right rotation</li>\n<li>Left-Right rotation</li>\n<li>Right-Left rotation</li>\n</ul>\n<p>The first two rotations are single rotations and the next two rotations are double rotations. To have an unbalanced tree, we at least need a tree of height 2. With this simple tree, let's understand them one by one.</p>\n<h3>Left Rotation</h3>\n<p>If a tree becomes unbalanced, when a node is inserted into the right subtree of the right subtree, then we perform a single left rotation \u2212</p>\n<img alt=\"Left Rotation\" src=\"/data_structures_algorithms/images/avl_left_rotation.jpg\"/>\n<p>In our example, node <b>A</b> has become unbalanced as a node is inserted in the right subtree of A's right subtree. We perform the left rotation by making <b>A</b> the left-subtree of B.</p>\n<h2>Right Rotation</h2>\n<p>AVL tree may become unbalanced, if a node is inserted in the left subtree of the left subtree. The tree then needs a right rotation.</p>\n<img alt=\"Right Rotation\" src=\"/data_structures_algorithms/images/avl_right_rotation.jpg\"/>\n<p>As depicted, the unbalanced node becomes the right child of its left child by performing a right rotation.</p>\n<h3>Left-Right Rotation</h3>\n<p>Double rotations are slightly complex version of already explained versions of rotations. To understand them better, we should take note of each action performed while rotation. Let's first check how to perform Left-Right rotation. A left-right rotation is a combination of left rotation followed by right rotation.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"width:30%; text-align:center;\">State</th>\n<th style=\"text-align:center;\">Action</th>\n</tr>\n<tr>\n<td><img alt=\"Right Rotation\" src=\"/data_structures_algorithms/images/right_subtree_of_left_subtree.jpg\"/></td>\n<td style=\"vertical-align:middle;\">A node has been inserted into the right subtree of the left subtree. This makes <b>C</b> an unbalanced node. These scenarios cause AVL tree to perform left-right rotation.</td>\n</tr>\n<tr>\n<td><img alt=\"Left Rotation\" src=\"/data_structures_algorithms/images/subtree_left_rotation.jpg\"/></td>\n<td style=\"vertical-align:middle;\">We first perform the left rotation on the left subtree of <b>C</b>. This makes <b>A</b>, the left subtree of <b>B</b>.</td>\n</tr>\n<tr>\n<td><img alt=\"Left Rotation\" src=\"/data_structures_algorithms/images/left_unbalanced_tree.jpg\"/></td>\n<td style=\"vertical-align:middle;\">Node <b>C</b> is still unbalanced, however now, it is because of the left-subtree of the left-subtree.</td>\n</tr>\n<tr>\n<td><img alt=\"Right Rotation\" src=\"/data_structures_algorithms/images/right_rotation.jpg\"/></td>\n<td style=\"vertical-align:middle;\">We shall now right-rotate the tree, making <b>B</b> the new root node of this subtree. <b>C</b> now becomes the right subtree of its own left subtree.</td>\n</tr>\n<tr>\n<td><img alt=\"Balanced Avl Tree\" src=\"/data_structures_algorithms/images/balanced_avl_tree.jpg\"/></td>\n<td style=\"vertical-align:middle;\">The tree is now balanced.</td>\n</tr>\n</table>\n<h3>Right-Left Rotation</h3>\n<p>The second type of double rotation is Right-Left Rotation. It is a combination of right rotation followed by left rotation.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;width:30%;\">State</th>\n<th style=\"text-align:center;\">Action</th>\n</tr>\n<tr>\n<td><img alt=\"Left Subtree of Right Subtree\" src=\"/data_structures_algorithms/images/left_subtree_of_right_subtree.jpg\"/></td>\n<td style=\"vertical-align:middle;\">A node has been inserted into the left subtree of the right subtree. This makes <b>A</b>, an unbalanced node with balance factor 2.</td>\n</tr>\n<tr>\n<td><img alt=\"Subtree Right Rotation\" src=\"/data_structures_algorithms/images/subtree_right_rotation.jpg\"/></td>\n<td style=\"vertical-align:middle;\">First, we perform the right rotation along <b>C</b> node, making <b>C</b> the right subtree of its own left subtree <b>B</b>. Now, <b>B</b> becomes the right subtree of <b>A</b>.</td>\n</tr>\n<tr>\n<td><img alt=\"Right Unbalanced Tree\" src=\"/data_structures_algorithms/images/right_unbalanced_tree.jpg\"/></td>\n<td style=\"vertical-align:middle;\">Node <b>A</b> is still unbalanced because of the right subtree of its right subtree and requires a left rotation.</td>\n</tr>\n<tr>\n<td><img alt=\"Left Rotation\" src=\"/data_structures_algorithms/images/left_rotation.jpg\"/></td>\n<td style=\"vertical-align:middle;\">A left rotation is performed by making <b>B</b> the new root node of the subtree. <b>A</b> becomes the left subtree of its right subtree <b>B</b>.</td>\n</tr>\n<tr>\n<td><img alt=\"Balanced AVL Tree\" src=\"/data_structures_algorithms/images/balanced_avl_tree.jpg\"/></td>\n<td style=\"vertical-align:middle;\">The tree is now balanced.</td>\n</tr>\n</table>\n<h1>Data Structure &amp; Algorithms - Spanning Tree</h1>\n<p>A spanning tree is a subset of Graph G, which has all the vertices covered with minimum possible number of edges. Hence, a spanning tree does not have cycles and it cannot be disconnected..</p>\n<p>By this definition, we can draw a conclusion that every connected and undirected Graph G has at least one spanning tree. A disconnected graph does not have any spanning tree, as it cannot be spanned to all its vertices.</p>\n<img alt=\"Spanning Trees\" src=\"/data_structures_algorithms/images/spanning_trees.jpg\"/>\n<p>We found three spanning trees off one complete graph. A complete undirected graph can have maximum <b>n<sup>n-2</sup></b> number of spanning trees, where <b>n</b> is the number of nodes. In the above addressed example, <b>n is 3,</b> hence <b>3<sup>3\u22122</sup> = 3</b> spanning trees are possible.</p>\n<h2>General Properties of Spanning Tree</h2>\n<p>We now understand that one graph can have more than one spanning tree. Following are a few properties of the spanning tree connected to graph G \u2212</p>\n<ul class=\"list\">\n<li><p>A connected graph G can have more than one spanning tree.</p></li>\n<li><p>All possible spanning trees of graph G, have the same number of edges and vertices.</p></li>\n<li><p>The spanning tree does not have any cycle (loops).</p></li>\n<li><p>Removing one edge from the spanning tree will make the graph disconnected, i.e. the spanning tree is <b>minimally connected</b>.</p></li>\n<li><p>Adding one edge to the spanning tree will create a circuit or loop, i.e. the spanning tree is <b>maximally acyclic</b>.</p></li>\n</ul>\n<h2>Mathematical Properties of Spanning Tree</h2>\n<ul class=\"list\">\n<li><p>Spanning tree has <b>n-1</b> edges, where <b>n</b> is the number of nodes (vertices).</p></li>\n<li><p>From a complete graph, by removing maximum <b>e - n &amp;plus 1</b> edges, we can construct a spanning tree.</p></li>\n<li><p>A complete graph can have maximum <b>n<sup>n-2</sup></b> number of spanning trees.</p></li>\n</ul>\n<p>Thus, we can conclude that spanning trees are a subset of connected Graph G and disconnected graphs do not have spanning tree.</p>\n<h2>Application of Spanning Tree</h2>\n<p>Spanning tree is basically used to find a minimum path to connect all nodes in a graph. Common application of spanning trees are \u2212</p>\n<ul class=\"list\">\n<li><p><b>Civil Network Planning</b></p></li>\n<li><p><b>Computer Network Routing Protocol</b></p></li>\n<li><p><b>Cluster Analysis</b></p></li>\n</ul>\n<p>Let us understand this through a small example. Consider, city network as a huge graph and now plans to deploy telephone lines in such a way that in minimum lines we can connect to all city nodes. This is where the spanning tree comes into picture.</p>\n<h2>Minimum Spanning Tree (MST)</h2>\n<p>In a weighted graph, a minimum spanning tree is a spanning tree that has minimum weight than all other spanning trees of the same graph. In real-world situations, this weight can be measured as distance, congestion, traffic load or any arbitrary value denoted to the edges.</p>\n<h2>Minimum Spanning-Tree Algorithm</h2>\n<p>We shall learn about two most important spanning tree algorithms here \u2212</p>\n<ul class=\"list\">\n<li><p><a href=\"/data_structures_algorithms/kruskals_spanning_tree_algorithm.htm\">Kruskal's Algorithm</a></p></li>\n<li><p><a href=\"/data_structures_algorithms/prims_spanning_tree_algorithm.htm\">Prim's Algorithm</a></p></li>\n</ul>\n<p>Both are greedy algorithms.</p>\n<h1>Heap Data Structures</h1>\n<p>Heap is a special case of balanced binary tree data structure where the root-node key is compared with its children and arranged accordingly. If <b>\u03b1</b> has child node <b>\u03b2</b> then \u2212</p>\n<p style=\"text-align:center;font-weight:bold;\">key(\u03b1) \u2265 key(\u03b2)</p>\n<p>As the value of parent is greater than that of child, this property generates <b>Max Heap</b>. Based on this criteria, a heap can be of two types \u2212</p>\n<pre class=\"result notranslate\">\nFor Input \u2192 35 33 42 10 14 19 27 44 26 31\n</pre>\n<p><b>Min-Heap</b> \u2212 Where the value of the root node is less than or equal to either of its children.</p>\n<img alt=\"Max Heap Example\" src=\"/data_structures_algorithms/images/min_heap_example.jpg\"/>\n<p><b>Max-Heap</b> \u2212 Where the value of the root node is greater than or equal to either of its children.</p>\n<img alt=\"Max Heap Example\" src=\"/data_structures_algorithms/images/max_heap_example.jpg\"/>\n<p>Both trees are constructed using the same input and order of arrival.</p>\n<h2>Max Heap Construction Algorithm</h2>\n<p>We shall use the same example to demonstrate how a Max Heap is created. The procedure to create Min Heap is similar but we go for min values instead of max values.</p>\n<p>We are going to derive an algorithm for max heap by inserting one element at a time. At any point of time, heap must maintain its property. While insertion, we also assume that we are inserting a node in an already heapified tree.</p>\n<pre class=\"result notranslate\">\n<b>Step 1</b> \u2212 Create a new node at the end of heap.\n<b>Step 2</b> \u2212 Assign new value to the node.\n<b>Step 3</b> \u2212 Compare the value of this child node with its parent.\n<b>Step 4</b> \u2212 If value of parent is less than child, then swap them.\n<b>Step 5</b> \u2212 Repeat step 3 &amp; 4 until Heap property holds.\n</pre>\n<p><b>Note</b> \u2212 In Min Heap construction algorithm, we expect the value of the parent node to be less than that of the child node.</p>\n<p>Let's understand Max Heap construction by an animated illustration. We consider the same input sample that we used earlier.</p>\n<img alt=\"Max Heap Animated Example\" src=\"/data_structures_algorithms/images/max_heap_animation.gif\"/>\n<h2>Max Heap Deletion Algorithm</h2>\n<p>Let us derive an algorithm to delete from max heap. Deletion in Max (or Min) Heap always happens at the root to remove the Maximum (or minimum) value.</p>\n<pre class=\"result notranslate\">\n<b>Step 1</b> \u2212 Remove root node.\n<b>Step 2</b> \u2212 Move the last element of last level to root.\n<b>Step 3</b> \u2212 Compare the value of this child node with its parent.\n<b>Step 4</b> \u2212 If value of parent is less than child, then swap them.\n<b>Step 5</b> \u2212 Repeat step 3 &amp; 4 until Heap property holds.\n</pre>\n<img alt=\"Max Heap Deletion Animated Example\" src=\"/data_structures_algorithms/images/max_heap_deletion_animation.gif\"/>\n<h1>Data Structure - Recursion Basics</h1>\n<p>Some computer programming languages allow a module or function to call itself. This technique is known as recursion. In recursion, a function <b>\u03b1</b> either calls itself directly or calls a function <b>\u03b2</b> that in turn calls the original function <b>\u03b1</b>. The function <b>\u03b1</b> is called recursive function.</p>\n<p><b>Example</b> \u2212 a function calling itself.</p>\n<pre class=\"prettyprint notranslate\">\nint function(int value) {\n   if(value &lt; 1)\n      return;\n   function(value - 1);\n\n   printf(\"%d \",value);   \n}\n</pre>\n<p><b>Example</b> \u2212 a function that calls another function which in turn calls it again.</p>\n<pre class=\"prettyprint notranslate\">\nint function1(int value1) {\n   if(value1 &lt; 1)\n      return;\n   function2(value1 - 1);\n   printf(\"%d \",value1);   \n}\nint function2(int value2) {\n   function1(value2);\n}\n</pre>\n<h2>Properties</h2>\n<p>A recursive function can go infinite like a loop. To avoid infinite running of recursive function, there are two properties that a recursive function must have \u2212</p>\n<ul class=\"list\">\n<li><p><b>Base criteria</b> \u2212 There must be at least one base criteria or condition, such that, when this condition is met the function stops calling itself recursively.</p></li>\n<li><p><b>Progressive approach</b> \u2212 The recursive calls should progress in such a way that each time a recursive call is made it comes closer to the base criteria.</p></li>\n</ul>\n<h2>Implementation</h2>\n<p>Many programming languages implement recursion by means of <b>stacks</b>. Generally, whenever a function (<b>caller</b>) calls another function (<b>callee</b>) or itself as callee, the caller function transfers execution control to the callee. This transfer process may also involve some data to be passed from the caller to the callee.</p>\n<p>This implies, the caller function has to suspend its execution temporarily and resume later when the execution control returns from the callee function. Here, the caller function needs to start exactly from the point of execution where it puts itself on hold. It also needs the exact same data values it was working on. For this purpose, an activation record (or stack frame) is created for the caller function.</p>\n<img alt=\"Activation Records\" src=\"/data_structures_algorithms/images/activation_records.jpg\"/>\n<p>This activation record keeps the information about local variables, formal parameters, return address and all information passed to the caller function.</p>\n<h2>Analysis of Recursion</h2>\n<p>One may argue why to use recursion, as the same task can be done with iteration. The first reason is, recursion makes a program more readable and because of latest enhanced CPU systems, recursion is more efficient than iterations.</p>\n<h2>Time Complexity</h2>\n<p>In case of iterations, we take number of iterations to count the time complexity. Likewise, in case of recursion, assuming everything is constant, we try to figure out the number of times a recursive call is being made. A call made to a function is \u039f(1), hence the (n) number of times a recursive call is made makes the recursive function \u039f(n).</p>\n<h2>Space Complexity</h2>\n<p>Space complexity is counted as what amount of extra space is required for a module to execute. In case of iterations, the compiler hardly requires any extra space. The compiler keeps updating the values of variables used in the iterations. But in case of recursion, the system needs to store activation record each time a recursive call is made. Hence, it is considered that space complexity of recursive function may go higher than that of a function with iteration.</p>\n<h1>Data Structure &amp; Algorithms - Tower of Hanoi</h1>\n<p>Tower of Hanoi, is a mathematical puzzle which consists of three towers (pegs) and more than one rings is as depicted \u2212</p>\n<img alt=\"Tower Of Hanoi\" src=\"/data_structures_algorithms/images/tower_of_hanoi.jpg\"/>\n<p>These rings are of different sizes and stacked upon in an ascending order, i.e. the smaller one sits over the larger one. There are other variations of the puzzle where the number of disks increase, but the tower count remains the same.</p>\n<h2>Rules</h2>\n<p>The mission is to move all the disks to some another tower without violating the sequence of arrangement. A few rules to be followed for Tower of Hanoi are \u2212</p>\n<ul class=\"list\">\n<li>Only one disk can be moved among the towers at any given time.</li>\n<li>Only the \"top\" disk can be removed.</li>\n<li>No large disk can sit over a small disk.</li>\n</ul>\n<p>Following is an animated representation of solving a Tower of Hanoi puzzle with three disks.</p>\n<img alt=\"Tower Of Hanoi\" src=\"/data_structures_algorithms/images/tower_of_hanoi.gif\"/>\n<p>Tower of Hanoi puzzle with n disks can be solved in minimum <b>2<sup>n</sup>\u22121</b> steps. This presentation shows that a puzzle with 3 disks has taken <b>2<sup>3</sup> - 1 = 7</b> steps.</p>\n<h2>Algorithm</h2>\n<p>To write an algorithm for Tower of Hanoi, first we need to learn how to solve this problem with lesser amount of disks, say \u2192 1 or 2. We mark three towers with name, <b>source</b>, <b>destination</b> and <b>aux</b> (only to help moving the disks). If we have only one disk, then it can easily be moved from source to destination peg.</p>\n<p>If we have 2 disks \u2212</p>\n<ul class=\"list\">\n<li>First, we move the smaller (top) disk to aux peg.</li>\n<li>Then, we move the larger (bottom) disk to destination peg.</li>\n<li>And finally, we move the smaller disk from aux to destination peg.</li>\n</ul>\n<img alt=\"Tower Of Hanoi with Two Disks\" src=\"/data_structures_algorithms/images/tower_of_hanoi_two_disks.gif\"/>\n<p>So now, we are in a position to design an algorithm for Tower of Hanoi with more than two disks. We divide the stack of disks in two parts. The largest disk (n<sup>th</sup> disk) is in one part and all other (n-1) disks are in the second part.</p>\n<p>Our ultimate aim is to move disk <b>n</b> from source to destination and then put all other (n1) disks onto it. We can imagine to apply the same in a recursive way for all given set of disks.</p>\n<p>The steps to follow are \u2212</p>\n<pre class=\"result notranslate\">\n<b>Step 1</b> \u2212 Move n-1 disks from <code><b>source</b></code> to <code><b>aux</b></code>\n<b>Step 2</b> \u2212 Move n<sup>th</sup> disk from <code><b>source</b></code> to <code><b>dest</b></code>\n<b>Step 3</b> \u2212 Move n-1 disks from <code><b>aux</b></code> to <code><b>dest</b></code>\n</pre>\n<p>A recursive algorithm for Tower of Hanoi can be driven as follows \u2212</p>\n<pre class=\"prettyprint notranslate\">\nSTART\nProcedure Hanoi(disk, source, dest, aux)\n\n   IF disk == 1, THEN\n      move disk from source to dest             \n   ELSE\n      Hanoi(disk - 1, source, aux, dest)     // Step 1\n      move disk from source to dest          // Step 2\n      Hanoi(disk - 1, aux, dest, source)     // Step 3\n   END IF\n   \nEND Procedure\nSTOP\n</pre>\n<p>To check the implementation in C programming, <a href=\"/data_structures_algorithms/tower_of_hanoi_in_c.htm\">click here</a>.</p>\n<h1>Data Structure &amp; Algorithms Fibonacci Series</h1>\n<p>Fibonacci series generates the subsequent number by adding two previous numbers. Fibonacci series starts from two numbers \u2212 <b>F<sub>0</sub> &amp; F<sub>1</sub></b>. The initial values of F<sub>0</sub> &amp; F<sub>1</sub> can be taken 0, 1 or 1, 1 respectively.</p>\n<p>Fibonacci series satisfies the following conditions \u2212</p>\n<pre class=\"result notranslate\">\nF<sub>n</sub> = F<sub>n-1</sub> + F<sub>n-2</sub>\n</pre>\n<p>Hence, a Fibonacci series can look like this \u2212</p>\n<p>F<sub>8</sub> = 0 1 1 2 3 5 8 13</p>\n<p>or, this \u2212</p>\n<p>F<sub>8</sub> = 1 1 2 3 5 8 13 21</p>\n<p>For illustration purpose, Fibonacci of F<sub>8</sub> is displayed as \u2212</p>\n<img alt=\"Fibonacci Animation\" src=\"/data_structures_algorithms/images/fibonacci_animation.gif\"/>\n<h2>Fibonacci Iterative Algorithm</h2>\n<p>First we try to draft the iterative algorithm for Fibonacci series.</p>\n<pre class=\"prettyprint notranslate\">\nProcedure Fibonacci(n)\n   declare f<sub>0</sub>, f<sub>1</sub>, fib, loop \n   \n   set f<sub>0</sub> to 0\n   set f<sub>1</sub> to 1\n   \n   <b>display f<sub>0</sub>, f<sub>1</sub></b>\n   \n   for loop \u2190 1 to n\n   \n      fib \u2190 f<sub>0</sub> &amp;plus f<sub>1</sub>   \n      f<sub>0</sub> \u2190 f<sub>1</sub>\n      f<sub>1</sub> \u2190 fib\n\n      <b>display fib</b>\n   end for\n\t\nend procedure\n</pre>\n<p>To know about the implementation of the above algorithm in C programming language, <a href=\"/data_structures_algorithms/fibonacci_iterative_program_in_c.htm\">click here</a>.</p>\n<h2>Fibonacci Recursive Algorithm</h2>\n<p>Let us learn how to create a recursive algorithm Fibonacci series. The base criteria of recursion.</p>\n<pre class=\"prettyprint notranslate\">\nSTART\nProcedure Fibonacci(n)\n   declare f<sub>0</sub>, f<sub>1</sub>, fib, loop \n   \n   set f<sub>0</sub> to 0\n   set f<sub>1</sub> to 1\n   \n   <b>display f<sub>0</sub>, f<sub>1</sub></b>\n   \n   for loop \u2190 1 to n\n   \n      fib \u2190 f<sub>0</sub> &amp;plus f<sub>1</sub>   \n      f<sub>0</sub> \u2190 f<sub>1</sub>\n      f<sub>1</sub> \u2190 fib\n\n      <b>display fib</b>\n   end for\n\nEND\n</pre>\n<p>To see the implementation of above algorithm in c programming language, <a href=\"/data_structures_algorithms/fibonacci_recursive_program_in_c.htm\">click here</a>.</p>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/data_structures_algorithms/data_structures_algorithms_questions_answers.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/data_structures_algorithms/dsa_useful_resources.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n\n\n<div class=\"row\">\n<div class=\"col-md-3\" id=\"rightbar\">\n<div class=\"simple-ad\">\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.facebook.com/sharer.php?u=' + 'https://www.tutorialspoint.com/data_structures_algorithms/dsa_quick_guide.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/facebookIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://twitter.com/share?url=' + 'https://www.tutorialspoint.com/data_structures_algorithms/dsa_quick_guide.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/twitterIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'https://www.tutorialspoint.com/data_structures_algorithms/dsa_quick_guide.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/linkedinIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=https://www.tutorialspoint.com/data_structures_algorithms/dsa_quick_guide.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/googlePlusIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.stumbleupon.com/submit?url=https://www.tutorialspoint.com/data_structures_algorithms/dsa_quick_guide.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/StumbleUponIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://reddit.com/submit?url=https://www.tutorialspoint.com/data_structures_algorithms/dsa_quick_guide.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/reddit.jpg\"/>\n</a>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\ngoogle_ad_format = \"300x250_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 600;\ngoogle_ad_format = \"300x600_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"ca-pub-2537027957187252\";\n/* Right Side Ad */\ngoogle_ad_slot = \"right_side_ad\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\n//-->\n</script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n\n\n\n<div class=\"footer-copyright\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-1\">\n<a class=\"logo\" href=\"index.htm\"> <img alt=\"Tutorials Point\" class=\"img-responsive\" src=\"/scripts/img/logo-footer.png\"/> </a>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<nav id=\"sub-menu\">\n<ul>\n<li><a href=\"/about/about_privacy.htm\">Privacy Policy</a></li>\n<li><a href=\"/about/about_cookies.htm\">Cookies Policy</a></li>\n<li><a href=\"/about/contact_us.htm\">Contact</a></li>\n</ul>\n</nav>\n</div>\n<div class=\"col-md-3 col-sm-12 col-xs-12\">\n<p>\u00a9 Copyright 2019. All Rights Reserved.</p>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<div class=\"news-group\">\n<input autocomplete=\"off\" class=\"form-control-foot search\" id=\"textemail\" name=\"textemail\" onblur=\"if (this.value == '') {this.value = 'Enter email for newsletter...';}\" onfocus=\"if (this.value == 'Enter email for newsletter...') {this.value = '';}\" placeholder=\"Enter email for newsletter\" type=\"text\"/>\n<span class=\"input-group-btn\"> <button class=\"btn btn-default btn-footer\" id=\"btnemail\" onclick=\"javascript:void(0);\" type=\"submit\">go</button> </span>\n<div id=\"newsresponse\"></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n\n<div id=\"privacy-banner\">\n<div>\n<p>\n      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.\n      <a href=\"javascript:void(0)\" id=\"banner-accept\">Accept</a>\n<a href=\"/about/about_cookies.htm\" id=\"banner-learn\" target=\"_blank\">Learn more</a>\n</p>\n</div>\n</div>\n<script>\n// Banner Trigger if Not Closed\nif (!localStorage.bannerClosed) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n} else {\n  document.getElementById('privacy-banner').style.display = \"none\";\n}\ndocument.getElementById('banner-accept').addEventListener('click', function() {\n  document.getElementById('privacy-banner').style.display = \"none\";\n  localStorage.bannerClosed = 'true';\n});\nif (navigator.userAgent.match(/Opera|OPR\\//)) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n}\n</script>\n<!-- Libs -->\n<script src=\"/theme/js/custom-min.js?v=7\"></script>\n<script src=\"https://www.google-analytics.com/urchin.js\">\n</script>\n<script>\n_uacct = \"UA-232293-6\";\nurchinTracker();\n$('.pg-icon').click(function(){\n   $('.wrapLoader').show();\n});\n</script>\n\n\n\n", "title": "Data Structures & Algorithms - Quick Guide  ", "content": "Data Structure is a systematic way to organize data in order to use it efficiently. Following terms are the foundation terms of a data structure.  As applications are getting complex and data rich, there are three common problems that applications face now-a-days.  To solve the above-mentioned problems, data structures come to rescue. Data can be organized in a data structure in such a way that all items may not be required to be searched, and the required data can be searched almost instantly.  There are three cases which are usually used to compare various data structure's execution time in a relative manner.  You really do not need to set up your own environment to start learning C programming language. Reason is very simple, we already have set up C Programming environment online, so that you can compile and execute all the available examples online at the same time when you are doing your theory work. This gives you confidence in what you are reading and to check the result with different options. Feel free to modify any example and execute it online.  Try the following example using the  Try it   option available at the top right corner of the sample code box \u2212  For most of the examples given in this tutorial, you will find Try it option, so just make use of it and enjoy your learning.  If you are still willing to set up your environment for C programming language, you need the following two tools available on your computer, (a) Text Editor and (b) The C Compiler.  This will be used to type your program. Examples of few editors include Windows Notepad, OS Edit command, Brief, Epsilon, EMACS, and vim or vi.  The name and the version of the text editor can vary on different operating systems. For example, Notepad will be used on Windows, and vim or vi can be used on Windows as well as Linux or UNIX.  The files you create with your editor are called source files and contain program source code. The source files for C programs are typically named with the extension \" .c  \".  Before starting your programming, make sure you have one text editor in place and you have enough experience to write a computer program, save it in a file, compile it, and finally execute it.  The source code written in the source file is the human readable source for your program. It needs to be \"compiled\", to turn into machine language so that your CPU can actually execute the program as per the given instructions.  This C programming language compiler will be used to compile your source code into a final executable program. We assume you have the basic knowledge about a programming language compiler.  Most frequently used and free available compiler is GNU C/C&plus&plus compiler. Otherwise, you can have compilers either from HP or Solaris if you have respective Operating Systems (OS).  The following section guides you on how to install GNU C/C&plus&plus compiler on various OS. We are mentioning C/C&plus&plus together because GNU GCC compiler works for both C and C&plus&plus programming languages.  If you are using  Linux or UNIX  , then check whether GCC is installed on your system by entering the following command from the command line \u2212  If you have GNU compiler installed on your machine, then it should print a message such as the following \u2212  If GCC is not installed, then you will have to install it yourself using the detailed instructions available at  https://gcc.gnu.org/install/   This tutorial has been written based on Linux and all the given examples have been compiled on Cent OS flavor of Linux system.  If you use Mac OS X, the easiest way to obtain GCC is to download the Xcode development environment from Apple's website and follow the simple installation instructions. Once you have Xcode setup, you will be able to use GNU compiler for C/C&plus&plus.  Xcode is currently available at  developer.apple.com/technologies/tools/   To install GCC on Windows, you need to install MinGW. To install MinGW, go to the MinGW homepage,  www.mingw.org  , and follow the link to the MinGW download page. Download the latest version of the MinGW installation program, which should be named MinGW-<version>.exe.  While installing MinWG, at a minimum, you must install gcc-core, gcc-g&plus&plus, binutils, and the MinGW runtime, but you may wish to install more.  Add the bin subdirectory of your MinGW installation to your  PATH   environment variable, so that you can specify these tools on the command line by their simple names.  When the installation is complete, you will be able to run gcc, g&plus&plus, ar, ranlib, dlltool, and several other GNU tools from the Windows command line.  Algorithm is a step-by-step procedure, which defines a set of instructions to be executed in a certain order to get the desired output. Algorithms are generally created independent of underlying languages, i.e. an algorithm can be implemented in more than one programming language.  From the data structure point of view, following are some important categories of algorithms \u2212  Not all procedures can be called an algorithm. An algorithm should have the following characteristics \u2212  There are no well-defined standards for writing algorithms. Rather, it is problem and resource dependent. Algorithms are never written to support a particular programming code.  As we know that all programming languages share basic code constructs like loops (do, for, while), flow-control (if-else), etc. These common constructs can be used to write an algorithm.  We write algorithms in a step-by-step manner, but it is not always the case. Algorithm writing is a process and is executed after the problem domain is well-defined. That is, we should know the problem domain, for which we are designing a solution.  Let's try to learn algorithm-writing by using an example.  Problem   \u2212 Design an algorithm to add two numbers and display the result.  Algorithms tell the programmers how to code the program. Alternatively, the algorithm can be written as \u2212  In design and analysis of algorithms, usually the second method is used to describe an algorithm. It makes it easy for the analyst to analyze the algorithm ignoring all unwanted definitions. He can observe what operations are being used and how the process is flowing.  Writing  step numbers  , is optional.  We design an algorithm to get a solution of a given problem. A problem can be solved in more than one ways.  ", "title_html": "<h1>Data Structures &amp; Algorithms - Quick Guide</h1> "}