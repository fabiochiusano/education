{"content": "\n React Native - Quick Guide \n  \n Advertisements \n \n<!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//-->\n\n\n \n  \n \n Previous Page\n \n \nNext Page \u00a0\n \n  \n  \n React Native - Overview \n For better understanding of React Native concepts, we will borrow a few lines from the official documentation \u2212 \n React Native lets you build mobile apps using only JavaScript. It uses the same design as React, letting you compose a rich mobile UI from declarative components. With React Native, you don't build a mobile web app, an HTML5 app, or a hybrid app; you build a real mobile app that's indistinguishable from an app built using Objective-C or Java. React Native uses the same fundamental UI building blocks as regular iOS and Android apps. You just put those building blocks together using JavaScript and React. \n React Native Features \n Following are the features of React Native \u2212 \n \nReact \u2212 This is a Framework for building web and mobile apps using JavaScript.\nNative \u2212 You can use native components controlled by JavaScript.\nPlatforms \u2212 React Native supports IOS and Android platform.\n \n React Native Advantages \n Follow are the advantages of React Native \u2212 \n \nJavaScript \u2212 You can use the existing JavaScript knowledge to build native mobile apps.\nCode sharing \u2212 You can share most of your code on different platforms.\nCommunity \u2212 The community around React and React Native is large, and you will be able to find any answer you need.\n \n React Native Limitations \n Following are the limitations of React Native \u2212 \n \nNative Components \u2212 If you want to create native functionality which is not created yet, you will need to write some platform specific code.\n \n React Native - Environment Setup \n There are a couple of things you need to install to set up the environment for React Native. We will use OSX as our building platform. \n \n\nSr.No.\nSoftware\nDescription\n\n\n1\nNodeJS and NPM\nYou can follow our NodeJS Environment Setup tutorial to install NodeJS.\n\n \n Step 1: Install create-react-native-app \n After installing NodeJS and NPM successfully in your system you can proceed with installation of create-react-native-app (globally as shown below). \n \nC:\\Users\\Tutorialspoint> npm install -g create-react-native-app\n \n Step 2: Create project \n Browse through required folder and create a new react native project as shown below. \n \nC:\\Users\\Tutorialspoint>cd Desktop\nC:\\Users\\Tutorialspoint\\Desktop>create-react-native-app MyReactNative\n \n After executing the above command, a folder with specifies name is created with the following contents. \n \nStep 3: NodeJS Python Jdk8\nMake sure you have Python NodeJS and jdk8 installed in your system if not, install them. In addition to these it is recommended to install latest version of yarn to avoid certain issues.\nStep 4: Install React Native CLI\nYou can install react native command line interface on npm, using the install -g react-native-cli command as shown below.\n\nnpm install -g react-native-cli\n\n\n\nStep 5: Start react native\nTo verify the installation browse through the project folder and try starting the project using the start command.\n\nC:\\Users\\Tutorialspoint\\Desktop>cd MyReactNative\nC:\\Users\\Tutorialspoint\\Desktop\\MyReactNative>npm start\n\nIf everything went well you will get a QR code as shown below.\n\nAs instructed, one way to run react native apps on your android devise is to using expo. Install expo client in your android devise and scan the above obtained QR code.\nStep 6: Eject the project\nIf you want to run android emulator using android studio, come out of the current command line by pressing ctrl+c.\nThen, execute run eject command as\n\nnpm run eject\n\nThis prompts you options to eject, select the first one using arrows and press enter.\n\nThen, you should suggest the name of the app on home screen and project name of the Android studio and Xcode projects.\n\nThough your project ejected successfully, you may get an error as \u2212\n\nIgnore this error and run react native for android using the following command \u2212\n\nreact-native run-android\n\nBut, before that you need to install android studio.\nStep 7: Installing Android Studio\nVisit the web page https://developer.android.com/studio/ and download android studio.\n\nAfter downloading the installation file of it, double click on it and proceed with the installation.\n\nStep 8: Configuring AVD Manager\nTo configure the AVD Manager click on the respective icon in the menu bar.\n\nStep 9: Configuring AVD Manager\nChoose a device definition, Nexus 5X is suggestable.\n\nClick on the Next button you will see a System Image window. Select the x86 Images tab.\n\nThen, select Marshmallow and click on next.\n\nFinally, click on the Finish button to finish the AVD configuration.\n\nAfter configuring your virtual device click on the play button under the Actions column to start your android emulator.\n\nStep 10: Running android\nOpen command prompt, browse through your project folder and, execute the react-native run-android command.\n\nThen, your app execution begins in another prompt you can see its status.\n\nIn your android emulator you can see the execution of the default app as \u2212\n\nStep 11: local.properties\nOpen the android folder in your project folder SampleReactNative/android (in this case). Create a file with named local.properties and add the following path in it.\n\nsdk.dir = /C:\\\\Users\\\\Tutorialspoint\\\\AppData\\\\Local\\\\Android\\\\Sdk\n\nhere, replace Tutorialspoint with your user name.\nStep 12: Hot Reloading\nAnd to build application modify the App.js and the changes will be automatically updated on the android emulator.\nIf not, click on the android emulator press ctrl+m then, select Enable Hot Reloading option.\n\nReact Native - App\nIf you open the default app you can observe that the app.js file looks like\n\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default class App extends React.Component {\n   render() {\n      return (\n         <View style = {styles.container}>\n            <Text>Open up App.js to start working on your app!</Text>\n            <Text>Changes you make will automatically reload.</Text>\n            <Text>Shake your phone to open the developer menu.</Text>\n         </View>\n      );\n   }\n}\n\nconst styles = StyleSheet.create({\n   container: {\n      flex: 1,\n      backgroundColor: '#fff',\n      alignItems: 'center',\n      justifyContent: 'center',\n   },\n});\n\nOutput\n\nHello world\nTo display a simple message saying \u201cWelcome to Tutorialspoint\u201d remove the CSS part and insert the message to be printed wrapped by the <text></text> tags inside <view></view> as shown below.\n\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default class App extends React.Component {\n   render() {\n      return (\n         <View>\n            <Text>Welcome to Tutorialspoint</Text>\n         </View>\n      );\n   }\n}\n\n\nReact Native - State\nThe data inside React Components is managed by state and props. In this chapter, we will talk about state.\nDifference between State and Props\nThe state is mutable while props are immutable. This means that state can be updated in the future while props cannot be updated.\nUsing State\nThis is our root component. We are just importing Home which will be used in most of the chapters.\nApp.js\n\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default class App extends React.Component {\n   state = {\n      myState: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, used do eiusmod\n      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis\n      nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n      Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu\n      fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n      culpa qui officia deserunt mollit anim id est laborum.'\n   }\n   render() {\n      return (\n      <View>\n         <Text> {this.state.myState} </Text>\n      </View>\n      );\n   }\n}\n\nWe can see in emulator text from the state as in the following screenshot.\n\nUpdating State\nSince state is mutable, we can update it by creating the deleteState function and call it using the onPress = {this.deleteText} event.\nHome.js\n\nimport React, { Component } from 'react'\nimport { Text, View } from 'react-native'\n\nclass Home extends Component {\n   state = {\n      myState: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed \n         do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n         Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi\n         ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit \n         in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n         Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia\n         deserunt mollit anim id est laborum.'\n   }\n   updateState = () \u21d2 this.setState({ myState: 'The state is updated' })\n   render() {\n      return (\n         <View>\n            <Text onPress = {this.updateState}>\n               {this.state.myState}\n            </Text>\n         </View>\n      );\n   }\n}\nexport default Home;\n\nNOTES \u2212 In all chapters, we will use the class syntax for stateful (container) components and function syntax for stateless (presentational) components. We will learn more about components in the next chapter.\nWe will also learn how to use the arrow function syntax for updateState. You should keep in mind that this syntax uses the lexical scope, and this keyword will be bound to the environment object (Class). This will sometimes lead to unexpected behavior.\nThe other way to define methods is to use the EC5 functions but in that case we will need to bind this manually in the constructor. Consider the following example to understand this.\n\nclass Home extends Component {\n   constructor() {\n      super()\n      this.updateState = this.updateState.bind(this)\n   }\n   updateState() {\n      //\n   }\n   render() {\n      //\n   }\n}\n\nReact Native - Props\nIn our last chapter, we showed you how to use mutable state. In this chapter, we will show you how to combine the state and the props.\nPresentational components should get all data by passing props. Only container components should have state.\nContainer Component\nWe will now understand what a container component is and also how it works.\nTheory\nNow we will update our container component. This component will handle the state and pass the props to the presentational component.\nContainer component is only used for handling state. All functionality related to view(styling etc.) will be handled in the presentational component.\nExample\nIf we want to use example from the last chapter we need to remove the Text element from the render function since this element is used for presenting text to the users. This should be inside the presentational component.\nLet us review the code in the example given below. We will import the PresentationalComponent and pass it to the render function.\nAfter we import the PresentationalComponent and pass it to the render function, we need to pass the props. We will pass the props by adding myText = {this.state.myText} and deleteText = {this.deleteText} to <PresentationalComponent>. Now, we will be able to access this inside the presentational component.\nApp.js\n\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport PresentationalComponent from './PresentationalComponent'\n\nexport default class App extends React.Component {\n   state = {\n      myState: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, used do eiusmod\n      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis\n      nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis\n      aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat\n      nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui\n      officia deserunt mollit anim id est laborum.'\n   }\n   updateState = () => {\n      this.setState({ myState: 'The state is updated' })\n   }\n   render() {\n      return (\n         <View>\n            <PresentationalComponent myState = {this.state.myState} updateState = {this.updateState}/>\n         </View>\n      );\n   }\n}\n\nPresentational Component\nWe will now understand what a presentational component is and also how it works.\nTheory\nPresentational components should be used only for presenting view to the users. These components do not have state. They receive all data and functions as props.\nThe best practice is to use as much presentational components as possible.\nExample\nAs we mentioned in our previous chapter, we are using the EC6 function syntax for presentational components.\nOur component will receive props, return view elements, present text using {props.myText} and call the {props.deleteText} function when a user clicks on the text.\nPresentationalComponent.js\n\nimport React, { Component } from 'react'\nimport { Text, View } from 'react-native'\n\nconst PresentationalComponent = (props) => {\n   return (\n      <View>\n         <Text onPress = {props.updateState}>\n            {props.myState}\n         </Text>\n      </View>\n   )\n}\nexport default PresentationalComponent\n\nNow, we have the same functionality as in our State chapter. The only difference is that we refactored our code to the container and the presentational component.\nYou can run the app and see the text as in the following screenshot.\n\nIf you click on text, it will be removed from the screen.\n\nReact Native - Styling\nThere are a couple of ways to style your elements in React Native.\nYou can use the style property to add the styles inline. However, this is not the best practice because it can be hard to read the code.\nIn this chapter, we will use the Stylesheet for styling.\nContainer Component\nIn this section, we will simplify our container component from our previous chapter.\nApp.js\n\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport PresentationalComponent from './PresentationalComponent'\n\nexport default class App extends React.Component {\n   state = {\n      myState: 'This is my state'\n   }\n   render() {\n      return (\n         <View>\n            <PresentationalComponent myState = {this.state.myState}/>\n         </View>\n      );\n   }\n}\n\nPresentational Component\nIn the following example, we will import the StyleSheet. At the bottom of the file, we will create our stylesheet and assign it to the styles constant. Note that our styles are in camelCase and we do not use px or % for styling.\nTo apply styles to our text, we need to add style = {styles.myText} property to the Text element.\nPresentationalComponent.js\n\nimport React, { Component } from 'react'\nimport { Text, View, StyleSheet } from 'react-native'\n\nconst PresentationalComponent = (props) => {\n   return (\n      <View>\n         <Text style = {styles.myState}>\n            {props.myState}\n         </Text>\n      </View>\n   )\n}\nexport default PresentationalComponent\n\nconst styles = StyleSheet.create ({\n   myState: {\n      marginTop: 20,\n      textAlign: 'center',\n      color: 'blue',\n      fontWeight: 'bold',\n      fontSize: 20\n   }\n})\n\nWhen we run the app, we will receive the following output.\n\nReact Native - Flexbox\nTo accommodate different screen sizes, React Native offers Flexbox support.\nWe will use the same code that we used in our React Native - Styling chapter. We will only change the PresentationalComponent.\nLayout\nTo achieve the desired layout, flexbox offers three main properties \u2212 flexDirection justifyContent and alignItems.\nThe following table shows the possible options.\n\n\nProperty\nValues\nDescription\n\n\nflexDirection\n'column', 'row'\nUsed to specify if elements will be aligned vertically or horizontally.\n\n\njustifyContent\n'center', 'flex-start', 'flex-end', 'space-around', 'space-between'\nUsed to determine how should elements be distributed inside the container.\n\n\nalignItems\n'center', 'flex-start', 'flex-end', 'stretched'\nUsed to determine how should elements be distributed inside the container along the secondary axis (opposite of flexDirection)\n\n\nIf you want to align the items vertically and centralize them, then you can use the following code.\nApp.js\n\nimport React, { Component } from 'react'\nimport { View, StyleSheet } from 'react-native'\n\nconst Home = (props) => {\n   return (\n      <View style = {styles.container}>\n         <View style = {styles.redbox} />\n         <View style = {styles.bluebox} />\n         <View style = {styles.blackbox} />\n      </View>\n   )\n}\n\nexport default Home\n\nconst styles = StyleSheet.create ({\n   container: {\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n      backgroundColor: 'grey',\n      height: 600\n   },\n   redbox: {\n      width: 100,\n      height: 100,\n      backgroundColor: 'red'\n   },\n   bluebox: {\n      width: 100,\n      height: 100,\n      backgroundColor: 'blue'\n   },\n   blackbox: {\n      width: 100,\n      height: 100,\n      backgroundColor: 'black'\n   },\n})\n\nOutput\n\nIf the items need to be moved to the right side and spaces need to be added between them, then we can use the following code.\nApp.js\n\nimport React, { Component } from 'react'\nimport { View, StyleSheet } from 'react-native'\n\nconst App = (props) => {\n   return (\n      <View style = {styles.container}>\n         <View style = {styles.redbox} />\n         <View style = {styles.bluebox} />\n         <View style = {styles.blackbox} />\n      </View>\n   )\n}\n\nexport default App\n\nconst styles = StyleSheet.create ({\n   container: {\n      flexDirection: 'column',\n      justifyContent: 'space-between',\n      alignItems: 'flex-end',\n      backgroundColor: 'grey',\n      height: 600\n   },\n   redbox: {\n      width: 100,\n      height: 100,\n      backgroundColor: 'red'\n   },\n   bluebox: {\n      width: 100,\n      height: 100,\n      backgroundColor: 'blue'\n   },\n   blackbox: {\n      width: 100,\n      height: 100,\n      backgroundColor: 'black'\n   },\n})\n\n\n\n\nReact Native - ListView\nIn this chapter, we will show you how to create a list in React Native. We will import List in our Home component and show it on screen.\nApp.js\n\nimport React from 'react'\nimport List from './List.js'\n\nconst App = () => {\n   return (\n      <List />\n   )\n}\nexport default App\n\nTo create a list, we will use the map() method. This will iterate over an array of items, and render each one.\nList.js\n\nimport React, { Component } from 'react'\nimport { Text, View, TouchableOpacity, StyleSheet } from 'react-native'\n   \nclass List extends Component {\n   state = {\n      names: [\n         {\n            id: 0,\n            name: 'Ben',\n         },\n         {\n            id: 1,\n            name: 'Susan',\n         },\n         {\n            id: 2,\n            name: 'Robert',\n         },\n         {\n            id: 3,\n            name: 'Mary',\n         }\n      ]\n   }\n   alertItemName = (item) => {\n      alert(item.name)\n   }\n   render() {\n      return (\n         <View>\n            {\n               this.state.names.map((item, index) => (\n                  <TouchableOpacity\n                     key = {item.id}\n                     style = {styles.container}\n                     onPress = {() => this.alertItemName(item)}>\n                     <Text style = {styles.text}>\n                        {item.name}\n                     </Text>\n                  </TouchableOpacity>\n               ))\n            }\n         </View>\n      )\n   }\n}\nexport default List\n\nconst styles = StyleSheet.create ({\n   container: {\n      padding: 10,\n      marginTop: 3,\n      backgroundColor: '#d9f9b1',\n      alignItems: 'center',\n   },\n   text: {\n      color: '#4f603c'\n   }\n})\n\nWhen we run the app, we will see the list of names.\n\n\n\n\n\nYou can click on each item in the list to trigger an alert with the name.\n\nReact Native - Text Input\nIn this chapter, we will show you how to work with TextInput elements in React Native.\nThe Home component will import and render inputs.\nApp.js\n\nimport React from 'react';\nimport Inputs from './inputs.js'\n\nconst App = () => {\n   return (\n      <Inputs />\n   )\n}\nexport default App\n\nInputs\nWe will define the initial state.\nAfter defining the initial state, we will create the handleEmail and the handlePassword functions. These functions are used for updating state.\nThe login() function will just alert the current value of the state.\nWe will also add some other properties to text inputs to disable auto capitalisation, remove the bottom border on Android devices and set a placeholder.\ninputs.js\n\nimport React, { Component } from 'react'\nimport { View, Text, TouchableOpacity, TextInput, StyleSheet } from 'react-native'\n\nclass Inputs extends Component {\n   state = {\n      email: '',\n      password: ''\n   }\n   handleEmail = (text) => {\n      this.setState({ email: text })\n   }\n   handlePassword = (text) => {\n      this.setState({ password: text })\n   }\n   login = (email, pass) => {\n      alert('email: ' + email + ' password: ' + pass)\n   }\n   render() {\n      return (\n         <View style = {styles.container}>\n            <TextInput style = {styles.input}\n               underlineColorAndroid = \"transparent\"\n               placeholder = \"Email\"\n               placeholderTextColor = \"#9a73ef\"\n               autoCapitalize = \"none\"\n               onChangeText = {this.handleEmail}/>\n            \n            <TextInput style = {styles.input}\n               underlineColorAndroid = \"transparent\"\n               placeholder = \"Password\"\n               placeholderTextColor = \"#9a73ef\"\n               autoCapitalize = \"none\"\n               onChangeText = {this.handlePassword}/>\n            \n            <TouchableOpacity\n               style = {styles.submitButton}\n               onPress = {\n                  () => this.login(this.state.email, this.state.password)\n               }>\n               <Text style = {styles.submitButtonText}> Submit </Text>\n            </TouchableOpacity>\n         </View>\n      )\n   }\n}\nexport default Inputs\n\nconst styles = StyleSheet.create({\n   container: {\n      paddingTop: 23\n   },\n   input: {\n      margin: 15,\n      height: 40,\n      borderColor: '#7a42f4',\n      borderWidth: 1\n   },\n   submitButton: {\n      backgroundColor: '#7a42f4',\n      padding: 10,\n      margin: 15,\n      height: 40,\n   },\n   submitButtonText:{\n      color: 'white'\n   }\n})\n\nWhenever we type in one of the input fields, the state will be updated. When we click on the Submit button, text from inputs will be shown inside the dialog box.\n\n\nWhenever we type in one of the input fields, the state will be updated. When we click on the Submit button, text from inputs will be shown inside the dialog box.\n\nReact Native - ScrollView\nIn this chapter, we will show you how to work with the ScrollView element.\nWe will again create ScrollViewExample.js and import it in Home.\nApp.js\n\nimport React from 'react';\nimport ScrollViewExample from './scroll_view.js';\n\nconst App = () => {\n   return (\n      <ScrollViewExample />\n   )\n}\n\nScrollview will render a list of names. We will create it in state.\nScrollView.js\n\nimport React, { Component } from 'react';\nimport { Text, Image, View, StyleSheet, ScrollView } from 'react-native';\n\nclass ScrollViewExample extends Component {\n   state = {\n      names: [\n         {'name': 'Ben', 'id': 1},\n         {'name': 'Susan', 'id': 2},\n         {'name': 'Robert', 'id': 3},\n         {'name': 'Mary', 'id': 4},\n         {'name': 'Daniel', 'id': 5},\n         {'name': 'Laura', 'id': 6},\n         {'name': 'John', 'id': 7},\n         {'name': 'Debra', 'id': 8},\n         {'name': 'Aron', 'id': 9},\n         {'name': 'Ann', 'id': 10},\n         {'name': 'Steve', 'id': 11},\n         {'name': 'Olivia', 'id': 12}\n      ]\n   }\n   render() {\n      return (\n         <View>\n            <ScrollView>\n               {\n                  this.state.names.map((item, index) => (\n                     <View key = {item.id} style = {styles.item}>\n                        <Text>{item.name}</Text>\n                     </View>\n                  ))\n               }\n            </ScrollView>\n         </View>\n      )\n   }\n}\nexport default ScrollViewExample\n\nconst styles = StyleSheet.create ({\n   item: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      padding: 30,\n      margin: 2,\n      borderColor: '#2a4944',\n      borderWidth: 1,\n      backgroundColor: '#d2f7f1'\n   }\n})\n\nWhen we run the app, we will see the scrollable list of names.\n\nReact Native - Images\nIn this chapter, we will understand how to work with images in React Native.\nAdding Image\nLet us create a new folder img inside the src folder. We will add our image (myImage.png) inside this folder.\nWe will show images on the home screen.\nApp.js\n\nimport React from 'react';\nimport ImagesExample from './ImagesExample.js'\n\nconst App = () => {\n   return (\n      <ImagesExample />\n   )\n}\nexport default App\n\nLocal image can be accessed using the following syntax.\n\nimage_example.js\n\nimport React, { Component } from 'react'\nimport { Image } from 'react-native'\n\nconst ImagesExample = () => (\n   <Image source = {require('C:/Users/Tutorialspoint/Desktop/NativeReactSample/logo.png')} />\n)\nexport default ImagesExample\n\nOutput\n\nScreen Density\nReact Native offers a way to optimize images for different devices using @2x, @3x suffix. The app will load only the image necessary for particular screen density.\nThe following will be the names of the image inside the img folder.\n\nmy-image@2x.jpg\nmy-image@3x.jpg\n\nNetwork Images\nWhen using network images, instead of require, we need the source property. It is recommended to define the width and the height for network images.\nApp.js\n\nimport React from 'react';\nimport ImagesExample from './image_example.js'\n\nconst App = () => {\n   return (\n      <ImagesExample />\n   )\n}\nexport default App\n\n\nimage_example.js\n\nimport React, { Component } from 'react'\nimport { View, Image } from 'react-native'\n\nconst ImagesExample = () => (\n   <Image source = {{uri:'https://pbs.twimg.com/profile_images/486929358120964097/gNLINY67_400x400.png'}}\n   style = {{ width: 200, height: 200 }}\n   />\n)\nexport default ImagesExample\n\nOutput\n\nReact Native - HTTP\nIn this chapter, we will show you how to use fetch for handling network requests.\nApp.js\n\nimport React from 'react';\nimport HttpExample from './http_example.js'\n\nconst App = () => {\n   return (\n      <HttpExample />\n   )\n}\nexport default App\n\nUsing Fetch\nWe will use the componentDidMount lifecycle method to load the data from server as soon as the component is mounted. This function will send GET request to the server, return JSON data, log output to console and update our state.\n\nhttp_example.js\n\nimport React, { Component } from 'react'\nimport { View, Text } from 'react-native'\n\nclass HttpExample extends Component {\n   state = {\n      data: ''\n   }\n   componentDidMount = () => {\n      fetch('https://jsonplaceholder.typicode.com/posts/1', {\n         method: 'GET'\n      })\n      .then((response) => response.json())\n      .then((responseJson) => {\n         console.log(responseJson);\n         this.setState({\n            data: responseJson\n         })\n      })\n      .catch((error) => {\n         console.error(error);\n      });\n   }\n   render() {\n      return (\n         <View>\n            <Text>\n               {this.state.data.body}\n            </Text>\n         </View>\n      )\n   }\n}\nexport default HttpExample\n\nOutput\n\nReact Native - Buttons\nIn this chapter, we will show you touchable components in react Native. We call them 'touchable' because they offer built in animations and we can use the onPress prop for handling touch event.\nFacebook offers the Button component, which can be used as a generic button. Consider the following example to understand the same.\nApp.js\n\nimport React, { Component } from 'react'\nimport { Button } from 'react-native'\n\nconst App = () => {\n   const handlePress = () => false\n   return (\n      <Button\n         onPress = {handlePress}\n         title = \"Red button!\"\n         color = \"red\"\n      />\n   )\n}\nexport default App\n\nIf the default Button component does not suit your needs, you can use one of the following components instead.\n\nTouchable Opacity\nThis element will change the opacity of an element when touched.\nApp.js\n\nimport React from 'react'\nimport { TouchableOpacity, StyleSheet, View, Text } from 'react-native'\n\nconst App = () => {\n   return (\n      <View style = {styles.container}>\n         <TouchableOpacity>\n            <Text style = {styles.text}>\n               Button\n            </Text>\n         </TouchableOpacity>\n      </View>\n   )\n}\nexport default App\n\nconst styles = StyleSheet.create ({\n   container: {\n      alignItems: 'center',\n   },\n   text: {\n      borderWidth: 1,\n      padding: 25,\n      borderColor: 'black',\n      backgroundColor: 'red'\n   }\n})\n\n\n\nTouchable Highlight\nWhen a user presses the element, it will get darker and the underlying color will show through.\nApp.js\n\nimport React from 'react'\nimport { View, TouchableHighlight, Text, StyleSheet } from 'react-native'\n\nconst App = (props) => {\n   return (\n      <View style = {styles.container}>\n         <TouchableHighlight>\n            <Text style = {styles.text}>\n               Button\n            </Text>\n         </TouchableHighlight>\n      </View>\n   )\n}\nexport default App\n\nconst styles = StyleSheet.create ({\n   container: {\n      alignItems: 'center',\n   },\n   text: {\n      borderWidth: 1,\n      padding: 25,\n      borderColor: 'black',\n      backgroundColor: 'red'\n   }\n})\n\nTouchable Native Feedback\nThis will simulate ink animation when the element is pressed.\nApp.js\n\nimport React from 'react'\nimport { View, TouchableNativeFeedback, Text, StyleSheet } from 'react-native'\n\nconst Home = (props) => {\n   return (\n      <View style = {styles.container}>\n         <TouchableNativeFeedback>\n            <Text style = {styles.text}>\n               Button\n            </Text>\n         </TouchableNativeFeedback>\n      </View>\n   )\n}\nexport default Home\n\nconst styles = StyleSheet.create ({\n   container: {\n      alignItems: 'center',\n   },\n   text: {\n      borderWidth: 1,\n      padding: 25,\n      borderColor: 'black',\n      backgroundColor: 'red'\n   }\n})\n\nTouchable Without Feedback\nThis should be used when you want to handle the touch event without any animation Usually, this component is not used much.\n\n<TouchableWithoutFeedback>\n   <Text>\n      Button\n   </Text>\n</TouchableWithoutFeedback>\n\nReact Native - Animations\nIn this chapter, we will show you how to use LayoutAnimation in React Native.\nAnimations Component\nWe will set myStyle as a property of the state. This property is used for styling an element inside PresentationalAnimationComponent.\nWe will also create two functions \u2212 expandElement and collapseElement. These functions will update values from the state. The first one will use the spring preset animation while the second one will have the linear preset. We will pass these as props too. The Expand and the Collapse buttons call the expandElement() and collapseElement() functions.\nIn this example, we will dynamically change the width and the height of the box. Since the Home component will be the same, we will only change the Animations component.\n\nIn this example, we will dynamically change the width and the height of the box. Since the Home component will be the same, we will only change the Animations component.\nApp.js\n\nimport React, { Component } from 'react'\nimport { View, StyleSheet, Animated, TouchableOpacity } from 'react-native'\n\nclass Animations extends Component {\n   componentWillMount = () => {\n      this.animatedWidth = new Animated.Value(50)\n      this.animatedHeight = new Animated.Value(100)\n   }\n   animatedBox = () => {\n      Animated.timing(this.animatedWidth, {\n         toValue: 200,\n         duration: 1000\n      }).start()\n      Animated.timing(this.animatedHeight, {\n         toValue: 500,\n         duration: 500\n      }).start()\n   }\n   render() {\n      const animatedStyle = { width: this.animatedWidth, height: this.animatedHeight }\n      return (\n         <TouchableOpacity style = {styles.container} onPress = {this.animatedBox}>\n            <Animated.View style = {[styles.box, animatedStyle]}/>\n         </TouchableOpacity>\n      )\n   }\n}\nexport default Animations\n\nconst styles = StyleSheet.create({\n   container: {\n      justifyContent: 'center',\n      alignItems: 'center'\n   },\n   box: {\n      backgroundColor: 'blue',\n      width: 50,\n      height: 100\n   }\n})\n\n\nReact Native - Debugging\nReact native offers a couple of methods that help in debugging your code.\nIn App Developer Menu\nYou can open the developer menu on the IOS simulator by pressing command + D.\nOn Android emulator, you need to press command + M.\n\n\nReload \u2212 Used for reloading simulator. You can use shortcut command + R\nDebug JS Remotely \u2212 Used for activating debugging inside browser developer console.\nEnable Live Reload \u2212 Used for enabling live reloading whenever your code is saved. The debugger will open at localhost:8081/debugger-ui.\nStart Systrace \u2212 Used for starting Android marker based profiling tool.\nShow Inspector \u2212 Used for opening inspector where you can find info about your components. You can use shortcut command + I\nShow Perf Monitor \u2212 Perf monitor is used for keeping track of the performance of your app.\n\nReact Native - Router\nIn this chapter, we will understand navigation in React Native.\nStep 1: Install Router\nTo begin with, we need to install the Router. We will use the React Native Router Flux in this chapter. You can run the following command in terminal, from the project folder.\n\nnpm i react-native-router-flux --save\n\nStep 2: Entire Application\nSince we want our router to handle the entire application, we will add it in index.ios.js. For Android, you can do the same in index.android.js.\nApp.js\n\nimport React, { Component } from 'react';\nimport { AppRegistry, View } from 'react-native';\nimport Routes from './Routes.js'\n\nclass reactTutorialApp extends Component {\n   render() {\n      return (\n         <Routes />\n      )\n   }\n}\nexport default reactTutorialApp\nAppRegistry.registerComponent('reactTutorialApp', () => reactTutorialApp)\n\nStep 3: Add Router\nNow we will create the Routes component inside the components folder. It will return Router with several scenes. Each scene will need key, component and title. Router uses the key property to switch between scenes, component will be rendered on screen and the title will be shown in the navigation bar. We can also set the initial property to the scene that is to be rendered initially.\nRoutes.js\n\nimport React from 'react'\nimport { Router, Scene } from 'react-native-router-flux'\nimport Home from './Home.js'\nimport About from './About.js'\n\nconst Routes = () => (\n   <Router>\n      <Scene key = \"root\">\n         <Scene key = \"home\" component = {Home} title = \"Home\" initial = {true} />\n         <Scene key = \"about\" component = {About} title = \"About\" />\n      </Scene>\n   </Router>\n)\nexport default Routes\n\nStep 4: Create Components\nWe already have the Home component from previous chapters; now, we need to add the About component. We will add the goToAbout and the goToHome functions to switch between scenes.\nHome.js\n\nimport React from 'react'\nimport { TouchableOpacity, Text } from 'react-native';\nimport { Actions } from 'react-native-router-flux';\n\nconst Home = () => {\n   const goToAbout = () => {\n      Actions.about()\n   }\n   return (\n      <TouchableOpacity style = {{ margin: 128 }} onPress = {goToAbout}>\n         <Text>This is HOME!</Text>\n      </TouchableOpacity>\n   )\n}\nexport default Home\n\nAbout.js\n\nimport React from 'react'\nimport { TouchableOpacity, Text } from 'react-native'\nimport { Actions } from 'react-native-router-flux'\n\nconst About = () => {\n   const goToHome = () => {\n      Actions.home()\n   }\n   return (\n      <TouchableOpacity style = {{ margin: 128 }} onPress = {goToHome}>\n         <Text>This is ABOUT</Text>\n      </TouchableOpacity>\n   )\n}\nexport default About\n\nThe app will render the initial Home screen.\n\n\nYou can press the button to switch to the about screen. The Back arrow will appear; you can use it to get back to the previous screen.\n\nReact Native - Running IOS\nIf you want to test your app in the IOS simulator, all you need is to open the root folder of your app in terminal and run \u2212\n\nreact-native run-ios\n\nThe above command will start the simulator and run the app.\nWe can also specify the device we want to use.\n\nreact-native run-ios --simulator \"iPhone 5s\n\nAfter you open the app in simulator, you can press command + D on IOS to open the developers menu. You can check more about this in our debugging chapter.\nYou can also reload the IOS simulator by pressing command &plus R.\nReact Native - Running Android\nWe can run the React Native app on Android platform by running the following code in the terminal.\n\nreact-native run-android\n\nBefore you can run your app on Android device, you need to enable USB Debugging inside the Developer Options.\nWhen USB Debugging is enabled, you can plug in your device and run the code snippet given above.\nThe Native Android emulator is slow. We recommend downloading Genymotion for testing your app.\nThe developer menu can be accessed by pressing command &plus M.\nReact Native - View\nView is the most common element in React Native. You can consider it as an equivalent of the div element used in web development.\nUse Cases\nLet us now see a few common use cases.\n\nWhen you need to wrap your elements inside the container, you can use View as a container element.\nWhen you want to nest more elements inside the parent element, both parent and child can be View. It can have as many children as you want.\nWhen you want to style different elements, you can place them inside View since it supports style property, flexbox etc.\nView also supports synthetic touch events, which can be useful for different purposes.\n\nWe already used View in our previous chapters and we will use it in almost all subsequent chapters as well. The View can be assumed as a default element in React Native. In example given below, we will nest two Views and a text.\nApp.js\n\nimport React, { Component } from 'react'\nimport { View, Text } from 'react-native'\n\nconst App = () => {\n   return (\n      <View>\n         <View>\n            <Text>This is my text</Text>\n         </View>\n      </View>\n   )\n}\nexport default App\n\nOutput\n\nReact Native - WebView\nIn this chapter, we will learn how to use WebView. It is used when you want to render web page to your mobile app inline.\nUsing WebView\nThe HomeContainer will be a container component.\nApp.js\n\nimport React, { Component } from 'react'\nimport WebViewExample from './web_view_example.js'\n\nconst App = () => {\n   return (\n      <WebViewExample/>\n   )\n}\nexport default App;\n\nLet us create a new file called WebViewExample.js inside the src/components/home folder.\nweb_view_example.js\n\nimport React, { Component } from 'react'\nimport { View, WebView, StyleSheet }\n\nfrom 'react-native'\nconst WebViewExample = () => {\n   return (\n      <View style = {styles.container}>\n         <WebView\n         source = {{ uri:\n         'https://www.google.com/?gws_rd=cr,ssl&ei=SICcV9_EFqqk6ASA3ZaABA#q=tutorialspoint' }}\n         />\n      </View>\n   )\n}\nexport default WebViewExample;\n\nconst styles = StyleSheet.create({\n   container: {\n      height: 350,\n   }\n})\n\nThe above program will generate the following output.\n\n\nReact Native - Modal\nIn this chapter, we will show you how to use the modal component in React Native.\nLet us now create a new file: ModalExample.js\nWe will put logic inside ModalExample. We can update the initial state by running the toggleModal.\nAfter updating the initial state by running the toggleModal, we will set the visible property to our modal. This prop will be updated when the state changes.\nThe onRequestClose is required for Android devices.\nApp.js\n\nimport React, { Component } from 'react'\nimport WebViewExample from './modal_example.js'\n\nconst Home = () => {\n   return (\n      <WebViewExample/>\n   )\n}\nexport default Home;\n\nmodal_example.js\n\nimport React, { Component } from 'react';\nimport { Modal, Text, TouchableHighlight, View, StyleSheet}\n\nfrom 'react-native'\nclass ModalExample extends Component {\n   state = {\n      modalVisible: false,\n   }\n   toggleModal(visible) {\n      this.setState({ modalVisible: visible });\n   }\n   render() {\n      return (\n         <View style = {styles.container}>\n            <Modal animationType = {\"slide\"} transparent = {false}\n               visible = {this.state.modalVisible}\n               onRequestClose = {() => { console.log(\"Modal has been closed.\") } }>\n               \n               <View style = {styles.modal}>\n                  <Text style = {styles.text}>Modal is open!</Text>\n                  \n                  <TouchableHighlight onPress = {() => {\n                     this.toggleModal(!this.state.modalVisible)}}>\n                     \n                     <Text style = {styles.text}>Close Modal</Text>\n                  </TouchableHighlight>\n               </View>\n            </Modal>\n            \n            <TouchableHighlight onPress = {() => {this.toggleModal(true)}}>\n               <Text style = {styles.text}>Open Modal</Text>\n            </TouchableHighlight>\n         </View>\n      )\n   }\n}\nexport default ModalExample\n\nconst styles = StyleSheet.create ({\n   container: {\n      alignItems: 'center',\n      backgroundColor: '#ede3f2',\n      padding: 100\n   },\n   modal: {\n      flex: 1,\n      alignItems: 'center',\n      backgroundColor: '#f7021a',\n      padding: 100\n   },\n   text: {\n      color: '#3f2949',\n      marginTop: 10\n   }\n})\n\nOur starting screen will look like this \u2212\n\n\n\nIf we click the button, the modal will open.\n\nReact Native - ActivityIndicator\nIn this chapter we will show you how to use the activity indicator in React Native.\nStep 1: App\nApp component will be used to import and show our ActivityIndicator.\nApp.js\n\nimport React from 'react'\nimport ActivityIndicatorExample from './activity_indicator_example.js'\n\nconst Home = () => {\n   return (\n      <ActivityIndicatorExample />\n   )\n}\nexport default Home\n\nStep 2: ActivityIndicatorExample\nAnimating property is a Boolean which is used for showing the activity indicator. The latter closes six seconds after the component is mounted. This is done using the closeActivityIndicator() function.\nactivity_indicator_example.js\n\nimport React, { Component } from 'react';\nimport { ActivityIndicator, View, Text, TouchableOpacity, StyleSheet } from 'react-native';\n\nclass ActivityIndicatorExample extends Component {\n   state = { animating: true }\n   \n   closeActivityIndicator = () => setTimeout(() => this.setState({\n   animating: false }), 60000)\n   \n   componentDidMount = () => this.closeActivityIndicator()\n   render() {\n      const animating = this.state.animating\n      return (\n         <View style = {styles.container}>\n            <ActivityIndicator\n               animating = {animating}\n               color = '#bc2b78'\n               size = \"large\"\n               style = {styles.activityIndicator}/>\n         </View>\n      )\n   }\n}\nexport default ActivityIndicatorExample\n\nconst styles = StyleSheet.create ({\n   container: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      marginTop: 70\n   },\n   activityIndicator: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      height: 80\n   }\n})\n\nWhen we run the app, we will see the loader on screen. It will disappear after six seconds.\n\n\nReact Native - Picker\nIn this chapter, we will create simple Picker with two available options.\nStep 1: Create File\nHere, the App.js folder will be used as a presentational component.\nApp.js\n\nimport React from 'react'\nimport PickerExample from './PickerExample.js'\n\nconst App = () => {\n   return (\n      <PickerExample />\n   )\n}\nexport default App\n\nStep 2: Logic\nthis.state.user is used for picker control.\nThe updateUser function will be triggered when a user is picked.\nPickerExample.js\n\n\nimport React, { Component } from 'react';\nimport { View, Text, Picker, StyleSheet } from 'react-native'\n\nclass PickerExample extends Component {\n   state = {user: ''}\n   updateUser = (user) => {\n      this.setState({ user: user })\n   }\n   render() {\n      return (\n         <View>\n            <Picker selectedValue = {this.state.user} onValueChange = {this.updateUser}>\n               <Picker.Item label = \"Steve\" value = \"steve\" />\n               <Picker.Item label = \"Ellen\" value = \"ellen\" />\n               <Picker.Item label = \"Maria\" value = \"maria\" />\n            </Picker>\n            <Text style = {styles.text}>{this.state.user}</Text>\n         </View>\n      )\n   }\n}\nexport default PickerExample\n\nconst styles = StyleSheet.create({\n   text: {\n      fontSize: 30,\n      alignSelf: 'center',\n      color: 'red'\n   }\n})\n\nOutput\n\nIf you click on the name it prompts you all three options as \u2212\n\nAnd you can pick one of them and the output will be like.\n\nReact Native - Status Bar\nIn this chapter, we will show you how to control the status bar appearance in React Native.\nThe Status bar is easy to use and all you need to do is set properties to change it.\nThe hidden property can be used to hide the status bar. In our example it is set to false. This is default value.\nThe barStyle can have three values \u2013 dark-content, light-content and default.\nThis component has several other properties that can be used. Some of them are Android or IOS specific. You can check it in official documentation.\nApp.js\n\nimport React, { Component } from 'react';\nimport { StatusBar } from 'react-native'\n\nconst App = () => {\n   return (\n      <StatusBar barStyle = \"dark-content\" hidden = {false} backgroundColor = \"#00BCD4\" translucent = {true}/>\n   )\n}\nexport default App\n\nIf we run the app, the status bar will be visible and content will have dark color.\n\nOutput\n\nReact Native - Switch\nIn this chapter, we will explain the Switch component in a couple of steps.\nStep 1: Create File\nWe will use the HomeContainer component for logic, but we need to create the presentational component.\nLet us now create a new file: SwitchExample.js.\nStep 2: Logic\nWe are passing value from the state and functions for toggling switch items to SwitchExample component. Toggle functions will be used for updating the state.\nApp.js\n\nimport React, { Component } from 'react'\nimport { View } from 'react-native'\nimport SwitchExample from './switch_example.js'\n\nexport default class HomeContainer extends Component {\n   constructor() {\n      super();\n      this.state = {\n         switch1Value: false,\n      }\n   }\n   toggleSwitch1 = (value) => {\n      this.setState({switch1Value: value})\n      console.log('Switch 1 is: ' + value)\n   }\n   render() {\n      return (\n         <View>\n            <SwitchExample\n            toggleSwitch1 = {this.toggleSwitch1}\n            switch1Value = {this.state.switch1Value}/>\n         </View>\n      );\n   }\n}\n\nStep 3: Presentation\nSwitch component takes two props. The onValueChange prop will trigger our toggle functions after a user presses the switch. The value prop is bound to the state of the HomeContainer component.\nswitch_example.js\n\nimport React, { Component } from 'react'\nimport { View, Switch, StyleSheet }\n\nfrom 'react-native'\n\nexport default SwitchExample = (props) => {\n   return (\n      <View style = {styles.container}>\n         <Switch\n         onValueChange = {props.toggleSwitch1}\n         value = {props.switch1Value}/>\n      </View>\n   )\n}\nconst styles = StyleSheet.create ({\n   container: {\n      flex: 1,\n      alignItems: 'center',\n      marginTop: 100\n   }\n})\n\nIf we press the switch, the state will be updated. You can check values in the console.\n\nOutput\n\nReact Native - Text\nIn this chapter, we will talk about Text component in React Native.\nThis component can be nested and it can inherit properties from parent to child. This can be useful in many ways. We will show you example of capitalizing the first letter, styling words or parts of the text, etc.\nStep 1: Create File\nThe file we are going to create is text_example.js\nStep 2: App.js\nIn this step, we will just create a simple container.\nApp.js\n\nimport React, { Component } from 'react'\nimport TextExample from './text_example.js'\n\nconst App = () => {\n   return (\n      <TextExample/>\n   )\n}\nexport default App\n\nStep 3: Text\nIn this step, we will use the inheritance pattern. styles.text will be applied to all Text components.\nYou can also notice how we set other styling properties to some parts of the text. It is important to know that all child elements have parent styles passed to them.\ntext_example.js\n\nimport React, { Component } from 'react';\nimport { View, Text, Image, StyleSheet } from 'react-native'\n\nconst TextExample = () => {\n   return (\n      <View style = {styles.container}>\n         <Text style = {styles.text}>\n            <Text style = {styles.capitalLetter}>\n               L\n            </Text>\n            \n            <Text>\n               orem ipsum dolor sit amet, sed do eiusmod.\n            </Text>\n            \n            <Text>\n               Ut enim ad <Text style = {styles.wordBold}>minim </Text> veniam,\n               quis aliquip ex ea commodo consequat.\n            </Text>\n            \n            <Text style = {styles.italicText}>\n               Duis aute irure dolor in reprehenderit in voluptate velit esse cillum.\n            </Text>\n            \n            <Text style = {styles.textShadow}>\n               Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia\n               deserunt mollit anim id est laborum.\n            </Text>\n         </Text>\n      \n      </View>\n   )\n}\nexport default TextExample\n\nconst styles = StyleSheet.create ({\n   container: {\n      alignItems: 'center',\n      marginTop: 100,\n      padding: 20\n   },\n   text: {\n      color: '#41cdf4',\n   },\n   capitalLetter: {\n      color: 'red',\n      fontSize: 20\n   },\n   wordBold: {\n      fontWeight: 'bold',\n      color: 'black'\n   },\n   italicText: {\n      color: '#37859b',\n      fontStyle: 'italic'\n   },\n   textShadow: {\n      textShadowColor: 'red',\n      textShadowOffset: { width: 2, height: 2 },\n      textShadowRadius : 5\n   }\n})\n\nYou will receive the following output \u2212\n\n\nReact Native - Alert\nIn this chapter, we will understand how to create custom Alert component.\nStep 1: App.js\n\nimport React from 'react'\nimport AlertExample from './alert_example.js'\n\nconst App = () => {\n   return (\n      <AlertExample />\n   )\n}\nexport default App\n\nStep 2: alert_example.js\nWe will create a button for triggering the showAlert function.\n\nimport React from 'react'\nimport { Alert, Text, TouchableOpacity, StyleSheet } from 'react-native'\n\nconst AlertExample = () => {\n   const showAlert = () =>{\n      Alert.alert(\n         'You need to...'\n      )\n   }\n   return (\n      <TouchableOpacity onPress = {showAlert} style = {styles.button}>\n         <Text>Alert</Text>\n      </TouchableOpacity>\n   )\n}\nexport default AlertExample\n\nconst styles = StyleSheet.create ({\n   button: {\n      backgroundColor: '#4ba37b',\n      width: 100,\n      borderRadius: 50,\n      alignItems: 'center',\n      marginTop: 100\n   }\n})\n\n\nOutput\n\nWhen you click the button, you will see the following \u2212\n\nReact Native - Geolocation\nIn this chapter, we will show you how to use Geolocation.\nStep 1: App.js\n\nimport React from 'react'\nimport GeolocationExample from './geolocation_example.js'\n\nconst App = () => {\n   return (\n      <GeolocationExample />\n   )\n}\nexport default App\n\nStep 2: Geolocation\nWe will start by setting up the initial state for that will hold the initial and the last position.\nNow, we need to get current position of the device when a component is mounted using the navigator.geolocation.getCurrentPosition. We will stringify the response so we can update the state.\nnavigator.geolocation.watchPosition is used for tracking the users\u2019 position. We also clear the watchers in this step.\nAsyncStorageExample.js\n\nimport React, { Component } from 'react'\nimport { View, Text, Switch, StyleSheet} from 'react-native'\n\nclass SwichExample extends Component {\n   state = {\n      initialPosition: 'unknown',\n      lastPosition: 'unknown',\n   }\n   watchID: ?number = null;\n   componentDidMount = () => {\n      navigator.geolocation.getCurrentPosition(\n         (position) => {\n            const initialPosition = JSON.stringify(position);\n            this.setState({ initialPosition });\n         },\n         (error) => alert(error.message),\n         { enableHighAccuracy: true, timeout: 20000, maximumAge: 1000 }\n      );\n      this.watchID = navigator.geolocation.watchPosition((position) => {\n         const lastPosition = JSON.stringify(position);\n         this.setState({ lastPosition });\n      });\n   }\n   componentWillUnmount = () => {\n      navigator.geolocation.clearWatch(this.watchID);\n   }\n   render() {\n      return (\n         <View style = {styles.container}>\n            <Text style = {styles.boldText}>\n               Initial position:\n            </Text>\n            \n            <Text>\n               {this.state.initialPosition}\n            </Text>\n            \n            <Text style = {styles.boldText}>\n               Current position:\n            </Text>\n            \n            <Text>\n               {this.state.lastPosition}\n            </Text>\n         </View>\n      )\n   }\n}\nexport default SwichExample\n\nconst styles = StyleSheet.create ({\n   container: {\n      flex: 1,\n      alignItems: 'center',\n      marginTop: 50\n   },\n   boldText: {\n      fontSize: 30,\n      color: 'red',\n   }\n})\n\n\nReact Native - AsyncStorage\nIn this chapter, we will show you how to persist your data using AsyncStorage.\nStep 1: Presentation\nIn this step, we will create the App.js file.\n\nimport React from 'react'\nimport AsyncStorageExample from './async_storage_example.js'\n\nconst App = () => {\n   return (\n      <AsyncStorageExample />\n   )\n}\nexport default App\n\nStep 2: Logic\nName from the initial state is empty string. We will update it from persistent storage when the component is mounted.\nsetName will take the text from our input field, save it using AsyncStorage and update the state.\nasync_storage_example.js\n\nimport React, { Component } from 'react'\nimport { StatusBar } from 'react-native'\nimport { AsyncStorage, Text, View, TextInput, StyleSheet } from 'react-native'\n\nclass AsyncStorageExample extends Component {\n   state = {\n      'name': ''\n   }\n   componentDidMount = () => AsyncStorage.getItem('name').then((value) => this.setState({ 'name': value }))\n   \n   setName = (value) => {\n      AsyncStorage.setItem('name', value);\n      this.setState({ 'name': value });\n   }\n   render() {\n      return (\n         <View style = {styles.container}>\n            <TextInput style = {styles.textInput} autoCapitalize = 'none'\n            onChangeText = {this.setName}/>\n            <Text>\n               {this.state.name}\n            </Text>\n         </View>\n      )\n   }\n}\nexport default AsyncStorageExample\n\nconst styles = StyleSheet.create ({\n   container: {\n      flex: 1,\n      alignItems: 'center',\n      marginTop: 50\n   },\n   textInput: {\n      margin: 5,\n      height: 100,\n      borderWidth: 1,\n      backgroundColor: '#7685ed'\n   }\n})\n\nWhen we run the app, we can update the text by typing into the input field.\n\n\n\n\n Previous Page\n\n\n Print\n\n\nNext Page \u00a0\n\n\n\n\nAdvertisements\n<!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//-->\n\n\n\n", "title": "React Native - Quick Guide", "content_html": "<div class=\"col-md-7 middle-col\">\n<h1>React Native - Quick Guide</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/react_native/react_native_asyncstorage.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/react_native/react_native_useful_resources.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<h1>React Native - Overview</h1>\n<p>For better understanding of React Native concepts, we will borrow a few lines from the official documentation \u2212</p>\n<p>React Native lets you build mobile apps using only JavaScript. It uses the same design as React, letting you compose a rich mobile UI from declarative components. With React Native, you don't build a mobile web app, an HTML5 app, or a hybrid app; you build a real mobile app that's indistinguishable from an app built using Objective-C or Java. React Native uses the same fundamental UI building blocks as regular iOS and Android apps. You just put those building blocks together using JavaScript and React.</p>\n<h2>React Native Features</h2>\n<p>Following are the features of React Native \u2212</p>\n<ul class=\"list\">\n<li><p><b>React</b> \u2212 This is a Framework for building web and mobile apps using JavaScript.</p></li>\n<li><p><b>Native</b> \u2212 You can use native components controlled by JavaScript.</p></li>\n<li><p><b>Platforms</b> \u2212 React Native supports IOS and Android platform.</p></li>\n</ul>\n<h2>React Native Advantages</h2>\n<p>Follow are the advantages of React Native \u2212</p>\n<ul class=\"list\">\n<li><p><b>JavaScript</b> \u2212 You can use the existing JavaScript knowledge to build native mobile apps.</p></li>\n<li><p><b>Code sharing</b> \u2212 You can share most of your code on different platforms.</p></li>\n<li><p><b>Community</b> \u2212 The community around React and React Native is large, and you will be able to find any answer you need.</p></li>\n</ul>\n<h2>React Native Limitations</h2>\n<p>Following are the limitations of React Native \u2212</p>\n<ul class=\"list\">\n<li><p><b>Native Components</b> \u2212 If you want to create native functionality which is not created yet, you will need to write some platform specific code.</p></li>\n</ul>\n<h1>React Native - Environment Setup</h1>\n<p>There are a couple of things you need to install to set up the environment for React Native. We will use OSX as our building platform.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No.</th>\n<th style=\"width:25%; text-align:center;\">Software</th>\n<th style=\"text-align:center;\">Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td class=\"ts\">NodeJS and NPM</td>\n<td>You can follow our <a href=\"/nodejs/nodejs_environment_setup.htm\">NodeJS Environment Setup</a> tutorial to install NodeJS.</td>\n</tr>\n</table>\n<h2>Step 1: Install create-react-native-app</h2>\n<p>After installing NodeJS and NPM successfully in your system you can proceed with installation of create-react-native-app (globally as shown below).</p>\n<pre class=\"result notranslate\">\nC:\\Users\\Tutorialspoint&gt; npm install -g create-react-native-app\n</pre>\n<h2>Step 2: Create project</h2>\n<p>Browse through required folder and create a new react native project as shown below.</p>\n<pre class=\"result notranslate\">\nC:\\Users\\Tutorialspoint&gt;cd Desktop\nC:\\Users\\Tutorialspoint\\Desktop&gt;create-react-native-app MyReactNative\n</pre>\n<p>After executing the above command, a folder with specifies name is created with the following contents.</p>\n<img alt=\"Environment Project\" src=\"/react_native/images/environment_project.jpg\">\n<h2>Step 3: NodeJS Python Jdk8</h2>\n<p>Make sure you have Python NodeJS and jdk8 installed in your system if not, install them. In addition to these it is recommended to install latest version of yarn to avoid certain issues.</p>\n<h2>Step 4: Install React Native CLI</h2>\n<p>You can install react native command line interface on npm, using the install -g react-native-cli command as shown below.</p>\n<pre class=\"result notranslate\">\nnpm install -g react-native-cli\n</pre>\n<p></p>\n<img alt=\"Environment Commandline\" src=\"/react_native/images/environment_commandline.jpg\"/>\n<h2>Step 5: Start react native</h2>\n<p>To verify the installation browse through the project folder and try starting the project using the start command.</p>\n<pre class=\"result notranslate\">\nC:\\Users\\Tutorialspoint\\Desktop&gt;cd MyReactNative\nC:\\Users\\Tutorialspoint\\Desktop\\MyReactNative&gt;npm start\n</pre>\n<p>If everything went well you will get a QR code as shown below.</p>\n<img alt=\"Environment Package installer\" src=\"/react_native/images/environment_package_installer.jpg\"/>\n<p>As instructed, one way to run react native apps on your android devise is to using expo. Install expo client in your android devise and scan the above obtained QR code.</p>\n<h2>Step 6: Eject the project</h2>\n<p>If you want to run android emulator using android studio, come out of the current command line by pressing <b>ctrl+c</b>.</p>\n<p>Then, execute run <b>eject command</b> as</p>\n<pre class=\"result notranslate\">\nnpm run eject\n</pre>\n<p>This prompts you options to eject, select the first one using arrows and press enter.</p>\n<img alt=\"Environment Eject Command\" src=\"/react_native/images/environment_eject_command.jpg\"/>\n<p>Then, you should suggest the name of the app on home screen and project name of the Android studio and Xcode projects.</p>\n<img alt=\"Environment Eject Command Questions\" src=\"/react_native/images/environment_eject_command_questions.jpg\"/>\n<p>Though your project ejected successfully, you may get an error as \u2212</p>\n<img alt=\"Environment Eject Error\" src=\"/react_native/images/environment_eject_error.jpg\"/>\n<p>Ignore this error and run react native for android using the following command \u2212</p>\n<pre class=\"result notranslate\">\nreact-native run-android\n</pre>\n<p>But, before that you need to install android studio.</p>\n<h2>Step 7: Installing Android Studio</h2>\n<p>Visit the web page <a href=\"https://developer.android.com/studio/\" rel=\"nofollow\" target=\"_blank\">https://developer.android.com/studio/</a> and download android studio.</p>\n<img alt=\"Environment Android Studio\" src=\"/react_native/images/environment_android_studio.jpg\"/>\n<p>After downloading the installation file of it, double click on it and proceed with the installation.</p>\n<img alt=\"Environment Android Studio3\" src=\"/react_native/images/environment_android_studio3.jpg\"/>\n<h2>Step 8: Configuring AVD Manager</h2>\n<p>To configure the AVD Manager click on the respective icon in the menu bar.</p>\n<img alt=\"Configuring AVD Manager\" src=\"/react_native/images/configuring_avd_manager.jpg\"/>\n<h2>Step 9: Configuring AVD Manager</h2>\n<p>Choose a device definition, Nexus 5X is suggestable.</p>\n<img alt=\"Choose Device Definition\" src=\"/react_native/images/choose_device_definition.jpg\"/>\n<p>Click on the Next button you will see a System Image window. Select the <b>x86 Images</b> tab.</p>\n<img alt=\"System Image\" src=\"/react_native/images/system_image.jpg\"/>\n<p>Then, select Marshmallow and click on next.</p>\n<img alt=\"Select System Image\" src=\"/react_native/images/select_system_image.jpg\"/>\n<p>Finally, click on the Finish button to finish the AVD configuration.</p>\n<img alt=\"Verify Configuration\" src=\"/react_native/images/verify_configuration.jpg\"/>\n<p>After configuring your virtual device click on the play button under the Actions column to start your android emulator.</p>\n<img alt=\"Your Virtual Devices\" src=\"/react_native/images/your_virtual_devices.jpg\"/>\n<h2>Step 10: Running android</h2>\n<p>Open command prompt, browse through your project folder and, execute the <b>react-native run-android</b> command.</p>\n<img alt=\"Running Android\" src=\"/react_native/images/running_android.jpg\"/>\n<p>Then, your app execution begins in another prompt you can see its status.</p>\n<img alt=\"Execution Status\" src=\"/react_native/images/execution_status.jpg\"/>\n<p>In your android emulator you can see the execution of the default app as \u2212</p>\n<img alt=\"React Native Default App\" src=\"/react_native/images/react_native_default_app.jpg\"/>\n<h2>Step 11: local.properties</h2>\n<p>Open the <b>android</b> folder in your project folder <b><i>SampleReactNative/android</i></b> (in this case). Create a file with named <b>local.properties</b> and add the following path in it.</p>\n<pre class=\"result notranslate\">\nsdk.dir = /C:\\\\Users\\\\Tutorialspoint\\\\AppData\\\\Local\\\\Android\\\\Sdk\n</pre>\n<p>here, replace <b>Tutorialspoint</b> with your user name.</p>\n<h2>Step 12: Hot Reloading</h2>\n<p>And to build application modify the App.js and the changes will be automatically updated on the android emulator.</p>\n<p>If not, click on the android emulator press <b>ctrl+m</b> then, select <b>Enable Hot Reloading</b> option.</p>\n<img alt=\"Environment Hot Reloading\" src=\"/react_native/images/environment_hot_reloading.jpg\"/>\n<h1>React Native - App</h1>\n<p>If you open the default app you can observe that the app.js file looks like</p>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default class App extends React.Component {\n   render() {\n      return (\n         &lt;View style = {styles.container}&gt;\n            &lt;Text&gt;Open up App.js to start working on your app!&lt;/Text&gt;\n            &lt;Text&gt;Changes you make will automatically reload.&lt;/Text&gt;\n            &lt;Text&gt;Shake your phone to open the developer menu.&lt;/Text&gt;\n         &lt;/View&gt;\n      );\n   }\n}\n\nconst styles = StyleSheet.create({\n   container: {\n      flex: 1,\n      backgroundColor: '#fff',\n      alignItems: 'center',\n      justifyContent: 'center',\n   },\n});\n</pre>\n<h3>Output</h3>\n<img alt=\"Working on App\" src=\"/react_native/images/working_on_app.jpg\"/>\n<h2>Hello world</h2>\n<p>To display a simple message saying \u201cWelcome to Tutorialspoint\u201d remove the CSS part and insert the message to be printed wrapped by the &lt;text&gt;&lt;/text&gt; tags inside &lt;view&gt;&lt;/view&gt; as shown below.</p>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default class App extends React.Component {\n   render() {\n      return (\n         &lt;View&gt;\n            &lt;Text&gt;Welcome to Tutorialspoint&lt;/Text&gt;\n         &lt;/View&gt;\n      );\n   }\n}\n</pre>\n<img alt=\"Hello World\" src=\"/react_native/images/hello_world.jpg\"/>\n<h1>React Native - State</h1>\n<p>The data inside React Components is managed by <b>state</b> and <b>props</b>. In this chapter, we will talk about <b>state</b>.</p>\n<h2>Difference between State and Props</h2>\n<p>The <b>state</b> is mutable while <b>props</b> are immutable. This means that <b>state</b> can be updated in the future while props cannot be updated.</p>\n<h3>Using State</h3>\n<p>This is our root component. We are just importing <b>Home</b> which will be used in most of the chapters.</p>\n<p><b>App.js</b></p>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default class App extends React.Component {\n   state = {\n      myState: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, used do eiusmod\n      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis\n      nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n      Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu\n      fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n      culpa qui officia deserunt mollit anim id est laborum.'\n   }\n   render() {\n      return (\n      &lt;View&gt;\n         &lt;Text&gt; {this.state.myState} &lt;/Text&gt;\n      &lt;/View&gt;\n      );\n   }\n}\n</pre>\n<p>We can see in emulator text from the state as in the following screenshot.</p>\n<img alt=\"React Native State\" src=\"/react_native/images/react_native_state.jpg\"/>\n<h3>Updating State</h3>\n<p>Since state is mutable, we can update it by creating the <b>deleteState</b> function and call it using the <b>onPress = {this.deleteText}</b> event.</p>\n<p><b>Home.js</b></p>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { Text, View } from 'react-native'\n\nclass Home extends Component {\n   state = {\n      myState: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed \n         do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n         Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi\n         ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit \n         in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n         Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia\n         deserunt mollit anim id est laborum.'\n   }\n   updateState = () \u21d2 this.setState({ myState: 'The state is updated' })\n   render() {\n      return (\n         &lt;View&gt;\n            &lt;Text onPress = {this.updateState}&gt;\n               {this.state.myState}\n            &lt;/Text&gt;\n         &lt;/View&gt;\n      );\n   }\n}\nexport default Home;\n</pre>\n<p><b>NOTES</b> \u2212 In all chapters, we will use the class syntax for stateful (container) components and function syntax for stateless (presentational) components. We will learn more about components in the next chapter.</p>\n<p>We will also learn how to use the arrow function syntax for <b>updateState</b>. You should keep in mind that this syntax uses the lexical scope, and <b>this</b> keyword will be bound to the environment object (Class). This will sometimes lead to unexpected behavior.</p>\n<p>The other way to define methods is to use the EC5 functions but in that case we will need to bind <b>this</b> manually in the constructor. Consider the following example to understand this.</p>\n<pre class=\"prettyprint notranslate\">\nclass Home extends Component {\n   constructor() {\n      super()\n      this.updateState = this.updateState.bind(this)\n   }\n   updateState() {\n      //\n   }\n   render() {\n      //\n   }\n}\n</pre>\n<h1>React Native - Props</h1>\n<p>In our last chapter, we showed you how to use mutable <b>state</b>. In this chapter, we will show you how to combine the state and the <b>props</b>.</p>\n<p>Presentational components should get all data by passing <b>props</b>. Only container components should have <b>state</b>.</p>\n<h2>Container Component</h2>\n<p>We will now understand what a container component is and also how it works.</p>\n<h3>Theory</h3>\n<p>Now we will update our container component. This component will handle the state and pass the props to the presentational component.</p>\n<p>Container component is only used for handling state. All functionality related to view(styling etc.) will be handled in the presentational component.</p>\n<h3>Example</h3>\n<p>If we want to use example from the last chapter we need to remove the <b>Text</b> element from the render function since this element is used for presenting text to the users. This should be inside the presentational component.</p>\n<p>Let us review the code in the example given below. We will import the <b>PresentationalComponent</b> and pass it to the render function.</p>\n<p>After we import the <b>PresentationalComponent</b> and pass it to the render function, we need to pass the props. We will pass the props by adding <b>myText = {this.state.myText}</b> and <b>deleteText = {this.deleteText}</b> to <b>&lt;PresentationalComponent&gt;</b>. Now, we will be able to access this inside the presentational component.</p>\n<p><b>App.js</b></p>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport PresentationalComponent from './PresentationalComponent'\n\nexport default class App extends React.Component {\n   state = {\n      myState: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, used do eiusmod\n      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis\n      nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis\n      aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat\n      nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui\n      officia deserunt mollit anim id est laborum.'\n   }\n   updateState = () =&gt; {\n      this.setState({ myState: 'The state is updated' })\n   }\n   render() {\n      return (\n         &lt;View&gt;\n            &lt;PresentationalComponent myState = {this.state.myState} updateState = {this.updateState}/&gt;\n         &lt;/View&gt;\n      );\n   }\n}\n</pre>\n<h2>Presentational Component</h2>\n<p>We will now understand what a presentational component is and also how it works.</p>\n<h3>Theory</h3>\n<p>Presentational components should be used only for presenting view to the users. These components do not have state. They receive all data and functions as props.</p>\n<p>The best practice is to use as much presentational components as possible.</p>\n<h3>Example</h3>\n<p>As we mentioned in our previous chapter, we are using the EC6 function syntax for presentational components.</p>\n<p>Our component will receive props, return view elements, present text using <b>{props.myText}</b> and call the <b>{props.deleteText}</b> function when a user clicks on the text.</p>\n<p><b>PresentationalComponent.js</b></p>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { Text, View } from 'react-native'\n\nconst PresentationalComponent = (props) =&gt; {\n   return (\n      &lt;View&gt;\n         &lt;Text onPress = {props.updateState}&gt;\n            {props.myState}\n         &lt;/Text&gt;\n      &lt;/View&gt;\n   )\n}\nexport default PresentationalComponent\n</pre>\n<p>Now, we have the same functionality as in our <b>State</b> chapter. The only difference is that we refactored our code to the container and the presentational component.</p>\n<p>You can run the app and see the text as in the following screenshot.</p>\n<img alt=\"React Native Props\" src=\"/react_native/images/reactnative_props.jpg\"/>\n<p>If you click on text, it will be removed from the screen.</p>\n<img alt=\"React Native Props updated\" src=\"/react_native/images/reactnative_props_updated.jpg\"/>\n<h1>React Native - Styling</h1>\n<p>There are a couple of ways to style your elements in React Native.</p>\n<p>You can use the <b>style</b> property to add the styles inline. However, this is not the best practice because it can be hard to read the code.</p>\n<p>In this chapter, we will use the <b>Stylesheet</b> for styling.</p>\n<h2>Container Component</h2>\n<p>In this section, we will simplify our container component from our previous chapter.</p>\n<p><b>App.js</b></p>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport PresentationalComponent from './PresentationalComponent'\n\nexport default class App extends React.Component {\n   state = {\n      myState: 'This is my state'\n   }\n   render() {\n      return (\n         &lt;View&gt;\n            &lt;PresentationalComponent myState = {this.state.myState}/&gt;\n         &lt;/View&gt;\n      );\n   }\n}\n</pre>\n<h2>Presentational Component</h2>\n<p>In the following example, we will import the <b>StyleSheet</b>. At the bottom of the file, we will create our stylesheet and assign it to the <b>styles</b> constant. Note that our styles are in <b>camelCase</b> and we do not use <b>px</b> or % for styling.</p>\n<p>To apply styles to our text, we need to add <b>style = {styles.myText}</b> property to the <b>Text</b> element.</p>\n<p><b>PresentationalComponent.js</b></p>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { Text, View, StyleSheet } from 'react-native'\n\nconst PresentationalComponent = (props) =&gt; {\n   return (\n      &lt;View&gt;\n         &lt;Text style = {styles.myState}&gt;\n            {props.myState}\n         &lt;/Text&gt;\n      &lt;/View&gt;\n   )\n}\nexport default PresentationalComponent\n\nconst styles = StyleSheet.create ({\n   myState: {\n      marginTop: 20,\n      textAlign: 'center',\n      color: 'blue',\n      fontWeight: 'bold',\n      fontSize: 20\n   }\n})\n</pre>\n<p>When we run the app, we will receive the following output.</p>\n<!--<img src=\"/react_native/images/react-native-styling.jpg\" alt=\"React Native Styling\" />\n<p></p>-->\n<h1>React Native - Flexbox</h1>\n<p>To accommodate different screen sizes, React Native offers <b>Flexbox</b> support.</p>\n<p>We will use the same code that we used in our <b>React Native - Styling</b> chapter. We will only change the <b>PresentationalComponent</b>.</p>\n<h2>Layout</h2>\n<p>To achieve the desired layout, flexbox offers three main properties \u2212 <b>flexDirection justifyContent</b> and <b>alignItems</b>.</p>\n<p>The following table shows the possible options.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center\">Property</th>\n<th style=\"text-align:center\">Values</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n<tr>\n<td style=\"vertical-align:middle;\">flexDirection</td>\n<td style=\"vertical-align:middle;\">'column', 'row'</td>\n<td>Used to specify if elements will be aligned vertically or horizontally.</td>\n</tr>\n<tr>\n<td style=\"vertical-align:middle;\">justifyContent</td>\n<td>'center', 'flex-start', 'flex-end', 'space-around', 'space-between'</td>\n<td style=\"vertical-align:middle;\">Used to determine how should elements be distributed inside the container.</td>\n</tr>\n<tr>\n<td style=\"vertical-align:middle;\">alignItems</td>\n<td>'center', 'flex-start', 'flex-end', 'stretched'</td>\n<td>Used to determine how should elements be distributed inside the container along the secondary axis (opposite of flexDirection)</td>\n</tr>\n</table>\n<p>If you want to align the items vertically and centralize them, then you can use the following code.</p>\n<p><b>App.js</b></p>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { View, StyleSheet } from 'react-native'\n\nconst Home = (props) =&gt; {\n   return (\n      &lt;View style = {styles.container}&gt;\n         &lt;View style = {styles.redbox} /&gt;\n         &lt;View style = {styles.bluebox} /&gt;\n         &lt;View style = {styles.blackbox} /&gt;\n      &lt;/View&gt;\n   )\n}\n\nexport default Home\n\nconst styles = StyleSheet.create ({\n   container: {\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n      backgroundColor: 'grey',\n      height: 600\n   },\n   redbox: {\n      width: 100,\n      height: 100,\n      backgroundColor: 'red'\n   },\n   bluebox: {\n      width: 100,\n      height: 100,\n      backgroundColor: 'blue'\n   },\n   blackbox: {\n      width: 100,\n      height: 100,\n      backgroundColor: 'black'\n   },\n})\n</pre>\n<p><b>Output</b></p>\n<img alt=\"React Native Flexbox Center\" src=\"/react_native/images/react-native-flexbox-center.jpg\"/>\n<p>If the items need to be moved to the right side and spaces need to be added between them, then we can use the following code.</p>\n<p><b>App.js</b></p>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { View, StyleSheet } from 'react-native'\n\nconst App = (props) =&gt; {\n   return (\n      &lt;View style = {styles.container}&gt;\n         &lt;View style = {styles.redbox} /&gt;\n         &lt;View style = {styles.bluebox} /&gt;\n         &lt;View style = {styles.blackbox} /&gt;\n      &lt;/View&gt;\n   )\n}\n\nexport default App\n\nconst styles = StyleSheet.create ({\n   container: {\n      flexDirection: 'column',\n      justifyContent: 'space-between',\n      alignItems: 'flex-end',\n      backgroundColor: 'grey',\n      height: 600\n   },\n   redbox: {\n      width: 100,\n      height: 100,\n      backgroundColor: 'red'\n   },\n   bluebox: {\n      width: 100,\n      height: 100,\n      backgroundColor: 'blue'\n   },\n   blackbox: {\n      width: 100,\n      height: 100,\n      backgroundColor: 'black'\n   },\n})\n</pre>\n<p></p>\n<img alt=\"React Native Flexbox Right\" src=\"/react_native/images/react-native-flexbox-right.jpg\"/>\n<!--<img src=\"/react_native/images/react-native-flexbox-right.jpg\" alt=\"React Native Flexbox Right\" />\n<p></p>\n<img src=\"/react_native/images/react-native-flexbox-black-yellow.jpg\" alt=\"React Native Flexbox Black Yellow\" />-->\n<h1>React Native - ListView</h1>\n<p>In this chapter, we will show you how to create a list in React Native. We will import <b>List</b> in our <b>Home</b> component and show it on screen.</p>\n<p><b>App.js</b></p>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react'\nimport List from './List.js'\n\nconst App = () =&gt; {\n   return (\n      &lt;List /&gt;\n   )\n}\nexport default App\n</pre>\n<p>To create a list, we will use the <b>map()</b> method. This will iterate over an array of items, and render each one.</p>\n<p><b>List.js</b></p>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { Text, View, TouchableOpacity, StyleSheet } from 'react-native'\n   \nclass List extends Component {\n   state = {\n      names: [\n         {\n            id: 0,\n            name: 'Ben',\n         },\n         {\n            id: 1,\n            name: 'Susan',\n         },\n         {\n            id: 2,\n            name: 'Robert',\n         },\n         {\n            id: 3,\n            name: 'Mary',\n         }\n      ]\n   }\n   alertItemName = (item) =&gt; {\n      alert(item.name)\n   }\n   render() {\n      return (\n         &lt;View&gt;\n            {\n               this.state.names.map((item, index) =&gt; (\n                  &lt;TouchableOpacity\n                     key = {item.id}\n                     style = {styles.container}\n                     onPress = {() =&gt; this.alertItemName(item)}&gt;\n                     &lt;Text style = {styles.text}&gt;\n                        {item.name}\n                     &lt;/Text&gt;\n                  &lt;/TouchableOpacity&gt;\n               ))\n            }\n         &lt;/View&gt;\n      )\n   }\n}\nexport default List\n\nconst styles = StyleSheet.create ({\n   container: {\n      padding: 10,\n      marginTop: 3,\n      backgroundColor: '#d9f9b1',\n      alignItems: 'center',\n   },\n   text: {\n      color: '#4f603c'\n   }\n})\n</pre>\n<p>When we run the app, we will see the list of names.</p>\n<!--<img src=\"/react_native/images/react_native_listview.jpg\" alt=\"React Native ListView\" />-->\n<p></p>\n<!--<img src=\"/react_native/images/react_native_alert_box.jpg\" alt=\"React Native Alert Box\" />-->\n<p></p>\n<img alt=\"ListView\" src=\"/react_native/images/list_view.jpg\"/>\n<p>You can click on each item in the list to trigger an alert with the name.</p>\n<img alt=\"React Native ListView\" src=\"/react_native/images/react_native_list_view.jpg\"/>\n<h1>React Native - Text Input</h1>\n<p>In this chapter, we will show you how to work with <b>TextInput</b> elements in React Native.</p>\n<p>The Home component will import and render inputs.</p>\n<h2>App.js</h2>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react';\nimport Inputs from './inputs.js'\n\nconst App = () =&gt; {\n   return (\n      &lt;Inputs /&gt;\n   )\n}\nexport default App\n</pre>\n<h2>Inputs</h2>\n<p>We will define the initial state.</p>\n<p>After defining the initial state, we will create the <b>handleEmail</b> and the <b>handlePassword</b> functions. These functions are used for updating state.</p>\n<p>The <b>login()</b> function will just alert the current value of the state.</p>\n<p>We will also add some other properties to text inputs to disable auto capitalisation, remove the bottom border on Android devices and set a placeholder.</p>\n<h2>inputs.js</h2>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { View, Text, TouchableOpacity, TextInput, StyleSheet } from 'react-native'\n\nclass Inputs extends Component {\n   state = {\n      email: '',\n      password: ''\n   }\n   handleEmail = (text) =&gt; {\n      this.setState({ email: text })\n   }\n   handlePassword = (text) =&gt; {\n      this.setState({ password: text })\n   }\n   login = (email, pass) =&gt; {\n      alert('email: ' + email + ' password: ' + pass)\n   }\n   render() {\n      return (\n         &lt;View style = {styles.container}&gt;\n            &lt;TextInput style = {styles.input}\n               underlineColorAndroid = \"transparent\"\n               placeholder = \"Email\"\n               placeholderTextColor = \"#9a73ef\"\n               autoCapitalize = \"none\"\n               onChangeText = {this.handleEmail}/&gt;\n            \n            &lt;TextInput style = {styles.input}\n               underlineColorAndroid = \"transparent\"\n               placeholder = \"Password\"\n               placeholderTextColor = \"#9a73ef\"\n               autoCapitalize = \"none\"\n               onChangeText = {this.handlePassword}/&gt;\n            \n            &lt;TouchableOpacity\n               style = {styles.submitButton}\n               onPress = {\n                  () =&gt; this.login(this.state.email, this.state.password)\n               }&gt;\n               &lt;Text style = {styles.submitButtonText}&gt; Submit &lt;/Text&gt;\n            &lt;/TouchableOpacity&gt;\n         &lt;/View&gt;\n      )\n   }\n}\nexport default Inputs\n\nconst styles = StyleSheet.create({\n   container: {\n      paddingTop: 23\n   },\n   input: {\n      margin: 15,\n      height: 40,\n      borderColor: '#7a42f4',\n      borderWidth: 1\n   },\n   submitButton: {\n      backgroundColor: '#7a42f4',\n      padding: 10,\n      margin: 15,\n      height: 40,\n   },\n   submitButtonText:{\n      color: 'white'\n   }\n})\n</pre>\n<p>Whenever we type in one of the input fields, the state will be updated. When we click on the <b>Submit</b> button, text from inputs will be shown inside the dialog box.</p>\n<!--<img src=\"/react_native/images/react-native-text-input.jpg\" alt=\"React Native Text Input\" />\n<p></p>-->\n<img alt=\"React Native Text Input\" src=\"/react_native/images/reactnative_text_input.jpg\"/>\n<p>Whenever we type in one of the input fields, the state will be updated. When we click on the <b>Submit</b> button, text from inputs will be shown inside the dialog box.</p>\n<img alt=\"React Native Text Input\" src=\"/react_native/images/react-native-text-input.jpg\"/>\n<h1>React Native - ScrollView</h1>\n<p>In this chapter, we will show you how to work with the <b>ScrollView</b> element.</p>\n<p>We will again create <b>ScrollViewExample.js</b> and import it in <b>Home</b>.</p>\n<h2>App.js</h2>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react';\nimport ScrollViewExample from './scroll_view.js';\n\nconst App = () =&gt; {\n   return (\n      &lt;ScrollViewExample /&gt;\n   )\n}\n</pre>\n<p>Scrollview will render a list of names. We will create it in state.</p>\n<h2>ScrollView.js</h2>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react';\nimport { Text, Image, View, StyleSheet, ScrollView } from 'react-native';\n\nclass ScrollViewExample extends Component {\n   state = {\n      names: [\n         {'name': 'Ben', 'id': 1},\n         {'name': 'Susan', 'id': 2},\n         {'name': 'Robert', 'id': 3},\n         {'name': 'Mary', 'id': 4},\n         {'name': 'Daniel', 'id': 5},\n         {'name': 'Laura', 'id': 6},\n         {'name': 'John', 'id': 7},\n         {'name': 'Debra', 'id': 8},\n         {'name': 'Aron', 'id': 9},\n         {'name': 'Ann', 'id': 10},\n         {'name': 'Steve', 'id': 11},\n         {'name': 'Olivia', 'id': 12}\n      ]\n   }\n   render() {\n      return (\n         &lt;View&gt;\n            &lt;ScrollView&gt;\n               {\n                  this.state.names.map((item, index) =&gt; (\n                     &lt;View key = {item.id} style = {styles.item}&gt;\n                        &lt;Text&gt;{item.name}&lt;/Text&gt;\n                     &lt;/View&gt;\n                  ))\n               }\n            &lt;/ScrollView&gt;\n         &lt;/View&gt;\n      )\n   }\n}\nexport default ScrollViewExample\n\nconst styles = StyleSheet.create ({\n   item: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      padding: 30,\n      margin: 2,\n      borderColor: '#2a4944',\n      borderWidth: 1,\n      backgroundColor: '#d2f7f1'\n   }\n})\n</pre>\n<p>When we run the app, we will see the scrollable list of names.</p>\n<!--<img src=\"/react_native/images/react-native-scroll-view.jpg\" alt=\"React Native ScrollView\" />\n<p></p>-->\n<h1>React Native - Images</h1>\n<p>In this chapter, we will understand how to work with images in React Native.</p>\n<h2>Adding Image</h2>\n<p>Let us create a new folder <b>img</b> inside the <b>src</b> folder. We will add our image (<b>myImage.png</b>) inside this folder.</p>\n<p>We will show images on the home screen.</p>\n<h3>App.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react';\nimport ImagesExample from './ImagesExample.js'\n\nconst App = () =&gt; {\n   return (\n      &lt;ImagesExample /&gt;\n   )\n}\nexport default App\n</pre>\n<p>Local image can be accessed using the following syntax.</p>\n<!--<img src=\"/react_native/images/react-native-network-image.jpg\" alt=\"React Native Images\" />-->\n<h3>image_example.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { Image } from 'react-native'\n\nconst ImagesExample = () =&gt; (\n   &lt;Image source = {require('C:/Users/Tutorialspoint/Desktop/NativeReactSample/logo.png')} /&gt;\n)\nexport default ImagesExample\n</pre>\n<h3>Output</h3>\n<img alt=\"React Native Images\" src=\"/react_native/images/react_native_images.jpg\"/>\n<h2>Screen Density</h2>\n<p>React Native offers a way to optimize images for different devices using <b>@2x, @3x</b> suffix. The app will load only the image necessary for particular screen density.</p>\n<p>The following will be the names of the image inside the <b>img</b> folder.</p>\n<pre class=\"result notranslate\">\nmy-image@2x.jpg\nmy-image@3x.jpg\n</pre>\n<h2>Network Images</h2>\n<p>When using network images, instead of <b>require</b>, we need the <b>source</b> property. It is recommended to define the <b>width</b> and the <b>height</b> for network images.</p>\n<h3>App.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react';\nimport ImagesExample from './image_example.js'\n\nconst App = () =&gt; {\n   return (\n      &lt;ImagesExample /&gt;\n   )\n}\nexport default App\n</pre>\n<!--<img src=\"/react_native/images/react-native-network-image.jpg\" alt=\"React Native Network Image\" />-->\n<h3>image_example.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { View, Image } from 'react-native'\n\nconst ImagesExample = () =&gt; (\n   &lt;Image source = {{uri:'https://pbs.twimg.com/profile_images/486929358120964097/gNLINY67_400x400.png'}}\n   style = {{ width: 200, height: 200 }}\n   /&gt;\n)\nexport default ImagesExample\n</pre>\n<h3>Output</h3>\n<img alt=\"Network Images\" src=\"/react_native/images/network_images.jpg\"/>\n<h1>React Native - HTTP</h1>\n<p>In this chapter, we will show you how to use <b>fetch</b> for handling network requests.</p>\n<h3>App.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react';\nimport HttpExample from './http_example.js'\n\nconst App = () =&gt; {\n   return (\n      &lt;HttpExample /&gt;\n   )\n}\nexport default App\n</pre>\n<h2>Using Fetch</h2>\n<p>We will use the <b>componentDidMount</b> lifecycle method to load the data from server as soon as the component is mounted. This function will send GET request to the server, return JSON data, log output to console and update our state.</p>\n<!--<img src=\"/react_native/images/react-native-http-fetch.jpg\" alt=\"React Native HTTP Fetch\" />\n<p></p>\n<img src=\"/react_native/images/react-native-http-log.jpg\" alt=\"React Native HTTP Log\" />-->\n<h3>http_example.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { View, Text } from 'react-native'\n\nclass HttpExample extends Component {\n   state = {\n      data: ''\n   }\n   componentDidMount = () =&gt; {\n      fetch('https://jsonplaceholder.typicode.com/posts/1', {\n         method: 'GET'\n      })\n      .then((response) =&gt; response.json())\n      .then((responseJson) =&gt; {\n         console.log(responseJson);\n         this.setState({\n            data: responseJson\n         })\n      })\n      .catch((error) =&gt; {\n         console.error(error);\n      });\n   }\n   render() {\n      return (\n         &lt;View&gt;\n            &lt;Text&gt;\n               {this.state.data.body}\n            &lt;/Text&gt;\n         &lt;/View&gt;\n      )\n   }\n}\nexport default HttpExample\n</pre>\n<h3>Output</h3>\n<img alt=\"React Native HTTP\" src=\"/react_native/images/react_native_http.jpg\"/>\n<h1>React Native - Buttons</h1>\n<p>In this chapter, we will show you touchable components in react Native. We call them 'touchable' because they offer built in animations and we can use the <b>onPress</b> prop for handling touch event.</p>\n<p>Facebook offers the <b>Button</b> component, which can be used as a generic button. Consider the following example to understand the same.</p>\n<h3>App.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { Button } from 'react-native'\n\nconst App = () =&gt; {\n   const handlePress = () =&gt; false\n   return (\n      &lt;Button\n         onPress = {handlePress}\n         title = \"Red button!\"\n         color = \"red\"\n      /&gt;\n   )\n}\nexport default App\n</pre>\n<p>If the default <b>Button</b> component does not suit your needs, you can use one of the following components instead.</p>\n<img alt=\"Buttons Redbutton\" src=\"/react_native/images/buttons_redbutton.jpg\"/>\n<h2>Touchable Opacity</h2>\n<p>This element will change the opacity of an element when touched.</p>\n<h3>App.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react'\nimport { TouchableOpacity, StyleSheet, View, Text } from 'react-native'\n\nconst App = () =&gt; {\n   return (\n      &lt;View style = {styles.container}&gt;\n         &lt;TouchableOpacity&gt;\n            &lt;Text style = {styles.text}&gt;\n               Button\n            &lt;/Text&gt;\n         &lt;/TouchableOpacity&gt;\n      &lt;/View&gt;\n   )\n}\nexport default App\n\nconst styles = StyleSheet.create ({\n   container: {\n      alignItems: 'center',\n   },\n   text: {\n      borderWidth: 1,\n      padding: 25,\n      borderColor: 'black',\n      backgroundColor: 'red'\n   }\n})\n</pre>\n<p></p>\n<img alt=\"Buttons Touchopacity\" src=\"/react_native/images/buttons_touchopacity.jpg\"/>\n<h2>Touchable Highlight</h2>\n<p>When a user presses the element, it will get darker and the underlying color will show through.</p>\n<h3>App.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react'\nimport { View, TouchableHighlight, Text, StyleSheet } from 'react-native'\n\nconst App = (props) =&gt; {\n   return (\n      &lt;View style = {styles.container}&gt;\n         &lt;TouchableHighlight&gt;\n            &lt;Text style = {styles.text}&gt;\n               Button\n            &lt;/Text&gt;\n         &lt;/TouchableHighlight&gt;\n      &lt;/View&gt;\n   )\n}\nexport default App\n\nconst styles = StyleSheet.create ({\n   container: {\n      alignItems: 'center',\n   },\n   text: {\n      borderWidth: 1,\n      padding: 25,\n      borderColor: 'black',\n      backgroundColor: 'red'\n   }\n})\n</pre>\n<h2>Touchable Native Feedback</h2>\n<p>This will simulate ink animation when the element is pressed.</p>\n<h3>App.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react'\nimport { View, TouchableNativeFeedback, Text, StyleSheet } from 'react-native'\n\nconst Home = (props) =&gt; {\n   return (\n      &lt;View style = {styles.container}&gt;\n         &lt;TouchableNativeFeedback&gt;\n            &lt;Text style = {styles.text}&gt;\n               Button\n            &lt;/Text&gt;\n         &lt;/TouchableNativeFeedback&gt;\n      &lt;/View&gt;\n   )\n}\nexport default Home\n\nconst styles = StyleSheet.create ({\n   container: {\n      alignItems: 'center',\n   },\n   text: {\n      borderWidth: 1,\n      padding: 25,\n      borderColor: 'black',\n      backgroundColor: 'red'\n   }\n})\n</pre>\n<h2>Touchable Without Feedback</h2>\n<p>This should be used when you want to handle the touch event without any animation Usually, this component is not used much.</p>\n<pre class=\"prettyprint notranslate\">\n&lt;TouchableWithoutFeedback&gt;\n   &lt;Text&gt;\n      Button\n   &lt;/Text&gt;\n&lt;/TouchableWithoutFeedback&gt;\n</pre>\n<h1>React Native - Animations</h1>\n<p>In this chapter, we will show you how to use <b>LayoutAnimation</b> in React Native.</p>\n<h2>Animations Component</h2>\n<p>We will set <b>myStyle</b> as a property of the state. This property is used for styling an element inside <b>PresentationalAnimationComponent</b>.</p>\n<p>We will also create two functions \u2212 <b>expandElement</b> and <b>collapseElement</b>. These functions will update values from the state. The first one will use the <b>spring</b> preset animation while the second one will have the <b>linear</b> preset. We will pass these as props too. The <b>Expand</b> and the <b>Collapse</b> buttons call the <b>expandElement()</b> and <b>collapseElement()</b> functions.</p>\n<p>In this example, we will dynamically change the width and the height of the box. Since the <b>Home</b> component will be the same, we will only change the <b>Animations</b> component.</p>\n<!--<img src=\"/react_native/images/react-native-animations-collapsed.jpg\" alt=\"React Native Animations Collapsed\" />\n<p></p>\n<img src=\"/react_native/images/react-native-animations-expanded.jpg\" alt=\"React Native Animations Expanded\" />-->\n<p>In this example, we will dynamically change the width and the height of the box. Since the <b>Home</b> component will be the same, we will only change the <b>Animations</b> component.</p>\n<h3>App.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { View, StyleSheet, Animated, TouchableOpacity } from 'react-native'\n\nclass Animations extends Component {\n   componentWillMount = () =&gt; {\n      this.animatedWidth = new Animated.Value(50)\n      this.animatedHeight = new Animated.Value(100)\n   }\n   animatedBox = () =&gt; {\n      Animated.timing(this.animatedWidth, {\n         toValue: 200,\n         duration: 1000\n      }).start()\n      Animated.timing(this.animatedHeight, {\n         toValue: 500,\n         duration: 500\n      }).start()\n   }\n   render() {\n      const animatedStyle = { width: this.animatedWidth, height: this.animatedHeight }\n      return (\n         &lt;TouchableOpacity style = {styles.container} onPress = {this.animatedBox}&gt;\n            &lt;Animated.View style = {[styles.box, animatedStyle]}/&gt;\n         &lt;/TouchableOpacity&gt;\n      )\n   }\n}\nexport default Animations\n\nconst styles = StyleSheet.create({\n   container: {\n      justifyContent: 'center',\n      alignItems: 'center'\n   },\n   box: {\n      backgroundColor: 'blue',\n      width: 50,\n      height: 100\n   }\n})\n</pre>\n<!--<p>The initial screen will show a small blue box.</p>\n<img src=\"/react_native/images/react-native-animations-collapsed-2.jpg\" alt=\"React Native Animations Collapsed\" />\n<p>To trigger animation, we need to press it.</p>\n<img src=\"/react_native/images/react-native-animations-expanded-2.jpg\" alt=\"React Native Animations Expanded\" />-->\n<h1>React Native - Debugging</h1>\n<p>React native offers a couple of methods that help in debugging your code.</p>\n<h2>In App Developer Menu</h2>\n<p>You can open the developer menu on the IOS simulator by pressing <b>command + D</b>.</p>\n<p>On Android emulator, you need to press <b>command + M</b>.</p>\n<img alt=\"React Native Debugging Developer Menu\" src=\"/react_native/images/react-native-debugging-developer-menu.jpg\"/>\n<ul class=\"list\">\n<li><p><b>Reload</b> \u2212 Used for reloading simulator. You can use shortcut <b>command + R</b></p></li>\n<li><p><b>Debug JS Remotely</b> \u2212 Used for activating debugging inside browser developer console.</p></li>\n<li><p><b>Enable Live Reload</b> \u2212 Used for enabling live reloading whenever your code is saved. The debugger will open at <b>localhost:8081/debugger-ui</b>.</p></li>\n<li><p><b>Start Systrace</b> \u2212 Used for starting Android marker based profiling tool.</p></li>\n<li><p><b>Show Inspector</b> \u2212 Used for opening inspector where you can find info about your components. You can use shortcut <b>command + I</b></p></li>\n<li><p><b>Show Perf Monitor</b> \u2212 Perf monitor is used for keeping track of the performance of your app.</p></li>\n</ul>\n<h1>React Native - Router</h1>\n<p>In this chapter, we will understand navigation in React Native.</p>\n<h2>Step 1: Install Router</h2>\n<p>To begin with, we need to install the <b>Router</b>. We will use the React Native Router Flux in this chapter. You can run the following command in terminal, from the project folder.</p>\n<pre class=\"result notranslate\">\nnpm i react-native-router-flux --save\n</pre>\n<h2>Step 2: Entire Application</h2>\n<p>Since we want our router to handle the entire application, we will add it in <b>index.ios.js</b>. For Android, you can do the same in <b>index.android.js</b>.</p>\n<h3>App.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react';\nimport { AppRegistry, View } from 'react-native';\nimport Routes from './Routes.js'\n\nclass reactTutorialApp extends Component {\n   render() {\n      return (\n         &lt;Routes /&gt;\n      )\n   }\n}\nexport default reactTutorialApp\nAppRegistry.registerComponent('reactTutorialApp', () =&gt; reactTutorialApp)\n</pre>\n<h2>Step 3: Add Router</h2>\n<p>Now we will create the <b>Routes</b> component inside the components folder. It will return <b>Router</b> with several scenes. Each scene will need <b>key, component</b> and <b>title</b>. Router uses the key property to switch between scenes, component will be rendered on screen and the title will be shown in the navigation bar. We can also set the <b>initial</b> property to the scene that is to be rendered initially.</p>\n<h3>Routes.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react'\nimport { Router, Scene } from 'react-native-router-flux'\nimport Home from './Home.js'\nimport About from './About.js'\n\nconst Routes = () =&gt; (\n   &lt;Router&gt;\n      &lt;Scene key = \"root\"&gt;\n         &lt;Scene key = \"home\" component = {Home} title = \"Home\" initial = {true} /&gt;\n         &lt;Scene key = \"about\" component = {About} title = \"About\" /&gt;\n      &lt;/Scene&gt;\n   &lt;/Router&gt;\n)\nexport default Routes\n</pre>\n<h2>Step 4: Create Components</h2>\n<p>We already have the <b>Home</b> component from previous chapters; now, we need to add the <b>About</b> component. We will add the <b>goToAbout</b> and the <b>goToHome</b> functions to switch between scenes.</p>\n<h3>Home.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react'\nimport { TouchableOpacity, Text } from 'react-native';\nimport { Actions } from 'react-native-router-flux';\n\nconst Home = () =&gt; {\n   const goToAbout = () =&gt; {\n      Actions.about()\n   }\n   return (\n      &lt;TouchableOpacity style = {{ margin: 128 }} onPress = {goToAbout}&gt;\n         &lt;Text&gt;This is HOME!&lt;/Text&gt;\n      &lt;/TouchableOpacity&gt;\n   )\n}\nexport default Home\n</pre>\n<h3>About.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react'\nimport { TouchableOpacity, Text } from 'react-native'\nimport { Actions } from 'react-native-router-flux'\n\nconst About = () =&gt; {\n   const goToHome = () =&gt; {\n      Actions.home()\n   }\n   return (\n      &lt;TouchableOpacity style = {{ margin: 128 }} onPress = {goToHome}&gt;\n         &lt;Text&gt;This is ABOUT&lt;/Text&gt;\n      &lt;/TouchableOpacity&gt;\n   )\n}\nexport default About\n</pre>\n<p>The app will render the initial <b>Home</b> screen.</p>\n<!--<img src=\"/react_native/images/react-native-router-home.jpg\" alt=\"React Native Router Home\" />\n<p></p>\n<!--<img src=\"/react_native/images/react-native-router-about.jpg\" alt=\"React Native Router About\" />\n<p></p>-->\n<img alt=\"React Native Router\" src=\"/react_native/images/react_native_router.jpg\"/>\n<p>You can press the button to switch to the about screen. The Back arrow will appear; you can use it to get back to the previous screen.</p>\n<img alt=\"React Native Router\" src=\"/react_native/images/reactnative_router.jpg\"/>\n<h1>React Native - Running IOS</h1>\n<p>If you want to test your app in the IOS simulator, all you need is to open the root folder of your app in terminal and run \u2212</p>\n<pre class=\"result notranslate\">\nreact-native run-ios\n</pre>\n<p>The above command will start the simulator and run the app.</p>\n<p>We can also specify the device we want to use.</p>\n<pre class=\"result notranslate\">\nreact-native run-ios --simulator \"iPhone 5s\n</pre>\n<p>After you open the app in simulator, you can press <b>command + D</b> on IOS to open the developers menu. You can check more about this in our <b>debugging</b> chapter.</p>\n<p>You can also reload the IOS simulator by pressing <b>command &amp;plus R</b>.</p>\n<h1>React Native - Running Android</h1>\n<p>We can run the React Native app on Android platform by running the following code in the terminal.</p>\n<pre class=\"result notranslate\">\nreact-native run-android\n</pre>\n<p>Before you can run your app on Android device, you need to enable <b>USB Debugging</b> inside the <b>Developer Options</b>.</p>\n<p>When <b>USB Debugging</b> is enabled, you can plug in your device and run the code snippet given above.</p>\n<p>The Native Android emulator is slow. We recommend downloading <a href=\"https://www.genymotion.com/\" rel=\"nofollow\" target=\"_blank\">Genymotion</a> for testing your app.</p>\n<p>The developer menu can be accessed by pressing <b>command &amp;plus M</b>.</p>\n<h1>React Native - View</h1>\n<p>View is the most common element in React Native. You can consider it as an equivalent of the <b>div</b> element used in web development.</p>\n<h2>Use Cases</h2>\n<p>Let us now see a few common use cases.</p>\n<ul class=\"list\">\n<li><p>When you need to wrap your elements inside the container, you can use <b>View</b> as a container element.</p></li>\n<li><p>When you want to nest more elements inside the parent element, both parent and child can be <b>View</b>. It can have as many children as you want.</p></li>\n<li><p>When you want to style different elements, you can place them inside <b>View</b> since it supports <b>style</b> property, <b>flexbox</b> etc.</p></li>\n<li><p><b>View</b> also supports synthetic touch events, which can be useful for different purposes.</p></li>\n</ul>\n<p>We already used <b>View</b> in our previous chapters and we will use it in almost all subsequent chapters as well. The <b>View</b> can be assumed as a default element in React Native. In example given below, we will nest two Views and a text.</p>\n<h3>App.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { View, Text } from 'react-native'\n\nconst App = () =&gt; {\n   return (\n      &lt;View&gt;\n         &lt;View&gt;\n            &lt;Text&gt;This is my text&lt;/Text&gt;\n         &lt;/View&gt;\n      &lt;/View&gt;\n   )\n}\nexport default App\n</pre>\n<h3>Output</h3>\n<img alt=\"Props Updated\" src=\"/react_native/images/props_updated.jpg\"/>\n<h1>React Native - WebView</h1>\n<p>In this chapter, we will learn how to use WebView. It is used when you want to render web page to your mobile app inline.</p>\n<h2>Using WebView</h2>\n<p>The <b>HomeContainer</b> will be a container component.</p>\n<h3>App.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport WebViewExample from './web_view_example.js'\n\nconst App = () =&gt; {\n   return (\n      &lt;WebViewExample/&gt;\n   )\n}\nexport default App;\n</pre>\n<p>Let us create a new file called <b>WebViewExample.js</b> inside the <b>src/components/home</b> folder.</p>\n<h3>web_view_example.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { View, WebView, StyleSheet }\n\nfrom 'react-native'\nconst WebViewExample = () =&gt; {\n   return (\n      &lt;View style = {styles.container}&gt;\n         &lt;WebView\n         source = {{ uri:\n         'https://www.google.com/?gws_rd=cr,ssl&amp;ei=SICcV9_EFqqk6ASA3ZaABA#q=tutorialspoint' }}\n         /&gt;\n      &lt;/View&gt;\n   )\n}\nexport default WebViewExample;\n\nconst styles = StyleSheet.create({\n   container: {\n      height: 350,\n   }\n})\n</pre>\n<p>The above program will generate the following output.</p>\n<!--<img src=\"/react_native/images/react-native-webview.jpg\" alt=\"React Native WebView\" />-->\n<img alt=\"React Native WebView\" src=\"/react_native/images/react_native_web_view.jpg\"/>\n<h1>React Native - Modal</h1>\n<p>In this chapter, we will show you how to use the modal component in React Native.</p>\n<p>Let us now create a new file: <b>ModalExample.js</b></p>\n<p>We will put logic inside <b>ModalExample</b>. We can update the initial state by running the <b>toggleModal</b>.</p>\n<p>After updating the initial state by running the <b>toggleModal</b>, we will set the <b>visible</b> property to our modal. This prop will be updated when the state changes.</p>\n<p>The <b>onRequestClose</b> is required for Android devices.</p>\n<h2>App.js</h2>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport WebViewExample from './modal_example.js'\n\nconst Home = () =&gt; {\n   return (\n      &lt;WebViewExample/&gt;\n   )\n}\nexport default Home;\n</pre>\n<h2>modal_example.js</h2>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react';\nimport { Modal, Text, TouchableHighlight, View, StyleSheet}\n\nfrom 'react-native'\nclass ModalExample extends Component {\n   state = {\n      modalVisible: false,\n   }\n   toggleModal(visible) {\n      this.setState({ modalVisible: visible });\n   }\n   render() {\n      return (\n         &lt;View style = {styles.container}&gt;\n            &lt;Modal animationType = {\"slide\"} transparent = {false}\n               visible = {this.state.modalVisible}\n               onRequestClose = {() =&gt; { console.log(\"Modal has been closed.\") } }&gt;\n               \n               &lt;View style = {styles.modal}&gt;\n                  &lt;Text style = {styles.text}&gt;Modal is open!&lt;/Text&gt;\n                  \n                  &lt;TouchableHighlight onPress = {() =&gt; {\n                     this.toggleModal(!this.state.modalVisible)}}&gt;\n                     \n                     &lt;Text style = {styles.text}&gt;Close Modal&lt;/Text&gt;\n                  &lt;/TouchableHighlight&gt;\n               &lt;/View&gt;\n            &lt;/Modal&gt;\n            \n            &lt;TouchableHighlight onPress = {() =&gt; {this.toggleModal(true)}}&gt;\n               &lt;Text style = {styles.text}&gt;Open Modal&lt;/Text&gt;\n            &lt;/TouchableHighlight&gt;\n         &lt;/View&gt;\n      )\n   }\n}\nexport default ModalExample\n\nconst styles = StyleSheet.create ({\n   container: {\n      alignItems: 'center',\n      backgroundColor: '#ede3f2',\n      padding: 100\n   },\n   modal: {\n      flex: 1,\n      alignItems: 'center',\n      backgroundColor: '#f7021a',\n      padding: 100\n   },\n   text: {\n      color: '#3f2949',\n      marginTop: 10\n   }\n})\n</pre>\n<p>Our starting screen will look like this \u2212</p>\n<!--<img src=\"/react_native/images/react-native-modal-closed.jpg\" alt=\"React Native Modal Closed\" />\n<p></p\n<img src=\"/react_native/images/react-native-modal-open.jpg\" alt=\"React Native Modal Open\" />>-->\n<p></p>\n<img alt=\"React Native Open Modal\" src=\"/react_native/images/react_native_open_modal.jpg\"/>\n<p>If we click the button, the modal will open.</p>\n<img alt=\"React Native Modal\" src=\"/react_native/images/react_native_modal.jpg\"/>\n<h1>React Native - ActivityIndicator</h1>\n<p>In this chapter we will show you how to use the activity indicator in React Native.</p>\n<h2>Step 1: App</h2>\n<p><b>App</b> component will be used to import and show our <b>ActivityIndicator</b>.</p>\n<h3>App.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react'\nimport ActivityIndicatorExample from './activity_indicator_example.js'\n\nconst Home = () =&gt; {\n   return (\n      &lt;ActivityIndicatorExample /&gt;\n   )\n}\nexport default Home\n</pre>\n<h2>Step 2: ActivityIndicatorExample</h2>\n<p>Animating property is a Boolean which is used for showing the activity indicator. The latter closes six seconds after the component is mounted. This is done using the <b>closeActivityIndicator()</b> function.</p>\n<h3>activity_indicator_example.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react';\nimport { ActivityIndicator, View, Text, TouchableOpacity, StyleSheet } from 'react-native';\n\nclass ActivityIndicatorExample extends Component {\n   state = { animating: true }\n   \n   closeActivityIndicator = () =&gt; setTimeout(() =&gt; this.setState({\n   animating: false }), 60000)\n   \n   componentDidMount = () =&gt; this.closeActivityIndicator()\n   render() {\n      const animating = this.state.animating\n      return (\n         &lt;View style = {styles.container}&gt;\n            &lt;ActivityIndicator\n               animating = {animating}\n               color = '#bc2b78'\n               size = \"large\"\n               style = {styles.activityIndicator}/&gt;\n         &lt;/View&gt;\n      )\n   }\n}\nexport default ActivityIndicatorExample\n\nconst styles = StyleSheet.create ({\n   container: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      marginTop: 70\n   },\n   activityIndicator: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      height: 80\n   }\n})\n</pre>\n<p>When we run the app, we will see the loader on screen. It will disappear after six seconds.</p>\n<!--<img src=\"/react_native/images/react-native-activity-indicator.jpg\" alt=\"React Native Activity Indicator\" />-->\n<img alt=\"React Native Activity Indicator\" src=\"/react_native/images/react_native_activity_indicator.jpg\"/>\n<h1>React Native - Picker</h1>\n<p>In this chapter, we will create simple Picker with two available options.</p>\n<h2>Step 1: Create File</h2>\n<p>Here, the <b>App.js</b> folder will be used as a presentational component.</p>\n<h3>App.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react'\nimport PickerExample from './PickerExample.js'\n\nconst App = () =&gt; {\n   return (\n      &lt;PickerExample /&gt;\n   )\n}\nexport default App\n</pre>\n<h2>Step 2: Logic</h2>\n<p><b>this.state.user</b> is used for picker control.</p>\n<p>The <b>updateUser</b> function will be triggered when a user is picked.</p>\n<h3>PickerExample.js</h3>\n<!--<img src=\"/react_native/images/react-native-picker.jpg\" alt=\"React Native Picker\" />-->\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react';\nimport { View, Text, Picker, StyleSheet } from 'react-native'\n\nclass PickerExample extends Component {\n   state = {user: ''}\n   updateUser = (user) =&gt; {\n      this.setState({ user: user })\n   }\n   render() {\n      return (\n         &lt;View&gt;\n            &lt;Picker selectedValue = {this.state.user} onValueChange = {this.updateUser}&gt;\n               &lt;Picker.Item label = \"Steve\" value = \"steve\" /&gt;\n               &lt;Picker.Item label = \"Ellen\" value = \"ellen\" /&gt;\n               &lt;Picker.Item label = \"Maria\" value = \"maria\" /&gt;\n            &lt;/Picker&gt;\n            &lt;Text style = {styles.text}&gt;{this.state.user}&lt;/Text&gt;\n         &lt;/View&gt;\n      )\n   }\n}\nexport default PickerExample\n\nconst styles = StyleSheet.create({\n   text: {\n      fontSize: 30,\n      alignSelf: 'center',\n      color: 'red'\n   }\n})\n</pre>\n<h3>Output</h3>\n<img alt=\"React Native Picker\" src=\"/react_native/images/react_native_picker.jpg\"/>\n<p>If you click on the name it prompts you all three options as \u2212</p>\n<img alt=\"React Native Picker\" src=\"/react_native/images/reactnative_picker.jpg\"/>\n<p>And you can pick one of them and the output will be like.</p>\n<img alt=\"React Native Picker\" src=\"/react_native/images/reactnativepicker.jpg\"/>\n<h1>React Native - Status Bar</h1>\n<p>In this chapter, we will show you how to control the status bar appearance in React Native.</p>\n<p>The Status bar is easy to use and all you need to do is set properties to change it.</p>\n<p>The <b>hidden</b> property can be used to hide the status bar. In our example it is set to <b>false</b>. This is default value.</p>\n<p>The <b>barStyle</b> can have three values \u2013 <b>dark-content, light-content</b> and <b>default</b>.</p>\n<p>This component has several other properties that can be used. Some of them are Android or IOS specific. You can check it in official documentation.</p>\n<h2>App.js</h2>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react';\nimport { StatusBar } from 'react-native'\n\nconst App = () =&gt; {\n   return (\n      &lt;StatusBar barStyle = \"dark-content\" hidden = {false} backgroundColor = \"#00BCD4\" translucent = {true}/&gt;\n   )\n}\nexport default App\n</pre>\n<p>If we run the app, the status bar will be visible and content will have dark color.</p>\n<!--<img src=\"/react_native/images/react-native-status-bar.jpg\" alt=\"React Native Status Bar\" />\n<p></p>-->\n<h2>Output</h2>\n<img alt=\"React Native Status Bar\" src=\"/react_native/images/react_native_status_bar.jpg\"/>\n<h1>React Native - Switch</h1>\n<p>In this chapter, we will explain the <b>Switch</b> component in a couple of steps.</p>\n<h2>Step 1: Create File</h2>\n<p>We will use the <b>HomeContainer</b> component for logic, but we need to create the presentational component.</p>\n<p>Let us now create a new file: <b>SwitchExample.js</b>.</p>\n<h2>Step 2: Logic</h2>\n<p>We are passing value from the <b>state</b> and functions for toggling switch items to <b>SwitchExample</b> component. Toggle functions will be used for updating the state.</p>\n<h3>App.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { View } from 'react-native'\nimport SwitchExample from './switch_example.js'\n\nexport default class HomeContainer extends Component {\n   constructor() {\n      super();\n      this.state = {\n         switch1Value: false,\n      }\n   }\n   toggleSwitch1 = (value) =&gt; {\n      this.setState({switch1Value: value})\n      console.log('Switch 1 is: ' + value)\n   }\n   render() {\n      return (\n         &lt;View&gt;\n            &lt;SwitchExample\n            toggleSwitch1 = {this.toggleSwitch1}\n            switch1Value = {this.state.switch1Value}/&gt;\n         &lt;/View&gt;\n      );\n   }\n}\n</pre>\n<h2>Step 3: Presentation</h2>\n<p>Switch component takes two props. The <b>onValueChange</b> prop will trigger our toggle functions after a user presses the switch. The <b>value</b> prop is bound to the state of the <b>HomeContainer</b> component.</p>\n<h3>switch_example.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { View, Switch, StyleSheet }\n\nfrom 'react-native'\n\nexport default SwitchExample = (props) =&gt; {\n   return (\n      &lt;View style = {styles.container}&gt;\n         &lt;Switch\n         onValueChange = {props.toggleSwitch1}\n         value = {props.switch1Value}/&gt;\n      &lt;/View&gt;\n   )\n}\nconst styles = StyleSheet.create ({\n   container: {\n      flex: 1,\n      alignItems: 'center',\n      marginTop: 100\n   }\n})\n</pre>\n<p>If we press the switch, the state will be updated. You can check values in the console.</p>\n<!--<img src=\"/react_native/images/react-native-switch.jpg\" alt=\"React Native Switch\" />-->\n<h3>Output</h3>\n<img alt=\"React Native Switch\" src=\"/react_native/images/react_native_switch.jpg\"/>\n<h1>React Native - Text</h1>\n<p>In this chapter, we will talk about <b>Text</b> component in React Native.</p>\n<p>This component can be nested and it can inherit properties from parent to child. This can be useful in many ways. We will show you example of capitalizing the first letter, styling words or parts of the text, etc.</p>\n<h2>Step 1: Create File</h2>\n<p>The file we are going to create is <b>text_example.js</b></p>\n<h2>Step 2: App.js</h2>\n<p>In this step, we will just create a simple container.</p>\n<h3>App.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport TextExample from './text_example.js'\n\nconst App = () =&gt; {\n   return (\n      &lt;TextExample/&gt;\n   )\n}\nexport default App\n</pre>\n<h2>Step 3: Text</h2>\n<p>In this step, we will use the inheritance pattern. <b>styles.text</b> will be applied to all <b>Text</b> components.</p>\n<p>You can also notice how we set other styling properties to some parts of the text. It is important to know that all child elements have parent styles passed to them.</p>\n<h3>text_example.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react';\nimport { View, Text, Image, StyleSheet } from 'react-native'\n\nconst TextExample = () =&gt; {\n   return (\n      &lt;View style = {styles.container}&gt;\n         &lt;Text style = {styles.text}&gt;\n            &lt;Text style = {styles.capitalLetter}&gt;\n               L\n            &lt;/Text&gt;\n            \n            &lt;Text&gt;\n               orem ipsum dolor sit amet, sed do eiusmod.\n            &lt;/Text&gt;\n            \n            &lt;Text&gt;\n               Ut enim ad &lt;Text style = {styles.wordBold}&gt;minim &lt;/Text&gt; veniam,\n               quis aliquip ex ea commodo consequat.\n            &lt;/Text&gt;\n            \n            &lt;Text style = {styles.italicText}&gt;\n               Duis aute irure dolor in reprehenderit in voluptate velit esse cillum.\n            &lt;/Text&gt;\n            \n            &lt;Text style = {styles.textShadow}&gt;\n               Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia\n               deserunt mollit anim id est laborum.\n            &lt;/Text&gt;\n         &lt;/Text&gt;\n      \n      &lt;/View&gt;\n   )\n}\nexport default TextExample\n\nconst styles = StyleSheet.create ({\n   container: {\n      alignItems: 'center',\n      marginTop: 100,\n      padding: 20\n   },\n   text: {\n      color: '#41cdf4',\n   },\n   capitalLetter: {\n      color: 'red',\n      fontSize: 20\n   },\n   wordBold: {\n      fontWeight: 'bold',\n      color: 'black'\n   },\n   italicText: {\n      color: '#37859b',\n      fontStyle: 'italic'\n   },\n   textShadow: {\n      textShadowColor: 'red',\n      textShadowOffset: { width: 2, height: 2 },\n      textShadowRadius : 5\n   }\n})\n</pre>\n<p>You will receive the following output \u2212</p>\n<!--<img src=\"/react_native/images/react-native-text.jpg\" alt=\"React Native Text\" />-->\n<img alt=\"React Native Text\" src=\"/react_native/images/react_native_text.jpg\"/>\n<h1>React Native - Alert</h1>\n<p>In this chapter, we will understand how to create custom <b>Alert</b> component.</p>\n<h2>Step 1: App.js</h2>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react'\nimport AlertExample from './alert_example.js'\n\nconst App = () =&gt; {\n   return (\n      &lt;AlertExample /&gt;\n   )\n}\nexport default App\n</pre>\n<h2>Step 2: alert_example.js</h2>\n<p>We will create a button for triggering the <b>showAlert</b> function.</p>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react'\nimport { Alert, Text, TouchableOpacity, StyleSheet } from 'react-native'\n\nconst AlertExample = () =&gt; {\n   const showAlert = () =&gt;{\n      Alert.alert(\n         'You need to...'\n      )\n   }\n   return (\n      &lt;TouchableOpacity onPress = {showAlert} style = {styles.button}&gt;\n         &lt;Text&gt;Alert&lt;/Text&gt;\n      &lt;/TouchableOpacity&gt;\n   )\n}\nexport default AlertExample\n\nconst styles = StyleSheet.create ({\n   button: {\n      backgroundColor: '#4ba37b',\n      width: 100,\n      borderRadius: 50,\n      alignItems: 'center',\n      marginTop: 100\n   }\n})\n</pre>\n<!--<p></p>\n<img src=\"/react_native/images/react-native-alert.jpg\" alt=\"React Native Alert\" />-->\n<h3>Output</h3>\n<img alt=\"React Native Alert\" src=\"/react_native/images/react_native_alert.jpg\"/>\n<p>When you click the button, you will see the following \u2212</p>\n<img alt=\"React Native Alert Button\" src=\"/react_native/images/react_native_alert_button.jpg\"/>\n<h1>React Native - Geolocation</h1>\n<p>In this chapter, we will show you how to use <b>Geolocation</b>.</p>\n<h2>Step 1: App.js</h2>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react'\nimport GeolocationExample from './geolocation_example.js'\n\nconst App = () =&gt; {\n   return (\n      &lt;GeolocationExample /&gt;\n   )\n}\nexport default App\n</pre>\n<h2>Step 2: Geolocation</h2>\n<p>We will start by setting up the initial state for that will hold the initial and the last position.</p>\n<p>Now, we need to get current position of the device when a component is mounted using the <b>navigator.geolocation.getCurrentPosition</b>. We will stringify the response so we can update the state.</p>\n<p><b>navigator.geolocation.watchPosition</b> is used for tracking the users\u2019 position. We also clear the watchers in this step.</p>\n<h3>AsyncStorageExample.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { View, Text, Switch, StyleSheet} from 'react-native'\n\nclass SwichExample extends Component {\n   state = {\n      initialPosition: 'unknown',\n      lastPosition: 'unknown',\n   }\n   watchID: ?number = null;\n   componentDidMount = () =&gt; {\n      navigator.geolocation.getCurrentPosition(\n         (position) =&gt; {\n            const initialPosition = JSON.stringify(position);\n            this.setState({ initialPosition });\n         },\n         (error) =&gt; alert(error.message),\n         { enableHighAccuracy: true, timeout: 20000, maximumAge: 1000 }\n      );\n      this.watchID = navigator.geolocation.watchPosition((position) =&gt; {\n         const lastPosition = JSON.stringify(position);\n         this.setState({ lastPosition });\n      });\n   }\n   componentWillUnmount = () =&gt; {\n      navigator.geolocation.clearWatch(this.watchID);\n   }\n   render() {\n      return (\n         &lt;View style = {styles.container}&gt;\n            &lt;Text style = {styles.boldText}&gt;\n               Initial position:\n            &lt;/Text&gt;\n            \n            &lt;Text&gt;\n               {this.state.initialPosition}\n            &lt;/Text&gt;\n            \n            &lt;Text style = {styles.boldText}&gt;\n               Current position:\n            &lt;/Text&gt;\n            \n            &lt;Text&gt;\n               {this.state.lastPosition}\n            &lt;/Text&gt;\n         &lt;/View&gt;\n      )\n   }\n}\nexport default SwichExample\n\nconst styles = StyleSheet.create ({\n   container: {\n      flex: 1,\n      alignItems: 'center',\n      marginTop: 50\n   },\n   boldText: {\n      fontSize: 30,\n      color: 'red',\n   }\n})\n</pre>\n<!--<p></p>\n<img src=\"/react_native/images/react-native-geolocation.jpg\" alt=\"React Native Geolocation\" />-->\n<h1>React Native - AsyncStorage</h1>\n<p>In this chapter, we will show you how to persist your data using <b>AsyncStorage</b>.</p>\n<h2>Step 1: Presentation</h2>\n<p>In this step, we will create the <b>App.js</b> file.</p>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react'\nimport AsyncStorageExample from './async_storage_example.js'\n\nconst App = () =&gt; {\n   return (\n      &lt;AsyncStorageExample /&gt;\n   )\n}\nexport default App\n</pre>\n<h2>Step 2: Logic</h2>\n<p><b>Name</b> from the initial state is empty string. We will update it from persistent storage when the component is mounted.</p>\n<p><b>setName</b> will take the text from our input field, save it using <b>AsyncStorage</b> and update the state.</p>\n<h3>async_storage_example.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { StatusBar } from 'react-native'\nimport { AsyncStorage, Text, View, TextInput, StyleSheet } from 'react-native'\n\nclass AsyncStorageExample extends Component {\n   state = {\n      'name': ''\n   }\n   componentDidMount = () =&gt; AsyncStorage.getItem('name').then((value) =&gt; this.setState({ 'name': value }))\n   \n   setName = (value) =&gt; {\n      AsyncStorage.setItem('name', value);\n      this.setState({ 'name': value });\n   }\n   render() {\n      return (\n         &lt;View style = {styles.container}&gt;\n            &lt;TextInput style = {styles.textInput} autoCapitalize = 'none'\n            onChangeText = {this.setName}/&gt;\n            &lt;Text&gt;\n               {this.state.name}\n            &lt;/Text&gt;\n         &lt;/View&gt;\n      )\n   }\n}\nexport default AsyncStorageExample\n\nconst styles = StyleSheet.create ({\n   container: {\n      flex: 1,\n      alignItems: 'center',\n      marginTop: 50\n   },\n   textInput: {\n      margin: 5,\n      height: 100,\n      borderWidth: 1,\n      backgroundColor: '#7685ed'\n   }\n})\n</pre>\n<p>When we run the app, we can update the text by typing into the input field.</p>\n<!--<img src=\"/react_native/images/react-native-async-storage.jpg\" alt=\"React Native Async Storage\" />\n<p></p>\n<img src=\"/react_native/images/react-native-async-storage2.jpg\" alt=\"React Native Async Storage 2\" />\n<p></p>-->\n<img alt=\"React Native AsyncStorage\" src=\"/react_native/images/react_native_asyncstorage.jpg\"/>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/react_native/react_native_asyncstorage.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/react_native/react_native_useful_resources.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</img></div>", "html": "<!DOCTYPE doctype html>\n\n<!--[if lt IE 7 ]> <html lang=\"en\" class=\"no-js ie6\"> <![endif]-->\n<!--[if IE 7 ]> <html lang=\"en\" class=\"no-js ie7\"> <![endif]-->\n<!--[if IE 8 ]> <html lang=\"en\" class=\"no-js ie8\"> <![endif]-->\n<!--[if IE 9 ]> <html lang=\"en\" class=\"no-js ie9\"> <![endif]-->\n<!--[if (gt IE 9)|!(IE)]><!--><html lang=\"en\"><!--<![endif]-->\n<head>\n<meta charset=\"utf-8\"/>\n<title>React Native Quick Guide</title>\n<meta content=\"React Native Quick Guide - Learn React Native in simple and easy steps starting from basic to advanced concepts with examples including Overview, Environment Setup, App, State, Props, Styling, Flexbox, ListView, Text Input, ScrollView, MapView, Images, HTTP, Buttons, Touches, Animations, Debugging, Router, Navigation, Running IOS, Android, TouchableHighlight, TouchableOpacity, View, WebView, Modal, ActivityIndicator, Picker, Status Bar, Switch, Text, Alert, Geolocation, AsyncStorage, CameraRoll.\" name=\"description\">\n<meta content=\"React Native, Tutorial, Learning, Overview, Environment Setup, App, State, Props, Styling, Flexbox, ListView, Text Input, ScrollView, MapView, Images, HTTP, Buttons, Touches, Animations, Debugging, Router, Navigation, Running IOS, Android, TouchableHighlight, TouchableOpacity, View, WebView, Modal, ActivityIndicator, Picker, Status Bar, Switch, Text, Alert, Geolocation, AsyncStorage, CameraRoll.\" name=\"keywords\"/>\n<base href=\"https://www.tutorialspoint.com/\"/>\n<link href=\"/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"/>\n<meta content=\"width=device-width,initial-scale=1.0,user-scalable=yes\" name=\"viewport\"/>\n<meta content=\"en_US\" property=\"og:locale\">\n<meta content=\"website\" property=\"og:type\"/>\n<meta content=\"471319149685276\" property=\"fb:app_id\"/>\n<meta content=\"www.tutorialspoint.com\" property=\"og:site_name\"/>\n<meta content=\"yes\" name=\"apple-mobile-web-app-capable\"/>\n<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"/>\n<meta content=\"tutorialspoint.com\" name=\"author\"/>\n<script src=\"https://www.tutorialspoint.com/theme/js/script-min-v4.js?v=2\" type=\"text/javascript\"></script>\n<link href=\"https://www.tutorialspoint.com/theme/css/style-min.css?v=3.1\" rel=\"stylesheet\"/>\n<script>\r\nfunction openNav() {\t\r\n  document.getElementById(\"mySidenav\").style.width = \"250px\";\r\n  document.getElementById(\"right_obs\").style.display = \"block\";\r\n}\r\nfunction closeNav() {\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\nfunction close_obs_sidenav(){\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\n</script>\n<!-- Head Libs -->\n<!--[if IE 8]>\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/theme/css/ie8.css\">\r\n<![endif]-->\n<style>\r\n#privacy-banner {\r\n    position: fixed;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    max-width: 100%;\r\n    padding: 1rem .5rem;\r\n    background: #fff;\r\n    z-index: 1030;\r\n    color: #000;\r\n    font-size: 14px;\r\n    margin: 0;\r\n    display: none;\r\n    border-top: 2px solid rgb(130, 130, 130);\r\n  }\r\n  #privacy-banner p {\r\n    margin: 0;\r\n    color: #000;\r\n    text-align: center;\r\n  }\r\n  #privacy-banner a {\r\n    text-decoration: none;\r\n    margin: 20px auto 0 auto;\r\n    display: block;\r\n    max-width: 150px;\r\n  }\r\n  #privacy-banner a:hover {\r\n    text-decoration: underline;\r\n  }\r\n  #banner-learn {\r\n    color: #000;\r\n  }\r\n  #banner-accept {\r\n    padding: 7px 15px;\r\n    color: #fff;\r\n    border-radius: 5px;\r\n    background:#737373 !important;\r\n  }\r\n  @media (min-width: 768px) {\r\n    #privacy-banner {\r\n      padding: 1.5rem .5rem;\r\n    }\r\n    #privacy-banner a {\r\n      display: inline-block;\r\n      margin: 0 10px;\r\n    }\r\n}\r\nselect{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }\r\n.btnsbmt{ background: #3fb9da !important;}\r\nul.nav-list.primary>li a.videolink{    background: none; margin: 0px; padding: 0px; border: 1px solid #d6d6d6;}\r\ndiv.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #3fb9da url(/images/pattern.png) repeat center center !important;}\r\n.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #3fb9da !important;}\r\n.submenu-item{ border-bottom: 2px solid #3fb9da !important; border-top: 2px solid #3fb9da !important }\r\n.ace_scroller{overflow: auto!important;}\r\na.demo{font-family: \"Open Sans\",Arial,sans-serif; background:#3fb9da; color:#fff; font-size:13px; padding:3px 10px; border:1px solid #d6d6d6; position:absolute; right:5px; margin:-6px 17px 0px 0px;}\r\na.demo:hover{opacity:.8}\r\n</style>\n<script>\r\n$(document).ready(function() {\r\n  $('input[name=\"q\"]').keydown(function(event){\r\n    if(event.keyCode == 13) {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n  });\r\n});\r\n</script>\n</meta></meta></head>\n<body onload=\"prettyPrint()\">\n<div class=\"wrapLoader\">\n<div class=\"imgLoader\">\n<img alt=\"\" height=\"70\" src=\"/images/loading-cg.gif\" width=\"70\"/>\n</div>\n</div>\n<div class=\"display-none\" id=\"right_obs\" onclick=\"close_obs_sidenav()\"></div>\n<header>\n<div class=\"container\">\n<h1 class=\"logo\">\n<a href=\"index.htm\" title=\"tutorialspoint\">\n<img alt=\"tutorialspoint\" src=\"/react_native/images/logo.png\"/>\n</a>\n</h1>\n<ul class=\"tp-inline-block pull-right\" id=\"tp-head-icons\">\n<li>\n<div class=\"tp-second-nav tp-display-none tp-pointer\" onclick=\"openNav()\">\n<i class=\"fa fa-th-large fa-lg\"></i>\n</div>\n</li>\n</ul>\n<button class=\"btn btn-responsive-nav btn-inverse\" data-target=\".nav-main-collapse\" data-toggle=\"collapse\" id=\"pull\" style=\"top: 24px!important\"> <i class=\"icon icon-bars\"></i> </button>\n<nav>\n<ul class=\"nav nav-pills nav-top\">\n<li><a href=\"/about/about_careers.htm\" style=\"background: #fffb09; font-weight: bold;\"><i class=\"icon icon-suitcase\"></i> Jobs</a></li>\n<li> <a href=\"/programming_examples/\" target=\"_blank\"><i class=\"fa fa-cubes\"></i> \u00a0Examples</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/whiteboard.htm\"><img alt=\"Whiteboard\" src=\"theme/css/icons/image-editor.png\" title=\"Whiteboard\"/> \u00a0Whiteboard</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/netmeeting.php\"><i class=\"fa-camera\"></i> \u00a0Net Meeting</a> </li>\n<li> <a href=\"/online_dev_tools.htm\"> <i class=\"dev-tools-menu\" style=\"opacity:.5\"></i> Tools </a> </li>\n<li> <a href=\"/articles/index.php\"><i class=\"icon icon-file-text-o\"></i> \u00a0Articles</a> </li>\n<li class=\"top-icons\">\n<ul class=\"social-icons\">\n<li class=\"facebook\"><a data-placement=\"bottom\" href=\"https://www.facebook.com/tutorialspointindia\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Facebook\">Facebook</a></li>\n<li class=\"googleplus\"><a data-placement=\"bottom\" href=\"https://plus.google.com/u/0/116678774017490391259/posts\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Google+\">Google+</a></li>\n<li class=\"twitter\"><a data-placement=\"bottom\" href=\"https://www.twitter.com/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Twitter\">Twitter</a></li>\n<li class=\"linkedin\"><a data-placement=\"bottom\" href=\"https://www.linkedin.com/company/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Linkedin\">Linkedin</a></li>\n<li class=\"youtube\"><a data-placement=\"bottom\" href=\"https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint YouTube\">YouTube</a></li>\n</ul>\n</li>\n</ul>\n</nav>\n</div>\n<div class=\"sidenav\" id=\"mySidenav\">\n<div class=\"navbar nav-main\">\n<div class=\"container\">\n<nav class=\"nav-main mega-menu\">\n<ul class=\"nav nav-pills nav-main\" id=\"mainMenu\">\n<li class=\"dropdown no-sub-menu\"> <a class=\"dropdown\" href=\"index.htm\"><i class=\"icon icon-home\"></i> Home</a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"/questions/index.php\"><i class=\"fa fa-send\"></i> Q/A </a> </li>\n<li class=\"dropdown\"><a class=\"dropdown\" href=\"tutorialslibrary.htm\"><span class=\"tut-lib\"> Library </span></a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"videotutorials/index.htm\"><i class=\"fa-toggle-right\"></i> Videos </a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"tutor_connect/index.php\"><i class=\"fa-user\"> </i> Tutors</a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"codingground.htm\"><i class=\"fa-code\"></i> Coding Ground </a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"https://store.tutorialspoint.com/\"><i class=\"fa-usd\"></i> Store </a> </li>\n<li class=\"dropdown no-sub-menu\">\n<div class=\"searchform-popup\">\n<input autocomplete=\"off\" class=\"header-search-box\" id=\"search-string\" name=\"q\" onblur=\"if (this.value == '') {this.value = 'Search your favorite tutorials...';}\" onfocus=\"if (this.value == 'Search your favorite tutorials...') {this.value = '';}\" placeholder=\"Search your favorite tutorials...\" type=\"text\"/>\n<div class=\"magnifying-glass\"><i class=\"icon-search\"></i> Search </div>\n</div>\n</li>\n</ul>\n</nav>\n</div>\n</div>\n</div>\n</header></body></html>\n\n<div style=\"clear:both;\"></div>\n<div class=\"main\" role=\"main\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-2\">\n<aside class=\"sidebar\">\n<style>\r\n.ts {\r\n   text-align:center !important;\r\n   vertical-align:middle !important;\r\n}\r\n</style>\n<div class=\"mini-logo\">\n<img alt=\"React Native Tutorial\" src=\"/react_native/images/react-native-mini-logo.jpg\">\n</img></div>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">React Native Tutorial</li>\n<li><a href=\"/react_native/index.htm\">React Native - Home</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Core Concepts</li>\n<li><a href=\"/react_native/react_native_overview.htm\">React Native - Overview</a></li>\n<li><a href=\"/react_native/react_native_environment_setup.htm\">React Native - Environment Setup</a></li>\n<li><a href=\"/react_native/react_native_app.htm\">React Native - App</a></li>\n<li><a href=\"/react_native/react_native_state.htm\">React Native - State</a></li>\n<li><a href=\"/react_native/react_native_props.htm\">React Native - Props</a></li>\n<li><a href=\"/react_native/react_native_styling.htm\">React Native - Styling</a></li>\n<li><a href=\"/react_native/react_native_flexbox.htm\">React Native - Flexbox</a></li>\n<li><a href=\"/react_native/react_native_listview.htm\">React Native - ListView</a></li>\n<li><a href=\"/react_native/react_native_text_input.htm\">React Native - Text Input</a></li>\n<li><a href=\"/react_native/react_native_scrollview.htm\">React Native - ScrollView</a></li>\n<!--<li><a href=\"/react_native/react_native_mapview.htm\">React Native - MapView</a></li>-->\n<li><a href=\"/react_native/react_native_images.htm\">React Native - Images</a></li>\n<li><a href=\"/react_native/react_native_http.htm\">React Native - HTTP</a></li>\n<!--<li><a href=\"/react_native/react_native_touches.htm\">React Native - Touches</a></li>-->\n<li><a href=\"/react_native/react_native_buttons.htm\">React Native - Buttons</a></li>\n<li><a href=\"/react_native/react_native_animations.htm\">React Native - Animations</a></li>\n<li><a href=\"/react_native/react_native_debugging.htm\">React Native - Debugging</a></li>\n<!--<li><a href=\"/react_native/react_native_navigation.htm\">React Native - Navigation</a></li>-->\n<li><a href=\"/react_native/react_native_router.htm\">React Native - Router</a></li>\n<li><a href=\"/react_native/react_native_running_ios.htm\">React Native - Running IOS</a></li>\n<li><a href=\"/react_native/react_native_running_android.htm\">React Native - Running Android</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Components and APIs</li>\n<!--<li><a href=\"/react_native/react_native_touchablehighlight.htm\">React Native - TouchableHighlight</a></li>\r\n<li><a href=\"/react_native/react_native_touchableopacity.htm\">React Native - TouchableOpacity</a></li>-->\n<li><a href=\"/react_native/react_native_view.htm\">React Native - View</a></li>\n<li><a href=\"/react_native/react_native_webview.htm\">React Native - WebView</a></li>\n<li><a href=\"/react_native/react_native_modal.htm\">React Native - Modal</a></li>\n<li><a href=\"/react_native/react_native_activityindicator.htm\">React Native - ActivityIndicator</a></li>\n<li><a href=\"/react_native/react_native_picker.htm\">React Native - Picker</a></li>\n<li><a href=\"/react_native/react_native_status_bar.htm\">React Native - Status Bar</a></li>\n<li><a href=\"/react_native/react_native_switch.htm\">React Native - Switch</a></li>\n<li><a href=\"/react_native/react_native_text.htm\">React Native - Text</a></li>\n<li><a href=\"/react_native/react_native_alert.htm\">React Native - Alert</a></li>\n<li><a href=\"/react_native/react_native_geolocation.htm\">React Native - Geolocation</a></li>\n<li><a href=\"/react_native/react_native_asyncstorage.htm\">React Native - AsyncStorage</a></li>\n<!--<li><a href=\"/react_native/react_native_cameraroll.htm\">React Native - CameraRoll</a></li>-->\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">React Native Useful Resources</li>\n<li><a href=\"/react_native/react_native_quick_guide.htm\">React Native - Quick Guide</a></li>\n<li><a href=\"/react_native/react_native_useful_resources.htm\">React Native - Useful Resources</a></li>\n<li><a href=\"/react_native/react_native_discussion.htm\">React Native - Discussion</a></li>\n</ul>\n<ul class=\"nav nav-list primary push-bottom left-menu special\">\n<li class=\"sreading\">Selected Reading</li>\n<li><a href=\"/upsc_ias_exams.htm\" target=\"_top\">UPSC IAS Exams Notes</a></li>\n<li><a href=\"/developers_best_practices/index.htm\" target=\"_top\">Developer's Best Practices</a></li>\n<li><a href=\"/questions_and_answers.htm\" target=\"_top\">Questions and Answers</a></li>\n<li><a href=\"/effective_resume_writing.htm\" target=\"_top\">Effective Resume Writing</a></li>\n<li><a href=\"/hr_interview_questions/index.htm\" target=\"_top\">HR Interview Questions</a></li>\n<li><a href=\"/computer_glossary.htm\" target=\"_top\">Computer Glossary</a></li>\n<li><a href=\"/computer_whoiswho.htm\" target=\"_top\">Who is Who</a></li>\n</ul>\n</aside>\n</div>\n<!-- PRINTING STARTS HERE -->\n<div class=\"row\">\n<div class=\"content\">\n<div class=\"col-md-7 middle-col\">\n<h1>React Native - Quick Guide</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/react_native/react_native_asyncstorage.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/react_native/react_native_useful_resources.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<h1>React Native - Overview</h1>\n<p>For better understanding of React Native concepts, we will borrow a few lines from the official documentation \u2212</p>\n<p>React Native lets you build mobile apps using only JavaScript. It uses the same design as React, letting you compose a rich mobile UI from declarative components. With React Native, you don't build a mobile web app, an HTML5 app, or a hybrid app; you build a real mobile app that's indistinguishable from an app built using Objective-C or Java. React Native uses the same fundamental UI building blocks as regular iOS and Android apps. You just put those building blocks together using JavaScript and React.</p>\n<h2>React Native Features</h2>\n<p>Following are the features of React Native \u2212</p>\n<ul class=\"list\">\n<li><p><b>React</b> \u2212 This is a Framework for building web and mobile apps using JavaScript.</p></li>\n<li><p><b>Native</b> \u2212 You can use native components controlled by JavaScript.</p></li>\n<li><p><b>Platforms</b> \u2212 React Native supports IOS and Android platform.</p></li>\n</ul>\n<h2>React Native Advantages</h2>\n<p>Follow are the advantages of React Native \u2212</p>\n<ul class=\"list\">\n<li><p><b>JavaScript</b> \u2212 You can use the existing JavaScript knowledge to build native mobile apps.</p></li>\n<li><p><b>Code sharing</b> \u2212 You can share most of your code on different platforms.</p></li>\n<li><p><b>Community</b> \u2212 The community around React and React Native is large, and you will be able to find any answer you need.</p></li>\n</ul>\n<h2>React Native Limitations</h2>\n<p>Following are the limitations of React Native \u2212</p>\n<ul class=\"list\">\n<li><p><b>Native Components</b> \u2212 If you want to create native functionality which is not created yet, you will need to write some platform specific code.</p></li>\n</ul>\n<h1>React Native - Environment Setup</h1>\n<p>There are a couple of things you need to install to set up the environment for React Native. We will use OSX as our building platform.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No.</th>\n<th style=\"width:25%; text-align:center;\">Software</th>\n<th style=\"text-align:center;\">Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td class=\"ts\">NodeJS and NPM</td>\n<td>You can follow our <a href=\"/nodejs/nodejs_environment_setup.htm\">NodeJS Environment Setup</a> tutorial to install NodeJS.</td>\n</tr>\n</table>\n<h2>Step 1: Install create-react-native-app</h2>\n<p>After installing NodeJS and NPM successfully in your system you can proceed with installation of create-react-native-app (globally as shown below).</p>\n<pre class=\"result notranslate\">\nC:\\Users\\Tutorialspoint&gt; npm install -g create-react-native-app\n</pre>\n<h2>Step 2: Create project</h2>\n<p>Browse through required folder and create a new react native project as shown below.</p>\n<pre class=\"result notranslate\">\nC:\\Users\\Tutorialspoint&gt;cd Desktop\nC:\\Users\\Tutorialspoint\\Desktop&gt;create-react-native-app MyReactNative\n</pre>\n<p>After executing the above command, a folder with specifies name is created with the following contents.</p>\n<img alt=\"Environment Project\" src=\"/react_native/images/environment_project.jpg\">\n<h2>Step 3: NodeJS Python Jdk8</h2>\n<p>Make sure you have Python NodeJS and jdk8 installed in your system if not, install them. In addition to these it is recommended to install latest version of yarn to avoid certain issues.</p>\n<h2>Step 4: Install React Native CLI</h2>\n<p>You can install react native command line interface on npm, using the install -g react-native-cli command as shown below.</p>\n<pre class=\"result notranslate\">\nnpm install -g react-native-cli\n</pre>\n<p></p>\n<img alt=\"Environment Commandline\" src=\"/react_native/images/environment_commandline.jpg\"/>\n<h2>Step 5: Start react native</h2>\n<p>To verify the installation browse through the project folder and try starting the project using the start command.</p>\n<pre class=\"result notranslate\">\nC:\\Users\\Tutorialspoint\\Desktop&gt;cd MyReactNative\nC:\\Users\\Tutorialspoint\\Desktop\\MyReactNative&gt;npm start\n</pre>\n<p>If everything went well you will get a QR code as shown below.</p>\n<img alt=\"Environment Package installer\" src=\"/react_native/images/environment_package_installer.jpg\"/>\n<p>As instructed, one way to run react native apps on your android devise is to using expo. Install expo client in your android devise and scan the above obtained QR code.</p>\n<h2>Step 6: Eject the project</h2>\n<p>If you want to run android emulator using android studio, come out of the current command line by pressing <b>ctrl+c</b>.</p>\n<p>Then, execute run <b>eject command</b> as</p>\n<pre class=\"result notranslate\">\nnpm run eject\n</pre>\n<p>This prompts you options to eject, select the first one using arrows and press enter.</p>\n<img alt=\"Environment Eject Command\" src=\"/react_native/images/environment_eject_command.jpg\"/>\n<p>Then, you should suggest the name of the app on home screen and project name of the Android studio and Xcode projects.</p>\n<img alt=\"Environment Eject Command Questions\" src=\"/react_native/images/environment_eject_command_questions.jpg\"/>\n<p>Though your project ejected successfully, you may get an error as \u2212</p>\n<img alt=\"Environment Eject Error\" src=\"/react_native/images/environment_eject_error.jpg\"/>\n<p>Ignore this error and run react native for android using the following command \u2212</p>\n<pre class=\"result notranslate\">\nreact-native run-android\n</pre>\n<p>But, before that you need to install android studio.</p>\n<h2>Step 7: Installing Android Studio</h2>\n<p>Visit the web page <a href=\"https://developer.android.com/studio/\" rel=\"nofollow\" target=\"_blank\">https://developer.android.com/studio/</a> and download android studio.</p>\n<img alt=\"Environment Android Studio\" src=\"/react_native/images/environment_android_studio.jpg\"/>\n<p>After downloading the installation file of it, double click on it and proceed with the installation.</p>\n<img alt=\"Environment Android Studio3\" src=\"/react_native/images/environment_android_studio3.jpg\"/>\n<h2>Step 8: Configuring AVD Manager</h2>\n<p>To configure the AVD Manager click on the respective icon in the menu bar.</p>\n<img alt=\"Configuring AVD Manager\" src=\"/react_native/images/configuring_avd_manager.jpg\"/>\n<h2>Step 9: Configuring AVD Manager</h2>\n<p>Choose a device definition, Nexus 5X is suggestable.</p>\n<img alt=\"Choose Device Definition\" src=\"/react_native/images/choose_device_definition.jpg\"/>\n<p>Click on the Next button you will see a System Image window. Select the <b>x86 Images</b> tab.</p>\n<img alt=\"System Image\" src=\"/react_native/images/system_image.jpg\"/>\n<p>Then, select Marshmallow and click on next.</p>\n<img alt=\"Select System Image\" src=\"/react_native/images/select_system_image.jpg\"/>\n<p>Finally, click on the Finish button to finish the AVD configuration.</p>\n<img alt=\"Verify Configuration\" src=\"/react_native/images/verify_configuration.jpg\"/>\n<p>After configuring your virtual device click on the play button under the Actions column to start your android emulator.</p>\n<img alt=\"Your Virtual Devices\" src=\"/react_native/images/your_virtual_devices.jpg\"/>\n<h2>Step 10: Running android</h2>\n<p>Open command prompt, browse through your project folder and, execute the <b>react-native run-android</b> command.</p>\n<img alt=\"Running Android\" src=\"/react_native/images/running_android.jpg\"/>\n<p>Then, your app execution begins in another prompt you can see its status.</p>\n<img alt=\"Execution Status\" src=\"/react_native/images/execution_status.jpg\"/>\n<p>In your android emulator you can see the execution of the default app as \u2212</p>\n<img alt=\"React Native Default App\" src=\"/react_native/images/react_native_default_app.jpg\"/>\n<h2>Step 11: local.properties</h2>\n<p>Open the <b>android</b> folder in your project folder <b><i>SampleReactNative/android</i></b> (in this case). Create a file with named <b>local.properties</b> and add the following path in it.</p>\n<pre class=\"result notranslate\">\nsdk.dir = /C:\\\\Users\\\\Tutorialspoint\\\\AppData\\\\Local\\\\Android\\\\Sdk\n</pre>\n<p>here, replace <b>Tutorialspoint</b> with your user name.</p>\n<h2>Step 12: Hot Reloading</h2>\n<p>And to build application modify the App.js and the changes will be automatically updated on the android emulator.</p>\n<p>If not, click on the android emulator press <b>ctrl+m</b> then, select <b>Enable Hot Reloading</b> option.</p>\n<img alt=\"Environment Hot Reloading\" src=\"/react_native/images/environment_hot_reloading.jpg\"/>\n<h1>React Native - App</h1>\n<p>If you open the default app you can observe that the app.js file looks like</p>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default class App extends React.Component {\n   render() {\n      return (\n         &lt;View style = {styles.container}&gt;\n            &lt;Text&gt;Open up App.js to start working on your app!&lt;/Text&gt;\n            &lt;Text&gt;Changes you make will automatically reload.&lt;/Text&gt;\n            &lt;Text&gt;Shake your phone to open the developer menu.&lt;/Text&gt;\n         &lt;/View&gt;\n      );\n   }\n}\n\nconst styles = StyleSheet.create({\n   container: {\n      flex: 1,\n      backgroundColor: '#fff',\n      alignItems: 'center',\n      justifyContent: 'center',\n   },\n});\n</pre>\n<h3>Output</h3>\n<img alt=\"Working on App\" src=\"/react_native/images/working_on_app.jpg\"/>\n<h2>Hello world</h2>\n<p>To display a simple message saying \u201cWelcome to Tutorialspoint\u201d remove the CSS part and insert the message to be printed wrapped by the &lt;text&gt;&lt;/text&gt; tags inside &lt;view&gt;&lt;/view&gt; as shown below.</p>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default class App extends React.Component {\n   render() {\n      return (\n         &lt;View&gt;\n            &lt;Text&gt;Welcome to Tutorialspoint&lt;/Text&gt;\n         &lt;/View&gt;\n      );\n   }\n}\n</pre>\n<img alt=\"Hello World\" src=\"/react_native/images/hello_world.jpg\"/>\n<h1>React Native - State</h1>\n<p>The data inside React Components is managed by <b>state</b> and <b>props</b>. In this chapter, we will talk about <b>state</b>.</p>\n<h2>Difference between State and Props</h2>\n<p>The <b>state</b> is mutable while <b>props</b> are immutable. This means that <b>state</b> can be updated in the future while props cannot be updated.</p>\n<h3>Using State</h3>\n<p>This is our root component. We are just importing <b>Home</b> which will be used in most of the chapters.</p>\n<p><b>App.js</b></p>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default class App extends React.Component {\n   state = {\n      myState: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, used do eiusmod\n      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis\n      nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n      Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu\n      fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n      culpa qui officia deserunt mollit anim id est laborum.'\n   }\n   render() {\n      return (\n      &lt;View&gt;\n         &lt;Text&gt; {this.state.myState} &lt;/Text&gt;\n      &lt;/View&gt;\n      );\n   }\n}\n</pre>\n<p>We can see in emulator text from the state as in the following screenshot.</p>\n<img alt=\"React Native State\" src=\"/react_native/images/react_native_state.jpg\"/>\n<h3>Updating State</h3>\n<p>Since state is mutable, we can update it by creating the <b>deleteState</b> function and call it using the <b>onPress = {this.deleteText}</b> event.</p>\n<p><b>Home.js</b></p>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { Text, View } from 'react-native'\n\nclass Home extends Component {\n   state = {\n      myState: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed \n         do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n         Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi\n         ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit \n         in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n         Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia\n         deserunt mollit anim id est laborum.'\n   }\n   updateState = () \u21d2 this.setState({ myState: 'The state is updated' })\n   render() {\n      return (\n         &lt;View&gt;\n            &lt;Text onPress = {this.updateState}&gt;\n               {this.state.myState}\n            &lt;/Text&gt;\n         &lt;/View&gt;\n      );\n   }\n}\nexport default Home;\n</pre>\n<p><b>NOTES</b> \u2212 In all chapters, we will use the class syntax for stateful (container) components and function syntax for stateless (presentational) components. We will learn more about components in the next chapter.</p>\n<p>We will also learn how to use the arrow function syntax for <b>updateState</b>. You should keep in mind that this syntax uses the lexical scope, and <b>this</b> keyword will be bound to the environment object (Class). This will sometimes lead to unexpected behavior.</p>\n<p>The other way to define methods is to use the EC5 functions but in that case we will need to bind <b>this</b> manually in the constructor. Consider the following example to understand this.</p>\n<pre class=\"prettyprint notranslate\">\nclass Home extends Component {\n   constructor() {\n      super()\n      this.updateState = this.updateState.bind(this)\n   }\n   updateState() {\n      //\n   }\n   render() {\n      //\n   }\n}\n</pre>\n<h1>React Native - Props</h1>\n<p>In our last chapter, we showed you how to use mutable <b>state</b>. In this chapter, we will show you how to combine the state and the <b>props</b>.</p>\n<p>Presentational components should get all data by passing <b>props</b>. Only container components should have <b>state</b>.</p>\n<h2>Container Component</h2>\n<p>We will now understand what a container component is and also how it works.</p>\n<h3>Theory</h3>\n<p>Now we will update our container component. This component will handle the state and pass the props to the presentational component.</p>\n<p>Container component is only used for handling state. All functionality related to view(styling etc.) will be handled in the presentational component.</p>\n<h3>Example</h3>\n<p>If we want to use example from the last chapter we need to remove the <b>Text</b> element from the render function since this element is used for presenting text to the users. This should be inside the presentational component.</p>\n<p>Let us review the code in the example given below. We will import the <b>PresentationalComponent</b> and pass it to the render function.</p>\n<p>After we import the <b>PresentationalComponent</b> and pass it to the render function, we need to pass the props. We will pass the props by adding <b>myText = {this.state.myText}</b> and <b>deleteText = {this.deleteText}</b> to <b>&lt;PresentationalComponent&gt;</b>. Now, we will be able to access this inside the presentational component.</p>\n<p><b>App.js</b></p>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport PresentationalComponent from './PresentationalComponent'\n\nexport default class App extends React.Component {\n   state = {\n      myState: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, used do eiusmod\n      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis\n      nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis\n      aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat\n      nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui\n      officia deserunt mollit anim id est laborum.'\n   }\n   updateState = () =&gt; {\n      this.setState({ myState: 'The state is updated' })\n   }\n   render() {\n      return (\n         &lt;View&gt;\n            &lt;PresentationalComponent myState = {this.state.myState} updateState = {this.updateState}/&gt;\n         &lt;/View&gt;\n      );\n   }\n}\n</pre>\n<h2>Presentational Component</h2>\n<p>We will now understand what a presentational component is and also how it works.</p>\n<h3>Theory</h3>\n<p>Presentational components should be used only for presenting view to the users. These components do not have state. They receive all data and functions as props.</p>\n<p>The best practice is to use as much presentational components as possible.</p>\n<h3>Example</h3>\n<p>As we mentioned in our previous chapter, we are using the EC6 function syntax for presentational components.</p>\n<p>Our component will receive props, return view elements, present text using <b>{props.myText}</b> and call the <b>{props.deleteText}</b> function when a user clicks on the text.</p>\n<p><b>PresentationalComponent.js</b></p>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { Text, View } from 'react-native'\n\nconst PresentationalComponent = (props) =&gt; {\n   return (\n      &lt;View&gt;\n         &lt;Text onPress = {props.updateState}&gt;\n            {props.myState}\n         &lt;/Text&gt;\n      &lt;/View&gt;\n   )\n}\nexport default PresentationalComponent\n</pre>\n<p>Now, we have the same functionality as in our <b>State</b> chapter. The only difference is that we refactored our code to the container and the presentational component.</p>\n<p>You can run the app and see the text as in the following screenshot.</p>\n<img alt=\"React Native Props\" src=\"/react_native/images/reactnative_props.jpg\"/>\n<p>If you click on text, it will be removed from the screen.</p>\n<img alt=\"React Native Props updated\" src=\"/react_native/images/reactnative_props_updated.jpg\"/>\n<h1>React Native - Styling</h1>\n<p>There are a couple of ways to style your elements in React Native.</p>\n<p>You can use the <b>style</b> property to add the styles inline. However, this is not the best practice because it can be hard to read the code.</p>\n<p>In this chapter, we will use the <b>Stylesheet</b> for styling.</p>\n<h2>Container Component</h2>\n<p>In this section, we will simplify our container component from our previous chapter.</p>\n<p><b>App.js</b></p>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport PresentationalComponent from './PresentationalComponent'\n\nexport default class App extends React.Component {\n   state = {\n      myState: 'This is my state'\n   }\n   render() {\n      return (\n         &lt;View&gt;\n            &lt;PresentationalComponent myState = {this.state.myState}/&gt;\n         &lt;/View&gt;\n      );\n   }\n}\n</pre>\n<h2>Presentational Component</h2>\n<p>In the following example, we will import the <b>StyleSheet</b>. At the bottom of the file, we will create our stylesheet and assign it to the <b>styles</b> constant. Note that our styles are in <b>camelCase</b> and we do not use <b>px</b> or % for styling.</p>\n<p>To apply styles to our text, we need to add <b>style = {styles.myText}</b> property to the <b>Text</b> element.</p>\n<p><b>PresentationalComponent.js</b></p>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { Text, View, StyleSheet } from 'react-native'\n\nconst PresentationalComponent = (props) =&gt; {\n   return (\n      &lt;View&gt;\n         &lt;Text style = {styles.myState}&gt;\n            {props.myState}\n         &lt;/Text&gt;\n      &lt;/View&gt;\n   )\n}\nexport default PresentationalComponent\n\nconst styles = StyleSheet.create ({\n   myState: {\n      marginTop: 20,\n      textAlign: 'center',\n      color: 'blue',\n      fontWeight: 'bold',\n      fontSize: 20\n   }\n})\n</pre>\n<p>When we run the app, we will receive the following output.</p>\n<!--<img src=\"/react_native/images/react-native-styling.jpg\" alt=\"React Native Styling\" />\n<p></p>-->\n<h1>React Native - Flexbox</h1>\n<p>To accommodate different screen sizes, React Native offers <b>Flexbox</b> support.</p>\n<p>We will use the same code that we used in our <b>React Native - Styling</b> chapter. We will only change the <b>PresentationalComponent</b>.</p>\n<h2>Layout</h2>\n<p>To achieve the desired layout, flexbox offers three main properties \u2212 <b>flexDirection justifyContent</b> and <b>alignItems</b>.</p>\n<p>The following table shows the possible options.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center\">Property</th>\n<th style=\"text-align:center\">Values</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n<tr>\n<td style=\"vertical-align:middle;\">flexDirection</td>\n<td style=\"vertical-align:middle;\">'column', 'row'</td>\n<td>Used to specify if elements will be aligned vertically or horizontally.</td>\n</tr>\n<tr>\n<td style=\"vertical-align:middle;\">justifyContent</td>\n<td>'center', 'flex-start', 'flex-end', 'space-around', 'space-between'</td>\n<td style=\"vertical-align:middle;\">Used to determine how should elements be distributed inside the container.</td>\n</tr>\n<tr>\n<td style=\"vertical-align:middle;\">alignItems</td>\n<td>'center', 'flex-start', 'flex-end', 'stretched'</td>\n<td>Used to determine how should elements be distributed inside the container along the secondary axis (opposite of flexDirection)</td>\n</tr>\n</table>\n<p>If you want to align the items vertically and centralize them, then you can use the following code.</p>\n<p><b>App.js</b></p>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { View, StyleSheet } from 'react-native'\n\nconst Home = (props) =&gt; {\n   return (\n      &lt;View style = {styles.container}&gt;\n         &lt;View style = {styles.redbox} /&gt;\n         &lt;View style = {styles.bluebox} /&gt;\n         &lt;View style = {styles.blackbox} /&gt;\n      &lt;/View&gt;\n   )\n}\n\nexport default Home\n\nconst styles = StyleSheet.create ({\n   container: {\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n      backgroundColor: 'grey',\n      height: 600\n   },\n   redbox: {\n      width: 100,\n      height: 100,\n      backgroundColor: 'red'\n   },\n   bluebox: {\n      width: 100,\n      height: 100,\n      backgroundColor: 'blue'\n   },\n   blackbox: {\n      width: 100,\n      height: 100,\n      backgroundColor: 'black'\n   },\n})\n</pre>\n<p><b>Output</b></p>\n<img alt=\"React Native Flexbox Center\" src=\"/react_native/images/react-native-flexbox-center.jpg\"/>\n<p>If the items need to be moved to the right side and spaces need to be added between them, then we can use the following code.</p>\n<p><b>App.js</b></p>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { View, StyleSheet } from 'react-native'\n\nconst App = (props) =&gt; {\n   return (\n      &lt;View style = {styles.container}&gt;\n         &lt;View style = {styles.redbox} /&gt;\n         &lt;View style = {styles.bluebox} /&gt;\n         &lt;View style = {styles.blackbox} /&gt;\n      &lt;/View&gt;\n   )\n}\n\nexport default App\n\nconst styles = StyleSheet.create ({\n   container: {\n      flexDirection: 'column',\n      justifyContent: 'space-between',\n      alignItems: 'flex-end',\n      backgroundColor: 'grey',\n      height: 600\n   },\n   redbox: {\n      width: 100,\n      height: 100,\n      backgroundColor: 'red'\n   },\n   bluebox: {\n      width: 100,\n      height: 100,\n      backgroundColor: 'blue'\n   },\n   blackbox: {\n      width: 100,\n      height: 100,\n      backgroundColor: 'black'\n   },\n})\n</pre>\n<p></p>\n<img alt=\"React Native Flexbox Right\" src=\"/react_native/images/react-native-flexbox-right.jpg\"/>\n<!--<img src=\"/react_native/images/react-native-flexbox-right.jpg\" alt=\"React Native Flexbox Right\" />\n<p></p>\n<img src=\"/react_native/images/react-native-flexbox-black-yellow.jpg\" alt=\"React Native Flexbox Black Yellow\" />-->\n<h1>React Native - ListView</h1>\n<p>In this chapter, we will show you how to create a list in React Native. We will import <b>List</b> in our <b>Home</b> component and show it on screen.</p>\n<p><b>App.js</b></p>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react'\nimport List from './List.js'\n\nconst App = () =&gt; {\n   return (\n      &lt;List /&gt;\n   )\n}\nexport default App\n</pre>\n<p>To create a list, we will use the <b>map()</b> method. This will iterate over an array of items, and render each one.</p>\n<p><b>List.js</b></p>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { Text, View, TouchableOpacity, StyleSheet } from 'react-native'\n   \nclass List extends Component {\n   state = {\n      names: [\n         {\n            id: 0,\n            name: 'Ben',\n         },\n         {\n            id: 1,\n            name: 'Susan',\n         },\n         {\n            id: 2,\n            name: 'Robert',\n         },\n         {\n            id: 3,\n            name: 'Mary',\n         }\n      ]\n   }\n   alertItemName = (item) =&gt; {\n      alert(item.name)\n   }\n   render() {\n      return (\n         &lt;View&gt;\n            {\n               this.state.names.map((item, index) =&gt; (\n                  &lt;TouchableOpacity\n                     key = {item.id}\n                     style = {styles.container}\n                     onPress = {() =&gt; this.alertItemName(item)}&gt;\n                     &lt;Text style = {styles.text}&gt;\n                        {item.name}\n                     &lt;/Text&gt;\n                  &lt;/TouchableOpacity&gt;\n               ))\n            }\n         &lt;/View&gt;\n      )\n   }\n}\nexport default List\n\nconst styles = StyleSheet.create ({\n   container: {\n      padding: 10,\n      marginTop: 3,\n      backgroundColor: '#d9f9b1',\n      alignItems: 'center',\n   },\n   text: {\n      color: '#4f603c'\n   }\n})\n</pre>\n<p>When we run the app, we will see the list of names.</p>\n<!--<img src=\"/react_native/images/react_native_listview.jpg\" alt=\"React Native ListView\" />-->\n<p></p>\n<!--<img src=\"/react_native/images/react_native_alert_box.jpg\" alt=\"React Native Alert Box\" />-->\n<p></p>\n<img alt=\"ListView\" src=\"/react_native/images/list_view.jpg\"/>\n<p>You can click on each item in the list to trigger an alert with the name.</p>\n<img alt=\"React Native ListView\" src=\"/react_native/images/react_native_list_view.jpg\"/>\n<h1>React Native - Text Input</h1>\n<p>In this chapter, we will show you how to work with <b>TextInput</b> elements in React Native.</p>\n<p>The Home component will import and render inputs.</p>\n<h2>App.js</h2>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react';\nimport Inputs from './inputs.js'\n\nconst App = () =&gt; {\n   return (\n      &lt;Inputs /&gt;\n   )\n}\nexport default App\n</pre>\n<h2>Inputs</h2>\n<p>We will define the initial state.</p>\n<p>After defining the initial state, we will create the <b>handleEmail</b> and the <b>handlePassword</b> functions. These functions are used for updating state.</p>\n<p>The <b>login()</b> function will just alert the current value of the state.</p>\n<p>We will also add some other properties to text inputs to disable auto capitalisation, remove the bottom border on Android devices and set a placeholder.</p>\n<h2>inputs.js</h2>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { View, Text, TouchableOpacity, TextInput, StyleSheet } from 'react-native'\n\nclass Inputs extends Component {\n   state = {\n      email: '',\n      password: ''\n   }\n   handleEmail = (text) =&gt; {\n      this.setState({ email: text })\n   }\n   handlePassword = (text) =&gt; {\n      this.setState({ password: text })\n   }\n   login = (email, pass) =&gt; {\n      alert('email: ' + email + ' password: ' + pass)\n   }\n   render() {\n      return (\n         &lt;View style = {styles.container}&gt;\n            &lt;TextInput style = {styles.input}\n               underlineColorAndroid = \"transparent\"\n               placeholder = \"Email\"\n               placeholderTextColor = \"#9a73ef\"\n               autoCapitalize = \"none\"\n               onChangeText = {this.handleEmail}/&gt;\n            \n            &lt;TextInput style = {styles.input}\n               underlineColorAndroid = \"transparent\"\n               placeholder = \"Password\"\n               placeholderTextColor = \"#9a73ef\"\n               autoCapitalize = \"none\"\n               onChangeText = {this.handlePassword}/&gt;\n            \n            &lt;TouchableOpacity\n               style = {styles.submitButton}\n               onPress = {\n                  () =&gt; this.login(this.state.email, this.state.password)\n               }&gt;\n               &lt;Text style = {styles.submitButtonText}&gt; Submit &lt;/Text&gt;\n            &lt;/TouchableOpacity&gt;\n         &lt;/View&gt;\n      )\n   }\n}\nexport default Inputs\n\nconst styles = StyleSheet.create({\n   container: {\n      paddingTop: 23\n   },\n   input: {\n      margin: 15,\n      height: 40,\n      borderColor: '#7a42f4',\n      borderWidth: 1\n   },\n   submitButton: {\n      backgroundColor: '#7a42f4',\n      padding: 10,\n      margin: 15,\n      height: 40,\n   },\n   submitButtonText:{\n      color: 'white'\n   }\n})\n</pre>\n<p>Whenever we type in one of the input fields, the state will be updated. When we click on the <b>Submit</b> button, text from inputs will be shown inside the dialog box.</p>\n<!--<img src=\"/react_native/images/react-native-text-input.jpg\" alt=\"React Native Text Input\" />\n<p></p>-->\n<img alt=\"React Native Text Input\" src=\"/react_native/images/reactnative_text_input.jpg\"/>\n<p>Whenever we type in one of the input fields, the state will be updated. When we click on the <b>Submit</b> button, text from inputs will be shown inside the dialog box.</p>\n<img alt=\"React Native Text Input\" src=\"/react_native/images/react-native-text-input.jpg\"/>\n<h1>React Native - ScrollView</h1>\n<p>In this chapter, we will show you how to work with the <b>ScrollView</b> element.</p>\n<p>We will again create <b>ScrollViewExample.js</b> and import it in <b>Home</b>.</p>\n<h2>App.js</h2>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react';\nimport ScrollViewExample from './scroll_view.js';\n\nconst App = () =&gt; {\n   return (\n      &lt;ScrollViewExample /&gt;\n   )\n}\n</pre>\n<p>Scrollview will render a list of names. We will create it in state.</p>\n<h2>ScrollView.js</h2>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react';\nimport { Text, Image, View, StyleSheet, ScrollView } from 'react-native';\n\nclass ScrollViewExample extends Component {\n   state = {\n      names: [\n         {'name': 'Ben', 'id': 1},\n         {'name': 'Susan', 'id': 2},\n         {'name': 'Robert', 'id': 3},\n         {'name': 'Mary', 'id': 4},\n         {'name': 'Daniel', 'id': 5},\n         {'name': 'Laura', 'id': 6},\n         {'name': 'John', 'id': 7},\n         {'name': 'Debra', 'id': 8},\n         {'name': 'Aron', 'id': 9},\n         {'name': 'Ann', 'id': 10},\n         {'name': 'Steve', 'id': 11},\n         {'name': 'Olivia', 'id': 12}\n      ]\n   }\n   render() {\n      return (\n         &lt;View&gt;\n            &lt;ScrollView&gt;\n               {\n                  this.state.names.map((item, index) =&gt; (\n                     &lt;View key = {item.id} style = {styles.item}&gt;\n                        &lt;Text&gt;{item.name}&lt;/Text&gt;\n                     &lt;/View&gt;\n                  ))\n               }\n            &lt;/ScrollView&gt;\n         &lt;/View&gt;\n      )\n   }\n}\nexport default ScrollViewExample\n\nconst styles = StyleSheet.create ({\n   item: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      padding: 30,\n      margin: 2,\n      borderColor: '#2a4944',\n      borderWidth: 1,\n      backgroundColor: '#d2f7f1'\n   }\n})\n</pre>\n<p>When we run the app, we will see the scrollable list of names.</p>\n<!--<img src=\"/react_native/images/react-native-scroll-view.jpg\" alt=\"React Native ScrollView\" />\n<p></p>-->\n<h1>React Native - Images</h1>\n<p>In this chapter, we will understand how to work with images in React Native.</p>\n<h2>Adding Image</h2>\n<p>Let us create a new folder <b>img</b> inside the <b>src</b> folder. We will add our image (<b>myImage.png</b>) inside this folder.</p>\n<p>We will show images on the home screen.</p>\n<h3>App.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react';\nimport ImagesExample from './ImagesExample.js'\n\nconst App = () =&gt; {\n   return (\n      &lt;ImagesExample /&gt;\n   )\n}\nexport default App\n</pre>\n<p>Local image can be accessed using the following syntax.</p>\n<!--<img src=\"/react_native/images/react-native-network-image.jpg\" alt=\"React Native Images\" />-->\n<h3>image_example.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { Image } from 'react-native'\n\nconst ImagesExample = () =&gt; (\n   &lt;Image source = {require('C:/Users/Tutorialspoint/Desktop/NativeReactSample/logo.png')} /&gt;\n)\nexport default ImagesExample\n</pre>\n<h3>Output</h3>\n<img alt=\"React Native Images\" src=\"/react_native/images/react_native_images.jpg\"/>\n<h2>Screen Density</h2>\n<p>React Native offers a way to optimize images for different devices using <b>@2x, @3x</b> suffix. The app will load only the image necessary for particular screen density.</p>\n<p>The following will be the names of the image inside the <b>img</b> folder.</p>\n<pre class=\"result notranslate\">\nmy-image@2x.jpg\nmy-image@3x.jpg\n</pre>\n<h2>Network Images</h2>\n<p>When using network images, instead of <b>require</b>, we need the <b>source</b> property. It is recommended to define the <b>width</b> and the <b>height</b> for network images.</p>\n<h3>App.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react';\nimport ImagesExample from './image_example.js'\n\nconst App = () =&gt; {\n   return (\n      &lt;ImagesExample /&gt;\n   )\n}\nexport default App\n</pre>\n<!--<img src=\"/react_native/images/react-native-network-image.jpg\" alt=\"React Native Network Image\" />-->\n<h3>image_example.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { View, Image } from 'react-native'\n\nconst ImagesExample = () =&gt; (\n   &lt;Image source = {{uri:'https://pbs.twimg.com/profile_images/486929358120964097/gNLINY67_400x400.png'}}\n   style = {{ width: 200, height: 200 }}\n   /&gt;\n)\nexport default ImagesExample\n</pre>\n<h3>Output</h3>\n<img alt=\"Network Images\" src=\"/react_native/images/network_images.jpg\"/>\n<h1>React Native - HTTP</h1>\n<p>In this chapter, we will show you how to use <b>fetch</b> for handling network requests.</p>\n<h3>App.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react';\nimport HttpExample from './http_example.js'\n\nconst App = () =&gt; {\n   return (\n      &lt;HttpExample /&gt;\n   )\n}\nexport default App\n</pre>\n<h2>Using Fetch</h2>\n<p>We will use the <b>componentDidMount</b> lifecycle method to load the data from server as soon as the component is mounted. This function will send GET request to the server, return JSON data, log output to console and update our state.</p>\n<!--<img src=\"/react_native/images/react-native-http-fetch.jpg\" alt=\"React Native HTTP Fetch\" />\n<p></p>\n<img src=\"/react_native/images/react-native-http-log.jpg\" alt=\"React Native HTTP Log\" />-->\n<h3>http_example.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { View, Text } from 'react-native'\n\nclass HttpExample extends Component {\n   state = {\n      data: ''\n   }\n   componentDidMount = () =&gt; {\n      fetch('https://jsonplaceholder.typicode.com/posts/1', {\n         method: 'GET'\n      })\n      .then((response) =&gt; response.json())\n      .then((responseJson) =&gt; {\n         console.log(responseJson);\n         this.setState({\n            data: responseJson\n         })\n      })\n      .catch((error) =&gt; {\n         console.error(error);\n      });\n   }\n   render() {\n      return (\n         &lt;View&gt;\n            &lt;Text&gt;\n               {this.state.data.body}\n            &lt;/Text&gt;\n         &lt;/View&gt;\n      )\n   }\n}\nexport default HttpExample\n</pre>\n<h3>Output</h3>\n<img alt=\"React Native HTTP\" src=\"/react_native/images/react_native_http.jpg\"/>\n<h1>React Native - Buttons</h1>\n<p>In this chapter, we will show you touchable components in react Native. We call them 'touchable' because they offer built in animations and we can use the <b>onPress</b> prop for handling touch event.</p>\n<p>Facebook offers the <b>Button</b> component, which can be used as a generic button. Consider the following example to understand the same.</p>\n<h3>App.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { Button } from 'react-native'\n\nconst App = () =&gt; {\n   const handlePress = () =&gt; false\n   return (\n      &lt;Button\n         onPress = {handlePress}\n         title = \"Red button!\"\n         color = \"red\"\n      /&gt;\n   )\n}\nexport default App\n</pre>\n<p>If the default <b>Button</b> component does not suit your needs, you can use one of the following components instead.</p>\n<img alt=\"Buttons Redbutton\" src=\"/react_native/images/buttons_redbutton.jpg\"/>\n<h2>Touchable Opacity</h2>\n<p>This element will change the opacity of an element when touched.</p>\n<h3>App.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react'\nimport { TouchableOpacity, StyleSheet, View, Text } from 'react-native'\n\nconst App = () =&gt; {\n   return (\n      &lt;View style = {styles.container}&gt;\n         &lt;TouchableOpacity&gt;\n            &lt;Text style = {styles.text}&gt;\n               Button\n            &lt;/Text&gt;\n         &lt;/TouchableOpacity&gt;\n      &lt;/View&gt;\n   )\n}\nexport default App\n\nconst styles = StyleSheet.create ({\n   container: {\n      alignItems: 'center',\n   },\n   text: {\n      borderWidth: 1,\n      padding: 25,\n      borderColor: 'black',\n      backgroundColor: 'red'\n   }\n})\n</pre>\n<p></p>\n<img alt=\"Buttons Touchopacity\" src=\"/react_native/images/buttons_touchopacity.jpg\"/>\n<h2>Touchable Highlight</h2>\n<p>When a user presses the element, it will get darker and the underlying color will show through.</p>\n<h3>App.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react'\nimport { View, TouchableHighlight, Text, StyleSheet } from 'react-native'\n\nconst App = (props) =&gt; {\n   return (\n      &lt;View style = {styles.container}&gt;\n         &lt;TouchableHighlight&gt;\n            &lt;Text style = {styles.text}&gt;\n               Button\n            &lt;/Text&gt;\n         &lt;/TouchableHighlight&gt;\n      &lt;/View&gt;\n   )\n}\nexport default App\n\nconst styles = StyleSheet.create ({\n   container: {\n      alignItems: 'center',\n   },\n   text: {\n      borderWidth: 1,\n      padding: 25,\n      borderColor: 'black',\n      backgroundColor: 'red'\n   }\n})\n</pre>\n<h2>Touchable Native Feedback</h2>\n<p>This will simulate ink animation when the element is pressed.</p>\n<h3>App.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react'\nimport { View, TouchableNativeFeedback, Text, StyleSheet } from 'react-native'\n\nconst Home = (props) =&gt; {\n   return (\n      &lt;View style = {styles.container}&gt;\n         &lt;TouchableNativeFeedback&gt;\n            &lt;Text style = {styles.text}&gt;\n               Button\n            &lt;/Text&gt;\n         &lt;/TouchableNativeFeedback&gt;\n      &lt;/View&gt;\n   )\n}\nexport default Home\n\nconst styles = StyleSheet.create ({\n   container: {\n      alignItems: 'center',\n   },\n   text: {\n      borderWidth: 1,\n      padding: 25,\n      borderColor: 'black',\n      backgroundColor: 'red'\n   }\n})\n</pre>\n<h2>Touchable Without Feedback</h2>\n<p>This should be used when you want to handle the touch event without any animation Usually, this component is not used much.</p>\n<pre class=\"prettyprint notranslate\">\n&lt;TouchableWithoutFeedback&gt;\n   &lt;Text&gt;\n      Button\n   &lt;/Text&gt;\n&lt;/TouchableWithoutFeedback&gt;\n</pre>\n<h1>React Native - Animations</h1>\n<p>In this chapter, we will show you how to use <b>LayoutAnimation</b> in React Native.</p>\n<h2>Animations Component</h2>\n<p>We will set <b>myStyle</b> as a property of the state. This property is used for styling an element inside <b>PresentationalAnimationComponent</b>.</p>\n<p>We will also create two functions \u2212 <b>expandElement</b> and <b>collapseElement</b>. These functions will update values from the state. The first one will use the <b>spring</b> preset animation while the second one will have the <b>linear</b> preset. We will pass these as props too. The <b>Expand</b> and the <b>Collapse</b> buttons call the <b>expandElement()</b> and <b>collapseElement()</b> functions.</p>\n<p>In this example, we will dynamically change the width and the height of the box. Since the <b>Home</b> component will be the same, we will only change the <b>Animations</b> component.</p>\n<!--<img src=\"/react_native/images/react-native-animations-collapsed.jpg\" alt=\"React Native Animations Collapsed\" />\n<p></p>\n<img src=\"/react_native/images/react-native-animations-expanded.jpg\" alt=\"React Native Animations Expanded\" />-->\n<p>In this example, we will dynamically change the width and the height of the box. Since the <b>Home</b> component will be the same, we will only change the <b>Animations</b> component.</p>\n<h3>App.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { View, StyleSheet, Animated, TouchableOpacity } from 'react-native'\n\nclass Animations extends Component {\n   componentWillMount = () =&gt; {\n      this.animatedWidth = new Animated.Value(50)\n      this.animatedHeight = new Animated.Value(100)\n   }\n   animatedBox = () =&gt; {\n      Animated.timing(this.animatedWidth, {\n         toValue: 200,\n         duration: 1000\n      }).start()\n      Animated.timing(this.animatedHeight, {\n         toValue: 500,\n         duration: 500\n      }).start()\n   }\n   render() {\n      const animatedStyle = { width: this.animatedWidth, height: this.animatedHeight }\n      return (\n         &lt;TouchableOpacity style = {styles.container} onPress = {this.animatedBox}&gt;\n            &lt;Animated.View style = {[styles.box, animatedStyle]}/&gt;\n         &lt;/TouchableOpacity&gt;\n      )\n   }\n}\nexport default Animations\n\nconst styles = StyleSheet.create({\n   container: {\n      justifyContent: 'center',\n      alignItems: 'center'\n   },\n   box: {\n      backgroundColor: 'blue',\n      width: 50,\n      height: 100\n   }\n})\n</pre>\n<!--<p>The initial screen will show a small blue box.</p>\n<img src=\"/react_native/images/react-native-animations-collapsed-2.jpg\" alt=\"React Native Animations Collapsed\" />\n<p>To trigger animation, we need to press it.</p>\n<img src=\"/react_native/images/react-native-animations-expanded-2.jpg\" alt=\"React Native Animations Expanded\" />-->\n<h1>React Native - Debugging</h1>\n<p>React native offers a couple of methods that help in debugging your code.</p>\n<h2>In App Developer Menu</h2>\n<p>You can open the developer menu on the IOS simulator by pressing <b>command + D</b>.</p>\n<p>On Android emulator, you need to press <b>command + M</b>.</p>\n<img alt=\"React Native Debugging Developer Menu\" src=\"/react_native/images/react-native-debugging-developer-menu.jpg\"/>\n<ul class=\"list\">\n<li><p><b>Reload</b> \u2212 Used for reloading simulator. You can use shortcut <b>command + R</b></p></li>\n<li><p><b>Debug JS Remotely</b> \u2212 Used for activating debugging inside browser developer console.</p></li>\n<li><p><b>Enable Live Reload</b> \u2212 Used for enabling live reloading whenever your code is saved. The debugger will open at <b>localhost:8081/debugger-ui</b>.</p></li>\n<li><p><b>Start Systrace</b> \u2212 Used for starting Android marker based profiling tool.</p></li>\n<li><p><b>Show Inspector</b> \u2212 Used for opening inspector where you can find info about your components. You can use shortcut <b>command + I</b></p></li>\n<li><p><b>Show Perf Monitor</b> \u2212 Perf monitor is used for keeping track of the performance of your app.</p></li>\n</ul>\n<h1>React Native - Router</h1>\n<p>In this chapter, we will understand navigation in React Native.</p>\n<h2>Step 1: Install Router</h2>\n<p>To begin with, we need to install the <b>Router</b>. We will use the React Native Router Flux in this chapter. You can run the following command in terminal, from the project folder.</p>\n<pre class=\"result notranslate\">\nnpm i react-native-router-flux --save\n</pre>\n<h2>Step 2: Entire Application</h2>\n<p>Since we want our router to handle the entire application, we will add it in <b>index.ios.js</b>. For Android, you can do the same in <b>index.android.js</b>.</p>\n<h3>App.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react';\nimport { AppRegistry, View } from 'react-native';\nimport Routes from './Routes.js'\n\nclass reactTutorialApp extends Component {\n   render() {\n      return (\n         &lt;Routes /&gt;\n      )\n   }\n}\nexport default reactTutorialApp\nAppRegistry.registerComponent('reactTutorialApp', () =&gt; reactTutorialApp)\n</pre>\n<h2>Step 3: Add Router</h2>\n<p>Now we will create the <b>Routes</b> component inside the components folder. It will return <b>Router</b> with several scenes. Each scene will need <b>key, component</b> and <b>title</b>. Router uses the key property to switch between scenes, component will be rendered on screen and the title will be shown in the navigation bar. We can also set the <b>initial</b> property to the scene that is to be rendered initially.</p>\n<h3>Routes.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react'\nimport { Router, Scene } from 'react-native-router-flux'\nimport Home from './Home.js'\nimport About from './About.js'\n\nconst Routes = () =&gt; (\n   &lt;Router&gt;\n      &lt;Scene key = \"root\"&gt;\n         &lt;Scene key = \"home\" component = {Home} title = \"Home\" initial = {true} /&gt;\n         &lt;Scene key = \"about\" component = {About} title = \"About\" /&gt;\n      &lt;/Scene&gt;\n   &lt;/Router&gt;\n)\nexport default Routes\n</pre>\n<h2>Step 4: Create Components</h2>\n<p>We already have the <b>Home</b> component from previous chapters; now, we need to add the <b>About</b> component. We will add the <b>goToAbout</b> and the <b>goToHome</b> functions to switch between scenes.</p>\n<h3>Home.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react'\nimport { TouchableOpacity, Text } from 'react-native';\nimport { Actions } from 'react-native-router-flux';\n\nconst Home = () =&gt; {\n   const goToAbout = () =&gt; {\n      Actions.about()\n   }\n   return (\n      &lt;TouchableOpacity style = {{ margin: 128 }} onPress = {goToAbout}&gt;\n         &lt;Text&gt;This is HOME!&lt;/Text&gt;\n      &lt;/TouchableOpacity&gt;\n   )\n}\nexport default Home\n</pre>\n<h3>About.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react'\nimport { TouchableOpacity, Text } from 'react-native'\nimport { Actions } from 'react-native-router-flux'\n\nconst About = () =&gt; {\n   const goToHome = () =&gt; {\n      Actions.home()\n   }\n   return (\n      &lt;TouchableOpacity style = {{ margin: 128 }} onPress = {goToHome}&gt;\n         &lt;Text&gt;This is ABOUT&lt;/Text&gt;\n      &lt;/TouchableOpacity&gt;\n   )\n}\nexport default About\n</pre>\n<p>The app will render the initial <b>Home</b> screen.</p>\n<!--<img src=\"/react_native/images/react-native-router-home.jpg\" alt=\"React Native Router Home\" />\n<p></p>\n<!--<img src=\"/react_native/images/react-native-router-about.jpg\" alt=\"React Native Router About\" />\n<p></p>-->\n<img alt=\"React Native Router\" src=\"/react_native/images/react_native_router.jpg\"/>\n<p>You can press the button to switch to the about screen. The Back arrow will appear; you can use it to get back to the previous screen.</p>\n<img alt=\"React Native Router\" src=\"/react_native/images/reactnative_router.jpg\"/>\n<h1>React Native - Running IOS</h1>\n<p>If you want to test your app in the IOS simulator, all you need is to open the root folder of your app in terminal and run \u2212</p>\n<pre class=\"result notranslate\">\nreact-native run-ios\n</pre>\n<p>The above command will start the simulator and run the app.</p>\n<p>We can also specify the device we want to use.</p>\n<pre class=\"result notranslate\">\nreact-native run-ios --simulator \"iPhone 5s\n</pre>\n<p>After you open the app in simulator, you can press <b>command + D</b> on IOS to open the developers menu. You can check more about this in our <b>debugging</b> chapter.</p>\n<p>You can also reload the IOS simulator by pressing <b>command &amp;plus R</b>.</p>\n<h1>React Native - Running Android</h1>\n<p>We can run the React Native app on Android platform by running the following code in the terminal.</p>\n<pre class=\"result notranslate\">\nreact-native run-android\n</pre>\n<p>Before you can run your app on Android device, you need to enable <b>USB Debugging</b> inside the <b>Developer Options</b>.</p>\n<p>When <b>USB Debugging</b> is enabled, you can plug in your device and run the code snippet given above.</p>\n<p>The Native Android emulator is slow. We recommend downloading <a href=\"https://www.genymotion.com/\" rel=\"nofollow\" target=\"_blank\">Genymotion</a> for testing your app.</p>\n<p>The developer menu can be accessed by pressing <b>command &amp;plus M</b>.</p>\n<h1>React Native - View</h1>\n<p>View is the most common element in React Native. You can consider it as an equivalent of the <b>div</b> element used in web development.</p>\n<h2>Use Cases</h2>\n<p>Let us now see a few common use cases.</p>\n<ul class=\"list\">\n<li><p>When you need to wrap your elements inside the container, you can use <b>View</b> as a container element.</p></li>\n<li><p>When you want to nest more elements inside the parent element, both parent and child can be <b>View</b>. It can have as many children as you want.</p></li>\n<li><p>When you want to style different elements, you can place them inside <b>View</b> since it supports <b>style</b> property, <b>flexbox</b> etc.</p></li>\n<li><p><b>View</b> also supports synthetic touch events, which can be useful for different purposes.</p></li>\n</ul>\n<p>We already used <b>View</b> in our previous chapters and we will use it in almost all subsequent chapters as well. The <b>View</b> can be assumed as a default element in React Native. In example given below, we will nest two Views and a text.</p>\n<h3>App.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { View, Text } from 'react-native'\n\nconst App = () =&gt; {\n   return (\n      &lt;View&gt;\n         &lt;View&gt;\n            &lt;Text&gt;This is my text&lt;/Text&gt;\n         &lt;/View&gt;\n      &lt;/View&gt;\n   )\n}\nexport default App\n</pre>\n<h3>Output</h3>\n<img alt=\"Props Updated\" src=\"/react_native/images/props_updated.jpg\"/>\n<h1>React Native - WebView</h1>\n<p>In this chapter, we will learn how to use WebView. It is used when you want to render web page to your mobile app inline.</p>\n<h2>Using WebView</h2>\n<p>The <b>HomeContainer</b> will be a container component.</p>\n<h3>App.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport WebViewExample from './web_view_example.js'\n\nconst App = () =&gt; {\n   return (\n      &lt;WebViewExample/&gt;\n   )\n}\nexport default App;\n</pre>\n<p>Let us create a new file called <b>WebViewExample.js</b> inside the <b>src/components/home</b> folder.</p>\n<h3>web_view_example.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { View, WebView, StyleSheet }\n\nfrom 'react-native'\nconst WebViewExample = () =&gt; {\n   return (\n      &lt;View style = {styles.container}&gt;\n         &lt;WebView\n         source = {{ uri:\n         'https://www.google.com/?gws_rd=cr,ssl&amp;ei=SICcV9_EFqqk6ASA3ZaABA#q=tutorialspoint' }}\n         /&gt;\n      &lt;/View&gt;\n   )\n}\nexport default WebViewExample;\n\nconst styles = StyleSheet.create({\n   container: {\n      height: 350,\n   }\n})\n</pre>\n<p>The above program will generate the following output.</p>\n<!--<img src=\"/react_native/images/react-native-webview.jpg\" alt=\"React Native WebView\" />-->\n<img alt=\"React Native WebView\" src=\"/react_native/images/react_native_web_view.jpg\"/>\n<h1>React Native - Modal</h1>\n<p>In this chapter, we will show you how to use the modal component in React Native.</p>\n<p>Let us now create a new file: <b>ModalExample.js</b></p>\n<p>We will put logic inside <b>ModalExample</b>. We can update the initial state by running the <b>toggleModal</b>.</p>\n<p>After updating the initial state by running the <b>toggleModal</b>, we will set the <b>visible</b> property to our modal. This prop will be updated when the state changes.</p>\n<p>The <b>onRequestClose</b> is required for Android devices.</p>\n<h2>App.js</h2>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport WebViewExample from './modal_example.js'\n\nconst Home = () =&gt; {\n   return (\n      &lt;WebViewExample/&gt;\n   )\n}\nexport default Home;\n</pre>\n<h2>modal_example.js</h2>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react';\nimport { Modal, Text, TouchableHighlight, View, StyleSheet}\n\nfrom 'react-native'\nclass ModalExample extends Component {\n   state = {\n      modalVisible: false,\n   }\n   toggleModal(visible) {\n      this.setState({ modalVisible: visible });\n   }\n   render() {\n      return (\n         &lt;View style = {styles.container}&gt;\n            &lt;Modal animationType = {\"slide\"} transparent = {false}\n               visible = {this.state.modalVisible}\n               onRequestClose = {() =&gt; { console.log(\"Modal has been closed.\") } }&gt;\n               \n               &lt;View style = {styles.modal}&gt;\n                  &lt;Text style = {styles.text}&gt;Modal is open!&lt;/Text&gt;\n                  \n                  &lt;TouchableHighlight onPress = {() =&gt; {\n                     this.toggleModal(!this.state.modalVisible)}}&gt;\n                     \n                     &lt;Text style = {styles.text}&gt;Close Modal&lt;/Text&gt;\n                  &lt;/TouchableHighlight&gt;\n               &lt;/View&gt;\n            &lt;/Modal&gt;\n            \n            &lt;TouchableHighlight onPress = {() =&gt; {this.toggleModal(true)}}&gt;\n               &lt;Text style = {styles.text}&gt;Open Modal&lt;/Text&gt;\n            &lt;/TouchableHighlight&gt;\n         &lt;/View&gt;\n      )\n   }\n}\nexport default ModalExample\n\nconst styles = StyleSheet.create ({\n   container: {\n      alignItems: 'center',\n      backgroundColor: '#ede3f2',\n      padding: 100\n   },\n   modal: {\n      flex: 1,\n      alignItems: 'center',\n      backgroundColor: '#f7021a',\n      padding: 100\n   },\n   text: {\n      color: '#3f2949',\n      marginTop: 10\n   }\n})\n</pre>\n<p>Our starting screen will look like this \u2212</p>\n<!--<img src=\"/react_native/images/react-native-modal-closed.jpg\" alt=\"React Native Modal Closed\" />\n<p></p\n<img src=\"/react_native/images/react-native-modal-open.jpg\" alt=\"React Native Modal Open\" />>-->\n<p></p>\n<img alt=\"React Native Open Modal\" src=\"/react_native/images/react_native_open_modal.jpg\"/>\n<p>If we click the button, the modal will open.</p>\n<img alt=\"React Native Modal\" src=\"/react_native/images/react_native_modal.jpg\"/>\n<h1>React Native - ActivityIndicator</h1>\n<p>In this chapter we will show you how to use the activity indicator in React Native.</p>\n<h2>Step 1: App</h2>\n<p><b>App</b> component will be used to import and show our <b>ActivityIndicator</b>.</p>\n<h3>App.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react'\nimport ActivityIndicatorExample from './activity_indicator_example.js'\n\nconst Home = () =&gt; {\n   return (\n      &lt;ActivityIndicatorExample /&gt;\n   )\n}\nexport default Home\n</pre>\n<h2>Step 2: ActivityIndicatorExample</h2>\n<p>Animating property is a Boolean which is used for showing the activity indicator. The latter closes six seconds after the component is mounted. This is done using the <b>closeActivityIndicator()</b> function.</p>\n<h3>activity_indicator_example.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react';\nimport { ActivityIndicator, View, Text, TouchableOpacity, StyleSheet } from 'react-native';\n\nclass ActivityIndicatorExample extends Component {\n   state = { animating: true }\n   \n   closeActivityIndicator = () =&gt; setTimeout(() =&gt; this.setState({\n   animating: false }), 60000)\n   \n   componentDidMount = () =&gt; this.closeActivityIndicator()\n   render() {\n      const animating = this.state.animating\n      return (\n         &lt;View style = {styles.container}&gt;\n            &lt;ActivityIndicator\n               animating = {animating}\n               color = '#bc2b78'\n               size = \"large\"\n               style = {styles.activityIndicator}/&gt;\n         &lt;/View&gt;\n      )\n   }\n}\nexport default ActivityIndicatorExample\n\nconst styles = StyleSheet.create ({\n   container: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      marginTop: 70\n   },\n   activityIndicator: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      height: 80\n   }\n})\n</pre>\n<p>When we run the app, we will see the loader on screen. It will disappear after six seconds.</p>\n<!--<img src=\"/react_native/images/react-native-activity-indicator.jpg\" alt=\"React Native Activity Indicator\" />-->\n<img alt=\"React Native Activity Indicator\" src=\"/react_native/images/react_native_activity_indicator.jpg\"/>\n<h1>React Native - Picker</h1>\n<p>In this chapter, we will create simple Picker with two available options.</p>\n<h2>Step 1: Create File</h2>\n<p>Here, the <b>App.js</b> folder will be used as a presentational component.</p>\n<h3>App.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react'\nimport PickerExample from './PickerExample.js'\n\nconst App = () =&gt; {\n   return (\n      &lt;PickerExample /&gt;\n   )\n}\nexport default App\n</pre>\n<h2>Step 2: Logic</h2>\n<p><b>this.state.user</b> is used for picker control.</p>\n<p>The <b>updateUser</b> function will be triggered when a user is picked.</p>\n<h3>PickerExample.js</h3>\n<!--<img src=\"/react_native/images/react-native-picker.jpg\" alt=\"React Native Picker\" />-->\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react';\nimport { View, Text, Picker, StyleSheet } from 'react-native'\n\nclass PickerExample extends Component {\n   state = {user: ''}\n   updateUser = (user) =&gt; {\n      this.setState({ user: user })\n   }\n   render() {\n      return (\n         &lt;View&gt;\n            &lt;Picker selectedValue = {this.state.user} onValueChange = {this.updateUser}&gt;\n               &lt;Picker.Item label = \"Steve\" value = \"steve\" /&gt;\n               &lt;Picker.Item label = \"Ellen\" value = \"ellen\" /&gt;\n               &lt;Picker.Item label = \"Maria\" value = \"maria\" /&gt;\n            &lt;/Picker&gt;\n            &lt;Text style = {styles.text}&gt;{this.state.user}&lt;/Text&gt;\n         &lt;/View&gt;\n      )\n   }\n}\nexport default PickerExample\n\nconst styles = StyleSheet.create({\n   text: {\n      fontSize: 30,\n      alignSelf: 'center',\n      color: 'red'\n   }\n})\n</pre>\n<h3>Output</h3>\n<img alt=\"React Native Picker\" src=\"/react_native/images/react_native_picker.jpg\"/>\n<p>If you click on the name it prompts you all three options as \u2212</p>\n<img alt=\"React Native Picker\" src=\"/react_native/images/reactnative_picker.jpg\"/>\n<p>And you can pick one of them and the output will be like.</p>\n<img alt=\"React Native Picker\" src=\"/react_native/images/reactnativepicker.jpg\"/>\n<h1>React Native - Status Bar</h1>\n<p>In this chapter, we will show you how to control the status bar appearance in React Native.</p>\n<p>The Status bar is easy to use and all you need to do is set properties to change it.</p>\n<p>The <b>hidden</b> property can be used to hide the status bar. In our example it is set to <b>false</b>. This is default value.</p>\n<p>The <b>barStyle</b> can have three values \u2013 <b>dark-content, light-content</b> and <b>default</b>.</p>\n<p>This component has several other properties that can be used. Some of them are Android or IOS specific. You can check it in official documentation.</p>\n<h2>App.js</h2>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react';\nimport { StatusBar } from 'react-native'\n\nconst App = () =&gt; {\n   return (\n      &lt;StatusBar barStyle = \"dark-content\" hidden = {false} backgroundColor = \"#00BCD4\" translucent = {true}/&gt;\n   )\n}\nexport default App\n</pre>\n<p>If we run the app, the status bar will be visible and content will have dark color.</p>\n<!--<img src=\"/react_native/images/react-native-status-bar.jpg\" alt=\"React Native Status Bar\" />\n<p></p>-->\n<h2>Output</h2>\n<img alt=\"React Native Status Bar\" src=\"/react_native/images/react_native_status_bar.jpg\"/>\n<h1>React Native - Switch</h1>\n<p>In this chapter, we will explain the <b>Switch</b> component in a couple of steps.</p>\n<h2>Step 1: Create File</h2>\n<p>We will use the <b>HomeContainer</b> component for logic, but we need to create the presentational component.</p>\n<p>Let us now create a new file: <b>SwitchExample.js</b>.</p>\n<h2>Step 2: Logic</h2>\n<p>We are passing value from the <b>state</b> and functions for toggling switch items to <b>SwitchExample</b> component. Toggle functions will be used for updating the state.</p>\n<h3>App.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { View } from 'react-native'\nimport SwitchExample from './switch_example.js'\n\nexport default class HomeContainer extends Component {\n   constructor() {\n      super();\n      this.state = {\n         switch1Value: false,\n      }\n   }\n   toggleSwitch1 = (value) =&gt; {\n      this.setState({switch1Value: value})\n      console.log('Switch 1 is: ' + value)\n   }\n   render() {\n      return (\n         &lt;View&gt;\n            &lt;SwitchExample\n            toggleSwitch1 = {this.toggleSwitch1}\n            switch1Value = {this.state.switch1Value}/&gt;\n         &lt;/View&gt;\n      );\n   }\n}\n</pre>\n<h2>Step 3: Presentation</h2>\n<p>Switch component takes two props. The <b>onValueChange</b> prop will trigger our toggle functions after a user presses the switch. The <b>value</b> prop is bound to the state of the <b>HomeContainer</b> component.</p>\n<h3>switch_example.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { View, Switch, StyleSheet }\n\nfrom 'react-native'\n\nexport default SwitchExample = (props) =&gt; {\n   return (\n      &lt;View style = {styles.container}&gt;\n         &lt;Switch\n         onValueChange = {props.toggleSwitch1}\n         value = {props.switch1Value}/&gt;\n      &lt;/View&gt;\n   )\n}\nconst styles = StyleSheet.create ({\n   container: {\n      flex: 1,\n      alignItems: 'center',\n      marginTop: 100\n   }\n})\n</pre>\n<p>If we press the switch, the state will be updated. You can check values in the console.</p>\n<!--<img src=\"/react_native/images/react-native-switch.jpg\" alt=\"React Native Switch\" />-->\n<h3>Output</h3>\n<img alt=\"React Native Switch\" src=\"/react_native/images/react_native_switch.jpg\"/>\n<h1>React Native - Text</h1>\n<p>In this chapter, we will talk about <b>Text</b> component in React Native.</p>\n<p>This component can be nested and it can inherit properties from parent to child. This can be useful in many ways. We will show you example of capitalizing the first letter, styling words or parts of the text, etc.</p>\n<h2>Step 1: Create File</h2>\n<p>The file we are going to create is <b>text_example.js</b></p>\n<h2>Step 2: App.js</h2>\n<p>In this step, we will just create a simple container.</p>\n<h3>App.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport TextExample from './text_example.js'\n\nconst App = () =&gt; {\n   return (\n      &lt;TextExample/&gt;\n   )\n}\nexport default App\n</pre>\n<h2>Step 3: Text</h2>\n<p>In this step, we will use the inheritance pattern. <b>styles.text</b> will be applied to all <b>Text</b> components.</p>\n<p>You can also notice how we set other styling properties to some parts of the text. It is important to know that all child elements have parent styles passed to them.</p>\n<h3>text_example.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react';\nimport { View, Text, Image, StyleSheet } from 'react-native'\n\nconst TextExample = () =&gt; {\n   return (\n      &lt;View style = {styles.container}&gt;\n         &lt;Text style = {styles.text}&gt;\n            &lt;Text style = {styles.capitalLetter}&gt;\n               L\n            &lt;/Text&gt;\n            \n            &lt;Text&gt;\n               orem ipsum dolor sit amet, sed do eiusmod.\n            &lt;/Text&gt;\n            \n            &lt;Text&gt;\n               Ut enim ad &lt;Text style = {styles.wordBold}&gt;minim &lt;/Text&gt; veniam,\n               quis aliquip ex ea commodo consequat.\n            &lt;/Text&gt;\n            \n            &lt;Text style = {styles.italicText}&gt;\n               Duis aute irure dolor in reprehenderit in voluptate velit esse cillum.\n            &lt;/Text&gt;\n            \n            &lt;Text style = {styles.textShadow}&gt;\n               Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia\n               deserunt mollit anim id est laborum.\n            &lt;/Text&gt;\n         &lt;/Text&gt;\n      \n      &lt;/View&gt;\n   )\n}\nexport default TextExample\n\nconst styles = StyleSheet.create ({\n   container: {\n      alignItems: 'center',\n      marginTop: 100,\n      padding: 20\n   },\n   text: {\n      color: '#41cdf4',\n   },\n   capitalLetter: {\n      color: 'red',\n      fontSize: 20\n   },\n   wordBold: {\n      fontWeight: 'bold',\n      color: 'black'\n   },\n   italicText: {\n      color: '#37859b',\n      fontStyle: 'italic'\n   },\n   textShadow: {\n      textShadowColor: 'red',\n      textShadowOffset: { width: 2, height: 2 },\n      textShadowRadius : 5\n   }\n})\n</pre>\n<p>You will receive the following output \u2212</p>\n<!--<img src=\"/react_native/images/react-native-text.jpg\" alt=\"React Native Text\" />-->\n<img alt=\"React Native Text\" src=\"/react_native/images/react_native_text.jpg\"/>\n<h1>React Native - Alert</h1>\n<p>In this chapter, we will understand how to create custom <b>Alert</b> component.</p>\n<h2>Step 1: App.js</h2>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react'\nimport AlertExample from './alert_example.js'\n\nconst App = () =&gt; {\n   return (\n      &lt;AlertExample /&gt;\n   )\n}\nexport default App\n</pre>\n<h2>Step 2: alert_example.js</h2>\n<p>We will create a button for triggering the <b>showAlert</b> function.</p>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react'\nimport { Alert, Text, TouchableOpacity, StyleSheet } from 'react-native'\n\nconst AlertExample = () =&gt; {\n   const showAlert = () =&gt;{\n      Alert.alert(\n         'You need to...'\n      )\n   }\n   return (\n      &lt;TouchableOpacity onPress = {showAlert} style = {styles.button}&gt;\n         &lt;Text&gt;Alert&lt;/Text&gt;\n      &lt;/TouchableOpacity&gt;\n   )\n}\nexport default AlertExample\n\nconst styles = StyleSheet.create ({\n   button: {\n      backgroundColor: '#4ba37b',\n      width: 100,\n      borderRadius: 50,\n      alignItems: 'center',\n      marginTop: 100\n   }\n})\n</pre>\n<!--<p></p>\n<img src=\"/react_native/images/react-native-alert.jpg\" alt=\"React Native Alert\" />-->\n<h3>Output</h3>\n<img alt=\"React Native Alert\" src=\"/react_native/images/react_native_alert.jpg\"/>\n<p>When you click the button, you will see the following \u2212</p>\n<img alt=\"React Native Alert Button\" src=\"/react_native/images/react_native_alert_button.jpg\"/>\n<h1>React Native - Geolocation</h1>\n<p>In this chapter, we will show you how to use <b>Geolocation</b>.</p>\n<h2>Step 1: App.js</h2>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react'\nimport GeolocationExample from './geolocation_example.js'\n\nconst App = () =&gt; {\n   return (\n      &lt;GeolocationExample /&gt;\n   )\n}\nexport default App\n</pre>\n<h2>Step 2: Geolocation</h2>\n<p>We will start by setting up the initial state for that will hold the initial and the last position.</p>\n<p>Now, we need to get current position of the device when a component is mounted using the <b>navigator.geolocation.getCurrentPosition</b>. We will stringify the response so we can update the state.</p>\n<p><b>navigator.geolocation.watchPosition</b> is used for tracking the users\u2019 position. We also clear the watchers in this step.</p>\n<h3>AsyncStorageExample.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { View, Text, Switch, StyleSheet} from 'react-native'\n\nclass SwichExample extends Component {\n   state = {\n      initialPosition: 'unknown',\n      lastPosition: 'unknown',\n   }\n   watchID: ?number = null;\n   componentDidMount = () =&gt; {\n      navigator.geolocation.getCurrentPosition(\n         (position) =&gt; {\n            const initialPosition = JSON.stringify(position);\n            this.setState({ initialPosition });\n         },\n         (error) =&gt; alert(error.message),\n         { enableHighAccuracy: true, timeout: 20000, maximumAge: 1000 }\n      );\n      this.watchID = navigator.geolocation.watchPosition((position) =&gt; {\n         const lastPosition = JSON.stringify(position);\n         this.setState({ lastPosition });\n      });\n   }\n   componentWillUnmount = () =&gt; {\n      navigator.geolocation.clearWatch(this.watchID);\n   }\n   render() {\n      return (\n         &lt;View style = {styles.container}&gt;\n            &lt;Text style = {styles.boldText}&gt;\n               Initial position:\n            &lt;/Text&gt;\n            \n            &lt;Text&gt;\n               {this.state.initialPosition}\n            &lt;/Text&gt;\n            \n            &lt;Text style = {styles.boldText}&gt;\n               Current position:\n            &lt;/Text&gt;\n            \n            &lt;Text&gt;\n               {this.state.lastPosition}\n            &lt;/Text&gt;\n         &lt;/View&gt;\n      )\n   }\n}\nexport default SwichExample\n\nconst styles = StyleSheet.create ({\n   container: {\n      flex: 1,\n      alignItems: 'center',\n      marginTop: 50\n   },\n   boldText: {\n      fontSize: 30,\n      color: 'red',\n   }\n})\n</pre>\n<!--<p></p>\n<img src=\"/react_native/images/react-native-geolocation.jpg\" alt=\"React Native Geolocation\" />-->\n<h1>React Native - AsyncStorage</h1>\n<p>In this chapter, we will show you how to persist your data using <b>AsyncStorage</b>.</p>\n<h2>Step 1: Presentation</h2>\n<p>In this step, we will create the <b>App.js</b> file.</p>\n<pre class=\"prettyprint notranslate\">\nimport React from 'react'\nimport AsyncStorageExample from './async_storage_example.js'\n\nconst App = () =&gt; {\n   return (\n      &lt;AsyncStorageExample /&gt;\n   )\n}\nexport default App\n</pre>\n<h2>Step 2: Logic</h2>\n<p><b>Name</b> from the initial state is empty string. We will update it from persistent storage when the component is mounted.</p>\n<p><b>setName</b> will take the text from our input field, save it using <b>AsyncStorage</b> and update the state.</p>\n<h3>async_storage_example.js</h3>\n<pre class=\"prettyprint notranslate\">\nimport React, { Component } from 'react'\nimport { StatusBar } from 'react-native'\nimport { AsyncStorage, Text, View, TextInput, StyleSheet } from 'react-native'\n\nclass AsyncStorageExample extends Component {\n   state = {\n      'name': ''\n   }\n   componentDidMount = () =&gt; AsyncStorage.getItem('name').then((value) =&gt; this.setState({ 'name': value }))\n   \n   setName = (value) =&gt; {\n      AsyncStorage.setItem('name', value);\n      this.setState({ 'name': value });\n   }\n   render() {\n      return (\n         &lt;View style = {styles.container}&gt;\n            &lt;TextInput style = {styles.textInput} autoCapitalize = 'none'\n            onChangeText = {this.setName}/&gt;\n            &lt;Text&gt;\n               {this.state.name}\n            &lt;/Text&gt;\n         &lt;/View&gt;\n      )\n   }\n}\nexport default AsyncStorageExample\n\nconst styles = StyleSheet.create ({\n   container: {\n      flex: 1,\n      alignItems: 'center',\n      marginTop: 50\n   },\n   textInput: {\n      margin: 5,\n      height: 100,\n      borderWidth: 1,\n      backgroundColor: '#7685ed'\n   }\n})\n</pre>\n<p>When we run the app, we can update the text by typing into the input field.</p>\n<!--<img src=\"/react_native/images/react-native-async-storage.jpg\" alt=\"React Native Async Storage\" />\n<p></p>\n<img src=\"/react_native/images/react-native-async-storage2.jpg\" alt=\"React Native Async Storage 2\" />\n<p></p>-->\n<img alt=\"React Native AsyncStorage\" src=\"/react_native/images/react_native_asyncstorage.jpg\"/>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/react_native/react_native_asyncstorage.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/react_native/react_native_useful_resources.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</img></div>\n</div>\n<div class=\"row\">\n<div class=\"col-md-3\" id=\"rightbar\">\n<div class=\"simple-ad\">\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.facebook.com/sharer.php?u=' + 'https://www.tutorialspoint.com/react_native/react_native_quick_guide.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/facebookIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://twitter.com/share?url=' + 'https://www.tutorialspoint.com/react_native/react_native_quick_guide.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/twitterIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'https://www.tutorialspoint.com/react_native/react_native_quick_guide.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/linkedinIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=https://www.tutorialspoint.com/react_native/react_native_quick_guide.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/googlePlusIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.stumbleupon.com/submit?url=https://www.tutorialspoint.com/react_native/react_native_quick_guide.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/StumbleUponIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://reddit.com/submit?url=https://www.tutorialspoint.com/react_native/react_native_quick_guide.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/reddit.jpg\"/>\n</a>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\ngoogle_ad_format = \"300x250_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 600;\ngoogle_ad_format = \"300x600_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"ca-pub-2537027957187252\";\n/* Right Side Ad */\ngoogle_ad_slot = \"right_side_ad\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\n//-->\n</script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"footer-copyright\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-1\">\n<a class=\"logo\" href=\"index.htm\"> <img alt=\"Tutorials Point\" class=\"img-responsive\" src=\"/scripts/img/logo-footer.png\"/> </a>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<nav id=\"sub-menu\">\n<ul>\n<li><a href=\"/about/about_privacy.htm\">Privacy Policy</a></li>\n<li><a href=\"/about/about_cookies.htm\">Cookies Policy</a></li>\n<li><a href=\"/about/contact_us.htm\">Contact</a></li>\n</ul>\n</nav>\n</div>\n<div class=\"col-md-3 col-sm-12 col-xs-12\">\n<p>\u00a9 Copyright 2019. All Rights Reserved.</p>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<div class=\"news-group\">\n<input autocomplete=\"off\" class=\"form-control-foot search\" id=\"textemail\" name=\"textemail\" onblur=\"if (this.value == '') {this.value = 'Enter email for newsletter...';}\" onfocus=\"if (this.value == 'Enter email for newsletter...') {this.value = '';}\" placeholder=\"Enter email for newsletter\" type=\"text\"/>\n<span class=\"input-group-btn\"> <button class=\"btn btn-default btn-footer\" id=\"btnemail\" onclick=\"javascript:void(0);\" type=\"submit\">go</button> </span>\n<div id=\"newsresponse\"></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"privacy-banner\">\n<div>\n<p>\n      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.\n      <a href=\"javascript:void(0)\" id=\"banner-accept\">Accept</a>\n<a href=\"/about/about_cookies.htm\" id=\"banner-learn\" target=\"_blank\">Learn more</a>\n</p>\n</div>\n</div>\n<script>\n// Banner Trigger if Not Closed\nif (!localStorage.bannerClosed) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n} else {\n  document.getElementById('privacy-banner').style.display = \"none\";\n}\ndocument.getElementById('banner-accept').addEventListener('click', function() {\n  document.getElementById('privacy-banner').style.display = \"none\";\n  localStorage.bannerClosed = 'true';\n});\nif (navigator.userAgent.match(/Opera|OPR\\//)) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n}\n</script>\n<!-- Libs -->\n<script src=\"/theme/js/custom-min.js?v=7\"></script>\n<script src=\"https://www.google-analytics.com/urchin.js\">\n</script>\n<script>\n_uacct = \"UA-232293-6\";\nurchinTracker();\n$('.pg-icon').click(function(){\n   $('.wrapLoader').show();\n});\n</script>\n\n\n\n", "url": "https://www.tutorialspoint.com/react_native/react_native_quick_guide.htm", "title_html": "<h1>React Native - Quick Guide</h1>"}