{"content": "\n Operators in C++ \n  \n Advertisements \n \n<!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//-->\n\n\n \n  \n \n Previous Page\n \n \nNext Page \u00a0\n \n  \n  \n An operator is a symbol that tells the compiler to perform specific mathematical or logical manipulations. C++ is rich in built-in operators and provide the following types of operators \u2212 \n \nArithmetic Operators\nRelational Operators\nLogical Operators\nBitwise Operators\nAssignment Operators\nMisc Operators\n \n This chapter will examine the arithmetic, relational, logical, bitwise, assignment and other operators one by one. \n Arithmetic Operators \n There are following arithmetic operators supported by C++ language \u2212 \n Assume variable A holds 10 and variable B holds 20, then \u2212 \n Show Examples \n \n\nOperator\nDescription\nExample\n\n\n+\nAdds two operands\nA + B will give 30\n\n\n-\nSubtracts second operand from the first\nA - B will give -10\n\n\n*\nMultiplies both operands\nA * B will give 200\n\n\n/\nDivides numerator by de-numerator\nB / A will give 2\n\n\n%\nModulus Operator and remainder of after an integer division\nB % A will give 0\n\n\n++\nIncrement operator, increases integer value by one\nA++ will give 11\n\n\n--\nDecrement operator, decreases integer value by one\nA-- will give 9\n\n \n Relational Operators \n There are following relational operators supported by C++ language \n Assume variable A holds 10 and variable B holds 20, then \u2212 \n Show Examples \n \n\nOperator\nDescription\nExample\n\n\n==\nChecks if the values of two operands are equal or not, if yes then condition becomes true.\n(A == B) is not true.\n\n\n!=\nChecks if the values of two operands are equal or not, if values are not equal then condition becomes true.\n(A != B) is true.\n\n\n>\nChecks if the value of left  operand is greater than the value of right operand, if yes then condition becomes true.\n(A > B) is not true.\n\n\n<\nChecks if the value of left  operand is less than the value of right operand, if yes then condition becomes true.\n(A < B) is true.\n\n\n>=\nChecks if the value of left  operand is greater than or equal to the value of right operand, if yes then condition becomes true.\n(A >= B) is not true.\n\n\n<=\nChecks if the value of left  operand is less than or equal to the value of right operand, if yes then condition becomes true.\n(A <= B) is true.\n\n \n Logical Operators \n There are following logical operators supported by C++ language. \n Assume variable A holds 1 and variable B holds 0, then \u2212 \n Show Examples \n \n\nOperator\nDescription\nExample\n\n\n&&\nCalled Logical AND  operator. If both the operands are non-zero, then condition becomes true.\n(A && B) is false.\n\n\n||\nCalled Logical OR Operator. If any of the two operands is non-zero, then condition becomes true.\n(A || B) is true.\n\n\n!\nCalled Logical NOT Operator. Use to reverses the logical state of its operand. If a condition is true, then Logical NOT operator will make false.\n!(A && B) is true.\n\n \n Bitwise Operators \n Bitwise operator works on bits and perform bit-by-bit operation. The truth tables for &, |, and ^ are as follows \u2212 \n \n\np\nq\np & q\np | q\np ^ q\n\n\n0\n0\n0\n0\n0\n\n\n0\n1\n0\n1\n1\n\n\n1\n1\n1\n1\n0\n\n\n1\n0\n0\n1\n1\n\n \n Assume if A = 60; and B = 13; now in binary format they will be as follows \u2212 \n A = 0011 1100 \n B = 0000 1101 \n ----------------- \n A&B = 0000 1100 \n A|B = 0011 1101 \n A^B = 0011 0001 \n ~A\u00a0 = 1100 0011 \n The Bitwise operators supported by C++ language are listed in the following table. Assume variable A holds 60 and variable B holds 13, then \u2212 \n Show Examples \n \n\nOperator\nDescription\nExample\n\n\n&\nBinary AND Operator copies a bit to the result if it exists in both operands. \n(A & B) will give 12 which is 0000 1100\n\n\n|\nBinary OR Operator copies a bit if it exists in either operand.\n(A | B) will give 61 which is 0011 1101\n\n\n^\nBinary XOR Operator copies the bit if it is set in one operand but not both.\n(A ^ B) will give 49 which is 0011 0001\n\n\n~\nBinary Ones Complement Operator is unary and has the effect of 'flipping' bits. \n(~A ) will give -61 which is 1100 0011 in 2's complement form due to a signed binary number.\n\n\n<<\nBinary Left Shift Operator. The left operands value is moved left by the number of bits specified by the right operand.\nA << 2 will give 240 which is 1111 0000\n\n\n>>\nBinary Right Shift Operator. The left operands value is moved right by the number of bits specified by the right operand.\nA >> 2 will give 15 which is 0000 1111\n\n \n Assignment Operators \n There are following assignment operators supported by C++ language \u2212 \n Show Examples \n \n\nOperator\nDescription\nExample\n\n\n=\nSimple assignment operator, Assigns values from right side operands to left side operand.\nC = A + B will assign value of A + B into C\n\n\n+=\nAdd AND assignment operator, It adds right operand to the left operand and assign the result to left operand.\nC += A is equivalent to C = C + A\n\n\n-=\nSubtract AND assignment operator, It subtracts right operand from the left operand and assign the result to left operand.\nC -= A is equivalent to C = C - A\n\n\n*=\nMultiply AND assignment operator, It multiplies right operand with the left operand and assign the result to left operand.\nC *= A is equivalent to C = C * A\n\n\n/=\nDivide AND assignment operator, It divides left operand with the right operand and assign the result to left operand.\nC /= A is equivalent to C = C / A\n\n\n%=\nModulus AND assignment operator, It takes modulus using two operands and assign the result to  left operand.\nC %= A is equivalent to C = C % A\n\n\n<<=\nLeft shift AND assignment operator.\nC <<= 2 is same as C = C << 2\n\n\n>>=\nRight shift AND assignment operator.\nC >>= 2 is same as C = C >> 2\n\n\n&=\nBitwise AND assignment operator.\nC &= 2 is same as C = C & 2\n\n\n^=\nBitwise exclusive OR and assignment operator.\nC ^= 2 is same as C = C ^ 2\n\n\n|=\nBitwise inclusive OR and assignment operator.\nC |= 2 is same as C = C | 2\n\n \n Misc Operators \n The following table lists some other operators that C++ supports. \n \n\nSr.No\nOperator & Description\n\n\n1\nsizeof\nsizeof operator returns the size of a variable. For example, sizeof(a), where \u2018a\u2019 is integer, and will return 4.\n\n\n2\nCondition ? X : Y\nConditional operator (?). If Condition is true then it returns value of X otherwise returns value of Y.\n\n\n3\n,\nComma operator causes a sequence of operations to be performed. The value of the entire comma expression is the value of the last expression of the comma-separated list.\n\n\n4\n. (dot) and  -> (arrow)\nMember operators are used to reference individual members of classes, structures, and unions.\n\n\n5\nCast\nCasting operators convert one data type to another. For example, int(2.2000) would return 2.\n\n\n6\n&\nPointer operator & returns the address of a variable. For example &a; will give actual address of the variable.\n\n\n7\n*\nPointer operator * is pointer to a variable. For example *var; will pointer to a variable var.\n\n \n Operators Precedence in C++ \n Operator precedence determines the grouping of terms in an expression. This affects how an expression is evaluated. Certain operators have higher precedence than others; for example, the multiplication operator has higher precedence than the addition operator \u2212 \n For example x = 7 + 3 * 2; here, x is assigned 13, not 20 because operator * has higher precedence than +, so it first gets multiplied with 3*2 and then adds into 7. \n Here, operators with the highest precedence appear at the top of the table, those with the lowest appear at the bottom. Within an expression, higher precedence operators will be evaluated first. \n Show Examples \n \n\nCategory\u00a0\nOperator\u00a0\nAssociativity\u00a0\n\n\nPostfix\u00a0\n() [] -> .  ++   - - \u00a0\nLeft to right\u00a0\n\n\nUnary\u00a0\n+  -   !  ~  ++  - - (type)*  & sizeof\u00a0\nRight to left\u00a0\n\n\nMultiplicative \u00a0\n*  /  %\u00a0\nLeft to right\u00a0\n\n\nAdditive \u00a0\n+  -\u00a0\nLeft to right\u00a0\n\n\nShift \u00a0\n<< >>\u00a0\nLeft to right\u00a0\n\n\nRelational \u00a0\n< <=  > >=\u00a0\nLeft to right\u00a0\n\n\nEquality \u00a0\n==  !=\u00a0\nLeft to right\u00a0\n\n\nBitwise AND\u00a0\n&\u00a0\nLeft to right\u00a0\n\n\nBitwise XOR\u00a0\n^\u00a0\nLeft to right\u00a0\n\n\nBitwise OR\u00a0\n|\u00a0\nLeft to right\u00a0\n\n\nLogical AND\u00a0\n&&\u00a0\nLeft to right\u00a0\n\n\nLogical OR\u00a0\n||\u00a0\nLeft to right\u00a0\n\n\nConditional\u00a0\n?:\u00a0\nRight to left\u00a0\n\n\nAssignment\u00a0\n=  +=  -=  *=  /=  %=>>=  <<=  &=  ^=   |=\u00a0\nRight to left\u00a0\n\n\nComma\u00a0\n,\u00a0\nLeft to right\u00a0\n\n \n  \n \n Previous Page\n \n \n Print\n \n \nNext Page \u00a0\n \n  \n  PRINTING ENDS HERE  \n \nAdvertisements\n<!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//-->\n\n\n \n", "title": "Operators in C++", "content_html": "<div class=\"col-md-7 middle-col\">\n<h1>Operators in C++</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/cplusplus/cpp_storage_classes.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/cplusplus/cpp_loop_types.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>An operator is a symbol that tells the compiler to perform specific mathematical or logical manipulations. C++ is rich in built-in operators and provide the following types of operators \u2212</p>\n<ul class=\"list\">\n<li>Arithmetic Operators</li>\n<li>Relational Operators</li>\n<li>Logical Operators</li>\n<li>Bitwise Operators</li>\n<li>Assignment Operators</li>\n<li>Misc Operators</li>\n</ul>\n<p>This chapter will examine the arithmetic, relational, logical, bitwise, assignment and other operators one by one.</p>\n<h2>Arithmetic Operators</h2>\n<p>There are following arithmetic operators supported by C++ language \u2212</p>\n<p>Assume variable A holds 10 and variable B holds 20, then \u2212</p>\n<p><a href=\"/cplusplus/cpp_arithmatic_operators.htm\" title=\"Arithmetic Operators in C++\">Show Examples</a></p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\" width=\"10%\">Operator</th>\n<th style=\"text-align:center;\" width=\"45%\">Description</th>\n<th style=\"text-align:center;\">Example</th>\n</tr>\n<tr>\n<td style=\"text-align:center;\">+</td>\n<td>Adds two operands</td>\n<td style=\"text-align:center;\">A + B will give 30</td>\n</tr>\n<tr>\n<td class=\"ts\">-</td>\n<td>Subtracts second operand from the first</td>\n<td class=\"ts\">A - B will give -10</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">*</td>\n<td>Multiplies both operands</td>\n<td style=\"text-align:center;\">A * B will give 200</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">/</td>\n<td>Divides numerator by de-numerator</td>\n<td style=\"text-align:center;\">B / A will give 2</td>\n</tr>\n<tr>\n<td class=\"ts\">%</td>\n<td>Modulus Operator and remainder of after an integer division</td>\n<td class=\"ts\">B % A will give 0</td>\n</tr>\n<tr>\n<td class=\"ts\">++</td>\n<td><a href=\"/cplusplus/cpp_increment_decrement_operators.htm\" title=\"Increment operator in C++\">Increment operator</a>, increases integer value by one</td>\n<td class=\"ts\">A++ will give 11</td>\n</tr>\n<tr>\n<td class=\"ts\">--</td>\n<td><a href=\"/cplusplus/cpp_increment_decrement_operators.htm\" title=\"Decrement operator in C++\">Decrement operator</a>, decreases integer value by one</td>\n<td class=\"ts\">A-- will give 9</td>\n</tr>\n</table>\n<h2>Relational Operators</h2>\n<p>There are following relational operators supported by C++ language</p>\n<p>Assume variable A holds 10 and variable B holds 20, then \u2212</p>\n<p><a href=\"/cplusplus/cpp_relational_operators.htm\" title=\"Relational Operators in C++\">Show Examples</a></p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\" width=\"10%\">Operator</th>\n<th style=\"text-align:center;\" width=\"45%\">Description</th>\n<th style=\"text-align:center;\">Example</th>\n</tr>\n<tr>\n<td class=\"ts\">==</td>\n<td>Checks if the values of two operands are equal or not, if yes then condition becomes true.</td>\n<td class=\"ts\">(A == B) is not true.</td>\n</tr>\n<tr>\n<td class=\"ts\">!=</td>\n<td>Checks if the values of two operands are equal or not, if values are not equal then condition becomes true.</td>\n<td class=\"ts\">(A != B) is true.</td>\n</tr>\n<tr>\n<td class=\"ts\">&gt;</td>\n<td>Checks if the value of left  operand is greater than the value of right operand, if yes then condition becomes true.</td>\n<td class=\"ts\">(A &gt; B) is not true.</td>\n</tr>\n<tr>\n<td class=\"ts\">&lt;</td>\n<td>Checks if the value of left  operand is less than the value of right operand, if yes then condition becomes true.</td>\n<td class=\"ts\">(A &lt; B) is true.</td>\n</tr>\n<tr>\n<td class=\"ts\">&gt;=</td>\n<td>Checks if the value of left  operand is greater than or equal to the value of right operand, if yes then condition becomes true.</td>\n<td class=\"ts\">(A &gt;= B) is not true.</td>\n</tr>\n<tr>\n<td class=\"ts\">&lt;=</td>\n<td>Checks if the value of left  operand is less than or equal to the value of right operand, if yes then condition becomes true.</td>\n<td class=\"ts\">(A &lt;= B) is true.</td>\n</tr>\n</table>\n<h2>Logical Operators</h2>\n<p>There are following logical operators supported by C++ language.</p>\n<p>Assume variable A holds 1 and variable B holds 0, then \u2212</p>\n<p><a href=\"/cplusplus/cpp_logical_operators.htm\" title=\"Logical Operators in C++\">Show Examples</a></p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\" width=\"10%\">Operator</th>\n<th style=\"text-align:center;\" width=\"45%\">Description</th>\n<th style=\"text-align:center;\">Example</th>\n</tr>\n<tr>\n<td class=\"ts\">&amp;&amp;</td>\n<td>Called Logical AND  operator. If both the operands are non-zero, then condition becomes true.</td>\n<td class=\"ts\">(A &amp;&amp; B) is false.</td>\n</tr>\n<tr>\n<td class=\"ts\">||</td>\n<td>Called Logical OR Operator. If any of the two operands is non-zero, then condition becomes true.</td>\n<td class=\"ts\">(A || B) is true.</td>\n</tr>\n<tr>\n<td class=\"ts\">!</td>\n<td>Called Logical NOT Operator. Use to reverses the logical state of its operand. If a condition is true, then Logical NOT operator will make false.</td>\n<td class=\"ts\">!(A &amp;&amp; B) is true.</td>\n</tr>\n</table>\n<h2>Bitwise Operators</h2>\n<p>Bitwise operator works on bits and perform bit-by-bit operation. The truth tables for &amp;, |, and ^ are as follows \u2212</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<th style=\"text-align:center;width:20%\">p</th>\n<th style=\"text-align:center;width:20%\">q</th>\n<th style=\"text-align:center;width:20%\">p &amp; q</th>\n<th style=\"text-align:center;width:20%\">p | q</th>\n<th style=\"text-align:center;width:20%\">p ^ q</th>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n</table>\n<p>Assume if A = 60; and B = 13; now in binary format they will be as follows \u2212</p>\n<p>A = 0011 1100</p>\n<p>B = 0000 1101</p>\n<p>-----------------</p>\n<p>A&amp;B = 0000 1100</p>\n<p>A|B = 0011 1101</p>\n<p>A^B = 0011 0001</p>\n<p>~A\u00a0 = 1100 0011</p>\n<p>The Bitwise operators supported by C++ language are listed in the following table. Assume variable A holds 60 and variable B holds 13, then \u2212</p>\n<p><a href=\"/cplusplus/cpp_bitwise_operators.htm\" title=\"Bitwise Operators in C++\">Show Examples</a></p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\" width=\"10%\">Operator</th>\n<th style=\"text-align:center;\" width=\"45%\">Description</th>\n<th style=\"text-align:center;\">Example</th>\n</tr>\n<tr>\n<td class=\"ts\">&amp;</td>\n<td>Binary AND Operator copies a bit to the result if it exists in both operands. </td>\n<td style=\"vertical-align:middle;\">(A &amp; B) will give 12 which is 0000 1100</td>\n</tr>\n<tr>\n<td class=\"ts\">|</td>\n<td>Binary OR Operator copies a bit if it exists in either operand.</td>\n<td>(A | B) will give 61 which is 0011 1101</td>\n</tr>\n<tr>\n<td class=\"ts\">^</td>\n<td>Binary XOR Operator copies the bit if it is set in one operand but not both.</td>\n<td style=\"vertical-align:middle;\">(A ^ B) will give 49 which is 0011 0001</td>\n</tr>\n<tr>\n<td class=\"ts\">~</td>\n<td>Binary Ones Complement Operator is unary and has the effect of 'flipping' bits. </td>\n<td>(~A ) will give -61 which is 1100 0011 in 2's complement form due to a signed binary number.</td>\n</tr>\n<tr>\n<td class=\"ts\">&lt;&lt;</td>\n<td>Binary Left Shift Operator. The left operands value is moved left by the number of bits specified by the right operand.</td>\n<td style=\"vertical-align:middle;\">A &lt;&lt; 2 will give 240 which is 1111 0000</td>\n</tr>\n<tr>\n<td class=\"ts\">&gt;&gt;</td>\n<td>Binary Right Shift Operator. The left operands value is moved right by the number of bits specified by the right operand.</td>\n<td style=\"vertical-align:middle;\">A &gt;&gt; 2 will give 15 which is 0000 1111</td>\n</tr>\n</table>\n<h2>Assignment Operators</h2>\n<p>There are following assignment operators supported by C++ language \u2212</p>\n<p><a href=\"/cplusplus/cpp_assignment_operators.htm\" title=\"Assignment Operators in C++\">Show Examples</a></p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\" width=\"10%\">Operator</th>\n<th style=\"text-align:center;\" width=\"48%\">Description</th>\n<th style=\"text-align:center;\">Example</th>\n</tr>\n<tr>\n<td class=\"ts\">=</td>\n<td>Simple assignment operator, Assigns values from right side operands to left side operand.</td>\n<td style=\"vertical-align:middle;\">C = A + B will assign value of A + B into C</td>\n</tr>\n<tr>\n<td class=\"ts\">+=</td>\n<td>Add AND assignment operator, It adds right operand to the left operand and assign the result to left operand.</td>\n<td style=\"vertical-align:middle;\">C += A is equivalent to C = C + A</td>\n</tr>\n<tr>\n<td class=\"ts\">-=</td>\n<td>Subtract AND assignment operator, It subtracts right operand from the left operand and assign the result to left operand.</td>\n<td style=\"vertical-align:middle;\">C -= A is equivalent to C = C - A</td>\n</tr>\n<tr>\n<td class=\"ts\">*=</td>\n<td>Multiply AND assignment operator, It multiplies right operand with the left operand and assign the result to left operand.</td>\n<td style=\"vertical-align:middle;\">C *= A is equivalent to C = C * A</td>\n</tr>\n<tr>\n<td class=\"ts\">/=</td>\n<td>Divide AND assignment operator, It divides left operand with the right operand and assign the result to left operand.</td>\n<td style=\"vertical-align:middle;\">C /= A is equivalent to C = C / A</td>\n</tr>\n<tr>\n<td class=\"ts\">%=</td>\n<td>Modulus AND assignment operator, It takes modulus using two operands and assign the result to  left operand.</td>\n<td style=\"vertical-align:middle;\">C %= A is equivalent to C = C % A</td>\n</tr>\n<tr>\n<td class=\"ts\">&lt;&lt;=</td>\n<td>Left shift AND assignment operator.</td>\n<td style=\"vertical-align:middle;\">C &lt;&lt;= 2 is same as C = C &lt;&lt; 2</td>\n</tr>\n<tr>\n<td class=\"ts\">&gt;&gt;=</td>\n<td>Right shift AND assignment operator.</td>\n<td style=\"vertical-align:middle;\">C &gt;&gt;= 2 is same as C = C &gt;&gt; 2</td>\n</tr>\n<tr>\n<td class=\"ts\">&amp;=</td>\n<td>Bitwise AND assignment operator.</td>\n<td style=\"vertical-align:middle;\">C &amp;= 2 is same as C = C &amp; 2</td>\n</tr>\n<tr>\n<td class=\"ts\">^=</td>\n<td>Bitwise exclusive OR and assignment operator.</td>\n<td style=\"vertical-align:middle;\">C ^= 2 is same as C = C ^ 2</td>\n</tr>\n<tr>\n<td class=\"ts\">|=</td>\n<td>Bitwise inclusive OR and assignment operator.</td>\n<td style=\"vertical-align:middle;\">C |= 2 is same as C = C | 2</td>\n</tr>\n</table>\n<h2>Misc Operators</h2>\n<p>The following table lists some other operators that C++ supports.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Operator &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>sizeof</b></p>\n<p><a href=\"/cplusplus/cpp_sizeof_operator.htm\">sizeof operator</a> returns the size of a variable. For example, sizeof(a), where \u2018a\u2019 is integer, and will return 4.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>Condition ? X : Y</b></p>\n<p><a href=\"/cplusplus/cpp_conditional_operator.htm\">Conditional operator (?)</a>. If Condition is true then it returns value of X otherwise returns value of Y.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>,</b></p>\n<p><a href=\"/cplusplus/cpp_comma_operator.htm\">Comma operator</a> causes a sequence of operations to be performed. The value of the entire comma expression is the value of the last expression of the comma-separated list.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>. (dot) and  -&gt; (arrow)</b></p>\n<p><a href=\"/cplusplus/cpp_member_operators.htm\">Member operators</a> are used to reference individual members of classes, structures, and unions.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>Cast</b></p>\n<p><a href=\"/cplusplus/cpp_casting_operators.htm\">Casting operators</a> convert one data type to another. For example, int(2.2000) would return 2.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><p><b>&amp;</b></p>\n<p><a href=\"/cplusplus/cpp_pointer_operators.htm\">Pointer operator &amp;</a> returns the address of a variable. For example &amp;a; will give actual address of the variable.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">7</td>\n<td><p><b>*</b></p>\n<p><a href=\"/cplusplus/cpp_pointer_operators.htm\">Pointer operator *</a> is pointer to a variable. For example *var; will pointer to a variable var.</p></td>\n</tr>\n</table>\n<h2>Operators Precedence in C++</h2>\n<p>Operator precedence determines the grouping of terms in an expression. This affects how an expression is evaluated. Certain operators have higher precedence than others; for example, the multiplication operator has higher precedence than the addition operator \u2212</p>\n<p>For example x = 7 + 3 * 2; here, x is assigned 13, not 20 because operator * has higher precedence than +, so it first gets multiplied with 3*2 and then adds into 7.</p>\n<p>Here, operators with the highest precedence appear at the top of the table, those with the lowest appear at the bottom. Within an expression, higher precedence operators will be evaluated first.</p>\n<p><a href=\"/cplusplus/cpp_operators_precedence.htm\" title=\"Operators Precedence in C++\">Show Examples</a></p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<th style=\"text-align:center;\">Category\u00a0</th>\n<th style=\"text-align:center;\">Operator\u00a0</th>\n<th style=\"text-align:center;\">Associativity\u00a0</th>\n</tr>\n<tr>\n<td>Postfix\u00a0</td>\n<td>() [] -&gt; .  ++   - - \u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Unary\u00a0</td>\n<td>+  -   !  ~  ++  - - (type)*  &amp; sizeof\u00a0</td>\n<td>Right to left\u00a0</td>\n</tr>\n<tr>\n<td>Multiplicative \u00a0</td>\n<td>*  /  %\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Additive \u00a0</td>\n<td>+  -\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Shift \u00a0</td>\n<td>&lt;&lt; &gt;&gt;\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Relational \u00a0</td>\n<td>&lt; &lt;=  &gt; &gt;=\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Equality \u00a0</td>\n<td>==  !=\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Bitwise AND\u00a0</td>\n<td>&amp;\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Bitwise XOR\u00a0</td>\n<td>^\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Bitwise OR\u00a0</td>\n<td>|\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Logical AND\u00a0</td>\n<td>&amp;&amp;\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Logical OR\u00a0</td>\n<td>||\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Conditional\u00a0</td>\n<td>?:\u00a0</td>\n<td>Right to left\u00a0</td>\n</tr>\n<tr>\n<td>Assignment\u00a0</td>\n<td>=  +=  -=  *=  /=  %=&gt;&gt;=  &lt;&lt;=  &amp;=  ^=   |=\u00a0</td>\n<td>Right to left\u00a0</td>\n</tr>\n<tr>\n<td>Comma\u00a0</td>\n<td>,\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n</table>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/cplusplus/cpp_storage_classes.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/cplusplus/cpp_loop_types.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>", "html": "<!DOCTYPE html>\n\n<!--[if IE 8]><html class=\"ie ie8\"> <![endif]-->\n<!--[if IE 9]><html class=\"ie ie9\"> <![endif]-->\n<!--[if gt IE 9]><!--> <html> <!--<![endif]-->\n<head>\n<!-- Basic -->\n<meta charset=\"utf-8\"/>\n<title>Operators in C++</title>\n<meta content=\"Operators in C++ - Learn C++ in simple and easy steps starting from basic to advanced concepts with examples including C++ Overview, Environment Setup, Basic Syntax, Comments, Data Types, Variable Types, Scope, Constants/Literals, Modifier Types, Storage Classes, Operators, Loop Types, Decision Making, Functions, Numbers, Arrays, Strings, Pointers, References, Date and Time, Basic Input/Output, Data Structures, Classes and Objects, Object Oriented Language, Methods, Overriding, Inheritance, Polymorphism, Abstraction, Encapsulation, Interfaces, Files and Streams, STL, Iterators, Algorithms, Exception Handling, Dynamic Memory, Overloading, Templates, Namespaces and Signal Handling, Preprocessor, Multithreading, Web Programming.\" name=\"description\">\n<meta content=\"C++, Tutorial, Overview, Environment Setup, Basic Syntax, Comments, Data Types, Variable Types, Scope, Constants/Literals, Modifier Types, Storage Classes, Operators, Loop Types, Decision Making, Functions, Numbers, Arrays, Strings, Pointers, References, Date and Time, Basic Input/Output, Data Structures, Classes and Objects, Object Oriented Language, Methods, Overriding, Inheritance, Polymorphism, Abstraction, Encapsulation, Interfaces, Files and Streams, STL, Iterators, Algorithms, Exception Handling, Dynamic Memory, Overloading, Templates, Namespaces and Signal Handling, Preprocessor, Multithreading, Web Programming.\" name=\"Keywords\"/>\n<base href=\"https://www.tutorialspoint.com/\"/>\n<link href=\"/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"/>\n<meta content=\"width=device-width,initial-scale=1.0,user-scalable=yes\" name=\"viewport\"/>\n<meta content=\"en_US\" property=\"og:locale\">\n<meta content=\"website\" property=\"og:type\"/>\n<meta content=\"471319149685276\" property=\"fb:app_id\"/>\n<meta content=\"www.tutorialspoint.com\" property=\"og:site_name\"/>\n<meta content=\"yes\" name=\"apple-mobile-web-app-capable\"/>\n<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"/>\n<meta content=\"tutorialspoint.com\" name=\"author\"/>\n<script src=\"https://www.tutorialspoint.com/theme/js/script-min-v4.js?v=2\" type=\"text/javascript\"></script>\n<link href=\"https://www.tutorialspoint.com/theme/css/style-min.css?v=3.1\" rel=\"stylesheet\"/>\n<script>\r\nfunction openNav() {\t\r\n  document.getElementById(\"mySidenav\").style.width = \"250px\";\r\n  document.getElementById(\"right_obs\").style.display = \"block\";\r\n}\r\nfunction closeNav() {\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\nfunction close_obs_sidenav(){\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\n</script>\n<!-- Head Libs -->\n<!--[if IE 8]>\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/theme/css/ie8.css\">\r\n<![endif]-->\n<style>\r\n#privacy-banner {\r\n    position: fixed;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    max-width: 100%;\r\n    padding: 1rem .5rem;\r\n    background: #fff;\r\n    z-index: 1030;\r\n    color: #000;\r\n    font-size: 14px;\r\n    margin: 0;\r\n    display: none;\r\n    border-top: 2px solid rgb(130, 130, 130);\r\n  }\r\n  #privacy-banner p {\r\n    margin: 0;\r\n    color: #000;\r\n    text-align: center;\r\n  }\r\n  #privacy-banner a {\r\n    text-decoration: none;\r\n    margin: 20px auto 0 auto;\r\n    display: block;\r\n    max-width: 150px;\r\n  }\r\n  #privacy-banner a:hover {\r\n    text-decoration: underline;\r\n  }\r\n  #banner-learn {\r\n    color: #000;\r\n  }\r\n  #banner-accept {\r\n    padding: 7px 15px;\r\n    color: #fff;\r\n    border-radius: 5px;\r\n    background:#737373 !important;\r\n  }\r\n  @media (min-width: 768px) {\r\n    #privacy-banner {\r\n      padding: 1.5rem .5rem;\r\n    }\r\n    #privacy-banner a {\r\n      display: inline-block;\r\n      margin: 0 10px;\r\n    }\r\n}\r\nselect{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }\r\n.btnsbmt{ background: #004481 !important;}\r\nul.nav-list.primary>li a.videolink{    background: none; margin: 0px; padding: 0px; border: 1px solid #d6d6d6;}\r\ndiv.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #004481 url(/images/pattern.png) repeat center center !important;}\r\n.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #004481 !important;}\r\n.submenu-item{ border-bottom: 2px solid #004481 !important; border-top: 2px solid #004481 !important }\r\n.ace_scroller{overflow: auto!important;}\r\na.demo{font-family: \"Open Sans\",Arial,sans-serif; background:#004481; color:#fff; font-size:13px; padding:3px 10px; border:1px solid #d6d6d6; position:absolute; right:5px; margin:-6px 17px 0px 0px;}\r\na.demo:hover{opacity:.8}\r\n</style>\n<script>\r\n$(document).ready(function() {\r\n  $('input[name=\"q\"]').keydown(function(event){\r\n    if(event.keyCode == 13) {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n  });\r\n});\r\n</script>\n</meta></meta></head>\n<body onload=\"prettyPrint()\">\n<div class=\"wrapLoader\">\n<div class=\"imgLoader\">\n<img alt=\"\" height=\"70\" src=\"/images/loading-cg.gif\" width=\"70\"/>\n</div>\n</div>\n<div class=\"display-none\" id=\"right_obs\" onclick=\"close_obs_sidenav()\"></div>\n<header>\n<div class=\"container\">\n<h1 class=\"logo\">\n<a href=\"index.htm\" title=\"tutorialspoint\">\n<img alt=\"tutorialspoint\" src=\"/cplusplus/images/logo.png\"/>\n</a>\n</h1>\n<ul class=\"tp-inline-block pull-right\" id=\"tp-head-icons\">\n<li>\n<div class=\"tp-second-nav tp-display-none tp-pointer\" onclick=\"openNav()\">\n<i class=\"fa fa-th-large fa-lg\"></i>\n</div>\n</li>\n</ul>\n<button class=\"btn btn-responsive-nav btn-inverse\" data-target=\".nav-main-collapse\" data-toggle=\"collapse\" id=\"pull\" style=\"top: 24px!important\"> <i class=\"icon icon-bars\"></i> </button>\n<nav>\n<ul class=\"nav nav-pills nav-top\">\n<li><a href=\"/about/about_careers.htm\" style=\"background: #fffb09; font-weight: bold;\"><i class=\"icon icon-suitcase\"></i> Jobs</a></li>\n<li> <a href=\"/programming_examples/\" target=\"_blank\"><i class=\"fa fa-cubes\"></i> \u00a0Examples</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/whiteboard.htm\"><img alt=\"Whiteboard\" src=\"theme/css/icons/image-editor.png\" title=\"Whiteboard\"/> \u00a0Whiteboard</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/netmeeting.php\"><i class=\"fa-camera\"></i> \u00a0Net Meeting</a> </li>\n<li> <a href=\"/online_dev_tools.htm\"> <i class=\"dev-tools-menu\" style=\"opacity:.5\"></i> Tools </a> </li>\n<li> <a href=\"/articles/index.php\"><i class=\"icon icon-file-text-o\"></i> \u00a0Articles</a> </li>\n<li class=\"top-icons\">\n<ul class=\"social-icons\">\n<li class=\"facebook\"><a data-placement=\"bottom\" href=\"https://www.facebook.com/tutorialspointindia\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Facebook\">Facebook</a></li>\n<li class=\"googleplus\"><a data-placement=\"bottom\" href=\"https://plus.google.com/u/0/116678774017490391259/posts\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Google+\">Google+</a></li>\n<li class=\"twitter\"><a data-placement=\"bottom\" href=\"https://www.twitter.com/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Twitter\">Twitter</a></li>\n<li class=\"linkedin\"><a data-placement=\"bottom\" href=\"https://www.linkedin.com/company/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Linkedin\">Linkedin</a></li>\n<li class=\"youtube\"><a data-placement=\"bottom\" href=\"https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint YouTube\">YouTube</a></li>\n</ul>\n</li>\n</ul>\n</nav>\n</div>\n<div class=\"sidenav\" id=\"mySidenav\">\n<div class=\"navbar nav-main\">\n<div class=\"container\">\n<nav class=\"nav-main mega-menu\">\n<ul class=\"nav nav-pills nav-main\" id=\"mainMenu\">\n<li class=\"dropdown no-sub-menu\"> <a class=\"dropdown\" href=\"index.htm\"><i class=\"icon icon-home\"></i> Home</a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"/questions/index.php\"><i class=\"fa fa-send\"></i> Q/A </a> </li>\n<li class=\"dropdown\"><a class=\"dropdown\" href=\"tutorialslibrary.htm\"><span class=\"tut-lib\"> Library </span></a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"videotutorials/index.htm\"><i class=\"fa-toggle-right\"></i> Videos </a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"tutor_connect/index.php\"><i class=\"fa-user\"> </i> Tutors</a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"codingground.htm\"><i class=\"fa-code\"></i> Coding Ground </a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"https://store.tutorialspoint.com/\"><i class=\"fa-usd\"></i> Store </a> </li>\n<li class=\"dropdown no-sub-menu\">\n<div class=\"searchform-popup\">\n<input autocomplete=\"off\" class=\"header-search-box\" id=\"search-string\" name=\"q\" onblur=\"if (this.value == '') {this.value = 'Search your favorite tutorials...';}\" onfocus=\"if (this.value == 'Search your favorite tutorials...') {this.value = '';}\" placeholder=\"Search your favorite tutorials...\" type=\"text\"/>\n<div class=\"magnifying-glass\"><i class=\"icon-search\"></i> Search </div>\n</div>\n</li>\n</ul>\n</nav>\n</div>\n</div>\n</div>\n</header></body></html>\n\n<div style=\"clear:both;\"></div>\n<div class=\"main\" role=\"main\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-2\">\n<aside class=\"sidebar\">\n<style>\r\n.ts {\r\n   text-align:center !important;\r\n   vertical-align:middle !important;\r\n}\r\n</style>\n<div class=\"mini-logo\">\n<img alt=\"C++ Tutorial\" src=\"/cplusplus/images/cpp-mini-logo.jpg\">\n</img></div>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">C++ Basics</li>\n<li><a href=\"/cplusplus/index.htm\">C++ Home</a></li>\n<li><a href=\"/cplusplus/cpp_overview.htm\">C++ Overview</a></li>\n<li><a href=\"/cplusplus/cpp_environment_setup.htm\">C++ Environment Setup</a></li>\n<li><a href=\"/cplusplus/cpp_basic_syntax.htm\">C++ Basic Syntax</a></li>\n<li><a href=\"/cplusplus/cpp_comments.htm\">C++ Comments</a></li>\n<li><a href=\"/cplusplus/cpp_data_types.htm\">C++ Data Types</a></li>\n<li><a href=\"/cplusplus/cpp_variable_types.htm\">C++ Variable Types</a></li>\n<li><a href=\"/cplusplus/cpp_variable_scope.htm\">C++ Variable Scope</a></li>\n<li><a href=\"/cplusplus/cpp_constants_literals.htm\">C++ Constants/Literals</a></li>\n<li><a href=\"/cplusplus/cpp_modifier_types.htm\">C++ Modifier Types</a></li>\n<li><a href=\"/cplusplus/cpp_storage_classes.htm\">C++ Storage Classes</a></li>\n<li><a href=\"/cplusplus/cpp_operators.htm\">C++ Operators</a></li>\n<li><a href=\"/cplusplus/cpp_loop_types.htm\">C++ Loop Types</a></li>\n<li><a href=\"/cplusplus/cpp_decision_making.htm\">C++ Decision Making</a></li>\n<li><a href=\"/cplusplus/cpp_functions.htm\">C++ Functions</a></li>\n<li><a href=\"/cplusplus/cpp_numbers.htm\">C++ Numbers</a></li>\n<li><a href=\"/cplusplus/cpp_arrays.htm\">C++ Arrays</a></li>\n<li><a href=\"/cplusplus/cpp_strings.htm\">C++ Strings</a></li>\n<li><a href=\"/cplusplus/cpp_pointers.htm\">C++ Pointers</a></li>\n<li><a href=\"/cplusplus/cpp_references.htm\">C++ References</a></li>\n<li><a href=\"/cplusplus/cpp_date_time.htm\">C++ Date &amp; Time</a></li>\n<li><a href=\"/cplusplus/cpp_basic_input_output.htm\">C++ Basic Input/Output</a></li>\n<li><a href=\"/cplusplus/cpp_data_structures.htm\">C++ Data Structures</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">C++ Object Oriented</li>\n<li><a href=\"/cplusplus/cpp_classes_objects.htm\">C++ Classes &amp; Objects</a></li>\n<li><a href=\"/cplusplus/cpp_inheritance.htm\">C++ Inheritance</a></li>\n<li><a href=\"/cplusplus/cpp_overloading.htm\">C++ Overloading</a></li>\n<li><a href=\"/cplusplus/cpp_polymorphism.htm\">C++ Polymorphism</a></li>\n<li><a href=\"/cplusplus/cpp_data_abstraction.htm\">C++ Abstraction</a></li>\n<li><a href=\"/cplusplus/cpp_data_encapsulation.htm\">C++ Encapsulation</a></li>\n<li><a href=\"/cplusplus/cpp_interfaces.htm\">C++ Interfaces</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">C++ Advanced</li>\n<li><a href=\"/cplusplus/cpp_files_streams.htm\">C++ Files and Streams</a></li>\n<li><a href=\"/cplusplus/cpp_exceptions_handling.htm\">C++ Exception Handling</a></li>\n<li><a href=\"/cplusplus/cpp_dynamic_memory.htm\">C++ Dynamic Memory</a></li>\n<li><a href=\"/cplusplus/cpp_namespaces.htm\">C++ Namespaces</a></li>\n<li><a href=\"/cplusplus/cpp_templates.htm\">C++ Templates</a></li>\n<li><a href=\"/cplusplus/cpp_preprocessor.htm\">C++ Preprocessor</a></li>\n<li><a href=\"/cplusplus/cpp_signal_handling.htm\">C++ Signal Handling</a></li>\n<li><a href=\"/cplusplus/cpp_multithreading.htm\">C++ Multithreading</a></li>\n<li><a href=\"/cplusplus/cpp_web_programming.htm\">C++ Web Programming</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">C++ Useful Resources</li>\n<li><a href=\"/cplusplus/cpp_questions_answers.htm\">C++ Questions and Answers</a></li>\n<li><a href=\"/cplusplus/cpp_quick_guide.htm\">C++ Quick Guide</a></li>\n<li><a href=\"/cplusplus/cpp_object_oriented.htm\">C++ Object Oriented</a></li>\n<li><a href=\"/cplusplus/cpp_stl_tutorial.htm\">C++ STL Tutorial</a></li>\n<li><a href=\"/cplusplus/cpp_standard_library.htm\">C++ Standard Library</a></li>\n<li><a href=\"/cplusplus/cpp_useful_resources.htm\">C++ Useful Resources</a></li>\n<li><a href=\"/cplusplus/cpp_discussion.htm\">C++ Discussion</a></li>\n</ul>\n<ul class=\"nav nav-list primary push-bottom left-menu special\">\n<li class=\"sreading\">Selected Reading</li>\n<li><a href=\"/upsc_ias_exams.htm\" target=\"_top\">UPSC IAS Exams Notes</a></li>\n<li><a href=\"/developers_best_practices/index.htm\" target=\"_top\">Developer's Best Practices</a></li>\n<li><a href=\"/questions_and_answers.htm\" target=\"_top\">Questions and Answers</a></li>\n<li><a href=\"/effective_resume_writing.htm\" target=\"_top\">Effective Resume Writing</a></li>\n<li><a href=\"/hr_interview_questions/index.htm\" target=\"_top\">HR Interview Questions</a></li>\n<li><a href=\"/computer_glossary.htm\" target=\"_top\">Computer Glossary</a></li>\n<li><a href=\"/computer_whoiswho.htm\" target=\"_top\">Who is Who</a></li>\n</ul>\n</aside>\n</div>\n<!-- PRINTING STARTS HERE -->\n<div class=\"row\">\n<div class=\"content\">\n<div class=\"col-md-7 middle-col\">\n<h1>Operators in C++</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/cplusplus/cpp_storage_classes.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/cplusplus/cpp_loop_types.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>An operator is a symbol that tells the compiler to perform specific mathematical or logical manipulations. C++ is rich in built-in operators and provide the following types of operators \u2212</p>\n<ul class=\"list\">\n<li>Arithmetic Operators</li>\n<li>Relational Operators</li>\n<li>Logical Operators</li>\n<li>Bitwise Operators</li>\n<li>Assignment Operators</li>\n<li>Misc Operators</li>\n</ul>\n<p>This chapter will examine the arithmetic, relational, logical, bitwise, assignment and other operators one by one.</p>\n<h2>Arithmetic Operators</h2>\n<p>There are following arithmetic operators supported by C++ language \u2212</p>\n<p>Assume variable A holds 10 and variable B holds 20, then \u2212</p>\n<p><a href=\"/cplusplus/cpp_arithmatic_operators.htm\" title=\"Arithmetic Operators in C++\">Show Examples</a></p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\" width=\"10%\">Operator</th>\n<th style=\"text-align:center;\" width=\"45%\">Description</th>\n<th style=\"text-align:center;\">Example</th>\n</tr>\n<tr>\n<td style=\"text-align:center;\">+</td>\n<td>Adds two operands</td>\n<td style=\"text-align:center;\">A + B will give 30</td>\n</tr>\n<tr>\n<td class=\"ts\">-</td>\n<td>Subtracts second operand from the first</td>\n<td class=\"ts\">A - B will give -10</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">*</td>\n<td>Multiplies both operands</td>\n<td style=\"text-align:center;\">A * B will give 200</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">/</td>\n<td>Divides numerator by de-numerator</td>\n<td style=\"text-align:center;\">B / A will give 2</td>\n</tr>\n<tr>\n<td class=\"ts\">%</td>\n<td>Modulus Operator and remainder of after an integer division</td>\n<td class=\"ts\">B % A will give 0</td>\n</tr>\n<tr>\n<td class=\"ts\">++</td>\n<td><a href=\"/cplusplus/cpp_increment_decrement_operators.htm\" title=\"Increment operator in C++\">Increment operator</a>, increases integer value by one</td>\n<td class=\"ts\">A++ will give 11</td>\n</tr>\n<tr>\n<td class=\"ts\">--</td>\n<td><a href=\"/cplusplus/cpp_increment_decrement_operators.htm\" title=\"Decrement operator in C++\">Decrement operator</a>, decreases integer value by one</td>\n<td class=\"ts\">A-- will give 9</td>\n</tr>\n</table>\n<h2>Relational Operators</h2>\n<p>There are following relational operators supported by C++ language</p>\n<p>Assume variable A holds 10 and variable B holds 20, then \u2212</p>\n<p><a href=\"/cplusplus/cpp_relational_operators.htm\" title=\"Relational Operators in C++\">Show Examples</a></p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\" width=\"10%\">Operator</th>\n<th style=\"text-align:center;\" width=\"45%\">Description</th>\n<th style=\"text-align:center;\">Example</th>\n</tr>\n<tr>\n<td class=\"ts\">==</td>\n<td>Checks if the values of two operands are equal or not, if yes then condition becomes true.</td>\n<td class=\"ts\">(A == B) is not true.</td>\n</tr>\n<tr>\n<td class=\"ts\">!=</td>\n<td>Checks if the values of two operands are equal or not, if values are not equal then condition becomes true.</td>\n<td class=\"ts\">(A != B) is true.</td>\n</tr>\n<tr>\n<td class=\"ts\">&gt;</td>\n<td>Checks if the value of left  operand is greater than the value of right operand, if yes then condition becomes true.</td>\n<td class=\"ts\">(A &gt; B) is not true.</td>\n</tr>\n<tr>\n<td class=\"ts\">&lt;</td>\n<td>Checks if the value of left  operand is less than the value of right operand, if yes then condition becomes true.</td>\n<td class=\"ts\">(A &lt; B) is true.</td>\n</tr>\n<tr>\n<td class=\"ts\">&gt;=</td>\n<td>Checks if the value of left  operand is greater than or equal to the value of right operand, if yes then condition becomes true.</td>\n<td class=\"ts\">(A &gt;= B) is not true.</td>\n</tr>\n<tr>\n<td class=\"ts\">&lt;=</td>\n<td>Checks if the value of left  operand is less than or equal to the value of right operand, if yes then condition becomes true.</td>\n<td class=\"ts\">(A &lt;= B) is true.</td>\n</tr>\n</table>\n<h2>Logical Operators</h2>\n<p>There are following logical operators supported by C++ language.</p>\n<p>Assume variable A holds 1 and variable B holds 0, then \u2212</p>\n<p><a href=\"/cplusplus/cpp_logical_operators.htm\" title=\"Logical Operators in C++\">Show Examples</a></p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\" width=\"10%\">Operator</th>\n<th style=\"text-align:center;\" width=\"45%\">Description</th>\n<th style=\"text-align:center;\">Example</th>\n</tr>\n<tr>\n<td class=\"ts\">&amp;&amp;</td>\n<td>Called Logical AND  operator. If both the operands are non-zero, then condition becomes true.</td>\n<td class=\"ts\">(A &amp;&amp; B) is false.</td>\n</tr>\n<tr>\n<td class=\"ts\">||</td>\n<td>Called Logical OR Operator. If any of the two operands is non-zero, then condition becomes true.</td>\n<td class=\"ts\">(A || B) is true.</td>\n</tr>\n<tr>\n<td class=\"ts\">!</td>\n<td>Called Logical NOT Operator. Use to reverses the logical state of its operand. If a condition is true, then Logical NOT operator will make false.</td>\n<td class=\"ts\">!(A &amp;&amp; B) is true.</td>\n</tr>\n</table>\n<h2>Bitwise Operators</h2>\n<p>Bitwise operator works on bits and perform bit-by-bit operation. The truth tables for &amp;, |, and ^ are as follows \u2212</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<th style=\"text-align:center;width:20%\">p</th>\n<th style=\"text-align:center;width:20%\">q</th>\n<th style=\"text-align:center;width:20%\">p &amp; q</th>\n<th style=\"text-align:center;width:20%\">p | q</th>\n<th style=\"text-align:center;width:20%\">p ^ q</th>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n</table>\n<p>Assume if A = 60; and B = 13; now in binary format they will be as follows \u2212</p>\n<p>A = 0011 1100</p>\n<p>B = 0000 1101</p>\n<p>-----------------</p>\n<p>A&amp;B = 0000 1100</p>\n<p>A|B = 0011 1101</p>\n<p>A^B = 0011 0001</p>\n<p>~A\u00a0 = 1100 0011</p>\n<p>The Bitwise operators supported by C++ language are listed in the following table. Assume variable A holds 60 and variable B holds 13, then \u2212</p>\n<p><a href=\"/cplusplus/cpp_bitwise_operators.htm\" title=\"Bitwise Operators in C++\">Show Examples</a></p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\" width=\"10%\">Operator</th>\n<th style=\"text-align:center;\" width=\"45%\">Description</th>\n<th style=\"text-align:center;\">Example</th>\n</tr>\n<tr>\n<td class=\"ts\">&amp;</td>\n<td>Binary AND Operator copies a bit to the result if it exists in both operands. </td>\n<td style=\"vertical-align:middle;\">(A &amp; B) will give 12 which is 0000 1100</td>\n</tr>\n<tr>\n<td class=\"ts\">|</td>\n<td>Binary OR Operator copies a bit if it exists in either operand.</td>\n<td>(A | B) will give 61 which is 0011 1101</td>\n</tr>\n<tr>\n<td class=\"ts\">^</td>\n<td>Binary XOR Operator copies the bit if it is set in one operand but not both.</td>\n<td style=\"vertical-align:middle;\">(A ^ B) will give 49 which is 0011 0001</td>\n</tr>\n<tr>\n<td class=\"ts\">~</td>\n<td>Binary Ones Complement Operator is unary and has the effect of 'flipping' bits. </td>\n<td>(~A ) will give -61 which is 1100 0011 in 2's complement form due to a signed binary number.</td>\n</tr>\n<tr>\n<td class=\"ts\">&lt;&lt;</td>\n<td>Binary Left Shift Operator. The left operands value is moved left by the number of bits specified by the right operand.</td>\n<td style=\"vertical-align:middle;\">A &lt;&lt; 2 will give 240 which is 1111 0000</td>\n</tr>\n<tr>\n<td class=\"ts\">&gt;&gt;</td>\n<td>Binary Right Shift Operator. The left operands value is moved right by the number of bits specified by the right operand.</td>\n<td style=\"vertical-align:middle;\">A &gt;&gt; 2 will give 15 which is 0000 1111</td>\n</tr>\n</table>\n<h2>Assignment Operators</h2>\n<p>There are following assignment operators supported by C++ language \u2212</p>\n<p><a href=\"/cplusplus/cpp_assignment_operators.htm\" title=\"Assignment Operators in C++\">Show Examples</a></p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\" width=\"10%\">Operator</th>\n<th style=\"text-align:center;\" width=\"48%\">Description</th>\n<th style=\"text-align:center;\">Example</th>\n</tr>\n<tr>\n<td class=\"ts\">=</td>\n<td>Simple assignment operator, Assigns values from right side operands to left side operand.</td>\n<td style=\"vertical-align:middle;\">C = A + B will assign value of A + B into C</td>\n</tr>\n<tr>\n<td class=\"ts\">+=</td>\n<td>Add AND assignment operator, It adds right operand to the left operand and assign the result to left operand.</td>\n<td style=\"vertical-align:middle;\">C += A is equivalent to C = C + A</td>\n</tr>\n<tr>\n<td class=\"ts\">-=</td>\n<td>Subtract AND assignment operator, It subtracts right operand from the left operand and assign the result to left operand.</td>\n<td style=\"vertical-align:middle;\">C -= A is equivalent to C = C - A</td>\n</tr>\n<tr>\n<td class=\"ts\">*=</td>\n<td>Multiply AND assignment operator, It multiplies right operand with the left operand and assign the result to left operand.</td>\n<td style=\"vertical-align:middle;\">C *= A is equivalent to C = C * A</td>\n</tr>\n<tr>\n<td class=\"ts\">/=</td>\n<td>Divide AND assignment operator, It divides left operand with the right operand and assign the result to left operand.</td>\n<td style=\"vertical-align:middle;\">C /= A is equivalent to C = C / A</td>\n</tr>\n<tr>\n<td class=\"ts\">%=</td>\n<td>Modulus AND assignment operator, It takes modulus using two operands and assign the result to  left operand.</td>\n<td style=\"vertical-align:middle;\">C %= A is equivalent to C = C % A</td>\n</tr>\n<tr>\n<td class=\"ts\">&lt;&lt;=</td>\n<td>Left shift AND assignment operator.</td>\n<td style=\"vertical-align:middle;\">C &lt;&lt;= 2 is same as C = C &lt;&lt; 2</td>\n</tr>\n<tr>\n<td class=\"ts\">&gt;&gt;=</td>\n<td>Right shift AND assignment operator.</td>\n<td style=\"vertical-align:middle;\">C &gt;&gt;= 2 is same as C = C &gt;&gt; 2</td>\n</tr>\n<tr>\n<td class=\"ts\">&amp;=</td>\n<td>Bitwise AND assignment operator.</td>\n<td style=\"vertical-align:middle;\">C &amp;= 2 is same as C = C &amp; 2</td>\n</tr>\n<tr>\n<td class=\"ts\">^=</td>\n<td>Bitwise exclusive OR and assignment operator.</td>\n<td style=\"vertical-align:middle;\">C ^= 2 is same as C = C ^ 2</td>\n</tr>\n<tr>\n<td class=\"ts\">|=</td>\n<td>Bitwise inclusive OR and assignment operator.</td>\n<td style=\"vertical-align:middle;\">C |= 2 is same as C = C | 2</td>\n</tr>\n</table>\n<h2>Misc Operators</h2>\n<p>The following table lists some other operators that C++ supports.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Operator &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>sizeof</b></p>\n<p><a href=\"/cplusplus/cpp_sizeof_operator.htm\">sizeof operator</a> returns the size of a variable. For example, sizeof(a), where \u2018a\u2019 is integer, and will return 4.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>Condition ? X : Y</b></p>\n<p><a href=\"/cplusplus/cpp_conditional_operator.htm\">Conditional operator (?)</a>. If Condition is true then it returns value of X otherwise returns value of Y.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>,</b></p>\n<p><a href=\"/cplusplus/cpp_comma_operator.htm\">Comma operator</a> causes a sequence of operations to be performed. The value of the entire comma expression is the value of the last expression of the comma-separated list.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>. (dot) and  -&gt; (arrow)</b></p>\n<p><a href=\"/cplusplus/cpp_member_operators.htm\">Member operators</a> are used to reference individual members of classes, structures, and unions.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>Cast</b></p>\n<p><a href=\"/cplusplus/cpp_casting_operators.htm\">Casting operators</a> convert one data type to another. For example, int(2.2000) would return 2.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><p><b>&amp;</b></p>\n<p><a href=\"/cplusplus/cpp_pointer_operators.htm\">Pointer operator &amp;</a> returns the address of a variable. For example &amp;a; will give actual address of the variable.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">7</td>\n<td><p><b>*</b></p>\n<p><a href=\"/cplusplus/cpp_pointer_operators.htm\">Pointer operator *</a> is pointer to a variable. For example *var; will pointer to a variable var.</p></td>\n</tr>\n</table>\n<h2>Operators Precedence in C++</h2>\n<p>Operator precedence determines the grouping of terms in an expression. This affects how an expression is evaluated. Certain operators have higher precedence than others; for example, the multiplication operator has higher precedence than the addition operator \u2212</p>\n<p>For example x = 7 + 3 * 2; here, x is assigned 13, not 20 because operator * has higher precedence than +, so it first gets multiplied with 3*2 and then adds into 7.</p>\n<p>Here, operators with the highest precedence appear at the top of the table, those with the lowest appear at the bottom. Within an expression, higher precedence operators will be evaluated first.</p>\n<p><a href=\"/cplusplus/cpp_operators_precedence.htm\" title=\"Operators Precedence in C++\">Show Examples</a></p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<th style=\"text-align:center;\">Category\u00a0</th>\n<th style=\"text-align:center;\">Operator\u00a0</th>\n<th style=\"text-align:center;\">Associativity\u00a0</th>\n</tr>\n<tr>\n<td>Postfix\u00a0</td>\n<td>() [] -&gt; .  ++   - - \u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Unary\u00a0</td>\n<td>+  -   !  ~  ++  - - (type)*  &amp; sizeof\u00a0</td>\n<td>Right to left\u00a0</td>\n</tr>\n<tr>\n<td>Multiplicative \u00a0</td>\n<td>*  /  %\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Additive \u00a0</td>\n<td>+  -\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Shift \u00a0</td>\n<td>&lt;&lt; &gt;&gt;\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Relational \u00a0</td>\n<td>&lt; &lt;=  &gt; &gt;=\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Equality \u00a0</td>\n<td>==  !=\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Bitwise AND\u00a0</td>\n<td>&amp;\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Bitwise XOR\u00a0</td>\n<td>^\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Bitwise OR\u00a0</td>\n<td>|\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Logical AND\u00a0</td>\n<td>&amp;&amp;\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Logical OR\u00a0</td>\n<td>||\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Conditional\u00a0</td>\n<td>?:\u00a0</td>\n<td>Right to left\u00a0</td>\n</tr>\n<tr>\n<td>Assignment\u00a0</td>\n<td>=  +=  -=  *=  /=  %=&gt;&gt;=  &lt;&lt;=  &amp;=  ^=   |=\u00a0</td>\n<td>Right to left\u00a0</td>\n</tr>\n<tr>\n<td>Comma\u00a0</td>\n<td>,\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n</table>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/cplusplus/cpp_storage_classes.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/cplusplus/cpp_loop_types.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n<div class=\"row\">\n<div class=\"col-md-3\" id=\"rightbar\">\n<div class=\"simple-ad\">\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.facebook.com/sharer.php?u=' + 'https://www.tutorialspoint.com/cplusplus/cpp_operators.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/facebookIcon.jpg\">\n</img></a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://twitter.com/share?url=' + 'https://www.tutorialspoint.com/cplusplus/cpp_operators.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/twitterIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'https://www.tutorialspoint.com/cplusplus/cpp_operators.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/linkedinIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=https://www.tutorialspoint.com/cplusplus/cpp_operators.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/googlePlusIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.stumbleupon.com/submit?url=https://www.tutorialspoint.com/cplusplus/cpp_operators.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/StumbleUponIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://reddit.com/submit?url=https://www.tutorialspoint.com/cplusplus/cpp_operators.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/reddit.jpg\"/>\n</a>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\ngoogle_ad_format = \"300x250_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 600;\ngoogle_ad_format = \"300x600_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"ca-pub-2537027957187252\";\n/* Right Side Ad */\ngoogle_ad_slot = \"right_side_ad\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\n//-->\n</script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"footer-copyright\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-1\">\n<a class=\"logo\" href=\"index.htm\"> <img alt=\"Tutorials Point\" class=\"img-responsive\" src=\"/scripts/img/logo-footer.png\"/> </a>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<nav id=\"sub-menu\">\n<ul>\n<li><a href=\"/about/about_privacy.htm\">Privacy Policy</a></li>\n<li><a href=\"/about/about_cookies.htm\">Cookies Policy</a></li>\n<li><a href=\"/about/contact_us.htm\">Contact</a></li>\n</ul>\n</nav>\n</div>\n<div class=\"col-md-3 col-sm-12 col-xs-12\">\n<p>\u00a9 Copyright 2019. All Rights Reserved.</p>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<div class=\"news-group\">\n<input autocomplete=\"off\" class=\"form-control-foot search\" id=\"textemail\" name=\"textemail\" onblur=\"if (this.value == '') {this.value = 'Enter email for newsletter...';}\" onfocus=\"if (this.value == 'Enter email for newsletter...') {this.value = '';}\" placeholder=\"Enter email for newsletter\" type=\"text\"/>\n<span class=\"input-group-btn\"> <button class=\"btn btn-default btn-footer\" id=\"btnemail\" onclick=\"javascript:void(0);\" type=\"submit\">go</button> </span>\n<div id=\"newsresponse\"></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"privacy-banner\">\n<div>\n<p>\n      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.\n      <a href=\"javascript:void(0)\" id=\"banner-accept\">Accept</a>\n<a href=\"/about/about_cookies.htm\" id=\"banner-learn\" target=\"_blank\">Learn more</a>\n</p>\n</div>\n</div>\n<script>\n// Banner Trigger if Not Closed\nif (!localStorage.bannerClosed) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n} else {\n  document.getElementById('privacy-banner').style.display = \"none\";\n}\ndocument.getElementById('banner-accept').addEventListener('click', function() {\n  document.getElementById('privacy-banner').style.display = \"none\";\n  localStorage.bannerClosed = 'true';\n});\nif (navigator.userAgent.match(/Opera|OPR\\//)) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n}\n</script>\n<!-- Libs -->\n<script src=\"/theme/js/custom-min.js?v=7\"></script>\n<script src=\"https://www.google-analytics.com/urchin.js\">\n</script>\n<script>\n_uacct = \"UA-232293-6\";\nurchinTracker();\n$('.pg-icon').click(function(){\n   $('.wrapLoader').show();\n});\n</script>\n\n\n\n", "url": "https://www.tutorialspoint.com/cplusplus/cpp_operators.htm", "title_html": "<h1>Operators in C++</h1>"}