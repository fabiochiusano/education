{"content": "\n C++ Date and Time \n  \n Advertisements \n \n<!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//-->\n\n\n \n  \n \n Previous Page\n \n \nNext Page \u00a0\n \n  \n  \n The C++ standard library does not provide a proper date type. C++ inherits the structs and functions for date and time manipulation from C. To access date and time related functions and structures, you would need to include <ctime> header file in your C++ program. \n There are four time-related types: clock_t, time_t, size_t, and tm. The types - clock_t, size_t and time_t are capable of representing the system time and date as some sort of integer. \n The structure type tm holds the date and time in the form of a C structure having the following elements \u2212 \n \nstruct tm {\n   int tm_sec;   // seconds of minutes from 0 to 61\n   int tm_min;   // minutes of hour from 0 to 59\n   int tm_hour;  // hours of day from 0 to 24\n   int tm_mday;  // day of month from 1 to 31\n   int tm_mon;   // month of year from 0 to 11\n   int tm_year;  // year since 1900\n   int tm_wday;  // days since sunday\n   int tm_yday;  // days since January 1st\n   int tm_isdst; // hours of daylight savings time\n}\n \n Following are the important functions, which we use while working with date and time in C or C++. All these functions are part of standard C and C++ library and you can check their detail using reference to C++ standard library given below. \n \n\nSr.No\nFunction & Purpose\n\n\n1\ntime_t time(time_t *time);\nThis returns the current calendar time of the system in number of seconds elapsed since January 1, 1970. If the system has no time, .1 is returned.\n\n\n\n2\nchar *ctime(const time_t *time);\nThis returns a pointer to a string of the form day month year hours:minutes:seconds year\\n\\0.\n\n\n\n3\nstruct tm *localtime(const time_t *time);\nThis returns a pointer to the tm structure representing local time.\n\n\n\n4\nclock_t clock(void);\nThis returns a value that approximates the amount of time the calling program has been running. A value of .1 is returned if the time is not available.\n\n\n\n5\nchar * asctime ( const struct tm * time );\nThis returns a pointer to a string that contains the information stored in the structure pointed to by time converted into the form: day month date hours:minutes:seconds year\\n\\0\n\n\n\n6\nstruct tm *gmtime(const time_t *time);\nThis returns a pointer to the time in the form of a tm structure. The time is represented in Coordinated Universal Time (UTC), which is essentially Greenwich Mean Time (GMT).\n\n\n\n7\ntime_t mktime(struct tm *time);\nThis returns the calendar-time equivalent of the time found in the structure pointed to by time.\n\n\n\n8\ndouble difftime ( time_t time2, time_t time1 );\nThis function calculates the difference in seconds between time1 and time2.\n\n\n\n9\nsize_t strftime();\nThis function can be used to format date and time in a specific format.\n\n\n \n Current Date and Time \n Suppose you want to retrieve the current system date and time, either as a local time or as a Coordinated Universal Time (UTC). Following is the example to achieve the same \u2212 \n  Live Demo \n \n#include <iostream>\n#include <ctime>\n\nusing namespace std;\n\nint main() {\n   // current date/time based on current system\n   time_t now = time(0);\n   \n   // convert now to string form\n   char* dt = ctime(&now);\n\n   cout << \"The local date and time is: \" << dt << endl;\n\n   // convert now to tm struct for UTC\n   tm *gmtm = gmtime(&now);\n   dt = asctime(gmtm);\n   cout << \"The UTC date and time is:\"<< dt << endl;\n}\n \n When the above code is compiled and executed, it produces the following result \u2212 \n \nThe local date and time is: Sat Jan  8 20:07:41 2011\n\nThe UTC date and time is:Sun Jan  9 03:07:41 2011\n \n Format Time using struct tm \n The tm structure is very important while working with date and time in either C or C++. This structure holds the date and time in the form of a C structure as mentioned above. Most of the time related functions makes use of tm structure. Following is an example which makes use of various date and time related functions and tm structure \u2212 \n While using structure in this chapter, I'm making an assumption that you have basic understanding on C structure and how to access structure members using arrow -> operator. \n  Live Demo \n \n#include <iostream>\n#include <ctime>\n\nusing namespace std;\n\nint main() {\n   // current date/time based on current system\n   time_t now = time(0);\n\n   cout << \"Number of sec since January 1,1970:\" << now << endl;\n\n   tm *ltm = localtime(&now);\n\n   // print various components of tm structure.\n   cout << \"Year\" << 1970 + ltm->tm_year<<endl;\n   cout << \"Month: \"<< 1 + ltm->tm_mon<< endl;\n   cout << \"Day: \"<<  ltm->tm_mday << endl;\n   cout << \"Time: \"<< 1 + ltm->tm_hour << \":\";\n   cout << 1 + ltm->tm_min << \":\";\n   cout << 1 + ltm->tm_sec << endl;\n}\n \n When the above code is compiled and executed, it produces the following result \u2212 \n \nNumber of sec since January 1, 1970:1294548238\nYear: 2011\nMonth: 1\nDay: 8\nTime: 22: 44:59\n \n  \n \n Previous Page\n \n \n Print\n \n \nNext Page \u00a0\n \n  \n  PRINTING ENDS HERE  \n \nAdvertisements\n<!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//-->\n\n\n \n", "title": "C++ Date and Time", "content_html": "<div class=\"col-md-7 middle-col\">\n<h1>C++ Date and Time</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/cplusplus/cpp_references.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/cplusplus/cpp_basic_input_output.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>The C++ standard library does not provide a proper date type. C++ inherits the structs and functions for date and time manipulation from C. To access date and time related functions and structures, you would need to include &lt;ctime&gt; header file in your C++ program.</p>\n<p>There are four time-related types: <b>clock_t, time_t, size_t</b>, and <b>tm</b>. The types - clock_t, size_t and time_t are capable of representing the system time and date as some sort of integer.</p>\n<p>The structure type <b>tm</b> holds the date and time in the form of a C structure having the following elements \u2212</p>\n<pre class=\"result notranslate\">\nstruct tm {\n   int tm_sec;   // seconds of minutes from 0 to 61\n   int tm_min;   // minutes of hour from 0 to 59\n   int tm_hour;  // hours of day from 0 to 24\n   int tm_mday;  // day of month from 1 to 31\n   int tm_mon;   // month of year from 0 to 11\n   int tm_year;  // year since 1900\n   int tm_wday;  // days since sunday\n   int tm_yday;  // days since January 1st\n   int tm_isdst; // hours of daylight savings time\n}\n</pre>\n<p>Following are the important functions, which we use while working with date and time in C or C++. All these functions are part of standard C and C++ library and you can check their detail using reference to C++ standard library given below.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Function &amp; Purpose</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>time_t time(time_t *time);</b></p>\n<p>This returns the current calendar time of the system in number of seconds elapsed since January 1, 1970. If the system has no time, .1 is returned.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>char *ctime(const time_t *time);</b></p>\n<p>This returns a pointer to a string of the form <i>day month year hours:minutes:seconds year\\n\\0</i>.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>struct tm *localtime(const time_t *time);</b></p>\n<p>This returns a pointer to the <b>tm</b> structure representing local time.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>clock_t clock(void);</b></p>\n<p>This returns a value that approximates the amount of time the calling program has been running. A value of .1 is returned if the time is not available.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>char * asctime ( const struct tm * time );</b></p>\n<p>This returns a pointer to a string that contains the information stored in the structure pointed to by time converted into the form: day month date hours:minutes:seconds year\\n\\0</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><p><b>struct tm *gmtime(const time_t *time);</b></p>\n<p>This returns a pointer to the time in the form of a tm structure. The time is represented in Coordinated Universal Time (UTC), which is essentially Greenwich Mean Time (GMT).</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">7</td>\n<td><p><b>time_t mktime(struct tm *time);</b></p>\n<p>This returns the calendar-time equivalent of the time found in the structure pointed to by time.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">8</td>\n<td><p><b>double difftime ( time_t time2, time_t time1 );</b></p>\n<p>This function calculates the difference in seconds between time1 and time2.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">9</td>\n<td><p><b>size_t strftime();</b></p>\n<p>This function can be used to format date and time in a specific format.</p>\n</td>\n</tr>\n</table>\n<h2>Current Date and Time</h2>\n<p>Suppose you want to retrieve the current system date and time, either as a local time or as a Coordinated Universal Time (UTC). Following is the example to achieve the same \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/DHKMA9\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;ctime&gt;\n\nusing namespace std;\n\nint main() {\n   // current date/time based on current system\n   time_t now = time(0);\n   \n   // convert now to string form\n   char* dt = ctime(&amp;now);\n\n   cout &lt;&lt; \"The local date and time is: \" &lt;&lt; dt &lt;&lt; endl;\n\n   // convert now to tm struct for UTC\n   tm *gmtm = gmtime(&amp;now);\n   dt = asctime(gmtm);\n   cout &lt;&lt; \"The UTC date and time is:\"&lt;&lt; dt &lt;&lt; endl;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nThe local date and time is: Sat Jan  8 20:07:41 2011\n\nThe UTC date and time is:Sun Jan  9 03:07:41 2011\n</pre>\n<h2>Format Time using struct tm</h2>\n<p>The <b>tm</b> structure is very important while working with date and time in either C or C++. This structure holds the date and time in the form of a C structure as mentioned above. Most of the time related functions makes use of tm structure. Following is an example which makes use of various date and time related functions and tm structure \u2212</p>\n<p>While using structure in this chapter, I'm making an assumption that you have basic understanding on C structure and how to access structure members using arrow -&gt; operator.</p>\n<a class=\"demo\" href=\"http://tpcg.io/SMnO0N\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;ctime&gt;\n\nusing namespace std;\n\nint main() {\n   // current date/time based on current system\n   time_t now = time(0);\n\n   cout &lt;&lt; \"Number of sec since January 1,1970:\" &lt;&lt; now &lt;&lt; endl;\n\n   tm *ltm = localtime(&amp;now);\n\n   // print various components of tm structure.\n   cout &lt;&lt; \"Year\" &lt;&lt; 1970 + ltm-&gt;tm_year&lt;&lt;endl;\n   cout &lt;&lt; \"Month: \"&lt;&lt; 1 + ltm-&gt;tm_mon&lt;&lt; endl;\n   cout &lt;&lt; \"Day: \"&lt;&lt;  ltm-&gt;tm_mday &lt;&lt; endl;\n   cout &lt;&lt; \"Time: \"&lt;&lt; 1 + ltm-&gt;tm_hour &lt;&lt; \":\";\n   cout &lt;&lt; 1 + ltm-&gt;tm_min &lt;&lt; \":\";\n   cout &lt;&lt; 1 + ltm-&gt;tm_sec &lt;&lt; endl;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nNumber of sec since January 1, 1970:1294548238\nYear: 2011\nMonth: 1\nDay: 8\nTime: 22: 44:59\n</pre>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/cplusplus/cpp_references.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/cplusplus/cpp_basic_input_output.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>", "html": "<!DOCTYPE html>\n\n<!--[if IE 8]><html class=\"ie ie8\"> <![endif]-->\n<!--[if IE 9]><html class=\"ie ie9\"> <![endif]-->\n<!--[if gt IE 9]><!--> <html> <!--<![endif]-->\n<head>\n<!-- Basic -->\n<meta charset=\"utf-8\"/>\n<title>C++ Date and Time</title>\n<meta content=\"C++ Date and Time - Learn C++ in simple and easy steps starting from basic to advanced concepts with examples including C++ Overview, Environment Setup, Basic Syntax, Comments, Data Types, Variable Types, Scope, Constants/Literals, Modifier Types, Storage Classes, Operators, Loop Types, Decision Making, Functions, Numbers, Arrays, Strings, Pointers, References, Date and Time, Basic Input/Output, Data Structures, Classes and Objects, Object Oriented Language, Methods, Overriding, Inheritance, Polymorphism, Abstraction, Encapsulation, Interfaces, Files and Streams, STL, Iterators, Algorithms, Exception Handling, Dynamic Memory, Overloading, Templates, Namespaces and Signal Handling, Preprocessor, Multithreading, Web Programming.\" name=\"description\">\n<meta content=\"C++, Tutorial, Overview, Environment Setup, Basic Syntax, Comments, Data Types, Variable Types, Scope, Constants/Literals, Modifier Types, Storage Classes, Operators, Loop Types, Decision Making, Functions, Numbers, Arrays, Strings, Pointers, References, Date and Time, Basic Input/Output, Data Structures, Classes and Objects, Object Oriented Language, Methods, Overriding, Inheritance, Polymorphism, Abstraction, Encapsulation, Interfaces, Files and Streams, STL, Iterators, Algorithms, Exception Handling, Dynamic Memory, Overloading, Templates, Namespaces and Signal Handling, Preprocessor, Multithreading, Web Programming.\" name=\"Keywords\"/>\n<base href=\"https://www.tutorialspoint.com/\"/>\n<link href=\"/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"/>\n<meta content=\"width=device-width,initial-scale=1.0,user-scalable=yes\" name=\"viewport\"/>\n<meta content=\"en_US\" property=\"og:locale\">\n<meta content=\"website\" property=\"og:type\"/>\n<meta content=\"471319149685276\" property=\"fb:app_id\"/>\n<meta content=\"www.tutorialspoint.com\" property=\"og:site_name\"/>\n<meta content=\"yes\" name=\"apple-mobile-web-app-capable\"/>\n<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"/>\n<meta content=\"tutorialspoint.com\" name=\"author\"/>\n<script src=\"https://www.tutorialspoint.com/theme/js/script-min-v4.js?v=2\" type=\"text/javascript\"></script>\n<link href=\"https://www.tutorialspoint.com/theme/css/style-min.css?v=3.1\" rel=\"stylesheet\"/>\n<script>\r\nfunction openNav() {\t\r\n  document.getElementById(\"mySidenav\").style.width = \"250px\";\r\n  document.getElementById(\"right_obs\").style.display = \"block\";\r\n}\r\nfunction closeNav() {\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\nfunction close_obs_sidenav(){\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\n</script>\n<!-- Head Libs -->\n<!--[if IE 8]>\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/theme/css/ie8.css\">\r\n<![endif]-->\n<style>\r\n#privacy-banner {\r\n    position: fixed;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    max-width: 100%;\r\n    padding: 1rem .5rem;\r\n    background: #fff;\r\n    z-index: 1030;\r\n    color: #000;\r\n    font-size: 14px;\r\n    margin: 0;\r\n    display: none;\r\n    border-top: 2px solid rgb(130, 130, 130);\r\n  }\r\n  #privacy-banner p {\r\n    margin: 0;\r\n    color: #000;\r\n    text-align: center;\r\n  }\r\n  #privacy-banner a {\r\n    text-decoration: none;\r\n    margin: 20px auto 0 auto;\r\n    display: block;\r\n    max-width: 150px;\r\n  }\r\n  #privacy-banner a:hover {\r\n    text-decoration: underline;\r\n  }\r\n  #banner-learn {\r\n    color: #000;\r\n  }\r\n  #banner-accept {\r\n    padding: 7px 15px;\r\n    color: #fff;\r\n    border-radius: 5px;\r\n    background:#737373 !important;\r\n  }\r\n  @media (min-width: 768px) {\r\n    #privacy-banner {\r\n      padding: 1.5rem .5rem;\r\n    }\r\n    #privacy-banner a {\r\n      display: inline-block;\r\n      margin: 0 10px;\r\n    }\r\n}\r\nselect{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }\r\n.btnsbmt{ background: #004481 !important;}\r\nul.nav-list.primary>li a.videolink{    background: none; margin: 0px; padding: 0px; border: 1px solid #d6d6d6;}\r\ndiv.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #004481 url(/images/pattern.png) repeat center center !important;}\r\n.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #004481 !important;}\r\n.submenu-item{ border-bottom: 2px solid #004481 !important; border-top: 2px solid #004481 !important }\r\n.ace_scroller{overflow: auto!important;}\r\na.demo{font-family: \"Open Sans\",Arial,sans-serif; background:#004481; color:#fff; font-size:13px; padding:3px 10px; border:1px solid #d6d6d6; position:absolute; right:5px; margin:-6px 17px 0px 0px;}\r\na.demo:hover{opacity:.8}\r\n</style>\n<script>\r\n$(document).ready(function() {\r\n  $('input[name=\"q\"]').keydown(function(event){\r\n    if(event.keyCode == 13) {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n  });\r\n});\r\n</script>\n</meta></meta></head>\n<body onload=\"prettyPrint()\">\n<div class=\"wrapLoader\">\n<div class=\"imgLoader\">\n<img alt=\"\" height=\"70\" src=\"/images/loading-cg.gif\" width=\"70\"/>\n</div>\n</div>\n<div class=\"display-none\" id=\"right_obs\" onclick=\"close_obs_sidenav()\"></div>\n<header>\n<div class=\"container\">\n<h1 class=\"logo\">\n<a href=\"index.htm\" title=\"tutorialspoint\">\n<img alt=\"tutorialspoint\" src=\"/cplusplus/images/logo.png\"/>\n</a>\n</h1>\n<ul class=\"tp-inline-block pull-right\" id=\"tp-head-icons\">\n<li>\n<div class=\"tp-second-nav tp-display-none tp-pointer\" onclick=\"openNav()\">\n<i class=\"fa fa-th-large fa-lg\"></i>\n</div>\n</li>\n</ul>\n<button class=\"btn btn-responsive-nav btn-inverse\" data-target=\".nav-main-collapse\" data-toggle=\"collapse\" id=\"pull\" style=\"top: 24px!important\"> <i class=\"icon icon-bars\"></i> </button>\n<nav>\n<ul class=\"nav nav-pills nav-top\">\n<li><a href=\"/about/about_careers.htm\" style=\"background: #fffb09; font-weight: bold;\"><i class=\"icon icon-suitcase\"></i> Jobs</a></li>\n<li> <a href=\"/programming_examples/\" target=\"_blank\"><i class=\"fa fa-cubes\"></i> \u00a0Examples</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/whiteboard.htm\"><img alt=\"Whiteboard\" src=\"theme/css/icons/image-editor.png\" title=\"Whiteboard\"/> \u00a0Whiteboard</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/netmeeting.php\"><i class=\"fa-camera\"></i> \u00a0Net Meeting</a> </li>\n<li> <a href=\"/online_dev_tools.htm\"> <i class=\"dev-tools-menu\" style=\"opacity:.5\"></i> Tools </a> </li>\n<li> <a href=\"/articles/index.php\"><i class=\"icon icon-file-text-o\"></i> \u00a0Articles</a> </li>\n<li class=\"top-icons\">\n<ul class=\"social-icons\">\n<li class=\"facebook\"><a data-placement=\"bottom\" href=\"https://www.facebook.com/tutorialspointindia\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Facebook\">Facebook</a></li>\n<li class=\"googleplus\"><a data-placement=\"bottom\" href=\"https://plus.google.com/u/0/116678774017490391259/posts\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Google+\">Google+</a></li>\n<li class=\"twitter\"><a data-placement=\"bottom\" href=\"https://www.twitter.com/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Twitter\">Twitter</a></li>\n<li class=\"linkedin\"><a data-placement=\"bottom\" href=\"https://www.linkedin.com/company/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Linkedin\">Linkedin</a></li>\n<li class=\"youtube\"><a data-placement=\"bottom\" href=\"https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint YouTube\">YouTube</a></li>\n</ul>\n</li>\n</ul>\n</nav>\n</div>\n<div class=\"sidenav\" id=\"mySidenav\">\n<div class=\"navbar nav-main\">\n<div class=\"container\">\n<nav class=\"nav-main mega-menu\">\n<ul class=\"nav nav-pills nav-main\" id=\"mainMenu\">\n<li class=\"dropdown no-sub-menu\"> <a class=\"dropdown\" href=\"index.htm\"><i class=\"icon icon-home\"></i> Home</a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"/questions/index.php\"><i class=\"fa fa-send\"></i> Q/A </a> </li>\n<li class=\"dropdown\"><a class=\"dropdown\" href=\"tutorialslibrary.htm\"><span class=\"tut-lib\"> Library </span></a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"videotutorials/index.htm\"><i class=\"fa-toggle-right\"></i> Videos </a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"tutor_connect/index.php\"><i class=\"fa-user\"> </i> Tutors</a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"codingground.htm\"><i class=\"fa-code\"></i> Coding Ground </a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"https://store.tutorialspoint.com/\"><i class=\"fa-usd\"></i> Store </a> </li>\n<li class=\"dropdown no-sub-menu\">\n<div class=\"searchform-popup\">\n<input autocomplete=\"off\" class=\"header-search-box\" id=\"search-string\" name=\"q\" onblur=\"if (this.value == '') {this.value = 'Search your favorite tutorials...';}\" onfocus=\"if (this.value == 'Search your favorite tutorials...') {this.value = '';}\" placeholder=\"Search your favorite tutorials...\" type=\"text\"/>\n<div class=\"magnifying-glass\"><i class=\"icon-search\"></i> Search </div>\n</div>\n</li>\n</ul>\n</nav>\n</div>\n</div>\n</div>\n</header></body></html>\n\n<div style=\"clear:both;\"></div>\n<div class=\"main\" role=\"main\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-2\">\n<aside class=\"sidebar\">\n<style>\r\n.ts {\r\n   text-align:center !important;\r\n   vertical-align:middle !important;\r\n}\r\n</style>\n<div class=\"mini-logo\">\n<img alt=\"C++ Tutorial\" src=\"/cplusplus/images/cpp-mini-logo.jpg\">\n</img></div>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">C++ Basics</li>\n<li><a href=\"/cplusplus/index.htm\">C++ Home</a></li>\n<li><a href=\"/cplusplus/cpp_overview.htm\">C++ Overview</a></li>\n<li><a href=\"/cplusplus/cpp_environment_setup.htm\">C++ Environment Setup</a></li>\n<li><a href=\"/cplusplus/cpp_basic_syntax.htm\">C++ Basic Syntax</a></li>\n<li><a href=\"/cplusplus/cpp_comments.htm\">C++ Comments</a></li>\n<li><a href=\"/cplusplus/cpp_data_types.htm\">C++ Data Types</a></li>\n<li><a href=\"/cplusplus/cpp_variable_types.htm\">C++ Variable Types</a></li>\n<li><a href=\"/cplusplus/cpp_variable_scope.htm\">C++ Variable Scope</a></li>\n<li><a href=\"/cplusplus/cpp_constants_literals.htm\">C++ Constants/Literals</a></li>\n<li><a href=\"/cplusplus/cpp_modifier_types.htm\">C++ Modifier Types</a></li>\n<li><a href=\"/cplusplus/cpp_storage_classes.htm\">C++ Storage Classes</a></li>\n<li><a href=\"/cplusplus/cpp_operators.htm\">C++ Operators</a></li>\n<li><a href=\"/cplusplus/cpp_loop_types.htm\">C++ Loop Types</a></li>\n<li><a href=\"/cplusplus/cpp_decision_making.htm\">C++ Decision Making</a></li>\n<li><a href=\"/cplusplus/cpp_functions.htm\">C++ Functions</a></li>\n<li><a href=\"/cplusplus/cpp_numbers.htm\">C++ Numbers</a></li>\n<li><a href=\"/cplusplus/cpp_arrays.htm\">C++ Arrays</a></li>\n<li><a href=\"/cplusplus/cpp_strings.htm\">C++ Strings</a></li>\n<li><a href=\"/cplusplus/cpp_pointers.htm\">C++ Pointers</a></li>\n<li><a href=\"/cplusplus/cpp_references.htm\">C++ References</a></li>\n<li><a href=\"/cplusplus/cpp_date_time.htm\">C++ Date &amp; Time</a></li>\n<li><a href=\"/cplusplus/cpp_basic_input_output.htm\">C++ Basic Input/Output</a></li>\n<li><a href=\"/cplusplus/cpp_data_structures.htm\">C++ Data Structures</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">C++ Object Oriented</li>\n<li><a href=\"/cplusplus/cpp_classes_objects.htm\">C++ Classes &amp; Objects</a></li>\n<li><a href=\"/cplusplus/cpp_inheritance.htm\">C++ Inheritance</a></li>\n<li><a href=\"/cplusplus/cpp_overloading.htm\">C++ Overloading</a></li>\n<li><a href=\"/cplusplus/cpp_polymorphism.htm\">C++ Polymorphism</a></li>\n<li><a href=\"/cplusplus/cpp_data_abstraction.htm\">C++ Abstraction</a></li>\n<li><a href=\"/cplusplus/cpp_data_encapsulation.htm\">C++ Encapsulation</a></li>\n<li><a href=\"/cplusplus/cpp_interfaces.htm\">C++ Interfaces</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">C++ Advanced</li>\n<li><a href=\"/cplusplus/cpp_files_streams.htm\">C++ Files and Streams</a></li>\n<li><a href=\"/cplusplus/cpp_exceptions_handling.htm\">C++ Exception Handling</a></li>\n<li><a href=\"/cplusplus/cpp_dynamic_memory.htm\">C++ Dynamic Memory</a></li>\n<li><a href=\"/cplusplus/cpp_namespaces.htm\">C++ Namespaces</a></li>\n<li><a href=\"/cplusplus/cpp_templates.htm\">C++ Templates</a></li>\n<li><a href=\"/cplusplus/cpp_preprocessor.htm\">C++ Preprocessor</a></li>\n<li><a href=\"/cplusplus/cpp_signal_handling.htm\">C++ Signal Handling</a></li>\n<li><a href=\"/cplusplus/cpp_multithreading.htm\">C++ Multithreading</a></li>\n<li><a href=\"/cplusplus/cpp_web_programming.htm\">C++ Web Programming</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">C++ Useful Resources</li>\n<li><a href=\"/cplusplus/cpp_questions_answers.htm\">C++ Questions and Answers</a></li>\n<li><a href=\"/cplusplus/cpp_quick_guide.htm\">C++ Quick Guide</a></li>\n<li><a href=\"/cplusplus/cpp_object_oriented.htm\">C++ Object Oriented</a></li>\n<li><a href=\"/cplusplus/cpp_stl_tutorial.htm\">C++ STL Tutorial</a></li>\n<li><a href=\"/cplusplus/cpp_standard_library.htm\">C++ Standard Library</a></li>\n<li><a href=\"/cplusplus/cpp_useful_resources.htm\">C++ Useful Resources</a></li>\n<li><a href=\"/cplusplus/cpp_discussion.htm\">C++ Discussion</a></li>\n</ul>\n<ul class=\"nav nav-list primary push-bottom left-menu special\">\n<li class=\"sreading\">Selected Reading</li>\n<li><a href=\"/upsc_ias_exams.htm\" target=\"_top\">UPSC IAS Exams Notes</a></li>\n<li><a href=\"/developers_best_practices/index.htm\" target=\"_top\">Developer's Best Practices</a></li>\n<li><a href=\"/questions_and_answers.htm\" target=\"_top\">Questions and Answers</a></li>\n<li><a href=\"/effective_resume_writing.htm\" target=\"_top\">Effective Resume Writing</a></li>\n<li><a href=\"/hr_interview_questions/index.htm\" target=\"_top\">HR Interview Questions</a></li>\n<li><a href=\"/computer_glossary.htm\" target=\"_top\">Computer Glossary</a></li>\n<li><a href=\"/computer_whoiswho.htm\" target=\"_top\">Who is Who</a></li>\n</ul>\n</aside>\n</div>\n<!-- PRINTING STARTS HERE -->\n<div class=\"row\">\n<div class=\"content\">\n<div class=\"col-md-7 middle-col\">\n<h1>C++ Date and Time</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/cplusplus/cpp_references.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/cplusplus/cpp_basic_input_output.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>The C++ standard library does not provide a proper date type. C++ inherits the structs and functions for date and time manipulation from C. To access date and time related functions and structures, you would need to include &lt;ctime&gt; header file in your C++ program.</p>\n<p>There are four time-related types: <b>clock_t, time_t, size_t</b>, and <b>tm</b>. The types - clock_t, size_t and time_t are capable of representing the system time and date as some sort of integer.</p>\n<p>The structure type <b>tm</b> holds the date and time in the form of a C structure having the following elements \u2212</p>\n<pre class=\"result notranslate\">\nstruct tm {\n   int tm_sec;   // seconds of minutes from 0 to 61\n   int tm_min;   // minutes of hour from 0 to 59\n   int tm_hour;  // hours of day from 0 to 24\n   int tm_mday;  // day of month from 1 to 31\n   int tm_mon;   // month of year from 0 to 11\n   int tm_year;  // year since 1900\n   int tm_wday;  // days since sunday\n   int tm_yday;  // days since January 1st\n   int tm_isdst; // hours of daylight savings time\n}\n</pre>\n<p>Following are the important functions, which we use while working with date and time in C or C++. All these functions are part of standard C and C++ library and you can check their detail using reference to C++ standard library given below.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Function &amp; Purpose</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>time_t time(time_t *time);</b></p>\n<p>This returns the current calendar time of the system in number of seconds elapsed since January 1, 1970. If the system has no time, .1 is returned.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>char *ctime(const time_t *time);</b></p>\n<p>This returns a pointer to a string of the form <i>day month year hours:minutes:seconds year\\n\\0</i>.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>struct tm *localtime(const time_t *time);</b></p>\n<p>This returns a pointer to the <b>tm</b> structure representing local time.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>clock_t clock(void);</b></p>\n<p>This returns a value that approximates the amount of time the calling program has been running. A value of .1 is returned if the time is not available.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>char * asctime ( const struct tm * time );</b></p>\n<p>This returns a pointer to a string that contains the information stored in the structure pointed to by time converted into the form: day month date hours:minutes:seconds year\\n\\0</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><p><b>struct tm *gmtime(const time_t *time);</b></p>\n<p>This returns a pointer to the time in the form of a tm structure. The time is represented in Coordinated Universal Time (UTC), which is essentially Greenwich Mean Time (GMT).</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">7</td>\n<td><p><b>time_t mktime(struct tm *time);</b></p>\n<p>This returns the calendar-time equivalent of the time found in the structure pointed to by time.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">8</td>\n<td><p><b>double difftime ( time_t time2, time_t time1 );</b></p>\n<p>This function calculates the difference in seconds between time1 and time2.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">9</td>\n<td><p><b>size_t strftime();</b></p>\n<p>This function can be used to format date and time in a specific format.</p>\n</td>\n</tr>\n</table>\n<h2>Current Date and Time</h2>\n<p>Suppose you want to retrieve the current system date and time, either as a local time or as a Coordinated Universal Time (UTC). Following is the example to achieve the same \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/DHKMA9\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;ctime&gt;\n\nusing namespace std;\n\nint main() {\n   // current date/time based on current system\n   time_t now = time(0);\n   \n   // convert now to string form\n   char* dt = ctime(&amp;now);\n\n   cout &lt;&lt; \"The local date and time is: \" &lt;&lt; dt &lt;&lt; endl;\n\n   // convert now to tm struct for UTC\n   tm *gmtm = gmtime(&amp;now);\n   dt = asctime(gmtm);\n   cout &lt;&lt; \"The UTC date and time is:\"&lt;&lt; dt &lt;&lt; endl;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nThe local date and time is: Sat Jan  8 20:07:41 2011\n\nThe UTC date and time is:Sun Jan  9 03:07:41 2011\n</pre>\n<h2>Format Time using struct tm</h2>\n<p>The <b>tm</b> structure is very important while working with date and time in either C or C++. This structure holds the date and time in the form of a C structure as mentioned above. Most of the time related functions makes use of tm structure. Following is an example which makes use of various date and time related functions and tm structure \u2212</p>\n<p>While using structure in this chapter, I'm making an assumption that you have basic understanding on C structure and how to access structure members using arrow -&gt; operator.</p>\n<a class=\"demo\" href=\"http://tpcg.io/SMnO0N\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;ctime&gt;\n\nusing namespace std;\n\nint main() {\n   // current date/time based on current system\n   time_t now = time(0);\n\n   cout &lt;&lt; \"Number of sec since January 1,1970:\" &lt;&lt; now &lt;&lt; endl;\n\n   tm *ltm = localtime(&amp;now);\n\n   // print various components of tm structure.\n   cout &lt;&lt; \"Year\" &lt;&lt; 1970 + ltm-&gt;tm_year&lt;&lt;endl;\n   cout &lt;&lt; \"Month: \"&lt;&lt; 1 + ltm-&gt;tm_mon&lt;&lt; endl;\n   cout &lt;&lt; \"Day: \"&lt;&lt;  ltm-&gt;tm_mday &lt;&lt; endl;\n   cout &lt;&lt; \"Time: \"&lt;&lt; 1 + ltm-&gt;tm_hour &lt;&lt; \":\";\n   cout &lt;&lt; 1 + ltm-&gt;tm_min &lt;&lt; \":\";\n   cout &lt;&lt; 1 + ltm-&gt;tm_sec &lt;&lt; endl;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nNumber of sec since January 1, 1970:1294548238\nYear: 2011\nMonth: 1\nDay: 8\nTime: 22: 44:59\n</pre>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/cplusplus/cpp_references.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/cplusplus/cpp_basic_input_output.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n<div class=\"row\">\n<div class=\"col-md-3\" id=\"rightbar\">\n<div class=\"simple-ad\">\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.facebook.com/sharer.php?u=' + 'https://www.tutorialspoint.com/cplusplus/cpp_date_time.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/facebookIcon.jpg\">\n</img></a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://twitter.com/share?url=' + 'https://www.tutorialspoint.com/cplusplus/cpp_date_time.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/twitterIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'https://www.tutorialspoint.com/cplusplus/cpp_date_time.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/linkedinIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=https://www.tutorialspoint.com/cplusplus/cpp_date_time.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/googlePlusIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.stumbleupon.com/submit?url=https://www.tutorialspoint.com/cplusplus/cpp_date_time.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/StumbleUponIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://reddit.com/submit?url=https://www.tutorialspoint.com/cplusplus/cpp_date_time.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/reddit.jpg\"/>\n</a>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\ngoogle_ad_format = \"300x250_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 600;\ngoogle_ad_format = \"300x600_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"ca-pub-2537027957187252\";\n/* Right Side Ad */\ngoogle_ad_slot = \"right_side_ad\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\n//-->\n</script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"footer-copyright\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-1\">\n<a class=\"logo\" href=\"index.htm\"> <img alt=\"Tutorials Point\" class=\"img-responsive\" src=\"/scripts/img/logo-footer.png\"/> </a>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<nav id=\"sub-menu\">\n<ul>\n<li><a href=\"/about/about_privacy.htm\">Privacy Policy</a></li>\n<li><a href=\"/about/about_cookies.htm\">Cookies Policy</a></li>\n<li><a href=\"/about/contact_us.htm\">Contact</a></li>\n</ul>\n</nav>\n</div>\n<div class=\"col-md-3 col-sm-12 col-xs-12\">\n<p>\u00a9 Copyright 2019. All Rights Reserved.</p>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<div class=\"news-group\">\n<input autocomplete=\"off\" class=\"form-control-foot search\" id=\"textemail\" name=\"textemail\" onblur=\"if (this.value == '') {this.value = 'Enter email for newsletter...';}\" onfocus=\"if (this.value == 'Enter email for newsletter...') {this.value = '';}\" placeholder=\"Enter email for newsletter\" type=\"text\"/>\n<span class=\"input-group-btn\"> <button class=\"btn btn-default btn-footer\" id=\"btnemail\" onclick=\"javascript:void(0);\" type=\"submit\">go</button> </span>\n<div id=\"newsresponse\"></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"privacy-banner\">\n<div>\n<p>\n      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.\n      <a href=\"javascript:void(0)\" id=\"banner-accept\">Accept</a>\n<a href=\"/about/about_cookies.htm\" id=\"banner-learn\" target=\"_blank\">Learn more</a>\n</p>\n</div>\n</div>\n<script>\n// Banner Trigger if Not Closed\nif (!localStorage.bannerClosed) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n} else {\n  document.getElementById('privacy-banner').style.display = \"none\";\n}\ndocument.getElementById('banner-accept').addEventListener('click', function() {\n  document.getElementById('privacy-banner').style.display = \"none\";\n  localStorage.bannerClosed = 'true';\n});\nif (navigator.userAgent.match(/Opera|OPR\\//)) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n}\n</script>\n<!-- Libs -->\n<script src=\"/theme/js/custom-min.js?v=7\"></script>\n<script src=\"https://www.google-analytics.com/urchin.js\">\n</script>\n<script>\n_uacct = \"UA-232293-6\";\nurchinTracker();\n$('.pg-icon').click(function(){\n   $('.wrapLoader').show();\n});\n</script>\n\n\n\n", "url": "https://www.tutorialspoint.com/cplusplus/cpp_date_time.htm", "title_html": "<h1>C++ Date and Time</h1>"}