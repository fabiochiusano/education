{"content": "\n C++ Quick Guide \n  \n Advertisements \n \n<!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//-->\n\n\n \n  \n \n Previous Page\n \n \nNext Page \u00a0\n \n  \n  \n C++ Overview \n C++ is a statically typed, compiled, general-purpose, case-sensitive, free-form programming language that supports procedural, object-oriented, and generic programming. \n C++ is regarded as a middle-level language, as it comprises a combination of both high-level and low-level language features. \n C++ was developed by Bjarne Stroustrup starting in 1979 at Bell Labs in Murray Hill, New Jersey, as an enhancement to the C language and originally named C with Classes but later it was renamed C++ in 1983. \n C++ is a superset of C, and that virtually any legal C program is a legal C++ program. \n Note \u2212 A programming language is said to use static typing when type checking is performed during compile-time as opposed to run-time. \n Object-Oriented Programming \n C++ fully supports object-oriented programming, including the four pillars of object-oriented development \u2212 \n \nEncapsulation\nData hiding\nInheritance\nPolymorphism\n \n Standard Libraries \n Standard C++ consists of three important parts \u2212 \n \nThe core language giving all the building blocks including variables, data types and literals, etc.\nThe C++ Standard Library giving a rich set of functions manipulating files, strings, etc.\nThe Standard Template Library (STL) giving a rich set of methods manipulating data structures, etc.\n \n The ANSI Standard \n The ANSI standard is an attempt to ensure that C++ is portable; that code you write for Microsoft's compiler will compile without errors, using a compiler on a Mac, UNIX, a Windows box, or an Alpha. \n The ANSI standard has been stable for a while, and all the major C++ compiler manufacturers support the ANSI standard. \n Learning C++ \n The most important thing while learning C++ is to focus on concepts. \n The purpose of learning a programming language is to become a better programmer; that is, to become more effective at designing and implementing new systems and at maintaining old ones. \n C++ supports a variety of programming styles. You can write in the style of Fortran, C, Smalltalk, etc., in any language. Each style can achieve its aims effectively while maintaining runtime and space efficiency. \n Use of C++ \n C++ is used by hundreds of thousands of programmers in essentially every application domain. \n C++ is being highly used to write device drivers and other software that rely on direct manipulation of hardware under realtime constraints. \n C++ is widely used for teaching and research because it is clean enough for successful teaching of basic concepts. \n Anyone who has used either an Apple Macintosh or a PC running Windows has indirectly used C++ because the primary user interfaces of these systems are written in C++. \n C++ Environment Setup \n Local Environment Setup \n If you are still willing to set up your environment for C++, you need to have the following two softwares on your computer. \n Text Editor \n This will be used to type your program. Examples of few editors include Windows Notepad, OS Edit command, Brief, Epsilon, EMACS, and vim or vi. \n Name and version of text editor can vary on different operating systems. For example, Notepad will be used on Windows and vim or vi can be used on windows  as well as Linux, or UNIX. \n The files you create with your editor are called source files and for C++ they typically are named with the extension .cpp, .cp, or .c. \n A text editor should be in place to start your C++ programming. \n C++ Compiler \n This is an actual C++ compiler, which will be used to compile your source code into final executable program. \n Most C++ compilers don't care what extension you give to your source code, but if you don't specify otherwise, many will use .cpp by default. \n Most frequently used and free available compiler is GNU C/C++ compiler, otherwise you can have compilers either from HP or Solaris if you have the respective Operating Systems. \n Installing GNU C/C++ Compiler \n UNIX/Linux Installation \n If you are using Linux or UNIX then check whether GCC is installed on your system by entering the following command from the command line \u2212 \n \n$ g++ -v\n \n If you have installed GCC, then it should print a message such as the following \u2212 \n \nUsing built-in specs.\nTarget: i386-redhat-linux\nConfigured with: ../configure --prefix=/usr .......\nThread model: posix\ngcc version 4.1.2 20080704 (Red Hat 4.1.2-46)\n \n If GCC is not installed, then you will have to install it yourself using the detailed instructions available at https://gcc.gnu.org/install/ \n Mac OS X Installation \n If you use Mac OS X, the easiest way to obtain GCC is to download the Xcode development environment from Apple's website and follow the simple installation instructions. \n Xcode is currently available at developer.apple.com/technologies/tools/. \n Windows Installation \n To install GCC at Windows you need to install MinGW. To install MinGW, go to the MinGW homepage, www.mingw.org, and follow the link to the MinGW download page. Download the latest version of the MinGW installation program which should be named MinGW-<version>.exe. \n While installing MinGW, at a minimum, you must install gcc-core, gcc-g++, binutils, and the MinGW runtime, but you may wish to install more. \n Add the bin subdirectory of your MinGW installation to your PATH environment variable so that you can specify these tools on the command line by their simple names. \n When the installation is complete, you will be able to run gcc, g++, ar, ranlib, dlltool, and several other GNU tools from the Windows command line. \n C++ Basic Syntax \n When we consider a C++ program, it can be defined as a collection of objects that communicate via invoking each other's methods. Let us now briefly look into what a class, object, methods, and instant variables mean. \n \nObject \u2212 Objects have states and behaviors. Example: A dog has states - color, name, breed as well as behaviors - wagging, barking, eating. An object is an instance of a class. \nClass \u2212 A class can be defined as a template/blueprint that describes the behaviors/states that object of its type support.\nMethods \u2212 A method is basically a behavior. A class can contain many methods. It is in methods where the logics are written, data is manipulated and all the actions are executed.\nInstance Variables \u2212 Each object has its unique set of instance variables. An object's state is created by the values assigned to these instance variables.\n \n C++ Program Structure \n Let us look at a simple code that would print the words Hello World. \n  Live Demo \n \n#include <iostream>\nusing namespace std;\n\n// main() is where program execution begins.\nint main() {\n   cout << \"Hello World\"; // prints Hello World\n   return 0;\n}\n \n Let us look at the various parts of the above program \u2212 \n \nThe C++ language defines several headers, which contain information that is either necessary or useful to your program. For this program, the header <iostream> is needed.\nThe line using namespace std; tells the compiler to use the std namespace. Namespaces are a relatively recent addition to C++.\nThe next line '// main() is where program execution begins.' is a single-line comment available in C++. Single-line comments begin with // and stop at the end of the line.\nThe line int main() is the main function where program execution begins.\nThe next line cout << \"Hello World\"; causes the message \"Hello World\" to be displayed on the screen.\nThe next line return 0; terminates main( )function and causes it to return the value 0 to the calling process.\n \n Compile and Execute C++ Program \n Let's look at how to save the file, compile and run the program. Please follow the steps given below \u2212 \n \nOpen a text editor and add the code as above.\nSave the file as: hello.cpp\nOpen a command prompt and go to the directory where you saved the file.\nType 'g++ hello.cpp' and press enter to compile your code. If there are no errors in your code the command prompt will take you to the next line and would generate a.out executable file.\nNow, type 'a.out' to run your program.\nYou will be able to see ' Hello World ' printed on the window.\n \n \n$ g++ hello.cpp\n$ ./a.out\nHello World\n \n Make sure that g++ is in your path and that you are running it in the directory containing file hello.cpp. \n You can compile C/C++ programs using makefile. For more details, you can check our 'Makefile Tutorial'. \n Semicolons and Blocks in C++ \n In C++, the semicolon is a statement terminator. That is, each individual statement must be ended with a semicolon. It indicates the end of one logical entity. \n For example, following are three different statements \u2212 \n \nx = y;\ny = y + 1;\nadd(x, y);\n \n A block is a set of logically connected statements that are surrounded by opening and closing braces. For example \u2212 \n \n{\n   cout << \"Hello World\"; // prints Hello World\n   return 0;\n}\n \n C++ does not recognize the end of the line as a terminator. For this reason, it does not matter where you put a statement in a line. For example \u2212 \n \nx = y;\ny = y + 1;\nadd(x, y);\n \n is the same as \n \nx = y; y = y + 1; add(x, y);\n \n C++ Identifiers \n A C++ identifier is a name used to identify a variable, function, class, module, or any other user-defined item. An identifier starts with a letter A to Z or a to z or an underscore (_) followed by zero or more letters, underscores, and digits (0 to 9). \n C++ does not allow punctuation characters such as @, $, and % within identifiers. C++ is a case-sensitive programming language.  Thus, Manpower and manpower are two different identifiers in C++. \n Here are some examples of acceptable identifiers \u2212 \n \nmohd       zara    abc   move_name  a_123\nmyname50   _temp   j     a23b9      retVal\n \n C++ Keywords \n The following list shows the reserved words in C++. These reserved words may not be used as constant or variable or any other identifier names. \n \n\nasm\nelse\nnew\nthis\n\n\nauto\nenum\noperator\nthrow\n\n\nbool\nexplicit\nprivate\ntrue\n\n\nbreak\nexport\nprotected\ntry\n\n\ncase\nextern\npublic\ntypedef\n\n\ncatch\nfalse\nregister\ntypeid\n\n\nchar\nfloat\nreinterpret_cast\ntypename\n\n\nclass\nfor\nreturn\nunion\n\n\nconst\nfriend\nshort\nunsigned\n\n\nconst_cast\ngoto\nsigned\nusing\n\n\ncontinue\nif\nsizeof\nvirtual\n\n\ndefault\ninline\nstatic\nvoid\n\n\ndelete\nint\nstatic_cast\nvolatile\n\n\ndo\nlong\nstruct\nwchar_t\n\n\ndouble\nmutable\nswitch\nwhile\n\n\ndynamic_cast\nnamespace\ntemplate\n\u00a0\n\n \n Trigraphs \n A few characters have an alternative representation, called a trigraph sequence. A trigraph is a three-character sequence that represents a single character and the sequence always starts with two question marks. \n Trigraphs are expanded anywhere they appear, including within string literals and character literals, in comments, and in preprocessor directives. \n Following are most frequently used trigraph sequences \u2212 \n \n\nTrigraph\nReplacement\n\n\n??=\n#\n\n\n??/\n\\\n\n\n??'\n^\n\n\n??(\n[\n\n\n??)\n]\n\n\n??!\n|\n\n\n??<\n{\n\n\n??>\n}\n\n\n??-\n~\n\n \n All the compilers do not support trigraphs and they are not advised to be used because of their confusing nature. \n Whitespace in C++ \n A line containing only whitespace, possibly with a comment, is known as a blank line, and C++ compiler totally ignores it. \n Whitespace is the term used in C++ to describe blanks, tabs, newline characters and comments. Whitespace separates one part of a statement from another and enables the compiler to identify where one element in a statement, such as int, ends and the next element begins. \n Statement 1 \n \nint age;\n \n In the above statement there must be at least one whitespace character (usually a space) between int and age for the compiler to be able to distinguish them. \n Statement 2 \n \nfruit = apples + oranges;   // Get the total fruit\n \n In the above statement 2, no whitespace characters are necessary between fruit and =, or between = and apples, although you are free to include some if you wish for readability purpose. \n Comments in C++ \n Program comments are explanatory statements that you can include in the C++ code. These comments help anyone reading the source code. All programming languages allow for some form of comments. \n C++ supports single-line and multi-line comments. All characters available inside any comment are ignored by C++ compiler. \n C++ comments start with /* and end with */. For example \u2212 \n \n/* This is a comment */\n\n/* C++ comments can also\n   * span multiple lines\n*/\n \n A comment can also start with //, extending to the end of the line. For example \u2212 \n  Live Demo \n \n#include <iostream>\nusing namespace std;\n\nmain() {\n   cout << \"Hello World\"; // prints Hello World\n   \n   return 0;\n}\n \n When the above code is compiled, it will ignore // prints Hello World and final executable will produce the following result \u2212 \n \nHello World\n \n Within a /* and */ comment, // characters have no special meaning. Within a // comment, /* and */ have no special meaning. Thus, you can \"nest\" one kind of comment within the other kind. For example \u2212 \n \n/* Comment out printing of Hello World:\n\ncout << \"Hello World\"; // prints Hello World\n\n*/\n \n C++ Data Types \n While writing program in any language, you need to use various variables to store various information. Variables are nothing but reserved memory locations to store values. This means that when you create a variable you reserve some space in memory. \n You may like to store information of various data types like character, wide character, integer, floating point, double floating point, boolean etc. Based on the data type of a variable, the operating system allocates memory and decides what can be stored in the reserved memory. \n Primitive Built-in Types \n C++ offers the programmer a rich assortment of built-in as well as user defined data types. Following table lists down seven basic C++ data types \u2212 \n \n\nType\nKeyword\n\n\nBoolean\nbool\n\n\nCharacter\nchar\n\n\nInteger\nint\n\n\nFloating point\nfloat\n\n\nDouble floating point\ndouble\n\n\nValueless\nvoid\n\n\nWide character\nwchar_t\n\n \n Several of the basic types can be modified using one or more of these type modifiers \u2212 \n \nsigned\nunsigned\nshort\nlong\n \n The following table shows the variable type, how much memory it takes to store the value in memory, and what is maximum and minimum value which can be stored in such type of variables. \n \n\nType\nTypical Bit Width\nTypical Range\n\n\nchar\n1byte\n-127 to 127 or 0 to 255\n\n\nunsigned char\n1byte\n0 to 255\n\n\nsigned char\n1byte\n-127 to 127\n\n\nint\n4bytes\n-2147483648 to 2147483647\n\n\nunsigned int\n4bytes\n0 to 4294967295\n\n\nsigned int\n4bytes\n-2147483648 to 2147483647\n\n\nshort int\n2bytes\n-32768 to 32767\n\n\nunsigned short int\nRange\n0 to 65,535\n\n\nsigned short int\nRange\n-32768 to 32767\n\n\nlong int\n4bytes\n-2,147,483,648 to 2,147,483,647\n\n\nsigned long int\n4bytes\nsame as long int\n\n\nunsigned long int\n4bytes\n0 to 4,294,967,295\n\n\nfloat\n4bytes\n+/- 3.4e +/- 38 (~7 digits)\n\n\ndouble\n8bytes\n+/- 1.7e +/- 308 (~15 digits)\n\n\nlong double\n8bytes\n+/- 1.7e +/- 308 (~15 digits)\n\n\nwchar_t\n2 or 4 bytes\n1 wide character\n\n \n The size of variables might be different from those shown in the above table, depending on the compiler and the computer you are using. \n Following is the example, which will produce correct size of various data types on your computer. \n  Live Demo \n \n#include <iostream>\nusing namespace std;\n\nint main() {\n   cout << \"Size of char : \" << sizeof(char) << endl;\n   cout << \"Size of int : \" << sizeof(int) << endl;\n   cout << \"Size of short int : \" << sizeof(short int) << endl;\n   cout << \"Size of long int : \" << sizeof(long int) << endl;\n   cout << \"Size of float : \" << sizeof(float) << endl;\n   cout << \"Size of double : \" << sizeof(double) << endl;\n   cout << \"Size of wchar_t : \" << sizeof(wchar_t) << endl;\n   \n   return 0;\n}\n \n This example uses  endl, which inserts a new-line character after every line and << operator is being used to pass multiple values out to the screen. We are also using sizeof() operator to get size of various data types. \n When the above code is compiled and executed, it produces the following result which can vary from machine to machine \u2212 \n \nSize of char : 1\nSize of int : 4\nSize of short int : 2\nSize of long int : 4\nSize of float : 4\nSize of double : 8\nSize of wchar_t : 4\n \n typedef Declarations \n You can create a new name for an existing type using typedef. Following is the simple syntax to define a new type using typedef \u2212 \n \ntypedef type newname; \n \n For example, the following tells the compiler that feet is another name for int \u2212 \n \ntypedef int feet;\n \n Now, the following declaration is perfectly legal and creates an integer variable called distance \u2212 \n \nfeet distance;\n \n Enumerated Types \n An enumerated type declares an optional type name  and a set of zero or more identifiers that can be used as values of the type. Each enumerator is a constant whose type is the enumeration. \n Creating an enumeration requires the use of the keyword enum. The general form of an enumeration type is \u2212 \n \nenum enum-name { list of names } var-list; \n \n Here, the enum-name is the enumeration's type name. The list of names is comma separated. \n For example, the following code defines an enumeration of colors called colors and the variable c of type color. Finally, c is assigned the value \"blue\". \n \nenum color { red, green, blue } c;\nc = blue;\n \n By default, the value of the first name is 0, the second name has the value 1, and the third has the value 2, and so on. But you can give a name, a specific value by adding an initializer. For example, in the following enumeration, green will have the value 5. \n \nenum color { red, green = 5, blue };\n \n Here, blue will have a value of 6 because each name will be one greater than the one that precedes it. \n C++ Variable Types \n A variable provides us with named storage that our programs can manipulate. Each variable in C++ has a specific type, which determines the size and layout of the variable's memory; the range of values that can be stored within that memory; and the set of operations that can be applied to the variable. \n The name of a variable can be composed of letters, digits, and the underscore character. It must begin with either a letter or an underscore. Upper and lowercase letters are distinct because C++ is case-sensitive \u2212 \n There are following basic types of variable in C++ as explained in last chapter \u2212 \n \n\nSr.No\nType & Description\n\n\n1\nbool\nStores either value true or false.\n\n\n2\nchar\nTypically a single octet (one byte). This is an integer type.\n\n\n3\nint\nThe most natural size of integer for the machine.\n\n\n4\nfloat\nA single-precision floating point value.\n\n\n5\ndouble\nA double-precision floating point value.\n\n\n6\nvoid\nRepresents the absence of type.\n\n\n7\nwchar_t\nA wide character type.\n\n \n C++ also allows to define various other types of variables, which we will cover in subsequent chapters like Enumeration, Pointer, Array, Reference, Data structures, and Classes. \n Following section will cover how to define, declare and use various types of variables. \n Variable Definition in C++ \n A variable definition tells the compiler where and how much storage to create for the variable. A variable definition specifies a data type, and contains a list of one or more variables of that type as follows \u2212 \n \ntype variable_list;\n \n Here, type must be a valid C++ data type including char, w_char, int, float, double, bool or any user-defined object, etc., and variable_list may consist of one or more identifier names separated by commas. Some valid declarations are shown here \u2212 \n \nint    i, j, k;\nchar   c, ch;\nfloat  f, salary;\ndouble d;\n \n The line int i, j, k; both declares and defines the variables i, j and k; which instructs the compiler to create variables named i, j and k of type int. \n Variables can be initialized (assigned an initial value) in their declaration. The initializer consists of an equal sign followed by a constant expression as follows \u2212 \n \ntype variable_name = value;\n \n Some examples are \u2212 \n \nextern int d = 3, f = 5;    // declaration of d and f. \nint d = 3, f = 5;           // definition and initializing d and f. \nbyte z = 22;                // definition and initializes z. \nchar x = 'x';               // the variable x has the value 'x'.\n \n For definition without an initializer: variables with static storage duration are implicitly initialized with NULL (all bytes have the value 0); the initial value of all other variables is undefined. \n Variable Declaration in C++ \n A variable declaration provides assurance to the compiler that there is one variable existing with the given type and name so that compiler proceed for further compilation without needing complete detail about the variable. A variable declaration has its meaning at the time of compilation only, compiler needs actual variable definition at the time of linking of the program. \n A variable declaration is useful when you are using multiple files and you define your variable in one of the files which will be available at the time of linking of the program. You will use extern keyword to declare a variable at any place. Though you can declare a variable multiple times in your C++ program, but it can be defined only once in a file, a function or a block of code. \n Example \n Try the following example where a variable has been declared at the top, but it has been defined inside the main function \u2212 \n  Live Demo \n \n#include <iostream>\nusing namespace std;\n\n// Variable declaration:\nextern int a, b;\nextern int c;\nextern float f;\n  \nint main () {\n   // Variable definition:\n   int a, b;\n   int c;\n   float f;\n \n   // actual initialization\n   a = 10;\n   b = 20;\n   c = a + b;\n \n   cout << c << endl ;\n\n   f = 70.0/3.0;\n   cout << f << endl ;\n \n   return 0;\n}\n \n When the above code is compiled and executed, it produces the following result \u2212 \n \n30\n23.3333\n \n Same concept applies on function declaration where you provide a function name at the time of its declaration and its actual definition can be given anywhere else. For example \u2212 \n \n// function declaration\nint func();\nint main() {\n   // function call\n   int i = func();\n}\n\n// function definition\nint func() {\n   return 0;\n}\n \n Lvalues and Rvalues \n There are two kinds of expressions in C++ \u2212 \n \nlvalue \u2212 Expressions that refer to a memory location is  called \"lvalue\" expression. An lvalue may appear as either the left-hand or right-hand side of an assignment.\nrvalue \u2212 The term rvalue refers to a data value that is stored at some address in memory. An rvalue is an expression that cannot have a value assigned to it which means an rvalue may appear on the right- but not left-hand side of an assignment.\n \n Variables are lvalues and so may appear on the left-hand side of an assignment. Numeric literals are rvalues and so may not be assigned and can not appear on the left-hand side. Following is a valid statement \u2212 \n \nint g = 20;\n \n But the following is not a valid statement and would generate compile-time error \u2212 \n \n10 = 20;\n \n Variable Scope in C++ \n A scope is a region of the program and broadly speaking there are three places, where variables can be declared \u2212 \n \nInside a function or a block which is called local variables,\nIn the definition of function parameters which is called formal parameters.\nOutside of all functions which is called global variables.\n \n We will learn what is a function and it's parameter in subsequent chapters. Here let us explain what are local and global variables. \n Local Variables \n Variables that are declared inside a function or block are local variables. They can be used only by statements that are inside that function or block of code. Local variables are not known to functions outside their own. Following is the example using local variables \u2212 \n  Live Demo \n \n#include <iostream>\nusing namespace std;\n \nint main () {\n   // Local variable declaration:\n   int a, b;\n   int c;\n \n   // actual initialization\n   a = 10;\n   b = 20;\n   c = a + b;\n \n   cout << c;\n \n   return 0;\n}\n \n Global Variables \n Global variables are defined outside of all the functions, usually on top of the program. The global variables will hold their value throughout the life-time of your program. \n A global variable can be accessed by any function. That is, a global variable is available for use throughout your entire program after its declaration. Following is the example using global and local variables \u2212 \n  Live Demo \n \n#include <iostream>\nusing namespace std;\n \n// Global variable declaration:\nint g;\n \nint main () {\n   // Local variable declaration:\n   int a, b;\n \n   // actual initialization\n   a = 10;\n   b = 20;\n   g = a + b;\n  \n   cout << g;\n \n   return 0;\n}\n \n A program can have same name for local and global variables but value of local variable inside a function will take preference. For example \u2212 \n  Live Demo \n \n#include <iostream>\nusing namespace std;\n \n// Global variable declaration:\nint g = 20;\n \nint main () {\n   // Local variable declaration:\n   int g = 10;\n \n   cout << g;\n \n   return 0;\n}\n \n When the above code is compiled and executed, it produces the following result \u2212 \n \n10\n \n Initializing Local and Global Variables \n When a local variable is defined, it is not initialized by the system, you must initialize it yourself. Global variables are initialized automatically by the system when you define them as follows \u2212 \n \n\nData Type\nInitializer\n\n\nint\n0\n\n\nchar\n'\\0'\n\n\nfloat\n0\n\n\ndouble\n0\n\n\npointer\nNULL\n\n \n It is a good programming practice to initialize variables properly, otherwise sometimes program would produce unexpected result. \n C++ Constants/Literals \n Constants refer to fixed values that the program may not alter and they are called literals. \n Constants can be of any of the basic data types and can be divided into Integer Numerals, Floating-Point Numerals, Characters, Strings and Boolean Values. \n Again, constants are treated just like regular variables except that their values cannot be modified after their definition. \n Integer Literals \n An integer literal can be a decimal, octal, or hexadecimal constant. A prefix specifies the base or radix: 0x or 0X for hexadecimal, 0 for octal, and nothing for decimal. \n An integer literal can also have a suffix that is a combination of U and L, for unsigned and long, respectively. The suffix can be uppercase or lowercase and can be in any order. \n Here are some examples of integer literals \u2212 \n \n212         // Legal\n215u        // Legal\n0xFeeL      // Legal\n078         // Illegal: 8 is not an octal digit\n032UU       // Illegal: cannot repeat a suffix\n \n Following are other examples of various types of Integer literals \u2212 \n \n85         // decimal\n0213       // octal\n0x4b       // hexadecimal\n30         // int\n30u        // unsigned int\n30l        // long\n30ul       // unsigned long\n \n Floating-point Literals \n A floating-point literal has an integer part, a decimal point, a fractional part, and an exponent part. You can represent floating point literals either in decimal form or exponential form. \n While representing using decimal form, you must include the decimal point, the exponent, or both and while representing using exponential form, you must include the integer part, the fractional part, or both. The signed exponent is introduced by e or E. \n Here are some examples of floating-point literals \u2212 \n \n3.14159       // Legal\n314159E-5L    // Legal\n510E          // Illegal: incomplete exponent\n210f          // Illegal: no decimal or exponent\n.e55          // Illegal: missing integer or fraction\n \n Boolean Literals \n There are two Boolean literals and they are part of standard C++ keywords \u2212 \n \nA value of true representing true.\nA value of false representing false.\n \n You should not consider the value of true equal to 1 and value of false equal to 0. \n Character Literals \n Character literals are enclosed in single quotes. If the literal begins with L (uppercase only), it is a wide character literal (e.g., L'x') and should be stored in wchar_t type of variable . Otherwise, it is a narrow character literal (e.g., 'x') and can be stored in a simple variable of char type. \n A character literal can be a plain character (e.g., 'x'), an escape sequence (e.g., '\\t'), or a universal character (e.g., '\\u02C0').  \n There are certain characters in C++ when they are preceded by a backslash they will have special meaning and they are used to represent like newline (\\n) or tab (\\t). Here, you have a list of some of such escape sequence codes \u2212 \n \n\nEscape sequence\nMeaning\n\n\n\\\\\n\\ character\n\n\n\\'\n ' character\n\n\n\\\"\n\" character\n\n\n\\?\n? character\n\n\n\\a\nAlert or bell\n\n\n\\b\nBackspace\n\n\n\\f\nForm feed\n\n\n\\n\nNewline\n\n\n\\r\nCarriage return\n\n\n\\t\nHorizontal tab\n\n\n\\v\nVertical tab\n\n\n\\ooo\nOctal number of one to three digits\n\n\n\\xhh . . .\nHexadecimal number of one or more digits\n\n \n Following is the example to show a few escape sequence characters \u2212 \n  Live Demo \n \n#include <iostream>\nusing namespace std;\n\nint main() {\n   cout << \"Hello\\tWorld\\n\\n\";\n   return 0;\n}\n \n When the above code is compiled and executed, it produces the following result \u2212 \n \nHello   World\n \n String Literals \n String literals are enclosed in double quotes. A string contains characters that are similar to character literals: plain characters, escape sequences, and universal characters. \n You can break a long line into multiple lines using string literals and separate them using whitespaces. \n Here are some examples of string literals. All the three forms are identical strings. \n \n\"hello, dear\"\n\n\"hello, \\\n\ndear\"\n\n\"hello, \" \"d\" \"ear\"\n \n Defining Constants \n There are two simple ways in C++ to define constants \u2212 \n \nUsing #define preprocessor.\nUsing const keyword.\n \n The #define Preprocessor \n Following is the form to use #define preprocessor to define a constant \u2212 \n \n#define identifier value\n \n Following example explains it in detail \u2212 \n  Live Demo \n \n#include <iostream>\nusing namespace std;\n\n#define LENGTH 10   \n#define WIDTH  5\n#define NEWLINE '\\n'\n\nint main() {\n   int area;  \n   \n   area = LENGTH * WIDTH;\n   cout << area;\n   cout << NEWLINE;\n   return 0;\n}\n \n When the above code is compiled and executed, it produces the following result \u2212 \n \n50\n \n The const Keyword \n You can use const prefix to declare constants with a specific type as follows \u2212 \n \nconst type variable = value;\n \n Following example explains it in detail \u2212 \n  Live Demo \n \n#include <iostream>\nusing namespace std;\n\nint main() {\n   const int  LENGTH = 10;\n   const int  WIDTH  = 5;\n   const char NEWLINE = '\\n';\n   int area;  \n   \n   area = LENGTH * WIDTH;\n   cout << area;\n   cout << NEWLINE;\n   return 0;\n}\n \n When the above code is compiled and executed, it produces the following result \u2212 \n \n50\n \n Note that it is a good programming practice to define constants in CAPITALS. \n C++ Modifier Types \n C++ allows the char, int,  and double data types to have modifiers preceding them. A modifier is used to alter the meaning of the base type so that it more precisely fits the needs of various situations. \n The data type modifiers are listed here \u2212 \n \nsigned\nunsigned\nlong\nshort\n \n The modifiers signed, unsigned, long, and short can be applied to integer base types. In addition, signed and unsigned can be applied to char, and long can be applied to double. \n The modifiers signed and unsigned can also be used as prefix to long or short modifiers. For example, unsigned long int. \n C++ allows a shorthand notation for declaring unsigned, short, or long integers. You can simply use the word unsigned, short, or long, without int. It automatically implies int. For example, the following two statements both declare unsigned integer variables. \n \nunsigned x;\nunsigned int y;\n \n To understand the difference between the way signed and unsigned integer modifiers are interpreted by C++, you should run the following short program \u2212 \n  Live Demo \n \n#include <iostream>\nusing namespace std;\n \n/* This program shows the difference between\n   * signed and unsigned integers.\n*/\nint main() {\n   short int i;           // a signed short integer\n   short unsigned int j;  // an unsigned short integer\n\n   j = 50000;\n\n   i = j;\n   cout << i << \" \" << j;\n\n   return 0;\n}\n \n When this program is run, following is the output \u2212 \n \n-15536 50000\n \n The above result is because the bit pattern that represents 50,000 as a short unsigned integer is interpreted as -15,536 by a short. \n Type Qualifiers in C++ \n The type qualifiers provide additional information about the variables they precede. \n \n\nSr.No\nQualifier & Meaning\n\n\n1\nconst\nObjects of type const cannot be changed by your program during execution.\n\n\n2\nvolatile\nThe modifier volatile tells the compiler that a variable's value may be changed in ways not explicitly specified by the program.\n\n\n3\nrestrict\nA pointer qualified by restrict is initially the only means by which the object it points to can be accessed. Only C99 adds a new type qualifier called restrict.\n\n \n Storage Classes in C++ \n A storage class defines the scope (visibility) and life-time of variables and/or functions within a C++ Program. These specifiers precede the type that they modify. There are following storage classes, which can be used in a C++ Program \n \nauto\nregister\nstatic\nextern\nmutable\n \n The auto Storage Class \n The auto storage class is the default storage class for all local variables. \n \n{\n   int mount;\n   auto int month;\n}\n \n The example above defines two variables with the same storage class, auto can only be used within functions, i.e., local variables. \n The register Storage Class \n The register storage class is used to define local variables that should be stored in a register instead of RAM. This means that the variable has a maximum size equal to the register size (usually one word) and can't have the unary '&' operator applied to it (as it does not have a memory location). \n \n{\n   register int  miles;\n}\n \n The register should only be used for variables that require quick access such as counters. It should also be noted that defining 'register' does not mean that the variable will be stored in a register. It means that it MIGHT be stored in a register depending on hardware and implementation restrictions. \n The static Storage Class \n The static storage class instructs the compiler to keep a local variable in existence during the life-time of the program instead of creating and destroying it each time it comes into and goes out of scope.  Therefore, making local variables static allows them to maintain their values between function calls. \n The static modifier may also be applied to global variables. When this is done, it causes that variable's scope to be restricted to the file in which it is declared. \n In C++, when static is used on a class data member, it causes only one copy of that member to be shared by all objects of its class. \n  Live Demo \n \n#include <iostream>\n \n// Function declaration\nvoid func(void);\n \nstatic int count = 10; /* Global variable */\n \nmain() {\n   while(count--) {\n      func();\n   }\n   \n   return 0;\n}\n\n// Function definition\nvoid func( void ) {\n   static int i = 5; // local static variable\n   i++;\n   std::cout << \"i is \" << i ;\n   std::cout << \" and count is \" << count << std::endl;\n}\n \n When the above code is compiled and executed, it produces the following result \u2212 \n \ni is 6 and count is 9\ni is 7 and count is 8\ni is 8 and count is 7\ni is 9 and count is 6\ni is 10 and count is 5\ni is 11 and count is 4\ni is 12 and count is 3\ni is 13 and count is 2\ni is 14 and count is 1\ni is 15 and count is 0\n \n The extern Storage Class \n The extern storage class is used to give a reference  of a global variable that is visible to ALL the program files. When you use 'extern' the variable cannot be initialized  as all it does is point the variable name at a storage location that has been previously defined. \n When you have multiple files and you define a global variable or function, which will be used in other files also, then extern will be used in another file to give reference of defined variable or function. Just for understanding  extern  is used to declare a global variable or function in another file. \n The extern modifier is most commonly used when there are two or more files sharing the same global variables or functions as explained below. \n First File: main.cpp \n \n#include <iostream>\nint count ;\nextern void write_extern();\n \nmain() {\n   count = 5;\n   write_extern();\n}\n \n Second File: support.cpp \n \n#include <iostream>\n\nextern int count;\n\nvoid write_extern(void) {\n   std::cout << \"Count is \" << count << std::endl;\n}\n \n Here, extern keyword is being used to declare count in another file. Now compile these two files as follows \u2212 \n \n$g++ main.cpp support.cpp -o write\n \n This will produce write executable program, try to execute write and check the result as follows \u2212 \n \n$./write\n5\n \n The mutable Storage Class \n The mutable specifier applies only to class objects, which are discussed later in this tutorial. It allows a member of an object to override const member function. That is, a mutable member can be modified by a const member function. \n Operators in C++ \n An operator is a symbol that tells the compiler to perform specific mathematical or logical manipulations. C++ is rich in built-in operators and provide the following types of operators \u2212 \n \nArithmetic Operators\nRelational Operators\nLogical Operators\nBitwise Operators\nAssignment Operators\nMisc Operators\n \n This chapter will examine the arithmetic, relational, logical, bitwise, assignment and other operators one by one. \n Arithmetic Operators \n There are following arithmetic operators supported by C++ language \u2212 \n Assume variable A holds 10 and variable B holds 20, then \u2212 \n Show Examples \n \n\nOperator\nDescription\nExample\n\n\n+\nAdds two operands\nA + B will give 30\n\n\n-\nSubtracts second operand from the first\nA - B will give -10\n\n\n*\nMultiplies both operands\nA * B will give 200\n\n\n/\nDivides numerator by de-numerator\nB / A will give 2\n\n\n%\nModulus Operator and remainder of after an integer division\nB % A will give 0\n\n\n++\nIncrement operator, increases integer value by one\nA++ will give 11\n\n\n--\nDecrement operator, decreases integer value by one\nA-- will give 9\n\n \n Relational Operators \n There are following relational operators supported by C++ language \n Assume variable A holds 10 and variable B holds 20, then \u2212 \n Show Examples \n \n\nOperator\nDescription\nExample\n\n\n==\nChecks if the values of two operands are equal or not, if yes then condition becomes true.\n(A == B) is not true.\n\n\n!=\nChecks if the values of two operands are equal or not, if values are not equal then condition becomes true.\n(A != B) is true.\n\n\n>\nChecks if the value of left  operand is greater than the value of right operand, if yes then condition becomes true.\n(A > B) is not true.\n\n\n<\nChecks if the value of left  operand is less than the value of right operand, if yes then condition becomes true.\n(A < B) is true.\n\n\n>=\nChecks if the value of left  operand is greater than or equal to the value of right operand, if yes then condition becomes true.\n(A >= B) is not true.\n\n\n<=\nChecks if the value of left  operand is less than or equal to the value of right operand, if yes then condition becomes true.\n(A <= B) is true.\n\n \n Logical Operators \n There are following logical operators supported by C++ language. \n Assume variable A holds 1 and variable B holds 0, then \u2212 \n Show Examples \n \n\nOperator\nDescription\nExample\n\n\n&&\nCalled Logical AND  operator. If both the operands are non-zero, then condition becomes true.\n(A && B) is false.\n\n\n||\nCalled Logical OR Operator. If any of the two operands is non-zero, then condition becomes true.\n(A || B) is true.\n\n\n!\nCalled Logical NOT Operator. Use to reverses the logical state of its operand. If a condition is true, then Logical NOT operator will make false.\n!(A && B) is true.\n\n \n Bitwise Operators \n Bitwise operator works on bits and perform bit-by-bit operation. The truth tables for &, |, and ^ are as follows \u2212 \n \n\np\nq\np & q\np | q\np ^ q\n\n\n0\n0\n0\n0\n0\n\n\n0\n1\n0\n1\n1\n\n\n1\n1\n1\n1\n0\n\n\n1\n0\n0\n1\n1\n\n \n Assume if A = 60; and B = 13; now in binary format they will be as follows \u2212 \n A = 0011 1100 \n B = 0000 1101 \n ----------------- \n A&B = 0000 1100 \n A|B = 0011 1101 \n A^B = 0011 0001 \n ~A\u00a0 = 1100 0011 \n The Bitwise operators supported by C++ language are listed in the following table. Assume variable A holds 60 and variable B holds 13, then \u2212 \n Show Examples \n \n\nOperator\nDescription\nExample\n\n\n&\nBinary AND Operator copies a bit to the result if it exists in both operands. \n(A & B) will give 12 which is 0000 1100\n\n\n|\nBinary OR Operator copies a bit if it exists in either operand.\n(A | B) will give 61 which is 0011 1101\n\n\n^\nBinary XOR Operator copies the bit if it is set in one operand but not both.\n(A ^ B) will give 49 which is 0011 0001\n\n\n~\nBinary Ones Complement Operator is unary and has the effect of 'flipping' bits. \n(~A ) will give -61 which is 1100 0011 in 2's complement form due to a signed binary number.\n\n\n<<\nBinary Left Shift Operator. The left operands value is moved left by the number of bits specified by the right operand.\nA << 2 will give 240 which is 1111 0000\n\n\n>>\nBinary Right Shift Operator. The left operands value is moved right by the number of bits specified by the right operand.\nA >> 2 will give 15 which is 0000 1111\n\n \n Assignment Operators \n There are following assignment operators supported by C++ language \u2212 \n Show Examples \n \n\nOperator\nDescription\nExample\n\n\n=\nSimple assignment operator, Assigns values from right side operands to left side operand.\nC = A + B will assign value of A + B into C\n\n\n+=\nAdd AND assignment operator, It adds right operand to the left operand and assign the result to left operand.\nC += A is equivalent to C = C + A\n\n\n-=\nSubtract AND assignment operator, It subtracts right operand from the left operand and assign the result to left operand.\nC -= A is equivalent to C = C - A\n\n\n*=\nMultiply AND assignment operator, It multiplies right operand with the left operand and assign the result to left operand.\nC *= A is equivalent to C = C * A\n\n\n/=\nDivide AND assignment operator, It divides left operand with the right operand and assign the result to left operand.\nC /= A is equivalent to C = C / A\n\n\n%=\nModulus AND assignment operator, It takes modulus using two operands and assign the result to  left operand.\nC %= A is equivalent to C = C % A\n\n\n<<=\nLeft shift AND assignment operator.\nC <<= 2 is same as C = C << 2\n\n\n>>=\nRight shift AND assignment operator.\nC >>= 2 is same as C = C >> 2\n\n\n&=\nBitwise AND assignment operator.\nC &= 2 is same as C = C & 2\n\n\n^=\nBitwise exclusive OR and assignment operator.\nC ^= 2 is same as C = C ^ 2\n\n\n|=\nBitwise inclusive OR and assignment operator.\nC |= 2 is same as C = C | 2\n\n \n Misc Operators \n The following table lists some other operators that C++ supports. \n \n\nSr.No\nOperator & Description\n\n\n1\nsizeof\nsizeof operator returns the size of a variable. For example, sizeof(a), where \u2018a\u2019 is integer, and will return 4.\n\n\n2\nCondition ? X : Y\nConditional operator (?). If Condition is true then it returns value of X otherwise returns value of Y.\n\n\n3\n,\nComma operator causes a sequence of operations to be performed. The value of the entire comma expression is the value of the last expression of the comma-separated list.\n\n\n4\n. (dot) and  -> (arrow)\nMember operators are used to reference individual members of classes, structures, and unions.\n\n\n5\nCast\nCasting operators convert one data type to another. For example, int(2.2000) would return 2.\n\n\n6\n&\nPointer operator & returns the address of a variable. For example &a; will give actual address of the variable.\n\n\n7\n*\nPointer operator * is pointer to a variable. For example *var; will pointer to a variable var.\n\n \n Operators Precedence in C++ \n Operator precedence determines the grouping of terms in an expression. This affects how an expression is evaluated. Certain operators have higher precedence than others; for example, the multiplication operator has higher precedence than the addition operator \u2212 \n For example x = 7 + 3 * 2; here, x is assigned 13, not 20 because operator * has higher precedence than +, so it first gets multiplied with 3*2 and then adds into 7. \n Here, operators with the highest precedence appear at the top of the table, those with the lowest appear at the bottom. Within an expression, higher precedence operators will be evaluated first. \n Show Examples \n \n\nCategory\u00a0\nOperator\u00a0\nAssociativity\u00a0\n\n\nPostfix\u00a0\n() [] -> .  ++   - - \u00a0\nLeft to right\u00a0\n\n\nUnary\u00a0\n+  -   !  ~  ++  - - (type)*  & sizeof\u00a0\nRight to left\u00a0\n\n\nMultiplicative \u00a0\n*  /  %\u00a0\nLeft to right\u00a0\n\n\nAdditive \u00a0\n+  -\u00a0\nLeft to right\u00a0\n\n\nShift \u00a0\n<< >>\u00a0\nLeft to right\u00a0\n\n\nRelational \u00a0\n< <=  > >=\u00a0\nLeft to right\u00a0\n\n\nEquality \u00a0\n==  !=\u00a0\nLeft to right\u00a0\n\n\nBitwise AND\u00a0\n&\u00a0\nLeft to right\u00a0\n\n\nBitwise XOR\u00a0\n^\u00a0\nLeft to right\u00a0\n\n\nBitwise OR\u00a0\n|\u00a0\nLeft to right\u00a0\n\n\nLogical AND\u00a0\n&&\u00a0\nLeft to right\u00a0\n\n\nLogical OR\u00a0\n||\u00a0\nLeft to right\u00a0\n\n\nConditional\u00a0\n?:\u00a0\nRight to left\u00a0\n\n\nAssignment\u00a0\n=  +=  -=  *=  /=  %=>>=  <<=  &=  ^=   |=\u00a0\nRight to left\u00a0\n\n\nComma\u00a0\n,\u00a0\nLeft to right\u00a0\n\n \n C++ Loop Types \n There may be a situation, when you need to execute a block of code several number of times. In general, statements are executed sequentially: The first statement in a function is executed first, followed by the second, and so on. \n Programming languages provide various control structures that allow for more complicated execution paths. \n A loop statement allows us to execute a statement or group of statements multiple times and following is the general from of a loop statement in most of the programming languages \u2212 \n \nC++ programming language provides the following type of loops to handle looping requirements.\n\n\nSr.No\nLoop Type & Description\n\n\n1\nwhile loop\nRepeats a statement or group of statements while a given condition is true. It tests the condition before executing the loop body.\n\n\n2\nfor loop\nExecute a sequence of statements multiple times and abbreviates the code that manages the loop variable.\n\n\n3\ndo...while loop\nLike a \u2018while\u2019 statement, except that it tests the condition at the end of the loop body.\n\n\n4\nnested loops\nYou can use one or more loop inside any another \u2018while\u2019, \u2018for\u2019 or \u2018do..while\u2019 loop.\n\n\nLoop Control Statements\nLoop control statements change execution from its normal sequence. When execution leaves a scope, all automatic objects that were created in that scope are destroyed.\nC++ supports the following control statements.\n\n\nSr.No\nControl Statement & Description\n\n\n1\nbreak statement\nTerminates the loop or switch statement and transfers execution to the statement immediately following the loop or switch.\n\n\n2\ncontinue statement\nCauses the loop to skip the remainder of its body and immediately retest its condition prior to reiterating.\n\n\n3\ngoto statement\nTransfers control to the labeled statement. Though it is not advised to use goto statement in your program.\n\n\nThe Infinite Loop\nA loop becomes infinite loop if a condition never becomes false. The for loop is traditionally used for this purpose. Since none of the three expressions that form the \u2018for\u2019 loop are required, you can make an endless loop by leaving the conditional expression empty.\n\n#include <iostream>\nusing namespace std;\n \nint main () {\n   for( ; ; ) {\n      printf(\"This loop will run forever.\\n\");\n   }\n\n   return 0;\n}\n\nWhen the conditional expression is absent, it is assumed to be true. You may have an initialization and increment expression, but C++ programmers more commonly use the \u2018for (;;)\u2019 construct to signify an infinite loop.\nNOTE \u2212 You can terminate an infinite loop by pressing Ctrl + C keys.\nC++ decision making statements\nDecision making structures require that the programmer specify one or more conditions to be evaluated or tested by the program, along with a statement or statements to be executed if the condition is determined to be true, and optionally, other statements to be executed if the condition is determined to be false.\nFollowing is the general form of a typical decision making structure found in most of the programming languages \u2212\n\nC++ programming language provides following types of decision making statements.\n\n\nSr.No\nStatement & Description\n\n\n1\nif statement\nAn \u2018if\u2019 statement consists of a boolean expression followed by one or more statements.\n\n\n2\nif...else statement\nAn \u2018if\u2019 statement can be followed by an optional \u2018else\u2019 statement, which executes when the boolean expression is false.\n\n\n3\nswitch statement\nA \u2018switch\u2019 statement allows a variable to be tested for equality against a list of values.\n\n\n4\nnested if statements\nYou can use one \u2018if\u2019 or \u2018else if\u2019 statement inside another \u2018if\u2019 or \u2018else if\u2019 statement(s).\n\n\n5\nnested switch statements\nYou can use one \u2018switch\u2019 statement inside another \u2018switch\u2019 statement(s).\n\n\nThe ? : Operator\nWe have covered conditional operator \u201c? :\u201d in previous chapter which can be used to replace if...else statements. It has the following general form \u2212\n\nExp1 ? Exp2 : Exp3;\n\nExp1, Exp2, and Exp3 are expressions. Notice the use and placement of the colon.\nThe value of a \u2018?\u2019 expression is determined like this: Exp1 is evaluated. If it is true, then Exp2 is evaluated and becomes the value of the entire \u2018?\u2019 expression. If Exp1 is false, then Exp3 is evaluated and its value becomes the value of the expression.\nC++ Functions\nA function is a group of statements that together perform a task. Every C++ program has at least one function, which is main(), and all the most trivial programs can define additional functions.\nYou can divide up your code into separate functions. How you divide up your code among different functions is up to you, but logically the division usually is such that each function performs a specific task.\nA function declaration tells the compiler about a function's name, return type, and parameters. A function definition provides the actual body of the function.\nThe C++ standard library provides numerous built-in functions that your program can call. For example, function strcat() to concatenate two strings, function memcpy() to copy one memory location to another location and many more functions.\nA function is known with various names like a method or a sub-routine or a procedure etc.\nDefining a Function\nThe general form of a C++ function definition is as follows \u2212\n\nreturn_type function_name( parameter list ) {\n   body of the function\n}\n\nA C++ function definition consists of a function header and a function body. Here are all the parts of a function \u2212\n\nReturn Type \u2212 A function may return a value. The return_type is the data type of the value the function returns. Some functions perform the desired operations without returning a value. In this case, the return_type is the keyword void.\nFunction Name \u2212 This is the actual name of the function. The function name and the parameter list together constitute the function signature.\nParameters \u2212 A parameter is like a placeholder. When a function is invoked, you pass a value to the parameter. This value is referred to as actual parameter or argument. The parameter list refers to the type, order, and number of the parameters of a function. Parameters are optional; that is, a function may contain no parameters.\nFunction Body \u2212 The function body contains a collection of statements that define what the function does.\n\nExample\nFollowing is the source code for a function called max(). This function takes two parameters num1 and num2 and return the biggest of both \u2212\n\n// function returning the max between two numbers\n \nint max(int num1, int num2) {\n   // local variable declaration\n   int result;\n \n   if (num1 > num2)\n      result = num1;\n   else\n      result = num2;\n \n   return result; \n}\n\nFunction Declarations\nA function declaration tells the compiler about a function name and how to call the function. The actual body of the function can be defined separately.\nA function declaration has the following parts \u2212\n\nreturn_type function_name( parameter list );\n\nFor the above defined function max(), following is the function declaration \u2212\n\nint max(int num1, int num2);\n\nParameter names are not important in function declaration only their type is required, so following is also valid declaration \u2212\n\nint max(int, int);\n\nFunction declaration is required when you define a function in one source file and you call that function in another file. In such case, you should declare the function at the top of the file calling the function.\nCalling a Function\nWhile creating a C++ function, you give a definition of what the function has to do. To use a function, you will have to call or invoke that function.\nWhen a program calls a function, program control is transferred to the called function. A called function performs defined task and when it\u2019s return statement is executed or when its function-ending closing brace is reached, it returns program control back to the main program.\nTo call a function, you simply need to pass the required parameters along with function name, and if function returns a value, then you can store returned value. For example \u2212\n Live Demo\n\n#include <iostream>\nusing namespace std;\n \n// function declaration\nint max(int num1, int num2);\n \nint main () {\n   // local variable declaration:\n   int a = 100;\n   int b = 200;\n   int ret;\n \n   // calling a function to get max value.\n   ret = max(a, b);\n   cout << \"Max value is : \" << ret << endl;\n \n   return 0;\n}\n \n// function returning the max between two numbers\nint max(int num1, int num2) {\n   // local variable declaration\n   int result;\n \n   if (num1 > num2)\n      result = num1;\n   else\n      result = num2;\n \n   return result; \n}\n\nI kept max() function along with main() function and compiled the source code. While running final executable, it would produce the following result \u2212\n\nMax value is : 200\n\nFunction Arguments\nIf a function is to use arguments, it must declare variables that accept the values of the arguments. These variables are called the formal parameters of the function.\nThe formal parameters behave like other local variables inside the function and are created upon entry into the function and destroyed upon exit.\nWhile calling a function, there are two ways that arguments can be passed to a function \u2212\n\n\nSr.No\nCall Type & Description\n\n\n1\nCall by Value\nThis method copies the actual value of an argument into the formal parameter of the function. In this case, changes made to the parameter inside the function have no effect on the argument.\n\n\n2\nCall by Pointer\nThis method copies the address of an argument into the formal parameter. Inside the function, the address is used to access the actual argument used in the call. This means that changes made to the parameter affect the argument.\n\n\n3\nCall by Reference\nThis method copies the reference of an argument into the formal parameter. Inside the function, the reference is used to access the actual argument used in the call. This means that changes made to the parameter affect the argument.\n\n\nBy default, C++ uses call by value to pass arguments. In general, this means that code within a function cannot alter the arguments used to call the function and above mentioned example while calling max() function used the same method.\nDefault Values for Parameters\nWhen you define a function, you can specify a default value for each of the last parameters. This value will be used if the corresponding argument is left blank when calling to the function.\nThis is done by using the assignment operator and assigning values for the arguments in the function definition. If a value for that parameter is not passed when the function is called, the default given value is used, but if a value is specified, this default value is ignored and the passed value is used instead. Consider the following example \u2212\n Live Demo\n\n#include <iostream>\nusing namespace std;\n \nint sum(int a, int b = 20) {\n   int result;\n   result = a + b;\n  \n   return (result);\n}\nint main () {\n   // local variable declaration:\n   int a = 100;\n   int b = 200;\n   int result;\n \n   // calling a function to add the values.\n   result = sum(a, b);\n   cout << \"Total value is :\" << result << endl;\n\n   // calling a function again as follows.\n   result = sum(a);\n   cout << \"Total value is :\" << result << endl;\n \n   return 0;\n}\n\nWhen the above code is compiled and executed, it produces the following result \u2212\n\nTotal value is :300\nTotal value is :120\n\nNumbers in C++\nNormally, when we work with Numbers, we use primitive data types such as int, short, long, float and double, etc. The number data types, their possible values and number ranges have been explained while discussing C++ Data Types.\nDefining Numbers in C++\nYou have already defined numbers in various examples given in previous chapters. Here is another consolidated example to define various types of numbers in C++ \u2212\n Live Demo\n\n#include <iostream>\nusing namespace std;\n \nint main () {\n   // number definition:\n   short  s;\n   int    i;\n   long   l;\n   float  f;\n   double d;\n   \n   // number assignments;\n   s = 10;      \n   i = 1000;    \n   l = 1000000; \n   f = 230.47;  \n   d = 30949.374;\n   \n   // number printing;\n   cout << \"short  s :\" << s << endl;\n   cout << \"int    i :\" << i << endl;\n   cout << \"long   l :\" << l << endl;\n   cout << \"float  f :\" << f << endl;\n   cout << \"double d :\" << d << endl;\n \n   return 0;\n}\n\nWhen the above code is compiled and executed, it produces the following result \u2212\n\nshort  s :10\nint    i :1000\nlong   l :1000000\nfloat  f :230.47\ndouble d :30949.4\n\nMath Operations in C++\nIn addition to the various functions you can create, C++ also includes some useful functions you can use. These functions are available in standard C and C++ libraries and called built-in functions. These are functions that can be included in your program and then use.\nC++ has a rich set of mathematical operations, which can be performed on various numbers. Following table lists down some useful built-in mathematical functions available in C++.\nTo utilize these functions you need to include the math header file <cmath>.\n\n\nSr.No\nFunction & Purpose\n\n\n1\ndouble cos(double);\nThis function takes an angle (as a double) and returns the cosine.\n\n\n\n2\ndouble sin(double);\nThis function takes an angle (as a double) and returns the sine.\n\n\n\n3\ndouble tan(double);\nThis function takes an angle (as a double) and returns the tangent.\n\n\n\n4\ndouble log(double);\nThis function takes a number and returns the natural log of that number.\n\n\n\n5\ndouble pow(double, double);\nThe first is a number you wish to raise and the second is the power you wish to raise it t\n\n\n\n6\ndouble hypot(double, double);\nIf you pass this function the length of two sides of a right triangle, it will return you the length of the hypotenuse.\n\n\n\n7\ndouble sqrt(double);\nYou pass this function a number and it gives you the square root.\n\n\n\n8\nint abs(int);\nThis function returns the absolute value of an integer that is passed to it.\n\n\n\n9\ndouble fabs(double);\nThis function returns the absolute value of any decimal number passed to it.\n\n\n\n10\ndouble floor(double);\nFinds the integer which is less than or equal to the argument passed to it.\n\n\n\nFollowing is a simple example to show few of the mathematical operations \u2212\n Live Demo\n\n#include <iostream>\n#include <cmath>\nusing namespace std;\n \nint main () {\n   // number definition:\n   short  s = 10;\n   int    i = -1000;\n   long   l = 100000;\n   float  f = 230.47;\n   double d = 200.374;\n\n   // mathematical operations;\n   cout << \"sin(d) :\" << sin(d) << endl;\n   cout << \"abs(i)  :\" << abs(i) << endl;\n   cout << \"floor(d) :\" << floor(d) << endl;\n   cout << \"sqrt(f) :\" << sqrt(f) << endl;\n   cout << \"pow( d, 2) :\" << pow(d, 2) << endl;\n \n   return 0;\n}\n\nWhen the above code is compiled and executed, it produces the following result \u2212\n\nsign(d)     :-0.634939\nabs(i)      :1000\nfloor(d)    :200\nsqrt(f)     :15.1812\npow( d, 2 ) :40149.7\n\nRandom Numbers in C++\nThere are many cases where you will wish to generate a random number. There are actually two functions you will need to know about random number generation. The first is rand(), this function will only return a pseudo random number. The way to fix this is to first call the srand() function.\nFollowing is a simple example to generate few random numbers. This example makes use of time() function to get the number of seconds on your system time, to randomly seed the rand() function \u2212\n Live Demo\n\n#include <iostream>\n#include <ctime>\n#include <cstdlib>\n\nusing namespace std;\n \nint main () {\n   int i,j;\n \n   // set the seed\n   srand( (unsigned)time( NULL ) );\n\n   /* generate 10  random numbers. */\n   for( i = 0; i < 10; i++ ) {\n      // generate actual random number\n      j = rand();\n      cout <<\" Random Number : \" << j << endl;\n   }\n\n   return 0;\n}\n\nWhen the above code is compiled and executed, it produces the following result \u2212\n\nRandom Number : 1748144778\nRandom Number : 630873888\nRandom Number : 2134540646\nRandom Number : 219404170\nRandom Number : 902129458\nRandom Number : 920445370\nRandom Number : 1319072661\nRandom Number : 257938873\nRandom Number : 1256201101\nRandom Number : 580322989\n\nC++ Arrays\nC++ provides a data structure, the array, which stores a fixed-size sequential collection of elements of the same type. An array is used to store a collection of data, but it is often more useful to think of an array as a collection of variables of the same type.\nInstead of declaring individual variables, such as number0, number1, ..., and number99, you declare one array variable such as numbers and use numbers[0], numbers[1], and ..., numbers[99] to represent individual variables. A specific element in an array is accessed by an index. \nAll arrays consist of contiguous memory locations. The lowest address corresponds to the first element and the highest address to the last element.\nDeclaring Arrays\nTo declare an array in C++, the programmer specifies the type of the elements and the number of elements required by an array as follows \u2212\n\ntype arrayName [ arraySize ];\n\nThis is called a single-dimension array. The arraySize must be an integer constant greater than zero and type can be any valid C++ data type. For example, to declare a 10-element array called balance of type double,\nuse this statement \u2212\n\ndouble balance[10];\n\nInitializing Arrays\nYou can initialize C++ array elements either one by one or using a single statement as follows \u2212\n\ndouble balance[5] = {1000.0, 2.0, 3.4, 17.0, 50.0};\n\nThe number of values between braces { } can not be larger than the number of elements that we declare for the array between square brackets [ ]. Following is an example to assign a single element of the array \u2212\nIf you omit the size of the array, an array just big enough to hold the initialization is created.  Therefore, if you write \u2212\n\ndouble balance[] = {1000.0, 2.0, 3.4, 17.0, 50.0};\n\nYou will create exactly the same array as you did in the previous example.\n\nbalance[4] = 50.0;\n\nThe above statement assigns element number 5th in the array a value of 50.0. Array with 4th index will be 5th, i.e., last element because all arrays have 0 as the index of their first element which is also called base index. Following is the pictorial representaion of the same array we discussed above \u2212\n\nAccessing Array Elements\nAn element is accessed by indexing the array name. This is done by placing the index of the element within square brackets after the name of the array. For example \u2212\n\ndouble salary = balance[9];\n\nThe above statement will take 10th element from the array and assign the value to salary variable. Following is an example, which will use all the above-mentioned three concepts viz. declaration, assignment and accessing arrays \u2212\n Live Demo\n\n#include <iostream>\nusing namespace std;\n \n#include <iomanip>\nusing std::setw;\n \nint main () {\n\n   int n[ 10 ]; // n is an array of 10 integers\n \n   // initialize elements of array n to 0          \n   for ( int i = 0; i < 10; i++ ) {\n      n[ i ] = i + 100; // set element at location i to i + 100\n   }\n   cout << \"Element\" << setw( 13 ) << \"Value\" << endl;\n \n   // output each array element's value                      \n   for ( int j = 0; j < 10; j++ ) {\n      cout << setw( 7 )<< j << setw( 13 ) << n[ j ] << endl;\n   }\n \n   return 0;\n}\n\nThis program makes use of setw() function to format the output. When the above code is compiled and executed, it produces the following result \u2212\n\nElement        Value\n      0          100\n      1          101\n      2          102\n      3          103\n      4          104\n      5          105\n      6          106\n      7          107\n      8          108\n      9          109\n\nArrays in C++\nArrays are important to C++ and should need lots of more detail. There are following few important concepts, which should be clear to a C++ programmer \u2212\n\n\nSr.No\nConcept & Description\n\n\n1\nMulti-dimensional arrays\nC++ supports multidimensional arrays. The simplest form of the multidimensional array is the two-dimensional array.\n\n\n2\nPointer to an array\nYou can generate a pointer to the first element of an array by simply specifying the array name, without any index.\n\n\n3\nPassing arrays to functions\nYou can pass to the function a pointer to an array by specifying the array's name without an index.\n\n\n4\nReturn array from functions\nC++ allows a function to return an array.\n\n\nC++ Strings\nC++ provides following two types of string representations \u2212\n\nThe C-style character string.\nThe string class type introduced with Standard C++.\n\nThe C-Style Character String\nThe C-style character string originated within the C language and continues to be supported within C++.  This string is actually a one-dimensional array of characters which is terminated by a null character '\\0'. Thus a null-terminated string contains the characters that comprise the string followed by a null.\nThe following declaration and initialization create a string consisting of the word \"Hello\". To hold the null character at the end of the array, the size of the character array containing the string is one more than the number of characters in the word \"Hello.\"\n\nchar greeting[6] = {'H', 'e', 'l', 'l', 'o', '\\0'};\n\nIf you follow the rule  of array initialization, then you can write the above statement as follows \u2212\n\nchar greeting[] = \"Hello\";\n\nFollowing is the memory presentation of above defined string in C/C++ \u2212\n\nActually, you do not place the null character at the end of a string constant. The C++ compiler automatically places the '\\0' at the end of the string when it initializes the array. Let us try to print above-mentioned string \u2212\n Live Demo\n\n#include <iostream>\n\nusing namespace std;\n\nint main () {\n\n   char greeting[6] = {'H', 'e', 'l', 'l', 'o', '\\0'};\n\n   cout << \"Greeting message: \";\n   cout << greeting << endl;\n\n   return 0;\n}\n\nWhen the above code is compiled and executed, it produces the following result \u2212\n\nGreeting message: Hello\n\nC++ supports a wide range of functions that manipulate null-terminated strings \u2212\n\n\nSr.No\nFunction & Purpose\n\n\n1\nstrcpy(s1, s2);\nCopies string s2 into string s1.\n\n\n\n2\nstrcat(s1, s2);\nConcatenates string s2 onto the end of string s1.\n\n\n\n3\nstrlen(s1);\nReturns the length of string s1.\n\n\n\n4\nstrcmp(s1, s2);\nReturns 0 if s1 and s2 are the same; less than 0 if s1<s2; greater than 0 if s1>s2.\n\n\n\n5\nstrchr(s1, ch);\nReturns a pointer to the first occurrence of character ch in string s1.\n\n\n\n6\nstrstr(s1, s2);\nReturns a pointer to the first occurrence of string s2 in string s1.\n\n\n\nFollowing example makes use of few of the above-mentioned functions \u2212\n Live Demo\n\n#include <iostream>\n#include <cstring>\n\nusing namespace std;\n\nint main () {\n\n   char str1[10] = \"Hello\";\n   char str2[10] = \"World\";\n   char str3[10];\n   int  len ;\n\n   // copy str1 into str3\n   strcpy( str3, str1);\n   cout << \"strcpy( str3, str1) : \" << str3 << endl;\n\n   // concatenates str1 and str2\n   strcat( str1, str2);\n   cout << \"strcat( str1, str2): \" << str1 << endl;\n\n   // total lenghth of str1 after concatenation\n   len = strlen(str1);\n   cout << \"strlen(str1) : \" << len << endl;\n\n   return 0;\n}\n\nWhen the above code is compiled and executed, it produces result something as follows \u2212\n\nstrcpy( str3, str1) : Hello\nstrcat( str1, str2): HelloWorld\nstrlen(str1) : 10\n\nThe String Class in C++\nThe standard C++ library provides a string class type that supports all the operations mentioned above, additionally much more functionality. Let us check the following example \u2212\n Live Demo\n\n#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main () {\n\n   string str1 = \"Hello\";\n   string str2 = \"World\";\n   string str3;\n   int  len ;\n\n   // copy str1 into str3\n   str3 = str1;\n   cout << \"str3 : \" << str3 << endl;\n\n   // concatenates str1 and str2\n   str3 = str1 + str2;\n   cout << \"str1 + str2 : \" << str3 << endl;\n\n   // total length of str3 after concatenation\n   len = str3.size();\n   cout << \"str3.size() :  \" << len << endl;\n\n   return 0;\n}\n\nWhen the above code is compiled and executed, it produces result something as follows \u2212\n\nstr3 : Hello\nstr1 + str2 : HelloWorld\nstr3.size() :  10\n\nC++ Pointers\nC++ pointers are easy and fun to learn. Some C++ tasks are performed more easily with pointers, and other C++ tasks, such as dynamic memory allocation, cannot be performed without them.\nAs you know every variable is a memory location and every memory location has its address defined which can be accessed using ampersand (&) operator which denotes an address in memory. Consider the following which will print the address of the variables defined \u2212\n Live Demo\n\n#include <iostream>\n\nusing namespace std;\nint main () {\n   int  var1;\n   char var2[10];\n\n   cout << \"Address of var1 variable: \";\n   cout << &var1 << endl;\n\n   cout << \"Address of var2 variable: \";\n   cout << &var2 << endl;\n\n   return 0;\n}\n\nWhen the above code is compiled and executed, it produces the following result \u2212\n\nAddress of var1 variable: 0xbfebd5c0\nAddress of var2 variable: 0xbfebd5b6\n\nWhat are Pointers?\nA pointer is a variable whose value is the address of another variable. Like any variable or constant, you must declare a pointer before you can work with it. The general form of a pointer variable declaration is \u2212\n\ntype *var-name;\n\nHere, type is the pointer's base type; it must be a valid C++ type and var-name is the name of the pointer variable. The asterisk you used to declare a pointer is the same asterisk that you use for multiplication. However, in this statement the asterisk is being used to designate a variable as a pointer. Following are the valid pointer declaration \u2212\n\nint    *ip;    // pointer to an integer\ndouble *dp;    // pointer to a double\nfloat  *fp;    // pointer to a float\nchar   *ch     // pointer to character\n\nThe actual data type of the value of all pointers, whether integer, float, character, or otherwise, is the same, a long hexadecimal number that represents a memory address. The only difference between pointers of different data types is the data type of the variable or constant that the pointer points to.\nUsing Pointers in C++\nThere are few important operations, which we will do with the pointers very frequently. (a) We define a pointer variable. (b) Assign the address of a variable to a pointer. (c) Finally access the value at the address available in the pointer variable. This is done by using unary operator * that returns the value of the variable located at the address specified by its operand. Following example makes use of these operations \u2212\n Live Demo\n\n#include <iostream>\n\nusing namespace std;\n\nint main () {\n   int  var = 20;   // actual variable declaration.\n   int  *ip;        // pointer variable \n\n   ip = &var;       // store address of var in pointer variable\n\n   cout << \"Value of var variable: \";\n   cout << var << endl;\n\n   // print the address stored in ip pointer variable\n   cout << \"Address stored in ip variable: \";\n   cout << ip << endl;\n\n   // access the value at the address available in pointer\n   cout << \"Value of *ip variable: \";\n   cout << *ip << endl;\n\n   return 0;\n}\n\nWhen the above code is compiled and executed, it produces result something as follows \u2212\n\nValue of var variable: 20\nAddress stored in ip variable: 0xbfc601ac\nValue of *ip variable: 20\n\nPointers in C++\nPointers have many but easy concepts and they are very important to C++ programming. There are following few important pointer concepts which should be clear to a C++ programmer \u2212\n\n\nSr.No\nConcept & Description\n\n\n1\nNull Pointers\nC++ supports null pointer, which is a constant with a value of zero defined in several standard libraries.\n\n\n2\nPointer Arithmetic\nThere are four arithmetic operators that can be used on pointers: ++, --, +, -\n\n\n3\nPointers vs Arrays\nThere is a close relationship between pointers and arrays.\n\n\n4\nArray of Pointers\nYou can define arrays to hold a number of pointers.\n\n\n5\nPointer to Pointer\nC++ allows you to have pointer on a pointer and so on.\n\n\n6\nPassing Pointers to Functions\nPassing an argument by reference or by address both enable the passed argument to be changed in the calling function by the called function.\n\n\n7\nReturn Pointer from Functions\nC++ allows a function to return a pointer to local variable, static variable and dynamically allocated memory as well.\n\n\nC++ References\nA reference variable is an alias, that is, another name for an already existing variable. Once a reference is initialized with a variable, either the variable name or the reference name may be used to refer to the variable.\nReferences vs Pointers\nReferences are often confused with pointers but three major differences between references and pointers are \u2212\n\nYou cannot have NULL references. You must always be able to assume that a reference is connected to a legitimate piece of storage.\nOnce a reference is initialized to an object, it cannot be changed to refer to another object. Pointers can be pointed to another object at any time.\nA reference must be initialized when it is created. Pointers can be initialized at any time.\n\nCreating References in C++\nThink of a variable name as a label attached to the variable's location in memory. You can then think of a reference as a second label attached to that memory location. Therefore, you can access the contents of the variable through either the original variable name or the reference. For example, suppose we have the following example \u2212\n\nint i = 17;\n\nWe can declare reference variables for i as follows.\n\nint& r = i;\n\nRead the & in these declarations as reference. Thus, read the first declaration as \"r is an integer reference initialized to i\" and read the second declaration as \"s is a double reference initialized to d.\". Following example makes use of references on int and double \u2212\n Live Demo\n\n#include <iostream>\n \nusing namespace std;\n \nint main () {\n   // declare simple variables\n   int    i;\n   double d;\n \n   // declare reference variables\n   int&    r = i;\n   double& s = d;\n   \n   i = 5;\n   cout << \"Value of i : \" << i << endl;\n   cout << \"Value of i reference : \" << r  << endl;\n \n   d = 11.7;\n   cout << \"Value of d : \" << d << endl;\n   cout << \"Value of d reference : \" << s  << endl;\n   \n   return 0;\n}\n\nWhen the above code is compiled together and executed, it produces the following result \u2212\n\nValue of i : 5\nValue of i reference : 5\nValue of d : 11.7\nValue of d reference : 11.7\n\nReferences are usually used for function argument lists and function return values. So following are two important subjects related to C++ references which should be clear to a C++ programmer \u2212\n\n\nSr.No\nConcept & Description\n\n\n1\nReferences as Parameters\nC++ supports passing references as function parameter more safely than parameters.\n\n\n2\nReference as Return Value\nYou can return reference from a C++ function like any other data type.\n\n\nC++ Date and Time\nThe C++ standard library does not provide a proper date type. C++ inherits the structs and functions for date and time manipulation from C. To access date and time related functions and structures, you would need to include <ctime> header file in your C++ program.\nThere are four time-related types: clock_t, time_t, size_t, and tm. The types - clock_t, size_t and time_t are capable of representing the system time and date as some sort of integer.\nThe structure type tm holds the date and time in the form of a C structure having the following elements \u2212\n\nstruct tm {\n   int tm_sec;   // seconds of minutes from 0 to 61\n   int tm_min;   // minutes of hour from 0 to 59\n   int tm_hour;  // hours of day from 0 to 24\n   int tm_mday;  // day of month from 1 to 31\n   int tm_mon;   // month of year from 0 to 11\n   int tm_year;  // year since 1900\n   int tm_wday;  // days since sunday\n   int tm_yday;  // days since January 1st\n   int tm_isdst; // hours of daylight savings time\n}\n\nFollowing are the important functions, which we use while working with date and time in C or C++. All these functions are part of standard C and C++ library and you can check their detail using reference to C++ standard library given below.\n\n\nSr.No\nFunction & Purpose\n\n\n1\ntime_t time(time_t *time);\nThis returns the current calendar time of the system in number of seconds elapsed since January 1, 1970. If the system has no time, .1 is returned.\n\n\n\n2\nchar *ctime(const time_t *time);\nThis returns a pointer to a string of the form day month year hours:minutes:seconds year\\n\\0.\n\n\n\n3\nstruct tm *localtime(const time_t *time);\nThis returns a pointer to the tm structure representing local time.\n\n\n\n4\nclock_t clock(void);\nThis returns a value that approximates the amount of time the calling program has been running. A value of .1 is returned if the time is not available.\n\n\n\n5\nchar * asctime ( const struct tm * time );\nThis returns a pointer to a string that contains the information stored in the structure pointed to by time converted into the form: day month date hours:minutes:seconds year\\n\\0\n\n\n\n6\nstruct tm *gmtime(const time_t *time);\nThis returns a pointer to the time in the form of a tm structure. The time is represented in Coordinated Universal Time (UTC), which is essentially Greenwich Mean Time (GMT).\n\n\n\n7\ntime_t mktime(struct tm *time);\nThis returns the calendar-time equivalent of the time found in the structure pointed to by time.\n\n\n\n8\ndouble difftime ( time_t time2, time_t time1 );\nThis function calculates the difference in seconds between time1 and time2.\n\n\n\n9\nsize_t strftime();\nThis function can be used to format date and time in a specific format.\n\n\n\nCurrent Date and Time\nSuppose you want to retrieve the current system date and time, either as a local time or as a Coordinated Universal Time (UTC). Following is the example to achieve the same \u2212\n Live Demo\n\n#include <iostream>\n#include <ctime>\n\nusing namespace std;\n\nint main() {\n   // current date/time based on current system\n   time_t now = time(0);\n   \n   // convert now to string form\n   char* dt = ctime(&now);\n\n   cout << \"The local date and time is: \" << dt << endl;\n\n   // convert now to tm struct for UTC\n   tm *gmtm = gmtime(&now);\n   dt = asctime(gmtm);\n   cout << \"The UTC date and time is:\"<< dt << endl;\n}\n\nWhen the above code is compiled and executed, it produces the following result \u2212\n\nThe local date and time is: Sat Jan  8 20:07:41 2011\n\nThe UTC date and time is:Sun Jan  9 03:07:41 2011\n\nFormat Time using struct tm\nThe tm structure is very important while working with date and time in either C or C++. This structure holds the date and time in the form of a C structure as mentioned above. Most of the time related functions makes use of tm structure. Following is an example which makes use of various date and time related functions and tm structure \u2212\nWhile using structure in this chapter, I'm making an assumption that you have basic understanding on C structure and how to access structure members using arrow -> operator.\n Live Demo\n\n#include <iostream>\n#include <ctime>\n\nusing namespace std;\n\nint main() {\n   // current date/time based on current system\n   time_t now = time(0);\n\n   cout << \"Number of sec since January 1,1970:\" << now << endl;\n\n   tm *ltm = localtime(&now);\n\n   // print various components of tm structure.\n   cout << \"Year\" << 1970 + ltm->tm_year<<endl;\n   cout << \"Month: \"<< 1 + ltm->tm_mon<< endl;\n   cout << \"Day: \"<<  ltm->tm_mday << endl;\n   cout << \"Time: \"<< 1 + ltm->tm_hour << \":\";\n   cout << 1 + ltm->tm_min << \":\";\n   cout << 1 + ltm->tm_sec << endl;\n}\n\nWhen the above code is compiled and executed, it produces the following result \u2212\n\nNumber of sec since January 1, 1970:1294548238\nYear: 2011\nMonth: 1\nDay: 8\nTime: 22: 44:59\n\nC++ Basic Input/Output\nThe C++ standard libraries provide an extensive set of input/output capabilities which we will see in subsequent chapters. This chapter will discuss very basic and most common I/O operations required for C++ programming.\nC++ I/O occurs in streams, which are sequences of bytes.  If bytes flow from a device like a keyboard, a disk drive, or a network connection etc. to main memory, this is called input operation and if bytes flow from main memory to a device like a display screen, a printer, a disk drive, or a network connection, etc., this is called output operation.\nI/O Library Header Files\nThere are following header files important to C++ programs \u2212\n\n\nSr.No\nHeader File & Function and Description\n\n\n1\n<iostream>\nThis file defines the cin, cout, cerr and clog objects, which correspond to the standard input stream, the standard output stream, the un-buffered standard error stream and the buffered standard error stream, respectively.\n\n\n2\n<iomanip>\nThis file declares services useful for performing formatted I/O with so-called parameterized stream manipulators, such as setw and setprecision.\n\n\n3\n<fstream>\nThis file declares services for user-controlled file processing. We will discuss about it in detail in File and Stream related chapter.\n\n\nThe Standard Output Stream (cout)\nThe predefined object cout is an instance of ostream class. The cout object is said to be \"connected to\" the standard output device, which usually is the display screen. The cout is used in conjunction with the stream insertion operator, which is written as << which are two less than signs as shown in the following example.\n Live Demo\n\n#include <iostream>\n \nusing namespace std;\n \nint main() {\n   char str[] = \"Hello C++\";\n \n   cout << \"Value of str is : \" << str << endl;\n}\n\nWhen the above code is compiled and executed, it produces the following result \u2212\n\nValue of str is : Hello C++\n\nThe C++ compiler also determines the data type of variable to be output and selects the appropriate stream insertion operator to display the value. The << operator is overloaded to output data items of built-in types integer, float, double,  strings and pointer values.\nThe insertion operator << may be used more than once in a single statement as shown above and endl is used to add a new-line at the end of the line.\nThe Standard Input Stream (cin)\nThe predefined object cin is an instance of istream class. The cin object is said to be attached to the standard input  device, which usually is the keyboard. The cin is used in conjunction with the stream extraction operator, which is written as >> which are two greater than signs as shown in the following example.\n Live Demo\n\n#include <iostream>\n \nusing namespace std;\n \nint main() {\n   char name[50];\n \n   cout << \"Please enter your name: \";\n   cin >> name;\n   cout << \"Your name is: \" << name << endl;\n \n}\n\nWhen the above code is compiled and executed, it will prompt you to enter a name. You enter a value and then hit enter to see the following result \u2212\n\nPlease enter your name: cplusplus\nYour name is: cplusplus\n\nThe C++ compiler also determines the data type of the entered value and selects the appropriate stream extraction operator to extract the value and store it in the given variables.\nThe stream extraction operator >> may be used more than once in a single statement. To request more than one datum you can use the following \u2212\n\ncin >> name >> age;\n\nThis will be equivalent to the following two statements \u2212\n\ncin >> name;\ncin >> age;\n\nThe Standard Error Stream (cerr)\nThe predefined object cerr is an instance of ostream class. The cerr object is said to be attached to the standard error device, which is also a display screen but the object cerr is un-buffered and each stream insertion to cerr causes its output to appear immediately.\nThe cerr is also used in conjunction with the stream insertion operator as shown in the following example.\n Live Demo\n\n#include <iostream>\n \nusing namespace std;\n \nint main() {\n   char str[] = \"Unable to read....\";\n \n   cerr << \"Error message : \" << str << endl;\n}\n\nWhen the above code is compiled and executed, it produces the following result \u2212\n\nError message : Unable to read....\n\nThe Standard Log Stream (clog)\nThe predefined object clog is an instance of ostream class. The clog object is said to be attached to the standard error device, which is also a display screen but the object clog is buffered. This means that each insertion to clog could cause its output to be held in a buffer until the buffer is filled or until the buffer is flushed.\nThe clog is also used in conjunction with the stream insertion operator as shown in the following example.\n Live Demo\n\n#include <iostream>\n \nusing namespace std;\n \nint main() {\n   char str[] = \"Unable to read....\";\n \n   clog << \"Error message : \" << str << endl;\n}\n\nWhen the above code is compiled and executed, it produces the following result \u2212\n\nError message : Unable to read....\n\nYou would not be able to see any difference in cout, cerr and clog with these small examples, but while writing and executing big programs the difference becomes obvious. So it is good practice to display error messages using cerr stream and while displaying other log messages then clog should be used.\nC++ Data Structures\nC/C++ arrays allow you to define variables that combine several data items of the same kind, but structure is another user defined data type which allows you to combine data items of different kinds.\nStructures are used to represent a record, suppose you want to keep track of your books in a library. You might want to track the following attributes about each book \u2212\n\nTitle\nAuthor\nSubject\nBook ID\n\nDefining a Structure\nTo define a structure, you must use the struct statement. The struct statement defines a new data type, with more than one member, for your program. The format of the struct statement is this \u2212\n\nstruct [structure tag] {\n   member definition;\n   member definition;\n   ...\n   member definition;\n} [one or more structure variables];  \n\nThe structure tag is optional and each member definition is a normal variable definition, such as int i; or float f; or any other valid variable definition. At the end of the structure's definition, before the final semicolon, you can specify one or more structure variables but it is optional. Here is the way you would declare the Book structure \u2212\n\nstruct Books {\n   char  title[50];\n   char  author[50];\n   char  subject[100];\n   int   book_id;\n} book;  \n\nAccessing Structure Members\nTo access any member of a structure, we use the member access operator (.). The member access operator is coded as a period between the structure variable name and the structure member that we wish to access. You would use struct keyword to define variables of structure type. Following is the example to explain usage of structure \u2212\n Live Demo\n\n#include <iostream>\n#include <cstring>\n \nusing namespace std;\n \nstruct Books {\n   char  title[50];\n   char  author[50];\n   char  subject[100];\n   int   book_id;\n};\n \nint main() {\n   struct Books Book1;        // Declare Book1 of type Book\n   struct Books Book2;        // Declare Book2 of type Book\n \n   // book 1 specification\n   strcpy( Book1.title, \"Learn C++ Programming\");\n   strcpy( Book1.author, \"Chand Miyan\"); \n   strcpy( Book1.subject, \"C++ Programming\");\n   Book1.book_id = 6495407;\n\n   // book 2 specification\n   strcpy( Book2.title, \"Telecom Billing\");\n   strcpy( Book2.author, \"Yakit Singha\");\n   strcpy( Book2.subject, \"Telecom\");\n   Book2.book_id = 6495700;\n \n   // Print Book1 info\n   cout << \"Book 1 title : \" << Book1.title <<endl;\n   cout << \"Book 1 author : \" << Book1.author <<endl;\n   cout << \"Book 1 subject : \" << Book1.subject <<endl;\n   cout << \"Book 1 id : \" << Book1.book_id <<endl;\n\n   // Print Book2 info\n   cout << \"Book 2 title : \" << Book2.title <<endl;\n   cout << \"Book 2 author : \" << Book2.author <<endl;\n   cout << \"Book 2 subject : \" << Book2.subject <<endl;\n   cout << \"Book 2 id : \" << Book2.book_id <<endl;\n\n   return 0;\n}\n\nWhen the above code is compiled and executed, it produces the following result \u2212\n\nBook 1 title : Learn C++ Programming\nBook 1 author : Chand Miyan\nBook 1 subject : C++ Programming\nBook 1 id : 6495407\nBook 2 title : Telecom Billing\nBook 2 author : Yakit Singha\nBook 2 subject : Telecom\nBook 2 id : 6495700\n\nStructures as Function Arguments\nYou can pass a structure as a function argument in very similar way as you pass any other variable or pointer. You would access structure variables in the similar way as you have accessed in the above example \u2212\n Live Demo\n\n#include <iostream>\n#include <cstring>\n \nusing namespace std;\nvoid printBook( struct Books book );\n\nstruct Books {\n   char  title[50];\n   char  author[50];\n   char  subject[100];\n   int   book_id;\n};\n \nint main() {\n   struct Books Book1;        // Declare Book1 of type Book\n   struct Books Book2;        // Declare Book2 of type Book\n \n   // book 1 specification\n   strcpy( Book1.title, \"Learn C++ Programming\");\n   strcpy( Book1.author, \"Chand Miyan\"); \n   strcpy( Book1.subject, \"C++ Programming\");\n   Book1.book_id = 6495407;\n\n   // book 2 specification\n   strcpy( Book2.title, \"Telecom Billing\");\n   strcpy( Book2.author, \"Yakit Singha\");\n   strcpy( Book2.subject, \"Telecom\");\n   Book2.book_id = 6495700;\n \n   // Print Book1 info\n   printBook( Book1 );\n\n   // Print Book2 info\n   printBook( Book2 );\n\n   return 0;\n}\nvoid printBook( struct Books book ) {\n   cout << \"Book title : \" << book.title <<endl;\n   cout << \"Book author : \" << book.author <<endl;\n   cout << \"Book subject : \" << book.subject <<endl;\n   cout << \"Book id : \" << book.book_id <<endl;\n}\n\nWhen the above code is compiled and executed, it produces the following result \u2212\n\nBook title : Learn C++ Programming\nBook author : Chand Miyan\nBook subject : C++ Programming\nBook id : 6495407\nBook title : Telecom Billing\nBook author : Yakit Singha\nBook subject : Telecom\nBook id : 6495700\n\nPointers to Structures\nYou can define pointers to structures in very similar way as you define pointer to any other variable as follows \u2212\n\nstruct Books *struct_pointer;\n\nNow, you can store the address of a structure variable in the above defined pointer variable. To find the address of a structure variable, place the & operator before the structure's name as follows \u2212\n\nstruct_pointer = &Book1;\n\nTo access the members of a structure using a pointer to that structure, you must use the -> operator as follows \u2212\n\nstruct_pointer->title;\n\nLet us re-write above example using structure pointer, hope this will be easy for you to understand the concept \u2212\n Live Demo\n\n#include <iostream>\n#include <cstring>\n \nusing namespace std;\nvoid printBook( struct Books *book );\n\nstruct Books {\n   char  title[50];\n   char  author[50];\n   char  subject[100];\n   int   book_id;\n};\nint main() {\n   struct Books Book1;        // Declare Book1 of type Book\n   struct Books Book2;        // Declare Book2 of type Book\n \n   // Book 1 specification\n   strcpy( Book1.title, \"Learn C++ Programming\");\n   strcpy( Book1.author, \"Chand Miyan\"); \n   strcpy( Book1.subject, \"C++ Programming\");\n   Book1.book_id = 6495407;\n\n   // Book 2 specification\n   strcpy( Book2.title, \"Telecom Billing\");\n   strcpy( Book2.author, \"Yakit Singha\");\n   strcpy( Book2.subject, \"Telecom\");\n   Book2.book_id = 6495700;\n \n   // Print Book1 info, passing address of structure\n   printBook( &Book1 );\n\n   // Print Book1 info, passing address of structure\n   printBook( &Book2 );\n\n   return 0;\n}\n\n// This function accept pointer to structure as parameter.\nvoid printBook( struct Books *book ) {\n   cout << \"Book title : \" << book->title <<endl;\n   cout << \"Book author : \" << book->author <<endl;\n   cout << \"Book subject : \" << book->subject <<endl;\n   cout << \"Book id : \" << book->book_id <<endl;\n}\n\nWhen the above code is compiled and executed, it produces the following result \u2212\n\nBook title : Learn C++ Programming\nBook author : Chand Miyan\nBook subject : C++ Programming\nBook id : 6495407\nBook title : Telecom Billing\nBook author : Yakit Singha\nBook subject : Telecom\nBook id : 6495700\n\nThe typedef Keyword\nThere is an easier way to define structs or you could \"alias\" types you create. For example \u2212\n\ntypedef struct {\n   char  title[50];\n   char  author[50];\n   char  subject[100];\n   int   book_id;\n} Books;\n\nNow, you can use Books directly to define variables of Books type  without using struct keyword. Following is the example \u2212\n\nBooks Book1, Book2;\n\nYou can use typedef keyword for non-structs as well as follows \u2212\n\ntypedef long int *pint32;\n \npint32 x, y, z;\n\nx, y and z are all pointers to long ints.\nC++ Classes and Objects\nThe main purpose of C++ programming is to add object orientation to the C programming language and classes are the central feature of C++ that supports object-oriented programming and are often called user-defined types.\nA class is used to specify the form of an object and it combines data representation and methods for manipulating that data into one neat package. The data and functions within a class are called members of the class.\nC++ Class Definitions\nWhen you define a class, you define a blueprint for a data type. This doesn't actually define any data, but it does define what the class name means, that is, what an object of the class will consist of and what operations can be performed on such an object.\nA class definition starts with the keyword class followed by the class name; and the class body, enclosed by a pair of curly braces. A class definition must be followed either by a semicolon or a list of declarations. For example, we defined the Box data type using the keyword class as follows \u2212\n\nclass Box {\n   public:\n      double length;   // Length of a box\n      double breadth;  // Breadth of a box\n      double height;   // Height of a box\n};\n\nThe keyword public determines the access attributes of the members of the class that follows it. A public member can be accessed from outside the class anywhere within the scope of the class object. You can also specify the members of a class as private or protected which we will discuss in a sub-section.\nDefine C++ Objects\nA class provides the blueprints for objects, so basically an object is created from a class. We declare objects of a class with exactly the same sort of declaration that we declare variables of basic types. Following statements declare two objects of class Box \u2212\n\nBox Box1;          // Declare Box1 of type Box\nBox Box2;          // Declare Box2 of type Box\n\nBoth of the objects Box1 and Box2 will have their own copy of data members.\nAccessing the Data Members\nThe public data members of objects of a class can be accessed using the direct member access operator (.). Let us try the following example to make the things clear \u2212\n Live Demo\n\n#include <iostream>\n\nusing namespace std;\n\nclass Box {\n   public:\n      double length;   // Length of a box\n      double breadth;  // Breadth of a box\n      double height;   // Height of a box\n};\n\nint main() {\n   Box Box1;        // Declare Box1 of type Box\n   Box Box2;        // Declare Box2 of type Box\n   double volume = 0.0;     // Store the volume of a box here\n \n   // box 1 specification\n   Box1.height = 5.0; \n   Box1.length = 6.0; \n   Box1.breadth = 7.0;\n\n   // box 2 specification\n   Box2.height = 10.0;\n   Box2.length = 12.0;\n   Box2.breadth = 13.0;\n   \n   // volume of box 1\n   volume = Box1.height * Box1.length * Box1.breadth;\n   cout << \"Volume of Box1 : \" << volume <<endl;\n\n   // volume of box 2\n   volume = Box2.height * Box2.length * Box2.breadth;\n   cout << \"Volume of Box2 : \" << volume <<endl;\n   return 0;\n}\n\nWhen the above code is compiled and executed, it produces the following result \u2212\n\nVolume of Box1 : 210\nVolume of Box2 : 1560\n\nIt is important to note that private and protected members can not be accessed directly using direct member access operator (.). We will learn how private and protected members can be accessed.\nClasses and Objects in Detail\nSo far, you have got very basic idea about C++ Classes and Objects. There are further interesting concepts related to C++ Classes and Objects which we will discuss in various sub-sections listed below \u2212\n\n\nSr.No\nConcept & Description\n\n\n1\nClass Member Functions\nA member function of a class is a function that has its definition or its prototype within the class definition like any other variable.\n\n\n2\nClass Access Modifiers\nA class member can be defined as public, private or protected. By default members would be assumed as private.\n\n\n3\nConstructor & Destructor\nA class constructor is a special function in a class that is called when a new object of the class is created. A destructor is also a special function which is called when created object is deleted.\n\n\n4\nCopy Constructor\nThe copy constructor is a constructor which creates an object by initializing it with an object of the same class, which has been created previously.\n\n\n5\nFriend Functions\nA friend function is permitted full access to private and protected members of a class.\n\n\n6\nInline Functions\nWith an inline function, the compiler tries to expand the code in the body of the function in place of a call to the function.\n\n\n7\nthis Pointer\nEvery object has a special pointer this which points to the object itself.\n\n\n8\nPointer to C++ Classes\nA pointer to a class is done exactly the same way a pointer to a structure is. In fact a class is really just a structure with functions in it.\n\n\n9\nStatic Members of a Class\nBoth data members and function members of a class can be declared as static.\n\n\nC++ Inheritance\nOne of the most important concepts in object-oriented programming is that of inheritance. Inheritance allows us to define a class in terms of another class, which makes it easier to create and maintain an application. This also provides an opportunity to reuse the code functionality and fast implementation time.\nWhen creating a class, instead of writing completely new data members and member functions, the programmer can designate that the new class should inherit the members of an existing class. This existing class is called the base class, and the new class is referred to as the derived class.\nThe idea of inheritance implements the is a relationship. For example, mammal IS-A animal, dog IS-A mammal hence dog IS-A animal as well and so on.\nBase and Derived Classes\nA class can be derived from more than one classes, which means it can inherit data and functions from multiple base classes. To define a derived class, we use a class derivation list to specify the base class(es). A class derivation list names one or more base classes and has the form \u2212\n\nclass derived-class: access-specifier base-class\n\nWhere access-specifier is one of public, protected, or private, and base-class is the name of a previously defined class. If the access-specifier is not used, then it is private by default.\nConsider a base class Shape and its derived class Rectangle as follows \u2212\n Live Demo\n\n#include <iostream>\n \nusing namespace std;\n\n// Base class\nclass Shape {\n   public:\n      void setWidth(int w) {\n         width = w;\n      }\n      void setHeight(int h) {\n         height = h;\n      }\n      \n   protected:\n      int width;\n      int height;\n};\n\n// Derived class\nclass Rectangle: public Shape {\n   public:\n      int getArea() { \n         return (width * height); \n      }\n};\n\nint main(void) {\n   Rectangle Rect;\n \n   Rect.setWidth(5);\n   Rect.setHeight(7);\n\n   // Print the area of the object.\n   cout << \"Total area: \" << Rect.getArea() << endl;\n\n   return 0;\n}\n\nWhen the above code is compiled and executed, it produces the following result \u2212\n\nTotal area: 35\n\nAccess Control and Inheritance\nA derived class can access all the non-private members of its base class. Thus base-class members that should not be accessible to the member functions of derived classes should be declared private in the base class.\nWe can summarize the different access types according to - who can access them in the following way \u2212\n\n\nAccess\npublic\nprotected\nprivate\n\n\nSame class\nyes\nyes\nyes\n\n\nDerived classes\nyes\nyes\nno\n\n\nOutside classes\nyes\nno\nno\n\n\nA derived class inherits all base class methods with the following exceptions \u2212\n\nConstructors, destructors and copy constructors of the base class.\nOverloaded operators of the base class.\nThe friend functions of the base class.\n\nType of Inheritance\nWhen deriving a class from a base class, the base class may be inherited through public, protected or  private inheritance. The type of inheritance is specified by the access-specifier as explained above.\nWe hardly use protected or  private inheritance, but public inheritance is commonly used. While using different type of inheritance, following rules are applied \u2212\n\nPublic Inheritance \u2212 When deriving a class from a public base class, public members of the base class become public members of the derived class and protected members of the base class become protected members of the derived class. A base class's private members are never accessible directly from a derived class, but can be accessed through calls to the public and protected members of the base class.\nProtected Inheritance \u2212  When deriving from a protected base class, public and protected members of the base class become protected members of the derived class.\nPrivate Inheritance \u2212 When deriving from a private base class, public and protected members of the base class become private members of the derived class.\n\nMultiple Inheritance\nA C++ class can inherit members from more than one class and here is the extended syntax \u2212\n\nclass derived-class: access baseA, access baseB....\n\nWhere access is one of public, protected, or private and would be given for every base class and they will be separated by comma as shown above. Let us try the following example \u2212\n Live Demo\n\n#include <iostream>\n \nusing namespace std;\n\n// Base class Shape\nclass Shape {\n   public:\n      void setWidth(int w) {\n         width = w;\n      }\n      void setHeight(int h) {\n         height = h;\n      }\n      \n   protected:\n      int width;\n      int height;\n};\n\n// Base class PaintCost\nclass PaintCost {\n   public:\n      int getCost(int area) {\n         return area * 70;\n      }\n};\n\n// Derived class\nclass Rectangle: public Shape, public PaintCost {\n   public:\n      int getArea() {\n         return (width * height); \n      }\n};\n\nint main(void) {\n   Rectangle Rect;\n   int area;\n \n   Rect.setWidth(5);\n   Rect.setHeight(7);\n\n   area = Rect.getArea();\n   \n   // Print the area of the object.\n   cout << \"Total area: \" << Rect.getArea() << endl;\n\n   // Print the total cost of painting\n   cout << \"Total paint cost: $\" << Rect.getCost(area) << endl;\n\n   return 0;\n}\n\nWhen the above code is compiled and executed, it produces the following result \u2212\n\nTotal area: 35\nTotal paint cost: $2450\n\nC++ Overloading (Operator and Function)\nC++ allows you to specify more than one definition for a function name or an operator in the same scope, which is called function overloading and operator overloading respectively.\nAn overloaded declaration is a declaration that is declared with the same name as a previously declared declaration in the same scope, except that both declarations have different arguments and obviously different definition (implementation).\nWhen you call an overloaded function or operator, the compiler determines the most appropriate definition to use, by comparing the argument types you have used to call the function or operator with the parameter types specified in the definitions. The process of selecting the most appropriate overloaded function or operator is called overload resolution.\nFunction Overloading in C++\nYou can have multiple definitions for the same function name in the same scope. The definition of the function must differ from each other by the types and/or the number of arguments in the argument list. You cannot overload function declarations that differ only by return type.\nFollowing is the example where same function print() is being used to print different data types \u2212\n Live Demo\n\n#include <iostream>\nusing namespace std;\n \nclass printData {\n   public:\n      void print(int i) {\n        cout << \"Printing int: \" << i << endl;\n      }\n      void print(double  f) {\n        cout << \"Printing float: \" << f << endl;\n      }\n      void print(char* c) {\n        cout << \"Printing character: \" << c << endl;\n      }\n};\n\nint main(void) {\n   printData pd;\n \n   // Call print to print integer\n   pd.print(5);\n   \n   // Call print to print float\n   pd.print(500.263);\n   \n   // Call print to print character\n   pd.print(\"Hello C++\");\n \n   return 0;\n}\n\nWhen the above code is compiled and executed, it produces the following result \u2212\n\nPrinting int: 5\nPrinting float: 500.263\nPrinting character: Hello C++\n\nOperators Overloading in C++\nYou can redefine or overload most of the built-in operators available in C++. Thus, a programmer can use operators with user-defined types as well.\nOverloaded operators are functions with special names: the keyword \"operator\" followed by the symbol for the operator being defined. Like any other function, an overloaded operator has a return type and a parameter list.\n\nBox operator+(const Box&);\n\ndeclares the addition operator that can be used to add two Box objects and returns final Box object. Most overloaded operators may be defined as ordinary non-member functions or as class member functions. In case we define above function as non-member function of a class then we would have to pass two arguments for each operand as follows \u2212\n\nBox operator+(const Box&, const Box&);\n\nFollowing is the example to show the concept of operator over loading using a member function. Here an object is passed as an argument whose properties will be accessed using this object, the object which will call this operator can be accessed using this operator as explained below \u2212\n Live Demo\n\n#include <iostream>\nusing namespace std;\n\nclass Box {\n   public:\n      double getVolume(void) {\n         return length * breadth * height;\n      }\n      void setLength( double len ) {\n         length = len;\n      }\n      void setBreadth( double bre ) {\n         breadth = bre;\n      }\n      void setHeight( double hei ) {\n         height = hei;\n      }\n      \n      // Overload + operator to add two Box objects.\n      Box operator+(const Box& b) {\n         Box box;\n         box.length = this->length + b.length;\n         box.breadth = this->breadth + b.breadth;\n         box.height = this->height + b.height;\n         return box;\n      }\n      \n   private:\n      double length;      // Length of a box\n      double breadth;     // Breadth of a box\n      double height;      // Height of a box\n};\n\n// Main function for the program\nint main() {\n   Box Box1;                // Declare Box1 of type Box\n   Box Box2;                // Declare Box2 of type Box\n   Box Box3;                // Declare Box3 of type Box\n   double volume = 0.0;     // Store the volume of a box here\n \n   // box 1 specification\n   Box1.setLength(6.0); \n   Box1.setBreadth(7.0); \n   Box1.setHeight(5.0);\n \n   // box 2 specification\n   Box2.setLength(12.0); \n   Box2.setBreadth(13.0); \n   Box2.setHeight(10.0);\n \n   // volume of box 1\n   volume = Box1.getVolume();\n   cout << \"Volume of Box1 : \" << volume <<endl;\n \n   // volume of box 2\n   volume = Box2.getVolume();\n   cout << \"Volume of Box2 : \" << volume <<endl;\n\n   // Add two object as follows:\n   Box3 = Box1 + Box2;\n\n   // volume of box 3\n   volume = Box3.getVolume();\n   cout << \"Volume of Box3 : \" << volume <<endl;\n\n   return 0;\n}\n\nWhen the above code is compiled and executed, it produces the following result \u2212\n\nVolume of Box1 : 210\nVolume of Box2 : 1560\nVolume of Box3 : 5400\n\nOverloadable/Non-overloadableOperators\nFollowing is the list of operators which can be overloaded \u2212\n\n\n+\n-\n*\n/\n%\n^\n\n\n&\n|\n~\n!\n,\n=\n\n\n<\n>\n<=\n>=\n++\n--\n\n\n<<\n>>\n==\n!=\n&&\n||\n\n\n+=\n-=\n/=\n%=\n^=\n&=\n\n\n|=\n*=\n<<=\n>>=\n[]\n()\n\n\n->\n->*\nnew\nnew []\ndelete\ndelete []\n\n\nFollowing is the list of operators, which can not be overloaded \u2212\n\n\n::\n.*\n.\n?:\n\n\nOperator Overloading Examples\nHere are various operator overloading examples to help you in understanding the concept.\n\n\nSr.No\nOperators & Example\n\n\n1\nUnary Operators Overloading\n\n\n2\nBinary Operators Overloading\n\n\n3\nRelational Operators Overloading\n\n\n4\nInput/Output Operators Overloading\n\n\n5\n ++ and -- Operators Overloading\n\n\n6\nAssignment Operators Overloading\n\n\n7\nFunction call () Operator  Overloading\n\n\n8\nSubscripting [] Operator Overloading\n\n\n9\nClass Member Access Operator -> Overloading\n\n\nPolymorphism in C++\nThe word polymorphism means having many forms. Typically, polymorphism occurs when there is a hierarchy of classes and they are related by inheritance.\nC++ polymorphism means that a call to a member function will cause a different function to be executed depending on the type of object that invokes the function.\nConsider the following example where a base class has been derived by other two classes \u2212\n Live Demo\n\n#include <iostream> \nusing namespace std;\n \nclass Shape {\n   protected:\n      int width, height;\n      \n   public:\n      Shape( int a = 0, int b = 0){\n         width = a;\n         height = b;\n      }\n      int area() {\n         cout << \"Parent class area :\" <<endl;\n         return 0;\n      }\n};\nclass Rectangle: public Shape {\n   public:\n      Rectangle( int a = 0, int b = 0):Shape(a, b) { }\n      \n      int area () { \n         cout << \"Rectangle class area :\" <<endl;\n         return (width * height); \n      }\n};\n\nclass Triangle: public Shape {\n   public:\n      Triangle( int a = 0, int b = 0):Shape(a, b) { }\n      \n      int area () { \n         cout << \"Triangle class area :\" <<endl;\n         return (width * height / 2); \n      }\n};\n\n// Main function for the program\nint main() {\n   Shape *shape;\n   Rectangle rec(10,7);\n   Triangle  tri(10,5);\n\n   // store the address of Rectangle\n   shape = &rec;\n   \n   // call rectangle area.\n   shape->area();\n\n   // store the address of Triangle\n   shape = &tri;\n   \n   // call triangle area.\n   shape->area();\n   \n   return 0;\n}\n\nWhen the above code is compiled and executed, it produces the following result \u2212\n\nParent class area :\nParent class area :\n\nThe reason for the incorrect output is that the call of the function area() is being set once by the compiler as the version defined in the base class. This is called static resolution of the function call, or static linkage - the function call is fixed before the program is executed. This is also sometimes called early binding because the area() function is set during the compilation of the program.\nBut now, let's make a slight modification in our program and precede the declaration of area() in the Shape class with the keyword virtual so that it  looks like this \u2212\n\nclass Shape {\n   protected:\n      int width, height;\n      \n   public:\n      Shape( int a = 0, int b = 0) {\n         width = a;\n         height = b;\n      }\n      virtual int area() {\n         cout << \"Parent class area :\" <<endl;\n         return 0;\n      }\n};\n\nAfter this slight modification, when the previous example code is compiled and executed, it produces the following result \u2212\n\nRectangle class area\nTriangle class area\n\nThis time, the compiler looks at the contents of the pointer instead of it's type. Hence, since addresses of objects of tri and rec classes are stored in *shape the respective area() function is called.\nAs you can see, each of the child classes has a separate implementation for the function area(). This is how polymorphism is generally used. You have different classes with a function of the same name, and even the same parameters, but with different implementations.\nVirtual Function\nA virtual function is a function in a base class that is declared using the keyword virtual. Defining in a base class a virtual function, with another version in a derived class, signals to the compiler that we don't want static linkage for this function.\nWhat we do want is the selection of the function to be called at any given point in the program to be based on the kind of object for which it is called.  This sort of operation is referred to as dynamic linkage, or late binding.\nPure Virtual Functions\nIt is possible that you want to include a virtual function in a base class so that it may be redefined in a derived class to suit the objects of that class, but that there is no meaningful definition you could give for the function in the base class.\nWe can change the virtual function area() in the base class to the following \u2212\n\nclass Shape {\n   protected:\n      int width, height;\n\n   public:\n      Shape(int a = 0, int b = 0) {\n         width = a;\n         height = b;\n      }\n      \n      // pure virtual function\n      virtual int area() = 0;\n};\n\nThe = 0 tells the compiler that the function has no body  and above virtual function will be called pure virtual function.\nData Abstraction in C++\nData abstraction refers to providing only essential information to the outside world and hiding their background details, i.e., to represent the needed information in program without presenting the details.\nData abstraction is a programming (and design) technique that relies on the separation of interface and implementation.\nLet's take one real life example of a TV, which you can turn on and off, change the channel, adjust the volume, and add external components such as speakers, VCRs, and DVD players, BUT you do not know its internal details, that is, you do not know how it receives signals over the air or through a cable, how it translates them, and  finally displays them on the screen.\nThus, we can say a television clearly separates its internal implementation from its external interface and you can play with its interfaces like the power button, channel changer, and volume control without having any knowledge of its internals.\nIn C++, classes provides great level of data abstraction. They provide sufficient public methods to the outside world to play with the functionality of the object and to manipulate object data, i.e., state without actually knowing how class has been implemented internally.\nFor example, your program can make a call to the sort() function without knowing what algorithm the function actually uses to sort the given values. In fact, the underlying implementation of the sorting functionality could change between releases of the library, and as long as the interface stays the same, your function call will still work.\nIn C++, we use classes to define our own abstract data types (ADT). You can use the cout object of class ostream to stream data to standard output like this \u2212\n Live Demo\n\n#include <iostream>\nusing namespace std;\n\nint main() {\n   cout << \"Hello C++\" <<endl;\n   return 0;\n}\n\nHere, you don't need to understand how cout displays the text on the user's screen. You need to only know the public interface and the underlying implementation of \u2018cout\u2019 is free to change.\nAccess Labels Enforce Abstraction\nIn C++, we use access labels to define the abstract interface to the class. A class may contain zero or more access labels \u2212\n\nMembers defined with a public label are accessible to all parts of the program. The data-abstraction view of a type is defined by its public members.\nMembers defined with a private label are not accessible to code that uses the class. The private sections hide the implementation from code that uses the type.\n\nThere are no restrictions on how often an access label may appear. Each access label specifies the access level of the succeeding member definitions. The specified access level remains in effect until the next access label is encountered or the closing right brace of the class body is seen.\nBenefits of Data Abstraction\nData abstraction provides two important advantages \u2212\n\nClass internals are protected from inadvertent user-level errors, which might corrupt the state of the object.\nThe class implementation may evolve over time in response to changing requirements or bug reports without requiring change in user-level code.\n\nBy defining data members only in the private section of the class, the class author is free to make changes in the data. If the implementation changes, only the class code needs to be examined to see what affect the change may have. If data is public, then any function that directly access the data members of the old representation might be broken.\nData Abstraction Example\nAny C++ program where you implement a class with public and private members is an example of data abstraction. Consider the following example \u2212\n Live Demo\n\n#include <iostream>\nusing namespace std;\n\nclass Adder {\n   public:\n      // constructor\n      Adder(int i = 0) {\n         total = i;\n      }\n      \n      // interface to outside world\n      void addNum(int number) {\n         total += number;\n      }\n      \n      // interface to outside world\n      int getTotal() {\n         return total;\n      };\n      \n   private:\n      // hidden data from outside world\n      int total;\n};\n\nint main() {\n   Adder a;\n   \n   a.addNum(10);\n   a.addNum(20);\n   a.addNum(30);\n\n   cout << \"Total \" << a.getTotal() <<endl;\n   return 0;\n}\n\nWhen the above code is compiled and executed, it produces the following result \u2212\n\nTotal 60\n\nAbove class adds numbers together, and returns the sum. The public members - addNum and getTotal are the interfaces to the outside world and a user needs to know them to use the class. The private member total is something that the user doesn't need to know about, but is needed for the class to operate properly.\nDesigning Strategy\nAbstraction separates code into interface and implementation. So while designing your component, you must keep interface independent of the implementation so that if you change underlying implementation then interface would remain intact.\nIn this case whatever programs are using these interfaces, they would not be impacted and would just need a recompilation with the latest implementation.\nData Encapsulation in C++\nAll C++ programs are composed of the following two fundamental elements \u2212\n\nProgram statements (code) \u2212 This is the part of a program that performs actions and they are called functions.\nProgram data \u2212 The data is the information of the program which gets affected by the program functions.\n\nEncapsulation is an Object Oriented Programming concept that binds together the data and functions that manipulate the data, and that keeps both safe from outside interference and misuse. Data encapsulation led to the important OOP concept of data hiding.\nData encapsulation is a mechanism of bundling the data, and the functions that use them and data abstraction is a mechanism of exposing only the interfaces and hiding the implementation details from the user.\nC++ supports the properties of encapsulation and data hiding through the creation of user-defined types, called classes. We already have studied that a class can contain private, protected  and public members. By default, all items defined in a class are private. For example \u2212\n\nclass Box {\n   public:\n      double getVolume(void) {\n         return length * breadth * height;\n      }\n\n   private:\n      double length;      // Length of a box\n      double breadth;     // Breadth of a box\n      double height;      // Height of a box\n};\n\nThe variables length, breadth, and height are private. This means that they can be accessed only by other members of the Box class, and not by any other part of your program. This is one way encapsulation is achieved.\nTo make parts of a class public (i.e., accessible to other parts of your program), you must declare them after the public keyword. All variables or functions defined after the public specifier are accessible by all other functions in your program.\nMaking one class a friend of another exposes the implementation details and reduces encapsulation. The ideal is to keep as many of the details of each class hidden from all other classes as possible.\nData Encapsulation Example\nAny C++ program where you implement a class with public and private members is an example of data encapsulation and data abstraction. Consider the following example \u2212\n Live Demo\n\n#include <iostream>\nusing namespace std;\n\nclass Adder {\n   public:\n      // constructor\n      Adder(int i = 0) {\n         total = i;\n      }\n      \n      // interface to outside world\n      void addNum(int number) {\n         total += number;\n      }\n      \n      // interface to outside world\n      int getTotal() {\n         return total;\n      };\n   \n   private:\n      // hidden data from outside world\n      int total;\n};\n\nint main() {\n   Adder a;\n   \n   a.addNum(10);\n   a.addNum(20);\n   a.addNum(30);\n\n   cout << \"Total \" << a.getTotal() <<endl;\n   return 0;\n}\n\nWhen the above code is compiled and executed, it produces the following result \u2212\n\nTotal 60\n\nAbove class adds numbers together, and returns the sum. The public members addNum and getTotal  are the interfaces to the outside world and a user needs to know them to use the class. The private member total is something that is hidden from the outside world, but is needed for the class to operate properly.\nDesigning Strategy\nMost of us have learnt to make class members private by default unless we really need to expose them. That's just good encapsulation.\nThis is applied most frequently to data members, but it applies equally to all members, including virtual functions.\nInterfaces in C++ (Abstract Classes)\nAn interface describes the behavior or capabilities of a C++ class without committing to a particular implementation of that class.\nThe C++ interfaces are implemented using abstract classes and these abstract classes should not be confused with data abstraction which is a concept of keeping implementation details separate from associated data.\nA class is made abstract by declaring at least one of its functions as pure virtual function. A pure virtual function is specified by placing \"= 0\" in its declaration as follows \u2212\n\nclass Box {\n   public:\n      // pure virtual function\n      virtual double getVolume() = 0;\n      \n   private:\n      double length;      // Length of a box\n      double breadth;     // Breadth of a box\n      double height;      // Height of a box\n};\n\nThe purpose of an abstract class (often referred to as an ABC) is to provide an appropriate base class from which other classes can inherit. Abstract classes cannot be used to instantiate objects and serves only as an interface. Attempting to instantiate an object of an abstract class causes a compilation error.\nThus, if a subclass of an ABC needs to be instantiated, it has to implement each of the virtual functions, which means that it supports the interface declared by the ABC.  Failure to override a pure virtual function in a derived class, then attempting to instantiate objects of that class, is a compilation error.\nClasses that can be used to instantiate objects are called concrete classes.\nAbstract Class Example\nConsider the following example where parent class provides an interface to the base class  to implement a function called getArea() \u2212\n Live Demo\n\n#include <iostream>\n \nusing namespace std;\n \n// Base class\nclass Shape {\n   public:\n      // pure virtual function providing interface framework.\n      virtual int getArea() = 0;\n      void setWidth(int w) {\n         width = w;\n      }\n   \n      void setHeight(int h) {\n         height = h;\n      }\n   \n   protected:\n      int width;\n      int height;\n};\n \n// Derived classes\nclass Rectangle: public Shape {\n   public:\n      int getArea() { \n         return (width * height); \n      }\n};\n\nclass Triangle: public Shape {\n   public:\n      int getArea() { \n         return (width * height)/2; \n      }\n};\n \nint main(void) {\n   Rectangle Rect;\n   Triangle  Tri;\n \n   Rect.setWidth(5);\n   Rect.setHeight(7);\n   \n   // Print the area of the object.\n   cout << \"Total Rectangle area: \" << Rect.getArea() << endl;\n\n   Tri.setWidth(5);\n   Tri.setHeight(7);\n   \n   // Print the area of the object.\n   cout << \"Total Triangle area: \" << Tri.getArea() << endl; \n\n   return 0;\n}\n\nWhen the above code is compiled and executed, it produces the following result \u2212\n\nTotal Rectangle area: 35\nTotal Triangle area: 17\n\nYou can see how an abstract class defined an interface in terms of getArea() and two other classes implemented same function but with different algorithm to calculate the area specific to the shape.\nDesigning Strategy\nAn object-oriented system might use an abstract base class to provide a common and standardized interface appropriate for all the external applications. Then, through inheritance from that abstract base class, derived classes are formed that operate similarly.\nThe capabilities (i.e., the public functions) offered by the external applications are provided as pure virtual functions in the abstract base class. The implementations of these pure virtual functions are provided in the derived classes that correspond to the specific types of the application.\nThis architecture also allows new applications to be added to a system easily, even after the system has been defined.\nC++ Files and Streams\nSo far, we have been using the iostream standard library, which provides cin and cout methods for reading from standard input and writing to standard output respectively.\nThis tutorial will teach you how to read and write from a file. This requires another standard C++ library called fstream, which defines three new data types \u2212\n\n\nSr.No\nData Type & Description\n\n\n1\nofstream\nThis data type represents the output file stream and is used to create files and to write information to files.\n\n\n2\nifstream\nThis data type represents the input file stream and  is used to read information from files.\n\n\n3\nfstream\nThis data type represents the file stream generally, and has the capabilities of both ofstream and ifstream which means it can create files, write information to files, and read information from files.\n\n\nTo perform file processing in C++, header files <iostream> and <fstream> must be included in your C++ source file.\nOpening a File\nA file must be opened before you can read from it or write to it. Either ofstream or fstream object may be used to open a file for writing. And ifstream object is used to open a file for reading purpose only.\nFollowing is the standard syntax for open() function, which is a member of fstream, ifstream, and ofstream objects.\n\nvoid open(const char *filename, ios::openmode mode);\n\nHere, the first argument specifies the name and location of the file to be opened and the second argument of the open() member function defines the mode in which the file should be opened.\n\n\nSr.No\nMode Flag & Description\n\n\n1\nios::app\nAppend mode. All output to that file to be appended to the end.\n\n\n2\nios::ate\nOpen a file for output and move the read/write control to the end of the file.\n\n\n3\nios::in\nOpen a file for reading.\n\n\n4\nios::out\nOpen a file for writing.\n\n\n5\nios::trunc\nIf the file already exists, its contents will be truncated before opening the file.\n\n\nYou can combine two or more of these values by ORing them together. For example if you want to open a file in write mode and want to truncate it in case that already exists, following will be the syntax \u2212\n\nofstream outfile;\noutfile.open(\"file.dat\", ios::out | ios::trunc );\n\nSimilar way, you can open a file for reading and writing purpose as follows \u2212\n\nfstream  afile;\nafile.open(\"file.dat\", ios::out | ios::in );\n\nClosing a File\nWhen a C++ program  terminates it automatically flushes all the streams, release all the allocated memory and close all the opened files. But it is always a good practice that a programmer should close all the opened files before program termination.\nFollowing is the standard syntax for close() function, which is a member of fstream, ifstream, and ofstream objects.\n\nvoid close();\n\nWriting to a File\nWhile doing C++ programming, you write information to a file from your program using the stream insertion operator (<<) just as you use that operator to output information to the screen. The only difference is that you use an ofstream or fstream object instead of the cout object.\nReading from a File\nYou read information from a file into your program using the stream extraction operator (>>) just as you use that operator to input information from the keyboard. The only difference is that you use an ifstream or fstream object instead of the cin object.\nRead and Write Example\nFollowing is the C++ program which opens a file in reading and writing mode. After writing information entered by the user to a file named afile.dat, the program reads information from the file and outputs it onto the screen \u2212\n Live Demo\n\n#include <fstream>\n#include <iostream>\nusing namespace std;\n \nint main () {\n   char data[100];\n\n   // open a file in write mode.\n   ofstream outfile;\n   outfile.open(\"afile.dat\");\n\n   cout << \"Writing to the file\" << endl;\n   cout << \"Enter your name: \"; \n   cin.getline(data, 100);\n\n   // write inputted data into the file.\n   outfile << data << endl;\n\n   cout << \"Enter your age: \"; \n   cin >> data;\n   cin.ignore();\n   \n   // again write inputted data into the file.\n   outfile << data << endl;\n\n   // close the opened file.\n   outfile.close();\n\n   // open a file in read mode.\n   ifstream infile; \n   infile.open(\"afile.dat\"); \n \n   cout << \"Reading from the file\" << endl; \n   infile >> data; \n\n   // write the data at the screen.\n   cout << data << endl;\n   \n   // again read the data from the file and display it.\n   infile >> data; \n   cout << data << endl; \n\n   // close the opened file.\n   infile.close();\n\n   return 0;\n}\n\nWhen the above code is compiled and executed, it produces the following sample input and output \u2212\n\n$./a.out\nWriting to the file\nEnter your name: Zara\nEnter your age: 9\nReading from the file\nZara\n9\n\nAbove examples make use of additional functions from cin object, like getline() function to read the line from outside and ignore() function to ignore the extra characters left by previous read statement.\nFile Position Pointers\nBoth istream and ostream provide member functions for repositioning the file-position pointer. These member functions are seekg (\"seek get\") for istream and seekp (\"seek put\") for ostream.\nThe argument to seekg and seekp normally is a long integer. A second argument can be specified to indicate the seek direction. The seek direction can be ios::beg (the default) for positioning relative to the beginning of a stream, ios::cur for positioning relative to the current position in a stream or ios::end for positioning relative to the end of a stream.\nThe file-position pointer is an integer value that specifies the location in the file as a number of bytes from the file's starting location. Some examples of positioning the \"get\" file-position pointer are \u2212\n\n// position to the nth byte of fileObject (assumes ios::beg)\nfileObject.seekg( n );\n\n// position n bytes forward in fileObject\nfileObject.seekg( n, ios::cur );\n\n// position n bytes back from end of fileObject\nfileObject.seekg( n, ios::end );\n\n// position at end of fileObject\nfileObject.seekg( 0, ios::end );\n\nC++ Exception Handling\nAn exception is a problem that arises during the execution of a program. A C++ exception is a response to an exceptional circumstance that arises while a program is running, such as an attempt to divide by zero.\nExceptions provide a way to transfer control from one part of a program to another. C++ exception handling is built upon three keywords: try, catch, and throw.\n\nthrow \u2212 A program throws an exception when a problem shows up. This is done using a throw keyword.\ncatch \u2212 A program catches an exception with an exception handler at the place in a program where you want to handle the problem. The catch keyword indicates the catching of an exception.\ntry \u2212 A try block identifies a block of code for which particular exceptions will be activated. It's followed by one or more catch blocks.\n\nAssuming a block will raise an exception, a method catches an exception using a combination of the try and catch keywords. A try/catch block is placed around the code that might generate an exception. Code within a try/catch block is referred to as protected code, and the syntax for using try/catch as follows \u2212\n\ntry {\n   // protected code\n} catch( ExceptionName e1 ) {\n   // catch block\n} catch( ExceptionName e2 ) {\n   // catch block\n} catch( ExceptionName eN ) {\n   // catch block\n}\n\nYou can list down multiple catch statements to catch different type of exceptions in case your try block raises more than one exception in different situations.\nThrowing Exceptions\nExceptions can be thrown anywhere within a code block using  throw statement. The operand of the throw statement determines a type for the exception and can be any expression and the type of the result of the expression determines the type of exception thrown.\nFollowing is an example of throwing an exception when dividing by zero condition occurs \u2212\n\ndouble division(int a, int b) {\n   if( b == 0 ) {\n      throw \"Division by zero condition!\";\n   }\n   return (a/b);\n}\n\nCatching Exceptions\nThe catch block following the try block catches any exception. You can specify what type of exception you want to catch and this is determined by the exception declaration that appears in parentheses following the keyword catch.\n\ntry {\n   // protected code\n} catch( ExceptionName e ) {\n  // code to handle ExceptionName exception\n}\n\nAbove code will catch an exception of ExceptionName type. If you want to specify that a catch block should handle any type of exception that is thrown in a try block, you must put an ellipsis, ...,  between the parentheses enclosing the exception declaration as follows \u2212\n\ntry {\n   // protected code\n} catch(...) {\n  // code to handle any exception\n}\n\nThe following is an example, which throws a division by zero exception and we catch it in catch block.\n Live Demo\n\n#include <iostream>\nusing namespace std;\n\ndouble division(int a, int b) {\n   if( b == 0 ) {\n      throw \"Division by zero condition!\";\n   }\n   return (a/b);\n}\n\nint main () {\n   int x = 50;\n   int y = 0;\n   double z = 0;\n \n   try {\n      z = division(x, y);\n      cout << z << endl;\n   } catch (const char* msg) {\n     cerr << msg << endl;\n   }\n\n   return 0;\n}\n\nBecause we are raising an exception of type const char*, so while catching this exception, we have to use const char* in catch block. If we compile and run above code, this would produce the following result \u2212\n\nDivision by zero condition!\n\nC++ Standard Exceptions\nC++ provides a list of standard exceptions defined in <exception>  which we can use in our programs. These are arranged in a parent-child class hierarchy shown below \u2212\n\nHere is the small description of each exception mentioned in the above hierarchy \u2212\n\n\nSr.No\nException & Description\n\n\n1\nstd::exception\nAn exception and parent class of all the standard C++ exceptions.\n\n\n2\nstd::bad_alloc\nThis can be thrown by new.\n\n\n3\nstd::bad_cast\nThis can be thrown by dynamic_cast.\n\n\n4\nstd::bad_exception\nThis is useful device to handle unexpected exceptions in a C++ program.\n\n\n5\nstd::bad_typeid\nThis can be thrown by typeid.\n\n\n6\nstd::logic_error\nAn exception that theoretically can be detected by reading the code.\n\n\n7\nstd::domain_error\nThis is an exception thrown when a mathematically invalid domain is used.\n\n\n8\nstd::invalid_argument\nThis is thrown due to invalid arguments.\n\n\n9\nstd::length_error\nThis is thrown when a too big std::string is created.\n\n\n10\nstd::out_of_range\nThis can be thrown by the 'at' method, for example a std::vector and std::bitset<>::operator[]().\n\n\n11\nstd::runtime_error\nAn exception that theoretically cannot be detected by reading the code.\n\n\n12\nstd::overflow_error\nThis is thrown if a mathematical overflow occurs.\n\n\n13\nstd::range_error\nThis is occurred when you try to store a value which is out of range.\n\n\n14\nstd::underflow_error\nThis is thrown if a mathematical underflow occurs.\n\n\nDefine New Exceptions\nYou can define your own exceptions by inheriting and overriding exception class functionality. Following is the example, which shows how you can use std::exception class to implement your own exception in standard way \u2212\n Live Demo\n\n#include <iostream>\n#include <exception>\nusing namespace std;\n\nstruct MyException : public exception {\n   const char * what () const throw () {\n      return \"C++ Exception\";\n   }\n};\n \nint main() {\n   try {\n      throw MyException();\n   } catch(MyException& e) {\n      std::cout << \"MyException caught\" << std::endl;\n      std::cout << e.what() << std::endl;\n   } catch(std::exception& e) {\n      //Other errors\n   }\n}\n\nThis would produce the following result \u2212\n\nMyException caught\nC++ Exception\n\nHere, what() is a public method provided by exception class and it has been overridden by all the child exception classes. This returns the cause of an exception.\nC++ Dynamic Memory\nA good understanding of how dynamic memory really works in C++ is essential to becoming a good C++ programmer. Memory in your C++ program is divided into two parts \u2212\n\nThe stack \u2212 All variables declared inside the function will take up memory from the stack.\nThe heap \u2212 This is unused memory of the program and can be used to allocate the memory dynamically when program runs.\n\nMany times, you are not aware in advance how much memory you will need to store particular information in a defined variable and the size of required memory can be determined at run time.\nYou can allocate memory at run time within the heap for the variable of a given type using a special operator in C++ which returns the address of the space allocated. This operator is called new operator.\nIf you are not in need of dynamically allocated memory anymore, you can use delete operator, which de-allocates memory that was previously allocated by new operator.\nnew and delete Operators\nThere is following generic syntax to use new operator to allocate memory dynamically for any data-type.\n\nnew data-type;\n\nHere, data-type could be any built-in data type including an array or any user defined data types include class or structure. Let us start with built-in data types. For example we can define a pointer to type double and then request that the memory be allocated at execution time. We can do this using the new  operator with the following statements \u2212\n\ndouble* pvalue  = NULL; // Pointer initialized with null\npvalue  = new double;   // Request memory for the variable\n\nThe memory may not have been allocated successfully, if the free store had been used up. So it is good practice to check if new operator is returning NULL pointer and take appropriate action as below \u2212\n\ndouble* pvalue  = NULL;\nif( !(pvalue  = new double )) {\n   cout << \"Error: out of memory.\" <<endl;\n   exit(1);\n}\n\nThe malloc() function from C, still exists in C++, but it is recommended to avoid using malloc() function. The main advantage of new over malloc() is that new doesn't just allocate memory, it constructs objects which is prime purpose of C++.\nAt any point, when you feel a variable that has been dynamically allocated is not anymore required, you can free up the memory that it occupies in the free store with the \u2018delete\u2019 operator as follows \u2212\n\ndelete pvalue;        // Release memory pointed to by pvalue\n\nLet us put above concepts and form the following example to show how \u2018new\u2019 and \u2018delete\u2019 work \u2212\n Live Demo\n\n#include <iostream>\nusing namespace std;\n\nint main () {\n   double* pvalue  = NULL; // Pointer initialized with null\n   pvalue  = new double;   // Request memory for the variable\n \n   *pvalue = 29494.99;     // Store value at allocated address\n   cout << \"Value of pvalue : \" << *pvalue << endl;\n\n   delete pvalue;         // free up the memory.\n\n   return 0;\n}\n\nIf we compile and run above code, this would produce the following result \u2212\n\nValue of pvalue : 29495\n\nDynamic Memory Allocation for Arrays\nConsider you want to allocate memory for an array of characters, i.e., string of 20 characters. Using the same syntax what we have used above we can allocate memory dynamically as shown below.\n\nchar* pvalue  = NULL;         // Pointer initialized with null\npvalue  = new char[20];       // Request memory for the variable\n\nTo remove the array that we have just created the statement would look like this \u2212\n\ndelete [] pvalue;             // Delete array pointed to by pvalue\n\nFollowing the similar generic syntax of new operator, you can allocate for a multi-dimensional array as follows \u2212\n\ndouble** pvalue  = NULL;      // Pointer initialized with null \npvalue  = new double [3][4];  // Allocate memory for a 3x4 array \n\nHowever, the syntax to release the memory for multi-dimensional array will still remain same as above \u2212\n\ndelete [] pvalue;            // Delete array pointed to by pvalue\n\nDynamic Memory Allocation for Objects\nObjects are no different from simple data types. For example, consider the following code where we are going to use an array of objects to clarify the concept \u2212\n Live Demo\n\n#include <iostream>\nusing namespace std;\n\nclass Box {\n   public:\n      Box() { \n         cout << \"Constructor called!\" <<endl; \n      }\n      ~Box() { \n         cout << \"Destructor called!\" <<endl; \n      }\n};\nint main() {\n   Box* myBoxArray = new Box[4];\n   delete [] myBoxArray; // Delete array\n\n   return 0;\n}\n\nIf you were to allocate an array of four Box objects, the Simple constructor would be called four times and similarly while deleting these objects, destructor will also be called same number of times.\nIf we compile and run above code, this would produce the following result \u2212\n\nConstructor called!\nConstructor called!\nConstructor called!\nConstructor called!\nDestructor called!\nDestructor called!\nDestructor called!\nDestructor called!\n\nNamespaces in C++\nConsider a situation, when we have two persons with the same name, Zara, in the same class. Whenever we need to differentiate them definitely we would have to use some additional information along with their name, like either the area, if they live in different area or their mother\u2019s or father\u2019s name, etc.\nSame situation can arise in your C++ applications. For example, you might be writing some code that has a function called xyz() and there is another library available which is also having same function xyz(). Now the compiler has no way of knowing which version of xyz() function you are referring to within your code.\nA namespace is designed to overcome this difficulty and is used as additional information to differentiate similar functions, classes, variables etc. with the same name available in different libraries. Using namespace, you can define the context in which names are defined. In essence, a namespace defines a scope.\nDefining a Namespace\nA namespace definition begins with the keyword namespace followed by the namespace name as follows \u2212\n\nnamespace namespace_name {\n   // code declarations\n}\n\nTo call the namespace-enabled version of either function or variable, prepend (::) the namespace name as follows \u2212\n\nname::code;  // code could be variable or function.\n\nLet us see how namespace scope the entities including variable and functions \u2212\n Live Demo\n\n#include <iostream>\nusing namespace std;\n\n// first name space\nnamespace first_space {\n   void func() {\n      cout << \"Inside first_space\" << endl;\n   }\n}\n\n// second name space\nnamespace second_space {\n   void func() {\n      cout << \"Inside second_space\" << endl;\n   }\n}\n\nint main () {\n   // Calls function from first name space.\n   first_space::func();\n   \n   // Calls function from second name space.\n   second_space::func(); \n\n   return 0;\n}\n\nIf we compile and run above code, this would produce the following result \u2212\n\nInside first_space\nInside second_space\n\nThe using directive\nYou can also avoid prepending of namespaces with the using namespace directive. This directive tells the compiler that the subsequent code is making use of names in the specified namespace. The namespace is thus implied for the following code \u2212\n Live Demo\n\n#include <iostream>\nusing namespace std;\n\n// first name space\nnamespace first_space {\n   void func() {\n      cout << \"Inside first_space\" << endl;\n   }\n}\n\n// second name space\nnamespace second_space {\n   void func() {\n      cout << \"Inside second_space\" << endl;\n   }\n}\n\nusing namespace first_space;\nint main () {\n   // This calls function from first name space.\n   func();\n   \n   return 0;\n}\n\nIf we compile and run above code, this would produce the following result \u2212\n\nInside first_space\n\nThe \u2018using\u2019 directive can also be used to refer to a particular item within a namespace. For example, if the only part of the std namespace that you intend to use is cout, you can refer to it as follows \u2212\n\nusing std::cout;\n\nSubsequent code can refer to cout without prepending the namespace, but other items in the std  namespace will still need to be explicit as follows \u2212\n Live Demo\n\n#include <iostream>\nusing std::cout;\n\nint main () {\n   cout << \"std::endl is used with std!\" << std::endl;\n   \n   return 0;\n}\n\nIf we compile and run above code, this would produce the following result \u2212\n\nstd::endl is used with std!\n\nNames introduced in a using directive obey normal scope rules. The name is visible from the point of the using directive to the end of the scope in which the directive is found. Entities with the same name defined in an outer scope are hidden.\nDiscontiguous Namespaces\nA namespace can be defined in several parts and so a namespace is made up of the sum of its separately defined parts. The separate parts of a namespace can be spread over multiple files.\nSo, if one part of the namespace requires a name defined in another file, that name must still be declared. Writing a following namespace definition either defines a new namespace or adds new elements to an existing one \u2212\n\nnamespace namespace_name {\n   // code declarations\n}\n\nNested Namespaces\nNamespaces can be nested where you can define one namespace inside another name space as follows \u2212\n\nnamespace namespace_name1 {\n   // code declarations\n   namespace namespace_name2 {\n      // code declarations\n   }\n}\n\nYou can access members of nested namespace by using resolution operators as follows \u2212\n\n// to access members of namespace_name2\nusing namespace namespace_name1::namespace_name2;\n\n// to access members of namespace:name1\nusing namespace namespace_name1;\n\nIn the above statements if you are using namespace_name1, then it will make elements of namespace_name2 available in the scope as follows \u2212\n Live Demo\n\n#include <iostream>\nusing namespace std;\n\n// first name space\nnamespace first_space {\n   void func() {\n      cout << \"Inside first_space\" << endl;\n   }\n   \n   // second name space\n   namespace second_space {\n      void func() {\n         cout << \"Inside second_space\" << endl;\n      }\n   }\n}\n\nusing namespace first_space::second_space;\nint main () {\n   // This calls function from second name space.\n   func();\n   \n   return 0;\n}\n\nIf we compile and run above code, this would produce the following result \u2212\n\nInside second_space\n\nC++ Templates\nTemplates are the foundation of generic programming, which involves writing code in a way that is independent of any particular type.\nA template is a blueprint or formula for creating a generic class or a function. The library containers like iterators and algorithms are examples of generic programming and have been developed using template concept.\nThere is a single definition of each container, such as vector, but we can define many different kinds of vectors for example, vector <int> or vector <string>.\nYou can use templates to define functions as well as classes, let us see how they work \u2212\nFunction Template\nThe general form of a template function definition is shown here \u2212\n\ntemplate <class type> ret-type func-name(parameter list) {\n   // body of function\n} \n\nHere, type is a placeholder name for a data type used by the function. This name can be used within the function definition.\nThe following is the example of a function template that returns the maximum of two values \u2212\n Live Demo\n\n#include <iostream>\n#include <string>\n\nusing namespace std;\n\ntemplate <typename T>\ninline T const& Max (T const& a, T const& b) { \n   return a < b ? b:a; \n}\n\nint main () {\n   int i = 39;\n   int j = 20;\n   cout << \"Max(i, j): \" << Max(i, j) << endl; \n\n   double f1 = 13.5; \n   double f2 = 20.7; \n   cout << \"Max(f1, f2): \" << Max(f1, f2) << endl; \n\n   string s1 = \"Hello\"; \n   string s2 = \"World\"; \n   cout << \"Max(s1, s2): \" << Max(s1, s2) << endl; \n\n   return 0;\n}\n\nIf we compile and run above code, this would produce the following result \u2212\n\nMax(i, j): 39\nMax(f1, f2): 20.7\nMax(s1, s2): World\n\nClass Template\nJust as we can define function templates, we can also define class templates. The general form of a generic class declaration is shown here \u2212\n\ntemplate <class type> class class-name {\n   .\n   .\n   .\n}\n\nHere, type  is the placeholder type name, which will be specified when a class is instantiated. You can define more than one generic data type by using a comma-separated list.\nFollowing is the example to define class Stack<> and implement generic methods to push and pop the elements from the stack \u2212\n Live Demo\n\n#include <iostream>\n#include <vector>\n#include <cstdlib>\n#include <string>\n#include <stdexcept>\n\nusing namespace std;\n\ntemplate <class T>\nclass Stack { \n   private: \n      vector<T> elems;    // elements \n\n   public: \n      void push(T const&);  // push element \n      void pop();               // pop element \n      T top() const;            // return top element \n      \n      bool empty() const {      // return true if empty.\n         return elems.empty(); \n      } \n}; \n\ntemplate <class T>\nvoid Stack<T>::push (T const& elem) { \n   // append copy of passed element \n   elems.push_back(elem);    \n} \n\ntemplate <class T>\nvoid Stack<T>::pop () { \n   if (elems.empty()) { \n      throw out_of_range(\"Stack<>::pop(): empty stack\"); \n   }\n   \n   // remove last element \n   elems.pop_back();         \n} \n\ntemplate <class T>\nT Stack<T>::top () const { \n   if (elems.empty()) { \n      throw out_of_range(\"Stack<>::top(): empty stack\"); \n   }\n   \n   // return copy of last element \n   return elems.back();      \n} \n\nint main() { \n   try {\n      Stack<int>         intStack;  // stack of ints \n      Stack<string> stringStack;    // stack of strings \n\n      // manipulate int stack \n      intStack.push(7); \n      cout << intStack.top() <<endl; \n\n      // manipulate string stack \n      stringStack.push(\"hello\"); \n      cout << stringStack.top() << std::endl; \n      stringStack.pop(); \n      stringStack.pop(); \n   } catch (exception const& ex) { \n      cerr << \"Exception: \" << ex.what() <<endl; \n      return -1;\n   } \n} \n\nIf we compile and run above code, this would produce the following result \u2212\n\n7\nhello\nException: Stack<>::pop(): empty stack\n\nC++ Preprocessor\nThe preprocessors are the directives, which give instructions to the compiler to preprocess the information before actual compilation starts.\nAll preprocessor directives begin with #, and only white-space characters may appear before a preprocessor directive on a line. Preprocessor directives are not C++ statements, so they do not end in a semicolon (;).\nYou already have seen a #include directive in all the examples. This macro is used to include a header file into the source file.\nThere are number of preprocessor directives supported by C++ like #include, #define, #if, #else, #line, etc. Let us see important directives \u2212\nThe #define Preprocessor\nThe #define preprocessor directive creates symbolic constants. The symbolic constant is called a macro and the general form of the directive is \u2212\n\n#define macro-name replacement-text \n\nWhen this line appears in a file, all subsequent occurrences of macro in that file will be replaced by replacement-text before the program is compiled. For example \u2212\n\n#include <iostream>\nusing namespace std;\n\n#define PI 3.14159\n\nint main () {\n   cout << \"Value of PI :\" << PI << endl; \n\n   return 0;\n}\n\nNow, let us do the preprocessing of this code to see the result assuming we have the source code file. So let us compile it with -E option and redirect the result to test.p. Now, if you check test.p, it will have lots of information and at the bottom, you will find the value replaced as follows \u2212\n\n$gcc -E test.cpp > test.p\n\n...\nint main () {\n   cout << \"Value of PI :\" << 3.14159 << endl; \n   return 0;\n}\n\nFunction-Like Macros\nYou can use #define to define a macro which will take argument as follows \u2212\n Live Demo\n\n#include <iostream>\nusing namespace std;\n\n#define MIN(a,b) (((a)<(b)) ? a : b)\n\nint main () {\n   int i, j;\n   \n   i = 100;\n   j = 30;\n   \n   cout <<\"The minimum is \" << MIN(i, j) << endl;\n\n   return 0;\n}\n\nIf we compile and run above code, this would produce the following result \u2212\n\nThe minimum is 30\n\nConditional Compilation\nThere are several directives, which can be used to compile selective portions of your program's source code. This process is called conditional compilation.\nThe conditional preprocessor construct is much like the \u2018if\u2019 selection structure. Consider the following preprocessor code \u2212\n\n#ifndef NULL\n   #define NULL 0\n#endif\n\nYou can compile a program for debugging purpose. You can also turn on or off the debugging using a single macro as follows \u2212\n\n#ifdef DEBUG\n   cerr <<\"Variable x = \" << x << endl;\n#endif\n\nThis causes the cerr statement to be compiled in the program if the symbolic constant DEBUG has been defined before directive #ifdef DEBUG. You can use #if 0 statment to comment out a portion of the program as follows \u2212\n\n#if 0\n   code prevented from compiling\n#endif\n\nLet us try the following example \u2212\n Live Demo\n\n#include <iostream>\nusing namespace std;\n#define DEBUG\n\n#define MIN(a,b) (((a)<(b)) ? a : b)\n\nint main () {\n   int i, j;\n   \n   i = 100;\n   j = 30;\n\n#ifdef DEBUG\n   cerr <<\"Trace: Inside main function\" << endl;\n#endif\n\n#if 0\n   /* This is commented part */\n   cout << MKSTR(HELLO C++) << endl;\n#endif\n\n   cout <<\"The minimum is \" << MIN(i, j) << endl;\n\n#ifdef DEBUG\n   cerr <<\"Trace: Coming out of main function\" << endl;\n#endif\n\n   return 0;\n}\n\nIf we compile and run above code, this would produce the following result \u2212\n\nThe minimum is 30\nTrace: Inside main function\nTrace: Coming out of main function\n\nThe # and ## Operators\nThe # and ## preprocessor operators are available in C++ and ANSI/ISO C. The # operator causes a replacement-text token to be converted to a string surrounded by quotes. \nConsider the following macro definition \u2212\n Live Demo\n\n#include <iostream>\nusing namespace std;\n\n#define MKSTR( x ) #x\n\nint main () {\n\n   cout << MKSTR(HELLO C++) << endl;\n\n   return 0;\n}\n\nIf we compile and run above code, this would produce the following result \u2212\n\nHELLO C++\n\nLet us see how it worked. It is simple to understand that the C++ preprocessor turns the line \u2212\n\ncout << MKSTR(HELLO C++) << endl;\n\nAbove line will be turned into the following line \u2212\n\ncout << \"HELLO C++\" << endl;\n\nThe ## operator is used to concatenate two tokens. Here is an example \u2212\n\n#define CONCAT( x, y )  x ## y\n\nWhen CONCAT appears in the program, its arguments are concatenated and used to replace the macro. For example, CONCAT(HELLO, C++) is replaced by \"HELLO C++\" in the program as follows.\n Live Demo\n\n#include <iostream>\nusing namespace std;\n\n#define concat(a, b) a ## b\nint main() {\n   int xy = 100;\n   \n   cout << concat(x, y);\n   return 0;\n}\n\nIf we compile and run above code, this would produce the following result \u2212\n\n100\n\nLet us see how it worked. It is simple to understand that the C++ preprocessor transforms \u2212\n\ncout << concat(x, y);\n\nAbove line will be transformed into the following line \u2212\n\ncout << xy;\n\nPredefined C++ Macros\nC++ provides a number of predefined macros mentioned below \u2212\n\n\nSr.No\nMacro & Description\n\n\n1\n__LINE__\nThis contains the current line number of the program when it is being compiled.\n\n\n2\n__FILE__\nThis contains the current file name of the program when it is being compiled.\n\n\n3\n__DATE__\nThis contains a string of the form month/day/year that is the date of the translation of the source file into object code.\n\n\n4\n__TIME__\nThis contains a string of the form hour:minute:second that is the time at which the program was compiled.\n\n\nLet us see an example for all the above macros \u2212\n Live Demo\n\n#include <iostream>\nusing namespace std;\n\nint main () {\n   cout << \"Value of __LINE__ : \" << __LINE__ << endl;\n   cout << \"Value of __FILE__ : \" << __FILE__ << endl;\n   cout << \"Value of __DATE__ : \" << __DATE__ << endl;\n   cout << \"Value of __TIME__ : \" << __TIME__ << endl;\n\n   return 0;\n}\n\nIf we compile and run above code, this would produce the following result \u2212\n\nValue of __LINE__ : 6\nValue of __FILE__ : test.cpp\nValue of __DATE__ : Feb 28 2011\nValue of __TIME__ : 18:52:48\n\nC++ Signal Handling\nSignals are the interrupts delivered to a process by the operating system which can terminate a program prematurely. You can generate interrupts by pressing Ctrl+C on a UNIX, LINUX, Mac OS X or Windows system.\nThere are signals which can not be caught by the program but there is a following list of signals which you can catch in your program and can take appropriate actions based on the signal. These signals are defined in C++ header file <csignal>.\n\n\nSr.No\nSignal & Description\n\n\n1\nSIGABRT\nAbnormal termination of the program, such as a call to abort.\n\n\n2\nSIGFPE\nAn erroneous arithmetic operation, such as a divide by zero or an operation resulting in overflow.\n\n\n3\nSIGILL\nDetection of an illegal instruction.\n\n\n4\nSIGINT\nReceipt of an interactive attention signal.\n\n\n5\nSIGSEGV\nAn invalid access to storage.\n\n\n6\nSIGTERM\nA termination request sent to the program.\n\n\nThe signal() Function\nC++ signal-handling library provides function signal to trap unexpected events. Following is the syntax of the signal() function \u2212\n\nvoid (*signal (int sig, void (*func)(int)))(int); \n\nKeeping it simple, this function receives two arguments: first argument as an integer which represents signal number and second argument as a pointer to the signal-handling function.\nLet us write a simple C++ program where we will catch SIGINT signal using signal() function. Whatever signal you want to catch in your program, you must register that signal using signal function and associate it with a signal handler. Examine the following example \u2212\n\n#include <iostream>\n#include <csignal>\n\nusing namespace std;\n\nvoid signalHandler( int signum ) {\n   cout << \"Interrupt signal (\" << signum << \") received.\\n\";\n\n   // cleanup and close up stuff here  \n   // terminate program  \n\n   exit(signum);  \n}\n\nint main () {\n   // register signal SIGINT and signal handler  \n   signal(SIGINT, signalHandler);  \n\n   while(1) {\n      cout << \"Going to sleep....\" << endl;\n      sleep(1);\n   }\n\n   return 0;\n}\n\nWhen the above code is compiled and executed, it produces the following result \u2212\n\nGoing to sleep....\nGoing to sleep....\nGoing to sleep....\n\nNow, press Ctrl+c to interrupt the program and you will see that your program will catch the signal and would come out by printing something as follows \u2212\n\nGoing to sleep....\nGoing to sleep....\nGoing to sleep....\nInterrupt signal (2) received.\n\nThe raise() Function\nYou can generate signals by function raise(), which takes an integer signal number as an argument and has the following syntax.\n\nint raise (signal sig);\n\nHere, sig is the signal number to send any of the signals: SIGINT, SIGABRT, SIGFPE, SIGILL, SIGSEGV, SIGTERM, SIGHUP. Following is the example where we raise a signal internally using raise() function as follows \u2212\n\n#include <iostream>\n#include <csignal>\n\nusing namespace std;\n\nvoid signalHandler( int signum ) {\n   cout << \"Interrupt signal (\" << signum << \") received.\\n\";\n\n   // cleanup and close up stuff here  \n   // terminate program  \n\n   exit(signum);  \n}\n\nint main () {\n   int i = 0;\n   // register signal SIGINT and signal handler  \n   signal(SIGINT, signalHandler);  \n\n   while(++i) {\n      cout << \"Going to sleep....\" << endl;\n      if( i == 3 ) {\n         raise( SIGINT);\n      }\n      sleep(1);\n   }\n\n   return 0;\n}\n\nWhen the above code is compiled and executed, it produces the following result and would come out automatically \u2212\n\nGoing to sleep....\nGoing to sleep....\nGoing to sleep....\nInterrupt signal (2) received.\n\nC++ Multithreading\nMultithreading is a specialized form of multitasking and a multitasking is the feature that allows your computer to run two or more programs concurrently.  In general, there are two types of multitasking: process-based and thread-based.\nProcess-based multitasking handles the concurrent execution of programs. Thread-based multitasking deals with the concurrent execution of pieces of the same program.\nA multithreaded program contains two or more parts that can run concurrently. Each part of such a program is called a thread, and each thread defines a separate path of execution.\nC++ does not contain any built-in support for multithreaded applications. Instead, it relies entirely upon the operating system to provide this feature.\nThis tutorial assumes that you are working on Linux OS and we are going to write multi-threaded C++ program using POSIX. POSIX Threads, or Pthreads provides  API which are available on many Unix-like POSIX systems such as FreeBSD, NetBSD, GNU/Linux, Mac OS X and Solaris.\nCreating Threads\nThe following routine is used to create a POSIX thread \u2212\n\n#include <pthread.h>\npthread_create (thread, attr, start_routine, arg) \n\nHere, pthread_create creates a new thread and makes it executable. This routine can be called any number of times from anywhere within your code. Here is the description of the parameters \u2212\n\n\nSr.No\nParameter & Description\n\n\n1\nthread\nAn opaque, unique identifier for the new thread returned by the subroutine.\n\n\n2\nattr\nAn opaque attribute object that may be used to set thread attributes. You can specify a thread attributes object, or NULL for the default values.\n\n\n3\nstart_routine\nThe C++ routine that the thread will execute once it is created.\n\n\n4\narg\nA single argument that may be passed to start_routine. It must be passed by reference as a pointer cast of type void. NULL may be used if no argument is to be passed.\n\n\nThe maximum number of threads that may be created by a process is implementation dependent. Once created, threads are peers, and may create other threads. There is no implied hierarchy or dependency between threads.\nTerminating Threads\nThere is following routine which we use to terminate a POSIX thread \u2212\n\n#include <pthread.h>\npthread_exit (status) \n\nHere pthread_exit is used to explicitly exit a thread. Typically, the pthread_exit() routine is called after a thread has completed its work and is no longer required to exist.\nIf main() finishes before the threads it has created, and exits with pthread_exit(), the other threads will continue to execute. Otherwise, they will be automatically terminated when main() finishes.\nExample\nThis simple example code creates 5 threads with the pthread_create() routine. Each thread prints a \"Hello World!\" message, and then terminates with a call to pthread_exit(). \n\n#include <iostream>\n#include <cstdlib>\n#include <pthread.h>\n\nusing namespace std;\n\n#define NUM_THREADS 5\n\nvoid *PrintHello(void *threadid) {\n   long tid;\n   tid = (long)threadid;\n   cout << \"Hello World! Thread ID, \" << tid << endl;\n   pthread_exit(NULL);\n}\n\nint main () {\n   pthread_t threads[NUM_THREADS];\n   int rc;\n   int i;\n   \n   for( i = 0; i < NUM_THREADS; i++ ) {\n      cout << \"main() : creating thread, \" << i << endl;\n      rc = pthread_create(&threads[i], NULL, PrintHello, (void *)i);\n      \n      if (rc) {\n         cout << \"Error:unable to create thread,\" << rc << endl;\n         exit(-1);\n      }\n   }\n   pthread_exit(NULL);\n}\n\nCompile the following program using -lpthread library as follows \u2212\n\n$gcc test.cpp -lpthread\n\nNow, execute your program which gives the following output \u2212\n\nmain() : creating thread, 0\nmain() : creating thread, 1\nmain() : creating thread, 2\nmain() : creating thread, 3\nmain() : creating thread, 4\nHello World! Thread ID, 0\nHello World! Thread ID, 1\nHello World! Thread ID, 2\nHello World! Thread ID, 3\nHello World! Thread ID, 4\n\nPassing Arguments to Threads\nThis example shows how to pass multiple arguments via a structure. You can pass any data type in a thread callback because it points to void as explained in the following example \u2212\n\n#include <iostream>\n#include <cstdlib>\n#include <pthread.h>\n\nusing namespace std;\n\n#define NUM_THREADS 5\n\nstruct thread_data {\n   int  thread_id;\n   char *message;\n};\n\nvoid *PrintHello(void *threadarg) {\n   struct thread_data *my_data;\n   my_data = (struct thread_data *) threadarg;\n\n   cout << \"Thread ID : \" << my_data->thread_id ;\n   cout << \" Message : \" << my_data->message << endl;\n\n   pthread_exit(NULL);\n}\n\nint main () {\n   pthread_t threads[NUM_THREADS];\n   struct thread_data td[NUM_THREADS];\n   int rc;\n   int i;\n\n   for( i = 0; i < NUM_THREADS; i++ ) {\n      cout <<\"main() : creating thread, \" << i << endl;\n      td[i].thread_id = i;\n      td[i].message = \"This is message\";\n      rc = pthread_create(&threads[i], NULL, PrintHello, (void *)&td[i]);\n      \n      if (rc) {\n         cout << \"Error:unable to create thread,\" << rc << endl;\n         exit(-1);\n      }\n   }\n   pthread_exit(NULL);\n}\n\nWhen the above code is compiled and executed, it produces the following result \u2212\n\nmain() : creating thread, 0\nmain() : creating thread, 1\nmain() : creating thread, 2\nmain() : creating thread, 3\nmain() : creating thread, 4\nThread ID : 3 Message : This is message\nThread ID : 2 Message : This is message\nThread ID : 0 Message : This is message\nThread ID : 1 Message : This is message\nThread ID : 4 Message : This is message\n\nJoining and Detaching Threads\nThere are following two routines which we can use to join or detach threads \u2212\n\npthread_join (threadid, status) \npthread_detach (threadid) \n\nThe pthread_join() subroutine blocks the calling thread until the specified 'threadid' thread terminates. When a thread is created, one of its attributes defines whether it is joinable or detached. Only threads that are created as joinable can be joined. If a thread is created as detached, it can never be joined.\nThis example demonstrates how to wait for thread completions by using the Pthread join routine.\n\n#include <iostream>\n#include <cstdlib>\n#include <pthread.h>\n#include <unistd.h>\n\nusing namespace std;\n\n#define NUM_THREADS 5\n\nvoid *wait(void *t) {\n   int i;\n   long tid;\n\n   tid = (long)t;\n\n   sleep(1);\n   cout << \"Sleeping in thread \" << endl;\n   cout << \"Thread with id : \" << tid << \"  ...exiting \" << endl;\n   pthread_exit(NULL);\n}\n\nint main () {\n   int rc;\n   int i;\n   pthread_t threads[NUM_THREADS];\n   pthread_attr_t attr;\n   void *status;\n\n   // Initialize and set thread joinable\n   pthread_attr_init(&attr);\n   pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);\n\n   for( i = 0; i < NUM_THREADS; i++ ) {\n      cout << \"main() : creating thread, \" << i << endl;\n      rc = pthread_create(&threads[i], attr, wait, (void *)i );\n      \n      if (rc) {\n         cout << \"Error:unable to create thread,\" << rc << endl;\n         exit(-1);\n      }\n   }\n\n   // free attribute and wait for the other threads\n   pthread_attr_destroy(&attr);\n   for( i = 0; i < NUM_THREADS; i++ ) {\n      rc = pthread_join(threads[i], &status);\n      if (rc) {\n         cout << \"Error:unable to join,\" << rc << endl;\n         exit(-1);\n      }\n      \n      cout << \"Main: completed thread id :\" << i ;\n      cout << \"  exiting with status :\" << status << endl;\n   }\n\n   cout << \"Main: program exiting.\" << endl;\n   pthread_exit(NULL);\n}\n\nWhen the above code is compiled and executed, it produces the following result \u2212\n\nmain() : creating thread, 0\nmain() : creating thread, 1\nmain() : creating thread, 2\nmain() : creating thread, 3\nmain() : creating thread, 4\nSleeping in thread\nThread with id : 0 .... exiting\nSleeping in thread\nThread with id : 1 .... exiting\nSleeping in thread\nThread with id : 2 .... exiting\nSleeping in thread\nThread with id : 3 .... exiting\nSleeping in thread\nThread with id : 4 .... exiting\nMain: completed thread id :0  exiting with status :0\nMain: completed thread id :1  exiting with status :0\nMain: completed thread id :2  exiting with status :0\nMain: completed thread id :3  exiting with status :0\nMain: completed thread id :4  exiting with status :0\nMain: program exiting.\n\nC++ Web Programming\nWhat is CGI?\n\nThe Common Gateway Interface, or CGI, is a set of standards that define how information is exchanged between the web server and a custom script.\nThe CGI specs are currently maintained by the NCSA and NCSA defines CGI is as follows \u2212\nThe Common Gateway Interface, or CGI, is a standard for external gateway programs to interface with information servers such as HTTP servers.\nThe current version is CGI/1.1 and CGI/1.2 is under progress.\n\nWeb Browsing\nTo understand the concept of CGI, let's see what happens when we click a hyperlink to browse a particular web page or URL.\n\nYour browser contacts the HTTP web server and demand for the URL ie. filename.\nWeb Server will parse the URL and will look for the filename. If it finds requested file then web server sends that file back to the browser otherwise sends an error message indicating that you have requested a wrong file.\nWeb browser takes response from web server and displays either the received file or error message based on the received response.\n\nHowever, it is possible to set up the HTTP server in such a way that whenever a file in a certain directory is requested, that file is not sent back; instead it is executed as a program, and produced output from the program is sent back to your browser to display.\nThe Common Gateway Interface (CGI) is a standard protocol for enabling applications (called CGI programs or CGI scripts) to interact with Web servers and with clients. These CGI programs can be a written in Python, PERL, Shell, C or C++ etc.\nCGI Architecture Diagram\nThe following simple program shows a simple architecture of CGI \u2212\n\nWeb Server Configuration\nBefore you proceed with CGI Programming, make sure that your Web Server supports CGI and it is configured to handle CGI Programs. All the CGI Programs to be executed by the HTTP server are kept in a pre-configured directory. This directory is called CGI directory and by convention it is named as /var/www/cgi-bin. By convention CGI files will have extension as .cgi, though they are C++ executable.\nBy default, Apache Web Server is configured to run CGI programs in /var/www/cgi-bin. If you want to specify any other directory to run your CGI scripts, you can modify the following section in the httpd.conf file \u2212\n\n<Directory \"/var/www/cgi-bin\">\n   AllowOverride None\n   Options ExecCGI\n   Order allow,deny\n   Allow from all\n</Directory>\n \n<Directory \"/var/www/cgi-bin\">\n   Options All\n</Directory>\n\nHere, I assume that you have Web Server up and running successfully and you are able to run any other CGI program like Perl or Shell etc.\nFirst CGI Program\nConsider the following C++ Program content \u2212\n\n#include <iostream>\nusing namespace std;\n\nint main () {\n   cout << \"Content-type:text/html\\r\\n\\r\\n\";\n   cout << \"<html>\\n\";\n   cout << \"<head>\\n\";\n   cout << \"<title>Hello World - First CGI Program</title>\\n\";\n   cout << \"</head>\\n\";\n   cout << \"<body>\\n\";\n   cout << \"<h2>Hello World! This is my first CGI program</h2>\\n\";\n   cout << \"</body>\\n\";\n   cout << \"</html>\\n\";\n   \n   return 0;\n}\n\nCompile above code and name the executable  as cplusplus.cgi. This file is being kept in /var/www/cgi-bin directory and it has following content. Before running your CGI program make sure you have change mode of file using chmod 755 cplusplus.cgi UNIX command to make file executable.\nMy First CGI program\nThe above C++ program is a simple program which is writing its output on STDOUT file i.e. screen. There is one important and extra feature available which is first line printing Content-type:text/html\\r\\n\\r\\n. This line is sent back to the browser and specify the content type to be displayed on the browser screen. Now you must have understood the basic concept of CGI and you can write many complicated CGI programs using Python. A C++ CGI program can interact with any other external system, such as RDBMS, to exchange information.\nHTTP Header\nThe line Content-type:text/html\\r\\n\\r\\n is a part of HTTP header, which is sent to the browser to understand the content. All the HTTP header will be in the following form \u2212\n\nHTTP Field Name: Field Content\n \nFor Example\nContent-type: text/html\\r\\n\\r\\n\n\nThere are few other important HTTP headers, which you will use frequently in your CGI Programming.\n\n\nSr.No\nHeader & Description\n\n1\nContent-type:\nA MIME string defining the format of the file being returned. Example is Content-type:text/html.\n\n\n2\nExpires: Date\nThe date the information becomes invalid. This should be used by the browser to decide when a page needs to be refreshed. A valid date string should be in the format 01 Jan 1998 12:00:00 GMT.\n\n\n3\nLocation: URL\nThe URL that should be returned instead of the URL requested. You can use this filed to redirect a request to any file.\n\n\n4\nLast-modified: Date\nThe date of last modification of the resource.\n\n\n5\nContent-length: N\nThe length, in bytes, of the data being returned. The browser uses this value to report the estimated download time for a file.\n\n\n6\nSet-Cookie: String\nSet the cookie passed through the string.\n\n\nCGI Environment Variables\nAll the CGI program will have access to the following environment variables. These variables play an important role while writing any CGI program.\n\n\nSr.No\nVariable Name & Description\n\n\n1\nCONTENT_TYPE\nThe data type of the content, used when the client is sending attached content to the server. For example file upload etc.\n\n\n2\nCONTENT_LENGTH\nThe length of the query information that is available only for POST requests.\n\n\n3\nHTTP_COOKIE\nReturns the set cookies in the form of key & value pair.\n\n\n4\nHTTP_USER_AGENT\nThe User-Agent request-header field contains information about the user agent originating the request. It is a name of the web browser.\n\n\n5\nPATH_INFO\nThe path for the CGI script.\n\n\n6\nQUERY_STRING\nThe URL-encoded information that is sent with GET method request.\n\n\n7\nREMOTE_ADDR\nThe IP address of the remote host making the request. This can be useful for logging or for authentication purpose.\n\n\n8\nREMOTE_HOST\nThe fully qualified name of the host making the request. If this information is not available then REMOTE_ADDR can be used to get IR address.\n\n\n9\nREQUEST_METHOD\nThe method used to make the request. The most common methods are GET and POST.\n\n\n10\nSCRIPT_FILENAME\nThe full path to the CGI script.\n\n\n11\nSCRIPT_NAME\nThe name of the CGI script.\n\n\n12\nSERVER_NAME\nThe server's hostname or IP Address.\n\n\n13\nSERVER_SOFTWARE\nThe name and version of the software the server is running.\n\n\nHere is small CGI program to list out all the CGI variables.\n\n#include <iostream>\n#include <stdlib.h>\nusing namespace std;\n\nconst string ENV[ 24 ] = {\n   \"COMSPEC\", \"DOCUMENT_ROOT\", \"GATEWAY_INTERFACE\",   \n   \"HTTP_ACCEPT\", \"HTTP_ACCEPT_ENCODING\",             \n   \"HTTP_ACCEPT_LANGUAGE\", \"HTTP_CONNECTION\",         \n   \"HTTP_HOST\", \"HTTP_USER_AGENT\", \"PATH\",            \n   \"QUERY_STRING\", \"REMOTE_ADDR\", \"REMOTE_PORT\",      \n   \"REQUEST_METHOD\", \"REQUEST_URI\", \"SCRIPT_FILENAME\",\n   \"SCRIPT_NAME\", \"SERVER_ADDR\", \"SERVER_ADMIN\",      \n   \"SERVER_NAME\",\"SERVER_PORT\",\"SERVER_PROTOCOL\",     \n   \"SERVER_SIGNATURE\",\"SERVER_SOFTWARE\" };   \n\nint main () {\n   cout << \"Content-type:text/html\\r\\n\\r\\n\";\n   cout << \"<html>\\n\";\n   cout << \"<head>\\n\";\n   cout << \"<title>CGI Environment Variables</title>\\n\";\n   cout << \"</head>\\n\";\n   cout << \"<body>\\n\";\n   cout << \"<table border = \\\"0\\\" cellspacing = \\\"2\\\">\";\n\n   for ( int i = 0; i < 24; i++ ) {\n      cout << \"<tr><td>\" << ENV[ i ] << \"</td><td>\";\n      \n      // attempt to retrieve value of environment variable\n      char *value = getenv( ENV[ i ].c_str() );  \n      if ( value != 0 ) {\n         cout << value;                                 \n      } else {\n         cout << \"Environment variable does not exist.\";\n      }\n      cout << \"</td></tr>\\n\";\n   }\n   \n   cout << \"</table><\\n\";\n   cout << \"</body>\\n\";\n   cout << \"</html>\\n\";\n   \n   return 0;\n}\n\nC++ CGI Library\nFor real examples, you would need to do many operations by your CGI program. There is a CGI library written for C++ program which you can download from ftp://ftp.gnu.org/gnu/cgicc/ and follow the steps to install the library \u2212\n\n$tar xzf cgicc-X.X.X.tar.gz \n$cd cgicc-X.X.X/ \n$./configure --prefix=/usr \n$make\n$make install\n\nYou can check related documentation available at \u2018C++ CGI Lib Documentation.\nGET and POST Methods\nYou must have come across many situations when you need to pass some information from your browser to web server and ultimately to your CGI Program. Most frequently browser uses two methods to pass this information to web server. These methods are GET Method and POST Method.\nPassing Information Using GET Method\nThe GET method sends the encoded user information appended to the page request. The page and the encoded information are separated by the ? character as follows \u2212\n\nhttp://www.test.com/cgi-bin/cpp.cgi?key1=value1&key2=value2\n\nThe GET method is the default  method to pass information from browser to web server and it produces a long string that appears in your browser's Location:box. Never use the GET method if you have password or other sensitive information to pass to the server. The GET method has size limitation  and you can pass upto 1024 characters in a request string.\nWhen using GET method, information is passed using QUERY_STRING http header and will be accessible in your CGI Program through QUERY_STRING environment variable.\nYou can pass information by simply concatenating key and value pairs alongwith any URL or you can use HTML <FORM> tags to pass information using GET method.\nSimple URL Example: Get Method\nHere is a simple URL which will pass two values to hello_get.py program using GET method.\n/cgi-bin/cpp_get.cgi?first_name=ZARA&last_name=ALI\nBelow is a program to generate cpp_get.cgi CGI program to handle input given by web browser. We are going to use C++ CGI library which makes it very easy to access passed information \u2212\n\n#include <iostream>\n#include <vector>  \n#include <string>  \n#include <stdio.h>  \n#include <stdlib.h> \n\n#include <cgicc/CgiDefs.h> \n#include <cgicc/Cgicc.h> \n#include <cgicc/HTTPHTMLHeader.h> \n#include <cgicc/HTMLClasses.h>  \n\nusing namespace std;\nusing namespace cgicc;\n\nint main () {\n   Cgicc formData;\n   \n   cout << \"Content-type:text/html\\r\\n\\r\\n\";\n   cout << \"<html>\\n\";\n   cout << \"<head>\\n\";\n   cout << \"<title>Using GET and POST Methods</title>\\n\";\n   cout << \"</head>\\n\";\n   cout << \"<body>\\n\";\n\n   form_iterator fi = formData.getElement(\"first_name\");  \n   if( !fi->isEmpty() && fi != (*formData).end()) {  \n      cout << \"First name: \" << **fi << endl;  \n   } else {\n      cout << \"No text entered for first name\" << endl;  \n   }\n   \n   cout << \"<br/>\\n\";\n   fi = formData.getElement(\"last_name\");  \n   if( !fi->isEmpty() &&fi != (*formData).end()) {  \n      cout << \"Last name: \" << **fi << endl;  \n   } else {\n      cout << \"No text entered for last name\" << endl;  \n   }\n   \n   cout << \"<br/>\\n\";\n   cout << \"</body>\\n\";\n   cout << \"</html>\\n\";\n   \n   return 0;\n}\n\nNow, compile the above program as follows \u2212\n\n$g++ -o cpp_get.cgi cpp_get.cpp -lcgicc\n\nGenerate cpp_get.cgi and put it in your CGI directory and try to access using following link \u2212\n/cgi-bin/cpp_get.cgi?first_name=ZARA&last_name=ALI\nThis would generate following result \u2212\n\nFirst name: ZARA \nLast name: ALI \n\nSimple FORM Example: GET Method\nHere is a simple example which passes two values using HTML FORM and submit button. We are going to use same CGI script cpp_get.cgi to handle this input.\n\n<form action = \"/cgi-bin/cpp_get.cgi\" method = \"get\">\n   First Name: <input type = \"text\" name = \"first_name\">  <br />\n \n   Last Name: <input type = \"text\" name = \"last_name\" />\n   <input type = \"submit\" value = \"Submit\" />\n</form>\n\nHere is the actual output of the above form. You enter First and Last Name and\nthen click submit button to see the result.\n\nFirst Name: \n \nLast Name: \n\n\nPassing Information Using POST Method\nA generally more reliable method  of passing information to a CGI program is the POST method. This packages the information in exactly the same way as GET methods, but instead of sending it as a text string after a ? in the URL it sends it as a separate message. This message comes into the CGI script in the form of the standard input.\nThe same cpp_get.cgi program will handle POST method as well. Let us take same example as above, which passes two values using HTML FORM and submit button but this time with POST method as follows \u2212\n\n<form action = \"/cgi-bin/cpp_get.cgi\" method = \"post\">\n   First Name: <input type = \"text\" name = \"first_name\"><br />\n   Last Name: <input type = \"text\" name = \"last_name\" />\n \n   <input type = \"submit\" value = \"Submit\" />\n</form>\n\nHere is the actual output of the above form. You enter First and Last Name and\nthen click submit button to see the result.\n\nFirst Name: \n \nLast Name: \n\n\nPassing Checkbox Data to CGI Program\nCheckboxes are used when more than one option is required to be selected.\nHere is example HTML code for a form with two checkboxes \u2212\n\n<form action = \"/cgi-bin/cpp_checkbox.cgi\" method = \"POST\" target = \"_blank\">\n   <input type = \"checkbox\" name = \"maths\" value = \"on\" /> Maths\n   <input type = \"checkbox\" name = \"physics\" value = \"on\" /> Physics\n   <input type = \"submit\" value = \"Select Subject\" />\n</form>\n\n The result of this code is the following form \u2212\n\n Maths\n Physics\n\n\nBelow is C++ program, which will generate cpp_checkbox.cgi script to handle input given by web browser through checkbox button.\n\n#include <iostream>\n#include <vector>  \n#include <string>  \n#include <stdio.h>  \n#include <stdlib.h> \n\n#include <cgicc/CgiDefs.h> \n#include <cgicc/Cgicc.h> \n#include <cgicc/HTTPHTMLHeader.h> \n#include <cgicc/HTMLClasses.h> \n\nusing namespace std;\nusing namespace cgicc;\n\nint main () {\n   Cgicc formData;\n   bool maths_flag, physics_flag;\n\n   cout << \"Content-type:text/html\\r\\n\\r\\n\";\n   cout << \"<html>\\n\";\n   cout << \"<head>\\n\";\n   cout << \"<title>Checkbox Data to CGI</title>\\n\";\n   cout << \"</head>\\n\";\n   cout << \"<body>\\n\";\n\n   maths_flag = formData.queryCheckbox(\"maths\");\n   if( maths_flag ) {  \n      cout << \"Maths Flag: ON \" << endl;  \n   } else {\n      cout << \"Maths Flag: OFF \" << endl;  \n   }\n   cout << \"<br/>\\n\";\n\n   physics_flag = formData.queryCheckbox(\"physics\");\n   if( physics_flag ) {  \n      cout << \"Physics Flag: ON \" << endl;  \n   } else {\n      cout << \"Physics Flag: OFF \" << endl;  \n   }\n   \n   cout << \"<br/>\\n\";\n   cout << \"</body>\\n\";\n   cout << \"</html>\\n\";\n   \n   return 0;\n}\n\nPassing Radio Button Data to CGI Program\nRadio Buttons are used when only one option is required to be selected.\nHere is example HTML code for a form with two radio button \u2212\n\n<form action = \"/cgi-bin/cpp_radiobutton.cgi\" method = \"post\" target = \"_blank\">\n   <input type = \"radio\" name = \"subject\" value = \"maths\" checked = \"checked\"/> Maths \n   <input type = \"radio\" name = \"subject\" value = \"physics\" /> Physics\n   <input type = \"submit\" value = \"Select Subject\" />\n</form>\n\nThe result of this code is the following form \u2212\n\n Maths\n Physics\n\n\nBelow is C++ program, which will generate cpp_radiobutton.cgi script to handle input given by web browser through radio buttons.\n\n#include <iostream>\n#include <vector>  \n#include <string>  \n#include <stdio.h>  \n#include <stdlib.h> \n\n#include <cgicc/CgiDefs.h> \n#include <cgicc/Cgicc.h> \n#include <cgicc/HTTPHTMLHeader.h> \n#include <cgicc/HTMLClasses.h> \n\nusing namespace std;\nusing namespace cgicc;\n\nint main () {\n   Cgicc formData;\n  \n   cout << \"Content-type:text/html\\r\\n\\r\\n\";\n   cout << \"<html>\\n\";\n   cout << \"<head>\\n\";\n   cout << \"<title>Radio Button Data to CGI</title>\\n\";\n   cout << \"</head>\\n\";\n   cout << \"<body>\\n\";\n\n   form_iterator fi = formData.getElement(\"subject\");  \n   if( !fi->isEmpty() && fi != (*formData).end()) {  \n      cout << \"Radio box selected: \" << **fi << endl;  \n   }\n  \n   cout << \"<br/>\\n\";\n   cout << \"</body>\\n\";\n   cout << \"</html>\\n\";\n   \n   return 0;\n}\n\nPassing Text Area Data to CGI Program\nTEXTAREA element is used when multiline text has to be passed to the CGI Program.\nHere is example HTML code for a form with a TEXTAREA box \u2212\n\n<form action = \"/cgi-bin/cpp_textarea.cgi\" method = \"post\" target = \"_blank\">\n   <textarea name = \"textcontent\" cols = \"40\" rows = \"4\">\n      Type your text here...\n   </textarea>\n   <input type = \"submit\" value = \"Submit\" />\n</form>\n\nThe result of this code is the following form \u2212\n\nType your text here...\n\n\nBelow is C++ program, which will generate cpp_textarea.cgi script to handle input given by web browser through text area.\n\n#include <iostream>\n#include <vector>  \n#include <string>  \n#include <stdio.h>  \n#include <stdlib.h> \n\n#include <cgicc/CgiDefs.h> \n#include <cgicc/Cgicc.h> \n#include <cgicc/HTTPHTMLHeader.h> \n#include <cgicc/HTMLClasses.h> \n\nusing namespace std;\nusing namespace cgicc;\n\nint main () {\n   Cgicc formData;\n  \n   cout << \"Content-type:text/html\\r\\n\\r\\n\";\n   cout << \"<html>\\n\";\n   cout << \"<head>\\n\";\n   cout << \"<title>Text Area Data to CGI</title>\\n\";\n   cout << \"</head>\\n\";\n   cout << \"<body>\\n\";\n\n   form_iterator fi = formData.getElement(\"textcontent\");  \n   if( !fi->isEmpty() && fi != (*formData).end()) {  \n      cout << \"Text Content: \" << **fi << endl;  \n   } else {\n      cout << \"No text entered\" << endl;  \n   }\n  \n   cout << \"<br/>\\n\";\n   cout << \"</body>\\n\";\n   cout << \"</html>\\n\";\n   \n   return 0;\n}\n\nPassing Drop down Box Data to CGI Program\nDrop down Box is used when we have many options available but only one or two will be selected.\nHere is example HTML code for a form with one drop down box \u2212\n\n<form action = \"/cgi-bin/cpp_dropdown.cgi\" method = \"post\" target = \"_blank\">\n   <select name = \"dropdown\">\n      <option value = \"Maths\" selected>Maths</option>\n      <option value = \"Physics\">Physics</option>\n   </select>\n   \n   <input type = \"submit\" value = \"Submit\"/>\n</form>\n\n The result of this code is the following form \u2212\n\n\nMaths\nPhysics\n\n\n\nBelow is C++ program, which will generate cpp_dropdown.cgi script to handle input given by web browser through drop down box.\n\n#include <iostream>\n#include <vector>  \n#include <string>  \n#include <stdio.h>  \n#include <stdlib.h> \n\n#include <cgicc/CgiDefs.h> \n#include <cgicc/Cgicc.h> \n#include <cgicc/HTTPHTMLHeader.h> \n#include <cgicc/HTMLClasses.h> \n\nusing namespace std;\nusing namespace cgicc;\n\nint main () {\n   Cgicc formData;\n  \n   cout << \"Content-type:text/html\\r\\n\\r\\n\";\n   cout << \"<html>\\n\";\n   cout << \"<head>\\n\";\n   cout << \"<title>Drop Down Box Data to CGI</title>\\n\";\n   cout << \"</head>\\n\";\n   cout << \"<body>\\n\";\n\n   form_iterator fi = formData.getElement(\"dropdown\");  \n   if( !fi->isEmpty() && fi != (*formData).end()) {  \n      cout << \"Value Selected: \" << **fi << endl;  \n   }\n  \n   cout << \"<br/>\\n\";\n   cout << \"</body>\\n\";\n   cout << \"</html>\\n\";\n   \n   return 0;\n}\n\nUsing Cookies in CGI\nHTTP protocol is a stateless protocol. But for a commercial website it is required to maintain session information  among different pages. For example one user registration ends after completing many pages. But how to maintain user's session information across all the web pages.\nIn many situations, using cookies is the most efficient method of remembering and tracking preferences, purchases, commissions, and other information required for better visitor experience or site statistics.\nHow It Works\nYour server sends some data to the visitor's browser in the form of a cookie. The browser may accept the cookie. If it does, it is stored as a plain text record on the visitor's hard drive. Now, when the visitor arrives at another page on your site, the cookie is available for retrieval. Once retrieved, your server knows/remembers what was stored.\nCookies are a plain text data record of 5 variable-length fields \u2212\n\nExpires \u2212 This shows date the cookie will expire. If this is blank, the cookie will expire when the visitor quits the browser.\nDomain \u2212 This shows domain name of your site.\nPath \u2212 This shows path to the directory or web page that set the cookie. This may be blank if you want to retrieve the cookie from any directory or page.\nSecure \u2212 If this field contains the word \"secure\" then the cookie may only be retrieved with a secure server. If this field is blank, no such restriction exists.\nName = Value \u2212 Cookies are set and retrieved  in the form of key and value pairs.\n\nSetting up Cookies\nIt is very easy to send cookies to browser. These cookies will be sent along with HTTP Header before the Content-type filed. Assuming you want to set UserID and Password as cookies. So cookies setting will be done as follows\n\n#include <iostream>\nusing namespace std;\n\nint main () {\n   cout << \"Set-Cookie:UserID = XYZ;\\r\\n\";\n   cout << \"Set-Cookie:Password = XYZ123;\\r\\n\";\n   cout << \"Set-Cookie:Domain = www.tutorialspoint.com;\\r\\n\";\n   cout << \"Set-Cookie:Path = /perl;\\n\";\n   cout << \"Content-type:text/html\\r\\n\\r\\n\";\n\n   cout << \"<html>\\n\";\n   cout << \"<head>\\n\";\n   cout << \"<title>Cookies in CGI</title>\\n\";\n   cout << \"</head>\\n\";\n   cout << \"<body>\\n\";\n\n   cout << \"Setting cookies\" << endl;  \n  \n   cout << \"<br/>\\n\";\n   cout << \"</body>\\n\";\n   cout << \"</html>\\n\";\n   \n   return 0;\n}\n\nFrom this example, you must have understood how to set cookies. We use Set-Cookie HTTP header to set cookies.\nHere, it is optional to set cookies attributes like Expires, Domain, and Path. It is notable that cookies are set before sending magic line \"Content-type:text/html\\r\\n\\r\\n.\nCompile above program to produce setcookies.cgi, and try to set cookies using following link. It will set four cookies at your computer \u2212\n/cgi-bin/setcookies.cgi\nRetrieving Cookies\nIt is easy to retrieve all the set cookies. Cookies are stored in CGI environment variable HTTP_COOKIE and they will have following form.\n\nkey1 = value1; key2 = value2; key3 = value3....\n\nHere is an example of how to retrieve cookies.\n\n#include <iostream>\n#include <vector>  \n#include <string>  \n#include <stdio.h>  \n#include <stdlib.h> \n\n#include <cgicc/CgiDefs.h> \n#include <cgicc/Cgicc.h> \n#include <cgicc/HTTPHTMLHeader.h> \n#include <cgicc/HTMLClasses.h>\n\nusing namespace std;\nusing namespace cgicc;\n\nint main () {\n   Cgicc cgi;\n   const_cookie_iterator cci;\n\n   cout << \"Content-type:text/html\\r\\n\\r\\n\";\n   cout << \"<html>\\n\";\n   cout << \"<head>\\n\";\n   cout << \"<title>Cookies in CGI</title>\\n\";\n   cout << \"</head>\\n\";\n   cout << \"<body>\\n\";\n   cout << \"<table border = \\\"0\\\" cellspacing = \\\"2\\\">\";\n   \n   // get environment variables\n   const CgiEnvironment& env = cgi.getEnvironment();\n\n   for( cci = env.getCookieList().begin();\n   cci != env.getCookieList().end(); \n   ++cci ) {\n      cout << \"<tr><td>\" << cci->getName() << \"</td><td>\";\n      cout << cci->getValue();                                 \n      cout << \"</td></tr>\\n\";\n   }\n   \n   cout << \"</table><\\n\";\n   cout << \"<br/>\\n\";\n   cout << \"</body>\\n\";\n   cout << \"</html>\\n\";\n   \n   return 0;\n}\n\nNow, compile above program to produce getcookies.cgi, and try to get a list of all the cookies available at your computer \u2212\n/cgi-bin/getcookies.cgi\nThis will produce a list of all the four cookies set in previous section and all other cookies set in your computer \u2212\n\nUserID XYZ \nPassword XYZ123 \nDomain www.tutorialspoint.com \nPath /perl \n\nFile Upload Example\nTo upload a file the HTML form must have the enctype attribute set to multipart/form-data. The input tag with the file type will create a \"Browse\" button.\n\n<html>\n   <body>\n      <form enctype = \"multipart/form-data\" action = \"/cgi-bin/cpp_uploadfile.cgi\"\n         method = \"post\">\n         <p>File: <input type = \"file\" name = \"userfile\" /></p>\n         <p><input type = \"submit\" value = \"Upload\" /></p>\n      </form>\n   </body>\n</html>\n\nThe result of this code is the following form \u2212\n\nFile: \n\n\nNote \u2212 Above example has been disabled intentionally to stop people uploading files on our server. But you can try above code with your server.\nHere is the script cpp_uploadfile.cpp to handle file upload \u2212\n\n#include <iostream>\n#include <vector>  \n#include <string>  \n#include <stdio.h>  \n#include <stdlib.h> \n\n#include <cgicc/CgiDefs.h> \n#include <cgicc/Cgicc.h> \n#include <cgicc/HTTPHTMLHeader.h> \n#include <cgicc/HTMLClasses.h>\n\nusing namespace std;\nusing namespace cgicc;\n\nint main () {\n   Cgicc cgi;\n\n   cout << \"Content-type:text/html\\r\\n\\r\\n\";\n   cout << \"<html>\\n\";\n   cout << \"<head>\\n\";\n   cout << \"<title>File Upload in CGI</title>\\n\";\n   cout << \"</head>\\n\";\n   cout << \"<body>\\n\";\n\n   // get list of files to be uploaded\n   const_file_iterator file = cgi.getFile(\"userfile\");\n   if(file != cgi.getFiles().end()) {\n      // send data type at cout.\n      cout << HTTPContentHeader(file->getDataType());\n      // write content at cout.\n      file->writeToStream(cout);\n   }\n   cout << \"<File uploaded successfully>\\n\";\n   cout << \"</body>\\n\";\n   cout << \"</html>\\n\";\n   \n   return 0;\n}\n\nThe above example is for writing content at cout stream but you can open your file stream and save the content of uploaded file in a file at desired location.\nHope you have enjoyed this tutorial. If yes, please send us your feedback.\n\n\n Previous Page\n\n\n Print\n\n\nNext Page \u00a0\n\n\n\n\nAdvertisements\n<!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//-->\n\n\n\n", "title": "C++ Quick Guide", "content_html": "<div class=\"col-md-7 middle-col\">\n<h1>C++ Quick Guide</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/cplusplus/cpp_questions_answers.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/cplusplus/cpp_object_oriented.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<h1>C++ Overview</h1>\n<p>C++ is a statically typed, compiled, general-purpose, case-sensitive, free-form programming language that supports procedural, object-oriented, and generic programming.</p>\n<p>C++ is regarded as a <b>middle-level</b> language, as it comprises a combination of both high-level and low-level language features.</p>\n<p>C++ was developed by Bjarne Stroustrup starting in 1979 at Bell Labs in Murray Hill, New Jersey, as an enhancement to the C language and originally named C with Classes but later it was renamed C++ in 1983.</p>\n<p>C++ is a superset of C, and that virtually any legal C program is a legal C++ program.</p>\n<p><b>Note</b> \u2212 A programming language is said to use static typing when type checking is performed during compile-time as opposed to run-time.</p>\n<h2>Object-Oriented Programming</h2>\n<p>C++ fully supports object-oriented programming, including the four pillars of object-oriented development \u2212</p>\n<ul class=\"list\">\n<li>Encapsulation</li>\n<li>Data hiding</li>\n<li>Inheritance</li>\n<li>Polymorphism</li>\n</ul>\n<h2>Standard Libraries</h2>\n<p>Standard C++ consists of three important parts \u2212</p>\n<ul class=\"list\">\n<li><p>The core language giving all the building blocks including variables, data types and literals, etc.</p></li>\n<li><p>The C++ Standard Library giving a rich set of functions manipulating files, strings, etc.</p></li>\n<li><p>The Standard Template Library (STL) giving a rich set of methods manipulating data structures, etc.</p></li>\n</ul>\n<h2>The ANSI Standard</h2>\n<p>The ANSI standard is an attempt to ensure that C++ is portable; that code you write for Microsoft's compiler will compile without errors, using a compiler on a Mac, UNIX, a Windows box, or an Alpha.</p>\n<p>The ANSI standard has been stable for a while, and all the major C++ compiler manufacturers support the ANSI standard.</p>\n<h2>Learning C++</h2>\n<p>The most important thing while learning C++ is to focus on concepts.</p>\n<p>The purpose of learning a programming language is to become a better programmer; that is, to become more effective at designing and implementing new systems and at maintaining old ones.</p>\n<p>C++ supports a variety of programming styles. You can write in the style of Fortran, C, Smalltalk, etc., in any language. Each style can achieve its aims effectively while maintaining runtime and space efficiency.</p>\n<h2>Use of C++</h2>\n<p>C++ is used by hundreds of thousands of programmers in essentially every application domain.</p>\n<p>C++ is being highly used to write device drivers and other software that rely on direct manipulation of hardware under realtime constraints.</p>\n<p>C++ is widely used for teaching and research because it is clean enough for successful teaching of basic concepts.</p>\n<p>Anyone who has used either an Apple Macintosh or a PC running Windows has indirectly used C++ because the primary user interfaces of these systems are written in C++.</p>\n<h1>C++ Environment Setup</h1>\n<h2>Local Environment Setup</h2>\n<p>If you are still willing to set up your environment for C++, you need to have the following two softwares on your computer.</p>\n<h3>Text Editor</h3>\n<p>This will be used to type your program. Examples of few editors include Windows Notepad, OS Edit command, Brief, Epsilon, EMACS, and vim or vi.</p>\n<p>Name and version of text editor can vary on different operating systems. For example, Notepad will be used on Windows and vim or vi can be used on windows  as well as Linux, or UNIX.</p>\n<p>The files you create with your editor are called source files and for C++ they typically are named with the extension .cpp, .cp, or .c.</p>\n<p>A text editor should be in place to start your C++ programming.</p>\n<h3>C++ Compiler</h3>\n<p>This is an actual C++ compiler, which will be used to compile your source code into final executable program.</p>\n<p>Most C++ compilers don't care what extension you give to your source code, but if you don't specify otherwise, many will use .cpp by default.</p>\n<p>Most frequently used and free available compiler is GNU C/C++ compiler, otherwise you can have compilers either from HP or Solaris if you have the respective Operating Systems.</p>\n<h2>Installing GNU C/C++ Compiler</h2>\n<h3>UNIX/Linux Installation</h3>\n<p>If you are using <b>Linux or UNIX</b> then check whether GCC is installed on your system by entering the following command from the command line \u2212</p>\n<pre class=\"result notranslate\">\n$ g++ -v\n</pre>\n<p>If you have installed GCC, then it should print a message such as the following \u2212</p>\n<pre class=\"result notranslate\">\nUsing built-in specs.\nTarget: i386-redhat-linux\nConfigured with: ../configure --prefix=/usr .......\nThread model: posix\ngcc version 4.1.2 20080704 (Red Hat 4.1.2-46)\n</pre>\n<p>If GCC is not installed, then you will have to install it yourself using the detailed instructions available at <a href=\"https://gcc.gnu.org/install/\" target=\"_blank\">https://gcc.gnu.org/install/</a></p>\n<h3>Mac OS X Installation</h3>\n<p>If you use Mac OS X, the easiest way to obtain GCC is to download the Xcode development environment from Apple's website and follow the simple installation instructions.</p>\n<p>Xcode is currently available at <a href=\"https://developer.apple.com/technologies/tools/\" target=\"_blank\">developer.apple.com/technologies/tools/</a>.</p>\n<h3>Windows Installation</h3>\n<p>To install GCC at Windows you need to install MinGW. To install MinGW, go to the MinGW homepage, <a href=\"http://www.mingw.org\" target=\"_blank\">www.mingw.org</a>, and follow the link to the MinGW download page. Download the latest version of the MinGW installation program which should be named MinGW-&lt;version&gt;.exe.</p>\n<p>While installing MinGW, at a minimum, you must install gcc-core, gcc-g++, binutils, and the MinGW runtime, but you may wish to install more.</p>\n<p>Add the bin subdirectory of your MinGW installation to your <b>PATH</b> environment variable so that you can specify these tools on the command line by their simple names.</p>\n<p>When the installation is complete, you will be able to run gcc, g++, ar, ranlib, dlltool, and several other GNU tools from the Windows command line.</p>\n<h1>C++ Basic Syntax</h1>\n<p>When we consider a C++ program, it can be defined as a collection of objects that communicate via invoking each other's methods. Let us now briefly look into what a class, object, methods, and instant variables mean.</p>\n<ul class=\"list\">\n<li><p><b>Object</b> \u2212 Objects have states and behaviors. Example: A dog has states - color, name, breed as well as behaviors - wagging, barking, eating. An object is an instance of a class. </p></li>\n<li><p><b>Class</b> \u2212 A class can be defined as a template/blueprint that describes the behaviors/states that object of its type support.</p></li>\n<li><p><b>Methods</b> \u2212 A method is basically a behavior. A class can contain many methods. It is in methods where the logics are written, data is manipulated and all the actions are executed.</p></li>\n<li><p><b>Instance Variables</b> \u2212 Each object has its unique set of instance variables. An object's state is created by the values assigned to these instance variables.</p></li>\n</ul>\n<h2>C++ Program Structure</h2>\n<p>Let us look at a simple code that would print the words <i>Hello World</i>.</p>\n<a class=\"demo\" href=\"http://tpcg.io/n4BVuS\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\n// main() is where program execution begins.\nint main() {\n   cout &lt;&lt; \"Hello World\"; // prints Hello World\n   return 0;\n}\n</pre>\n<p>Let us look at the various parts of the above program \u2212</p>\n<ul class=\"list\">\n<li><p>The C++ language defines several headers, which contain information that is either necessary or useful to your program. For this program, the header <b>&lt;iostream&gt;</b> is needed.</p></li>\n<li><p>The line <b>using namespace std;</b> tells the compiler to use the std namespace. Namespaces are a relatively recent addition to C++.</p></li>\n<li><p>The next line '<b>// main() is where program execution begins.</b>' is a single-line comment available in C++. Single-line comments begin with // and stop at the end of the line.</p></li>\n<li><p>The line <b>int main()</b> is the main function where program execution begins.</p></li>\n<li><p>The next line <b>cout &lt;&lt; \"Hello World\";</b> causes the message \"Hello World\" to be displayed on the screen.</p></li>\n<li><p>The next line <b>return 0;</b> terminates main( )function and causes it to return the value 0 to the calling process.</p></li>\n</ul>\n<h2>Compile and Execute C++ Program</h2>\n<p>Let's look at how to save the file, compile and run the program. Please follow the steps given below \u2212</p>\n<ul class=\"list\">\n<li><p>Open a text editor and add the code as above.</p></li>\n<li><p>Save the file as: hello.cpp</p></li>\n<li><p>Open a command prompt and go to the directory where you saved the file.</p></li>\n<li><p>Type 'g++ hello.cpp' and press enter to compile your code. If there are no errors in your code the command prompt will take you to the next line and would generate a.out executable file.</p></li>\n<li><p>Now, type 'a.out' to run your program.</p></li>\n<li><p>You will be able to see ' Hello World ' printed on the window.</p></li>\n</ul>\n<pre class=\"result notranslate\">\n$ g++ hello.cpp\n$ ./a.out\nHello World\n</pre>\n<p>Make sure that g++ is in your path and that you are running it in the directory containing file hello.cpp.</p>\n<p>You can compile C/C++ programs using makefile. For more details, you can check our <a href=\"/makefile/index.htm\" rel=\"nofollow\" target=\"_blank\">'Makefile Tutorial'</a>.</p>\n<h2>Semicolons and Blocks in C++</h2>\n<p>In C++, the semicolon is a statement terminator. That is, each individual statement must be ended with a semicolon. It indicates the end of one logical entity.</p>\n<p>For example, following are three different statements \u2212</p>\n<pre class=\"result notranslate\">\nx = y;\ny = y + 1;\nadd(x, y);\n</pre>\n<p>A block is a set of logically connected statements that are surrounded by opening and closing braces. For example \u2212</p>\n<pre class=\"result notranslate\">\n{\n   cout &lt;&lt; \"Hello World\"; // prints Hello World\n   return 0;\n}\n</pre>\n<p>C++ does not recognize the end of the line as a terminator. For this reason, it does not matter where you put a statement in a line. For example \u2212</p>\n<pre class=\"result notranslate\">\nx = y;\ny = y + 1;\nadd(x, y);\n</pre>\n<p>is the same as</p>\n<pre class=\"result notranslate\">\nx = y; y = y + 1; add(x, y);\n</pre>\n<h2>C++ Identifiers</h2>\n<p>A C++ identifier is a name used to identify a variable, function, class, module, or any other user-defined item. An identifier starts with a letter A to Z or a to z or an underscore (_) followed by zero or more letters, underscores, and digits (0 to 9).</p>\n<p>C++ does not allow punctuation characters such as @, $, and % within identifiers. C++ is a case-sensitive programming language.  Thus, <b>Manpower</b> and <b>manpower</b> are two different identifiers in C++.</p>\n<p>Here are some examples of acceptable identifiers \u2212</p>\n<pre class=\"result notranslate\">\nmohd       zara    abc   move_name  a_123\nmyname50   _temp   j     a23b9      retVal\n</pre>\n<h2>C++ Keywords</h2>\n<p>The following list shows the reserved words in C++. These reserved words may not be used as constant or variable or any other identifier names.</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<td>asm</td>\n<td>else</td>\n<td>new</td>\n<td>this</td>\n</tr>\n<tr>\n<td>auto</td>\n<td>enum</td>\n<td>operator</td>\n<td>throw</td>\n</tr>\n<tr>\n<td>bool</td>\n<td>explicit</td>\n<td>private</td>\n<td>true</td>\n</tr>\n<tr>\n<td>break</td>\n<td>export</td>\n<td>protected</td>\n<td>try</td>\n</tr>\n<tr>\n<td>case</td>\n<td>extern</td>\n<td>public</td>\n<td>typedef</td>\n</tr>\n<tr>\n<td>catch</td>\n<td>false</td>\n<td>register</td>\n<td>typeid</td>\n</tr>\n<tr>\n<td>char</td>\n<td>float</td>\n<td>reinterpret_cast</td>\n<td>typename</td>\n</tr>\n<tr>\n<td>class</td>\n<td>for</td>\n<td>return</td>\n<td>union</td>\n</tr>\n<tr>\n<td>const</td>\n<td>friend</td>\n<td>short</td>\n<td>unsigned</td>\n</tr>\n<tr>\n<td>const_cast</td>\n<td>goto</td>\n<td>signed</td>\n<td>using</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>if</td>\n<td>sizeof</td>\n<td>virtual</td>\n</tr>\n<tr>\n<td>default</td>\n<td>inline</td>\n<td>static</td>\n<td>void</td>\n</tr>\n<tr>\n<td>delete</td>\n<td>int</td>\n<td>static_cast</td>\n<td>volatile</td>\n</tr>\n<tr>\n<td>do</td>\n<td>long</td>\n<td>struct</td>\n<td>wchar_t</td>\n</tr>\n<tr>\n<td>double</td>\n<td>mutable</td>\n<td>switch</td>\n<td>while</td>\n</tr>\n<tr>\n<td>dynamic_cast</td>\n<td>namespace</td>\n<td>template</td>\n<td>\u00a0</td>\n</tr>\n</table>\n<h2>Trigraphs</h2>\n<p>A few characters have an alternative representation, called a trigraph sequence. A trigraph is a three-character sequence that represents a single character and the sequence always starts with two question marks.</p>\n<p>Trigraphs are expanded anywhere they appear, including within string literals and character literals, in comments, and in preprocessor directives.</p>\n<p>Following are most frequently used trigraph sequences \u2212</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<th style=\"text-align:center;\">Trigraph</th>\n<th style=\"text-align:center;\">Replacement</th>\n</tr>\n<tr>\n<td>??=</td>\n<td>#</td>\n</tr>\n<tr>\n<td>??/</td>\n<td>\\</td>\n</tr>\n<tr>\n<td>??'</td>\n<td>^</td>\n</tr>\n<tr>\n<td>??(</td>\n<td>[</td>\n</tr>\n<tr>\n<td>??)</td>\n<td>]</td>\n</tr>\n<tr>\n<td>??!</td>\n<td>|</td>\n</tr>\n<tr>\n<td>??&lt;</td>\n<td>{</td>\n</tr>\n<tr>\n<td>??&gt;</td>\n<td>}</td>\n</tr>\n<tr>\n<td>??-</td>\n<td>~</td>\n</tr>\n</table>\n<p>All the compilers do not support trigraphs and they are not advised to be used because of their confusing nature.</p>\n<h2>Whitespace in C++</h2>\n<p>A line containing only whitespace, possibly with a comment, is known as a blank line, and C++ compiler totally ignores it.</p>\n<p>Whitespace is the term used in C++ to describe blanks, tabs, newline characters and comments. Whitespace separates one part of a statement from another and enables the compiler to identify where one element in a statement, such as int, ends and the next element begins.</p>\n<h3>Statement 1</h3>\n<pre class=\"result notranslate\">\nint age;\n</pre>\n<p>In the above statement there must be at least one whitespace character (usually a space) between int and age for the compiler to be able to distinguish them.</p>\n<h3>Statement 2</h3>\n<pre class=\"result notranslate\">\nfruit = apples + oranges;   // Get the total fruit\n</pre>\n<p>In the above statement 2, no whitespace characters are necessary between fruit and =, or between = and apples, although you are free to include some if you wish for readability purpose.</p>\n<h1>Comments in C++</h1>\n<p>Program comments are explanatory statements that you can include in the C++ code. These comments help anyone reading the source code. All programming languages allow for some form of comments.</p>\n<p>C++ supports single-line and multi-line comments. All characters available inside any comment are ignored by C++ compiler.</p>\n<p>C++ comments start with /* and end with */. For example \u2212</p>\n<pre class=\"result notranslate\">\n/* This is a comment */\n\n/* C++ comments can also\n   * span multiple lines\n*/\n</pre>\n<p>A comment can also start with //, extending to the end of the line. For example \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/Q4esaC\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nmain() {\n   cout &lt;&lt; \"Hello World\"; // prints Hello World\n   \n   return 0;\n}\n</pre>\n<p>When the above code is compiled, it will ignore <b>// prints Hello World</b> and final executable will produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nHello World\n</pre>\n<p>Within a /* and */ comment, // characters have no special meaning. Within a // comment, /* and */ have no special meaning. Thus, you can \"nest\" one kind of comment within the other kind. For example \u2212</p>\n<pre class=\"result notranslate\">\n/* Comment out printing of Hello World:\n\ncout &lt;&lt; \"Hello World\"; // prints Hello World\n\n*/\n</pre>\n<h1>C++ Data Types</h1>\n<p>While writing program in any language, you need to use various variables to store various information. Variables are nothing but reserved memory locations to store values. This means that when you create a variable you reserve some space in memory.</p>\n<p>You may like to store information of various data types like character, wide character, integer, floating point, double floating point, boolean etc. Based on the data type of a variable, the operating system allocates memory and decides what can be stored in the reserved memory.</p>\n<h2>Primitive Built-in Types</h2>\n<p>C++ offers the programmer a rich assortment of built-in as well as user defined data types. Following table lists down seven basic C++ data types \u2212</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<th style=\"text-align:center;\" width=\"50%\">Type</th>\n<th style=\"text-align:center;\">Keyword</th>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>bool</td>\n</tr>\n<tr>\n<td>Character</td>\n<td>char</td>\n</tr>\n<tr>\n<td>Integer</td>\n<td>int</td>\n</tr>\n<tr>\n<td>Floating point</td>\n<td>float</td>\n</tr>\n<tr>\n<td>Double floating point</td>\n<td>double</td>\n</tr>\n<tr>\n<td>Valueless</td>\n<td>void</td>\n</tr>\n<tr>\n<td>Wide character</td>\n<td>wchar_t</td>\n</tr>\n</table>\n<p>Several of the basic types can be modified using one or more of these type modifiers \u2212</p>\n<ul class=\"list\">\n<li>signed</li>\n<li>unsigned</li>\n<li>short</li>\n<li>long</li>\n</ul>\n<p>The following table shows the variable type, how much memory it takes to store the value in memory, and what is maximum and minimum value which can be stored in such type of variables.</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<th style=\"text-align:center;\">Type</th>\n<th style=\"text-align:center;\">Typical Bit Width</th>\n<th style=\"text-align:center;\">Typical Range</th>\n</tr>\n<tr>\n<td>char</td>\n<td>1byte</td>\n<td>-127 to 127 or 0 to 255</td>\n</tr>\n<tr>\n<td>unsigned char</td>\n<td>1byte</td>\n<td>0 to 255</td>\n</tr>\n<tr>\n<td>signed char</td>\n<td>1byte</td>\n<td>-127 to 127</td>\n</tr>\n<tr>\n<td>int</td>\n<td>4bytes</td>\n<td>-2147483648 to 2147483647</td>\n</tr>\n<tr>\n<td>unsigned int</td>\n<td>4bytes</td>\n<td>0 to 4294967295</td>\n</tr>\n<tr>\n<td>signed int</td>\n<td>4bytes</td>\n<td>-2147483648 to 2147483647</td>\n</tr>\n<tr>\n<td>short int</td>\n<td>2bytes</td>\n<td>-32768 to 32767</td>\n</tr>\n<tr>\n<td>unsigned short int</td>\n<td>Range</td>\n<td>0 to 65,535</td>\n</tr>\n<tr>\n<td>signed short int</td>\n<td>Range</td>\n<td>-32768 to 32767</td>\n</tr>\n<tr>\n<td>long int</td>\n<td>4bytes</td>\n<td>-2,147,483,648 to 2,147,483,647</td>\n</tr>\n<tr>\n<td>signed long int</td>\n<td>4bytes</td>\n<td>same as long int</td>\n</tr>\n<tr>\n<td>unsigned long int</td>\n<td>4bytes</td>\n<td>0 to 4,294,967,295</td>\n</tr>\n<tr>\n<td>float</td>\n<td>4bytes</td>\n<td>+/- 3.4e +/- 38 (~7 digits)</td>\n</tr>\n<tr>\n<td>double</td>\n<td>8bytes</td>\n<td>+/- 1.7e +/- 308 (~15 digits)</td>\n</tr>\n<tr>\n<td>long double</td>\n<td>8bytes</td>\n<td>+/- 1.7e +/- 308 (~15 digits)</td>\n</tr>\n<tr>\n<td>wchar_t</td>\n<td>2 or 4 bytes</td>\n<td>1 wide character</td>\n</tr>\n</table>\n<p>The size of variables might be different from those shown in the above table, depending on the compiler and the computer you are using.</p>\n<p>Following is the example, which will produce correct size of various data types on your computer.</p>\n<a class=\"demo\" href=\"http://tpcg.io/iKNn78\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n   cout &lt;&lt; \"Size of char : \" &lt;&lt; sizeof(char) &lt;&lt; endl;\n   cout &lt;&lt; \"Size of int : \" &lt;&lt; sizeof(int) &lt;&lt; endl;\n   cout &lt;&lt; \"Size of short int : \" &lt;&lt; sizeof(short int) &lt;&lt; endl;\n   cout &lt;&lt; \"Size of long int : \" &lt;&lt; sizeof(long int) &lt;&lt; endl;\n   cout &lt;&lt; \"Size of float : \" &lt;&lt; sizeof(float) &lt;&lt; endl;\n   cout &lt;&lt; \"Size of double : \" &lt;&lt; sizeof(double) &lt;&lt; endl;\n   cout &lt;&lt; \"Size of wchar_t : \" &lt;&lt; sizeof(wchar_t) &lt;&lt; endl;\n   \n   return 0;\n}\n</pre>\n<p>This example uses  <b>endl</b>, which inserts a new-line character after every line and &lt;&lt; operator is being used to pass multiple values out to the screen. We are also using <b>sizeof()</b> operator to get size of various data types.</p>\n<p>When the above code is compiled and executed, it produces the following result which can vary from machine to machine \u2212</p>\n<pre class=\"result notranslate\">\nSize of char : 1\nSize of int : 4\nSize of short int : 2\nSize of long int : 4\nSize of float : 4\nSize of double : 8\nSize of wchar_t : 4\n</pre>\n<h2>typedef Declarations</h2>\n<p>You can create a new name for an existing type using <b>typedef</b>. Following is the simple syntax to define a new type using typedef \u2212</p>\n<pre class=\"result notranslate\">\ntypedef type newname; \n</pre>\n<p>For example, the following tells the compiler that feet is another name for int \u2212</p>\n<pre class=\"result notranslate\">\ntypedef int feet;\n</pre>\n<p>Now, the following declaration is perfectly legal and creates an integer variable called distance \u2212</p>\n<pre class=\"result notranslate\">\nfeet distance;\n</pre>\n<h2>Enumerated Types</h2>\n<p>An enumerated type declares an optional type name  and a set of zero or more identifiers that can be used as values of the type. Each enumerator is a constant whose type is the enumeration.</p>\n<p>Creating an enumeration requires the use of the keyword <b>enum</b>. The general form of an enumeration type is \u2212</p>\n<pre class=\"result notranslate\">\nenum enum-name { list of names } var-list; \n</pre>\n<p>Here, the enum-name is the enumeration's type name. The list of names is comma separated.</p>\n<p>For example, the following code defines an enumeration of colors called colors and the variable c of type color. Finally, c is assigned the value \"blue\".</p>\n<pre class=\"result notranslate\">\nenum color { red, green, blue } c;\nc = blue;\n</pre>\n<p>By default, the value of the first name is 0, the second name has the value 1, and the third has the value 2, and so on. But you can give a name, a specific value by adding an initializer. For example, in the following enumeration, <b>green</b> will have the value 5.</p>\n<pre class=\"result notranslate\">\nenum color { red, green = 5, blue };\n</pre>\n<p>Here, <b>blue</b> will have a value of 6 because each name will be one greater than the one that precedes it.</p>\n<h1>C++ Variable Types</h1>\n<p>A variable provides us with named storage that our programs can manipulate. Each variable in C++ has a specific type, which determines the size and layout of the variable's memory; the range of values that can be stored within that memory; and the set of operations that can be applied to the variable.</p>\n<p>The name of a variable can be composed of letters, digits, and the underscore character. It must begin with either a letter or an underscore. Upper and lowercase letters are distinct because C++ is case-sensitive \u2212</p>\n<p>There are following basic types of variable in C++ as explained in last chapter \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"width:5%\">Sr.No</th>\n<th style=\"text-align:center;\">Type &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>bool</b></p>\n<p>Stores either value true or false.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>char</b></p>\n<p>Typically a single octet (one byte). This is an integer type.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>int</b></p>\n<p>The most natural size of integer for the machine.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>float</b></p>\n<p>A single-precision floating point value.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>double</b></p>\n<p>A double-precision floating point value.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><p><b>void</b></p>\n<p>Represents the absence of type.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">7</td>\n<td><p><b>wchar_t</b></p>\n<p>A wide character type.</p></td>\n</tr>\n</table>\n<p>C++ also allows to define various other types of variables, which we will cover in subsequent chapters like <b>Enumeration, Pointer, Array, Reference, Data structures,</b> and <b>Classes</b>.</p>\n<p>Following section will cover how to define, declare and use various types of variables.</p>\n<h2>Variable Definition in C++</h2>\n<p>A variable definition tells the compiler where and how much storage to create for the variable. A variable definition specifies a data type, and contains a list of one or more variables of that type as follows \u2212</p>\n<pre class=\"result notranslate\">\ntype variable_list;\n</pre>\n<p>Here, <b>type</b> must be a valid C++ data type including char, w_char, int, float, double, bool or any user-defined object, etc., and <b>variable_list</b> may consist of one or more identifier names separated by commas. Some valid declarations are shown here \u2212</p>\n<pre class=\"result notranslate\">\nint    i, j, k;\nchar   c, ch;\nfloat  f, salary;\ndouble d;\n</pre>\n<p>The line <b>int i, j, k;</b> both declares and defines the variables i, j and k; which instructs the compiler to create variables named i, j and k of type int.</p>\n<p>Variables can be initialized (assigned an initial value) in their declaration. The initializer consists of an equal sign followed by a constant expression as follows \u2212</p>\n<pre class=\"result notranslate\">\ntype variable_name = value;\n</pre>\n<p>Some examples are \u2212</p>\n<pre class=\"result notranslate\">\nextern int d = 3, f = 5;    // declaration of d and f. \nint d = 3, f = 5;           // definition and initializing d and f. \nbyte z = 22;                // definition and initializes z. \nchar x = 'x';               // the variable x has the value 'x'.\n</pre>\n<p>For definition without an initializer: variables with static storage duration are implicitly initialized with NULL (all bytes have the value 0); the initial value of all other variables is undefined.</p>\n<h2>Variable Declaration in C++</h2>\n<p>A variable declaration provides assurance to the compiler that there is one variable existing with the given type and name so that compiler proceed for further compilation without needing complete detail about the variable. A variable declaration has its meaning at the time of compilation only, compiler needs actual variable definition at the time of linking of the program.</p>\n<p>A variable declaration is useful when you are using multiple files and you define your variable in one of the files which will be available at the time of linking of the program. You will use <b>extern</b> keyword to declare a variable at any place. Though you can declare a variable multiple times in your C++ program, but it can be defined only once in a file, a function or a block of code.</p>\n<h3>Example</h3>\n<p>Try the following example where a variable has been declared at the top, but it has been defined inside the main function \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/odXXRO\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\n// Variable declaration:\nextern int a, b;\nextern int c;\nextern float f;\n  \nint main () {\n   // Variable definition:\n   int a, b;\n   int c;\n   float f;\n \n   // actual initialization\n   a = 10;\n   b = 20;\n   c = a + b;\n \n   cout &lt;&lt; c &lt;&lt; endl ;\n\n   f = 70.0/3.0;\n   cout &lt;&lt; f &lt;&lt; endl ;\n \n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\n30\n23.3333\n</pre>\n<p>Same concept applies on function declaration where you provide a function name at the time of its declaration and its actual definition can be given anywhere else. For example \u2212</p>\n<pre class=\"result notranslate\">\n// function declaration\nint func();\nint main() {\n   // function call\n   int i = func();\n}\n\n// function definition\nint func() {\n   return 0;\n}\n</pre>\n<h2>Lvalues and Rvalues</h2>\n<p>There are two kinds of expressions in C++ \u2212</p>\n<ul class=\"list\">\n<li><p><b>lvalue</b> \u2212 Expressions that refer to a memory location is  called \"lvalue\" expression. An lvalue may appear as either the left-hand or right-hand side of an assignment.</p></li>\n<li><p><b>rvalue</b> \u2212 The term rvalue refers to a data value that is stored at some address in memory. An rvalue is an expression that cannot have a value assigned to it which means an rvalue may appear on the right- but not left-hand side of an assignment.</p></li>\n</ul>\n<p>Variables are lvalues and so may appear on the left-hand side of an assignment. Numeric literals are rvalues and so may not be assigned and can not appear on the left-hand side. Following is a valid statement \u2212</p>\n<pre class=\"result notranslate\">\nint g = 20;\n</pre>\n<p>But the following is not a valid statement and would generate compile-time error \u2212</p>\n<pre class=\"result notranslate\">\n10 = 20;\n</pre>\n<h1>Variable Scope in C++</h1>\n<p>A scope is a region of the program and broadly speaking there are three places, where variables can be declared \u2212</p>\n<ul class=\"list\">\n<li><p>Inside a function or a block which is called local variables,</p></li>\n<li><p>In the definition of function parameters which is called formal parameters.</p></li>\n<li><p>Outside of all functions which is called global variables.</p></li>\n</ul>\n<p>We will learn what is a function and it's parameter in subsequent chapters. Here let us explain what are local and global variables.</p>\n<h2>Local Variables</h2>\n<p>Variables that are declared inside a function or block are local variables. They can be used only by statements that are inside that function or block of code. Local variables are not known to functions outside their own. Following is the example using local variables \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/QIjnPh\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n \nint main () {\n   // Local variable declaration:\n   int a, b;\n   int c;\n \n   // actual initialization\n   a = 10;\n   b = 20;\n   c = a + b;\n \n   cout &lt;&lt; c;\n \n   return 0;\n}\n</pre>\n<h2>Global Variables</h2>\n<p>Global variables are defined outside of all the functions, usually on top of the program. The global variables will hold their value throughout the life-time of your program.</p>\n<p>A global variable can be accessed by any function. That is, a global variable is available for use throughout your entire program after its declaration. Following is the example using global and local variables \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/dRHHpD\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n \n// Global variable declaration:\nint g;\n \nint main () {\n   // Local variable declaration:\n   int a, b;\n \n   // actual initialization\n   a = 10;\n   b = 20;\n   g = a + b;\n  \n   cout &lt;&lt; g;\n \n   return 0;\n}\n</pre>\n<p>A program can have same name for local and global variables but value of local variable inside a function will take preference. For example \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/dt7MP9\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n \n// Global variable declaration:\nint g = 20;\n \nint main () {\n   // Local variable declaration:\n   int g = 10;\n \n   cout &lt;&lt; g;\n \n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\n10\n</pre>\n<h2>Initializing Local and Global Variables</h2>\n<p>When a local variable is defined, it is not initialized by the system, you must initialize it yourself. Global variables are initialized automatically by the system when you define them as follows \u2212</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<th style=\"text-align:center;\" width=\"50%\">Data Type</th>\n<th style=\"text-align:center;\">Initializer</th>\n</tr>\n<tr>\n<td>int</td>\n<td>0</td>\n</tr>\n<tr>\n<td>char</td>\n<td>'\\0'</td>\n</tr>\n<tr>\n<td>float</td>\n<td>0</td>\n</tr>\n<tr>\n<td>double</td>\n<td>0</td>\n</tr>\n<tr>\n<td>pointer</td>\n<td>NULL</td>\n</tr>\n</table>\n<p>It is a good programming practice to initialize variables properly, otherwise sometimes program would produce unexpected result.</p>\n<h1>C++ Constants/Literals</h1>\n<p>Constants refer to fixed values that the program may not alter and they are called <b>literals</b>.</p>\n<p>Constants can be of any of the basic data types and can be divided into Integer Numerals, Floating-Point Numerals, Characters, Strings and Boolean Values.</p>\n<p>Again, constants are treated just like regular variables except that their values cannot be modified after their definition.</p>\n<h2>Integer Literals</h2>\n<p>An integer literal can be a decimal, octal, or hexadecimal constant. A prefix specifies the base or radix: 0x or 0X for hexadecimal, 0 for octal, and nothing for decimal.</p>\n<p>An integer literal can also have a suffix that is a combination of U and L, for unsigned and long, respectively. The suffix can be uppercase or lowercase and can be in any order.</p>\n<p>Here are some examples of integer literals \u2212</p>\n<pre class=\"result notranslate\">\n212         // Legal\n215u        // Legal\n0xFeeL      // Legal\n078         // Illegal: 8 is not an octal digit\n032UU       // Illegal: cannot repeat a suffix\n</pre>\n<p>Following are other examples of various types of Integer literals \u2212</p>\n<pre class=\"result notranslate\">\n85         // decimal\n0213       // octal\n0x4b       // hexadecimal\n30         // int\n30u        // unsigned int\n30l        // long\n30ul       // unsigned long\n</pre>\n<h2>Floating-point Literals</h2>\n<p>A floating-point literal has an integer part, a decimal point, a fractional part, and an exponent part. You can represent floating point literals either in decimal form or exponential form.</p>\n<p>While representing using decimal form, you must include the decimal point, the exponent, or both and while representing using exponential form, you must include the integer part, the fractional part, or both. The signed exponent is introduced by e or E.</p>\n<p>Here are some examples of floating-point literals \u2212</p>\n<pre class=\"result notranslate\">\n3.14159       // Legal\n314159E-5L    // Legal\n510E          // Illegal: incomplete exponent\n210f          // Illegal: no decimal or exponent\n.e55          // Illegal: missing integer or fraction\n</pre>\n<h2>Boolean Literals</h2>\n<p>There are two Boolean literals and they are part of standard C++ keywords \u2212</p>\n<ul class=\"list\">\n<li><p>A value of <b>true</b> representing true.</p></li>\n<li><p>A value of <b>false</b> representing false.</p></li>\n</ul>\n<p>You should not consider the value of true equal to 1 and value of false equal to 0.</p>\n<h2>Character Literals</h2>\n<p>Character literals are enclosed in single quotes. If the literal begins with L (uppercase only), it is a wide character literal (e.g., L'x') and should be stored in <b>wchar_t</b> type of variable . Otherwise, it is a narrow character literal (e.g., 'x') and can be stored in a simple variable of <b>char</b> type.</p>\n<p>A character literal can be a plain character (e.g., 'x'), an escape sequence (e.g., '\\t'), or a universal character (e.g., '\\u02C0'). </p>\n<p>There are certain characters in C++ when they are preceded by a backslash they will have special meaning and they are used to represent like newline (\\n) or tab (\\t). Here, you have a list of some of such escape sequence codes \u2212</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<th style=\"text-align:center;\">Escape sequence</th>\n<th style=\"text-align:center;\">Meaning</th>\n</tr>\n<tr>\n<td>\\\\</td>\n<td>\\ character</td>\n</tr>\n<tr>\n<td>\\'</td>\n<td> ' character</td>\n</tr>\n<tr>\n<td>\\\"</td>\n<td>\" character</td>\n</tr>\n<tr>\n<td>\\?</td>\n<td>? character</td>\n</tr>\n<tr>\n<td>\\a</td>\n<td>Alert or bell</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>Backspace</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>Form feed</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>Newline</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>Carriage return</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>Horizontal tab</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>Vertical tab</td>\n</tr>\n<tr>\n<td>\\ooo</td>\n<td>Octal number of one to three digits</td>\n</tr>\n<tr>\n<td>\\xhh . . .</td>\n<td>Hexadecimal number of one or more digits</td>\n</tr>\n</table>\n<p>Following is the example to show a few escape sequence characters \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/8RqQ5S\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n   cout &lt;&lt; \"Hello\\tWorld\\n\\n\";\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nHello   World\n</pre>\n<h2>String Literals</h2>\n<p>String literals are enclosed in double quotes. A string contains characters that are similar to character literals: plain characters, escape sequences, and universal characters.</p>\n<p>You can break a long line into multiple lines using string literals and separate them using whitespaces.</p>\n<p>Here are some examples of string literals. All the three forms are identical strings.</p>\n<pre class=\"result notranslate\">\n\"hello, dear\"\n\n\"hello, \\\n\ndear\"\n\n\"hello, \" \"d\" \"ear\"\n</pre>\n<h2>Defining Constants</h2>\n<p>There are two simple ways in C++ to define constants \u2212</p>\n<ul class=\"list\">\n<li><p>Using <b>#define</b> preprocessor.</p></li>\n<li><p>Using <b>const</b> keyword.</p></li>\n</ul>\n<h2>The #define Preprocessor</h2>\n<p>Following is the form to use #define preprocessor to define a constant \u2212</p>\n<pre class=\"result notranslate\">\n#define identifier value\n</pre>\n<p>Following example explains it in detail \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/N6xxDP\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\n#define LENGTH 10   \n#define WIDTH  5\n#define NEWLINE '\\n'\n\nint main() {\n   int area;  \n   \n   area = LENGTH * WIDTH;\n   cout &lt;&lt; area;\n   cout &lt;&lt; NEWLINE;\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\n50\n</pre>\n<h2>The const Keyword</h2>\n<p>You can use <b>const</b> prefix to declare constants with a specific type as follows \u2212</p>\n<pre class=\"result notranslate\">\nconst type variable = value;\n</pre>\n<p>Following example explains it in detail \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/IA1cea\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n   const int  LENGTH = 10;\n   const int  WIDTH  = 5;\n   const char NEWLINE = '\\n';\n   int area;  \n   \n   area = LENGTH * WIDTH;\n   cout &lt;&lt; area;\n   cout &lt;&lt; NEWLINE;\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\n50\n</pre>\n<p>Note that it is a good programming practice to define constants in CAPITALS.</p>\n<h1>C++ Modifier Types</h1>\n<p>C++ allows the <b>char, int, </b> and <b>double</b> data types to have modifiers preceding them. A modifier is used to alter the meaning of the base type so that it more precisely fits the needs of various situations.</p>\n<p>The data type modifiers are listed here \u2212</p>\n<ul class=\"list\">\n<li>signed</li>\n<li>unsigned</li>\n<li>long</li>\n<li>short</li>\n</ul>\n<p>The modifiers <b>signed, unsigned, long,</b> and <b>short</b> can be applied to integer base types. In addition, <b>signed</b> and <b>unsigned</b> can be applied to char, and <b>long</b> can be applied to double.</p>\n<p>The modifiers <b>signed</b> and <b>unsigned</b> can also be used as prefix to <b>long</b> or <b>short</b> modifiers. For example, <b>unsigned long int</b>.</p>\n<p>C++ allows a shorthand notation for declaring <b>unsigned, short,</b> or <b>long</b> integers. You can simply use the word <b>unsigned, short,</b> or <b>long,</b> without <b>int</b>. It automatically implies <b>int</b>. For example, the following two statements both declare unsigned integer variables.</p>\n<pre class=\"result notranslate\">\nunsigned x;\nunsigned int y;\n</pre>\n<p>To understand the difference between the way signed and unsigned integer modifiers are interpreted by C++, you should run the following short program \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/nWAgjz\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n \n/* This program shows the difference between\n   * signed and unsigned integers.\n*/\nint main() {\n   short int i;           // a signed short integer\n   short unsigned int j;  // an unsigned short integer\n\n   j = 50000;\n\n   i = j;\n   cout &lt;&lt; i &lt;&lt; \" \" &lt;&lt; j;\n\n   return 0;\n}\n</pre>\n<p>When this program is run, following is the output \u2212</p>\n<pre class=\"result notranslate\">\n-15536 50000\n</pre>\n<p>The above result is because the bit pattern that represents 50,000 as a short unsigned integer is interpreted as -15,536 by a short.</p>\n<h2>Type Qualifiers in C++</h2>\n<p>The type qualifiers provide additional information about the variables they precede.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Qualifier &amp; Meaning</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>const</b></p>\n<p>Objects of type <b>const</b> cannot be changed by your program during execution.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>volatile</b></p>\n<p>The modifier <b>volatile</b> tells the compiler that a variable's value may be changed in ways not explicitly specified by the program.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>restrict</b></p>\n<p>A pointer qualified by <b>restrict</b> is initially the only means by which the object it points to can be accessed. Only C99 adds a new type qualifier called restrict.</p></td>\n</tr>\n</table>\n<h1>Storage Classes in C++</h1>\n<p>A storage class defines the scope (visibility) and life-time of variables and/or functions within a C++ Program. These specifiers precede the type that they modify. There are following storage classes, which can be used in a C++ Program</p>\n<ul class=\"list\">\n<li>auto</li>\n<li>register</li>\n<li>static</li>\n<li>extern</li>\n<li>mutable</li>\n</ul>\n<h2>The auto Storage Class</h2>\n<p>The <b>auto</b> storage class is the default storage class for all local variables.</p>\n<pre class=\"result notranslate\">\n{\n   int mount;\n   auto int month;\n}\n</pre>\n<p>The example above defines two variables with the same storage class, auto can only be used within functions, i.e., local variables.</p>\n<h2>The register Storage Class</h2>\n<p>The <b>register</b> storage class is used to define local variables that should be stored in a register instead of RAM. This means that the variable has a maximum size equal to the register size (usually one word) and can't have the unary '&amp;' operator applied to it (as it does not have a memory location).</p>\n<pre class=\"result notranslate\">\n{\n   register int  miles;\n}\n</pre>\n<p>The register should only be used for variables that require quick access such as counters. It should also be noted that defining 'register' does not mean that the variable will be stored in a register. It means that it MIGHT be stored in a register depending on hardware and implementation restrictions.</p>\n<h2>The static Storage Class</h2>\n<p>The <b>static</b> storage class instructs the compiler to keep a local variable in existence during the life-time of the program instead of creating and destroying it each time it comes into and goes out of scope.  Therefore, making local variables static allows them to maintain their values between function calls.</p>\n<p>The static modifier may also be applied to global variables. When this is done, it causes that variable's scope to be restricted to the file in which it is declared.</p>\n<p>In C++, when static is used on a class data member, it causes only one copy of that member to be shared by all objects of its class.</p>\n<a class=\"demo\" href=\"http://tpcg.io/20HjiV\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n \n// Function declaration\nvoid func(void);\n \nstatic int count = 10; /* Global variable */\n \nmain() {\n   while(count--) {\n      func();\n   }\n   \n   return 0;\n}\n\n// Function definition\nvoid func( void ) {\n   static int i = 5; // local static variable\n   i++;\n   std::cout &lt;&lt; \"i is \" &lt;&lt; i ;\n   std::cout &lt;&lt; \" and count is \" &lt;&lt; count &lt;&lt; std::endl;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\ni is 6 and count is 9\ni is 7 and count is 8\ni is 8 and count is 7\ni is 9 and count is 6\ni is 10 and count is 5\ni is 11 and count is 4\ni is 12 and count is 3\ni is 13 and count is 2\ni is 14 and count is 1\ni is 15 and count is 0\n</pre>\n<h2>The extern Storage Class</h2>\n<p>The <b>extern</b> storage class is used to give a reference  of a global variable that is visible to ALL the program files. When you use 'extern' the variable cannot be initialized  as all it does is point the variable name at a storage location that has been previously defined.</p>\n<p>When you have multiple files and you define a global variable or function, which will be used in other files also, then <i>extern</i> will be used in another file to give reference of defined variable or function. Just for understanding <i> extern </i> is used to declare a global variable or function in another file.</p>\n<p>The extern modifier is most commonly used when there are two or more files sharing the same global variables or functions as explained below.</p>\n<h3>First File: main.cpp</h3>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nint count ;\nextern void write_extern();\n \nmain() {\n   count = 5;\n   write_extern();\n}\n</pre>\n<h3>Second File: support.cpp</h3>\n<pre class=\"result notranslate\">\n#include &lt;iostream&gt;\n\nextern int count;\n\nvoid write_extern(void) {\n   std::cout &lt;&lt; \"Count is \" &lt;&lt; count &lt;&lt; std::endl;\n}\n</pre>\n<p>Here, <i>extern</i> keyword is being used to declare count in another file. Now compile these two files as follows \u2212</p>\n<pre class=\"result notranslate\">\n$g++ main.cpp support.cpp -o write\n</pre>\n<p>This will produce <b>write</b> executable program, try to execute <b>write</b> and check the result as follows \u2212</p>\n<pre class=\"result notranslate\">\n$./write\n5\n</pre>\n<h2>The mutable Storage Class</h2>\n<p>The <b>mutable</b> specifier applies only to class objects, which are discussed later in this tutorial. It allows a member of an object to override const member function. That is, a mutable member can be modified by a const member function.</p>\n<h1>Operators in C++</h1>\n<p>An operator is a symbol that tells the compiler to perform specific mathematical or logical manipulations. C++ is rich in built-in operators and provide the following types of operators \u2212</p>\n<ul class=\"list\">\n<li>Arithmetic Operators</li>\n<li>Relational Operators</li>\n<li>Logical Operators</li>\n<li>Bitwise Operators</li>\n<li>Assignment Operators</li>\n<li>Misc Operators</li>\n</ul>\n<p>This chapter will examine the arithmetic, relational, logical, bitwise, assignment and other operators one by one.</p>\n<h2>Arithmetic Operators</h2>\n<p>There are following arithmetic operators supported by C++ language \u2212</p>\n<p>Assume variable A holds 10 and variable B holds 20, then \u2212</p>\n<p><a href=\"/cplusplus/cpp_arithmatic_operators.htm\" title=\"Arithmetic Operators in C++\">Show Examples</a></p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\" width=\"10%\">Operator</th>\n<th style=\"text-align:center;\" width=\"45%\">Description</th>\n<th style=\"text-align:center;\">Example</th>\n</tr>\n<tr>\n<td style=\"text-align:center;\">+</td>\n<td>Adds two operands</td>\n<td style=\"text-align:center;\">A + B will give 30</td>\n</tr>\n<tr>\n<td class=\"ts\">-</td>\n<td>Subtracts second operand from the first</td>\n<td class=\"ts\">A - B will give -10</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">*</td>\n<td>Multiplies both operands</td>\n<td style=\"text-align:center;\">A * B will give 200</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">/</td>\n<td>Divides numerator by de-numerator</td>\n<td style=\"text-align:center;\">B / A will give 2</td>\n</tr>\n<tr>\n<td class=\"ts\">%</td>\n<td>Modulus Operator and remainder of after an integer division</td>\n<td class=\"ts\">B % A will give 0</td>\n</tr>\n<tr>\n<td class=\"ts\">++</td>\n<td><a href=\"/cplusplus/cpp_increment_decrement_operators.htm\" title=\"Increment operator in C++\">Increment operator</a>, increases integer value by one</td>\n<td class=\"ts\">A++ will give 11</td>\n</tr>\n<tr>\n<td class=\"ts\">--</td>\n<td><a href=\"/cplusplus/cpp_increment_decrement_operators.htm\" title=\"Decrement operator in C++\">Decrement operator</a>, decreases integer value by one</td>\n<td class=\"ts\">A-- will give 9</td>\n</tr>\n</table>\n<h2>Relational Operators</h2>\n<p>There are following relational operators supported by C++ language</p>\n<p>Assume variable A holds 10 and variable B holds 20, then \u2212</p>\n<p><a href=\"/cplusplus/cpp_relational_operators.htm\" title=\"Relational Operators in C++\">Show Examples</a></p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\" width=\"10%\">Operator</th>\n<th style=\"text-align:center;\" width=\"45%\">Description</th>\n<th style=\"text-align:center;\">Example</th>\n</tr>\n<tr>\n<td class=\"ts\">==</td>\n<td>Checks if the values of two operands are equal or not, if yes then condition becomes true.</td>\n<td class=\"ts\">(A == B) is not true.</td>\n</tr>\n<tr>\n<td class=\"ts\">!=</td>\n<td>Checks if the values of two operands are equal or not, if values are not equal then condition becomes true.</td>\n<td class=\"ts\">(A != B) is true.</td>\n</tr>\n<tr>\n<td class=\"ts\">&gt;</td>\n<td>Checks if the value of left  operand is greater than the value of right operand, if yes then condition becomes true.</td>\n<td class=\"ts\">(A &gt; B) is not true.</td>\n</tr>\n<tr>\n<td class=\"ts\">&lt;</td>\n<td>Checks if the value of left  operand is less than the value of right operand, if yes then condition becomes true.</td>\n<td class=\"ts\">(A &lt; B) is true.</td>\n</tr>\n<tr>\n<td class=\"ts\">&gt;=</td>\n<td>Checks if the value of left  operand is greater than or equal to the value of right operand, if yes then condition becomes true.</td>\n<td class=\"ts\">(A &gt;= B) is not true.</td>\n</tr>\n<tr>\n<td class=\"ts\">&lt;=</td>\n<td>Checks if the value of left  operand is less than or equal to the value of right operand, if yes then condition becomes true.</td>\n<td class=\"ts\">(A &lt;= B) is true.</td>\n</tr>\n</table>\n<h2>Logical Operators</h2>\n<p>There are following logical operators supported by C++ language.</p>\n<p>Assume variable A holds 1 and variable B holds 0, then \u2212</p>\n<p><a href=\"/cplusplus/cpp_logical_operators.htm\" title=\"Logical Operators in C++\">Show Examples</a></p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\" width=\"10%\">Operator</th>\n<th style=\"text-align:center;\" width=\"45%\">Description</th>\n<th style=\"text-align:center;\">Example</th>\n</tr>\n<tr>\n<td class=\"ts\">&amp;&amp;</td>\n<td>Called Logical AND  operator. If both the operands are non-zero, then condition becomes true.</td>\n<td class=\"ts\">(A &amp;&amp; B) is false.</td>\n</tr>\n<tr>\n<td class=\"ts\">||</td>\n<td>Called Logical OR Operator. If any of the two operands is non-zero, then condition becomes true.</td>\n<td class=\"ts\">(A || B) is true.</td>\n</tr>\n<tr>\n<td class=\"ts\">!</td>\n<td>Called Logical NOT Operator. Use to reverses the logical state of its operand. If a condition is true, then Logical NOT operator will make false.</td>\n<td class=\"ts\">!(A &amp;&amp; B) is true.</td>\n</tr>\n</table>\n<h2>Bitwise Operators</h2>\n<p>Bitwise operator works on bits and perform bit-by-bit operation. The truth tables for &amp;, |, and ^ are as follows \u2212</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<th style=\"text-align:center;width:20%\">p</th>\n<th style=\"text-align:center;width:20%\">q</th>\n<th style=\"text-align:center;width:20%\">p &amp; q</th>\n<th style=\"text-align:center;width:20%\">p | q</th>\n<th style=\"text-align:center;width:20%\">p ^ q</th>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n</table>\n<p>Assume if A = 60; and B = 13; now in binary format they will be as follows \u2212</p>\n<p>A = 0011 1100</p>\n<p>B = 0000 1101</p>\n<p>-----------------</p>\n<p>A&amp;B = 0000 1100</p>\n<p>A|B = 0011 1101</p>\n<p>A^B = 0011 0001</p>\n<p>~A\u00a0 = 1100 0011</p>\n<p>The Bitwise operators supported by C++ language are listed in the following table. Assume variable A holds 60 and variable B holds 13, then \u2212</p>\n<p><a href=\"/cplusplus/cpp_bitwise_operators.htm\" title=\"Bitwise Operators in C++\">Show Examples</a></p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\" width=\"10%\">Operator</th>\n<th style=\"text-align:center;\" width=\"45%\">Description</th>\n<th style=\"text-align:center;\">Example</th>\n</tr>\n<tr>\n<td class=\"ts\">&amp;</td>\n<td>Binary AND Operator copies a bit to the result if it exists in both operands. </td>\n<td style=\"vertical-align:middle;\">(A &amp; B) will give 12 which is 0000 1100</td>\n</tr>\n<tr>\n<td class=\"ts\">|</td>\n<td>Binary OR Operator copies a bit if it exists in either operand.</td>\n<td>(A | B) will give 61 which is 0011 1101</td>\n</tr>\n<tr>\n<td class=\"ts\">^</td>\n<td>Binary XOR Operator copies the bit if it is set in one operand but not both.</td>\n<td style=\"vertical-align:middle;\">(A ^ B) will give 49 which is 0011 0001</td>\n</tr>\n<tr>\n<td class=\"ts\">~</td>\n<td>Binary Ones Complement Operator is unary and has the effect of 'flipping' bits. </td>\n<td>(~A ) will give -61 which is 1100 0011 in 2's complement form due to a signed binary number.</td>\n</tr>\n<tr>\n<td class=\"ts\">&lt;&lt;</td>\n<td>Binary Left Shift Operator. The left operands value is moved left by the number of bits specified by the right operand.</td>\n<td style=\"vertical-align:middle;\">A &lt;&lt; 2 will give 240 which is 1111 0000</td>\n</tr>\n<tr>\n<td class=\"ts\">&gt;&gt;</td>\n<td>Binary Right Shift Operator. The left operands value is moved right by the number of bits specified by the right operand.</td>\n<td style=\"vertical-align:middle;\">A &gt;&gt; 2 will give 15 which is 0000 1111</td>\n</tr>\n</table>\n<h2>Assignment Operators</h2>\n<p>There are following assignment operators supported by C++ language \u2212</p>\n<p><a href=\"/cplusplus/cpp_assignment_operators.htm\" title=\"Assignment Operators in C++\">Show Examples</a></p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\" width=\"10%\">Operator</th>\n<th style=\"text-align:center;\" width=\"48%\">Description</th>\n<th style=\"text-align:center;\">Example</th>\n</tr>\n<tr>\n<td class=\"ts\">=</td>\n<td>Simple assignment operator, Assigns values from right side operands to left side operand.</td>\n<td style=\"vertical-align:middle;\">C = A + B will assign value of A + B into C</td>\n</tr>\n<tr>\n<td class=\"ts\">+=</td>\n<td>Add AND assignment operator, It adds right operand to the left operand and assign the result to left operand.</td>\n<td style=\"vertical-align:middle;\">C += A is equivalent to C = C + A</td>\n</tr>\n<tr>\n<td class=\"ts\">-=</td>\n<td>Subtract AND assignment operator, It subtracts right operand from the left operand and assign the result to left operand.</td>\n<td style=\"vertical-align:middle;\">C -= A is equivalent to C = C - A</td>\n</tr>\n<tr>\n<td class=\"ts\">*=</td>\n<td>Multiply AND assignment operator, It multiplies right operand with the left operand and assign the result to left operand.</td>\n<td style=\"vertical-align:middle;\">C *= A is equivalent to C = C * A</td>\n</tr>\n<tr>\n<td class=\"ts\">/=</td>\n<td>Divide AND assignment operator, It divides left operand with the right operand and assign the result to left operand.</td>\n<td style=\"vertical-align:middle;\">C /= A is equivalent to C = C / A</td>\n</tr>\n<tr>\n<td class=\"ts\">%=</td>\n<td>Modulus AND assignment operator, It takes modulus using two operands and assign the result to  left operand.</td>\n<td style=\"vertical-align:middle;\">C %= A is equivalent to C = C % A</td>\n</tr>\n<tr>\n<td class=\"ts\">&lt;&lt;=</td>\n<td>Left shift AND assignment operator.</td>\n<td style=\"vertical-align:middle;\">C &lt;&lt;= 2 is same as C = C &lt;&lt; 2</td>\n</tr>\n<tr>\n<td class=\"ts\">&gt;&gt;=</td>\n<td>Right shift AND assignment operator.</td>\n<td style=\"vertical-align:middle;\">C &gt;&gt;= 2 is same as C = C &gt;&gt; 2</td>\n</tr>\n<tr>\n<td class=\"ts\">&amp;=</td>\n<td>Bitwise AND assignment operator.</td>\n<td style=\"vertical-align:middle;\">C &amp;= 2 is same as C = C &amp; 2</td>\n</tr>\n<tr>\n<td class=\"ts\">^=</td>\n<td>Bitwise exclusive OR and assignment operator.</td>\n<td style=\"vertical-align:middle;\">C ^= 2 is same as C = C ^ 2</td>\n</tr>\n<tr>\n<td class=\"ts\">|=</td>\n<td>Bitwise inclusive OR and assignment operator.</td>\n<td style=\"vertical-align:middle;\">C |= 2 is same as C = C | 2</td>\n</tr>\n</table>\n<h2>Misc Operators</h2>\n<p>The following table lists some other operators that C++ supports.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Operator &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>sizeof</b></p>\n<p><a href=\"/cplusplus/cpp_sizeof_operator.htm\">sizeof operator</a> returns the size of a variable. For example, sizeof(a), where \u2018a\u2019 is integer, and will return 4.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>Condition ? X : Y</b></p>\n<p><a href=\"/cplusplus/cpp_conditional_operator.htm\">Conditional operator (?)</a>. If Condition is true then it returns value of X otherwise returns value of Y.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>,</b></p>\n<p><a href=\"/cplusplus/cpp_comma_operator.htm\">Comma operator</a> causes a sequence of operations to be performed. The value of the entire comma expression is the value of the last expression of the comma-separated list.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>. (dot) and  -&gt; (arrow)</b></p>\n<p><a href=\"/cplusplus/cpp_member_operators.htm\">Member operators</a> are used to reference individual members of classes, structures, and unions.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>Cast</b></p>\n<p><a href=\"/cplusplus/cpp_casting_operators.htm\">Casting operators</a> convert one data type to another. For example, int(2.2000) would return 2.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><p><b>&amp;</b></p>\n<p><a href=\"/cplusplus/cpp_pointer_operators.htm\">Pointer operator &amp;</a> returns the address of a variable. For example &amp;a; will give actual address of the variable.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">7</td>\n<td><p><b>*</b></p>\n<p><a href=\"/cplusplus/cpp_pointer_operators.htm\">Pointer operator *</a> is pointer to a variable. For example *var; will pointer to a variable var.</p></td>\n</tr>\n</table>\n<h2>Operators Precedence in C++</h2>\n<p>Operator precedence determines the grouping of terms in an expression. This affects how an expression is evaluated. Certain operators have higher precedence than others; for example, the multiplication operator has higher precedence than the addition operator \u2212</p>\n<p>For example x = 7 + 3 * 2; here, x is assigned 13, not 20 because operator * has higher precedence than +, so it first gets multiplied with 3*2 and then adds into 7.</p>\n<p>Here, operators with the highest precedence appear at the top of the table, those with the lowest appear at the bottom. Within an expression, higher precedence operators will be evaluated first.</p>\n<p><a href=\"/cplusplus/cpp_operators_precedence.htm\" title=\"Operators Precedence in C++\">Show Examples</a></p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<th style=\"text-align:center;\">Category\u00a0</th>\n<th style=\"text-align:center;\">Operator\u00a0</th>\n<th style=\"text-align:center;\">Associativity\u00a0</th>\n</tr>\n<tr>\n<td>Postfix\u00a0</td>\n<td>() [] -&gt; .  ++   - - \u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Unary\u00a0</td>\n<td>+  -   !  ~  ++  - - (type)*  &amp; sizeof\u00a0</td>\n<td>Right to left\u00a0</td>\n</tr>\n<tr>\n<td>Multiplicative \u00a0</td>\n<td>*  /  %\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Additive \u00a0</td>\n<td>+  -\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Shift \u00a0</td>\n<td>&lt;&lt; &gt;&gt;\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Relational \u00a0</td>\n<td>&lt; &lt;=  &gt; &gt;=\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Equality \u00a0</td>\n<td>==  !=\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Bitwise AND\u00a0</td>\n<td>&amp;\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Bitwise XOR\u00a0</td>\n<td>^\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Bitwise OR\u00a0</td>\n<td>|\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Logical AND\u00a0</td>\n<td>&amp;&amp;\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Logical OR\u00a0</td>\n<td>||\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Conditional\u00a0</td>\n<td>?:\u00a0</td>\n<td>Right to left\u00a0</td>\n</tr>\n<tr>\n<td>Assignment\u00a0</td>\n<td>=  +=  -=  *=  /=  %=&gt;&gt;=  &lt;&lt;=  &amp;=  ^=   |=\u00a0</td>\n<td>Right to left\u00a0</td>\n</tr>\n<tr>\n<td>Comma\u00a0</td>\n<td>,\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n</table>\n<h1>C++ Loop Types</h1>\n<p>There may be a situation, when you need to execute a block of code several number of times. In general, statements are executed sequentially: The first statement in a function is executed first, followed by the second, and so on.</p>\n<p>Programming languages provide various control structures that allow for more complicated execution paths.</p>\n<p>A loop statement allows us to execute a statement or group of statements multiple times and following is the general from of a loop statement in most of the programming languages \u2212</p>\n<img alt=\"Loop Architecture\" src=\"/cplusplus/images/loop_architecture.jpg\">\n<p>C++ programming language provides the following type of loops to handle looping requirements.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Loop Type &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><a href=\"/cplusplus/cpp_while_loop.htm\" title=\"C++ while loop\">while loop</a>\n<p>Repeats a statement or group of statements while a given condition is true. It tests the condition before executing the loop body.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><a href=\"/cplusplus/cpp_for_loop.htm\" title=\"C++ for loop\">for loop</a>\n<p>Execute a sequence of statements multiple times and abbreviates the code that manages the loop variable.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><a href=\"/cplusplus/cpp_do_while_loop.htm\" title=\"C++ do...while loop\">do...while loop</a>\n<p>Like a \u2018while\u2019 statement, except that it tests the condition at the end of the loop body.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><a href=\"/cplusplus/cpp_nested_loops.htm\" title=\"C++ nested loops\">nested loops</a>\n<p>You can use one or more loop inside any another \u2018while\u2019, \u2018for\u2019 or \u2018do..while\u2019 loop.</p></td>\n</tr>\n</table>\n<h2>Loop Control Statements</h2>\n<p>Loop control statements change execution from its normal sequence. When execution leaves a scope, all automatic objects that were created in that scope are destroyed.</p>\n<p>C++ supports the following control statements.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Control Statement &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><a href=\"/cplusplus/cpp_break_statement.htm\" title=\"C++ break statement\">break statement</a>\n<p>Terminates the <b>loop</b> or <b>switch</b> statement and transfers execution to the statement immediately following the loop or switch.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><a href=\"/cplusplus/cpp_continue_statement.htm\" title=\"C++ continue statement\">continue statement</a>\n<p>Causes the loop to skip the remainder of its body and immediately retest its condition prior to reiterating.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><a href=\"/cplusplus/cpp_goto_statement.htm\" title=\"C++ goto statement\">goto statement</a>\n<p>Transfers control to the labeled statement. Though it is not advised to use goto statement in your program.</p></td>\n</tr>\n</table>\n<h2>The Infinite Loop</h2>\n<p>A loop becomes infinite loop if a condition never becomes false. The <b>for</b> loop is traditionally used for this purpose. Since none of the three expressions that form the \u2018for\u2019 loop are required, you can make an endless loop by leaving the conditional expression empty.</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n \nint main () {\n   for( ; ; ) {\n      printf(\"This loop will run forever.\\n\");\n   }\n\n   return 0;\n}\n</pre>\n<p>When the conditional expression is absent, it is assumed to be true. You may have an initialization and increment expression, but C++ programmers more commonly use the \u2018for (;;)\u2019 construct to signify an infinite loop.</p>\n<p><b>NOTE</b> \u2212 You can terminate an infinite loop by pressing Ctrl + C keys.</p>\n<h1>C++ decision making statements</h1>\n<p>Decision making structures require that the programmer specify one or more conditions to be evaluated or tested by the program, along with a statement or statements to be executed if the condition is determined to be true, and optionally, other statements to be executed if the condition is determined to be false.</p>\n<p>Following is the general form of a typical decision making structure found in most of the programming languages \u2212</p>\n<img alt=\"C++ decision making\" src=\"/cplusplus/images/cpp_decision_making.jpg\"/>\n<p>C++ programming language provides following types of decision making statements.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Statement &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><a href=\"/cplusplus/cpp_if_statement.htm\" title=\"C++ if statement\">if statement</a>\n<p>An \u2018if\u2019 statement consists of a boolean expression followed by one or more statements.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><a href=\"/cplusplus/cpp_if_else_statement.htm\" title=\"C++ if...else statement\">if...else statement</a>\n<p>An \u2018if\u2019 statement can be followed by an optional \u2018else\u2019 statement, which executes when the boolean expression is false.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><a href=\"/cplusplus/cpp_switch_statement.htm\" title=\"C++ switch statement\">switch statement</a>\n<p>A \u2018switch\u2019 statement allows a variable to be tested for equality against a list of values.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><a href=\"/cplusplus/cpp_nested_if.htm\" title=\"C++ nested if statements\">nested if statements</a>\n<p>You can use one \u2018if\u2019 or \u2018else if\u2019 statement inside another \u2018if\u2019 or \u2018else if\u2019 statement(s).</p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><a href=\"/cplusplus/cpp_nested_switch.htm\" title=\"C++ nested switch statements\">nested switch statements</a>\n<p>You can use one \u2018switch\u2019 statement inside another \u2018switch\u2019 statement(s).</p></td>\n</tr>\n</table>\n<h2>The ? : Operator</h2>\n<p>We have covered <a href=\"/cplusplus/cpp_conditional_operator.htm\">conditional operator \u201c? :\u201d</a> in previous chapter which can be used to replace <b>if...else</b> statements. It has the following general form \u2212</p>\n<pre class=\"result notranslate\">\nExp1 ? Exp2 : Exp3;\n</pre>\n<p>Exp1, Exp2, and Exp3 are expressions. Notice the use and placement of the colon.</p>\n<p>The value of a \u2018?\u2019 expression is determined like this: Exp1 is evaluated. If it is true, then Exp2 is evaluated and becomes the value of the entire \u2018?\u2019 expression. If Exp1 is false, then Exp3 is evaluated and its value becomes the value of the expression.</p>\n<h1>C++ Functions</h1>\n<p>A function is a group of statements that together perform a task. Every C++ program has at least one function, which is <b>main()</b>, and all the most trivial programs can define additional functions.</p>\n<p>You can divide up your code into separate functions. How you divide up your code among different functions is up to you, but logically the division usually is such that each function performs a specific task.</p>\n<p>A function <b>declaration</b> tells the compiler about a function's name, return type, and parameters. A function <b>definition</b> provides the actual body of the function.</p>\n<p>The C++ standard library provides numerous built-in functions that your program can call. For example, function <b>strcat()</b> to concatenate two strings, function <b>memcpy()</b> to copy one memory location to another location and many more functions.</p>\n<p>A function is known with various names like a method or a sub-routine or a procedure etc.</p>\n<h2>Defining a Function</h2>\n<p>The general form of a C++ function definition is as follows \u2212</p>\n<pre class=\"result notranslate\">\nreturn_type function_name( parameter list ) {\n   body of the function\n}\n</pre>\n<p>A C++ function definition consists of a function header and a function body. Here are all the parts of a function \u2212</p>\n<ul class=\"list\">\n<li><p><b>Return Type</b> \u2212 A function may return a value. The <b>return_type</b> is the data type of the value the function returns. Some functions perform the desired operations without returning a value. In this case, the return_type is the keyword <b>void</b>.</p></li>\n<li><p><b>Function Name</b> \u2212 This is the actual name of the function. The function name and the parameter list together constitute the function signature.</p></li>\n<li><p><b>Parameters</b> \u2212 A parameter is like a placeholder. When a function is invoked, you pass a value to the parameter. This value is referred to as actual parameter or argument. The parameter list refers to the type, order, and number of the parameters of a function. Parameters are optional; that is, a function may contain no parameters.</p></li>\n<li><p><b>Function Body</b> \u2212 The function body contains a collection of statements that define what the function does.</p></li>\n</ul>\n<h2>Example</h2>\n<p>Following is the source code for a function called <b>max()</b>. This function takes two parameters num1 and num2 and return the biggest of both \u2212</p>\n<pre class=\"result notranslate\">\n// function returning the max between two numbers\n \nint max(int num1, int num2) {\n   // local variable declaration\n   int result;\n \n   if (num1 &gt; num2)\n      result = num1;\n   else\n      result = num2;\n \n   return result; \n}\n</pre>\n<h2>Function Declarations</h2>\n<p>A function <b>declaration</b> tells the compiler about a function name and how to call the function. The actual body of the function can be defined separately.</p>\n<p>A function declaration has the following parts \u2212</p>\n<pre class=\"result notranslate\">\nreturn_type function_name( parameter list );\n</pre>\n<p>For the above defined function max(), following is the function declaration \u2212</p>\n<pre class=\"result notranslate\">\nint max(int num1, int num2);\n</pre>\n<p>Parameter names are not important in function declaration only their type is required, so following is also valid declaration \u2212</p>\n<pre class=\"result notranslate\">\nint max(int, int);\n</pre>\n<p>Function declaration is required when you define a function in one source file and you call that function in another file. In such case, you should declare the function at the top of the file calling the function.</p>\n<h2>Calling a Function</h2>\n<p>While creating a C++ function, you give a definition of what the function has to do. To use a function, you will have to call or invoke that function.</p>\n<p>When a program calls a function, program control is transferred to the called function. A called function performs defined task and when it\u2019s return statement is executed or when its function-ending closing brace is reached, it returns program control back to the main program.</p>\n<p>To call a function, you simply need to pass the required parameters along with function name, and if function returns a value, then you can store returned value. For example \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/XuXfLz\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n \n// function declaration\nint max(int num1, int num2);\n \nint main () {\n   // local variable declaration:\n   int a = 100;\n   int b = 200;\n   int ret;\n \n   // calling a function to get max value.\n   ret = max(a, b);\n   cout &lt;&lt; \"Max value is : \" &lt;&lt; ret &lt;&lt; endl;\n \n   return 0;\n}\n \n// function returning the max between two numbers\nint max(int num1, int num2) {\n   // local variable declaration\n   int result;\n \n   if (num1 &gt; num2)\n      result = num1;\n   else\n      result = num2;\n \n   return result; \n}\n</pre>\n<p>I kept max() function along with main() function and compiled the source code. While running final executable, it would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nMax value is : 200\n</pre>\n<h2>Function Arguments</h2>\n<p>If a function is to use arguments, it must declare variables that accept the values of the arguments. These variables are called the <b>formal parameters</b> of the function.</p>\n<p>The formal parameters behave like other local variables inside the function and are created upon entry into the function and destroyed upon exit.</p>\n<p>While calling a function, there are two ways that arguments can be passed to a function \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Call Type &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><a href=\"/cplusplus/cpp_function_call_by_value.htm\" title=\"C++ function call by value\">Call by Value</a>\n<p>This method copies the actual value of an argument into the formal parameter of the function. In this case, changes made to the parameter inside the function have no effect on the argument.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><a href=\"/cplusplus/cpp_function_call_by_pointer.htm\" title=\"C++ function call by pointer\">Call by Pointer</a>\n<p>This method copies the address of an argument into the formal parameter. Inside the function, the address is used to access the actual argument used in the call. This means that changes made to the parameter affect the argument.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><a href=\"/cplusplus/cpp_function_call_by_reference.htm\" title=\"C++ function call by reference\">Call by Reference</a>\n<p>This method copies the reference of an argument into the formal parameter. Inside the function, the reference is used to access the actual argument used in the call. This means that changes made to the parameter affect the argument.</p></td>\n</tr>\n</table>\n<p>By default, C++ uses <b>call by value</b> to pass arguments. In general, this means that code within a function cannot alter the arguments used to call the function and above mentioned example while calling max() function used the same method.</p>\n<h2>Default Values for Parameters</h2>\n<p>When you define a function, you can specify a default value for each of the last parameters. This value will be used if the corresponding argument is left blank when calling to the function.</p>\n<p>This is done by using the assignment operator and assigning values for the arguments in the function definition. If a value for that parameter is not passed when the function is called, the default given value is used, but if a value is specified, this default value is ignored and the passed value is used instead. Consider the following example \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/KoJLUN\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n \nint sum(int a, int b = 20) {\n   int result;\n   result = a + b;\n  \n   return (result);\n}\nint main () {\n   // local variable declaration:\n   int a = 100;\n   int b = 200;\n   int result;\n \n   // calling a function to add the values.\n   result = sum(a, b);\n   cout &lt;&lt; \"Total value is :\" &lt;&lt; result &lt;&lt; endl;\n\n   // calling a function again as follows.\n   result = sum(a);\n   cout &lt;&lt; \"Total value is :\" &lt;&lt; result &lt;&lt; endl;\n \n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nTotal value is :300\nTotal value is :120\n</pre>\n<h1>Numbers in C++</h1>\n<p>Normally, when we work with Numbers, we use primitive data types such as int, short, long, float and double, etc. The number data types, their possible values and number ranges have been explained while discussing C++ Data Types.</p>\n<h2>Defining Numbers in C++</h2>\n<p>You have already defined numbers in various examples given in previous chapters. Here is another consolidated example to define various types of numbers in C++ \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/Q21eQX\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n \nint main () {\n   // number definition:\n   short  s;\n   int    i;\n   long   l;\n   float  f;\n   double d;\n   \n   // number assignments;\n   s = 10;      \n   i = 1000;    \n   l = 1000000; \n   f = 230.47;  \n   d = 30949.374;\n   \n   // number printing;\n   cout &lt;&lt; \"short  s :\" &lt;&lt; s &lt;&lt; endl;\n   cout &lt;&lt; \"int    i :\" &lt;&lt; i &lt;&lt; endl;\n   cout &lt;&lt; \"long   l :\" &lt;&lt; l &lt;&lt; endl;\n   cout &lt;&lt; \"float  f :\" &lt;&lt; f &lt;&lt; endl;\n   cout &lt;&lt; \"double d :\" &lt;&lt; d &lt;&lt; endl;\n \n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nshort  s :10\nint    i :1000\nlong   l :1000000\nfloat  f :230.47\ndouble d :30949.4\n</pre>\n<h2>Math Operations in C++</h2>\n<p>In addition to the various functions you can create, C++ also includes some useful functions you can use. These functions are available in standard C and C++ libraries and called <b>built-in</b> functions. These are functions that can be included in your program and then use.</p>\n<p>C++ has a rich set of mathematical operations, which can be performed on various numbers. Following table lists down some useful built-in mathematical functions available in C++.</p>\n<p>To utilize these functions you need to include the math header file <b>&lt;cmath&gt;</b>.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Function &amp; Purpose</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>double cos(double);</b></p>\n<p>This function takes an angle (as a double) and returns the cosine.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>double sin(double);</b></p>\n<p>This function takes an angle (as a double) and returns the sine.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>double tan(double);</b></p>\n<p>This function takes an angle (as a double) and returns the tangent.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>double log(double);</b></p>\n<p>This function takes a number and returns the natural log of that number.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>double pow(double, double);</b></p>\n<p>The first is a number you wish to raise and the second is the power you wish to raise it t</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><p><b>double hypot(double, double);</b></p>\n<p>If you pass this function the length of two sides of a right triangle, it will return you the length of the hypotenuse.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">7</td>\n<td><p><b>double sqrt(double);</b></p>\n<p>You pass this function a number and it gives you the square root.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">8</td>\n<td><p><b>int abs(int);</b></p>\n<p>This function returns the absolute value of an integer that is passed to it.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">9</td>\n<td><p><b>double fabs(double);</b></p>\n<p>This function returns the absolute value of any decimal number passed to it.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">10</td>\n<td><p><b>double floor(double);</b></p>\n<p>Finds the integer which is less than or equal to the argument passed to it.</p>\n</td>\n</tr>\n</table>\n<p>Following is a simple example to show few of the mathematical operations \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/qU7JSv\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;cmath&gt;\nusing namespace std;\n \nint main () {\n   // number definition:\n   short  s = 10;\n   int    i = -1000;\n   long   l = 100000;\n   float  f = 230.47;\n   double d = 200.374;\n\n   // mathematical operations;\n   cout &lt;&lt; \"sin(d) :\" &lt;&lt; sin(d) &lt;&lt; endl;\n   cout &lt;&lt; \"abs(i)  :\" &lt;&lt; abs(i) &lt;&lt; endl;\n   cout &lt;&lt; \"floor(d) :\" &lt;&lt; floor(d) &lt;&lt; endl;\n   cout &lt;&lt; \"sqrt(f) :\" &lt;&lt; sqrt(f) &lt;&lt; endl;\n   cout &lt;&lt; \"pow( d, 2) :\" &lt;&lt; pow(d, 2) &lt;&lt; endl;\n \n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nsign(d)     :-0.634939\nabs(i)      :1000\nfloor(d)    :200\nsqrt(f)     :15.1812\npow( d, 2 ) :40149.7\n</pre>\n<h2>Random Numbers in C++</h2>\n<p>There are many cases where you will wish to generate a random number. There are actually two functions you will need to know about random number generation. The first is <b>rand()</b>, this function will only return a pseudo random number. The way to fix this is to first call the <b>srand()</b> function.</p>\n<p>Following is a simple example to generate few random numbers. This example makes use of <b>time()</b> function to get the number of seconds on your system time, to randomly seed the rand() function \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/Z1ZN0e\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;ctime&gt;\n#include &lt;cstdlib&gt;\n\nusing namespace std;\n \nint main () {\n   int i,j;\n \n   // set the seed\n   srand( (unsigned)time( NULL ) );\n\n   /* generate 10  random numbers. */\n   for( i = 0; i &lt; 10; i++ ) {\n      // generate actual random number\n      j = rand();\n      cout &lt;&lt;\" Random Number : \" &lt;&lt; j &lt;&lt; endl;\n   }\n\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nRandom Number : 1748144778\nRandom Number : 630873888\nRandom Number : 2134540646\nRandom Number : 219404170\nRandom Number : 902129458\nRandom Number : 920445370\nRandom Number : 1319072661\nRandom Number : 257938873\nRandom Number : 1256201101\nRandom Number : 580322989\n</pre>\n<h1>C++ Arrays</h1>\n<p>C++ provides a data structure, <b>the array</b>, which stores a fixed-size sequential collection of elements of the same type. An array is used to store a collection of data, but it is often more useful to think of an array as a collection of variables of the same type.</p>\n<p>Instead of declaring individual variables, such as number0, number1, ..., and number99, you declare one array variable such as numbers and use numbers[0], numbers[1], and ..., numbers[99] to represent individual variables. A specific element in an array is accessed by an index. </p>\n<p>All arrays consist of contiguous memory locations. The lowest address corresponds to the first element and the highest address to the last element.</p>\n<h2>Declaring Arrays</h2>\n<p>To declare an array in C++, the programmer specifies the type of the elements and the number of elements required by an array as follows \u2212</p>\n<pre class=\"result notranslate\">\ntype arrayName [ arraySize ];\n</pre>\n<p>This is called a single-dimension array. The <b>arraySize</b> must be an integer constant greater than zero and <b>type</b> can be any valid C++ data type. For example, to declare a 10-element array called balance of type double,\nuse this statement \u2212</p>\n<pre class=\"result notranslate\">\ndouble balance[10];\n</pre>\n<h2>Initializing Arrays</h2>\n<p>You can initialize C++ array elements either one by one or using a single statement as follows \u2212</p>\n<pre class=\"result notranslate\">\ndouble balance[5] = {1000.0, 2.0, 3.4, 17.0, 50.0};\n</pre>\n<p>The number of values between braces { } can not be larger than the number of elements that we declare for the array between square brackets [ ]. Following is an example to assign a single element of the array \u2212</p>\n<p>If you omit the size of the array, an array just big enough to hold the initialization is created.  Therefore, if you write \u2212</p>\n<pre class=\"result notranslate\">\ndouble balance[] = {1000.0, 2.0, 3.4, 17.0, 50.0};\n</pre>\n<p>You will create exactly the same array as you did in the previous example.</p>\n<pre class=\"result notranslate\">\nbalance[4] = 50.0;\n</pre>\n<p>The above statement assigns element number 5<sup>th</sup> in the array a value of 50.0. Array with 4<sup>th</sup> index will be 5<sup>th</sup>, i.e., last element because all arrays have 0 as the index of their first element which is also called base index. Following is the pictorial representaion of the same array we discussed above \u2212</p>\n<img alt=\"Array Presentation\" src=\"/cplusplus/images/array_presentation.jpg\"/>\n<h2>Accessing Array Elements</h2>\n<p>An element is accessed by indexing the array name. This is done by placing the index of the element within square brackets after the name of the array. For example \u2212</p>\n<pre class=\"result notranslate\">\ndouble salary = balance[9];\n</pre>\n<p>The above statement will take 10<sup>th</sup> element from the array and assign the value to salary variable. Following is an example, which will use all the above-mentioned three concepts viz. declaration, assignment and accessing arrays \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/QRe4fY\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n \n#include &lt;iomanip&gt;\nusing std::setw;\n \nint main () {\n\n   int n[ 10 ]; // n is an array of 10 integers\n \n   // initialize elements of array n to 0          \n   for ( int i = 0; i &lt; 10; i++ ) {\n      n[ i ] = i + 100; // set element at location i to i + 100\n   }\n   cout &lt;&lt; \"Element\" &lt;&lt; setw( 13 ) &lt;&lt; \"Value\" &lt;&lt; endl;\n \n   // output each array element's value                      \n   for ( int j = 0; j &lt; 10; j++ ) {\n      cout &lt;&lt; setw( 7 )&lt;&lt; j &lt;&lt; setw( 13 ) &lt;&lt; n[ j ] &lt;&lt; endl;\n   }\n \n   return 0;\n}\n</pre>\n<p>This program makes use of <b>setw()</b> function to format the output. When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nElement        Value\n      0          100\n      1          101\n      2          102\n      3          103\n      4          104\n      5          105\n      6          106\n      7          107\n      8          108\n      9          109\n</pre>\n<h2>Arrays in C++</h2>\n<p>Arrays are important to C++ and should need lots of more detail. There are following few important concepts, which should be clear to a C++ programmer \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Concept &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><a href=\"/cplusplus/cpp_multi_dimensional_arrays.htm\" title=\"Multi-dimensional arrays in C++\">Multi-dimensional arrays</a>\n<p>C++ supports multidimensional arrays. The simplest form of the multidimensional array is the two-dimensional array.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><a href=\"/cplusplus/cpp_pointer_to_an_array.htm\" title=\"Pointer to an array in C++\">Pointer to an array</a>\n<p>You can generate a pointer to the first element of an array by simply specifying the array name, without any index.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><a href=\"/cplusplus/cpp_passing_arrays_to_functions.htm\" title=\"Passing arrays to functions as arguments in C++\">Passing arrays to functions</a>\n<p>You can pass to the function a pointer to an array by specifying the array's name without an index.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><a href=\"/cplusplus/cpp_return_arrays_from_functions.htm\" title=\"Return array from functions in C++\">Return array from functions</a>\n<p>C++ allows a function to return an array.</p></td>\n</tr>\n</table>\n<h1>C++ Strings</h1>\n<p>C++ provides following two types of string representations \u2212</p>\n<ul class=\"list\">\n<li>The C-style character string.</li>\n<li>The string class type introduced with Standard C++.</li>\n</ul>\n<h2>The C-Style Character String</h2>\n<p>The C-style character string originated within the C language and continues to be supported within C++.  This string is actually a one-dimensional array of characters which is terminated by a <b>null</b> character '\\0'. Thus a null-terminated string contains the characters that comprise the string followed by a <b>null</b>.</p>\n<p>The following declaration and initialization create a string consisting of the word \"Hello\". To hold the null character at the end of the array, the size of the character array containing the string is one more than the number of characters in the word \"Hello.\"</p>\n<pre class=\"result notranlate\">\nchar greeting[6] = {'H', 'e', 'l', 'l', 'o', '\\0'};\n</pre>\n<p>If you follow the rule  of array initialization, then you can write the above statement as follows \u2212</p>\n<pre class=\"result notranlate\">\nchar greeting[] = \"Hello\";\n</pre>\n<p>Following is the memory presentation of above defined string in C/C++ \u2212</p>\n<img alt=\"String Presentation in C/C++\" src=\"/cplusplus/images/string_representation.jpg\"/>\n<p>Actually, you do not place the null character at the end of a string constant. The C++ compiler automatically places the '\\0' at the end of the string when it initializes the array. Let us try to print above-mentioned string \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/OzjL2L\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranlate\">\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main () {\n\n   char greeting[6] = {'H', 'e', 'l', 'l', 'o', '\\0'};\n\n   cout &lt;&lt; \"Greeting message: \";\n   cout &lt;&lt; greeting &lt;&lt; endl;\n\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranlate\">\nGreeting message: Hello\n</pre>\n<p>C++ supports a wide range of functions that manipulate null-terminated strings \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Function &amp; Purpose</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>strcpy(s1, s2);</b></p>\n<p>Copies string s2 into string s1.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>strcat(s1, s2);</b></p>\n<p>Concatenates string s2 onto the end of string s1.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>strlen(s1);</b></p>\n<p>Returns the length of string s1.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>strcmp(s1, s2);</b></p>\n<p>Returns 0 if s1 and s2 are the same; less than 0 if s1&lt;s2; greater than 0 if s1&gt;s2.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>strchr(s1, ch);</b></p>\n<p>Returns a pointer to the first occurrence of character ch in string s1.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><p><b>strstr(s1, s2);</b></p>\n<p>Returns a pointer to the first occurrence of string s2 in string s1.</p>\n</td>\n</tr>\n</table>\n<p>Following example makes use of few of the above-mentioned functions \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/oA6mP3\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranlate\">\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n\nusing namespace std;\n\nint main () {\n\n   char str1[10] = \"Hello\";\n   char str2[10] = \"World\";\n   char str3[10];\n   int  len ;\n\n   // copy str1 into str3\n   strcpy( str3, str1);\n   cout &lt;&lt; \"strcpy( str3, str1) : \" &lt;&lt; str3 &lt;&lt; endl;\n\n   // concatenates str1 and str2\n   strcat( str1, str2);\n   cout &lt;&lt; \"strcat( str1, str2): \" &lt;&lt; str1 &lt;&lt; endl;\n\n   // total lenghth of str1 after concatenation\n   len = strlen(str1);\n   cout &lt;&lt; \"strlen(str1) : \" &lt;&lt; len &lt;&lt; endl;\n\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces result something as follows \u2212</p>\n<pre class=\"result notranlate\">\nstrcpy( str3, str1) : Hello\nstrcat( str1, str2): HelloWorld\nstrlen(str1) : 10\n</pre>\n<h2>The String Class in C++</h2>\n<p>The standard C++ library provides a <b>string</b> class type that supports all the operations mentioned above, additionally much more functionality. Let us check the following example \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/upuWFC\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranlate\">\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main () {\n\n   string str1 = \"Hello\";\n   string str2 = \"World\";\n   string str3;\n   int  len ;\n\n   // copy str1 into str3\n   str3 = str1;\n   cout &lt;&lt; \"str3 : \" &lt;&lt; str3 &lt;&lt; endl;\n\n   // concatenates str1 and str2\n   str3 = str1 + str2;\n   cout &lt;&lt; \"str1 + str2 : \" &lt;&lt; str3 &lt;&lt; endl;\n\n   // total length of str3 after concatenation\n   len = str3.size();\n   cout &lt;&lt; \"str3.size() :  \" &lt;&lt; len &lt;&lt; endl;\n\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces result something as follows \u2212</p>\n<pre class=\"result notranlate\">\nstr3 : Hello\nstr1 + str2 : HelloWorld\nstr3.size() :  10\n</pre>\n<h1>C++ Pointers</h1>\n<p>C++ pointers are easy and fun to learn. Some C++ tasks are performed more easily with pointers, and other C++ tasks, such as dynamic memory allocation, cannot be performed without them.</p>\n<p>As you know every variable is a memory location and every memory location has its address defined which can be accessed using ampersand (&amp;) operator which denotes an address in memory. Consider the following which will print the address of the variables defined \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/fQ1InE\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n\nusing namespace std;\nint main () {\n   int  var1;\n   char var2[10];\n\n   cout &lt;&lt; \"Address of var1 variable: \";\n   cout &lt;&lt; &amp;var1 &lt;&lt; endl;\n\n   cout &lt;&lt; \"Address of var2 variable: \";\n   cout &lt;&lt; &amp;var2 &lt;&lt; endl;\n\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nAddress of var1 variable: 0xbfebd5c0\nAddress of var2 variable: 0xbfebd5b6\n</pre>\n<h2>What are Pointers?</h2>\n<p>A <b>pointer</b> is a variable whose value is the address of another variable. Like any variable or constant, you must declare a pointer before you can work with it. The general form of a pointer variable declaration is \u2212</p>\n<pre class=\"result notranslate\">\ntype *var-name;\n</pre>\n<p>Here, <b>type</b> is the pointer's base type; it must be a valid C++ type and <b>var-name</b> is the name of the pointer variable. The asterisk you used to declare a pointer is the same asterisk that you use for multiplication. However, in this statement the asterisk is being used to designate a variable as a pointer. Following are the valid pointer declaration \u2212</p>\n<pre class=\"result notranslate\">\nint    *ip;    // pointer to an integer\ndouble *dp;    // pointer to a double\nfloat  *fp;    // pointer to a float\nchar   *ch     // pointer to character\n</pre>\n<p>The actual data type of the value of all pointers, whether integer, float, character, or otherwise, is the same, a long hexadecimal number that represents a memory address. The only difference between pointers of different data types is the data type of the variable or constant that the pointer points to.</p>\n<h2>Using Pointers in C++</h2>\n<p>There are few important operations, which we will do with the pointers very frequently. <b>(a)</b> We define a pointer variable. <b>(b)</b> Assign the address of a variable to a pointer. <b>(c)</b> Finally access the value at the address available in the pointer variable. This is done by using unary operator * that returns the value of the variable located at the address specified by its operand. Following example makes use of these operations \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/gTdFv7\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main () {\n   int  var = 20;   // actual variable declaration.\n   int  *ip;        // pointer variable \n\n   ip = &amp;var;       // store address of var in pointer variable\n\n   cout &lt;&lt; \"Value of var variable: \";\n   cout &lt;&lt; var &lt;&lt; endl;\n\n   // print the address stored in ip pointer variable\n   cout &lt;&lt; \"Address stored in ip variable: \";\n   cout &lt;&lt; ip &lt;&lt; endl;\n\n   // access the value at the address available in pointer\n   cout &lt;&lt; \"Value of *ip variable: \";\n   cout &lt;&lt; *ip &lt;&lt; endl;\n\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces result something as follows \u2212</p>\n<pre class=\"result notranslate\">\nValue of var variable: 20\nAddress stored in ip variable: 0xbfc601ac\nValue of *ip variable: 20\n</pre>\n<h2>Pointers in C++</h2>\n<p>Pointers have many but easy concepts and they are very important to C++ programming. There are following few important pointer concepts which should be clear to a C++ programmer \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:Center;\">Concept &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><a href=\"/cplusplus/cpp_null_pointers.htm\" title=\"C++ Null Pointers\">Null Pointers</a>\n<p>C++ supports null pointer, which is a constant with a value of zero defined in several standard libraries.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><a href=\"/cplusplus/cpp_pointer_arithmatic.htm\" title=\"C++ Pointer Arithmetic\">Pointer Arithmetic</a>\n<p>There are four arithmetic operators that can be used on pointers: ++, --, +, -</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><a href=\"/cplusplus/cpp_pointers_vs_arrays.htm\" title=\"C++ Pointers vs Arrays\">Pointers vs Arrays</a>\n<p>There is a close relationship between pointers and arrays.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><a href=\"/cplusplus/cpp_array_of_pointers.htm\" title=\"C++ Array of Pointers\">Array of Pointers</a>\n<p>You can define arrays to hold a number of pointers.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><a href=\"/cplusplus/cpp_pointer_to_pointer.htm\" title=\"C++ Pointer to Pointer Operators\">Pointer to Pointer</a>\n<p>C++ allows you to have pointer on a pointer and so on.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><a href=\"/cplusplus/cpp_passing_pointers_to_functions.htm\" title=\"Passing Pointers to Functions in C++\">Passing Pointers to Functions</a>\n<p>Passing an argument by reference or by address both enable the passed argument to be changed in the calling function by the called function.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">7</td>\n<td><a href=\"/cplusplus/cpp_return_pointer_from_functions.htm\" title=\"Return Pointer from Functions in C++\">Return Pointer from Functions</a>\n<p>C++ allows a function to return a pointer to local variable, static variable and dynamically allocated memory as well.</p></td>\n</tr>\n</table>\n<h1>C++ References</h1>\n<p>A reference variable is an alias, that is, another name for an already existing variable. Once a reference is initialized with a variable, either the variable name or the reference name may be used to refer to the variable.</p>\n<h2>References vs Pointers</h2>\n<p>References are often confused with pointers but three major differences between references and pointers are \u2212</p>\n<ul class=\"list\">\n<li><p>You cannot have NULL references. You must always be able to assume that a reference is connected to a legitimate piece of storage.</p></li>\n<li><p>Once a reference is initialized to an object, it cannot be changed to refer to another object. Pointers can be pointed to another object at any time.</p></li>\n<li><p>A reference must be initialized when it is created. Pointers can be initialized at any time.</p></li>\n</ul>\n<h2>Creating References in C++</h2>\n<p>Think of a variable name as a label attached to the variable's location in memory. You can then think of a reference as a second label attached to that memory location. Therefore, you can access the contents of the variable through either the original variable name or the reference. For example, suppose we have the following example \u2212</p>\n<pre class=\"result notranslate\">\nint i = 17;\n</pre>\n<p>We can declare reference variables for i as follows.</p>\n<pre class=\"result notranslate\">\nint&amp; r = i;\n</pre>\n<p>Read the &amp; in these declarations as <b>reference</b>. Thus, read the first declaration as \"r is an integer reference initialized to i\" and read the second declaration as \"s is a double reference initialized to d.\". Following example makes use of references on int and double \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/SS8zU0\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n \nusing namespace std;\n \nint main () {\n   // declare simple variables\n   int    i;\n   double d;\n \n   // declare reference variables\n   int&amp;    r = i;\n   double&amp; s = d;\n   \n   i = 5;\n   cout &lt;&lt; \"Value of i : \" &lt;&lt; i &lt;&lt; endl;\n   cout &lt;&lt; \"Value of i reference : \" &lt;&lt; r  &lt;&lt; endl;\n \n   d = 11.7;\n   cout &lt;&lt; \"Value of d : \" &lt;&lt; d &lt;&lt; endl;\n   cout &lt;&lt; \"Value of d reference : \" &lt;&lt; s  &lt;&lt; endl;\n   \n   return 0;\n}\n</pre>\n<p>When the above code is compiled together and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nValue of i : 5\nValue of i reference : 5\nValue of d : 11.7\nValue of d reference : 11.7\n</pre>\n<p>References are usually used for function argument lists and function return values. So following are two important subjects related to C++ references which should be clear to a C++ programmer \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Concept &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><a href=\"/cplusplus/passing_parameters_by_references.htm\" title=\"Passing parameters by references in C++\">References as Parameters</a>\n<p>C++ supports passing references as function parameter more safely than parameters.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><a href=\"/cplusplus/returning_values_by_reference.htm\" title=\"Returning values by reference in C++\">Reference as Return Value</a>\n<p>You can return reference from a C++ function like any other data type.</p></td>\n</tr>\n</table>\n<h1>C++ Date and Time</h1>\n<p>The C++ standard library does not provide a proper date type. C++ inherits the structs and functions for date and time manipulation from C. To access date and time related functions and structures, you would need to include &lt;ctime&gt; header file in your C++ program.</p>\n<p>There are four time-related types: <b>clock_t, time_t, size_t</b>, and <b>tm</b>. The types - clock_t, size_t and time_t are capable of representing the system time and date as some sort of integer.</p>\n<p>The structure type <b>tm</b> holds the date and time in the form of a C structure having the following elements \u2212</p>\n<pre class=\"result notranslate\">\nstruct tm {\n   int tm_sec;   // seconds of minutes from 0 to 61\n   int tm_min;   // minutes of hour from 0 to 59\n   int tm_hour;  // hours of day from 0 to 24\n   int tm_mday;  // day of month from 1 to 31\n   int tm_mon;   // month of year from 0 to 11\n   int tm_year;  // year since 1900\n   int tm_wday;  // days since sunday\n   int tm_yday;  // days since January 1st\n   int tm_isdst; // hours of daylight savings time\n}\n</pre>\n<p>Following are the important functions, which we use while working with date and time in C or C++. All these functions are part of standard C and C++ library and you can check their detail using reference to C++ standard library given below.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Function &amp; Purpose</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>time_t time(time_t *time);</b></p>\n<p>This returns the current calendar time of the system in number of seconds elapsed since January 1, 1970. If the system has no time, .1 is returned.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>char *ctime(const time_t *time);</b></p>\n<p>This returns a pointer to a string of the form <i>day month year hours:minutes:seconds year\\n\\0</i>.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>struct tm *localtime(const time_t *time);</b></p>\n<p>This returns a pointer to the <b>tm</b> structure representing local time.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>clock_t clock(void);</b></p>\n<p>This returns a value that approximates the amount of time the calling program has been running. A value of .1 is returned if the time is not available.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>char * asctime ( const struct tm * time );</b></p>\n<p>This returns a pointer to a string that contains the information stored in the structure pointed to by time converted into the form: day month date hours:minutes:seconds year\\n\\0</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><p><b>struct tm *gmtime(const time_t *time);</b></p>\n<p>This returns a pointer to the time in the form of a tm structure. The time is represented in Coordinated Universal Time (UTC), which is essentially Greenwich Mean Time (GMT).</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">7</td>\n<td><p><b>time_t mktime(struct tm *time);</b></p>\n<p>This returns the calendar-time equivalent of the time found in the structure pointed to by time.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">8</td>\n<td><p><b>double difftime ( time_t time2, time_t time1 );</b></p>\n<p>This function calculates the difference in seconds between time1 and time2.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">9</td>\n<td><p><b>size_t strftime();</b></p>\n<p>This function can be used to format date and time in a specific format.</p>\n</td>\n</tr>\n</table>\n<h2>Current Date and Time</h2>\n<p>Suppose you want to retrieve the current system date and time, either as a local time or as a Coordinated Universal Time (UTC). Following is the example to achieve the same \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/DHKMA9\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;ctime&gt;\n\nusing namespace std;\n\nint main() {\n   // current date/time based on current system\n   time_t now = time(0);\n   \n   // convert now to string form\n   char* dt = ctime(&amp;now);\n\n   cout &lt;&lt; \"The local date and time is: \" &lt;&lt; dt &lt;&lt; endl;\n\n   // convert now to tm struct for UTC\n   tm *gmtm = gmtime(&amp;now);\n   dt = asctime(gmtm);\n   cout &lt;&lt; \"The UTC date and time is:\"&lt;&lt; dt &lt;&lt; endl;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nThe local date and time is: Sat Jan  8 20:07:41 2011\n\nThe UTC date and time is:Sun Jan  9 03:07:41 2011\n</pre>\n<h2>Format Time using struct tm</h2>\n<p>The <b>tm</b> structure is very important while working with date and time in either C or C++. This structure holds the date and time in the form of a C structure as mentioned above. Most of the time related functions makes use of tm structure. Following is an example which makes use of various date and time related functions and tm structure \u2212</p>\n<p>While using structure in this chapter, I'm making an assumption that you have basic understanding on C structure and how to access structure members using arrow -&gt; operator.</p>\n<a class=\"demo\" href=\"http://tpcg.io/SMnO0N\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;ctime&gt;\n\nusing namespace std;\n\nint main() {\n   // current date/time based on current system\n   time_t now = time(0);\n\n   cout &lt;&lt; \"Number of sec since January 1,1970:\" &lt;&lt; now &lt;&lt; endl;\n\n   tm *ltm = localtime(&amp;now);\n\n   // print various components of tm structure.\n   cout &lt;&lt; \"Year\" &lt;&lt; 1970 + ltm-&gt;tm_year&lt;&lt;endl;\n   cout &lt;&lt; \"Month: \"&lt;&lt; 1 + ltm-&gt;tm_mon&lt;&lt; endl;\n   cout &lt;&lt; \"Day: \"&lt;&lt;  ltm-&gt;tm_mday &lt;&lt; endl;\n   cout &lt;&lt; \"Time: \"&lt;&lt; 1 + ltm-&gt;tm_hour &lt;&lt; \":\";\n   cout &lt;&lt; 1 + ltm-&gt;tm_min &lt;&lt; \":\";\n   cout &lt;&lt; 1 + ltm-&gt;tm_sec &lt;&lt; endl;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nNumber of sec since January 1, 1970:1294548238\nYear: 2011\nMonth: 1\nDay: 8\nTime: 22: 44:59\n</pre>\n<h1>C++ Basic Input/Output</h1>\n<p>The C++ standard libraries provide an extensive set of input/output capabilities which we will see in subsequent chapters. This chapter will discuss very basic and most common I/O operations required for C++ programming.</p>\n<p>C++ I/O occurs in streams, which are sequences of bytes.  If bytes flow from a device like a keyboard, a disk drive, or a network connection etc. to main memory, this is called <b>input operation</b> and if bytes flow from main memory to a device like a display screen, a printer, a disk drive, or a network connection, etc., this is called <b>output operation</b>.</p>\n<h2>I/O Library Header Files</h2>\n<p>There are following header files important to C++ programs \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Header File &amp; Function and Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>&lt;iostream&gt;</b></p>\n<p>This file defines the <b>cin, cout, cerr</b> and <b>clog</b> objects, which correspond to the standard input stream, the standard output stream, the un-buffered standard error stream and the buffered standard error stream, respectively.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>&lt;iomanip&gt;</b></p>\n<p>This file declares services useful for performing formatted I/O with so-called parameterized stream manipulators, such as <b>setw</b> and <b>setprecision</b>.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>&lt;fstream&gt;</b></p>\n<p>This file declares services for user-controlled file processing. We will discuss about it in detail in File and Stream related chapter.</p></td>\n</tr>\n</table>\n<h2>The Standard Output Stream (cout)</h2>\n<p>The predefined object <b>cout</b> is an instance of <b>ostream</b> class. The cout object is said to be \"connected to\" the standard output device, which usually is the display screen. The <b>cout</b> is used in conjunction with the stream insertion operator, which is written as &lt;&lt; which are two less than signs as shown in the following example.</p>\n<a class=\"demo\" href=\"http://tpcg.io/qFaiKd\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n \nusing namespace std;\n \nint main() {\n   char str[] = \"Hello C++\";\n \n   cout &lt;&lt; \"Value of str is : \" &lt;&lt; str &lt;&lt; endl;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nValue of str is : Hello C++\n</pre>\n<p>The C++ compiler also determines the data type of variable to be output and selects the appropriate stream insertion operator to display the value. The &lt;&lt; operator is overloaded to output data items of built-in types integer, float, double,  strings and pointer values.</p>\n<p>The insertion operator &lt;&lt; may be used more than once in a single statement as shown above and <b>endl</b> is used to add a new-line at the end of the line.</p>\n<h2>The Standard Input Stream (cin)</h2>\n<p>The predefined object <b>cin</b> is an instance of <b>istream</b> class. The cin object is said to be attached to the standard input  device, which usually is the keyboard. The <b>cin</b> is used in conjunction with the stream extraction operator, which is written as &gt;&gt; which are two greater than signs as shown in the following example.</p>\n<a class=\"demo\" href=\"http://tpcg.io/NDGHmy\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n \nusing namespace std;\n \nint main() {\n   char name[50];\n \n   cout &lt;&lt; \"Please enter your name: \";\n   cin &gt;&gt; name;\n   cout &lt;&lt; \"Your name is: \" &lt;&lt; name &lt;&lt; endl;\n \n}\n</pre>\n<p>When the above code is compiled and executed, it will prompt you to enter a name. You enter a value and then hit enter to see the following result \u2212</p>\n<pre class=\"result notranslate\">\nPlease enter your name: cplusplus\nYour name is: cplusplus\n</pre>\n<p>The C++ compiler also determines the data type of the entered value and selects the appropriate stream extraction operator to extract the value and store it in the given variables.</p>\n<p>The stream extraction operator &gt;&gt; may be used more than once in a single statement. To request more than one datum you can use the following \u2212</p>\n<pre class=\"result notranslate\">\ncin &gt;&gt; name &gt;&gt; age;\n</pre>\n<p>This will be equivalent to the following two statements \u2212</p>\n<pre class=\"result notranslate\">\ncin &gt;&gt; name;\ncin &gt;&gt; age;\n</pre>\n<h2>The Standard Error Stream (cerr)</h2>\n<p>The predefined object <b>cerr</b> is an instance of <b>ostream</b> class. The cerr object is said to be attached to the standard error device, which is also a display screen but the object <b>cerr</b> is un-buffered and each stream insertion to cerr causes its output to appear immediately.</p>\n<p>The <b>cerr</b> is also used in conjunction with the stream insertion operator as shown in the following example.</p>\n<a class=\"demo\" href=\"http://tpcg.io/3xp5lM\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n \nusing namespace std;\n \nint main() {\n   char str[] = \"Unable to read....\";\n \n   cerr &lt;&lt; \"Error message : \" &lt;&lt; str &lt;&lt; endl;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nError message : Unable to read....\n</pre>\n<h2>The Standard Log Stream (clog)</h2>\n<p>The predefined object <b>clog</b> is an instance of <b>ostream</b> class. The clog object is said to be attached to the standard error device, which is also a display screen but the object <b>clog</b> is buffered. This means that each insertion to clog could cause its output to be held in a buffer until the buffer is filled or until the buffer is flushed.</p>\n<p>The <b>clog</b> is also used in conjunction with the stream insertion operator as shown in the following example.</p>\n<a class=\"demo\" href=\"http://tpcg.io/Dewejb\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n \nusing namespace std;\n \nint main() {\n   char str[] = \"Unable to read....\";\n \n   clog &lt;&lt; \"Error message : \" &lt;&lt; str &lt;&lt; endl;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nError message : Unable to read....\n</pre>\n<p>You would not be able to see any difference in cout, cerr and clog with these small examples, but while writing and executing big programs the difference becomes obvious. So it is good practice to display error messages using cerr stream and while displaying other log messages then clog should be used.</p>\n<h1>C++ Data Structures</h1>\n<p>C/C++ arrays allow you to define variables that combine several data items of the same kind, but <b>structure</b> is another user defined data type which allows you to combine data items of different kinds.</p>\n<p>Structures are used to represent a record, suppose you want to keep track of your books in a library. You might want to track the following attributes about each book \u2212</p>\n<ul class=\"list\">\n<li>Title</li>\n<li>Author</li>\n<li>Subject</li>\n<li>Book ID</li>\n</ul>\n<h2>Defining a Structure</h2>\n<p>To define a structure, you must use the struct statement. The struct statement defines a new data type, with more than one member, for your program. The format of the struct statement is this \u2212</p>\n<pre class=\"result notranslate\">\nstruct [structure tag] {\n   member definition;\n   member definition;\n   ...\n   member definition;\n} [one or more structure variables];  \n</pre>\n<p>The <b>structure tag</b> is optional and each member definition is a normal variable definition, such as int i; or float f; or any other valid variable definition. At the end of the structure's definition, before the final semicolon, you can specify one or more structure variables but it is optional. Here is the way you would declare the Book structure \u2212</p>\n<pre class=\"result notranslate\">\nstruct Books {\n   char  title[50];\n   char  author[50];\n   char  subject[100];\n   int   book_id;\n} book;  \n</pre>\n<h2>Accessing Structure Members</h2>\n<p>To access any member of a structure, we use the <b>member access operator (.)</b>. The member access operator is coded as a period between the structure variable name and the structure member that we wish to access. You would use <b>struct</b> keyword to define variables of structure type. Following is the example to explain usage of structure \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/zvIEi0\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n \nusing namespace std;\n \nstruct Books {\n   char  title[50];\n   char  author[50];\n   char  subject[100];\n   int   book_id;\n};\n \nint main() {\n   struct Books Book1;        // Declare Book1 of type Book\n   struct Books Book2;        // Declare Book2 of type Book\n \n   // book 1 specification\n   strcpy( Book1.title, \"Learn C++ Programming\");\n   strcpy( Book1.author, \"Chand Miyan\"); \n   strcpy( Book1.subject, \"C++ Programming\");\n   Book1.book_id = 6495407;\n\n   // book 2 specification\n   strcpy( Book2.title, \"Telecom Billing\");\n   strcpy( Book2.author, \"Yakit Singha\");\n   strcpy( Book2.subject, \"Telecom\");\n   Book2.book_id = 6495700;\n \n   // Print Book1 info\n   cout &lt;&lt; \"Book 1 title : \" &lt;&lt; Book1.title &lt;&lt;endl;\n   cout &lt;&lt; \"Book 1 author : \" &lt;&lt; Book1.author &lt;&lt;endl;\n   cout &lt;&lt; \"Book 1 subject : \" &lt;&lt; Book1.subject &lt;&lt;endl;\n   cout &lt;&lt; \"Book 1 id : \" &lt;&lt; Book1.book_id &lt;&lt;endl;\n\n   // Print Book2 info\n   cout &lt;&lt; \"Book 2 title : \" &lt;&lt; Book2.title &lt;&lt;endl;\n   cout &lt;&lt; \"Book 2 author : \" &lt;&lt; Book2.author &lt;&lt;endl;\n   cout &lt;&lt; \"Book 2 subject : \" &lt;&lt; Book2.subject &lt;&lt;endl;\n   cout &lt;&lt; \"Book 2 id : \" &lt;&lt; Book2.book_id &lt;&lt;endl;\n\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nBook 1 title : Learn C++ Programming\nBook 1 author : Chand Miyan\nBook 1 subject : C++ Programming\nBook 1 id : 6495407\nBook 2 title : Telecom Billing\nBook 2 author : Yakit Singha\nBook 2 subject : Telecom\nBook 2 id : 6495700\n</pre>\n<h2>Structures as Function Arguments</h2>\n<p>You can pass a structure as a function argument in very similar way as you pass any other variable or pointer. You would access structure variables in the similar way as you have accessed in the above example \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/xvb7BQ\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n \nusing namespace std;\nvoid printBook( struct Books book );\n\nstruct Books {\n   char  title[50];\n   char  author[50];\n   char  subject[100];\n   int   book_id;\n};\n \nint main() {\n   struct Books Book1;        // Declare Book1 of type Book\n   struct Books Book2;        // Declare Book2 of type Book\n \n   // book 1 specification\n   strcpy( Book1.title, \"Learn C++ Programming\");\n   strcpy( Book1.author, \"Chand Miyan\"); \n   strcpy( Book1.subject, \"C++ Programming\");\n   Book1.book_id = 6495407;\n\n   // book 2 specification\n   strcpy( Book2.title, \"Telecom Billing\");\n   strcpy( Book2.author, \"Yakit Singha\");\n   strcpy( Book2.subject, \"Telecom\");\n   Book2.book_id = 6495700;\n \n   // Print Book1 info\n   printBook( Book1 );\n\n   // Print Book2 info\n   printBook( Book2 );\n\n   return 0;\n}\nvoid printBook( struct Books book ) {\n   cout &lt;&lt; \"Book title : \" &lt;&lt; book.title &lt;&lt;endl;\n   cout &lt;&lt; \"Book author : \" &lt;&lt; book.author &lt;&lt;endl;\n   cout &lt;&lt; \"Book subject : \" &lt;&lt; book.subject &lt;&lt;endl;\n   cout &lt;&lt; \"Book id : \" &lt;&lt; book.book_id &lt;&lt;endl;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nBook title : Learn C++ Programming\nBook author : Chand Miyan\nBook subject : C++ Programming\nBook id : 6495407\nBook title : Telecom Billing\nBook author : Yakit Singha\nBook subject : Telecom\nBook id : 6495700\n</pre>\n<h2>Pointers to Structures</h2>\n<p>You can define pointers to structures in very similar way as you define pointer to any other variable as follows \u2212</p>\n<pre class=\"result notranslate\">\nstruct Books *struct_pointer;\n</pre>\n<p>Now, you can store the address of a structure variable in the above defined pointer variable. To find the address of a structure variable, place the &amp; operator before the structure's name as follows \u2212</p>\n<pre class=\"result notranslate\">\nstruct_pointer = &amp;Book1;\n</pre>\n<p>To access the members of a structure using a pointer to that structure, you must use the -&gt; operator as follows \u2212</p>\n<pre class=\"result notranslate\">\nstruct_pointer-&gt;title;\n</pre>\n<p>Let us re-write above example using structure pointer, hope this will be easy for you to understand the concept \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/P8IeUE\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n \nusing namespace std;\nvoid printBook( struct Books *book );\n\nstruct Books {\n   char  title[50];\n   char  author[50];\n   char  subject[100];\n   int   book_id;\n};\nint main() {\n   struct Books Book1;        // Declare Book1 of type Book\n   struct Books Book2;        // Declare Book2 of type Book\n \n   // Book 1 specification\n   strcpy( Book1.title, \"Learn C++ Programming\");\n   strcpy( Book1.author, \"Chand Miyan\"); \n   strcpy( Book1.subject, \"C++ Programming\");\n   Book1.book_id = 6495407;\n\n   // Book 2 specification\n   strcpy( Book2.title, \"Telecom Billing\");\n   strcpy( Book2.author, \"Yakit Singha\");\n   strcpy( Book2.subject, \"Telecom\");\n   Book2.book_id = 6495700;\n \n   // Print Book1 info, passing address of structure\n   printBook( &amp;Book1 );\n\n   // Print Book1 info, passing address of structure\n   printBook( &amp;Book2 );\n\n   return 0;\n}\n\n// This function accept pointer to structure as parameter.\nvoid printBook( struct Books *book ) {\n   cout &lt;&lt; \"Book title : \" &lt;&lt; book-&gt;title &lt;&lt;endl;\n   cout &lt;&lt; \"Book author : \" &lt;&lt; book-&gt;author &lt;&lt;endl;\n   cout &lt;&lt; \"Book subject : \" &lt;&lt; book-&gt;subject &lt;&lt;endl;\n   cout &lt;&lt; \"Book id : \" &lt;&lt; book-&gt;book_id &lt;&lt;endl;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nBook title : Learn C++ Programming\nBook author : Chand Miyan\nBook subject : C++ Programming\nBook id : 6495407\nBook title : Telecom Billing\nBook author : Yakit Singha\nBook subject : Telecom\nBook id : 6495700\n</pre>\n<h2>The typedef Keyword</h2>\n<p>There is an easier way to define structs or you could \"alias\" types you create. For example \u2212</p>\n<pre class=\"result notranslate\">\ntypedef struct {\n   char  title[50];\n   char  author[50];\n   char  subject[100];\n   int   book_id;\n} Books;\n</pre>\n<p>Now, you can use <i>Books</i> directly to define variables of <i>Books</i> type  without using struct keyword. Following is the example \u2212</p>\n<pre class=\"result notranslate\">\nBooks Book1, Book2;\n</pre>\n<p>You can use <b>typedef</b> keyword for non-structs as well as follows \u2212</p>\n<pre class=\"result notranslate\">\ntypedef long int *pint32;\n \npint32 x, y, z;\n</pre>\n<p>x, y and z are all pointers to long ints.</p>\n<h1>C++ Classes and Objects</h1>\n<p>The main purpose of C++ programming is to add object orientation to the C programming language and classes are the central feature of C++ that supports object-oriented programming and are often called user-defined types.</p>\n<p>A class is used to specify the form of an object and it combines data representation and methods for manipulating that data into one neat package. The data and functions within a class are called members of the class.</p>\n<h2>C++ Class Definitions</h2>\n<p>When you define a class, you define a blueprint for a data type. This doesn't actually define any data, but it does define what the class name means, that is, what an object of the class will consist of and what operations can be performed on such an object.</p>\n<p>A class definition starts with the keyword <b>class</b> followed by the class name; and the class body, enclosed by a pair of curly braces. A class definition must be followed either by a semicolon or a list of declarations. For example, we defined the Box data type using the keyword <b>class</b> as follows \u2212</p>\n<pre class=\"result notranslate\">\nclass Box {\n   public:\n      double length;   // Length of a box\n      double breadth;  // Breadth of a box\n      double height;   // Height of a box\n};\n</pre>\n<p>The keyword <b>public</b> determines the access attributes of the members of the class that follows it. A public member can be accessed from outside the class anywhere within the scope of the class object. You can also specify the members of a class as <b>private</b> or <b>protected</b> which we will discuss in a sub-section.</p>\n<h2>Define C++ Objects</h2>\n<p>A class provides the blueprints for objects, so basically an object is created from a class. We declare objects of a class with exactly the same sort of declaration that we declare variables of basic types. Following statements declare two objects of class Box \u2212</p>\n<pre class=\"result notranslate\">\nBox Box1;          // Declare Box1 of type Box\nBox Box2;          // Declare Box2 of type Box\n</pre>\n<p>Both of the objects Box1 and Box2 will have their own copy of data members.</p>\n<h2>Accessing the Data Members</h2>\n<p>The public data members of objects of a class can be accessed using the direct member access operator (.). Let us try the following example to make the things clear \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/JeEWd6\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nclass Box {\n   public:\n      double length;   // Length of a box\n      double breadth;  // Breadth of a box\n      double height;   // Height of a box\n};\n\nint main() {\n   Box Box1;        // Declare Box1 of type Box\n   Box Box2;        // Declare Box2 of type Box\n   double volume = 0.0;     // Store the volume of a box here\n \n   // box 1 specification\n   Box1.height = 5.0; \n   Box1.length = 6.0; \n   Box1.breadth = 7.0;\n\n   // box 2 specification\n   Box2.height = 10.0;\n   Box2.length = 12.0;\n   Box2.breadth = 13.0;\n   \n   // volume of box 1\n   volume = Box1.height * Box1.length * Box1.breadth;\n   cout &lt;&lt; \"Volume of Box1 : \" &lt;&lt; volume &lt;&lt;endl;\n\n   // volume of box 2\n   volume = Box2.height * Box2.length * Box2.breadth;\n   cout &lt;&lt; \"Volume of Box2 : \" &lt;&lt; volume &lt;&lt;endl;\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nVolume of Box1 : 210\nVolume of Box2 : 1560\n</pre>\n<p>It is important to note that private and protected members can not be accessed directly using direct member access operator (.). We will learn how private and protected members can be accessed.</p>\n<h2>Classes and Objects in Detail</h2>\n<p>So far, you have got very basic idea about C++ Classes and Objects. There are further interesting concepts related to C++ Classes and Objects which we will discuss in various sub-sections listed below \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Concept &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><a href=\"/cplusplus/cpp_class_member_functions.htm\" title=\"C++ Class Member Functions\">Class Member Functions</a>\n<p>A member function of a class is a function that has its definition or its prototype within the class definition like any other variable.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><a href=\"/cplusplus/cpp_class_access_modifiers.htm\" title=\"C++ Class Access Modifiers\">Class Access Modifiers</a>\n<p>A class member can be defined as public, private or protected. By default members would be assumed as private.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><a href=\"/cplusplus/cpp_constructor_destructor.htm\" title=\"C++ Constructor &amp; Destructor\">Constructor &amp; Destructor</a>\n<p>A class constructor is a special function in a class that is called when a new object of the class is created. A destructor is also a special function which is called when created object is deleted.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><a href=\"/cplusplus/cpp_copy_constructor.htm\" title=\"C++ Copy Constructor\">Copy Constructor</a>\n<p>The copy constructor is a constructor which creates an object by initializing it with an object of the same class, which has been created previously.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><a href=\"/cplusplus/cpp_friend_functions.htm\" title=\"C++ Friend Functions\">Friend Functions</a>\n<p>A <b>friend</b> function is permitted full access to private and protected members of a class.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><a href=\"/cplusplus/cpp_inline_functions.htm\" title=\"C++ Inline Functions\">Inline Functions</a>\n<p>With an inline function, the compiler tries to expand the code in the body of the function in place of a call to the function.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">7</td>\n<td><a href=\"/cplusplus/cpp_this_pointer.htm\" title=\"The this Pointer in C++\">this Pointer</a>\n<p>Every object has a special pointer <b>this</b> which points to the object itself.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">8</td>\n<td><a href=\"/cplusplus/cpp_pointer_to_class.htm\" title=\"Pointer to C++ Classes\">Pointer to C++ Classes</a>\n<p>A pointer to a class is done exactly the same way a pointer to a structure is. In fact a class is really just a structure with functions in it.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">9</td>\n<td><a href=\"/cplusplus/cpp_static_members.htm\" title=\"Static members of a class\">Static Members of a Class</a>\n<p>Both data members and function members of a class can be declared as static.</p></td>\n</tr>\n</table>\n<h1>C++ Inheritance</h1>\n<p>One of the most important concepts in object-oriented programming is that of inheritance. Inheritance allows us to define a class in terms of another class, which makes it easier to create and maintain an application. This also provides an opportunity to reuse the code functionality and fast implementation time.</p>\n<p>When creating a class, instead of writing completely new data members and member functions, the programmer can designate that the new class should inherit the members of an existing class. This existing class is called the <b>base</b> class, and the new class is referred to as the <b>derived</b> class.</p>\n<p>The idea of inheritance implements the <b>is a</b> relationship. For example, mammal IS-A animal, dog IS-A mammal hence dog IS-A animal as well and so on.</p>\n<h2>Base and Derived Classes</h2>\n<p>A class can be derived from more than one classes, which means it can inherit data and functions from multiple base classes. To define a derived class, we use a class derivation list to specify the base class(es). A class derivation list names one or more base classes and has the form \u2212</p>\n<pre class=\"result notranslate\">\nclass derived-class: access-specifier base-class\n</pre>\n<p>Where access-specifier is one of <b>public, protected,</b> or <b>private</b>, and base-class is the name of a previously defined class. If the access-specifier is not used, then it is private by default.</p>\n<p>Consider a base class <b>Shape</b> and its derived class <b>Rectangle</b> as follows \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/ykk4hq\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n \nusing namespace std;\n\n// Base class\nclass Shape {\n   public:\n      void setWidth(int w) {\n         width = w;\n      }\n      void setHeight(int h) {\n         height = h;\n      }\n      \n   protected:\n      int width;\n      int height;\n};\n\n// Derived class\nclass Rectangle: public Shape {\n   public:\n      int getArea() { \n         return (width * height); \n      }\n};\n\nint main(void) {\n   Rectangle Rect;\n \n   Rect.setWidth(5);\n   Rect.setHeight(7);\n\n   // Print the area of the object.\n   cout &lt;&lt; \"Total area: \" &lt;&lt; Rect.getArea() &lt;&lt; endl;\n\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nTotal area: 35\n</pre>\n<h2>Access Control and Inheritance</h2>\n<p>A derived class can access all the non-private members of its base class. Thus base-class members that should not be accessible to the member functions of derived classes should be declared private in the base class.</p>\n<p>We can summarize the different access types according to - who can access them in the following way \u2212</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<th style=\"text-align:center;\" width=\"25%\">Access</th>\n<th style=\"text-align:center;\" width=\"25%\">public</th>\n<th style=\"text-align:center;\" width=\"25%\">protected</th>\n<th style=\"text-align:center;\" width=\"25%\">private</th>\n</tr>\n<tr>\n<td>Same class</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>Derived classes</td>\n<td>yes</td>\n<td>yes</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Outside classes</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n</tr>\n</table>\n<p>A derived class inherits all base class methods with the following exceptions \u2212</p>\n<ul class=\"list\">\n<li>Constructors, destructors and copy constructors of the base class.</li>\n<li>Overloaded operators of the base class.</li>\n<li>The friend functions of the base class.</li>\n</ul>\n<h2>Type of Inheritance</h2>\n<p>When deriving a class from a base class, the base class may be inherited through <b>public, protected</b> or <b> private</b> inheritance. The type of inheritance is specified by the access-specifier as explained above.</p>\n<p>We hardly use <b>protected</b> or <b> private</b> inheritance, but <b>public</b> inheritance is commonly used. While using different type of inheritance, following rules are applied \u2212</p>\n<ul class=\"list\">\n<li><p><b>Public Inheritance</b> \u2212 When deriving a class from a <b>public</b> base class, <b>public</b> members of the base class become <b>public</b> members of the derived class and <b>protected</b> members of the base class become <b>protected</b> members of the derived class. A base class's <b>private</b> members are never accessible directly from a derived class, but can be accessed through calls to the <b>public</b> and <b>protected</b> members of the base class.</p></li>\n<li><p><b>Protected Inheritance</b> \u2212  When deriving from a <b>protected</b> base class, <b>public</b> and <b>protected</b> members of the base class become <b>protected</b> members of the derived class.</p></li>\n<li><p><b>Private Inheritance</b> \u2212 When deriving from a <b>private</b> base class, <b>public</b> and <b>protected</b> members of the base class become <b>private</b> members of the derived class.</p></li>\n</ul>\n<h2>Multiple Inheritance</h2>\n<p>A C++ class can inherit members from more than one class and here is the extended syntax \u2212</p>\n<pre class=\"result notranslate\">\nclass derived-class: access baseA, access baseB....\n</pre>\n<p>Where access is one of <b>public, protected,</b> or <b>private</b> and would be given for every base class and they will be separated by comma as shown above. Let us try the following example \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/NPe3oQ\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n \nusing namespace std;\n\n// Base class Shape\nclass Shape {\n   public:\n      void setWidth(int w) {\n         width = w;\n      }\n      void setHeight(int h) {\n         height = h;\n      }\n      \n   protected:\n      int width;\n      int height;\n};\n\n// Base class PaintCost\nclass PaintCost {\n   public:\n      int getCost(int area) {\n         return area * 70;\n      }\n};\n\n// Derived class\nclass Rectangle: public Shape, public PaintCost {\n   public:\n      int getArea() {\n         return (width * height); \n      }\n};\n\nint main(void) {\n   Rectangle Rect;\n   int area;\n \n   Rect.setWidth(5);\n   Rect.setHeight(7);\n\n   area = Rect.getArea();\n   \n   // Print the area of the object.\n   cout &lt;&lt; \"Total area: \" &lt;&lt; Rect.getArea() &lt;&lt; endl;\n\n   // Print the total cost of painting\n   cout &lt;&lt; \"Total paint cost: $\" &lt;&lt; Rect.getCost(area) &lt;&lt; endl;\n\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nTotal area: 35\nTotal paint cost: $2450\n</pre>\n<h1>C++ Overloading (Operator and Function)</h1>\n<p>C++ allows you to specify more than one definition for a <b>function</b> name or an <b>operator</b> in the same scope, which is called <b>function overloading</b> and <b>operator overloading</b> respectively.</p>\n<p>An overloaded declaration is a declaration that is declared with the same name as a previously declared declaration in the same scope, except that both declarations have different arguments and obviously different definition (implementation).</p>\n<p>When you call an overloaded <b>function</b> or <b>operator</b>, the compiler determines the most appropriate definition to use, by comparing the argument types you have used to call the function or operator with the parameter types specified in the definitions. The process of selecting the most appropriate overloaded function or operator is called <b>overload resolution</b>.</p>\n<h2>Function Overloading in C++</h2>\n<p>You can have multiple definitions for the same function name in the same scope. The definition of the function must differ from each other by the types and/or the number of arguments in the argument list. You cannot overload function declarations that differ only by return type.</p>\n<p>Following is the example where same function <b>print()</b> is being used to print different data types \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/cR3W4M\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n \nclass printData {\n   public:\n      void print(int i) {\n        cout &lt;&lt; \"Printing int: \" &lt;&lt; i &lt;&lt; endl;\n      }\n      void print(double  f) {\n        cout &lt;&lt; \"Printing float: \" &lt;&lt; f &lt;&lt; endl;\n      }\n      void print(char* c) {\n        cout &lt;&lt; \"Printing character: \" &lt;&lt; c &lt;&lt; endl;\n      }\n};\n\nint main(void) {\n   printData pd;\n \n   // Call print to print integer\n   pd.print(5);\n   \n   // Call print to print float\n   pd.print(500.263);\n   \n   // Call print to print character\n   pd.print(\"Hello C++\");\n \n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nPrinting int: 5\nPrinting float: 500.263\nPrinting character: Hello C++\n</pre>\n<h2>Operators Overloading in C++</h2>\n<p>You can redefine or overload most of the built-in operators available in C++. Thus, a programmer can use operators with user-defined types as well.</p>\n<p>Overloaded operators are functions with special names: the keyword \"operator\" followed by the symbol for the operator being defined. Like any other function, an overloaded operator has a return type and a parameter list.</p>\n<pre class=\"result notranslate\">\nBox operator+(const Box&amp;);\n</pre>\n<p>declares the addition operator that can be used to <b>add</b> two Box objects and returns final Box object. Most overloaded operators may be defined as ordinary non-member functions or as class member functions. In case we define above function as non-member function of a class then we would have to pass two arguments for each operand as follows \u2212</p>\n<pre class=\"result notranslate\">\nBox operator+(const Box&amp;, const Box&amp;);\n</pre>\n<p>Following is the example to show the concept of operator over loading using a member function. Here an object is passed as an argument whose properties will be accessed using this object, the object which will call this operator can be accessed using <b>this</b> operator as explained below \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/4Alfgt\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nclass Box {\n   public:\n      double getVolume(void) {\n         return length * breadth * height;\n      }\n      void setLength( double len ) {\n         length = len;\n      }\n      void setBreadth( double bre ) {\n         breadth = bre;\n      }\n      void setHeight( double hei ) {\n         height = hei;\n      }\n      \n      // Overload + operator to add two Box objects.\n      Box operator+(const Box&amp; b) {\n         Box box;\n         box.length = this-&gt;length + b.length;\n         box.breadth = this-&gt;breadth + b.breadth;\n         box.height = this-&gt;height + b.height;\n         return box;\n      }\n      \n   private:\n      double length;      // Length of a box\n      double breadth;     // Breadth of a box\n      double height;      // Height of a box\n};\n\n// Main function for the program\nint main() {\n   Box Box1;                // Declare Box1 of type Box\n   Box Box2;                // Declare Box2 of type Box\n   Box Box3;                // Declare Box3 of type Box\n   double volume = 0.0;     // Store the volume of a box here\n \n   // box 1 specification\n   Box1.setLength(6.0); \n   Box1.setBreadth(7.0); \n   Box1.setHeight(5.0);\n \n   // box 2 specification\n   Box2.setLength(12.0); \n   Box2.setBreadth(13.0); \n   Box2.setHeight(10.0);\n \n   // volume of box 1\n   volume = Box1.getVolume();\n   cout &lt;&lt; \"Volume of Box1 : \" &lt;&lt; volume &lt;&lt;endl;\n \n   // volume of box 2\n   volume = Box2.getVolume();\n   cout &lt;&lt; \"Volume of Box2 : \" &lt;&lt; volume &lt;&lt;endl;\n\n   // Add two object as follows:\n   Box3 = Box1 + Box2;\n\n   // volume of box 3\n   volume = Box3.getVolume();\n   cout &lt;&lt; \"Volume of Box3 : \" &lt;&lt; volume &lt;&lt;endl;\n\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nVolume of Box1 : 210\nVolume of Box2 : 1560\nVolume of Box3 : 5400\n</pre>\n<h2>Overloadable/Non-overloadableOperators</h2>\n<p>Following is the list of operators which can be overloaded \u2212</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<td width=\"16.6%\">+</td>\n<td width=\"16.6%\">-</td>\n<td width=\"16.6%\">*</td>\n<td width=\"16.6%\">/</td>\n<td width=\"16.6%\">%</td>\n<td width=\"16.6%\">^</td>\n</tr>\n<tr>\n<td>&amp;</td>\n<td>|</td>\n<td>~</td>\n<td>!</td>\n<td>,</td>\n<td>=</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>&gt;</td>\n<td>&lt;=</td>\n<td>&gt;=</td>\n<td>++</td>\n<td>--</td>\n</tr>\n<tr>\n<td>&lt;&lt;</td>\n<td>&gt;&gt;</td>\n<td>==</td>\n<td>!=</td>\n<td>&amp;&amp;</td>\n<td>||</td>\n</tr>\n<tr>\n<td>+=</td>\n<td>-=</td>\n<td>/=</td>\n<td>%=</td>\n<td>^=</td>\n<td>&amp;=</td>\n</tr>\n<tr>\n<td>|=</td>\n<td>*=</td>\n<td>&lt;&lt;=</td>\n<td>&gt;&gt;=</td>\n<td>[]</td>\n<td>()</td>\n</tr>\n<tr>\n<td>-&gt;</td>\n<td>-&gt;*</td>\n<td>new</td>\n<td>new []</td>\n<td>delete</td>\n<td>delete []</td>\n</tr>\n</table>\n<p>Following is the list of operators, which can not be overloaded \u2212</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<td width=\"25%\">::</td>\n<td width=\"25%\">.*</td>\n<td width=\"25%\">.</td>\n<td width=\"25%\">?:</td>\n</tr>\n</table>\n<h2 id=\"examples\">Operator Overloading Examples</h2>\n<p>Here are various operator overloading examples to help you in understanding the concept.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\">Sr.No</th>\n<th style=\"text-align:center;\">Operators &amp; Example</th>\n</tr>\n<tr>\n<td style=\"text-align:center;\">1</td>\n<td><a href=\"/cplusplus/unary_operators_overloading.htm\">Unary Operators Overloading</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">2</td>\n<td><a href=\"/cplusplus/binary_operators_overloading.htm\">Binary Operators Overloading</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">3</td>\n<td><a href=\"/cplusplus/relational_operators_overloading.htm\">Relational Operators Overloading</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">4</td>\n<td><a href=\"/cplusplus/input_output_operators_overloading.htm\">Input/Output Operators Overloading</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">5</td>\n<td><a href=\"/cplusplus/increment_decrement_operators_overloading.htm\"> ++ and -- Operators Overloading</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">6</td>\n<td><a href=\"/cplusplus/assignment_operators_overloading.htm\">Assignment Operators Overloading</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">7</td>\n<td><a href=\"/cplusplus/function_call_operator_overloading.htm\">Function call () Operator  Overloading</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">8</td>\n<td><a href=\"/cplusplus/subscripting_operator_overloading.htm\">Subscripting [] Operator Overloading</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">9</td>\n<td><a href=\"/cplusplus/class_member_access_operator_overloading.htm\">Class Member Access Operator -&gt; Overloading</a></td>\n</tr>\n</table>\n<h1>Polymorphism in C++</h1>\n<p>The word <b>polymorphism</b> means having many forms. Typically, polymorphism occurs when there is a hierarchy of classes and they are related by inheritance.</p>\n<p>C++ polymorphism means that a call to a member function will cause a different function to be executed depending on the type of object that invokes the function.</p>\n<p>Consider the following example where a base class has been derived by other two classes \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/LSyBTc\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt; \nusing namespace std;\n \nclass Shape {\n   protected:\n      int width, height;\n      \n   public:\n      Shape( int a = 0, int b = 0){\n         width = a;\n         height = b;\n      }\n      int area() {\n         cout &lt;&lt; \"Parent class area :\" &lt;&lt;endl;\n         return 0;\n      }\n};\nclass Rectangle: public Shape {\n   public:\n      Rectangle( int a = 0, int b = 0):Shape(a, b) { }\n      \n      int area () { \n         cout &lt;&lt; \"Rectangle class area :\" &lt;&lt;endl;\n         return (width * height); \n      }\n};\n\nclass Triangle: public Shape {\n   public:\n      Triangle( int a = 0, int b = 0):Shape(a, b) { }\n      \n      int area () { \n         cout &lt;&lt; \"Triangle class area :\" &lt;&lt;endl;\n         return (width * height / 2); \n      }\n};\n\n// Main function for the program\nint main() {\n   Shape *shape;\n   Rectangle rec(10,7);\n   Triangle  tri(10,5);\n\n   // store the address of Rectangle\n   shape = &amp;rec;\n   \n   // call rectangle area.\n   shape-&gt;area();\n\n   // store the address of Triangle\n   shape = &amp;tri;\n   \n   // call triangle area.\n   shape-&gt;area();\n   \n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nParent class area :\nParent class area :\n</pre>\n<p>The reason for the incorrect output is that the call of the function area() is being set once by the compiler as the version defined in the base class. This is called <b>static resolution</b> of the function call, or <b>static linkage</b> - the function call is fixed before the program is executed. This is also sometimes called <b>early binding</b> because the area() function is set during the compilation of the program.</p>\n<p>But now, let's make a slight modification in our program and precede the declaration of area() in the Shape class with the keyword <b>virtual</b> so that it  looks like this \u2212</p>\n<pre class=\"result notranslate\">\nclass Shape {\n   protected:\n      int width, height;\n      \n   public:\n      Shape( int a = 0, int b = 0) {\n         width = a;\n         height = b;\n      }\n      virtual int area() {\n         cout &lt;&lt; \"Parent class area :\" &lt;&lt;endl;\n         return 0;\n      }\n};\n</pre>\n<p>After this slight modification, when the previous example code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nRectangle class area\nTriangle class area\n</pre>\n<p>This time, the compiler looks at the contents of the pointer instead of it's type. Hence, since addresses of objects of tri and rec classes are stored in *shape the respective area() function is called.</p>\n<p>As you can see, each of the child classes has a separate implementation for the function area(). This is how <b>polymorphism</b> is generally used. You have different classes with a function of the same name, and even the same parameters, but with different implementations.</p>\n<h2>Virtual Function</h2>\n<p>A <b>virtual</b> function is a function in a base class that is declared using the keyword <b>virtual</b>. Defining in a base class a virtual function, with another version in a derived class, signals to the compiler that we don't want static linkage for this function.</p>\n<p>What we do want is the selection of the function to be called at any given point in the program to be based on the kind of object for which it is called.  This sort of operation is referred to as <b>dynamic linkage</b>, or <b>late binding</b>.</p>\n<h2>Pure Virtual Functions</h2>\n<p>It is possible that you want to include a virtual function in a base class so that it may be redefined in a derived class to suit the objects of that class, but that there is no meaningful definition you could give for the function in the base class.</p>\n<p>We can change the virtual function area() in the base class to the following \u2212</p>\n<pre class=\"result notranslate\">\nclass Shape {\n   protected:\n      int width, height;\n\n   public:\n      Shape(int a = 0, int b = 0) {\n         width = a;\n         height = b;\n      }\n      \n      // pure virtual function\n      virtual int area() = 0;\n};\n</pre>\n<p>The = 0 tells the compiler that the function has no body  and above virtual function will be called <b>pure virtual function</b>.</p>\n<h1>Data Abstraction in C++</h1>\n<p>Data abstraction refers to providing only essential information to the outside world and hiding their background details, i.e., to represent the needed information in program without presenting the details.</p>\n<p>Data abstraction is a programming (and design) technique that relies on the separation of interface and implementation.</p>\n<p>Let's take one real life example of a TV, which you can turn on and off, change the channel, adjust the volume, and add external components such as speakers, VCRs, and DVD players, BUT you do not know its internal details, that is, you do not know how it receives signals over the air or through a cable, how it translates them, and  finally displays them on the screen.</p>\n<p>Thus, we can say a television clearly separates its internal implementation from its external interface and you can play with its interfaces like the power button, channel changer, and volume control without having any knowledge of its internals.</p>\n<p>In C++, classes provides great level of <b>data abstraction</b>. They provide sufficient public methods to the outside world to play with the functionality of the object and to manipulate object data, i.e., state without actually knowing how class has been implemented internally.</p>\n<p>For example, your program can make a call to the <b>sort()</b> function without knowing what algorithm the function actually uses to sort the given values. In fact, the underlying implementation of the sorting functionality could change between releases of the library, and as long as the interface stays the same, your function call will still work.</p>\n<p>In C++, we use <b>classes</b> to define our own abstract data types (ADT). You can use the <b>cout</b> object of class <b>ostream</b> to stream data to standard output like this \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/iaAqF8\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n   cout &lt;&lt; \"Hello C++\" &lt;&lt;endl;\n   return 0;\n}\n</pre>\n<p>Here, you don't need to understand how <b>cout</b> displays the text on the user's screen. You need to only know the public interface and the underlying implementation of \u2018cout\u2019 is free to change.</p>\n<h2>Access Labels Enforce Abstraction</h2>\n<p>In C++, we use access labels to define the abstract interface to the class. A class may contain zero or more access labels \u2212</p>\n<ul class=\"list\">\n<li><p>Members defined with a public label are accessible to all parts of the program. The data-abstraction view of a type is defined by its public members.</p></li>\n<li><p>Members defined with a private label are not accessible to code that uses the class. The private sections hide the implementation from code that uses the type.</p></li>\n</ul>\n<p>There are no restrictions on how often an access label may appear. Each access label specifies the access level of the succeeding member definitions. The specified access level remains in effect until the next access label is encountered or the closing right brace of the class body is seen.</p>\n<h2>Benefits of Data Abstraction</h2>\n<p>Data abstraction provides two important advantages \u2212</p>\n<ul class=\"list\">\n<li><p>Class internals are protected from inadvertent user-level errors, which might corrupt the state of the object.</p></li>\n<li><p>The class implementation may evolve over time in response to changing requirements or bug reports without requiring change in user-level code.</p></li>\n</ul>\n<p>By defining data members only in the private section of the class, the class author is free to make changes in the data. If the implementation changes, only the class code needs to be examined to see what affect the change may have. If data is public, then any function that directly access the data members of the old representation might be broken.</p>\n<h2>Data Abstraction Example</h2>\n<p>Any C++ program where you implement a class with public and private members is an example of data abstraction. Consider the following example \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/Dm4Yt3\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nclass Adder {\n   public:\n      // constructor\n      Adder(int i = 0) {\n         total = i;\n      }\n      \n      // interface to outside world\n      void addNum(int number) {\n         total += number;\n      }\n      \n      // interface to outside world\n      int getTotal() {\n         return total;\n      };\n      \n   private:\n      // hidden data from outside world\n      int total;\n};\n\nint main() {\n   Adder a;\n   \n   a.addNum(10);\n   a.addNum(20);\n   a.addNum(30);\n\n   cout &lt;&lt; \"Total \" &lt;&lt; a.getTotal() &lt;&lt;endl;\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nTotal 60\n</pre>\n<p>Above class adds numbers together, and returns the sum. The public members - <b>addNum</b> and <b>getTotal</b> are the interfaces to the outside world and a user needs to know them to use the class. The private member <b>total</b> is something that the user doesn't need to know about, but is needed for the class to operate properly.</p>\n<h2>Designing Strategy</h2>\n<p>Abstraction separates code into interface and implementation. So while designing your component, you must keep interface independent of the implementation so that if you change underlying implementation then interface would remain intact.</p>\n<p>In this case whatever programs are using these interfaces, they would not be impacted and would just need a recompilation with the latest implementation.</p>\n<h1>Data Encapsulation in C++</h1>\n<p>All C++ programs are composed of the following two fundamental elements \u2212</p>\n<ul class=\"list\">\n<li><p><b>Program statements (code)</b> \u2212 This is the part of a program that performs actions and they are called functions.</p></li>\n<li><p><b>Program data</b> \u2212 The data is the information of the program which gets affected by the program functions.</p></li>\n</ul>\n<p>Encapsulation is an Object Oriented Programming concept that binds together the data and functions that manipulate the data, and that keeps both safe from outside interference and misuse. Data encapsulation led to the important OOP concept of <b>data hiding</b>.</p>\n<p><b>Data encapsulation</b> is a mechanism of bundling the data, and the functions that use them and <b>data abstraction</b> is a mechanism of exposing only the interfaces and hiding the implementation details from the user.</p>\n<p>C++ supports the properties of encapsulation and data hiding through the creation of user-defined types, called <b>classes</b>. We already have studied that a class can contain <b>private, protected </b> and <b>public</b> members. By default, all items defined in a class are private. For example \u2212</p>\n<pre class=\"result notranslate\">\nclass Box {\n   public:\n      double getVolume(void) {\n         return length * breadth * height;\n      }\n\n   private:\n      double length;      // Length of a box\n      double breadth;     // Breadth of a box\n      double height;      // Height of a box\n};\n</pre>\n<p>The variables length, breadth, and height are <b>private</b>. This means that they can be accessed only by other members of the Box class, and not by any other part of your program. This is one way encapsulation is achieved.</p>\n<p>To make parts of a class <b>public</b> (i.e., accessible to other parts of your program), you must declare them after the <b>public</b> keyword. All variables or functions defined after the public specifier are accessible by all other functions in your program.</p>\n<p>Making one class a friend of another exposes the implementation details and reduces encapsulation. The ideal is to keep as many of the details of each class hidden from all other classes as possible.</p>\n<h2>Data Encapsulation Example</h2>\n<p>Any C++ program where you implement a class with public and private members is an example of data encapsulation and data abstraction. Consider the following example \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/lZz6R0\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nclass Adder {\n   public:\n      // constructor\n      Adder(int i = 0) {\n         total = i;\n      }\n      \n      // interface to outside world\n      void addNum(int number) {\n         total += number;\n      }\n      \n      // interface to outside world\n      int getTotal() {\n         return total;\n      };\n   \n   private:\n      // hidden data from outside world\n      int total;\n};\n\nint main() {\n   Adder a;\n   \n   a.addNum(10);\n   a.addNum(20);\n   a.addNum(30);\n\n   cout &lt;&lt; \"Total \" &lt;&lt; a.getTotal() &lt;&lt;endl;\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nTotal 60\n</pre>\n<p>Above class adds numbers together, and returns the sum. The public members <b>addNum</b> and <b>getTotal </b> are the interfaces to the outside world and a user needs to know them to use the class. The private member <b>total</b> is something that is hidden from the outside world, but is needed for the class to operate properly.</p>\n<h2>Designing Strategy</h2>\n<p>Most of us have learnt to make class members private by default unless we really need to expose them. That's just good <b>encapsulation</b>.</p>\n<p>This is applied most frequently to data members, but it applies equally to all members, including virtual functions.</p>\n<h1>Interfaces in C++ (Abstract Classes)</h1>\n<p>An interface describes the behavior or capabilities of a C++ class without committing to a particular implementation of that class.</p>\n<p>The C++ interfaces are implemented using <b>abstract classes</b> and these abstract classes should not be confused with data abstraction which is a concept of keeping implementation details separate from associated data.</p>\n<p>A class is made abstract by declaring at least one of its functions as <b>pure virtual</b> function. A pure virtual function is specified by placing \"= 0\" in its declaration as follows \u2212</p>\n<pre class=\"result notranslate\">\nclass Box {\n   public:\n      // pure virtual function\n      virtual double getVolume() = 0;\n      \n   private:\n      double length;      // Length of a box\n      double breadth;     // Breadth of a box\n      double height;      // Height of a box\n};\n</pre>\n<p>The purpose of an <b>abstract class</b> (often referred to as an ABC) is to provide an appropriate base class from which other classes can inherit. Abstract classes cannot be used to instantiate objects and serves only as an <b>interface</b>. Attempting to instantiate an object of an abstract class causes a compilation error.</p>\n<p>Thus, if a subclass of an ABC needs to be instantiated, it has to implement each of the virtual functions, which means that it supports the interface declared by the ABC.  Failure to override a pure virtual function in a derived class, then attempting to instantiate objects of that class, is a compilation error.</p>\n<p>Classes that can be used to instantiate objects are called <b>concrete classes</b>.</p>\n<h2>Abstract Class Example</h2>\n<p>Consider the following example where parent class provides an interface to the base class  to implement a function called <b>getArea()</b> \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/5qXjq1\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n \nusing namespace std;\n \n// Base class\nclass Shape {\n   public:\n      // pure virtual function providing interface framework.\n      virtual int getArea() = 0;\n      void setWidth(int w) {\n         width = w;\n      }\n   \n      void setHeight(int h) {\n         height = h;\n      }\n   \n   protected:\n      int width;\n      int height;\n};\n \n// Derived classes\nclass Rectangle: public Shape {\n   public:\n      int getArea() { \n         return (width * height); \n      }\n};\n\nclass Triangle: public Shape {\n   public:\n      int getArea() { \n         return (width * height)/2; \n      }\n};\n \nint main(void) {\n   Rectangle Rect;\n   Triangle  Tri;\n \n   Rect.setWidth(5);\n   Rect.setHeight(7);\n   \n   // Print the area of the object.\n   cout &lt;&lt; \"Total Rectangle area: \" &lt;&lt; Rect.getArea() &lt;&lt; endl;\n\n   Tri.setWidth(5);\n   Tri.setHeight(7);\n   \n   // Print the area of the object.\n   cout &lt;&lt; \"Total Triangle area: \" &lt;&lt; Tri.getArea() &lt;&lt; endl; \n\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nTotal Rectangle area: 35\nTotal Triangle area: 17\n</pre>\n<p>You can see how an abstract class defined an interface in terms of getArea() and two other classes implemented same function but with different algorithm to calculate the area specific to the shape.</p>\n<h2>Designing Strategy</h2>\n<p>An object-oriented system might use an abstract base class to provide a common and standardized interface appropriate for all the external applications. Then, through inheritance from that abstract base class, derived classes are formed that operate similarly.</p>\n<p>The capabilities (i.e., the public functions) offered by the external applications are provided as pure virtual functions in the abstract base class. The implementations of these pure virtual functions are provided in the derived classes that correspond to the specific types of the application.</p>\n<p>This architecture also allows new applications to be added to a system easily, even after the system has been defined.</p>\n<h1>C++ Files and Streams</h1>\n<p>So far, we have been using the <b>iostream</b> standard library, which provides <b>cin</b> and <b>cout</b> methods for reading from standard input and writing to standard output respectively.</p>\n<p>This tutorial will teach you how to read and write from a file. This requires another standard C++ library called <b>fstream</b>, which defines three new data types \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Data Type &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>ofstream</b></p>\n<p>This data type represents the output file stream and is used to create files and to write information to files.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>ifstream</b></p>\n<p>This data type represents the input file stream and  is used to read information from files.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>fstream</b></p>\n<p>This data type represents the file stream generally, and has the capabilities of both ofstream and ifstream which means it can create files, write information to files, and read information from files.</p></td>\n</tr>\n</table>\n<p>To perform file processing in C++, header files &lt;iostream&gt; and &lt;fstream&gt; must be included in your C++ source file.</p>\n<h2>Opening a File</h2>\n<p>A file must be opened before you can read from it or write to it. Either <b>ofstream</b> or <b>fstream</b> object may be used to open a file for writing. And ifstream object is used to open a file for reading purpose only.</p>\n<p>Following is the standard syntax for open() function, which is a member of fstream, ifstream, and ofstream objects.</p>\n<pre class=\"result notranslate\">\nvoid open(const char *filename, ios::openmode mode);\n</pre>\n<p>Here, the first argument specifies the name and location of the file to be opened and the second argument of the <b>open()</b> member function defines the mode in which the file should be opened.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Mode Flag &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>ios::app</b></p>\n<p>Append mode. All output to that file to be appended to the end.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>ios::ate</b></p>\n<p>Open a file for output and move the read/write control to the end of the file.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>ios::in</b></p>\n<p>Open a file for reading.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>ios::out</b></p>\n<p>Open a file for writing.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>ios::trunc</b></p>\n<p>If the file already exists, its contents will be truncated before opening the file.</p></td>\n</tr>\n</table>\n<p>You can combine two or more of these values by <b>OR</b>ing them together. For example if you want to open a file in write mode and want to truncate it in case that already exists, following will be the syntax \u2212</p>\n<pre class=\"result notranslate\">\nofstream outfile;\noutfile.open(\"file.dat\", ios::out | ios::trunc );\n</pre>\n<p>Similar way, you can open a file for reading and writing purpose as follows \u2212</p>\n<pre class=\"result notranslate\">\nfstream  afile;\nafile.open(\"file.dat\", ios::out | ios::in );\n</pre>\n<h2>Closing a File</h2>\n<p>When a C++ program  terminates it automatically flushes all the streams, release all the allocated memory and close all the opened files. But it is always a good practice that a programmer should close all the opened files before program termination.</p>\n<p>Following is the standard syntax for close() function, which is a member of fstream, ifstream, and ofstream objects.</p>\n<pre class=\"result notranslate\">\nvoid close();\n</pre>\n<h2>Writing to a File</h2>\n<p>While doing C++ programming, you write information to a file from your program using the stream insertion operator (&lt;&lt;) just as you use that operator to output information to the screen. The only difference is that you use an <b>ofstream</b> or <b>fstream</b> object instead of the <b>cout</b> object.</p>\n<h2>Reading from a File</h2>\n<p>You read information from a file into your program using the stream extraction operator (&gt;&gt;) just as you use that operator to input information from the keyboard. The only difference is that you use an <b>ifstream</b> or <b>fstream</b> object instead of the <b>cin</b> object.</p>\n<h2>Read and Write Example</h2>\n<p>Following is the C++ program which opens a file in reading and writing mode. After writing information entered by the user to a file named afile.dat, the program reads information from the file and outputs it onto the screen \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/MLhc7C\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;fstream&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n \nint main () {\n   char data[100];\n\n   // open a file in write mode.\n   ofstream outfile;\n   outfile.open(\"afile.dat\");\n\n   cout &lt;&lt; \"Writing to the file\" &lt;&lt; endl;\n   cout &lt;&lt; \"Enter your name: \"; \n   cin.getline(data, 100);\n\n   // write inputted data into the file.\n   outfile &lt;&lt; data &lt;&lt; endl;\n\n   cout &lt;&lt; \"Enter your age: \"; \n   cin &gt;&gt; data;\n   cin.ignore();\n   \n   // again write inputted data into the file.\n   outfile &lt;&lt; data &lt;&lt; endl;\n\n   // close the opened file.\n   outfile.close();\n\n   // open a file in read mode.\n   ifstream infile; \n   infile.open(\"afile.dat\"); \n \n   cout &lt;&lt; \"Reading from the file\" &lt;&lt; endl; \n   infile &gt;&gt; data; \n\n   // write the data at the screen.\n   cout &lt;&lt; data &lt;&lt; endl;\n   \n   // again read the data from the file and display it.\n   infile &gt;&gt; data; \n   cout &lt;&lt; data &lt;&lt; endl; \n\n   // close the opened file.\n   infile.close();\n\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following sample input and output \u2212</p>\n<pre class=\"result notranslate\">\n$./a.out\nWriting to the file\nEnter your name: Zara\nEnter your age: 9\nReading from the file\nZara\n9\n</pre>\n<p>Above examples make use of additional functions from cin object, like getline() function to read the line from outside and ignore() function to ignore the extra characters left by previous read statement.</p>\n<h2>File Position Pointers</h2>\n<p>Both <b>istream</b> and <b>ostream</b> provide member functions for repositioning the file-position pointer. These member functions are <b>seekg</b> (\"seek get\") for istream and <b>seekp</b> (\"seek put\") for ostream.</p>\n<p>The argument to seekg and seekp normally is a long integer. A second argument can be specified to indicate the seek direction. The seek direction can be <b>ios::beg</b> (the default) for positioning relative to the beginning of a stream, <b>ios::cur</b> for positioning relative to the current position in a stream or <b>ios::end</b> for positioning relative to the end of a stream.</p>\n<p>The file-position pointer is an integer value that specifies the location in the file as a number of bytes from the file's starting location. Some examples of positioning the \"get\" file-position pointer are \u2212</p>\n<pre class=\"result notranslate\">\n// position to the nth byte of fileObject (assumes ios::beg)\nfileObject.seekg( n );\n\n// position n bytes forward in fileObject\nfileObject.seekg( n, ios::cur );\n\n// position n bytes back from end of fileObject\nfileObject.seekg( n, ios::end );\n\n// position at end of fileObject\nfileObject.seekg( 0, ios::end );\n</pre>\n<h1>C++ Exception Handling</h1>\n<p>An exception is a problem that arises during the execution of a program. A C++ exception is a response to an exceptional circumstance that arises while a program is running, such as an attempt to divide by zero.</p>\n<p>Exceptions provide a way to transfer control from one part of a program to another. C++ exception handling is built upon three keywords: <b>try, catch,</b> and <b>throw</b>.</p>\n<ul class=\"list\">\n<li><p><b>throw</b> \u2212 A program throws an exception when a problem shows up. This is done using a <b>throw</b> keyword.</p></li>\n<li><p><b>catch</b> \u2212 A program catches an exception with an exception handler at the place in a program where you want to handle the problem. The <b>catch</b> keyword indicates the catching of an exception.</p></li>\n<li><p><b>try</b> \u2212 A <b>try</b> block identifies a block of code for which particular exceptions will be activated. It's followed by one or more catch blocks.</p></li>\n</ul>\n<p>Assuming a block will raise an exception, a method catches an exception using a combination of the <b>try</b> and <b>catch</b> keywords. A try/catch block is placed around the code that might generate an exception. Code within a try/catch block is referred to as protected code, and the syntax for using try/catch as follows \u2212</p>\n<pre class=\"result notranslate\">\ntry {\n   // protected code\n} catch( ExceptionName e1 ) {\n   // catch block\n} catch( ExceptionName e2 ) {\n   // catch block\n} catch( ExceptionName eN ) {\n   // catch block\n}\n</pre>\n<p>You can list down multiple <b>catch</b> statements to catch different type of exceptions in case your <b>try</b> block raises more than one exception in different situations.</p>\n<h2>Throwing Exceptions</h2>\n<p>Exceptions can be thrown anywhere within a code block using  <b>throw</b> statement. The operand of the throw statement determines a type for the exception and can be any expression and the type of the result of the expression determines the type of exception thrown.</p>\n<p>Following is an example of throwing an exception when dividing by zero condition occurs \u2212</p>\n<pre class=\"result notranslate\">\ndouble division(int a, int b) {\n   if( b == 0 ) {\n      throw \"Division by zero condition!\";\n   }\n   return (a/b);\n}\n</pre>\n<h2>Catching Exceptions</h2>\n<p>The <b>catch</b> block following the <b>try</b> block catches any exception. You can specify what type of exception you want to catch and this is determined by the exception declaration that appears in parentheses following the keyword catch.</p>\n<pre class=\"result notranslate\">\ntry {\n   // protected code\n} catch( ExceptionName e ) {\n  // code to handle ExceptionName exception\n}\n</pre>\n<p>Above code will catch an exception of <b>ExceptionName</b> type. If you want to specify that a catch block should handle any type of exception that is thrown in a try block, you must put an ellipsis, ...,  between the parentheses enclosing the exception declaration as follows \u2212</p>\n<pre class=\"result notranslate\">\ntry {\n   // protected code\n} catch(...) {\n  // code to handle any exception\n}\n</pre>\n<p>The following is an example, which throws a division by zero exception and we catch it in catch block.</p>\n<a class=\"demo\" href=\"http://tpcg.io/Nuo9hc\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\ndouble division(int a, int b) {\n   if( b == 0 ) {\n      throw \"Division by zero condition!\";\n   }\n   return (a/b);\n}\n\nint main () {\n   int x = 50;\n   int y = 0;\n   double z = 0;\n \n   try {\n      z = division(x, y);\n      cout &lt;&lt; z &lt;&lt; endl;\n   } catch (const char* msg) {\n     cerr &lt;&lt; msg &lt;&lt; endl;\n   }\n\n   return 0;\n}\n</pre>\n<p>Because we are raising an exception of type <b>const char*</b>, so while catching this exception, we have to use const char* in catch block. If we compile and run above code, this would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nDivision by zero condition!\n</pre>\n<h2>C++ Standard Exceptions</h2>\n<p>C++ provides a list of standard exceptions defined in <b>&lt;exception&gt;</b>  which we can use in our programs. These are arranged in a parent-child class hierarchy shown below \u2212</p>\n<img alt=\"C++ Exceptions Hierarchy\" src=\"/cplusplus/images/cpp_exceptions.jpg\"/>\n<p>Here is the small description of each exception mentioned in the above hierarchy \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Exception &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>std::exception</b></p>\n<p>An exception and parent class of all the standard C++ exceptions.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>std::bad_alloc</b></p>\n<p>This can be thrown by <b>new</b>.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>std::bad_cast</b></p>\n<p>This can be thrown by <b>dynamic_cast</b>.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>std::bad_exception</b></p>\n<p>This is useful device to handle unexpected exceptions in a C++ program.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>std::bad_typeid</b></p>\n<p>This can be thrown by <b>typeid</b>.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><p><b>std::logic_error</b></p>\n<p>An exception that theoretically can be detected by reading the code.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">7</td>\n<td><p><b>std::domain_error</b></p>\n<p>This is an exception thrown when a mathematically invalid domain is used.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">8</td>\n<td><p><b>std::invalid_argument</b></p>\n<p>This is thrown due to invalid arguments.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">9</td>\n<td><p><b>std::length_error</b></p>\n<p>This is thrown when a too big std::string is created.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">10</td>\n<td><p><b>std::out_of_range</b></p>\n<p>This can be thrown by the 'at' method, for example a std::vector and std::bitset&lt;&gt;::operator[]().</p></td>\n</tr>\n<tr>\n<td class=\"ts\">11</td>\n<td><p><b>std::runtime_error</b></p>\n<p>An exception that theoretically cannot be detected by reading the code.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">12</td>\n<td><p><b>std::overflow_error</b></p>\n<p>This is thrown if a mathematical overflow occurs.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">13</td>\n<td><p><b>std::range_error</b></p>\n<p>This is occurred when you try to store a value which is out of range.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">14</td>\n<td><p><b>std::underflow_error</b></p>\n<p>This is thrown if a mathematical underflow occurs.</p></td>\n</tr>\n</table>\n<h2>Define New Exceptions</h2>\n<p>You can define your own exceptions by inheriting and overriding <b>exception</b> class functionality. Following is the example, which shows how you can use std::exception class to implement your own exception in standard way \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/FUdUJO\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;exception&gt;\nusing namespace std;\n\nstruct MyException : public exception {\n   const char * what () const throw () {\n      return \"C++ Exception\";\n   }\n};\n \nint main() {\n   try {\n      throw MyException();\n   } catch(MyException&amp; e) {\n      std::cout &lt;&lt; \"MyException caught\" &lt;&lt; std::endl;\n      std::cout &lt;&lt; e.what() &lt;&lt; std::endl;\n   } catch(std::exception&amp; e) {\n      //Other errors\n   }\n}\n</pre>\n<p>This would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nMyException caught\nC++ Exception\n</pre>\n<p>Here, <b>what()</b> is a public method provided by exception class and it has been overridden by all the child exception classes. This returns the cause of an exception.</p>\n<h1>C++ Dynamic Memory</h1>\n<p>A good understanding of how dynamic memory really works in C++ is essential to becoming a good C++ programmer. Memory in your C++ program is divided into two parts \u2212</p>\n<ul class=\"list\">\n<li><p><b>The stack</b> \u2212 All variables declared inside the function will take up memory from the stack.</p></li>\n<li><p><b>The heap</b> \u2212 This is unused memory of the program and can be used to allocate the memory dynamically when program runs.</p></li>\n</ul>\n<p>Many times, you are not aware in advance how much memory you will need to store particular information in a defined variable and the size of required memory can be determined at run time.</p>\n<p>You can allocate memory at run time within the heap for the variable of a given type using a special operator in C++ which returns the address of the space allocated. This operator is called <b>new</b> operator.</p>\n<p>If you are not in need of dynamically allocated memory anymore, you can use <b>delete</b> operator, which de-allocates memory that was previously allocated by new operator.</p>\n<h2>new and delete Operators</h2>\n<p>There is following generic syntax to use <b>new</b> operator to allocate memory dynamically for any data-type.</p>\n<pre class=\"result notranslate\">\nnew data-type;\n</pre>\n<p>Here, <b>data-type</b> could be any built-in data type including an array or any user defined data types include class or structure. Let us start with built-in data types. For example we can define a pointer to type double and then request that the memory be allocated at execution time. We can do this using the <b>new </b> operator with the following statements \u2212</p>\n<pre class=\"result notranslate\">\ndouble* pvalue  = NULL; // Pointer initialized with null\npvalue  = new double;   // Request memory for the variable\n</pre>\n<p>The memory may not have been allocated successfully, if the free store had been used up. So it is good practice to check if new operator is returning NULL pointer and take appropriate action as below \u2212</p>\n<pre class=\"result notranslate\">\ndouble* pvalue  = NULL;\nif( !(pvalue  = new double )) {\n   cout &lt;&lt; \"Error: out of memory.\" &lt;&lt;endl;\n   exit(1);\n}\n</pre>\n<p>The <b>malloc()</b> function from C, still exists in C++, but it is recommended to avoid using malloc() function. The main advantage of new over malloc() is that new doesn't just allocate memory, it constructs objects which is prime purpose of C++.</p>\n<p>At any point, when you feel a variable that has been dynamically allocated is not anymore required, you can free up the memory that it occupies in the free store with the \u2018delete\u2019 operator as follows \u2212</p>\n<pre class=\"result notranslate\">\ndelete pvalue;        // Release memory pointed to by pvalue\n</pre>\n<p>Let us put above concepts and form the following example to show how \u2018new\u2019 and \u2018delete\u2019 work \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/YFq73r\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main () {\n   double* pvalue  = NULL; // Pointer initialized with null\n   pvalue  = new double;   // Request memory for the variable\n \n   *pvalue = 29494.99;     // Store value at allocated address\n   cout &lt;&lt; \"Value of pvalue : \" &lt;&lt; *pvalue &lt;&lt; endl;\n\n   delete pvalue;         // free up the memory.\n\n   return 0;\n}\n</pre>\n<p>If we compile and run above code, this would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nValue of pvalue : 29495\n</pre>\n<h2>Dynamic Memory Allocation for Arrays</h2>\n<p>Consider you want to allocate memory for an array of characters, i.e., string of 20 characters. Using the same syntax what we have used above we can allocate memory dynamically as shown below.</p>\n<pre class=\"result notranslate\">\nchar* pvalue  = NULL;         // Pointer initialized with null\npvalue  = new char[20];       // Request memory for the variable\n</pre>\n<p>To remove the array that we have just created the statement would look like this \u2212</p>\n<pre class=\"result notranslate\">\ndelete [] pvalue;             // Delete array pointed to by pvalue\n</pre>\n<p>Following the similar generic syntax of new operator, you can allocate for a multi-dimensional array as follows \u2212</p>\n<pre class=\"result notranslate\">\ndouble** pvalue  = NULL;      // Pointer initialized with null \npvalue  = new double [3][4];  // Allocate memory for a 3x4 array \n</pre>\n<p>However, the syntax to release the memory for multi-dimensional array will still remain same as above \u2212</p>\n<pre class=\"result notranslate\">\ndelete [] pvalue;            // Delete array pointed to by pvalue\n</pre>\n<h2>Dynamic Memory Allocation for Objects</h2>\n<p>Objects are no different from simple data types. For example, consider the following code where we are going to use an array of objects to clarify the concept \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/qxQQ36\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nclass Box {\n   public:\n      Box() { \n         cout &lt;&lt; \"Constructor called!\" &lt;&lt;endl; \n      }\n      ~Box() { \n         cout &lt;&lt; \"Destructor called!\" &lt;&lt;endl; \n      }\n};\nint main() {\n   Box* myBoxArray = new Box[4];\n   delete [] myBoxArray; // Delete array\n\n   return 0;\n}\n</pre>\n<p>If you were to allocate an array of four Box objects, the Simple constructor would be called four times and similarly while deleting these objects, destructor will also be called same number of times.</p>\n<p>If we compile and run above code, this would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nConstructor called!\nConstructor called!\nConstructor called!\nConstructor called!\nDestructor called!\nDestructor called!\nDestructor called!\nDestructor called!\n</pre>\n<h1>Namespaces in C++</h1>\n<p>Consider a situation, when we have two persons with the same name, Zara, in the same class. Whenever we need to differentiate them definitely we would have to use some additional information along with their name, like either the area, if they live in different area or their mother\u2019s or father\u2019s name, etc.</p>\n<p>Same situation can arise in your C++ applications. For example, you might be writing some code that has a function called xyz() and there is another library available which is also having same function xyz(). Now the compiler has no way of knowing which version of xyz() function you are referring to within your code.</p>\n<p>A <b>namespace</b> is designed to overcome this difficulty and is used as additional information to differentiate similar functions, classes, variables etc. with the same name available in different libraries. Using namespace, you can define the context in which names are defined. In essence, a namespace defines a scope.</p>\n<h2>Defining a Namespace</h2>\n<p>A namespace definition begins with the keyword <b>namespace</b> followed by the namespace name as follows \u2212</p>\n<pre class=\"result notranslate\">\nnamespace namespace_name {\n   // code declarations\n}\n</pre>\n<p>To call the namespace-enabled version of either function or variable, prepend (::) the namespace name as follows \u2212</p>\n<pre class=\"result notranslate\">\nname::code;  // code could be variable or function.\n</pre>\n<p>Let us see how namespace scope the entities including variable and functions \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/0xMQ1K\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\n// first name space\nnamespace first_space {\n   void func() {\n      cout &lt;&lt; \"Inside first_space\" &lt;&lt; endl;\n   }\n}\n\n// second name space\nnamespace second_space {\n   void func() {\n      cout &lt;&lt; \"Inside second_space\" &lt;&lt; endl;\n   }\n}\n\nint main () {\n   // Calls function from first name space.\n   first_space::func();\n   \n   // Calls function from second name space.\n   second_space::func(); \n\n   return 0;\n}\n</pre>\n<p>If we compile and run above code, this would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nInside first_space\nInside second_space\n</pre>\n<h2>The using directive</h2>\n<p>You can also avoid prepending of namespaces with the <b>using namespace</b> directive. This directive tells the compiler that the subsequent code is making use of names in the specified namespace. The namespace is thus implied for the following code \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/8ggeE3\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\n// first name space\nnamespace first_space {\n   void func() {\n      cout &lt;&lt; \"Inside first_space\" &lt;&lt; endl;\n   }\n}\n\n// second name space\nnamespace second_space {\n   void func() {\n      cout &lt;&lt; \"Inside second_space\" &lt;&lt; endl;\n   }\n}\n\nusing namespace first_space;\nint main () {\n   // This calls function from first name space.\n   func();\n   \n   return 0;\n}\n</pre>\n<p>If we compile and run above code, this would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nInside first_space\n</pre>\n<p>The \u2018using\u2019 directive can also be used to refer to a particular item within a namespace. For example, if the only part of the std namespace that you intend to use is cout, you can refer to it as follows \u2212</p>\n<pre class=\"result notranslate\">\nusing std::cout;\n</pre>\n<p>Subsequent code can refer to cout without prepending the namespace, but other items in the <b>std </b> namespace will still need to be explicit as follows \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/J1UkeN\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing std::cout;\n\nint main () {\n   cout &lt;&lt; \"std::endl is used with std!\" &lt;&lt; std::endl;\n   \n   return 0;\n}\n</pre>\n<p>If we compile and run above code, this would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nstd::endl is used with std!\n</pre>\n<p>Names introduced in a <b>using</b> directive obey normal scope rules. The name is visible from the point of the <b>using</b> directive to the end of the scope in which the directive is found. Entities with the same name defined in an outer scope are hidden.</p>\n<h2>Discontiguous Namespaces</h2>\n<p>A namespace can be defined in several parts and so a namespace is made up of the sum of its separately defined parts. The separate parts of a namespace can be spread over multiple files.</p>\n<p>So, if one part of the namespace requires a name defined in another file, that name must still be declared. Writing a following namespace definition either defines a new namespace or adds new elements to an existing one \u2212</p>\n<pre class=\"result notranslate\">\nnamespace namespace_name {\n   // code declarations\n}\n</pre>\n<h2>Nested Namespaces</h2>\n<p>Namespaces can be nested where you can define one namespace inside another name space as follows \u2212</p>\n<pre class=\"result notranslate\">\nnamespace namespace_name1 {\n   // code declarations\n   namespace namespace_name2 {\n      // code declarations\n   }\n}\n</pre>\n<p>You can access members of nested namespace by using resolution operators as follows \u2212</p>\n<pre class=\"result notranslate\">\n// to access members of namespace_name2\nusing namespace namespace_name1::namespace_name2;\n\n// to access members of namespace:name1\nusing namespace namespace_name1;\n</pre>\n<p>In the above statements if you are using namespace_name1, then it will make elements of namespace_name2 available in the scope as follows \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/2ydw4V\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\n// first name space\nnamespace first_space {\n   void func() {\n      cout &lt;&lt; \"Inside first_space\" &lt;&lt; endl;\n   }\n   \n   // second name space\n   namespace second_space {\n      void func() {\n         cout &lt;&lt; \"Inside second_space\" &lt;&lt; endl;\n      }\n   }\n}\n\nusing namespace first_space::second_space;\nint main () {\n   // This calls function from second name space.\n   func();\n   \n   return 0;\n}\n</pre>\n<p>If we compile and run above code, this would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nInside second_space\n</pre>\n<h1>C++ Templates</h1>\n<p>Templates are the foundation of generic programming, which involves writing code in a way that is independent of any particular type.</p>\n<p>A template is a blueprint or formula for creating a generic class or a function. The library containers like iterators and algorithms are examples of generic programming and have been developed using template concept.</p>\n<p>There is a single definition of each container, such as <b>vector</b>, but we can define many different kinds of vectors for example, <b>vector &lt;int&gt;</b> or <b>vector &lt;string&gt;</b>.</p>\n<p>You can use templates to define functions as well as classes, let us see how they work \u2212</p>\n<h2>Function Template</h2>\n<p>The general form of a template function definition is shown here \u2212</p>\n<pre class=\"result notranslate\">\ntemplate &lt;class type&gt; ret-type func-name(parameter list) {\n   // body of function\n} \n</pre>\n<p>Here, type is a placeholder name for a data type used by the function. This name can be used within the function definition.</p>\n<p>The following is the example of a function template that returns the maximum of two values \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/6cvVGA\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\ntemplate &lt;typename T&gt;\ninline T const&amp; Max (T const&amp; a, T const&amp; b) { \n   return a &lt; b ? b:a; \n}\n\nint main () {\n   int i = 39;\n   int j = 20;\n   cout &lt;&lt; \"Max(i, j): \" &lt;&lt; Max(i, j) &lt;&lt; endl; \n\n   double f1 = 13.5; \n   double f2 = 20.7; \n   cout &lt;&lt; \"Max(f1, f2): \" &lt;&lt; Max(f1, f2) &lt;&lt; endl; \n\n   string s1 = \"Hello\"; \n   string s2 = \"World\"; \n   cout &lt;&lt; \"Max(s1, s2): \" &lt;&lt; Max(s1, s2) &lt;&lt; endl; \n\n   return 0;\n}\n</pre>\n<p>If we compile and run above code, this would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nMax(i, j): 39\nMax(f1, f2): 20.7\nMax(s1, s2): World\n</pre>\n<h2>Class Template</h2>\n<p>Just as we can define function templates, we can also define class templates. The general form of a generic class declaration is shown here \u2212</p>\n<pre class=\"result notranslate\">\ntemplate &lt;class type&gt; class class-name {\n   .\n   .\n   .\n}\n</pre>\n<p>Here, <b>type</b>  is the placeholder type name, which will be specified when a class is instantiated. You can define more than one generic data type by using a comma-separated list.</p>\n<p>Following is the example to define class Stack&lt;&gt; and implement generic methods to push and pop the elements from the stack \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/ixzLqn\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;cstdlib&gt;\n#include &lt;string&gt;\n#include &lt;stdexcept&gt;\n\nusing namespace std;\n\ntemplate &lt;class T&gt;\nclass Stack { \n   private: \n      vector&lt;T&gt; elems;    // elements \n\n   public: \n      void push(T const&amp;);  // push element \n      void pop();               // pop element \n      T top() const;            // return top element \n      \n      bool empty() const {      // return true if empty.\n         return elems.empty(); \n      } \n}; \n\ntemplate &lt;class T&gt;\nvoid Stack&lt;T&gt;::push (T const&amp; elem) { \n   // append copy of passed element \n   elems.push_back(elem);    \n} \n\ntemplate &lt;class T&gt;\nvoid Stack&lt;T&gt;::pop () { \n   if (elems.empty()) { \n      throw out_of_range(\"Stack&lt;&gt;::pop(): empty stack\"); \n   }\n   \n   // remove last element \n   elems.pop_back();         \n} \n\ntemplate &lt;class T&gt;\nT Stack&lt;T&gt;::top () const { \n   if (elems.empty()) { \n      throw out_of_range(\"Stack&lt;&gt;::top(): empty stack\"); \n   }\n   \n   // return copy of last element \n   return elems.back();      \n} \n\nint main() { \n   try {\n      Stack&lt;int&gt;         intStack;  // stack of ints \n      Stack&lt;string&gt; stringStack;    // stack of strings \n\n      // manipulate int stack \n      intStack.push(7); \n      cout &lt;&lt; intStack.top() &lt;&lt;endl; \n\n      // manipulate string stack \n      stringStack.push(\"hello\"); \n      cout &lt;&lt; stringStack.top() &lt;&lt; std::endl; \n      stringStack.pop(); \n      stringStack.pop(); \n   } catch (exception const&amp; ex) { \n      cerr &lt;&lt; \"Exception: \" &lt;&lt; ex.what() &lt;&lt;endl; \n      return -1;\n   } \n} \n</pre>\n<p>If we compile and run above code, this would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\n7\nhello\nException: Stack&lt;&gt;::pop(): empty stack\n</pre>\n<h1>C++ Preprocessor</h1>\n<p>The preprocessors are the directives, which give instructions to the compiler to preprocess the information before actual compilation starts.</p>\n<p>All preprocessor directives begin with #, and only white-space characters may appear before a preprocessor directive on a line. Preprocessor directives are not C++ statements, so they do not end in a semicolon (;).</p>\n<p>You already have seen a <b>#include</b> directive in all the examples. This macro is used to include a header file into the source file.</p>\n<p>There are number of preprocessor directives supported by C++ like #include, #define, #if, #else, #line, etc. Let us see important directives \u2212</p>\n<h2>The #define Preprocessor</h2>\n<p>The #define preprocessor directive creates symbolic constants. The symbolic constant is called a <b>macro</b> and the general form of the directive is \u2212</p>\n<pre class=\"result notranslate\">\n#define macro-name replacement-text \n</pre>\n<p>When this line appears in a file, all subsequent occurrences of macro in that file will be replaced by replacement-text before the program is compiled. For example \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\n#define PI 3.14159\n\nint main () {\n   cout &lt;&lt; \"Value of PI :\" &lt;&lt; PI &lt;&lt; endl; \n\n   return 0;\n}\n</pre>\n<p>Now, let us do the preprocessing of this code to see the result assuming we have the source code file. So let us compile it with -E option and redirect the result to test.p. Now, if you check test.p, it will have lots of information and at the bottom, you will find the value replaced as follows \u2212</p>\n<pre class=\"result notranslate\">\n$gcc -E test.cpp &gt; test.p\n\n...\nint main () {\n   cout &lt;&lt; \"Value of PI :\" &lt;&lt; 3.14159 &lt;&lt; endl; \n   return 0;\n}\n</pre>\n<h2>Function-Like Macros</h2>\n<p>You can use #define to define a macro which will take argument as follows \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/4pUj1I\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\n#define MIN(a,b) (((a)&lt;(b)) ? a : b)\n\nint main () {\n   int i, j;\n   \n   i = 100;\n   j = 30;\n   \n   cout &lt;&lt;\"The minimum is \" &lt;&lt; MIN(i, j) &lt;&lt; endl;\n\n   return 0;\n}\n</pre>\n<p>If we compile and run above code, this would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nThe minimum is 30\n</pre>\n<h2>Conditional Compilation</h2>\n<p>There are several directives, which can be used to compile selective portions of your program's source code. This process is called conditional compilation.</p>\n<p>The conditional preprocessor construct is much like the \u2018if\u2019 selection structure. Consider the following preprocessor code \u2212</p>\n<pre class=\"result notranslate\">\n#ifndef NULL\n   #define NULL 0\n#endif\n</pre>\n<p>You can compile a program for debugging purpose. You can also turn on or off the debugging using a single macro as follows \u2212</p>\n<pre class=\"result notranslate\">\n#ifdef DEBUG\n   cerr &lt;&lt;\"Variable x = \" &lt;&lt; x &lt;&lt; endl;\n#endif\n</pre>\n<p>This causes the <b>cerr</b> statement to be compiled in the program if the symbolic constant DEBUG has been defined before directive #ifdef DEBUG. You can use #if 0 statment to comment out a portion of the program as follows \u2212</p>\n<pre class=\"result notranslate\">\n#if 0\n   code prevented from compiling\n#endif\n</pre>\n<p>Let us try the following example \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/r3qAkV\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n#define DEBUG\n\n#define MIN(a,b) (((a)&lt;(b)) ? a : b)\n\nint main () {\n   int i, j;\n   \n   i = 100;\n   j = 30;\n\n#ifdef DEBUG\n   cerr &lt;&lt;\"Trace: Inside main function\" &lt;&lt; endl;\n#endif\n\n#if 0\n   /* This is commented part */\n   cout &lt;&lt; MKSTR(HELLO C++) &lt;&lt; endl;\n#endif\n\n   cout &lt;&lt;\"The minimum is \" &lt;&lt; MIN(i, j) &lt;&lt; endl;\n\n#ifdef DEBUG\n   cerr &lt;&lt;\"Trace: Coming out of main function\" &lt;&lt; endl;\n#endif\n\n   return 0;\n}\n</pre>\n<p>If we compile and run above code, this would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nThe minimum is 30\nTrace: Inside main function\nTrace: Coming out of main function\n</pre>\n<h2>The # and ## Operators</h2>\n<p>The # and ## preprocessor operators are available in C++ and ANSI/ISO C. The # operator causes a replacement-text token to be converted to a string surrounded by quotes. </p>\n<p>Consider the following macro definition \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/54XMO7\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\n#define MKSTR( x ) #x\n\nint main () {\n\n   cout &lt;&lt; MKSTR(HELLO C++) &lt;&lt; endl;\n\n   return 0;\n}\n</pre>\n<p>If we compile and run above code, this would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nHELLO C++\n</pre>\n<p>Let us see how it worked. It is simple to understand that the C++ preprocessor turns the line \u2212</p>\n<pre class=\"result notranslate\">\ncout &lt;&lt; MKSTR(HELLO C++) &lt;&lt; endl;\n</pre>\n<p>Above line will be turned into the following line \u2212</p>\n<pre class=\"result notranslate\">\ncout &lt;&lt; \"HELLO C++\" &lt;&lt; endl;\n</pre>\n<p>The ## operator is used to concatenate two tokens. Here is an example \u2212</p>\n<pre class=\"result notranslate\">\n#define CONCAT( x, y )  x ## y\n</pre>\n<p>When CONCAT appears in the program, its arguments are concatenated and used to replace the macro. For example, CONCAT(HELLO, C++) is replaced by \"HELLO C++\" in the program as follows.</p>\n<a class=\"demo\" href=\"http://tpcg.io/xadPS5\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\n#define concat(a, b) a ## b\nint main() {\n   int xy = 100;\n   \n   cout &lt;&lt; concat(x, y);\n   return 0;\n}\n</pre>\n<p>If we compile and run above code, this would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\n100\n</pre>\n<p>Let us see how it worked. It is simple to understand that the C++ preprocessor transforms \u2212</p>\n<pre class=\"result notranslate\">\ncout &lt;&lt; concat(x, y);\n</pre>\n<p>Above line will be transformed into the following line \u2212</p>\n<pre class=\"result notranslate\">\ncout &lt;&lt; xy;\n</pre>\n<h2>Predefined C++ Macros</h2>\n<p>C++ provides a number of predefined macros mentioned below \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Macro &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>__LINE__</b></p>\n<p>This contains the current line number of the program when it is being compiled.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>__FILE__</b></p>\n<p>This contains the current file name of the program when it is being compiled.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>__DATE__</b></p>\n<p>This contains a string of the form month/day/year that is the date of the translation of the source file into object code.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>__TIME__</b></p>\n<p>This contains a string of the form hour:minute:second that is the time at which the program was compiled.</p></td>\n</tr>\n</table>\n<p>Let us see an example for all the above macros \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/uO9yHk\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main () {\n   cout &lt;&lt; \"Value of __LINE__ : \" &lt;&lt; __LINE__ &lt;&lt; endl;\n   cout &lt;&lt; \"Value of __FILE__ : \" &lt;&lt; __FILE__ &lt;&lt; endl;\n   cout &lt;&lt; \"Value of __DATE__ : \" &lt;&lt; __DATE__ &lt;&lt; endl;\n   cout &lt;&lt; \"Value of __TIME__ : \" &lt;&lt; __TIME__ &lt;&lt; endl;\n\n   return 0;\n}\n</pre>\n<p>If we compile and run above code, this would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nValue of __LINE__ : 6\nValue of __FILE__ : test.cpp\nValue of __DATE__ : Feb 28 2011\nValue of __TIME__ : 18:52:48\n</pre>\n<h1>C++ Signal Handling</h1>\n<p>Signals are the interrupts delivered to a process by the operating system which can terminate a program prematurely. You can generate interrupts by pressing Ctrl+C on a UNIX, LINUX, Mac OS X or Windows system.</p>\n<p>There are signals which can not be caught by the program but there is a following list of signals which you can catch in your program and can take appropriate actions based on the signal. These signals are defined in C++ header file &lt;csignal&gt;.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Signal &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>SIGABRT</b></p>\n<p>Abnormal termination of the program, such as a call to <b>abort</b>.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>SIGFPE</b></p>\n<p>An erroneous arithmetic operation, such as a divide by zero or an operation resulting in overflow.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>SIGILL</b></p>\n<p>Detection of an illegal instruction.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>SIGINT</b></p>\n<p>Receipt of an interactive attention signal.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>SIGSEGV</b></p>\n<p>An invalid access to storage.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><p><b>SIGTERM</b></p>\n<p>A termination request sent to the program.</p></td>\n</tr>\n</table>\n<h2>The signal() Function</h2>\n<p>C++ signal-handling library provides function <b>signal</b> to trap unexpected events. Following is the syntax of the signal() function \u2212</p>\n<pre class=\"result notranslate\">\nvoid (*signal (int sig, void (*func)(int)))(int); \n</pre>\n<p>Keeping it simple, this function receives two arguments: first argument as an integer which represents signal number and second argument as a pointer to the signal-handling function.</p>\n<p>Let us write a simple C++ program where we will catch SIGINT signal using signal() function. Whatever signal you want to catch in your program, you must register that signal using <b>signal</b> function and associate it with a signal handler. Examine the following example \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;csignal&gt;\n\nusing namespace std;\n\nvoid signalHandler( int signum ) {\n   cout &lt;&lt; \"Interrupt signal (\" &lt;&lt; signum &lt;&lt; \") received.\\n\";\n\n   // cleanup and close up stuff here  \n   // terminate program  \n\n   exit(signum);  \n}\n\nint main () {\n   // register signal SIGINT and signal handler  \n   signal(SIGINT, signalHandler);  \n\n   while(1) {\n      cout &lt;&lt; \"Going to sleep....\" &lt;&lt; endl;\n      sleep(1);\n   }\n\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nGoing to sleep....\nGoing to sleep....\nGoing to sleep....\n</pre>\n<p>Now, press Ctrl+c to interrupt the program and you will see that your program will catch the signal and would come out by printing something as follows \u2212</p>\n<pre class=\"result notranslate\">\nGoing to sleep....\nGoing to sleep....\nGoing to sleep....\nInterrupt signal (2) received.\n</pre>\n<h2>The raise() Function</h2>\n<p>You can generate signals by function <b>raise()</b>, which takes an integer signal number as an argument and has the following syntax.</p>\n<pre class=\"result notranslate\">\nint raise (signal sig);\n</pre>\n<p>Here, <b>sig</b> is the signal number to send any of the signals: SIGINT, SIGABRT, SIGFPE, SIGILL, SIGSEGV, SIGTERM, SIGHUP. Following is the example where we raise a signal internally using raise() function as follows \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;csignal&gt;\n\nusing namespace std;\n\nvoid signalHandler( int signum ) {\n   cout &lt;&lt; \"Interrupt signal (\" &lt;&lt; signum &lt;&lt; \") received.\\n\";\n\n   // cleanup and close up stuff here  \n   // terminate program  \n\n   exit(signum);  \n}\n\nint main () {\n   int i = 0;\n   // register signal SIGINT and signal handler  \n   signal(SIGINT, signalHandler);  \n\n   while(++i) {\n      cout &lt;&lt; \"Going to sleep....\" &lt;&lt; endl;\n      if( i == 3 ) {\n         raise( SIGINT);\n      }\n      sleep(1);\n   }\n\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result and would come out automatically \u2212</p>\n<pre class=\"result notranslate\">\nGoing to sleep....\nGoing to sleep....\nGoing to sleep....\nInterrupt signal (2) received.\n</pre>\n<h1>C++ Multithreading</h1>\n<p>Multithreading is a specialized form of multitasking and a multitasking is the feature that allows your computer to run two or more programs concurrently.  In general, there are two types of multitasking: process-based and thread-based.</p>\n<p>Process-based multitasking handles the concurrent execution of programs. Thread-based multitasking deals with the concurrent execution of pieces of the same program.</p>\n<p>A multithreaded program contains two or more parts that can run concurrently. Each part of such a program is called a thread, and each thread defines a separate path of execution.</p>\n<p>C++ does not contain any built-in support for multithreaded applications. Instead, it relies entirely upon the operating system to provide this feature.</p>\n<p>This tutorial assumes that you are working on Linux OS and we are going to write multi-threaded C++ program using POSIX. POSIX Threads, or Pthreads provides  API which are available on many Unix-like POSIX systems such as FreeBSD, NetBSD, GNU/Linux, Mac OS X and Solaris.</p>\n<h2>Creating Threads</h2>\n<p>The following routine is used to create a POSIX thread \u2212</p>\n<pre class=\"result notranslate\">\n#include &lt;pthread.h&gt;\npthread_create (thread, attr, start_routine, arg) \n</pre>\n<p>Here, <b>pthread_create</b> creates a new thread and makes it executable. This routine can be called any number of times from anywhere within your code. Here is the description of the parameters \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Parameter &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>thread</b></p>\n<p>An opaque, unique identifier for the new thread returned by the subroutine.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>attr</b></p>\n<p>An opaque attribute object that may be used to set thread attributes. You can specify a thread attributes object, or NULL for the default values.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>start_routine</b></p>\n<p>The C++ routine that the thread will execute once it is created.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>arg</b></p>\n<p>A single argument that may be passed to start_routine. It must be passed by reference as a pointer cast of type void. NULL may be used if no argument is to be passed.</p></td>\n</tr>\n</table>\n<p>The maximum number of threads that may be created by a process is implementation dependent. Once created, threads are peers, and may create other threads. There is no implied hierarchy or dependency between threads.</p>\n<h2>Terminating Threads</h2>\n<p>There is following routine which we use to terminate a POSIX thread \u2212</p>\n<pre class=\"result notranslate\">\n#include &lt;pthread.h&gt;\npthread_exit (status) \n</pre>\n<p>Here <b>pthread_exit</b> is used to explicitly exit a thread. Typically, the pthread_exit() routine is called after a thread has completed its work and is no longer required to exist.</p>\n<p>If main() finishes before the threads it has created, and exits with pthread_exit(), the other threads will continue to execute. Otherwise, they will be automatically terminated when main() finishes.</p>\n<p><b>Example</b></p>\n<p>This simple example code creates 5 threads with the pthread_create() routine. Each thread prints a \"Hello World!\" message, and then terminates with a call to pthread_exit(). </p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;cstdlib&gt;\n#include &lt;pthread.h&gt;\n\nusing namespace std;\n\n#define NUM_THREADS 5\n\nvoid *PrintHello(void *threadid) {\n   long tid;\n   tid = (long)threadid;\n   cout &lt;&lt; \"Hello World! Thread ID, \" &lt;&lt; tid &lt;&lt; endl;\n   pthread_exit(NULL);\n}\n\nint main () {\n   pthread_t threads[NUM_THREADS];\n   int rc;\n   int i;\n   \n   for( i = 0; i &lt; NUM_THREADS; i++ ) {\n      cout &lt;&lt; \"main() : creating thread, \" &lt;&lt; i &lt;&lt; endl;\n      rc = pthread_create(&amp;threads[i], NULL, PrintHello, (void *)i);\n      \n      if (rc) {\n         cout &lt;&lt; \"Error:unable to create thread,\" &lt;&lt; rc &lt;&lt; endl;\n         exit(-1);\n      }\n   }\n   pthread_exit(NULL);\n}\n</pre>\n<p>Compile the following program using -lpthread library as follows \u2212</p>\n<pre class=\"result notranslate\">\n$gcc test.cpp -lpthread\n</pre>\n<p>Now, execute your program which gives the following output \u2212</p>\n<pre class=\"result notranslate\">\nmain() : creating thread, 0\nmain() : creating thread, 1\nmain() : creating thread, 2\nmain() : creating thread, 3\nmain() : creating thread, 4\nHello World! Thread ID, 0\nHello World! Thread ID, 1\nHello World! Thread ID, 2\nHello World! Thread ID, 3\nHello World! Thread ID, 4\n</pre>\n<h2>Passing Arguments to Threads</h2>\n<p>This example shows how to pass multiple arguments via a structure. You can pass any data type in a thread callback because it points to void as explained in the following example \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;cstdlib&gt;\n#include &lt;pthread.h&gt;\n\nusing namespace std;\n\n#define NUM_THREADS 5\n\nstruct thread_data {\n   int  thread_id;\n   char *message;\n};\n\nvoid *PrintHello(void *threadarg) {\n   struct thread_data *my_data;\n   my_data = (struct thread_data *) threadarg;\n\n   cout &lt;&lt; \"Thread ID : \" &lt;&lt; my_data-&gt;thread_id ;\n   cout &lt;&lt; \" Message : \" &lt;&lt; my_data-&gt;message &lt;&lt; endl;\n\n   pthread_exit(NULL);\n}\n\nint main () {\n   pthread_t threads[NUM_THREADS];\n   struct thread_data td[NUM_THREADS];\n   int rc;\n   int i;\n\n   for( i = 0; i &lt; NUM_THREADS; i++ ) {\n      cout &lt;&lt;\"main() : creating thread, \" &lt;&lt; i &lt;&lt; endl;\n      td[i].thread_id = i;\n      td[i].message = \"This is message\";\n      rc = pthread_create(&amp;threads[i], NULL, PrintHello, (void *)&amp;td[i]);\n      \n      if (rc) {\n         cout &lt;&lt; \"Error:unable to create thread,\" &lt;&lt; rc &lt;&lt; endl;\n         exit(-1);\n      }\n   }\n   pthread_exit(NULL);\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nmain() : creating thread, 0\nmain() : creating thread, 1\nmain() : creating thread, 2\nmain() : creating thread, 3\nmain() : creating thread, 4\nThread ID : 3 Message : This is message\nThread ID : 2 Message : This is message\nThread ID : 0 Message : This is message\nThread ID : 1 Message : This is message\nThread ID : 4 Message : This is message\n</pre>\n<h2>Joining and Detaching Threads</h2>\n<p>There are following two routines which we can use to join or detach threads \u2212</p>\n<pre class=\"result notranslate\">\npthread_join (threadid, status) \npthread_detach (threadid) \n</pre>\n<p>The pthread_join() subroutine blocks the calling thread until the specified 'threadid' thread terminates. When a thread is created, one of its attributes defines whether it is joinable or detached. Only threads that are created as joinable can be joined. If a thread is created as detached, it can never be joined.</p>\n<p>This example demonstrates how to wait for thread completions by using the Pthread join routine.</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;cstdlib&gt;\n#include &lt;pthread.h&gt;\n#include &lt;unistd.h&gt;\n\nusing namespace std;\n\n#define NUM_THREADS 5\n\nvoid *wait(void *t) {\n   int i;\n   long tid;\n\n   tid = (long)t;\n\n   sleep(1);\n   cout &lt;&lt; \"Sleeping in thread \" &lt;&lt; endl;\n   cout &lt;&lt; \"Thread with id : \" &lt;&lt; tid &lt;&lt; \"  ...exiting \" &lt;&lt; endl;\n   pthread_exit(NULL);\n}\n\nint main () {\n   int rc;\n   int i;\n   pthread_t threads[NUM_THREADS];\n   pthread_attr_t attr;\n   void *status;\n\n   // Initialize and set thread joinable\n   pthread_attr_init(&amp;attr);\n   pthread_attr_setdetachstate(&amp;attr, PTHREAD_CREATE_JOINABLE);\n\n   for( i = 0; i &lt; NUM_THREADS; i++ ) {\n      cout &lt;&lt; \"main() : creating thread, \" &lt;&lt; i &lt;&lt; endl;\n      rc = pthread_create(&amp;threads[i], attr, wait, (void *)i );\n      \n      if (rc) {\n         cout &lt;&lt; \"Error:unable to create thread,\" &lt;&lt; rc &lt;&lt; endl;\n         exit(-1);\n      }\n   }\n\n   // free attribute and wait for the other threads\n   pthread_attr_destroy(&amp;attr);\n   for( i = 0; i &lt; NUM_THREADS; i++ ) {\n      rc = pthread_join(threads[i], &amp;status);\n      if (rc) {\n         cout &lt;&lt; \"Error:unable to join,\" &lt;&lt; rc &lt;&lt; endl;\n         exit(-1);\n      }\n      \n      cout &lt;&lt; \"Main: completed thread id :\" &lt;&lt; i ;\n      cout &lt;&lt; \"  exiting with status :\" &lt;&lt; status &lt;&lt; endl;\n   }\n\n   cout &lt;&lt; \"Main: program exiting.\" &lt;&lt; endl;\n   pthread_exit(NULL);\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nmain() : creating thread, 0\nmain() : creating thread, 1\nmain() : creating thread, 2\nmain() : creating thread, 3\nmain() : creating thread, 4\nSleeping in thread\nThread with id : 0 .... exiting\nSleeping in thread\nThread with id : 1 .... exiting\nSleeping in thread\nThread with id : 2 .... exiting\nSleeping in thread\nThread with id : 3 .... exiting\nSleeping in thread\nThread with id : 4 .... exiting\nMain: completed thread id :0  exiting with status :0\nMain: completed thread id :1  exiting with status :0\nMain: completed thread id :2  exiting with status :0\nMain: completed thread id :3  exiting with status :0\nMain: completed thread id :4  exiting with status :0\nMain: program exiting.\n</pre>\n<h1>C++ Web Programming</h1>\n<h2>What is CGI?</h2>\n<ul class=\"list\">\n<li><p>The Common Gateway Interface, or CGI, is a set of standards that define how information is exchanged between the web server and a custom script.</p></li>\n<li><p>The CGI specs are currently maintained by the NCSA and NCSA defines CGI is as follows \u2212</p></li>\n<li><p>The Common Gateway Interface, or CGI, is a standard for external gateway programs to interface with information servers such as HTTP servers.</p></li>\n<li><p>The current version is CGI/1.1 and CGI/1.2 is under progress.</p></li>\n</ul>\n<h2>Web Browsing</h2>\n<p>To understand the concept of CGI, let's see what happens when we click a hyperlink to browse a particular web page or URL.</p>\n<ul class=\"list\">\n<li><p>Your browser contacts the HTTP web server and demand for the URL ie. filename.</p></li>\n<li><p>Web Server will parse the URL and will look for the filename. If it finds requested file then web server sends that file back to the browser otherwise sends an error message indicating that you have requested a wrong file.</p></li>\n<li><p>Web browser takes response from web server and displays either the received file or error message based on the received response.</p></li>\n</ul>\n<p>However, it is possible to set up the HTTP server in such a way that whenever a file in a certain directory is requested, that file is not sent back; instead it is executed as a program, and produced output from the program is sent back to your browser to display.</p>\n<p>The Common Gateway Interface (CGI) is a standard protocol for enabling applications (called CGI programs or CGI scripts) to interact with Web servers and with clients. These CGI programs can be a written in Python, PERL, Shell, C or C++ etc.</p>\n<h2>CGI Architecture Diagram</h2>\n<p>The following simple program shows a simple architecture of CGI \u2212</p>\n<img alt=\"CGI Architecture\" src=\"/cplusplus/images/cgiarch.gif\"/>\n<h2>Web Server Configuration</h2>\n<p>Before you proceed with CGI Programming, make sure that your Web Server supports CGI and it is configured to handle CGI Programs. All the CGI Programs to be executed by the HTTP server are kept in a pre-configured directory. This directory is called CGI directory and by convention it is named as /var/www/cgi-bin. By convention CGI files will have extension as <b>.cgi</b>, though they are C++ executable.</p>\n<p>By default, Apache Web Server is configured to run CGI programs in /var/www/cgi-bin. If you want to specify any other directory to run your CGI scripts, you can modify the following section in the httpd.conf file \u2212</p>\n<pre class=\"prettyprint notranslate\">\n&lt;Directory \"/var/www/cgi-bin\"&gt;\n   AllowOverride None\n   Options ExecCGI\n   Order allow,deny\n   Allow from all\n&lt;/Directory&gt;\n \n&lt;Directory \"/var/www/cgi-bin\"&gt;\n   Options All\n&lt;/Directory&gt;\n</pre>\n<p>Here, I assume that you have Web Server up and running successfully and you are able to run any other CGI program like Perl or Shell etc.</p>\n<h2>First CGI Program</h2>\n<p>Consider the following C++ Program content \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main () {\n   cout &lt;&lt; \"Content-type:text/html\\r\\n\\r\\n\";\n   cout &lt;&lt; \"&lt;html&gt;\\n\";\n   cout &lt;&lt; \"&lt;head&gt;\\n\";\n   cout &lt;&lt; \"&lt;title&gt;Hello World - First CGI Program&lt;/title&gt;\\n\";\n   cout &lt;&lt; \"&lt;/head&gt;\\n\";\n   cout &lt;&lt; \"&lt;body&gt;\\n\";\n   cout &lt;&lt; \"&lt;h2&gt;Hello World! This is my first CGI program&lt;/h2&gt;\\n\";\n   cout &lt;&lt; \"&lt;/body&gt;\\n\";\n   cout &lt;&lt; \"&lt;/html&gt;\\n\";\n   \n   return 0;\n}\n</pre>\n<p>Compile above code and name the executable  as cplusplus.cgi. This file is being kept in /var/www/cgi-bin directory and it has following content. Before running your CGI program make sure you have change mode of file using <b>chmod 755 cplusplus.cgi</b> UNIX command to make file executable.</p>\n<h2>My First CGI program</h2>\n<p>The above C++ program is a simple program which is writing its output on STDOUT file i.e. screen. There is one important and extra feature available which is first line printing <b>Content-type:text/html\\r\\n\\r\\n</b>. This line is sent back to the browser and specify the content type to be displayed on the browser screen. Now you must have understood the basic concept of CGI and you can write many complicated CGI programs using Python. A C++ CGI program can interact with any other external system, such as RDBMS, to exchange information.</p>\n<h2>HTTP Header</h2>\n<p>The line <b>Content-type:text/html\\r\\n\\r\\n</b> is a part of HTTP header, which is sent to the browser to understand the content. All the HTTP header will be in the following form \u2212</p>\n<pre class=\"result notranslate\">\nHTTP Field Name: Field Content\n \nFor Example\nContent-type: text/html\\r\\n\\r\\n\n</pre>\n<p>There are few other important HTTP headers, which you will use frequently in your CGI Programming.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Header &amp; Description</th></tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>Content-type:</b></p>\n<p>A MIME string defining the format of the file being returned. Example is Content-type:text/html.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>Expires: Date</b></p>\n<p>The date the information becomes invalid. This should be used by the browser to decide when a page needs to be refreshed. A valid date string should be in the format 01 Jan 1998 12:00:00 GMT.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>Location: URL</b></p>\n<p>The URL that should be returned instead of the URL requested. You can use this filed to redirect a request to any file.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>Last-modified: Date</b></p>\n<p>The date of last modification of the resource.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>Content-length: N</b></p>\n<p>The length, in bytes, of the data being returned. The browser uses this value to report the estimated download time for a file.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><p><b>Set-Cookie: String</b></p>\n<p>Set the cookie passed through the <i>string</i>.</p></td>\n</tr>\n</table>\n<h2>CGI Environment Variables</h2>\n<p>All the CGI program will have access to the following environment variables. These variables play an important role while writing any CGI program.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Variable Name &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>CONTENT_TYPE</b></p>\n<p>The data type of the content, used when the client is sending attached content to the server. For example file upload etc.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>CONTENT_LENGTH</b></p>\n<p>The length of the query information that is available only for POST requests.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>HTTP_COOKIE</b></p>\n<p>Returns the set cookies in the form of key &amp; value pair.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>HTTP_USER_AGENT</b></p>\n<p>The User-Agent request-header field contains information about the user agent originating the request. It is a name of the web browser.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>PATH_INFO</b></p>\n<p>The path for the CGI script.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><p><b>QUERY_STRING</b></p>\n<p>The URL-encoded information that is sent with GET method request.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">7</td>\n<td><p><b>REMOTE_ADDR</b></p>\n<p>The IP address of the remote host making the request. This can be useful for logging or for authentication purpose.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">8</td>\n<td><p><b>REMOTE_HOST</b></p>\n<p>The fully qualified name of the host making the request. If this information is not available then REMOTE_ADDR can be used to get IR address.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">9</td>\n<td><p><b>REQUEST_METHOD</b></p>\n<p>The method used to make the request. The most common methods are GET and POST.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">10</td>\n<td><p><b>SCRIPT_FILENAME</b></p>\n<p>The full path to the CGI script.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">11</td>\n<td><p><b>SCRIPT_NAME</b></p>\n<p>The name of the CGI script.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">12</td>\n<td><p><b>SERVER_NAME</b></p>\n<p>The server's hostname or IP Address.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">13</td>\n<td><p><b>SERVER_SOFTWARE</b></p>\n<p>The name and version of the software the server is running.</p></td>\n</tr>\n</table>\n<p>Here is small CGI program to list out all the CGI variables.</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;stdlib.h&gt;\nusing namespace std;\n\nconst string ENV[ 24 ] = {\n   \"COMSPEC\", \"DOCUMENT_ROOT\", \"GATEWAY_INTERFACE\",   \n   \"HTTP_ACCEPT\", \"HTTP_ACCEPT_ENCODING\",             \n   \"HTTP_ACCEPT_LANGUAGE\", \"HTTP_CONNECTION\",         \n   \"HTTP_HOST\", \"HTTP_USER_AGENT\", \"PATH\",            \n   \"QUERY_STRING\", \"REMOTE_ADDR\", \"REMOTE_PORT\",      \n   \"REQUEST_METHOD\", \"REQUEST_URI\", \"SCRIPT_FILENAME\",\n   \"SCRIPT_NAME\", \"SERVER_ADDR\", \"SERVER_ADMIN\",      \n   \"SERVER_NAME\",\"SERVER_PORT\",\"SERVER_PROTOCOL\",     \n   \"SERVER_SIGNATURE\",\"SERVER_SOFTWARE\" };   \n\nint main () {\n   cout &lt;&lt; \"Content-type:text/html\\r\\n\\r\\n\";\n   cout &lt;&lt; \"&lt;html&gt;\\n\";\n   cout &lt;&lt; \"&lt;head&gt;\\n\";\n   cout &lt;&lt; \"&lt;title&gt;CGI Environment Variables&lt;/title&gt;\\n\";\n   cout &lt;&lt; \"&lt;/head&gt;\\n\";\n   cout &lt;&lt; \"&lt;body&gt;\\n\";\n   cout &lt;&lt; \"&lt;table border = \\\"0\\\" cellspacing = \\\"2\\\"&gt;\";\n\n   for ( int i = 0; i &lt; 24; i++ ) {\n      cout &lt;&lt; \"&lt;tr&gt;&lt;td&gt;\" &lt;&lt; ENV[ i ] &lt;&lt; \"&lt;/td&gt;&lt;td&gt;\";\n      \n      // attempt to retrieve value of environment variable\n      char *value = getenv( ENV[ i ].c_str() );  \n      if ( value != 0 ) {\n         cout &lt;&lt; value;                                 \n      } else {\n         cout &lt;&lt; \"Environment variable does not exist.\";\n      }\n      cout &lt;&lt; \"&lt;/td&gt;&lt;/tr&gt;\\n\";\n   }\n   \n   cout &lt;&lt; \"&lt;/table&gt;&lt;\\n\";\n   cout &lt;&lt; \"&lt;/body&gt;\\n\";\n   cout &lt;&lt; \"&lt;/html&gt;\\n\";\n   \n   return 0;\n}\n</pre>\n<h2>C++ CGI Library</h2>\n<p>For real examples, you would need to do many operations by your CGI program. There is a CGI library written for C++ program which you can download from <a href=\"ftp://ftp.gnu.org/gnu/cgicc/\" rel=\"nofollow\" target=\"_blank\">ftp://ftp.gnu.org/gnu/cgicc/</a> and follow the steps to install the library \u2212</p>\n<pre class=\"result notranslate\">\n$tar xzf cgicc-X.X.X.tar.gz \n$cd cgicc-X.X.X/ \n$./configure --prefix=/usr \n$make\n$make install\n</pre>\n<p>You can check related documentation available at <a href=\"https://www.gnu.org/software/cgicc/doc/index.html\" rel=\"nofollow\" target=\"_blank\">\u2018C++ CGI Lib Documentation</a>.</p>\n<h2>GET and POST Methods</h2>\n<p>You must have come across many situations when you need to pass some information from your browser to web server and ultimately to your CGI Program. Most frequently browser uses two methods to pass this information to web server. These methods are GET Method and POST Method.</p>\n<h2>Passing Information Using GET Method</h2>\n<p>The GET method sends the encoded user information appended to the page request. The page and the encoded information are separated by the ? character as follows \u2212</p>\n<pre class=\"result notranslate\">\nhttp://www.test.com/cgi-bin/cpp.cgi?key1=value1&amp;key2=value2\n</pre>\n<p>The GET method is the default  method to pass information from browser to web server and it produces a long string that appears in your browser's Location:box. Never use the GET method if you have password or other sensitive information to pass to the server. The GET method has size limitation  and you can pass upto 1024 characters in a request string.</p>\n<p>When using GET method, information is passed using QUERY_STRING http header and will be accessible in your CGI Program through QUERY_STRING environment variable.</p>\n<p>You can pass information by simply concatenating key and value pairs alongwith any URL or you can use HTML &lt;FORM&gt; tags to pass information using GET method.</p>\n<h2>Simple URL Example: Get Method</h2>\n<p>Here is a simple URL which will pass two values to hello_get.py program using GET method.</p>\n<a href=\"/cgi-bin/cpp_get.cgi?first_name=ZARA&amp;last_name=ALI\" style=\"text-decoration:none;\" target=\"_blank\">/cgi-bin/cpp_get.cgi?first_name=ZARA&amp;last_name=ALI</a>\n<p>Below is a program to generate <b>cpp_get.cgi</b> CGI program to handle input given by web browser. We are going to use C++ CGI library which makes it very easy to access passed information \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;vector&gt;  \n#include &lt;string&gt;  \n#include &lt;stdio.h&gt;  \n#include &lt;stdlib.h&gt; \n\n#include &lt;cgicc/CgiDefs.h&gt; \n#include &lt;cgicc/Cgicc.h&gt; \n#include &lt;cgicc/HTTPHTMLHeader.h&gt; \n#include &lt;cgicc/HTMLClasses.h&gt;  \n\nusing namespace std;\nusing namespace cgicc;\n\nint main () {\n   Cgicc formData;\n   \n   cout &lt;&lt; \"Content-type:text/html\\r\\n\\r\\n\";\n   cout &lt;&lt; \"&lt;html&gt;\\n\";\n   cout &lt;&lt; \"&lt;head&gt;\\n\";\n   cout &lt;&lt; \"&lt;title&gt;Using GET and POST Methods&lt;/title&gt;\\n\";\n   cout &lt;&lt; \"&lt;/head&gt;\\n\";\n   cout &lt;&lt; \"&lt;body&gt;\\n\";\n\n   form_iterator fi = formData.getElement(\"first_name\");  \n   if( !fi-&gt;isEmpty() &amp;&amp; fi != (*formData).end()) {  \n      cout &lt;&lt; \"First name: \" &lt;&lt; **fi &lt;&lt; endl;  \n   } else {\n      cout &lt;&lt; \"No text entered for first name\" &lt;&lt; endl;  \n   }\n   \n   cout &lt;&lt; \"&lt;br/&gt;\\n\";\n   fi = formData.getElement(\"last_name\");  \n   if( !fi-&gt;isEmpty() &amp;&amp;fi != (*formData).end()) {  \n      cout &lt;&lt; \"Last name: \" &lt;&lt; **fi &lt;&lt; endl;  \n   } else {\n      cout &lt;&lt; \"No text entered for last name\" &lt;&lt; endl;  \n   }\n   \n   cout &lt;&lt; \"&lt;br/&gt;\\n\";\n   cout &lt;&lt; \"&lt;/body&gt;\\n\";\n   cout &lt;&lt; \"&lt;/html&gt;\\n\";\n   \n   return 0;\n}\n</pre>\n<p>Now, compile the above program as follows \u2212</p>\n<pre class=\"result notranslate\">\n$g++ -o cpp_get.cgi cpp_get.cpp -lcgicc\n</pre>\n<p>Generate cpp_get.cgi and put it in your CGI directory and try to access using following link \u2212</p>\n<a href=\"/cgi-bin/cpp_get.cgi?first_name=ZARA&amp;last_name=ALI\" style=\"text-decoration:none;\" target=\"_blank\">/cgi-bin/cpp_get.cgi?first_name=ZARA&amp;last_name=ALI</a>\n<p>This would generate following result \u2212</p>\n<pre class=\"result notranslate\">\nFirst name: ZARA \nLast name: ALI \n</pre>\n<h2>Simple FORM Example: GET Method</h2>\n<p>Here is a simple example which passes two values using HTML FORM and submit button. We are going to use same CGI script cpp_get.cgi to handle this input.</p>\n<pre class=\"prettyprint notranslate\">\n&lt;form action = \"/cgi-bin/cpp_get.cgi\" method = \"get\"&gt;\n   First Name: &lt;input type = \"text\" name = \"first_name\"&gt;  &lt;br /&gt;\n \n   Last Name: &lt;input type = \"text\" name = \"last_name\" /&gt;\n   &lt;input type = \"submit\" value = \"Submit\" /&gt;\n&lt;/form&gt;\n</pre>\n<p>Here is the actual output of the above form. You enter First and Last Name and\nthen click submit button to see the result.</p>\n<form action=\"/cgi-bin/cpp_get.cgi\" method=\"get\" target=\"_blank\">\nFirst Name: <input name=\"first_name\" type=\"text\">\n \nLast Name: <input name=\"last_name\" type=\"text\"/>\n<input type=\"submit\" value=\"Submit\"/>\n</input></form>\n<h2>Passing Information Using POST Method</h2>\n<p>A generally more reliable method  of passing information to a CGI program is the POST method. This packages the information in exactly the same way as GET methods, but instead of sending it as a text string after a ? in the URL it sends it as a separate message. This message comes into the CGI script in the form of the standard input.</p>\n<p>The same cpp_get.cgi program will handle POST method as well. Let us take same example as above, which passes two values using HTML FORM and submit button but this time with POST method as follows \u2212</p>\n<pre class=\"prettyprint notranslate\">\n&lt;form action = \"/cgi-bin/cpp_get.cgi\" method = \"post\"&gt;\n   First Name: &lt;input type = \"text\" name = \"first_name\"&gt;&lt;br /&gt;\n   Last Name: &lt;input type = \"text\" name = \"last_name\" /&gt;\n \n   &lt;input type = \"submit\" value = \"Submit\" /&gt;\n&lt;/form&gt;\n</pre>\n<p>Here is the actual output of the above form. You enter First and Last Name and\nthen click submit button to see the result.</p>\n<form action=\"/cgi-bin/cpp_get.cgi\" method=\"post\" target=\"_blank\">\nFirst Name: <input name=\"first_name\" type=\"text\"/>\n \nLast Name: <input name=\"last_name\" type=\"text\"/>\n<input type=\"submit\" value=\"Submit\"/>\n</form>\n<h2>Passing Checkbox Data to CGI Program</h2>\n<p>Checkboxes are used when more than one option is required to be selected.</p>\n<p>Here is example HTML code for a form with two checkboxes \u2212</p>\n<pre class=\"prettyprint notranslate\">\n&lt;form action = \"/cgi-bin/cpp_checkbox.cgi\" method = \"POST\" target = \"_blank\"&gt;\n   &lt;input type = \"checkbox\" name = \"maths\" value = \"on\" /&gt; Maths\n   &lt;input type = \"checkbox\" name = \"physics\" value = \"on\" /&gt; Physics\n   &lt;input type = \"submit\" value = \"Select Subject\" /&gt;\n&lt;/form&gt;\n</pre>\n<p> The result of this code is the following form \u2212</p>\n<form action=\"/cgi-bin/cpp_checkbox.cgi\" method=\"post\" target=\"_blank\">\n<input name=\"maths\" type=\"checkbox\" value=\"on\"/> Maths\n<input name=\"physics\" type=\"checkbox\" value=\"on\"/> Physics\n<input type=\"submit\" value=\"Select Subject\"/>\n</form>\n<p>Below is C++ program, which will generate cpp_checkbox.cgi script to handle input given by web browser through checkbox button.</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;vector&gt;  \n#include &lt;string&gt;  \n#include &lt;stdio.h&gt;  \n#include &lt;stdlib.h&gt; \n\n#include &lt;cgicc/CgiDefs.h&gt; \n#include &lt;cgicc/Cgicc.h&gt; \n#include &lt;cgicc/HTTPHTMLHeader.h&gt; \n#include &lt;cgicc/HTMLClasses.h&gt; \n\nusing namespace std;\nusing namespace cgicc;\n\nint main () {\n   Cgicc formData;\n   bool maths_flag, physics_flag;\n\n   cout &lt;&lt; \"Content-type:text/html\\r\\n\\r\\n\";\n   cout &lt;&lt; \"&lt;html&gt;\\n\";\n   cout &lt;&lt; \"&lt;head&gt;\\n\";\n   cout &lt;&lt; \"&lt;title&gt;Checkbox Data to CGI&lt;/title&gt;\\n\";\n   cout &lt;&lt; \"&lt;/head&gt;\\n\";\n   cout &lt;&lt; \"&lt;body&gt;\\n\";\n\n   maths_flag = formData.queryCheckbox(\"maths\");\n   if( maths_flag ) {  \n      cout &lt;&lt; \"Maths Flag: ON \" &lt;&lt; endl;  \n   } else {\n      cout &lt;&lt; \"Maths Flag: OFF \" &lt;&lt; endl;  \n   }\n   cout &lt;&lt; \"&lt;br/&gt;\\n\";\n\n   physics_flag = formData.queryCheckbox(\"physics\");\n   if( physics_flag ) {  \n      cout &lt;&lt; \"Physics Flag: ON \" &lt;&lt; endl;  \n   } else {\n      cout &lt;&lt; \"Physics Flag: OFF \" &lt;&lt; endl;  \n   }\n   \n   cout &lt;&lt; \"&lt;br/&gt;\\n\";\n   cout &lt;&lt; \"&lt;/body&gt;\\n\";\n   cout &lt;&lt; \"&lt;/html&gt;\\n\";\n   \n   return 0;\n}\n</pre>\n<h2>Passing Radio Button Data to CGI Program</h2>\n<p>Radio Buttons are used when only one option is required to be selected.</p>\n<p>Here is example HTML code for a form with two radio button \u2212</p>\n<pre class=\"prettyprint notranslate\">\n&lt;form action = \"/cgi-bin/cpp_radiobutton.cgi\" method = \"post\" target = \"_blank\"&gt;\n   &lt;input type = \"radio\" name = \"subject\" value = \"maths\" checked = \"checked\"/&gt; Maths \n   &lt;input type = \"radio\" name = \"subject\" value = \"physics\" /&gt; Physics\n   &lt;input type = \"submit\" value = \"Select Subject\" /&gt;\n&lt;/form&gt;\n</pre>\n<p>The result of this code is the following form \u2212</p>\n<form action=\"/cgi-bin/cpp_radiobutton.cgi\" method=\"post\" target=\"_blank\">\n<input checked=\"checked\" name=\"subject\" type=\"radio\" value=\"Maths\"/> Maths\n<input name=\"subject\" type=\"radio\" value=\"Physics\"/> Physics\n<input type=\"submit\" value=\"Select Subject\"/>\n</form>\n<p>Below is C++ program, which will generate cpp_radiobutton.cgi script to handle input given by web browser through radio buttons.</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;vector&gt;  \n#include &lt;string&gt;  \n#include &lt;stdio.h&gt;  \n#include &lt;stdlib.h&gt; \n\n#include &lt;cgicc/CgiDefs.h&gt; \n#include &lt;cgicc/Cgicc.h&gt; \n#include &lt;cgicc/HTTPHTMLHeader.h&gt; \n#include &lt;cgicc/HTMLClasses.h&gt; \n\nusing namespace std;\nusing namespace cgicc;\n\nint main () {\n   Cgicc formData;\n  \n   cout &lt;&lt; \"Content-type:text/html\\r\\n\\r\\n\";\n   cout &lt;&lt; \"&lt;html&gt;\\n\";\n   cout &lt;&lt; \"&lt;head&gt;\\n\";\n   cout &lt;&lt; \"&lt;title&gt;Radio Button Data to CGI&lt;/title&gt;\\n\";\n   cout &lt;&lt; \"&lt;/head&gt;\\n\";\n   cout &lt;&lt; \"&lt;body&gt;\\n\";\n\n   form_iterator fi = formData.getElement(\"subject\");  \n   if( !fi-&gt;isEmpty() &amp;&amp; fi != (*formData).end()) {  \n      cout &lt;&lt; \"Radio box selected: \" &lt;&lt; **fi &lt;&lt; endl;  \n   }\n  \n   cout &lt;&lt; \"&lt;br/&gt;\\n\";\n   cout &lt;&lt; \"&lt;/body&gt;\\n\";\n   cout &lt;&lt; \"&lt;/html&gt;\\n\";\n   \n   return 0;\n}\n</pre>\n<h2>Passing Text Area Data to CGI Program</h2>\n<p>TEXTAREA element is used when multiline text has to be passed to the CGI Program.</p>\n<p>Here is example HTML code for a form with a TEXTAREA box \u2212</p>\n<pre class=\"prettyprint notranslate\">\n&lt;form action = \"/cgi-bin/cpp_textarea.cgi\" method = \"post\" target = \"_blank\"&gt;\n   &lt;textarea name = \"textcontent\" cols = \"40\" rows = \"4\"&gt;\n      Type your text here...\n   &lt;/textarea&gt;\n   &lt;input type = \"submit\" value = \"Submit\" /&gt;\n&lt;/form&gt;\n</pre>\n<p>The result of this code is the following form \u2212</p>\n<form action=\"/cgi-bin/cpp_textarea.cgi\" method=\"post\" target=\"_blank\">\n<textarea cols=\"40\" name=\"textcontent\" rows=\"4\">Type your text here...</textarea>\n<input type=\"submit\" value=\"Submit\"/>\n</form>\n<p>Below is C++ program, which will generate cpp_textarea.cgi script to handle input given by web browser through text area.</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;vector&gt;  \n#include &lt;string&gt;  \n#include &lt;stdio.h&gt;  \n#include &lt;stdlib.h&gt; \n\n#include &lt;cgicc/CgiDefs.h&gt; \n#include &lt;cgicc/Cgicc.h&gt; \n#include &lt;cgicc/HTTPHTMLHeader.h&gt; \n#include &lt;cgicc/HTMLClasses.h&gt; \n\nusing namespace std;\nusing namespace cgicc;\n\nint main () {\n   Cgicc formData;\n  \n   cout &lt;&lt; \"Content-type:text/html\\r\\n\\r\\n\";\n   cout &lt;&lt; \"&lt;html&gt;\\n\";\n   cout &lt;&lt; \"&lt;head&gt;\\n\";\n   cout &lt;&lt; \"&lt;title&gt;Text Area Data to CGI&lt;/title&gt;\\n\";\n   cout &lt;&lt; \"&lt;/head&gt;\\n\";\n   cout &lt;&lt; \"&lt;body&gt;\\n\";\n\n   form_iterator fi = formData.getElement(\"textcontent\");  \n   if( !fi-&gt;isEmpty() &amp;&amp; fi != (*formData).end()) {  \n      cout &lt;&lt; \"Text Content: \" &lt;&lt; **fi &lt;&lt; endl;  \n   } else {\n      cout &lt;&lt; \"No text entered\" &lt;&lt; endl;  \n   }\n  \n   cout &lt;&lt; \"&lt;br/&gt;\\n\";\n   cout &lt;&lt; \"&lt;/body&gt;\\n\";\n   cout &lt;&lt; \"&lt;/html&gt;\\n\";\n   \n   return 0;\n}\n</pre>\n<h2>Passing Drop down Box Data to CGI Program</h2>\n<p>Drop down Box is used when we have many options available but only one or two will be selected.</p>\n<p>Here is example HTML code for a form with one drop down box \u2212</p>\n<pre class=\"prettyprint notranslate\">\n&lt;form action = \"/cgi-bin/cpp_dropdown.cgi\" method = \"post\" target = \"_blank\"&gt;\n   &lt;select name = \"dropdown\"&gt;\n      &lt;option value = \"Maths\" selected&gt;Maths&lt;/option&gt;\n      &lt;option value = \"Physics\"&gt;Physics&lt;/option&gt;\n   &lt;/select&gt;\n   \n   &lt;input type = \"submit\" value = \"Submit\"/&gt;\n&lt;/form&gt;\n</pre>\n<p> The result of this code is the following form \u2212</p>\n<form action=\"/cgi-bin/cpp_dropdown.cgi\" method=\"post\" target=\"_blank\">\n<select name=\"dropdown\">\n<option selected=\"selected\" value=\"Maths\">Maths</option>\n<option value=\"Physics\">Physics</option>\n</select>\n<input type=\"submit\" value=\"Submit\"/>\n</form>\n<p>Below is C++ program, which will generate cpp_dropdown.cgi script to handle input given by web browser through drop down box.</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;vector&gt;  \n#include &lt;string&gt;  \n#include &lt;stdio.h&gt;  \n#include &lt;stdlib.h&gt; \n\n#include &lt;cgicc/CgiDefs.h&gt; \n#include &lt;cgicc/Cgicc.h&gt; \n#include &lt;cgicc/HTTPHTMLHeader.h&gt; \n#include &lt;cgicc/HTMLClasses.h&gt; \n\nusing namespace std;\nusing namespace cgicc;\n\nint main () {\n   Cgicc formData;\n  \n   cout &lt;&lt; \"Content-type:text/html\\r\\n\\r\\n\";\n   cout &lt;&lt; \"&lt;html&gt;\\n\";\n   cout &lt;&lt; \"&lt;head&gt;\\n\";\n   cout &lt;&lt; \"&lt;title&gt;Drop Down Box Data to CGI&lt;/title&gt;\\n\";\n   cout &lt;&lt; \"&lt;/head&gt;\\n\";\n   cout &lt;&lt; \"&lt;body&gt;\\n\";\n\n   form_iterator fi = formData.getElement(\"dropdown\");  \n   if( !fi-&gt;isEmpty() &amp;&amp; fi != (*formData).end()) {  \n      cout &lt;&lt; \"Value Selected: \" &lt;&lt; **fi &lt;&lt; endl;  \n   }\n  \n   cout &lt;&lt; \"&lt;br/&gt;\\n\";\n   cout &lt;&lt; \"&lt;/body&gt;\\n\";\n   cout &lt;&lt; \"&lt;/html&gt;\\n\";\n   \n   return 0;\n}\n</pre>\n<h2>Using Cookies in CGI</h2>\n<p>HTTP protocol is a stateless protocol. But for a commercial website it is required to maintain session information  among different pages. For example one user registration ends after completing many pages. But how to maintain user's session information across all the web pages.</p>\n<p>In many situations, using cookies is the most efficient method of remembering and tracking preferences, purchases, commissions, and other information required for better visitor experience or site statistics.</p>\n<h2>How It Works</h2>\n<p>Your server sends some data to the visitor's browser in the form of a cookie. The browser may accept the cookie. If it does, it is stored as a plain text record on the visitor's hard drive. Now, when the visitor arrives at another page on your site, the cookie is available for retrieval. Once retrieved, your server knows/remembers what was stored.</p>\n<p>Cookies are a plain text data record of 5 variable-length fields \u2212</p>\n<ul class=\"list\">\n<li><p><b>Expires</b> \u2212 This shows date the cookie will expire. If this is blank, the cookie will expire when the visitor quits the browser.</p></li>\n<li><p><b>Domain</b> \u2212 This shows domain name of your site.</p></li>\n<li><p><b>Path</b> \u2212 This shows path to the directory or web page that set the cookie. This may be blank if you want to retrieve the cookie from any directory or page.</p></li>\n<li><p><b>Secure</b> \u2212 If this field contains the word \"secure\" then the cookie may only be retrieved with a secure server. If this field is blank, no such restriction exists.</p></li>\n<li><p><b>Name = Value</b> \u2212 Cookies are set and retrieved  in the form of key and value pairs.</p></li>\n</ul>\n<h2>Setting up Cookies</h2>\n<p>It is very easy to send cookies to browser. These cookies will be sent along with HTTP Header before the Content-type filed. Assuming you want to set UserID and Password as cookies. So cookies setting will be done as follows</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main () {\n   cout &lt;&lt; \"Set-Cookie:UserID = XYZ;\\r\\n\";\n   cout &lt;&lt; \"Set-Cookie:Password = XYZ123;\\r\\n\";\n   cout &lt;&lt; \"Set-Cookie:Domain = www.tutorialspoint.com;\\r\\n\";\n   cout &lt;&lt; \"Set-Cookie:Path = /perl;\\n\";\n   cout &lt;&lt; \"Content-type:text/html\\r\\n\\r\\n\";\n\n   cout &lt;&lt; \"&lt;html&gt;\\n\";\n   cout &lt;&lt; \"&lt;head&gt;\\n\";\n   cout &lt;&lt; \"&lt;title&gt;Cookies in CGI&lt;/title&gt;\\n\";\n   cout &lt;&lt; \"&lt;/head&gt;\\n\";\n   cout &lt;&lt; \"&lt;body&gt;\\n\";\n\n   cout &lt;&lt; \"Setting cookies\" &lt;&lt; endl;  \n  \n   cout &lt;&lt; \"&lt;br/&gt;\\n\";\n   cout &lt;&lt; \"&lt;/body&gt;\\n\";\n   cout &lt;&lt; \"&lt;/html&gt;\\n\";\n   \n   return 0;\n}\n</pre>\n<p>From this example, you must have understood how to set cookies. We use <b>Set-Cookie</b> HTTP header to set cookies.</p>\n<p>Here, it is optional to set cookies attributes like Expires, Domain, and Path. It is notable that cookies are set before sending magic line <b>\"Content-type:text/html\\r\\n\\r\\n</b>.</p>\n<p>Compile above program to produce setcookies.cgi, and try to set cookies using following link. It will set four cookies at your computer \u2212</p>\n<p><a href=\"/cgi-bin/setcookies.cgi\" style=\"text-decoration:none;\" target=\"_blank\">/cgi-bin/setcookies.cgi</a></p>\n<h2>Retrieving Cookies</h2>\n<p>It is easy to retrieve all the set cookies. Cookies are stored in CGI environment variable HTTP_COOKIE and they will have following form.</p>\n<pre class=\"result notranslate\">\nkey1 = value1; key2 = value2; key3 = value3....\n</pre>\n<p>Here is an example of how to retrieve cookies.</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;vector&gt;  \n#include &lt;string&gt;  \n#include &lt;stdio.h&gt;  \n#include &lt;stdlib.h&gt; \n\n#include &lt;cgicc/CgiDefs.h&gt; \n#include &lt;cgicc/Cgicc.h&gt; \n#include &lt;cgicc/HTTPHTMLHeader.h&gt; \n#include &lt;cgicc/HTMLClasses.h&gt;\n\nusing namespace std;\nusing namespace cgicc;\n\nint main () {\n   Cgicc cgi;\n   const_cookie_iterator cci;\n\n   cout &lt;&lt; \"Content-type:text/html\\r\\n\\r\\n\";\n   cout &lt;&lt; \"&lt;html&gt;\\n\";\n   cout &lt;&lt; \"&lt;head&gt;\\n\";\n   cout &lt;&lt; \"&lt;title&gt;Cookies in CGI&lt;/title&gt;\\n\";\n   cout &lt;&lt; \"&lt;/head&gt;\\n\";\n   cout &lt;&lt; \"&lt;body&gt;\\n\";\n   cout &lt;&lt; \"&lt;table border = \\\"0\\\" cellspacing = \\\"2\\\"&gt;\";\n   \n   // get environment variables\n   const CgiEnvironment&amp; env = cgi.getEnvironment();\n\n   for( cci = env.getCookieList().begin();\n   cci != env.getCookieList().end(); \n   ++cci ) {\n      cout &lt;&lt; \"&lt;tr&gt;&lt;td&gt;\" &lt;&lt; cci-&gt;getName() &lt;&lt; \"&lt;/td&gt;&lt;td&gt;\";\n      cout &lt;&lt; cci-&gt;getValue();                                 \n      cout &lt;&lt; \"&lt;/td&gt;&lt;/tr&gt;\\n\";\n   }\n   \n   cout &lt;&lt; \"&lt;/table&gt;&lt;\\n\";\n   cout &lt;&lt; \"&lt;br/&gt;\\n\";\n   cout &lt;&lt; \"&lt;/body&gt;\\n\";\n   cout &lt;&lt; \"&lt;/html&gt;\\n\";\n   \n   return 0;\n}\n</pre>\n<p>Now, compile above program to produce getcookies.cgi, and try to get a list of all the cookies available at your computer \u2212</p>\n<p><a href=\"/cgi-bin/getcookies.cgi\" style=\"text-decoration:none;\" target=\"_blank\">/cgi-bin/getcookies.cgi</a></p>\n<p>This will produce a list of all the four cookies set in previous section and all other cookies set in your computer \u2212</p>\n<pre class=\"result notranslate\">\nUserID XYZ \nPassword XYZ123 \nDomain www.tutorialspoint.com \nPath /perl \n</pre>\n<h2>File Upload Example</h2>\n<p>To upload a file the HTML form must have the enctype attribute set to <b>multipart/form-data</b>. The input tag with the file type will create a \"Browse\" button.</p>\n<pre class=\"prettyprint notranslate\">\n&lt;html&gt;\n   &lt;body&gt;\n      &lt;form enctype = \"multipart/form-data\" action = \"/cgi-bin/cpp_uploadfile.cgi\"\n         method = \"post\"&gt;\n         &lt;p&gt;File: &lt;input type = \"file\" name = \"userfile\" /&gt;&lt;/p&gt;\n         &lt;p&gt;&lt;input type = \"submit\" value = \"Upload\" /&gt;&lt;/p&gt;\n      &lt;/form&gt;\n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>The result of this code is the following form \u2212</p>\n<form action=\"/cgi-bin/cpp_uploadfile.cgi\" enctype=\"multipart/form-data\" method=\"post\">\n<p>File: <input name=\"userfile\" type=\"file\"/></p>\n<p><input type=\"reset\" value=\"Upload\"/></p>\n</form>\n<p><b>Note</b> \u2212 Above example has been disabled intentionally to stop people uploading files on our server. But you can try above code with your server.</p>\n<p>Here is the script <b>cpp_uploadfile.cpp</b> to handle file upload \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;vector&gt;  \n#include &lt;string&gt;  \n#include &lt;stdio.h&gt;  \n#include &lt;stdlib.h&gt; \n\n#include &lt;cgicc/CgiDefs.h&gt; \n#include &lt;cgicc/Cgicc.h&gt; \n#include &lt;cgicc/HTTPHTMLHeader.h&gt; \n#include &lt;cgicc/HTMLClasses.h&gt;\n\nusing namespace std;\nusing namespace cgicc;\n\nint main () {\n   Cgicc cgi;\n\n   cout &lt;&lt; \"Content-type:text/html\\r\\n\\r\\n\";\n   cout &lt;&lt; \"&lt;html&gt;\\n\";\n   cout &lt;&lt; \"&lt;head&gt;\\n\";\n   cout &lt;&lt; \"&lt;title&gt;File Upload in CGI&lt;/title&gt;\\n\";\n   cout &lt;&lt; \"&lt;/head&gt;\\n\";\n   cout &lt;&lt; \"&lt;body&gt;\\n\";\n\n   // get list of files to be uploaded\n   const_file_iterator file = cgi.getFile(\"userfile\");\n   if(file != cgi.getFiles().end()) {\n      // send data type at cout.\n      cout &lt;&lt; HTTPContentHeader(file-&gt;getDataType());\n      // write content at cout.\n      file-&gt;writeToStream(cout);\n   }\n   cout &lt;&lt; \"&lt;File uploaded successfully&gt;\\n\";\n   cout &lt;&lt; \"&lt;/body&gt;\\n\";\n   cout &lt;&lt; \"&lt;/html&gt;\\n\";\n   \n   return 0;\n}\n</pre>\n<p>The above example is for writing content at <b>cout</b> stream but you can open your file stream and save the content of uploaded file in a file at desired location.</p>\n<p>Hope you have enjoyed this tutorial. If yes, please send us your feedback.</p>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/cplusplus/cpp_questions_answers.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/cplusplus/cpp_object_oriented.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</img></div>", "html": "<!DOCTYPE html>\n\n<!--[if IE 8]><html class=\"ie ie8\"> <![endif]-->\n<!--[if IE 9]><html class=\"ie ie9\"> <![endif]-->\n<!--[if gt IE 9]><!--> <html> <!--<![endif]-->\n<head>\n<!-- Basic -->\n<meta charset=\"utf-8\"/>\n<title>C++ Quick Guide</title>\n<meta content=\"C++ Quick Guide - Learn C++ in simple and easy steps starting from basic to advanced concepts with examples including C++ Overview, Environment Setup, Basic Syntax, Comments, Data Types, Variable Types, Scope, Constants/Literals, Modifier Types, Storage Classes, Operators, Loop Types, Decision Making, Functions, Numbers, Arrays, Strings, Pointers, References, Date and Time, Basic Input/Output, Data Structures, Classes and Objects, Object Oriented Language, Methods, Overriding, Inheritance, Polymorphism, Abstraction, Encapsulation, Interfaces, Files and Streams, STL, Iterators, Algorithms, Exception Handling, Dynamic Memory, Overloading, Templates, Namespaces and Signal Handling, Preprocessor, Multithreading, Web Programming.\" name=\"description\">\n<meta content=\"C++, Tutorial, Overview, Environment Setup, Basic Syntax, Comments, Data Types, Variable Types, Scope, Constants/Literals, Modifier Types, Storage Classes, Operators, Loop Types, Decision Making, Functions, Numbers, Arrays, Strings, Pointers, References, Date and Time, Basic Input/Output, Data Structures, Classes and Objects, Object Oriented Language, Methods, Overriding, Inheritance, Polymorphism, Abstraction, Encapsulation, Interfaces, Files and Streams, STL, Iterators, Algorithms, Exception Handling, Dynamic Memory, Overloading, Templates, Namespaces and Signal Handling, Preprocessor, Multithreading, Web Programming.\" name=\"Keywords\"/>\n<base href=\"https://www.tutorialspoint.com/\"/>\n<link href=\"/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"/>\n<meta content=\"width=device-width,initial-scale=1.0,user-scalable=yes\" name=\"viewport\"/>\n<meta content=\"en_US\" property=\"og:locale\">\n<meta content=\"website\" property=\"og:type\"/>\n<meta content=\"471319149685276\" property=\"fb:app_id\"/>\n<meta content=\"www.tutorialspoint.com\" property=\"og:site_name\"/>\n<meta content=\"yes\" name=\"apple-mobile-web-app-capable\"/>\n<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"/>\n<meta content=\"tutorialspoint.com\" name=\"author\"/>\n<script src=\"https://www.tutorialspoint.com/theme/js/script-min-v4.js?v=2\" type=\"text/javascript\"></script>\n<link href=\"https://www.tutorialspoint.com/theme/css/style-min.css?v=3.1\" rel=\"stylesheet\"/>\n<script>\r\nfunction openNav() {\t\r\n  document.getElementById(\"mySidenav\").style.width = \"250px\";\r\n  document.getElementById(\"right_obs\").style.display = \"block\";\r\n}\r\nfunction closeNav() {\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\nfunction close_obs_sidenav(){\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\n</script>\n<!-- Head Libs -->\n<!--[if IE 8]>\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/theme/css/ie8.css\">\r\n<![endif]-->\n<style>\r\n#privacy-banner {\r\n    position: fixed;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    max-width: 100%;\r\n    padding: 1rem .5rem;\r\n    background: #fff;\r\n    z-index: 1030;\r\n    color: #000;\r\n    font-size: 14px;\r\n    margin: 0;\r\n    display: none;\r\n    border-top: 2px solid rgb(130, 130, 130);\r\n  }\r\n  #privacy-banner p {\r\n    margin: 0;\r\n    color: #000;\r\n    text-align: center;\r\n  }\r\n  #privacy-banner a {\r\n    text-decoration: none;\r\n    margin: 20px auto 0 auto;\r\n    display: block;\r\n    max-width: 150px;\r\n  }\r\n  #privacy-banner a:hover {\r\n    text-decoration: underline;\r\n  }\r\n  #banner-learn {\r\n    color: #000;\r\n  }\r\n  #banner-accept {\r\n    padding: 7px 15px;\r\n    color: #fff;\r\n    border-radius: 5px;\r\n    background:#737373 !important;\r\n  }\r\n  @media (min-width: 768px) {\r\n    #privacy-banner {\r\n      padding: 1.5rem .5rem;\r\n    }\r\n    #privacy-banner a {\r\n      display: inline-block;\r\n      margin: 0 10px;\r\n    }\r\n}\r\nselect{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }\r\n.btnsbmt{ background: #004481 !important;}\r\nul.nav-list.primary>li a.videolink{    background: none; margin: 0px; padding: 0px; border: 1px solid #d6d6d6;}\r\ndiv.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #004481 url(/images/pattern.png) repeat center center !important;}\r\n.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #004481 !important;}\r\n.submenu-item{ border-bottom: 2px solid #004481 !important; border-top: 2px solid #004481 !important }\r\n.ace_scroller{overflow: auto!important;}\r\na.demo{font-family: \"Open Sans\",Arial,sans-serif; background:#004481; color:#fff; font-size:13px; padding:3px 10px; border:1px solid #d6d6d6; position:absolute; right:5px; margin:-6px 17px 0px 0px;}\r\na.demo:hover{opacity:.8}\r\n</style>\n<script>\r\n$(document).ready(function() {\r\n  $('input[name=\"q\"]').keydown(function(event){\r\n    if(event.keyCode == 13) {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n  });\r\n});\r\n</script>\n</meta></meta></head>\n<body onload=\"prettyPrint()\">\n<div class=\"wrapLoader\">\n<div class=\"imgLoader\">\n<img alt=\"\" height=\"70\" src=\"/images/loading-cg.gif\" width=\"70\"/>\n</div>\n</div>\n<div class=\"display-none\" id=\"right_obs\" onclick=\"close_obs_sidenav()\"></div>\n<header>\n<div class=\"container\">\n<h1 class=\"logo\">\n<a href=\"index.htm\" title=\"tutorialspoint\">\n<img alt=\"tutorialspoint\" src=\"/cplusplus/images/logo.png\"/>\n</a>\n</h1>\n<ul class=\"tp-inline-block pull-right\" id=\"tp-head-icons\">\n<li>\n<div class=\"tp-second-nav tp-display-none tp-pointer\" onclick=\"openNav()\">\n<i class=\"fa fa-th-large fa-lg\"></i>\n</div>\n</li>\n</ul>\n<button class=\"btn btn-responsive-nav btn-inverse\" data-target=\".nav-main-collapse\" data-toggle=\"collapse\" id=\"pull\" style=\"top: 24px!important\"> <i class=\"icon icon-bars\"></i> </button>\n<nav>\n<ul class=\"nav nav-pills nav-top\">\n<li><a href=\"/about/about_careers.htm\" style=\"background: #fffb09; font-weight: bold;\"><i class=\"icon icon-suitcase\"></i> Jobs</a></li>\n<li> <a href=\"/programming_examples/\" target=\"_blank\"><i class=\"fa fa-cubes\"></i> \u00a0Examples</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/whiteboard.htm\"><img alt=\"Whiteboard\" src=\"theme/css/icons/image-editor.png\" title=\"Whiteboard\"/> \u00a0Whiteboard</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/netmeeting.php\"><i class=\"fa-camera\"></i> \u00a0Net Meeting</a> </li>\n<li> <a href=\"/online_dev_tools.htm\"> <i class=\"dev-tools-menu\" style=\"opacity:.5\"></i> Tools </a> </li>\n<li> <a href=\"/articles/index.php\"><i class=\"icon icon-file-text-o\"></i> \u00a0Articles</a> </li>\n<li class=\"top-icons\">\n<ul class=\"social-icons\">\n<li class=\"facebook\"><a data-placement=\"bottom\" href=\"https://www.facebook.com/tutorialspointindia\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Facebook\">Facebook</a></li>\n<li class=\"googleplus\"><a data-placement=\"bottom\" href=\"https://plus.google.com/u/0/116678774017490391259/posts\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Google+\">Google+</a></li>\n<li class=\"twitter\"><a data-placement=\"bottom\" href=\"https://www.twitter.com/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Twitter\">Twitter</a></li>\n<li class=\"linkedin\"><a data-placement=\"bottom\" href=\"https://www.linkedin.com/company/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Linkedin\">Linkedin</a></li>\n<li class=\"youtube\"><a data-placement=\"bottom\" href=\"https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint YouTube\">YouTube</a></li>\n</ul>\n</li>\n</ul>\n</nav>\n</div>\n<div class=\"sidenav\" id=\"mySidenav\">\n<div class=\"navbar nav-main\">\n<div class=\"container\">\n<nav class=\"nav-main mega-menu\">\n<ul class=\"nav nav-pills nav-main\" id=\"mainMenu\">\n<li class=\"dropdown no-sub-menu\"> <a class=\"dropdown\" href=\"index.htm\"><i class=\"icon icon-home\"></i> Home</a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"/questions/index.php\"><i class=\"fa fa-send\"></i> Q/A </a> </li>\n<li class=\"dropdown\"><a class=\"dropdown\" href=\"tutorialslibrary.htm\"><span class=\"tut-lib\"> Library </span></a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"videotutorials/index.htm\"><i class=\"fa-toggle-right\"></i> Videos </a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"tutor_connect/index.php\"><i class=\"fa-user\"> </i> Tutors</a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"codingground.htm\"><i class=\"fa-code\"></i> Coding Ground </a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"https://store.tutorialspoint.com/\"><i class=\"fa-usd\"></i> Store </a> </li>\n<li class=\"dropdown no-sub-menu\">\n<div class=\"searchform-popup\">\n<input autocomplete=\"off\" class=\"header-search-box\" id=\"search-string\" name=\"q\" onblur=\"if (this.value == '') {this.value = 'Search your favorite tutorials...';}\" onfocus=\"if (this.value == 'Search your favorite tutorials...') {this.value = '';}\" placeholder=\"Search your favorite tutorials...\" type=\"text\"/>\n<div class=\"magnifying-glass\"><i class=\"icon-search\"></i> Search </div>\n</div>\n</li>\n</ul>\n</nav>\n</div>\n</div>\n</div>\n</header></body></html>\n\n<div style=\"clear:both;\"></div>\n<div class=\"main\" role=\"main\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-2\">\n<aside class=\"sidebar\">\n<style>\r\n.ts {\r\n   text-align:center !important;\r\n   vertical-align:middle !important;\r\n}\r\n</style>\n<div class=\"mini-logo\">\n<img alt=\"C++ Tutorial\" src=\"/cplusplus/images/cpp-mini-logo.jpg\">\n</img></div>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">C++ Basics</li>\n<li><a href=\"/cplusplus/index.htm\">C++ Home</a></li>\n<li><a href=\"/cplusplus/cpp_overview.htm\">C++ Overview</a></li>\n<li><a href=\"/cplusplus/cpp_environment_setup.htm\">C++ Environment Setup</a></li>\n<li><a href=\"/cplusplus/cpp_basic_syntax.htm\">C++ Basic Syntax</a></li>\n<li><a href=\"/cplusplus/cpp_comments.htm\">C++ Comments</a></li>\n<li><a href=\"/cplusplus/cpp_data_types.htm\">C++ Data Types</a></li>\n<li><a href=\"/cplusplus/cpp_variable_types.htm\">C++ Variable Types</a></li>\n<li><a href=\"/cplusplus/cpp_variable_scope.htm\">C++ Variable Scope</a></li>\n<li><a href=\"/cplusplus/cpp_constants_literals.htm\">C++ Constants/Literals</a></li>\n<li><a href=\"/cplusplus/cpp_modifier_types.htm\">C++ Modifier Types</a></li>\n<li><a href=\"/cplusplus/cpp_storage_classes.htm\">C++ Storage Classes</a></li>\n<li><a href=\"/cplusplus/cpp_operators.htm\">C++ Operators</a></li>\n<li><a href=\"/cplusplus/cpp_loop_types.htm\">C++ Loop Types</a></li>\n<li><a href=\"/cplusplus/cpp_decision_making.htm\">C++ Decision Making</a></li>\n<li><a href=\"/cplusplus/cpp_functions.htm\">C++ Functions</a></li>\n<li><a href=\"/cplusplus/cpp_numbers.htm\">C++ Numbers</a></li>\n<li><a href=\"/cplusplus/cpp_arrays.htm\">C++ Arrays</a></li>\n<li><a href=\"/cplusplus/cpp_strings.htm\">C++ Strings</a></li>\n<li><a href=\"/cplusplus/cpp_pointers.htm\">C++ Pointers</a></li>\n<li><a href=\"/cplusplus/cpp_references.htm\">C++ References</a></li>\n<li><a href=\"/cplusplus/cpp_date_time.htm\">C++ Date &amp; Time</a></li>\n<li><a href=\"/cplusplus/cpp_basic_input_output.htm\">C++ Basic Input/Output</a></li>\n<li><a href=\"/cplusplus/cpp_data_structures.htm\">C++ Data Structures</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">C++ Object Oriented</li>\n<li><a href=\"/cplusplus/cpp_classes_objects.htm\">C++ Classes &amp; Objects</a></li>\n<li><a href=\"/cplusplus/cpp_inheritance.htm\">C++ Inheritance</a></li>\n<li><a href=\"/cplusplus/cpp_overloading.htm\">C++ Overloading</a></li>\n<li><a href=\"/cplusplus/cpp_polymorphism.htm\">C++ Polymorphism</a></li>\n<li><a href=\"/cplusplus/cpp_data_abstraction.htm\">C++ Abstraction</a></li>\n<li><a href=\"/cplusplus/cpp_data_encapsulation.htm\">C++ Encapsulation</a></li>\n<li><a href=\"/cplusplus/cpp_interfaces.htm\">C++ Interfaces</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">C++ Advanced</li>\n<li><a href=\"/cplusplus/cpp_files_streams.htm\">C++ Files and Streams</a></li>\n<li><a href=\"/cplusplus/cpp_exceptions_handling.htm\">C++ Exception Handling</a></li>\n<li><a href=\"/cplusplus/cpp_dynamic_memory.htm\">C++ Dynamic Memory</a></li>\n<li><a href=\"/cplusplus/cpp_namespaces.htm\">C++ Namespaces</a></li>\n<li><a href=\"/cplusplus/cpp_templates.htm\">C++ Templates</a></li>\n<li><a href=\"/cplusplus/cpp_preprocessor.htm\">C++ Preprocessor</a></li>\n<li><a href=\"/cplusplus/cpp_signal_handling.htm\">C++ Signal Handling</a></li>\n<li><a href=\"/cplusplus/cpp_multithreading.htm\">C++ Multithreading</a></li>\n<li><a href=\"/cplusplus/cpp_web_programming.htm\">C++ Web Programming</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">C++ Useful Resources</li>\n<li><a href=\"/cplusplus/cpp_questions_answers.htm\">C++ Questions and Answers</a></li>\n<li><a href=\"/cplusplus/cpp_quick_guide.htm\">C++ Quick Guide</a></li>\n<li><a href=\"/cplusplus/cpp_object_oriented.htm\">C++ Object Oriented</a></li>\n<li><a href=\"/cplusplus/cpp_stl_tutorial.htm\">C++ STL Tutorial</a></li>\n<li><a href=\"/cplusplus/cpp_standard_library.htm\">C++ Standard Library</a></li>\n<li><a href=\"/cplusplus/cpp_useful_resources.htm\">C++ Useful Resources</a></li>\n<li><a href=\"/cplusplus/cpp_discussion.htm\">C++ Discussion</a></li>\n</ul>\n<ul class=\"nav nav-list primary push-bottom left-menu special\">\n<li class=\"sreading\">Selected Reading</li>\n<li><a href=\"/upsc_ias_exams.htm\" target=\"_top\">UPSC IAS Exams Notes</a></li>\n<li><a href=\"/developers_best_practices/index.htm\" target=\"_top\">Developer's Best Practices</a></li>\n<li><a href=\"/questions_and_answers.htm\" target=\"_top\">Questions and Answers</a></li>\n<li><a href=\"/effective_resume_writing.htm\" target=\"_top\">Effective Resume Writing</a></li>\n<li><a href=\"/hr_interview_questions/index.htm\" target=\"_top\">HR Interview Questions</a></li>\n<li><a href=\"/computer_glossary.htm\" target=\"_top\">Computer Glossary</a></li>\n<li><a href=\"/computer_whoiswho.htm\" target=\"_top\">Who is Who</a></li>\n</ul>\n</aside>\n</div>\n<!-- PRINTING STARTS HERE -->\n<div class=\"row\">\n<div class=\"content\">\n<div class=\"col-md-7 middle-col\">\n<h1>C++ Quick Guide</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/cplusplus/cpp_questions_answers.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/cplusplus/cpp_object_oriented.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<h1>C++ Overview</h1>\n<p>C++ is a statically typed, compiled, general-purpose, case-sensitive, free-form programming language that supports procedural, object-oriented, and generic programming.</p>\n<p>C++ is regarded as a <b>middle-level</b> language, as it comprises a combination of both high-level and low-level language features.</p>\n<p>C++ was developed by Bjarne Stroustrup starting in 1979 at Bell Labs in Murray Hill, New Jersey, as an enhancement to the C language and originally named C with Classes but later it was renamed C++ in 1983.</p>\n<p>C++ is a superset of C, and that virtually any legal C program is a legal C++ program.</p>\n<p><b>Note</b> \u2212 A programming language is said to use static typing when type checking is performed during compile-time as opposed to run-time.</p>\n<h2>Object-Oriented Programming</h2>\n<p>C++ fully supports object-oriented programming, including the four pillars of object-oriented development \u2212</p>\n<ul class=\"list\">\n<li>Encapsulation</li>\n<li>Data hiding</li>\n<li>Inheritance</li>\n<li>Polymorphism</li>\n</ul>\n<h2>Standard Libraries</h2>\n<p>Standard C++ consists of three important parts \u2212</p>\n<ul class=\"list\">\n<li><p>The core language giving all the building blocks including variables, data types and literals, etc.</p></li>\n<li><p>The C++ Standard Library giving a rich set of functions manipulating files, strings, etc.</p></li>\n<li><p>The Standard Template Library (STL) giving a rich set of methods manipulating data structures, etc.</p></li>\n</ul>\n<h2>The ANSI Standard</h2>\n<p>The ANSI standard is an attempt to ensure that C++ is portable; that code you write for Microsoft's compiler will compile without errors, using a compiler on a Mac, UNIX, a Windows box, or an Alpha.</p>\n<p>The ANSI standard has been stable for a while, and all the major C++ compiler manufacturers support the ANSI standard.</p>\n<h2>Learning C++</h2>\n<p>The most important thing while learning C++ is to focus on concepts.</p>\n<p>The purpose of learning a programming language is to become a better programmer; that is, to become more effective at designing and implementing new systems and at maintaining old ones.</p>\n<p>C++ supports a variety of programming styles. You can write in the style of Fortran, C, Smalltalk, etc., in any language. Each style can achieve its aims effectively while maintaining runtime and space efficiency.</p>\n<h2>Use of C++</h2>\n<p>C++ is used by hundreds of thousands of programmers in essentially every application domain.</p>\n<p>C++ is being highly used to write device drivers and other software that rely on direct manipulation of hardware under realtime constraints.</p>\n<p>C++ is widely used for teaching and research because it is clean enough for successful teaching of basic concepts.</p>\n<p>Anyone who has used either an Apple Macintosh or a PC running Windows has indirectly used C++ because the primary user interfaces of these systems are written in C++.</p>\n<h1>C++ Environment Setup</h1>\n<h2>Local Environment Setup</h2>\n<p>If you are still willing to set up your environment for C++, you need to have the following two softwares on your computer.</p>\n<h3>Text Editor</h3>\n<p>This will be used to type your program. Examples of few editors include Windows Notepad, OS Edit command, Brief, Epsilon, EMACS, and vim or vi.</p>\n<p>Name and version of text editor can vary on different operating systems. For example, Notepad will be used on Windows and vim or vi can be used on windows  as well as Linux, or UNIX.</p>\n<p>The files you create with your editor are called source files and for C++ they typically are named with the extension .cpp, .cp, or .c.</p>\n<p>A text editor should be in place to start your C++ programming.</p>\n<h3>C++ Compiler</h3>\n<p>This is an actual C++ compiler, which will be used to compile your source code into final executable program.</p>\n<p>Most C++ compilers don't care what extension you give to your source code, but if you don't specify otherwise, many will use .cpp by default.</p>\n<p>Most frequently used and free available compiler is GNU C/C++ compiler, otherwise you can have compilers either from HP or Solaris if you have the respective Operating Systems.</p>\n<h2>Installing GNU C/C++ Compiler</h2>\n<h3>UNIX/Linux Installation</h3>\n<p>If you are using <b>Linux or UNIX</b> then check whether GCC is installed on your system by entering the following command from the command line \u2212</p>\n<pre class=\"result notranslate\">\n$ g++ -v\n</pre>\n<p>If you have installed GCC, then it should print a message such as the following \u2212</p>\n<pre class=\"result notranslate\">\nUsing built-in specs.\nTarget: i386-redhat-linux\nConfigured with: ../configure --prefix=/usr .......\nThread model: posix\ngcc version 4.1.2 20080704 (Red Hat 4.1.2-46)\n</pre>\n<p>If GCC is not installed, then you will have to install it yourself using the detailed instructions available at <a href=\"https://gcc.gnu.org/install/\" target=\"_blank\">https://gcc.gnu.org/install/</a></p>\n<h3>Mac OS X Installation</h3>\n<p>If you use Mac OS X, the easiest way to obtain GCC is to download the Xcode development environment from Apple's website and follow the simple installation instructions.</p>\n<p>Xcode is currently available at <a href=\"https://developer.apple.com/technologies/tools/\" target=\"_blank\">developer.apple.com/technologies/tools/</a>.</p>\n<h3>Windows Installation</h3>\n<p>To install GCC at Windows you need to install MinGW. To install MinGW, go to the MinGW homepage, <a href=\"http://www.mingw.org\" target=\"_blank\">www.mingw.org</a>, and follow the link to the MinGW download page. Download the latest version of the MinGW installation program which should be named MinGW-&lt;version&gt;.exe.</p>\n<p>While installing MinGW, at a minimum, you must install gcc-core, gcc-g++, binutils, and the MinGW runtime, but you may wish to install more.</p>\n<p>Add the bin subdirectory of your MinGW installation to your <b>PATH</b> environment variable so that you can specify these tools on the command line by their simple names.</p>\n<p>When the installation is complete, you will be able to run gcc, g++, ar, ranlib, dlltool, and several other GNU tools from the Windows command line.</p>\n<h1>C++ Basic Syntax</h1>\n<p>When we consider a C++ program, it can be defined as a collection of objects that communicate via invoking each other's methods. Let us now briefly look into what a class, object, methods, and instant variables mean.</p>\n<ul class=\"list\">\n<li><p><b>Object</b> \u2212 Objects have states and behaviors. Example: A dog has states - color, name, breed as well as behaviors - wagging, barking, eating. An object is an instance of a class. </p></li>\n<li><p><b>Class</b> \u2212 A class can be defined as a template/blueprint that describes the behaviors/states that object of its type support.</p></li>\n<li><p><b>Methods</b> \u2212 A method is basically a behavior. A class can contain many methods. It is in methods where the logics are written, data is manipulated and all the actions are executed.</p></li>\n<li><p><b>Instance Variables</b> \u2212 Each object has its unique set of instance variables. An object's state is created by the values assigned to these instance variables.</p></li>\n</ul>\n<h2>C++ Program Structure</h2>\n<p>Let us look at a simple code that would print the words <i>Hello World</i>.</p>\n<a class=\"demo\" href=\"http://tpcg.io/n4BVuS\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\n// main() is where program execution begins.\nint main() {\n   cout &lt;&lt; \"Hello World\"; // prints Hello World\n   return 0;\n}\n</pre>\n<p>Let us look at the various parts of the above program \u2212</p>\n<ul class=\"list\">\n<li><p>The C++ language defines several headers, which contain information that is either necessary or useful to your program. For this program, the header <b>&lt;iostream&gt;</b> is needed.</p></li>\n<li><p>The line <b>using namespace std;</b> tells the compiler to use the std namespace. Namespaces are a relatively recent addition to C++.</p></li>\n<li><p>The next line '<b>// main() is where program execution begins.</b>' is a single-line comment available in C++. Single-line comments begin with // and stop at the end of the line.</p></li>\n<li><p>The line <b>int main()</b> is the main function where program execution begins.</p></li>\n<li><p>The next line <b>cout &lt;&lt; \"Hello World\";</b> causes the message \"Hello World\" to be displayed on the screen.</p></li>\n<li><p>The next line <b>return 0;</b> terminates main( )function and causes it to return the value 0 to the calling process.</p></li>\n</ul>\n<h2>Compile and Execute C++ Program</h2>\n<p>Let's look at how to save the file, compile and run the program. Please follow the steps given below \u2212</p>\n<ul class=\"list\">\n<li><p>Open a text editor and add the code as above.</p></li>\n<li><p>Save the file as: hello.cpp</p></li>\n<li><p>Open a command prompt and go to the directory where you saved the file.</p></li>\n<li><p>Type 'g++ hello.cpp' and press enter to compile your code. If there are no errors in your code the command prompt will take you to the next line and would generate a.out executable file.</p></li>\n<li><p>Now, type 'a.out' to run your program.</p></li>\n<li><p>You will be able to see ' Hello World ' printed on the window.</p></li>\n</ul>\n<pre class=\"result notranslate\">\n$ g++ hello.cpp\n$ ./a.out\nHello World\n</pre>\n<p>Make sure that g++ is in your path and that you are running it in the directory containing file hello.cpp.</p>\n<p>You can compile C/C++ programs using makefile. For more details, you can check our <a href=\"/makefile/index.htm\" rel=\"nofollow\" target=\"_blank\">'Makefile Tutorial'</a>.</p>\n<h2>Semicolons and Blocks in C++</h2>\n<p>In C++, the semicolon is a statement terminator. That is, each individual statement must be ended with a semicolon. It indicates the end of one logical entity.</p>\n<p>For example, following are three different statements \u2212</p>\n<pre class=\"result notranslate\">\nx = y;\ny = y + 1;\nadd(x, y);\n</pre>\n<p>A block is a set of logically connected statements that are surrounded by opening and closing braces. For example \u2212</p>\n<pre class=\"result notranslate\">\n{\n   cout &lt;&lt; \"Hello World\"; // prints Hello World\n   return 0;\n}\n</pre>\n<p>C++ does not recognize the end of the line as a terminator. For this reason, it does not matter where you put a statement in a line. For example \u2212</p>\n<pre class=\"result notranslate\">\nx = y;\ny = y + 1;\nadd(x, y);\n</pre>\n<p>is the same as</p>\n<pre class=\"result notranslate\">\nx = y; y = y + 1; add(x, y);\n</pre>\n<h2>C++ Identifiers</h2>\n<p>A C++ identifier is a name used to identify a variable, function, class, module, or any other user-defined item. An identifier starts with a letter A to Z or a to z or an underscore (_) followed by zero or more letters, underscores, and digits (0 to 9).</p>\n<p>C++ does not allow punctuation characters such as @, $, and % within identifiers. C++ is a case-sensitive programming language.  Thus, <b>Manpower</b> and <b>manpower</b> are two different identifiers in C++.</p>\n<p>Here are some examples of acceptable identifiers \u2212</p>\n<pre class=\"result notranslate\">\nmohd       zara    abc   move_name  a_123\nmyname50   _temp   j     a23b9      retVal\n</pre>\n<h2>C++ Keywords</h2>\n<p>The following list shows the reserved words in C++. These reserved words may not be used as constant or variable or any other identifier names.</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<td>asm</td>\n<td>else</td>\n<td>new</td>\n<td>this</td>\n</tr>\n<tr>\n<td>auto</td>\n<td>enum</td>\n<td>operator</td>\n<td>throw</td>\n</tr>\n<tr>\n<td>bool</td>\n<td>explicit</td>\n<td>private</td>\n<td>true</td>\n</tr>\n<tr>\n<td>break</td>\n<td>export</td>\n<td>protected</td>\n<td>try</td>\n</tr>\n<tr>\n<td>case</td>\n<td>extern</td>\n<td>public</td>\n<td>typedef</td>\n</tr>\n<tr>\n<td>catch</td>\n<td>false</td>\n<td>register</td>\n<td>typeid</td>\n</tr>\n<tr>\n<td>char</td>\n<td>float</td>\n<td>reinterpret_cast</td>\n<td>typename</td>\n</tr>\n<tr>\n<td>class</td>\n<td>for</td>\n<td>return</td>\n<td>union</td>\n</tr>\n<tr>\n<td>const</td>\n<td>friend</td>\n<td>short</td>\n<td>unsigned</td>\n</tr>\n<tr>\n<td>const_cast</td>\n<td>goto</td>\n<td>signed</td>\n<td>using</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>if</td>\n<td>sizeof</td>\n<td>virtual</td>\n</tr>\n<tr>\n<td>default</td>\n<td>inline</td>\n<td>static</td>\n<td>void</td>\n</tr>\n<tr>\n<td>delete</td>\n<td>int</td>\n<td>static_cast</td>\n<td>volatile</td>\n</tr>\n<tr>\n<td>do</td>\n<td>long</td>\n<td>struct</td>\n<td>wchar_t</td>\n</tr>\n<tr>\n<td>double</td>\n<td>mutable</td>\n<td>switch</td>\n<td>while</td>\n</tr>\n<tr>\n<td>dynamic_cast</td>\n<td>namespace</td>\n<td>template</td>\n<td>\u00a0</td>\n</tr>\n</table>\n<h2>Trigraphs</h2>\n<p>A few characters have an alternative representation, called a trigraph sequence. A trigraph is a three-character sequence that represents a single character and the sequence always starts with two question marks.</p>\n<p>Trigraphs are expanded anywhere they appear, including within string literals and character literals, in comments, and in preprocessor directives.</p>\n<p>Following are most frequently used trigraph sequences \u2212</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<th style=\"text-align:center;\">Trigraph</th>\n<th style=\"text-align:center;\">Replacement</th>\n</tr>\n<tr>\n<td>??=</td>\n<td>#</td>\n</tr>\n<tr>\n<td>??/</td>\n<td>\\</td>\n</tr>\n<tr>\n<td>??'</td>\n<td>^</td>\n</tr>\n<tr>\n<td>??(</td>\n<td>[</td>\n</tr>\n<tr>\n<td>??)</td>\n<td>]</td>\n</tr>\n<tr>\n<td>??!</td>\n<td>|</td>\n</tr>\n<tr>\n<td>??&lt;</td>\n<td>{</td>\n</tr>\n<tr>\n<td>??&gt;</td>\n<td>}</td>\n</tr>\n<tr>\n<td>??-</td>\n<td>~</td>\n</tr>\n</table>\n<p>All the compilers do not support trigraphs and they are not advised to be used because of their confusing nature.</p>\n<h2>Whitespace in C++</h2>\n<p>A line containing only whitespace, possibly with a comment, is known as a blank line, and C++ compiler totally ignores it.</p>\n<p>Whitespace is the term used in C++ to describe blanks, tabs, newline characters and comments. Whitespace separates one part of a statement from another and enables the compiler to identify where one element in a statement, such as int, ends and the next element begins.</p>\n<h3>Statement 1</h3>\n<pre class=\"result notranslate\">\nint age;\n</pre>\n<p>In the above statement there must be at least one whitespace character (usually a space) between int and age for the compiler to be able to distinguish them.</p>\n<h3>Statement 2</h3>\n<pre class=\"result notranslate\">\nfruit = apples + oranges;   // Get the total fruit\n</pre>\n<p>In the above statement 2, no whitespace characters are necessary between fruit and =, or between = and apples, although you are free to include some if you wish for readability purpose.</p>\n<h1>Comments in C++</h1>\n<p>Program comments are explanatory statements that you can include in the C++ code. These comments help anyone reading the source code. All programming languages allow for some form of comments.</p>\n<p>C++ supports single-line and multi-line comments. All characters available inside any comment are ignored by C++ compiler.</p>\n<p>C++ comments start with /* and end with */. For example \u2212</p>\n<pre class=\"result notranslate\">\n/* This is a comment */\n\n/* C++ comments can also\n   * span multiple lines\n*/\n</pre>\n<p>A comment can also start with //, extending to the end of the line. For example \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/Q4esaC\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nmain() {\n   cout &lt;&lt; \"Hello World\"; // prints Hello World\n   \n   return 0;\n}\n</pre>\n<p>When the above code is compiled, it will ignore <b>// prints Hello World</b> and final executable will produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nHello World\n</pre>\n<p>Within a /* and */ comment, // characters have no special meaning. Within a // comment, /* and */ have no special meaning. Thus, you can \"nest\" one kind of comment within the other kind. For example \u2212</p>\n<pre class=\"result notranslate\">\n/* Comment out printing of Hello World:\n\ncout &lt;&lt; \"Hello World\"; // prints Hello World\n\n*/\n</pre>\n<h1>C++ Data Types</h1>\n<p>While writing program in any language, you need to use various variables to store various information. Variables are nothing but reserved memory locations to store values. This means that when you create a variable you reserve some space in memory.</p>\n<p>You may like to store information of various data types like character, wide character, integer, floating point, double floating point, boolean etc. Based on the data type of a variable, the operating system allocates memory and decides what can be stored in the reserved memory.</p>\n<h2>Primitive Built-in Types</h2>\n<p>C++ offers the programmer a rich assortment of built-in as well as user defined data types. Following table lists down seven basic C++ data types \u2212</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<th style=\"text-align:center;\" width=\"50%\">Type</th>\n<th style=\"text-align:center;\">Keyword</th>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>bool</td>\n</tr>\n<tr>\n<td>Character</td>\n<td>char</td>\n</tr>\n<tr>\n<td>Integer</td>\n<td>int</td>\n</tr>\n<tr>\n<td>Floating point</td>\n<td>float</td>\n</tr>\n<tr>\n<td>Double floating point</td>\n<td>double</td>\n</tr>\n<tr>\n<td>Valueless</td>\n<td>void</td>\n</tr>\n<tr>\n<td>Wide character</td>\n<td>wchar_t</td>\n</tr>\n</table>\n<p>Several of the basic types can be modified using one or more of these type modifiers \u2212</p>\n<ul class=\"list\">\n<li>signed</li>\n<li>unsigned</li>\n<li>short</li>\n<li>long</li>\n</ul>\n<p>The following table shows the variable type, how much memory it takes to store the value in memory, and what is maximum and minimum value which can be stored in such type of variables.</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<th style=\"text-align:center;\">Type</th>\n<th style=\"text-align:center;\">Typical Bit Width</th>\n<th style=\"text-align:center;\">Typical Range</th>\n</tr>\n<tr>\n<td>char</td>\n<td>1byte</td>\n<td>-127 to 127 or 0 to 255</td>\n</tr>\n<tr>\n<td>unsigned char</td>\n<td>1byte</td>\n<td>0 to 255</td>\n</tr>\n<tr>\n<td>signed char</td>\n<td>1byte</td>\n<td>-127 to 127</td>\n</tr>\n<tr>\n<td>int</td>\n<td>4bytes</td>\n<td>-2147483648 to 2147483647</td>\n</tr>\n<tr>\n<td>unsigned int</td>\n<td>4bytes</td>\n<td>0 to 4294967295</td>\n</tr>\n<tr>\n<td>signed int</td>\n<td>4bytes</td>\n<td>-2147483648 to 2147483647</td>\n</tr>\n<tr>\n<td>short int</td>\n<td>2bytes</td>\n<td>-32768 to 32767</td>\n</tr>\n<tr>\n<td>unsigned short int</td>\n<td>Range</td>\n<td>0 to 65,535</td>\n</tr>\n<tr>\n<td>signed short int</td>\n<td>Range</td>\n<td>-32768 to 32767</td>\n</tr>\n<tr>\n<td>long int</td>\n<td>4bytes</td>\n<td>-2,147,483,648 to 2,147,483,647</td>\n</tr>\n<tr>\n<td>signed long int</td>\n<td>4bytes</td>\n<td>same as long int</td>\n</tr>\n<tr>\n<td>unsigned long int</td>\n<td>4bytes</td>\n<td>0 to 4,294,967,295</td>\n</tr>\n<tr>\n<td>float</td>\n<td>4bytes</td>\n<td>+/- 3.4e +/- 38 (~7 digits)</td>\n</tr>\n<tr>\n<td>double</td>\n<td>8bytes</td>\n<td>+/- 1.7e +/- 308 (~15 digits)</td>\n</tr>\n<tr>\n<td>long double</td>\n<td>8bytes</td>\n<td>+/- 1.7e +/- 308 (~15 digits)</td>\n</tr>\n<tr>\n<td>wchar_t</td>\n<td>2 or 4 bytes</td>\n<td>1 wide character</td>\n</tr>\n</table>\n<p>The size of variables might be different from those shown in the above table, depending on the compiler and the computer you are using.</p>\n<p>Following is the example, which will produce correct size of various data types on your computer.</p>\n<a class=\"demo\" href=\"http://tpcg.io/iKNn78\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n   cout &lt;&lt; \"Size of char : \" &lt;&lt; sizeof(char) &lt;&lt; endl;\n   cout &lt;&lt; \"Size of int : \" &lt;&lt; sizeof(int) &lt;&lt; endl;\n   cout &lt;&lt; \"Size of short int : \" &lt;&lt; sizeof(short int) &lt;&lt; endl;\n   cout &lt;&lt; \"Size of long int : \" &lt;&lt; sizeof(long int) &lt;&lt; endl;\n   cout &lt;&lt; \"Size of float : \" &lt;&lt; sizeof(float) &lt;&lt; endl;\n   cout &lt;&lt; \"Size of double : \" &lt;&lt; sizeof(double) &lt;&lt; endl;\n   cout &lt;&lt; \"Size of wchar_t : \" &lt;&lt; sizeof(wchar_t) &lt;&lt; endl;\n   \n   return 0;\n}\n</pre>\n<p>This example uses  <b>endl</b>, which inserts a new-line character after every line and &lt;&lt; operator is being used to pass multiple values out to the screen. We are also using <b>sizeof()</b> operator to get size of various data types.</p>\n<p>When the above code is compiled and executed, it produces the following result which can vary from machine to machine \u2212</p>\n<pre class=\"result notranslate\">\nSize of char : 1\nSize of int : 4\nSize of short int : 2\nSize of long int : 4\nSize of float : 4\nSize of double : 8\nSize of wchar_t : 4\n</pre>\n<h2>typedef Declarations</h2>\n<p>You can create a new name for an existing type using <b>typedef</b>. Following is the simple syntax to define a new type using typedef \u2212</p>\n<pre class=\"result notranslate\">\ntypedef type newname; \n</pre>\n<p>For example, the following tells the compiler that feet is another name for int \u2212</p>\n<pre class=\"result notranslate\">\ntypedef int feet;\n</pre>\n<p>Now, the following declaration is perfectly legal and creates an integer variable called distance \u2212</p>\n<pre class=\"result notranslate\">\nfeet distance;\n</pre>\n<h2>Enumerated Types</h2>\n<p>An enumerated type declares an optional type name  and a set of zero or more identifiers that can be used as values of the type. Each enumerator is a constant whose type is the enumeration.</p>\n<p>Creating an enumeration requires the use of the keyword <b>enum</b>. The general form of an enumeration type is \u2212</p>\n<pre class=\"result notranslate\">\nenum enum-name { list of names } var-list; \n</pre>\n<p>Here, the enum-name is the enumeration's type name. The list of names is comma separated.</p>\n<p>For example, the following code defines an enumeration of colors called colors and the variable c of type color. Finally, c is assigned the value \"blue\".</p>\n<pre class=\"result notranslate\">\nenum color { red, green, blue } c;\nc = blue;\n</pre>\n<p>By default, the value of the first name is 0, the second name has the value 1, and the third has the value 2, and so on. But you can give a name, a specific value by adding an initializer. For example, in the following enumeration, <b>green</b> will have the value 5.</p>\n<pre class=\"result notranslate\">\nenum color { red, green = 5, blue };\n</pre>\n<p>Here, <b>blue</b> will have a value of 6 because each name will be one greater than the one that precedes it.</p>\n<h1>C++ Variable Types</h1>\n<p>A variable provides us with named storage that our programs can manipulate. Each variable in C++ has a specific type, which determines the size and layout of the variable's memory; the range of values that can be stored within that memory; and the set of operations that can be applied to the variable.</p>\n<p>The name of a variable can be composed of letters, digits, and the underscore character. It must begin with either a letter or an underscore. Upper and lowercase letters are distinct because C++ is case-sensitive \u2212</p>\n<p>There are following basic types of variable in C++ as explained in last chapter \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"width:5%\">Sr.No</th>\n<th style=\"text-align:center;\">Type &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>bool</b></p>\n<p>Stores either value true or false.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>char</b></p>\n<p>Typically a single octet (one byte). This is an integer type.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>int</b></p>\n<p>The most natural size of integer for the machine.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>float</b></p>\n<p>A single-precision floating point value.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>double</b></p>\n<p>A double-precision floating point value.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><p><b>void</b></p>\n<p>Represents the absence of type.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">7</td>\n<td><p><b>wchar_t</b></p>\n<p>A wide character type.</p></td>\n</tr>\n</table>\n<p>C++ also allows to define various other types of variables, which we will cover in subsequent chapters like <b>Enumeration, Pointer, Array, Reference, Data structures,</b> and <b>Classes</b>.</p>\n<p>Following section will cover how to define, declare and use various types of variables.</p>\n<h2>Variable Definition in C++</h2>\n<p>A variable definition tells the compiler where and how much storage to create for the variable. A variable definition specifies a data type, and contains a list of one or more variables of that type as follows \u2212</p>\n<pre class=\"result notranslate\">\ntype variable_list;\n</pre>\n<p>Here, <b>type</b> must be a valid C++ data type including char, w_char, int, float, double, bool or any user-defined object, etc., and <b>variable_list</b> may consist of one or more identifier names separated by commas. Some valid declarations are shown here \u2212</p>\n<pre class=\"result notranslate\">\nint    i, j, k;\nchar   c, ch;\nfloat  f, salary;\ndouble d;\n</pre>\n<p>The line <b>int i, j, k;</b> both declares and defines the variables i, j and k; which instructs the compiler to create variables named i, j and k of type int.</p>\n<p>Variables can be initialized (assigned an initial value) in their declaration. The initializer consists of an equal sign followed by a constant expression as follows \u2212</p>\n<pre class=\"result notranslate\">\ntype variable_name = value;\n</pre>\n<p>Some examples are \u2212</p>\n<pre class=\"result notranslate\">\nextern int d = 3, f = 5;    // declaration of d and f. \nint d = 3, f = 5;           // definition and initializing d and f. \nbyte z = 22;                // definition and initializes z. \nchar x = 'x';               // the variable x has the value 'x'.\n</pre>\n<p>For definition without an initializer: variables with static storage duration are implicitly initialized with NULL (all bytes have the value 0); the initial value of all other variables is undefined.</p>\n<h2>Variable Declaration in C++</h2>\n<p>A variable declaration provides assurance to the compiler that there is one variable existing with the given type and name so that compiler proceed for further compilation without needing complete detail about the variable. A variable declaration has its meaning at the time of compilation only, compiler needs actual variable definition at the time of linking of the program.</p>\n<p>A variable declaration is useful when you are using multiple files and you define your variable in one of the files which will be available at the time of linking of the program. You will use <b>extern</b> keyword to declare a variable at any place. Though you can declare a variable multiple times in your C++ program, but it can be defined only once in a file, a function or a block of code.</p>\n<h3>Example</h3>\n<p>Try the following example where a variable has been declared at the top, but it has been defined inside the main function \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/odXXRO\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\n// Variable declaration:\nextern int a, b;\nextern int c;\nextern float f;\n  \nint main () {\n   // Variable definition:\n   int a, b;\n   int c;\n   float f;\n \n   // actual initialization\n   a = 10;\n   b = 20;\n   c = a + b;\n \n   cout &lt;&lt; c &lt;&lt; endl ;\n\n   f = 70.0/3.0;\n   cout &lt;&lt; f &lt;&lt; endl ;\n \n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\n30\n23.3333\n</pre>\n<p>Same concept applies on function declaration where you provide a function name at the time of its declaration and its actual definition can be given anywhere else. For example \u2212</p>\n<pre class=\"result notranslate\">\n// function declaration\nint func();\nint main() {\n   // function call\n   int i = func();\n}\n\n// function definition\nint func() {\n   return 0;\n}\n</pre>\n<h2>Lvalues and Rvalues</h2>\n<p>There are two kinds of expressions in C++ \u2212</p>\n<ul class=\"list\">\n<li><p><b>lvalue</b> \u2212 Expressions that refer to a memory location is  called \"lvalue\" expression. An lvalue may appear as either the left-hand or right-hand side of an assignment.</p></li>\n<li><p><b>rvalue</b> \u2212 The term rvalue refers to a data value that is stored at some address in memory. An rvalue is an expression that cannot have a value assigned to it which means an rvalue may appear on the right- but not left-hand side of an assignment.</p></li>\n</ul>\n<p>Variables are lvalues and so may appear on the left-hand side of an assignment. Numeric literals are rvalues and so may not be assigned and can not appear on the left-hand side. Following is a valid statement \u2212</p>\n<pre class=\"result notranslate\">\nint g = 20;\n</pre>\n<p>But the following is not a valid statement and would generate compile-time error \u2212</p>\n<pre class=\"result notranslate\">\n10 = 20;\n</pre>\n<h1>Variable Scope in C++</h1>\n<p>A scope is a region of the program and broadly speaking there are three places, where variables can be declared \u2212</p>\n<ul class=\"list\">\n<li><p>Inside a function or a block which is called local variables,</p></li>\n<li><p>In the definition of function parameters which is called formal parameters.</p></li>\n<li><p>Outside of all functions which is called global variables.</p></li>\n</ul>\n<p>We will learn what is a function and it's parameter in subsequent chapters. Here let us explain what are local and global variables.</p>\n<h2>Local Variables</h2>\n<p>Variables that are declared inside a function or block are local variables. They can be used only by statements that are inside that function or block of code. Local variables are not known to functions outside their own. Following is the example using local variables \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/QIjnPh\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n \nint main () {\n   // Local variable declaration:\n   int a, b;\n   int c;\n \n   // actual initialization\n   a = 10;\n   b = 20;\n   c = a + b;\n \n   cout &lt;&lt; c;\n \n   return 0;\n}\n</pre>\n<h2>Global Variables</h2>\n<p>Global variables are defined outside of all the functions, usually on top of the program. The global variables will hold their value throughout the life-time of your program.</p>\n<p>A global variable can be accessed by any function. That is, a global variable is available for use throughout your entire program after its declaration. Following is the example using global and local variables \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/dRHHpD\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n \n// Global variable declaration:\nint g;\n \nint main () {\n   // Local variable declaration:\n   int a, b;\n \n   // actual initialization\n   a = 10;\n   b = 20;\n   g = a + b;\n  \n   cout &lt;&lt; g;\n \n   return 0;\n}\n</pre>\n<p>A program can have same name for local and global variables but value of local variable inside a function will take preference. For example \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/dt7MP9\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n \n// Global variable declaration:\nint g = 20;\n \nint main () {\n   // Local variable declaration:\n   int g = 10;\n \n   cout &lt;&lt; g;\n \n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\n10\n</pre>\n<h2>Initializing Local and Global Variables</h2>\n<p>When a local variable is defined, it is not initialized by the system, you must initialize it yourself. Global variables are initialized automatically by the system when you define them as follows \u2212</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<th style=\"text-align:center;\" width=\"50%\">Data Type</th>\n<th style=\"text-align:center;\">Initializer</th>\n</tr>\n<tr>\n<td>int</td>\n<td>0</td>\n</tr>\n<tr>\n<td>char</td>\n<td>'\\0'</td>\n</tr>\n<tr>\n<td>float</td>\n<td>0</td>\n</tr>\n<tr>\n<td>double</td>\n<td>0</td>\n</tr>\n<tr>\n<td>pointer</td>\n<td>NULL</td>\n</tr>\n</table>\n<p>It is a good programming practice to initialize variables properly, otherwise sometimes program would produce unexpected result.</p>\n<h1>C++ Constants/Literals</h1>\n<p>Constants refer to fixed values that the program may not alter and they are called <b>literals</b>.</p>\n<p>Constants can be of any of the basic data types and can be divided into Integer Numerals, Floating-Point Numerals, Characters, Strings and Boolean Values.</p>\n<p>Again, constants are treated just like regular variables except that their values cannot be modified after their definition.</p>\n<h2>Integer Literals</h2>\n<p>An integer literal can be a decimal, octal, or hexadecimal constant. A prefix specifies the base or radix: 0x or 0X for hexadecimal, 0 for octal, and nothing for decimal.</p>\n<p>An integer literal can also have a suffix that is a combination of U and L, for unsigned and long, respectively. The suffix can be uppercase or lowercase and can be in any order.</p>\n<p>Here are some examples of integer literals \u2212</p>\n<pre class=\"result notranslate\">\n212         // Legal\n215u        // Legal\n0xFeeL      // Legal\n078         // Illegal: 8 is not an octal digit\n032UU       // Illegal: cannot repeat a suffix\n</pre>\n<p>Following are other examples of various types of Integer literals \u2212</p>\n<pre class=\"result notranslate\">\n85         // decimal\n0213       // octal\n0x4b       // hexadecimal\n30         // int\n30u        // unsigned int\n30l        // long\n30ul       // unsigned long\n</pre>\n<h2>Floating-point Literals</h2>\n<p>A floating-point literal has an integer part, a decimal point, a fractional part, and an exponent part. You can represent floating point literals either in decimal form or exponential form.</p>\n<p>While representing using decimal form, you must include the decimal point, the exponent, or both and while representing using exponential form, you must include the integer part, the fractional part, or both. The signed exponent is introduced by e or E.</p>\n<p>Here are some examples of floating-point literals \u2212</p>\n<pre class=\"result notranslate\">\n3.14159       // Legal\n314159E-5L    // Legal\n510E          // Illegal: incomplete exponent\n210f          // Illegal: no decimal or exponent\n.e55          // Illegal: missing integer or fraction\n</pre>\n<h2>Boolean Literals</h2>\n<p>There are two Boolean literals and they are part of standard C++ keywords \u2212</p>\n<ul class=\"list\">\n<li><p>A value of <b>true</b> representing true.</p></li>\n<li><p>A value of <b>false</b> representing false.</p></li>\n</ul>\n<p>You should not consider the value of true equal to 1 and value of false equal to 0.</p>\n<h2>Character Literals</h2>\n<p>Character literals are enclosed in single quotes. If the literal begins with L (uppercase only), it is a wide character literal (e.g., L'x') and should be stored in <b>wchar_t</b> type of variable . Otherwise, it is a narrow character literal (e.g., 'x') and can be stored in a simple variable of <b>char</b> type.</p>\n<p>A character literal can be a plain character (e.g., 'x'), an escape sequence (e.g., '\\t'), or a universal character (e.g., '\\u02C0'). </p>\n<p>There are certain characters in C++ when they are preceded by a backslash they will have special meaning and they are used to represent like newline (\\n) or tab (\\t). Here, you have a list of some of such escape sequence codes \u2212</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<th style=\"text-align:center;\">Escape sequence</th>\n<th style=\"text-align:center;\">Meaning</th>\n</tr>\n<tr>\n<td>\\\\</td>\n<td>\\ character</td>\n</tr>\n<tr>\n<td>\\'</td>\n<td> ' character</td>\n</tr>\n<tr>\n<td>\\\"</td>\n<td>\" character</td>\n</tr>\n<tr>\n<td>\\?</td>\n<td>? character</td>\n</tr>\n<tr>\n<td>\\a</td>\n<td>Alert or bell</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>Backspace</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>Form feed</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>Newline</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>Carriage return</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>Horizontal tab</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>Vertical tab</td>\n</tr>\n<tr>\n<td>\\ooo</td>\n<td>Octal number of one to three digits</td>\n</tr>\n<tr>\n<td>\\xhh . . .</td>\n<td>Hexadecimal number of one or more digits</td>\n</tr>\n</table>\n<p>Following is the example to show a few escape sequence characters \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/8RqQ5S\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n   cout &lt;&lt; \"Hello\\tWorld\\n\\n\";\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nHello   World\n</pre>\n<h2>String Literals</h2>\n<p>String literals are enclosed in double quotes. A string contains characters that are similar to character literals: plain characters, escape sequences, and universal characters.</p>\n<p>You can break a long line into multiple lines using string literals and separate them using whitespaces.</p>\n<p>Here are some examples of string literals. All the three forms are identical strings.</p>\n<pre class=\"result notranslate\">\n\"hello, dear\"\n\n\"hello, \\\n\ndear\"\n\n\"hello, \" \"d\" \"ear\"\n</pre>\n<h2>Defining Constants</h2>\n<p>There are two simple ways in C++ to define constants \u2212</p>\n<ul class=\"list\">\n<li><p>Using <b>#define</b> preprocessor.</p></li>\n<li><p>Using <b>const</b> keyword.</p></li>\n</ul>\n<h2>The #define Preprocessor</h2>\n<p>Following is the form to use #define preprocessor to define a constant \u2212</p>\n<pre class=\"result notranslate\">\n#define identifier value\n</pre>\n<p>Following example explains it in detail \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/N6xxDP\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\n#define LENGTH 10   \n#define WIDTH  5\n#define NEWLINE '\\n'\n\nint main() {\n   int area;  \n   \n   area = LENGTH * WIDTH;\n   cout &lt;&lt; area;\n   cout &lt;&lt; NEWLINE;\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\n50\n</pre>\n<h2>The const Keyword</h2>\n<p>You can use <b>const</b> prefix to declare constants with a specific type as follows \u2212</p>\n<pre class=\"result notranslate\">\nconst type variable = value;\n</pre>\n<p>Following example explains it in detail \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/IA1cea\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n   const int  LENGTH = 10;\n   const int  WIDTH  = 5;\n   const char NEWLINE = '\\n';\n   int area;  \n   \n   area = LENGTH * WIDTH;\n   cout &lt;&lt; area;\n   cout &lt;&lt; NEWLINE;\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\n50\n</pre>\n<p>Note that it is a good programming practice to define constants in CAPITALS.</p>\n<h1>C++ Modifier Types</h1>\n<p>C++ allows the <b>char, int, </b> and <b>double</b> data types to have modifiers preceding them. A modifier is used to alter the meaning of the base type so that it more precisely fits the needs of various situations.</p>\n<p>The data type modifiers are listed here \u2212</p>\n<ul class=\"list\">\n<li>signed</li>\n<li>unsigned</li>\n<li>long</li>\n<li>short</li>\n</ul>\n<p>The modifiers <b>signed, unsigned, long,</b> and <b>short</b> can be applied to integer base types. In addition, <b>signed</b> and <b>unsigned</b> can be applied to char, and <b>long</b> can be applied to double.</p>\n<p>The modifiers <b>signed</b> and <b>unsigned</b> can also be used as prefix to <b>long</b> or <b>short</b> modifiers. For example, <b>unsigned long int</b>.</p>\n<p>C++ allows a shorthand notation for declaring <b>unsigned, short,</b> or <b>long</b> integers. You can simply use the word <b>unsigned, short,</b> or <b>long,</b> without <b>int</b>. It automatically implies <b>int</b>. For example, the following two statements both declare unsigned integer variables.</p>\n<pre class=\"result notranslate\">\nunsigned x;\nunsigned int y;\n</pre>\n<p>To understand the difference between the way signed and unsigned integer modifiers are interpreted by C++, you should run the following short program \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/nWAgjz\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n \n/* This program shows the difference between\n   * signed and unsigned integers.\n*/\nint main() {\n   short int i;           // a signed short integer\n   short unsigned int j;  // an unsigned short integer\n\n   j = 50000;\n\n   i = j;\n   cout &lt;&lt; i &lt;&lt; \" \" &lt;&lt; j;\n\n   return 0;\n}\n</pre>\n<p>When this program is run, following is the output \u2212</p>\n<pre class=\"result notranslate\">\n-15536 50000\n</pre>\n<p>The above result is because the bit pattern that represents 50,000 as a short unsigned integer is interpreted as -15,536 by a short.</p>\n<h2>Type Qualifiers in C++</h2>\n<p>The type qualifiers provide additional information about the variables they precede.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Qualifier &amp; Meaning</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>const</b></p>\n<p>Objects of type <b>const</b> cannot be changed by your program during execution.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>volatile</b></p>\n<p>The modifier <b>volatile</b> tells the compiler that a variable's value may be changed in ways not explicitly specified by the program.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>restrict</b></p>\n<p>A pointer qualified by <b>restrict</b> is initially the only means by which the object it points to can be accessed. Only C99 adds a new type qualifier called restrict.</p></td>\n</tr>\n</table>\n<h1>Storage Classes in C++</h1>\n<p>A storage class defines the scope (visibility) and life-time of variables and/or functions within a C++ Program. These specifiers precede the type that they modify. There are following storage classes, which can be used in a C++ Program</p>\n<ul class=\"list\">\n<li>auto</li>\n<li>register</li>\n<li>static</li>\n<li>extern</li>\n<li>mutable</li>\n</ul>\n<h2>The auto Storage Class</h2>\n<p>The <b>auto</b> storage class is the default storage class for all local variables.</p>\n<pre class=\"result notranslate\">\n{\n   int mount;\n   auto int month;\n}\n</pre>\n<p>The example above defines two variables with the same storage class, auto can only be used within functions, i.e., local variables.</p>\n<h2>The register Storage Class</h2>\n<p>The <b>register</b> storage class is used to define local variables that should be stored in a register instead of RAM. This means that the variable has a maximum size equal to the register size (usually one word) and can't have the unary '&amp;' operator applied to it (as it does not have a memory location).</p>\n<pre class=\"result notranslate\">\n{\n   register int  miles;\n}\n</pre>\n<p>The register should only be used for variables that require quick access such as counters. It should also be noted that defining 'register' does not mean that the variable will be stored in a register. It means that it MIGHT be stored in a register depending on hardware and implementation restrictions.</p>\n<h2>The static Storage Class</h2>\n<p>The <b>static</b> storage class instructs the compiler to keep a local variable in existence during the life-time of the program instead of creating and destroying it each time it comes into and goes out of scope.  Therefore, making local variables static allows them to maintain their values between function calls.</p>\n<p>The static modifier may also be applied to global variables. When this is done, it causes that variable's scope to be restricted to the file in which it is declared.</p>\n<p>In C++, when static is used on a class data member, it causes only one copy of that member to be shared by all objects of its class.</p>\n<a class=\"demo\" href=\"http://tpcg.io/20HjiV\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n \n// Function declaration\nvoid func(void);\n \nstatic int count = 10; /* Global variable */\n \nmain() {\n   while(count--) {\n      func();\n   }\n   \n   return 0;\n}\n\n// Function definition\nvoid func( void ) {\n   static int i = 5; // local static variable\n   i++;\n   std::cout &lt;&lt; \"i is \" &lt;&lt; i ;\n   std::cout &lt;&lt; \" and count is \" &lt;&lt; count &lt;&lt; std::endl;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\ni is 6 and count is 9\ni is 7 and count is 8\ni is 8 and count is 7\ni is 9 and count is 6\ni is 10 and count is 5\ni is 11 and count is 4\ni is 12 and count is 3\ni is 13 and count is 2\ni is 14 and count is 1\ni is 15 and count is 0\n</pre>\n<h2>The extern Storage Class</h2>\n<p>The <b>extern</b> storage class is used to give a reference  of a global variable that is visible to ALL the program files. When you use 'extern' the variable cannot be initialized  as all it does is point the variable name at a storage location that has been previously defined.</p>\n<p>When you have multiple files and you define a global variable or function, which will be used in other files also, then <i>extern</i> will be used in another file to give reference of defined variable or function. Just for understanding <i> extern </i> is used to declare a global variable or function in another file.</p>\n<p>The extern modifier is most commonly used when there are two or more files sharing the same global variables or functions as explained below.</p>\n<h3>First File: main.cpp</h3>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nint count ;\nextern void write_extern();\n \nmain() {\n   count = 5;\n   write_extern();\n}\n</pre>\n<h3>Second File: support.cpp</h3>\n<pre class=\"result notranslate\">\n#include &lt;iostream&gt;\n\nextern int count;\n\nvoid write_extern(void) {\n   std::cout &lt;&lt; \"Count is \" &lt;&lt; count &lt;&lt; std::endl;\n}\n</pre>\n<p>Here, <i>extern</i> keyword is being used to declare count in another file. Now compile these two files as follows \u2212</p>\n<pre class=\"result notranslate\">\n$g++ main.cpp support.cpp -o write\n</pre>\n<p>This will produce <b>write</b> executable program, try to execute <b>write</b> and check the result as follows \u2212</p>\n<pre class=\"result notranslate\">\n$./write\n5\n</pre>\n<h2>The mutable Storage Class</h2>\n<p>The <b>mutable</b> specifier applies only to class objects, which are discussed later in this tutorial. It allows a member of an object to override const member function. That is, a mutable member can be modified by a const member function.</p>\n<h1>Operators in C++</h1>\n<p>An operator is a symbol that tells the compiler to perform specific mathematical or logical manipulations. C++ is rich in built-in operators and provide the following types of operators \u2212</p>\n<ul class=\"list\">\n<li>Arithmetic Operators</li>\n<li>Relational Operators</li>\n<li>Logical Operators</li>\n<li>Bitwise Operators</li>\n<li>Assignment Operators</li>\n<li>Misc Operators</li>\n</ul>\n<p>This chapter will examine the arithmetic, relational, logical, bitwise, assignment and other operators one by one.</p>\n<h2>Arithmetic Operators</h2>\n<p>There are following arithmetic operators supported by C++ language \u2212</p>\n<p>Assume variable A holds 10 and variable B holds 20, then \u2212</p>\n<p><a href=\"/cplusplus/cpp_arithmatic_operators.htm\" title=\"Arithmetic Operators in C++\">Show Examples</a></p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\" width=\"10%\">Operator</th>\n<th style=\"text-align:center;\" width=\"45%\">Description</th>\n<th style=\"text-align:center;\">Example</th>\n</tr>\n<tr>\n<td style=\"text-align:center;\">+</td>\n<td>Adds two operands</td>\n<td style=\"text-align:center;\">A + B will give 30</td>\n</tr>\n<tr>\n<td class=\"ts\">-</td>\n<td>Subtracts second operand from the first</td>\n<td class=\"ts\">A - B will give -10</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">*</td>\n<td>Multiplies both operands</td>\n<td style=\"text-align:center;\">A * B will give 200</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">/</td>\n<td>Divides numerator by de-numerator</td>\n<td style=\"text-align:center;\">B / A will give 2</td>\n</tr>\n<tr>\n<td class=\"ts\">%</td>\n<td>Modulus Operator and remainder of after an integer division</td>\n<td class=\"ts\">B % A will give 0</td>\n</tr>\n<tr>\n<td class=\"ts\">++</td>\n<td><a href=\"/cplusplus/cpp_increment_decrement_operators.htm\" title=\"Increment operator in C++\">Increment operator</a>, increases integer value by one</td>\n<td class=\"ts\">A++ will give 11</td>\n</tr>\n<tr>\n<td class=\"ts\">--</td>\n<td><a href=\"/cplusplus/cpp_increment_decrement_operators.htm\" title=\"Decrement operator in C++\">Decrement operator</a>, decreases integer value by one</td>\n<td class=\"ts\">A-- will give 9</td>\n</tr>\n</table>\n<h2>Relational Operators</h2>\n<p>There are following relational operators supported by C++ language</p>\n<p>Assume variable A holds 10 and variable B holds 20, then \u2212</p>\n<p><a href=\"/cplusplus/cpp_relational_operators.htm\" title=\"Relational Operators in C++\">Show Examples</a></p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\" width=\"10%\">Operator</th>\n<th style=\"text-align:center;\" width=\"45%\">Description</th>\n<th style=\"text-align:center;\">Example</th>\n</tr>\n<tr>\n<td class=\"ts\">==</td>\n<td>Checks if the values of two operands are equal or not, if yes then condition becomes true.</td>\n<td class=\"ts\">(A == B) is not true.</td>\n</tr>\n<tr>\n<td class=\"ts\">!=</td>\n<td>Checks if the values of two operands are equal or not, if values are not equal then condition becomes true.</td>\n<td class=\"ts\">(A != B) is true.</td>\n</tr>\n<tr>\n<td class=\"ts\">&gt;</td>\n<td>Checks if the value of left  operand is greater than the value of right operand, if yes then condition becomes true.</td>\n<td class=\"ts\">(A &gt; B) is not true.</td>\n</tr>\n<tr>\n<td class=\"ts\">&lt;</td>\n<td>Checks if the value of left  operand is less than the value of right operand, if yes then condition becomes true.</td>\n<td class=\"ts\">(A &lt; B) is true.</td>\n</tr>\n<tr>\n<td class=\"ts\">&gt;=</td>\n<td>Checks if the value of left  operand is greater than or equal to the value of right operand, if yes then condition becomes true.</td>\n<td class=\"ts\">(A &gt;= B) is not true.</td>\n</tr>\n<tr>\n<td class=\"ts\">&lt;=</td>\n<td>Checks if the value of left  operand is less than or equal to the value of right operand, if yes then condition becomes true.</td>\n<td class=\"ts\">(A &lt;= B) is true.</td>\n</tr>\n</table>\n<h2>Logical Operators</h2>\n<p>There are following logical operators supported by C++ language.</p>\n<p>Assume variable A holds 1 and variable B holds 0, then \u2212</p>\n<p><a href=\"/cplusplus/cpp_logical_operators.htm\" title=\"Logical Operators in C++\">Show Examples</a></p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\" width=\"10%\">Operator</th>\n<th style=\"text-align:center;\" width=\"45%\">Description</th>\n<th style=\"text-align:center;\">Example</th>\n</tr>\n<tr>\n<td class=\"ts\">&amp;&amp;</td>\n<td>Called Logical AND  operator. If both the operands are non-zero, then condition becomes true.</td>\n<td class=\"ts\">(A &amp;&amp; B) is false.</td>\n</tr>\n<tr>\n<td class=\"ts\">||</td>\n<td>Called Logical OR Operator. If any of the two operands is non-zero, then condition becomes true.</td>\n<td class=\"ts\">(A || B) is true.</td>\n</tr>\n<tr>\n<td class=\"ts\">!</td>\n<td>Called Logical NOT Operator. Use to reverses the logical state of its operand. If a condition is true, then Logical NOT operator will make false.</td>\n<td class=\"ts\">!(A &amp;&amp; B) is true.</td>\n</tr>\n</table>\n<h2>Bitwise Operators</h2>\n<p>Bitwise operator works on bits and perform bit-by-bit operation. The truth tables for &amp;, |, and ^ are as follows \u2212</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<th style=\"text-align:center;width:20%\">p</th>\n<th style=\"text-align:center;width:20%\">q</th>\n<th style=\"text-align:center;width:20%\">p &amp; q</th>\n<th style=\"text-align:center;width:20%\">p | q</th>\n<th style=\"text-align:center;width:20%\">p ^ q</th>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n</table>\n<p>Assume if A = 60; and B = 13; now in binary format they will be as follows \u2212</p>\n<p>A = 0011 1100</p>\n<p>B = 0000 1101</p>\n<p>-----------------</p>\n<p>A&amp;B = 0000 1100</p>\n<p>A|B = 0011 1101</p>\n<p>A^B = 0011 0001</p>\n<p>~A\u00a0 = 1100 0011</p>\n<p>The Bitwise operators supported by C++ language are listed in the following table. Assume variable A holds 60 and variable B holds 13, then \u2212</p>\n<p><a href=\"/cplusplus/cpp_bitwise_operators.htm\" title=\"Bitwise Operators in C++\">Show Examples</a></p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\" width=\"10%\">Operator</th>\n<th style=\"text-align:center;\" width=\"45%\">Description</th>\n<th style=\"text-align:center;\">Example</th>\n</tr>\n<tr>\n<td class=\"ts\">&amp;</td>\n<td>Binary AND Operator copies a bit to the result if it exists in both operands. </td>\n<td style=\"vertical-align:middle;\">(A &amp; B) will give 12 which is 0000 1100</td>\n</tr>\n<tr>\n<td class=\"ts\">|</td>\n<td>Binary OR Operator copies a bit if it exists in either operand.</td>\n<td>(A | B) will give 61 which is 0011 1101</td>\n</tr>\n<tr>\n<td class=\"ts\">^</td>\n<td>Binary XOR Operator copies the bit if it is set in one operand but not both.</td>\n<td style=\"vertical-align:middle;\">(A ^ B) will give 49 which is 0011 0001</td>\n</tr>\n<tr>\n<td class=\"ts\">~</td>\n<td>Binary Ones Complement Operator is unary and has the effect of 'flipping' bits. </td>\n<td>(~A ) will give -61 which is 1100 0011 in 2's complement form due to a signed binary number.</td>\n</tr>\n<tr>\n<td class=\"ts\">&lt;&lt;</td>\n<td>Binary Left Shift Operator. The left operands value is moved left by the number of bits specified by the right operand.</td>\n<td style=\"vertical-align:middle;\">A &lt;&lt; 2 will give 240 which is 1111 0000</td>\n</tr>\n<tr>\n<td class=\"ts\">&gt;&gt;</td>\n<td>Binary Right Shift Operator. The left operands value is moved right by the number of bits specified by the right operand.</td>\n<td style=\"vertical-align:middle;\">A &gt;&gt; 2 will give 15 which is 0000 1111</td>\n</tr>\n</table>\n<h2>Assignment Operators</h2>\n<p>There are following assignment operators supported by C++ language \u2212</p>\n<p><a href=\"/cplusplus/cpp_assignment_operators.htm\" title=\"Assignment Operators in C++\">Show Examples</a></p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\" width=\"10%\">Operator</th>\n<th style=\"text-align:center;\" width=\"48%\">Description</th>\n<th style=\"text-align:center;\">Example</th>\n</tr>\n<tr>\n<td class=\"ts\">=</td>\n<td>Simple assignment operator, Assigns values from right side operands to left side operand.</td>\n<td style=\"vertical-align:middle;\">C = A + B will assign value of A + B into C</td>\n</tr>\n<tr>\n<td class=\"ts\">+=</td>\n<td>Add AND assignment operator, It adds right operand to the left operand and assign the result to left operand.</td>\n<td style=\"vertical-align:middle;\">C += A is equivalent to C = C + A</td>\n</tr>\n<tr>\n<td class=\"ts\">-=</td>\n<td>Subtract AND assignment operator, It subtracts right operand from the left operand and assign the result to left operand.</td>\n<td style=\"vertical-align:middle;\">C -= A is equivalent to C = C - A</td>\n</tr>\n<tr>\n<td class=\"ts\">*=</td>\n<td>Multiply AND assignment operator, It multiplies right operand with the left operand and assign the result to left operand.</td>\n<td style=\"vertical-align:middle;\">C *= A is equivalent to C = C * A</td>\n</tr>\n<tr>\n<td class=\"ts\">/=</td>\n<td>Divide AND assignment operator, It divides left operand with the right operand and assign the result to left operand.</td>\n<td style=\"vertical-align:middle;\">C /= A is equivalent to C = C / A</td>\n</tr>\n<tr>\n<td class=\"ts\">%=</td>\n<td>Modulus AND assignment operator, It takes modulus using two operands and assign the result to  left operand.</td>\n<td style=\"vertical-align:middle;\">C %= A is equivalent to C = C % A</td>\n</tr>\n<tr>\n<td class=\"ts\">&lt;&lt;=</td>\n<td>Left shift AND assignment operator.</td>\n<td style=\"vertical-align:middle;\">C &lt;&lt;= 2 is same as C = C &lt;&lt; 2</td>\n</tr>\n<tr>\n<td class=\"ts\">&gt;&gt;=</td>\n<td>Right shift AND assignment operator.</td>\n<td style=\"vertical-align:middle;\">C &gt;&gt;= 2 is same as C = C &gt;&gt; 2</td>\n</tr>\n<tr>\n<td class=\"ts\">&amp;=</td>\n<td>Bitwise AND assignment operator.</td>\n<td style=\"vertical-align:middle;\">C &amp;= 2 is same as C = C &amp; 2</td>\n</tr>\n<tr>\n<td class=\"ts\">^=</td>\n<td>Bitwise exclusive OR and assignment operator.</td>\n<td style=\"vertical-align:middle;\">C ^= 2 is same as C = C ^ 2</td>\n</tr>\n<tr>\n<td class=\"ts\">|=</td>\n<td>Bitwise inclusive OR and assignment operator.</td>\n<td style=\"vertical-align:middle;\">C |= 2 is same as C = C | 2</td>\n</tr>\n</table>\n<h2>Misc Operators</h2>\n<p>The following table lists some other operators that C++ supports.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Operator &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>sizeof</b></p>\n<p><a href=\"/cplusplus/cpp_sizeof_operator.htm\">sizeof operator</a> returns the size of a variable. For example, sizeof(a), where \u2018a\u2019 is integer, and will return 4.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>Condition ? X : Y</b></p>\n<p><a href=\"/cplusplus/cpp_conditional_operator.htm\">Conditional operator (?)</a>. If Condition is true then it returns value of X otherwise returns value of Y.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>,</b></p>\n<p><a href=\"/cplusplus/cpp_comma_operator.htm\">Comma operator</a> causes a sequence of operations to be performed. The value of the entire comma expression is the value of the last expression of the comma-separated list.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>. (dot) and  -&gt; (arrow)</b></p>\n<p><a href=\"/cplusplus/cpp_member_operators.htm\">Member operators</a> are used to reference individual members of classes, structures, and unions.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>Cast</b></p>\n<p><a href=\"/cplusplus/cpp_casting_operators.htm\">Casting operators</a> convert one data type to another. For example, int(2.2000) would return 2.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><p><b>&amp;</b></p>\n<p><a href=\"/cplusplus/cpp_pointer_operators.htm\">Pointer operator &amp;</a> returns the address of a variable. For example &amp;a; will give actual address of the variable.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">7</td>\n<td><p><b>*</b></p>\n<p><a href=\"/cplusplus/cpp_pointer_operators.htm\">Pointer operator *</a> is pointer to a variable. For example *var; will pointer to a variable var.</p></td>\n</tr>\n</table>\n<h2>Operators Precedence in C++</h2>\n<p>Operator precedence determines the grouping of terms in an expression. This affects how an expression is evaluated. Certain operators have higher precedence than others; for example, the multiplication operator has higher precedence than the addition operator \u2212</p>\n<p>For example x = 7 + 3 * 2; here, x is assigned 13, not 20 because operator * has higher precedence than +, so it first gets multiplied with 3*2 and then adds into 7.</p>\n<p>Here, operators with the highest precedence appear at the top of the table, those with the lowest appear at the bottom. Within an expression, higher precedence operators will be evaluated first.</p>\n<p><a href=\"/cplusplus/cpp_operators_precedence.htm\" title=\"Operators Precedence in C++\">Show Examples</a></p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<th style=\"text-align:center;\">Category\u00a0</th>\n<th style=\"text-align:center;\">Operator\u00a0</th>\n<th style=\"text-align:center;\">Associativity\u00a0</th>\n</tr>\n<tr>\n<td>Postfix\u00a0</td>\n<td>() [] -&gt; .  ++   - - \u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Unary\u00a0</td>\n<td>+  -   !  ~  ++  - - (type)*  &amp; sizeof\u00a0</td>\n<td>Right to left\u00a0</td>\n</tr>\n<tr>\n<td>Multiplicative \u00a0</td>\n<td>*  /  %\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Additive \u00a0</td>\n<td>+  -\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Shift \u00a0</td>\n<td>&lt;&lt; &gt;&gt;\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Relational \u00a0</td>\n<td>&lt; &lt;=  &gt; &gt;=\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Equality \u00a0</td>\n<td>==  !=\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Bitwise AND\u00a0</td>\n<td>&amp;\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Bitwise XOR\u00a0</td>\n<td>^\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Bitwise OR\u00a0</td>\n<td>|\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Logical AND\u00a0</td>\n<td>&amp;&amp;\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Logical OR\u00a0</td>\n<td>||\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n<tr>\n<td>Conditional\u00a0</td>\n<td>?:\u00a0</td>\n<td>Right to left\u00a0</td>\n</tr>\n<tr>\n<td>Assignment\u00a0</td>\n<td>=  +=  -=  *=  /=  %=&gt;&gt;=  &lt;&lt;=  &amp;=  ^=   |=\u00a0</td>\n<td>Right to left\u00a0</td>\n</tr>\n<tr>\n<td>Comma\u00a0</td>\n<td>,\u00a0</td>\n<td>Left to right\u00a0</td>\n</tr>\n</table>\n<h1>C++ Loop Types</h1>\n<p>There may be a situation, when you need to execute a block of code several number of times. In general, statements are executed sequentially: The first statement in a function is executed first, followed by the second, and so on.</p>\n<p>Programming languages provide various control structures that allow for more complicated execution paths.</p>\n<p>A loop statement allows us to execute a statement or group of statements multiple times and following is the general from of a loop statement in most of the programming languages \u2212</p>\n<img alt=\"Loop Architecture\" src=\"/cplusplus/images/loop_architecture.jpg\">\n<p>C++ programming language provides the following type of loops to handle looping requirements.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Loop Type &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><a href=\"/cplusplus/cpp_while_loop.htm\" title=\"C++ while loop\">while loop</a>\n<p>Repeats a statement or group of statements while a given condition is true. It tests the condition before executing the loop body.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><a href=\"/cplusplus/cpp_for_loop.htm\" title=\"C++ for loop\">for loop</a>\n<p>Execute a sequence of statements multiple times and abbreviates the code that manages the loop variable.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><a href=\"/cplusplus/cpp_do_while_loop.htm\" title=\"C++ do...while loop\">do...while loop</a>\n<p>Like a \u2018while\u2019 statement, except that it tests the condition at the end of the loop body.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><a href=\"/cplusplus/cpp_nested_loops.htm\" title=\"C++ nested loops\">nested loops</a>\n<p>You can use one or more loop inside any another \u2018while\u2019, \u2018for\u2019 or \u2018do..while\u2019 loop.</p></td>\n</tr>\n</table>\n<h2>Loop Control Statements</h2>\n<p>Loop control statements change execution from its normal sequence. When execution leaves a scope, all automatic objects that were created in that scope are destroyed.</p>\n<p>C++ supports the following control statements.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Control Statement &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><a href=\"/cplusplus/cpp_break_statement.htm\" title=\"C++ break statement\">break statement</a>\n<p>Terminates the <b>loop</b> or <b>switch</b> statement and transfers execution to the statement immediately following the loop or switch.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><a href=\"/cplusplus/cpp_continue_statement.htm\" title=\"C++ continue statement\">continue statement</a>\n<p>Causes the loop to skip the remainder of its body and immediately retest its condition prior to reiterating.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><a href=\"/cplusplus/cpp_goto_statement.htm\" title=\"C++ goto statement\">goto statement</a>\n<p>Transfers control to the labeled statement. Though it is not advised to use goto statement in your program.</p></td>\n</tr>\n</table>\n<h2>The Infinite Loop</h2>\n<p>A loop becomes infinite loop if a condition never becomes false. The <b>for</b> loop is traditionally used for this purpose. Since none of the three expressions that form the \u2018for\u2019 loop are required, you can make an endless loop by leaving the conditional expression empty.</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n \nint main () {\n   for( ; ; ) {\n      printf(\"This loop will run forever.\\n\");\n   }\n\n   return 0;\n}\n</pre>\n<p>When the conditional expression is absent, it is assumed to be true. You may have an initialization and increment expression, but C++ programmers more commonly use the \u2018for (;;)\u2019 construct to signify an infinite loop.</p>\n<p><b>NOTE</b> \u2212 You can terminate an infinite loop by pressing Ctrl + C keys.</p>\n<h1>C++ decision making statements</h1>\n<p>Decision making structures require that the programmer specify one or more conditions to be evaluated or tested by the program, along with a statement or statements to be executed if the condition is determined to be true, and optionally, other statements to be executed if the condition is determined to be false.</p>\n<p>Following is the general form of a typical decision making structure found in most of the programming languages \u2212</p>\n<img alt=\"C++ decision making\" src=\"/cplusplus/images/cpp_decision_making.jpg\"/>\n<p>C++ programming language provides following types of decision making statements.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Statement &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><a href=\"/cplusplus/cpp_if_statement.htm\" title=\"C++ if statement\">if statement</a>\n<p>An \u2018if\u2019 statement consists of a boolean expression followed by one or more statements.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><a href=\"/cplusplus/cpp_if_else_statement.htm\" title=\"C++ if...else statement\">if...else statement</a>\n<p>An \u2018if\u2019 statement can be followed by an optional \u2018else\u2019 statement, which executes when the boolean expression is false.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><a href=\"/cplusplus/cpp_switch_statement.htm\" title=\"C++ switch statement\">switch statement</a>\n<p>A \u2018switch\u2019 statement allows a variable to be tested for equality against a list of values.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><a href=\"/cplusplus/cpp_nested_if.htm\" title=\"C++ nested if statements\">nested if statements</a>\n<p>You can use one \u2018if\u2019 or \u2018else if\u2019 statement inside another \u2018if\u2019 or \u2018else if\u2019 statement(s).</p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><a href=\"/cplusplus/cpp_nested_switch.htm\" title=\"C++ nested switch statements\">nested switch statements</a>\n<p>You can use one \u2018switch\u2019 statement inside another \u2018switch\u2019 statement(s).</p></td>\n</tr>\n</table>\n<h2>The ? : Operator</h2>\n<p>We have covered <a href=\"/cplusplus/cpp_conditional_operator.htm\">conditional operator \u201c? :\u201d</a> in previous chapter which can be used to replace <b>if...else</b> statements. It has the following general form \u2212</p>\n<pre class=\"result notranslate\">\nExp1 ? Exp2 : Exp3;\n</pre>\n<p>Exp1, Exp2, and Exp3 are expressions. Notice the use and placement of the colon.</p>\n<p>The value of a \u2018?\u2019 expression is determined like this: Exp1 is evaluated. If it is true, then Exp2 is evaluated and becomes the value of the entire \u2018?\u2019 expression. If Exp1 is false, then Exp3 is evaluated and its value becomes the value of the expression.</p>\n<h1>C++ Functions</h1>\n<p>A function is a group of statements that together perform a task. Every C++ program has at least one function, which is <b>main()</b>, and all the most trivial programs can define additional functions.</p>\n<p>You can divide up your code into separate functions. How you divide up your code among different functions is up to you, but logically the division usually is such that each function performs a specific task.</p>\n<p>A function <b>declaration</b> tells the compiler about a function's name, return type, and parameters. A function <b>definition</b> provides the actual body of the function.</p>\n<p>The C++ standard library provides numerous built-in functions that your program can call. For example, function <b>strcat()</b> to concatenate two strings, function <b>memcpy()</b> to copy one memory location to another location and many more functions.</p>\n<p>A function is known with various names like a method or a sub-routine or a procedure etc.</p>\n<h2>Defining a Function</h2>\n<p>The general form of a C++ function definition is as follows \u2212</p>\n<pre class=\"result notranslate\">\nreturn_type function_name( parameter list ) {\n   body of the function\n}\n</pre>\n<p>A C++ function definition consists of a function header and a function body. Here are all the parts of a function \u2212</p>\n<ul class=\"list\">\n<li><p><b>Return Type</b> \u2212 A function may return a value. The <b>return_type</b> is the data type of the value the function returns. Some functions perform the desired operations without returning a value. In this case, the return_type is the keyword <b>void</b>.</p></li>\n<li><p><b>Function Name</b> \u2212 This is the actual name of the function. The function name and the parameter list together constitute the function signature.</p></li>\n<li><p><b>Parameters</b> \u2212 A parameter is like a placeholder. When a function is invoked, you pass a value to the parameter. This value is referred to as actual parameter or argument. The parameter list refers to the type, order, and number of the parameters of a function. Parameters are optional; that is, a function may contain no parameters.</p></li>\n<li><p><b>Function Body</b> \u2212 The function body contains a collection of statements that define what the function does.</p></li>\n</ul>\n<h2>Example</h2>\n<p>Following is the source code for a function called <b>max()</b>. This function takes two parameters num1 and num2 and return the biggest of both \u2212</p>\n<pre class=\"result notranslate\">\n// function returning the max between two numbers\n \nint max(int num1, int num2) {\n   // local variable declaration\n   int result;\n \n   if (num1 &gt; num2)\n      result = num1;\n   else\n      result = num2;\n \n   return result; \n}\n</pre>\n<h2>Function Declarations</h2>\n<p>A function <b>declaration</b> tells the compiler about a function name and how to call the function. The actual body of the function can be defined separately.</p>\n<p>A function declaration has the following parts \u2212</p>\n<pre class=\"result notranslate\">\nreturn_type function_name( parameter list );\n</pre>\n<p>For the above defined function max(), following is the function declaration \u2212</p>\n<pre class=\"result notranslate\">\nint max(int num1, int num2);\n</pre>\n<p>Parameter names are not important in function declaration only their type is required, so following is also valid declaration \u2212</p>\n<pre class=\"result notranslate\">\nint max(int, int);\n</pre>\n<p>Function declaration is required when you define a function in one source file and you call that function in another file. In such case, you should declare the function at the top of the file calling the function.</p>\n<h2>Calling a Function</h2>\n<p>While creating a C++ function, you give a definition of what the function has to do. To use a function, you will have to call or invoke that function.</p>\n<p>When a program calls a function, program control is transferred to the called function. A called function performs defined task and when it\u2019s return statement is executed or when its function-ending closing brace is reached, it returns program control back to the main program.</p>\n<p>To call a function, you simply need to pass the required parameters along with function name, and if function returns a value, then you can store returned value. For example \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/XuXfLz\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n \n// function declaration\nint max(int num1, int num2);\n \nint main () {\n   // local variable declaration:\n   int a = 100;\n   int b = 200;\n   int ret;\n \n   // calling a function to get max value.\n   ret = max(a, b);\n   cout &lt;&lt; \"Max value is : \" &lt;&lt; ret &lt;&lt; endl;\n \n   return 0;\n}\n \n// function returning the max between two numbers\nint max(int num1, int num2) {\n   // local variable declaration\n   int result;\n \n   if (num1 &gt; num2)\n      result = num1;\n   else\n      result = num2;\n \n   return result; \n}\n</pre>\n<p>I kept max() function along with main() function and compiled the source code. While running final executable, it would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nMax value is : 200\n</pre>\n<h2>Function Arguments</h2>\n<p>If a function is to use arguments, it must declare variables that accept the values of the arguments. These variables are called the <b>formal parameters</b> of the function.</p>\n<p>The formal parameters behave like other local variables inside the function and are created upon entry into the function and destroyed upon exit.</p>\n<p>While calling a function, there are two ways that arguments can be passed to a function \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Call Type &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><a href=\"/cplusplus/cpp_function_call_by_value.htm\" title=\"C++ function call by value\">Call by Value</a>\n<p>This method copies the actual value of an argument into the formal parameter of the function. In this case, changes made to the parameter inside the function have no effect on the argument.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><a href=\"/cplusplus/cpp_function_call_by_pointer.htm\" title=\"C++ function call by pointer\">Call by Pointer</a>\n<p>This method copies the address of an argument into the formal parameter. Inside the function, the address is used to access the actual argument used in the call. This means that changes made to the parameter affect the argument.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><a href=\"/cplusplus/cpp_function_call_by_reference.htm\" title=\"C++ function call by reference\">Call by Reference</a>\n<p>This method copies the reference of an argument into the formal parameter. Inside the function, the reference is used to access the actual argument used in the call. This means that changes made to the parameter affect the argument.</p></td>\n</tr>\n</table>\n<p>By default, C++ uses <b>call by value</b> to pass arguments. In general, this means that code within a function cannot alter the arguments used to call the function and above mentioned example while calling max() function used the same method.</p>\n<h2>Default Values for Parameters</h2>\n<p>When you define a function, you can specify a default value for each of the last parameters. This value will be used if the corresponding argument is left blank when calling to the function.</p>\n<p>This is done by using the assignment operator and assigning values for the arguments in the function definition. If a value for that parameter is not passed when the function is called, the default given value is used, but if a value is specified, this default value is ignored and the passed value is used instead. Consider the following example \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/KoJLUN\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n \nint sum(int a, int b = 20) {\n   int result;\n   result = a + b;\n  \n   return (result);\n}\nint main () {\n   // local variable declaration:\n   int a = 100;\n   int b = 200;\n   int result;\n \n   // calling a function to add the values.\n   result = sum(a, b);\n   cout &lt;&lt; \"Total value is :\" &lt;&lt; result &lt;&lt; endl;\n\n   // calling a function again as follows.\n   result = sum(a);\n   cout &lt;&lt; \"Total value is :\" &lt;&lt; result &lt;&lt; endl;\n \n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nTotal value is :300\nTotal value is :120\n</pre>\n<h1>Numbers in C++</h1>\n<p>Normally, when we work with Numbers, we use primitive data types such as int, short, long, float and double, etc. The number data types, their possible values and number ranges have been explained while discussing C++ Data Types.</p>\n<h2>Defining Numbers in C++</h2>\n<p>You have already defined numbers in various examples given in previous chapters. Here is another consolidated example to define various types of numbers in C++ \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/Q21eQX\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n \nint main () {\n   // number definition:\n   short  s;\n   int    i;\n   long   l;\n   float  f;\n   double d;\n   \n   // number assignments;\n   s = 10;      \n   i = 1000;    \n   l = 1000000; \n   f = 230.47;  \n   d = 30949.374;\n   \n   // number printing;\n   cout &lt;&lt; \"short  s :\" &lt;&lt; s &lt;&lt; endl;\n   cout &lt;&lt; \"int    i :\" &lt;&lt; i &lt;&lt; endl;\n   cout &lt;&lt; \"long   l :\" &lt;&lt; l &lt;&lt; endl;\n   cout &lt;&lt; \"float  f :\" &lt;&lt; f &lt;&lt; endl;\n   cout &lt;&lt; \"double d :\" &lt;&lt; d &lt;&lt; endl;\n \n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nshort  s :10\nint    i :1000\nlong   l :1000000\nfloat  f :230.47\ndouble d :30949.4\n</pre>\n<h2>Math Operations in C++</h2>\n<p>In addition to the various functions you can create, C++ also includes some useful functions you can use. These functions are available in standard C and C++ libraries and called <b>built-in</b> functions. These are functions that can be included in your program and then use.</p>\n<p>C++ has a rich set of mathematical operations, which can be performed on various numbers. Following table lists down some useful built-in mathematical functions available in C++.</p>\n<p>To utilize these functions you need to include the math header file <b>&lt;cmath&gt;</b>.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Function &amp; Purpose</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>double cos(double);</b></p>\n<p>This function takes an angle (as a double) and returns the cosine.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>double sin(double);</b></p>\n<p>This function takes an angle (as a double) and returns the sine.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>double tan(double);</b></p>\n<p>This function takes an angle (as a double) and returns the tangent.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>double log(double);</b></p>\n<p>This function takes a number and returns the natural log of that number.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>double pow(double, double);</b></p>\n<p>The first is a number you wish to raise and the second is the power you wish to raise it t</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><p><b>double hypot(double, double);</b></p>\n<p>If you pass this function the length of two sides of a right triangle, it will return you the length of the hypotenuse.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">7</td>\n<td><p><b>double sqrt(double);</b></p>\n<p>You pass this function a number and it gives you the square root.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">8</td>\n<td><p><b>int abs(int);</b></p>\n<p>This function returns the absolute value of an integer that is passed to it.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">9</td>\n<td><p><b>double fabs(double);</b></p>\n<p>This function returns the absolute value of any decimal number passed to it.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">10</td>\n<td><p><b>double floor(double);</b></p>\n<p>Finds the integer which is less than or equal to the argument passed to it.</p>\n</td>\n</tr>\n</table>\n<p>Following is a simple example to show few of the mathematical operations \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/qU7JSv\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;cmath&gt;\nusing namespace std;\n \nint main () {\n   // number definition:\n   short  s = 10;\n   int    i = -1000;\n   long   l = 100000;\n   float  f = 230.47;\n   double d = 200.374;\n\n   // mathematical operations;\n   cout &lt;&lt; \"sin(d) :\" &lt;&lt; sin(d) &lt;&lt; endl;\n   cout &lt;&lt; \"abs(i)  :\" &lt;&lt; abs(i) &lt;&lt; endl;\n   cout &lt;&lt; \"floor(d) :\" &lt;&lt; floor(d) &lt;&lt; endl;\n   cout &lt;&lt; \"sqrt(f) :\" &lt;&lt; sqrt(f) &lt;&lt; endl;\n   cout &lt;&lt; \"pow( d, 2) :\" &lt;&lt; pow(d, 2) &lt;&lt; endl;\n \n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nsign(d)     :-0.634939\nabs(i)      :1000\nfloor(d)    :200\nsqrt(f)     :15.1812\npow( d, 2 ) :40149.7\n</pre>\n<h2>Random Numbers in C++</h2>\n<p>There are many cases where you will wish to generate a random number. There are actually two functions you will need to know about random number generation. The first is <b>rand()</b>, this function will only return a pseudo random number. The way to fix this is to first call the <b>srand()</b> function.</p>\n<p>Following is a simple example to generate few random numbers. This example makes use of <b>time()</b> function to get the number of seconds on your system time, to randomly seed the rand() function \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/Z1ZN0e\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;ctime&gt;\n#include &lt;cstdlib&gt;\n\nusing namespace std;\n \nint main () {\n   int i,j;\n \n   // set the seed\n   srand( (unsigned)time( NULL ) );\n\n   /* generate 10  random numbers. */\n   for( i = 0; i &lt; 10; i++ ) {\n      // generate actual random number\n      j = rand();\n      cout &lt;&lt;\" Random Number : \" &lt;&lt; j &lt;&lt; endl;\n   }\n\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nRandom Number : 1748144778\nRandom Number : 630873888\nRandom Number : 2134540646\nRandom Number : 219404170\nRandom Number : 902129458\nRandom Number : 920445370\nRandom Number : 1319072661\nRandom Number : 257938873\nRandom Number : 1256201101\nRandom Number : 580322989\n</pre>\n<h1>C++ Arrays</h1>\n<p>C++ provides a data structure, <b>the array</b>, which stores a fixed-size sequential collection of elements of the same type. An array is used to store a collection of data, but it is often more useful to think of an array as a collection of variables of the same type.</p>\n<p>Instead of declaring individual variables, such as number0, number1, ..., and number99, you declare one array variable such as numbers and use numbers[0], numbers[1], and ..., numbers[99] to represent individual variables. A specific element in an array is accessed by an index. </p>\n<p>All arrays consist of contiguous memory locations. The lowest address corresponds to the first element and the highest address to the last element.</p>\n<h2>Declaring Arrays</h2>\n<p>To declare an array in C++, the programmer specifies the type of the elements and the number of elements required by an array as follows \u2212</p>\n<pre class=\"result notranslate\">\ntype arrayName [ arraySize ];\n</pre>\n<p>This is called a single-dimension array. The <b>arraySize</b> must be an integer constant greater than zero and <b>type</b> can be any valid C++ data type. For example, to declare a 10-element array called balance of type double,\nuse this statement \u2212</p>\n<pre class=\"result notranslate\">\ndouble balance[10];\n</pre>\n<h2>Initializing Arrays</h2>\n<p>You can initialize C++ array elements either one by one or using a single statement as follows \u2212</p>\n<pre class=\"result notranslate\">\ndouble balance[5] = {1000.0, 2.0, 3.4, 17.0, 50.0};\n</pre>\n<p>The number of values between braces { } can not be larger than the number of elements that we declare for the array between square brackets [ ]. Following is an example to assign a single element of the array \u2212</p>\n<p>If you omit the size of the array, an array just big enough to hold the initialization is created.  Therefore, if you write \u2212</p>\n<pre class=\"result notranslate\">\ndouble balance[] = {1000.0, 2.0, 3.4, 17.0, 50.0};\n</pre>\n<p>You will create exactly the same array as you did in the previous example.</p>\n<pre class=\"result notranslate\">\nbalance[4] = 50.0;\n</pre>\n<p>The above statement assigns element number 5<sup>th</sup> in the array a value of 50.0. Array with 4<sup>th</sup> index will be 5<sup>th</sup>, i.e., last element because all arrays have 0 as the index of their first element which is also called base index. Following is the pictorial representaion of the same array we discussed above \u2212</p>\n<img alt=\"Array Presentation\" src=\"/cplusplus/images/array_presentation.jpg\"/>\n<h2>Accessing Array Elements</h2>\n<p>An element is accessed by indexing the array name. This is done by placing the index of the element within square brackets after the name of the array. For example \u2212</p>\n<pre class=\"result notranslate\">\ndouble salary = balance[9];\n</pre>\n<p>The above statement will take 10<sup>th</sup> element from the array and assign the value to salary variable. Following is an example, which will use all the above-mentioned three concepts viz. declaration, assignment and accessing arrays \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/QRe4fY\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n \n#include &lt;iomanip&gt;\nusing std::setw;\n \nint main () {\n\n   int n[ 10 ]; // n is an array of 10 integers\n \n   // initialize elements of array n to 0          \n   for ( int i = 0; i &lt; 10; i++ ) {\n      n[ i ] = i + 100; // set element at location i to i + 100\n   }\n   cout &lt;&lt; \"Element\" &lt;&lt; setw( 13 ) &lt;&lt; \"Value\" &lt;&lt; endl;\n \n   // output each array element's value                      \n   for ( int j = 0; j &lt; 10; j++ ) {\n      cout &lt;&lt; setw( 7 )&lt;&lt; j &lt;&lt; setw( 13 ) &lt;&lt; n[ j ] &lt;&lt; endl;\n   }\n \n   return 0;\n}\n</pre>\n<p>This program makes use of <b>setw()</b> function to format the output. When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nElement        Value\n      0          100\n      1          101\n      2          102\n      3          103\n      4          104\n      5          105\n      6          106\n      7          107\n      8          108\n      9          109\n</pre>\n<h2>Arrays in C++</h2>\n<p>Arrays are important to C++ and should need lots of more detail. There are following few important concepts, which should be clear to a C++ programmer \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Concept &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><a href=\"/cplusplus/cpp_multi_dimensional_arrays.htm\" title=\"Multi-dimensional arrays in C++\">Multi-dimensional arrays</a>\n<p>C++ supports multidimensional arrays. The simplest form of the multidimensional array is the two-dimensional array.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><a href=\"/cplusplus/cpp_pointer_to_an_array.htm\" title=\"Pointer to an array in C++\">Pointer to an array</a>\n<p>You can generate a pointer to the first element of an array by simply specifying the array name, without any index.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><a href=\"/cplusplus/cpp_passing_arrays_to_functions.htm\" title=\"Passing arrays to functions as arguments in C++\">Passing arrays to functions</a>\n<p>You can pass to the function a pointer to an array by specifying the array's name without an index.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><a href=\"/cplusplus/cpp_return_arrays_from_functions.htm\" title=\"Return array from functions in C++\">Return array from functions</a>\n<p>C++ allows a function to return an array.</p></td>\n</tr>\n</table>\n<h1>C++ Strings</h1>\n<p>C++ provides following two types of string representations \u2212</p>\n<ul class=\"list\">\n<li>The C-style character string.</li>\n<li>The string class type introduced with Standard C++.</li>\n</ul>\n<h2>The C-Style Character String</h2>\n<p>The C-style character string originated within the C language and continues to be supported within C++.  This string is actually a one-dimensional array of characters which is terminated by a <b>null</b> character '\\0'. Thus a null-terminated string contains the characters that comprise the string followed by a <b>null</b>.</p>\n<p>The following declaration and initialization create a string consisting of the word \"Hello\". To hold the null character at the end of the array, the size of the character array containing the string is one more than the number of characters in the word \"Hello.\"</p>\n<pre class=\"result notranlate\">\nchar greeting[6] = {'H', 'e', 'l', 'l', 'o', '\\0'};\n</pre>\n<p>If you follow the rule  of array initialization, then you can write the above statement as follows \u2212</p>\n<pre class=\"result notranlate\">\nchar greeting[] = \"Hello\";\n</pre>\n<p>Following is the memory presentation of above defined string in C/C++ \u2212</p>\n<img alt=\"String Presentation in C/C++\" src=\"/cplusplus/images/string_representation.jpg\"/>\n<p>Actually, you do not place the null character at the end of a string constant. The C++ compiler automatically places the '\\0' at the end of the string when it initializes the array. Let us try to print above-mentioned string \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/OzjL2L\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranlate\">\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main () {\n\n   char greeting[6] = {'H', 'e', 'l', 'l', 'o', '\\0'};\n\n   cout &lt;&lt; \"Greeting message: \";\n   cout &lt;&lt; greeting &lt;&lt; endl;\n\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranlate\">\nGreeting message: Hello\n</pre>\n<p>C++ supports a wide range of functions that manipulate null-terminated strings \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Function &amp; Purpose</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>strcpy(s1, s2);</b></p>\n<p>Copies string s2 into string s1.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>strcat(s1, s2);</b></p>\n<p>Concatenates string s2 onto the end of string s1.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>strlen(s1);</b></p>\n<p>Returns the length of string s1.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>strcmp(s1, s2);</b></p>\n<p>Returns 0 if s1 and s2 are the same; less than 0 if s1&lt;s2; greater than 0 if s1&gt;s2.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>strchr(s1, ch);</b></p>\n<p>Returns a pointer to the first occurrence of character ch in string s1.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><p><b>strstr(s1, s2);</b></p>\n<p>Returns a pointer to the first occurrence of string s2 in string s1.</p>\n</td>\n</tr>\n</table>\n<p>Following example makes use of few of the above-mentioned functions \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/oA6mP3\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranlate\">\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n\nusing namespace std;\n\nint main () {\n\n   char str1[10] = \"Hello\";\n   char str2[10] = \"World\";\n   char str3[10];\n   int  len ;\n\n   // copy str1 into str3\n   strcpy( str3, str1);\n   cout &lt;&lt; \"strcpy( str3, str1) : \" &lt;&lt; str3 &lt;&lt; endl;\n\n   // concatenates str1 and str2\n   strcat( str1, str2);\n   cout &lt;&lt; \"strcat( str1, str2): \" &lt;&lt; str1 &lt;&lt; endl;\n\n   // total lenghth of str1 after concatenation\n   len = strlen(str1);\n   cout &lt;&lt; \"strlen(str1) : \" &lt;&lt; len &lt;&lt; endl;\n\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces result something as follows \u2212</p>\n<pre class=\"result notranlate\">\nstrcpy( str3, str1) : Hello\nstrcat( str1, str2): HelloWorld\nstrlen(str1) : 10\n</pre>\n<h2>The String Class in C++</h2>\n<p>The standard C++ library provides a <b>string</b> class type that supports all the operations mentioned above, additionally much more functionality. Let us check the following example \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/upuWFC\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranlate\">\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main () {\n\n   string str1 = \"Hello\";\n   string str2 = \"World\";\n   string str3;\n   int  len ;\n\n   // copy str1 into str3\n   str3 = str1;\n   cout &lt;&lt; \"str3 : \" &lt;&lt; str3 &lt;&lt; endl;\n\n   // concatenates str1 and str2\n   str3 = str1 + str2;\n   cout &lt;&lt; \"str1 + str2 : \" &lt;&lt; str3 &lt;&lt; endl;\n\n   // total length of str3 after concatenation\n   len = str3.size();\n   cout &lt;&lt; \"str3.size() :  \" &lt;&lt; len &lt;&lt; endl;\n\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces result something as follows \u2212</p>\n<pre class=\"result notranlate\">\nstr3 : Hello\nstr1 + str2 : HelloWorld\nstr3.size() :  10\n</pre>\n<h1>C++ Pointers</h1>\n<p>C++ pointers are easy and fun to learn. Some C++ tasks are performed more easily with pointers, and other C++ tasks, such as dynamic memory allocation, cannot be performed without them.</p>\n<p>As you know every variable is a memory location and every memory location has its address defined which can be accessed using ampersand (&amp;) operator which denotes an address in memory. Consider the following which will print the address of the variables defined \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/fQ1InE\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n\nusing namespace std;\nint main () {\n   int  var1;\n   char var2[10];\n\n   cout &lt;&lt; \"Address of var1 variable: \";\n   cout &lt;&lt; &amp;var1 &lt;&lt; endl;\n\n   cout &lt;&lt; \"Address of var2 variable: \";\n   cout &lt;&lt; &amp;var2 &lt;&lt; endl;\n\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nAddress of var1 variable: 0xbfebd5c0\nAddress of var2 variable: 0xbfebd5b6\n</pre>\n<h2>What are Pointers?</h2>\n<p>A <b>pointer</b> is a variable whose value is the address of another variable. Like any variable or constant, you must declare a pointer before you can work with it. The general form of a pointer variable declaration is \u2212</p>\n<pre class=\"result notranslate\">\ntype *var-name;\n</pre>\n<p>Here, <b>type</b> is the pointer's base type; it must be a valid C++ type and <b>var-name</b> is the name of the pointer variable. The asterisk you used to declare a pointer is the same asterisk that you use for multiplication. However, in this statement the asterisk is being used to designate a variable as a pointer. Following are the valid pointer declaration \u2212</p>\n<pre class=\"result notranslate\">\nint    *ip;    // pointer to an integer\ndouble *dp;    // pointer to a double\nfloat  *fp;    // pointer to a float\nchar   *ch     // pointer to character\n</pre>\n<p>The actual data type of the value of all pointers, whether integer, float, character, or otherwise, is the same, a long hexadecimal number that represents a memory address. The only difference between pointers of different data types is the data type of the variable or constant that the pointer points to.</p>\n<h2>Using Pointers in C++</h2>\n<p>There are few important operations, which we will do with the pointers very frequently. <b>(a)</b> We define a pointer variable. <b>(b)</b> Assign the address of a variable to a pointer. <b>(c)</b> Finally access the value at the address available in the pointer variable. This is done by using unary operator * that returns the value of the variable located at the address specified by its operand. Following example makes use of these operations \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/gTdFv7\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main () {\n   int  var = 20;   // actual variable declaration.\n   int  *ip;        // pointer variable \n\n   ip = &amp;var;       // store address of var in pointer variable\n\n   cout &lt;&lt; \"Value of var variable: \";\n   cout &lt;&lt; var &lt;&lt; endl;\n\n   // print the address stored in ip pointer variable\n   cout &lt;&lt; \"Address stored in ip variable: \";\n   cout &lt;&lt; ip &lt;&lt; endl;\n\n   // access the value at the address available in pointer\n   cout &lt;&lt; \"Value of *ip variable: \";\n   cout &lt;&lt; *ip &lt;&lt; endl;\n\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces result something as follows \u2212</p>\n<pre class=\"result notranslate\">\nValue of var variable: 20\nAddress stored in ip variable: 0xbfc601ac\nValue of *ip variable: 20\n</pre>\n<h2>Pointers in C++</h2>\n<p>Pointers have many but easy concepts and they are very important to C++ programming. There are following few important pointer concepts which should be clear to a C++ programmer \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:Center;\">Concept &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><a href=\"/cplusplus/cpp_null_pointers.htm\" title=\"C++ Null Pointers\">Null Pointers</a>\n<p>C++ supports null pointer, which is a constant with a value of zero defined in several standard libraries.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><a href=\"/cplusplus/cpp_pointer_arithmatic.htm\" title=\"C++ Pointer Arithmetic\">Pointer Arithmetic</a>\n<p>There are four arithmetic operators that can be used on pointers: ++, --, +, -</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><a href=\"/cplusplus/cpp_pointers_vs_arrays.htm\" title=\"C++ Pointers vs Arrays\">Pointers vs Arrays</a>\n<p>There is a close relationship between pointers and arrays.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><a href=\"/cplusplus/cpp_array_of_pointers.htm\" title=\"C++ Array of Pointers\">Array of Pointers</a>\n<p>You can define arrays to hold a number of pointers.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><a href=\"/cplusplus/cpp_pointer_to_pointer.htm\" title=\"C++ Pointer to Pointer Operators\">Pointer to Pointer</a>\n<p>C++ allows you to have pointer on a pointer and so on.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><a href=\"/cplusplus/cpp_passing_pointers_to_functions.htm\" title=\"Passing Pointers to Functions in C++\">Passing Pointers to Functions</a>\n<p>Passing an argument by reference or by address both enable the passed argument to be changed in the calling function by the called function.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">7</td>\n<td><a href=\"/cplusplus/cpp_return_pointer_from_functions.htm\" title=\"Return Pointer from Functions in C++\">Return Pointer from Functions</a>\n<p>C++ allows a function to return a pointer to local variable, static variable and dynamically allocated memory as well.</p></td>\n</tr>\n</table>\n<h1>C++ References</h1>\n<p>A reference variable is an alias, that is, another name for an already existing variable. Once a reference is initialized with a variable, either the variable name or the reference name may be used to refer to the variable.</p>\n<h2>References vs Pointers</h2>\n<p>References are often confused with pointers but three major differences between references and pointers are \u2212</p>\n<ul class=\"list\">\n<li><p>You cannot have NULL references. You must always be able to assume that a reference is connected to a legitimate piece of storage.</p></li>\n<li><p>Once a reference is initialized to an object, it cannot be changed to refer to another object. Pointers can be pointed to another object at any time.</p></li>\n<li><p>A reference must be initialized when it is created. Pointers can be initialized at any time.</p></li>\n</ul>\n<h2>Creating References in C++</h2>\n<p>Think of a variable name as a label attached to the variable's location in memory. You can then think of a reference as a second label attached to that memory location. Therefore, you can access the contents of the variable through either the original variable name or the reference. For example, suppose we have the following example \u2212</p>\n<pre class=\"result notranslate\">\nint i = 17;\n</pre>\n<p>We can declare reference variables for i as follows.</p>\n<pre class=\"result notranslate\">\nint&amp; r = i;\n</pre>\n<p>Read the &amp; in these declarations as <b>reference</b>. Thus, read the first declaration as \"r is an integer reference initialized to i\" and read the second declaration as \"s is a double reference initialized to d.\". Following example makes use of references on int and double \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/SS8zU0\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n \nusing namespace std;\n \nint main () {\n   // declare simple variables\n   int    i;\n   double d;\n \n   // declare reference variables\n   int&amp;    r = i;\n   double&amp; s = d;\n   \n   i = 5;\n   cout &lt;&lt; \"Value of i : \" &lt;&lt; i &lt;&lt; endl;\n   cout &lt;&lt; \"Value of i reference : \" &lt;&lt; r  &lt;&lt; endl;\n \n   d = 11.7;\n   cout &lt;&lt; \"Value of d : \" &lt;&lt; d &lt;&lt; endl;\n   cout &lt;&lt; \"Value of d reference : \" &lt;&lt; s  &lt;&lt; endl;\n   \n   return 0;\n}\n</pre>\n<p>When the above code is compiled together and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nValue of i : 5\nValue of i reference : 5\nValue of d : 11.7\nValue of d reference : 11.7\n</pre>\n<p>References are usually used for function argument lists and function return values. So following are two important subjects related to C++ references which should be clear to a C++ programmer \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Concept &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><a href=\"/cplusplus/passing_parameters_by_references.htm\" title=\"Passing parameters by references in C++\">References as Parameters</a>\n<p>C++ supports passing references as function parameter more safely than parameters.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><a href=\"/cplusplus/returning_values_by_reference.htm\" title=\"Returning values by reference in C++\">Reference as Return Value</a>\n<p>You can return reference from a C++ function like any other data type.</p></td>\n</tr>\n</table>\n<h1>C++ Date and Time</h1>\n<p>The C++ standard library does not provide a proper date type. C++ inherits the structs and functions for date and time manipulation from C. To access date and time related functions and structures, you would need to include &lt;ctime&gt; header file in your C++ program.</p>\n<p>There are four time-related types: <b>clock_t, time_t, size_t</b>, and <b>tm</b>. The types - clock_t, size_t and time_t are capable of representing the system time and date as some sort of integer.</p>\n<p>The structure type <b>tm</b> holds the date and time in the form of a C structure having the following elements \u2212</p>\n<pre class=\"result notranslate\">\nstruct tm {\n   int tm_sec;   // seconds of minutes from 0 to 61\n   int tm_min;   // minutes of hour from 0 to 59\n   int tm_hour;  // hours of day from 0 to 24\n   int tm_mday;  // day of month from 1 to 31\n   int tm_mon;   // month of year from 0 to 11\n   int tm_year;  // year since 1900\n   int tm_wday;  // days since sunday\n   int tm_yday;  // days since January 1st\n   int tm_isdst; // hours of daylight savings time\n}\n</pre>\n<p>Following are the important functions, which we use while working with date and time in C or C++. All these functions are part of standard C and C++ library and you can check their detail using reference to C++ standard library given below.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Function &amp; Purpose</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>time_t time(time_t *time);</b></p>\n<p>This returns the current calendar time of the system in number of seconds elapsed since January 1, 1970. If the system has no time, .1 is returned.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>char *ctime(const time_t *time);</b></p>\n<p>This returns a pointer to a string of the form <i>day month year hours:minutes:seconds year\\n\\0</i>.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>struct tm *localtime(const time_t *time);</b></p>\n<p>This returns a pointer to the <b>tm</b> structure representing local time.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>clock_t clock(void);</b></p>\n<p>This returns a value that approximates the amount of time the calling program has been running. A value of .1 is returned if the time is not available.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>char * asctime ( const struct tm * time );</b></p>\n<p>This returns a pointer to a string that contains the information stored in the structure pointed to by time converted into the form: day month date hours:minutes:seconds year\\n\\0</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><p><b>struct tm *gmtime(const time_t *time);</b></p>\n<p>This returns a pointer to the time in the form of a tm structure. The time is represented in Coordinated Universal Time (UTC), which is essentially Greenwich Mean Time (GMT).</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">7</td>\n<td><p><b>time_t mktime(struct tm *time);</b></p>\n<p>This returns the calendar-time equivalent of the time found in the structure pointed to by time.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">8</td>\n<td><p><b>double difftime ( time_t time2, time_t time1 );</b></p>\n<p>This function calculates the difference in seconds between time1 and time2.</p>\n</td>\n</tr>\n<tr>\n<td class=\"ts\">9</td>\n<td><p><b>size_t strftime();</b></p>\n<p>This function can be used to format date and time in a specific format.</p>\n</td>\n</tr>\n</table>\n<h2>Current Date and Time</h2>\n<p>Suppose you want to retrieve the current system date and time, either as a local time or as a Coordinated Universal Time (UTC). Following is the example to achieve the same \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/DHKMA9\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;ctime&gt;\n\nusing namespace std;\n\nint main() {\n   // current date/time based on current system\n   time_t now = time(0);\n   \n   // convert now to string form\n   char* dt = ctime(&amp;now);\n\n   cout &lt;&lt; \"The local date and time is: \" &lt;&lt; dt &lt;&lt; endl;\n\n   // convert now to tm struct for UTC\n   tm *gmtm = gmtime(&amp;now);\n   dt = asctime(gmtm);\n   cout &lt;&lt; \"The UTC date and time is:\"&lt;&lt; dt &lt;&lt; endl;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nThe local date and time is: Sat Jan  8 20:07:41 2011\n\nThe UTC date and time is:Sun Jan  9 03:07:41 2011\n</pre>\n<h2>Format Time using struct tm</h2>\n<p>The <b>tm</b> structure is very important while working with date and time in either C or C++. This structure holds the date and time in the form of a C structure as mentioned above. Most of the time related functions makes use of tm structure. Following is an example which makes use of various date and time related functions and tm structure \u2212</p>\n<p>While using structure in this chapter, I'm making an assumption that you have basic understanding on C structure and how to access structure members using arrow -&gt; operator.</p>\n<a class=\"demo\" href=\"http://tpcg.io/SMnO0N\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;ctime&gt;\n\nusing namespace std;\n\nint main() {\n   // current date/time based on current system\n   time_t now = time(0);\n\n   cout &lt;&lt; \"Number of sec since January 1,1970:\" &lt;&lt; now &lt;&lt; endl;\n\n   tm *ltm = localtime(&amp;now);\n\n   // print various components of tm structure.\n   cout &lt;&lt; \"Year\" &lt;&lt; 1970 + ltm-&gt;tm_year&lt;&lt;endl;\n   cout &lt;&lt; \"Month: \"&lt;&lt; 1 + ltm-&gt;tm_mon&lt;&lt; endl;\n   cout &lt;&lt; \"Day: \"&lt;&lt;  ltm-&gt;tm_mday &lt;&lt; endl;\n   cout &lt;&lt; \"Time: \"&lt;&lt; 1 + ltm-&gt;tm_hour &lt;&lt; \":\";\n   cout &lt;&lt; 1 + ltm-&gt;tm_min &lt;&lt; \":\";\n   cout &lt;&lt; 1 + ltm-&gt;tm_sec &lt;&lt; endl;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nNumber of sec since January 1, 1970:1294548238\nYear: 2011\nMonth: 1\nDay: 8\nTime: 22: 44:59\n</pre>\n<h1>C++ Basic Input/Output</h1>\n<p>The C++ standard libraries provide an extensive set of input/output capabilities which we will see in subsequent chapters. This chapter will discuss very basic and most common I/O operations required for C++ programming.</p>\n<p>C++ I/O occurs in streams, which are sequences of bytes.  If bytes flow from a device like a keyboard, a disk drive, or a network connection etc. to main memory, this is called <b>input operation</b> and if bytes flow from main memory to a device like a display screen, a printer, a disk drive, or a network connection, etc., this is called <b>output operation</b>.</p>\n<h2>I/O Library Header Files</h2>\n<p>There are following header files important to C++ programs \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Header File &amp; Function and Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>&lt;iostream&gt;</b></p>\n<p>This file defines the <b>cin, cout, cerr</b> and <b>clog</b> objects, which correspond to the standard input stream, the standard output stream, the un-buffered standard error stream and the buffered standard error stream, respectively.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>&lt;iomanip&gt;</b></p>\n<p>This file declares services useful for performing formatted I/O with so-called parameterized stream manipulators, such as <b>setw</b> and <b>setprecision</b>.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>&lt;fstream&gt;</b></p>\n<p>This file declares services for user-controlled file processing. We will discuss about it in detail in File and Stream related chapter.</p></td>\n</tr>\n</table>\n<h2>The Standard Output Stream (cout)</h2>\n<p>The predefined object <b>cout</b> is an instance of <b>ostream</b> class. The cout object is said to be \"connected to\" the standard output device, which usually is the display screen. The <b>cout</b> is used in conjunction with the stream insertion operator, which is written as &lt;&lt; which are two less than signs as shown in the following example.</p>\n<a class=\"demo\" href=\"http://tpcg.io/qFaiKd\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n \nusing namespace std;\n \nint main() {\n   char str[] = \"Hello C++\";\n \n   cout &lt;&lt; \"Value of str is : \" &lt;&lt; str &lt;&lt; endl;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nValue of str is : Hello C++\n</pre>\n<p>The C++ compiler also determines the data type of variable to be output and selects the appropriate stream insertion operator to display the value. The &lt;&lt; operator is overloaded to output data items of built-in types integer, float, double,  strings and pointer values.</p>\n<p>The insertion operator &lt;&lt; may be used more than once in a single statement as shown above and <b>endl</b> is used to add a new-line at the end of the line.</p>\n<h2>The Standard Input Stream (cin)</h2>\n<p>The predefined object <b>cin</b> is an instance of <b>istream</b> class. The cin object is said to be attached to the standard input  device, which usually is the keyboard. The <b>cin</b> is used in conjunction with the stream extraction operator, which is written as &gt;&gt; which are two greater than signs as shown in the following example.</p>\n<a class=\"demo\" href=\"http://tpcg.io/NDGHmy\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n \nusing namespace std;\n \nint main() {\n   char name[50];\n \n   cout &lt;&lt; \"Please enter your name: \";\n   cin &gt;&gt; name;\n   cout &lt;&lt; \"Your name is: \" &lt;&lt; name &lt;&lt; endl;\n \n}\n</pre>\n<p>When the above code is compiled and executed, it will prompt you to enter a name. You enter a value and then hit enter to see the following result \u2212</p>\n<pre class=\"result notranslate\">\nPlease enter your name: cplusplus\nYour name is: cplusplus\n</pre>\n<p>The C++ compiler also determines the data type of the entered value and selects the appropriate stream extraction operator to extract the value and store it in the given variables.</p>\n<p>The stream extraction operator &gt;&gt; may be used more than once in a single statement. To request more than one datum you can use the following \u2212</p>\n<pre class=\"result notranslate\">\ncin &gt;&gt; name &gt;&gt; age;\n</pre>\n<p>This will be equivalent to the following two statements \u2212</p>\n<pre class=\"result notranslate\">\ncin &gt;&gt; name;\ncin &gt;&gt; age;\n</pre>\n<h2>The Standard Error Stream (cerr)</h2>\n<p>The predefined object <b>cerr</b> is an instance of <b>ostream</b> class. The cerr object is said to be attached to the standard error device, which is also a display screen but the object <b>cerr</b> is un-buffered and each stream insertion to cerr causes its output to appear immediately.</p>\n<p>The <b>cerr</b> is also used in conjunction with the stream insertion operator as shown in the following example.</p>\n<a class=\"demo\" href=\"http://tpcg.io/3xp5lM\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n \nusing namespace std;\n \nint main() {\n   char str[] = \"Unable to read....\";\n \n   cerr &lt;&lt; \"Error message : \" &lt;&lt; str &lt;&lt; endl;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nError message : Unable to read....\n</pre>\n<h2>The Standard Log Stream (clog)</h2>\n<p>The predefined object <b>clog</b> is an instance of <b>ostream</b> class. The clog object is said to be attached to the standard error device, which is also a display screen but the object <b>clog</b> is buffered. This means that each insertion to clog could cause its output to be held in a buffer until the buffer is filled or until the buffer is flushed.</p>\n<p>The <b>clog</b> is also used in conjunction with the stream insertion operator as shown in the following example.</p>\n<a class=\"demo\" href=\"http://tpcg.io/Dewejb\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n \nusing namespace std;\n \nint main() {\n   char str[] = \"Unable to read....\";\n \n   clog &lt;&lt; \"Error message : \" &lt;&lt; str &lt;&lt; endl;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nError message : Unable to read....\n</pre>\n<p>You would not be able to see any difference in cout, cerr and clog with these small examples, but while writing and executing big programs the difference becomes obvious. So it is good practice to display error messages using cerr stream and while displaying other log messages then clog should be used.</p>\n<h1>C++ Data Structures</h1>\n<p>C/C++ arrays allow you to define variables that combine several data items of the same kind, but <b>structure</b> is another user defined data type which allows you to combine data items of different kinds.</p>\n<p>Structures are used to represent a record, suppose you want to keep track of your books in a library. You might want to track the following attributes about each book \u2212</p>\n<ul class=\"list\">\n<li>Title</li>\n<li>Author</li>\n<li>Subject</li>\n<li>Book ID</li>\n</ul>\n<h2>Defining a Structure</h2>\n<p>To define a structure, you must use the struct statement. The struct statement defines a new data type, with more than one member, for your program. The format of the struct statement is this \u2212</p>\n<pre class=\"result notranslate\">\nstruct [structure tag] {\n   member definition;\n   member definition;\n   ...\n   member definition;\n} [one or more structure variables];  \n</pre>\n<p>The <b>structure tag</b> is optional and each member definition is a normal variable definition, such as int i; or float f; or any other valid variable definition. At the end of the structure's definition, before the final semicolon, you can specify one or more structure variables but it is optional. Here is the way you would declare the Book structure \u2212</p>\n<pre class=\"result notranslate\">\nstruct Books {\n   char  title[50];\n   char  author[50];\n   char  subject[100];\n   int   book_id;\n} book;  \n</pre>\n<h2>Accessing Structure Members</h2>\n<p>To access any member of a structure, we use the <b>member access operator (.)</b>. The member access operator is coded as a period between the structure variable name and the structure member that we wish to access. You would use <b>struct</b> keyword to define variables of structure type. Following is the example to explain usage of structure \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/zvIEi0\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n \nusing namespace std;\n \nstruct Books {\n   char  title[50];\n   char  author[50];\n   char  subject[100];\n   int   book_id;\n};\n \nint main() {\n   struct Books Book1;        // Declare Book1 of type Book\n   struct Books Book2;        // Declare Book2 of type Book\n \n   // book 1 specification\n   strcpy( Book1.title, \"Learn C++ Programming\");\n   strcpy( Book1.author, \"Chand Miyan\"); \n   strcpy( Book1.subject, \"C++ Programming\");\n   Book1.book_id = 6495407;\n\n   // book 2 specification\n   strcpy( Book2.title, \"Telecom Billing\");\n   strcpy( Book2.author, \"Yakit Singha\");\n   strcpy( Book2.subject, \"Telecom\");\n   Book2.book_id = 6495700;\n \n   // Print Book1 info\n   cout &lt;&lt; \"Book 1 title : \" &lt;&lt; Book1.title &lt;&lt;endl;\n   cout &lt;&lt; \"Book 1 author : \" &lt;&lt; Book1.author &lt;&lt;endl;\n   cout &lt;&lt; \"Book 1 subject : \" &lt;&lt; Book1.subject &lt;&lt;endl;\n   cout &lt;&lt; \"Book 1 id : \" &lt;&lt; Book1.book_id &lt;&lt;endl;\n\n   // Print Book2 info\n   cout &lt;&lt; \"Book 2 title : \" &lt;&lt; Book2.title &lt;&lt;endl;\n   cout &lt;&lt; \"Book 2 author : \" &lt;&lt; Book2.author &lt;&lt;endl;\n   cout &lt;&lt; \"Book 2 subject : \" &lt;&lt; Book2.subject &lt;&lt;endl;\n   cout &lt;&lt; \"Book 2 id : \" &lt;&lt; Book2.book_id &lt;&lt;endl;\n\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nBook 1 title : Learn C++ Programming\nBook 1 author : Chand Miyan\nBook 1 subject : C++ Programming\nBook 1 id : 6495407\nBook 2 title : Telecom Billing\nBook 2 author : Yakit Singha\nBook 2 subject : Telecom\nBook 2 id : 6495700\n</pre>\n<h2>Structures as Function Arguments</h2>\n<p>You can pass a structure as a function argument in very similar way as you pass any other variable or pointer. You would access structure variables in the similar way as you have accessed in the above example \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/xvb7BQ\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n \nusing namespace std;\nvoid printBook( struct Books book );\n\nstruct Books {\n   char  title[50];\n   char  author[50];\n   char  subject[100];\n   int   book_id;\n};\n \nint main() {\n   struct Books Book1;        // Declare Book1 of type Book\n   struct Books Book2;        // Declare Book2 of type Book\n \n   // book 1 specification\n   strcpy( Book1.title, \"Learn C++ Programming\");\n   strcpy( Book1.author, \"Chand Miyan\"); \n   strcpy( Book1.subject, \"C++ Programming\");\n   Book1.book_id = 6495407;\n\n   // book 2 specification\n   strcpy( Book2.title, \"Telecom Billing\");\n   strcpy( Book2.author, \"Yakit Singha\");\n   strcpy( Book2.subject, \"Telecom\");\n   Book2.book_id = 6495700;\n \n   // Print Book1 info\n   printBook( Book1 );\n\n   // Print Book2 info\n   printBook( Book2 );\n\n   return 0;\n}\nvoid printBook( struct Books book ) {\n   cout &lt;&lt; \"Book title : \" &lt;&lt; book.title &lt;&lt;endl;\n   cout &lt;&lt; \"Book author : \" &lt;&lt; book.author &lt;&lt;endl;\n   cout &lt;&lt; \"Book subject : \" &lt;&lt; book.subject &lt;&lt;endl;\n   cout &lt;&lt; \"Book id : \" &lt;&lt; book.book_id &lt;&lt;endl;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nBook title : Learn C++ Programming\nBook author : Chand Miyan\nBook subject : C++ Programming\nBook id : 6495407\nBook title : Telecom Billing\nBook author : Yakit Singha\nBook subject : Telecom\nBook id : 6495700\n</pre>\n<h2>Pointers to Structures</h2>\n<p>You can define pointers to structures in very similar way as you define pointer to any other variable as follows \u2212</p>\n<pre class=\"result notranslate\">\nstruct Books *struct_pointer;\n</pre>\n<p>Now, you can store the address of a structure variable in the above defined pointer variable. To find the address of a structure variable, place the &amp; operator before the structure's name as follows \u2212</p>\n<pre class=\"result notranslate\">\nstruct_pointer = &amp;Book1;\n</pre>\n<p>To access the members of a structure using a pointer to that structure, you must use the -&gt; operator as follows \u2212</p>\n<pre class=\"result notranslate\">\nstruct_pointer-&gt;title;\n</pre>\n<p>Let us re-write above example using structure pointer, hope this will be easy for you to understand the concept \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/P8IeUE\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n \nusing namespace std;\nvoid printBook( struct Books *book );\n\nstruct Books {\n   char  title[50];\n   char  author[50];\n   char  subject[100];\n   int   book_id;\n};\nint main() {\n   struct Books Book1;        // Declare Book1 of type Book\n   struct Books Book2;        // Declare Book2 of type Book\n \n   // Book 1 specification\n   strcpy( Book1.title, \"Learn C++ Programming\");\n   strcpy( Book1.author, \"Chand Miyan\"); \n   strcpy( Book1.subject, \"C++ Programming\");\n   Book1.book_id = 6495407;\n\n   // Book 2 specification\n   strcpy( Book2.title, \"Telecom Billing\");\n   strcpy( Book2.author, \"Yakit Singha\");\n   strcpy( Book2.subject, \"Telecom\");\n   Book2.book_id = 6495700;\n \n   // Print Book1 info, passing address of structure\n   printBook( &amp;Book1 );\n\n   // Print Book1 info, passing address of structure\n   printBook( &amp;Book2 );\n\n   return 0;\n}\n\n// This function accept pointer to structure as parameter.\nvoid printBook( struct Books *book ) {\n   cout &lt;&lt; \"Book title : \" &lt;&lt; book-&gt;title &lt;&lt;endl;\n   cout &lt;&lt; \"Book author : \" &lt;&lt; book-&gt;author &lt;&lt;endl;\n   cout &lt;&lt; \"Book subject : \" &lt;&lt; book-&gt;subject &lt;&lt;endl;\n   cout &lt;&lt; \"Book id : \" &lt;&lt; book-&gt;book_id &lt;&lt;endl;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nBook title : Learn C++ Programming\nBook author : Chand Miyan\nBook subject : C++ Programming\nBook id : 6495407\nBook title : Telecom Billing\nBook author : Yakit Singha\nBook subject : Telecom\nBook id : 6495700\n</pre>\n<h2>The typedef Keyword</h2>\n<p>There is an easier way to define structs or you could \"alias\" types you create. For example \u2212</p>\n<pre class=\"result notranslate\">\ntypedef struct {\n   char  title[50];\n   char  author[50];\n   char  subject[100];\n   int   book_id;\n} Books;\n</pre>\n<p>Now, you can use <i>Books</i> directly to define variables of <i>Books</i> type  without using struct keyword. Following is the example \u2212</p>\n<pre class=\"result notranslate\">\nBooks Book1, Book2;\n</pre>\n<p>You can use <b>typedef</b> keyword for non-structs as well as follows \u2212</p>\n<pre class=\"result notranslate\">\ntypedef long int *pint32;\n \npint32 x, y, z;\n</pre>\n<p>x, y and z are all pointers to long ints.</p>\n<h1>C++ Classes and Objects</h1>\n<p>The main purpose of C++ programming is to add object orientation to the C programming language and classes are the central feature of C++ that supports object-oriented programming and are often called user-defined types.</p>\n<p>A class is used to specify the form of an object and it combines data representation and methods for manipulating that data into one neat package. The data and functions within a class are called members of the class.</p>\n<h2>C++ Class Definitions</h2>\n<p>When you define a class, you define a blueprint for a data type. This doesn't actually define any data, but it does define what the class name means, that is, what an object of the class will consist of and what operations can be performed on such an object.</p>\n<p>A class definition starts with the keyword <b>class</b> followed by the class name; and the class body, enclosed by a pair of curly braces. A class definition must be followed either by a semicolon or a list of declarations. For example, we defined the Box data type using the keyword <b>class</b> as follows \u2212</p>\n<pre class=\"result notranslate\">\nclass Box {\n   public:\n      double length;   // Length of a box\n      double breadth;  // Breadth of a box\n      double height;   // Height of a box\n};\n</pre>\n<p>The keyword <b>public</b> determines the access attributes of the members of the class that follows it. A public member can be accessed from outside the class anywhere within the scope of the class object. You can also specify the members of a class as <b>private</b> or <b>protected</b> which we will discuss in a sub-section.</p>\n<h2>Define C++ Objects</h2>\n<p>A class provides the blueprints for objects, so basically an object is created from a class. We declare objects of a class with exactly the same sort of declaration that we declare variables of basic types. Following statements declare two objects of class Box \u2212</p>\n<pre class=\"result notranslate\">\nBox Box1;          // Declare Box1 of type Box\nBox Box2;          // Declare Box2 of type Box\n</pre>\n<p>Both of the objects Box1 and Box2 will have their own copy of data members.</p>\n<h2>Accessing the Data Members</h2>\n<p>The public data members of objects of a class can be accessed using the direct member access operator (.). Let us try the following example to make the things clear \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/JeEWd6\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nclass Box {\n   public:\n      double length;   // Length of a box\n      double breadth;  // Breadth of a box\n      double height;   // Height of a box\n};\n\nint main() {\n   Box Box1;        // Declare Box1 of type Box\n   Box Box2;        // Declare Box2 of type Box\n   double volume = 0.0;     // Store the volume of a box here\n \n   // box 1 specification\n   Box1.height = 5.0; \n   Box1.length = 6.0; \n   Box1.breadth = 7.0;\n\n   // box 2 specification\n   Box2.height = 10.0;\n   Box2.length = 12.0;\n   Box2.breadth = 13.0;\n   \n   // volume of box 1\n   volume = Box1.height * Box1.length * Box1.breadth;\n   cout &lt;&lt; \"Volume of Box1 : \" &lt;&lt; volume &lt;&lt;endl;\n\n   // volume of box 2\n   volume = Box2.height * Box2.length * Box2.breadth;\n   cout &lt;&lt; \"Volume of Box2 : \" &lt;&lt; volume &lt;&lt;endl;\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nVolume of Box1 : 210\nVolume of Box2 : 1560\n</pre>\n<p>It is important to note that private and protected members can not be accessed directly using direct member access operator (.). We will learn how private and protected members can be accessed.</p>\n<h2>Classes and Objects in Detail</h2>\n<p>So far, you have got very basic idea about C++ Classes and Objects. There are further interesting concepts related to C++ Classes and Objects which we will discuss in various sub-sections listed below \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Concept &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><a href=\"/cplusplus/cpp_class_member_functions.htm\" title=\"C++ Class Member Functions\">Class Member Functions</a>\n<p>A member function of a class is a function that has its definition or its prototype within the class definition like any other variable.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><a href=\"/cplusplus/cpp_class_access_modifiers.htm\" title=\"C++ Class Access Modifiers\">Class Access Modifiers</a>\n<p>A class member can be defined as public, private or protected. By default members would be assumed as private.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><a href=\"/cplusplus/cpp_constructor_destructor.htm\" title=\"C++ Constructor &amp; Destructor\">Constructor &amp; Destructor</a>\n<p>A class constructor is a special function in a class that is called when a new object of the class is created. A destructor is also a special function which is called when created object is deleted.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><a href=\"/cplusplus/cpp_copy_constructor.htm\" title=\"C++ Copy Constructor\">Copy Constructor</a>\n<p>The copy constructor is a constructor which creates an object by initializing it with an object of the same class, which has been created previously.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><a href=\"/cplusplus/cpp_friend_functions.htm\" title=\"C++ Friend Functions\">Friend Functions</a>\n<p>A <b>friend</b> function is permitted full access to private and protected members of a class.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><a href=\"/cplusplus/cpp_inline_functions.htm\" title=\"C++ Inline Functions\">Inline Functions</a>\n<p>With an inline function, the compiler tries to expand the code in the body of the function in place of a call to the function.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">7</td>\n<td><a href=\"/cplusplus/cpp_this_pointer.htm\" title=\"The this Pointer in C++\">this Pointer</a>\n<p>Every object has a special pointer <b>this</b> which points to the object itself.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">8</td>\n<td><a href=\"/cplusplus/cpp_pointer_to_class.htm\" title=\"Pointer to C++ Classes\">Pointer to C++ Classes</a>\n<p>A pointer to a class is done exactly the same way a pointer to a structure is. In fact a class is really just a structure with functions in it.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">9</td>\n<td><a href=\"/cplusplus/cpp_static_members.htm\" title=\"Static members of a class\">Static Members of a Class</a>\n<p>Both data members and function members of a class can be declared as static.</p></td>\n</tr>\n</table>\n<h1>C++ Inheritance</h1>\n<p>One of the most important concepts in object-oriented programming is that of inheritance. Inheritance allows us to define a class in terms of another class, which makes it easier to create and maintain an application. This also provides an opportunity to reuse the code functionality and fast implementation time.</p>\n<p>When creating a class, instead of writing completely new data members and member functions, the programmer can designate that the new class should inherit the members of an existing class. This existing class is called the <b>base</b> class, and the new class is referred to as the <b>derived</b> class.</p>\n<p>The idea of inheritance implements the <b>is a</b> relationship. For example, mammal IS-A animal, dog IS-A mammal hence dog IS-A animal as well and so on.</p>\n<h2>Base and Derived Classes</h2>\n<p>A class can be derived from more than one classes, which means it can inherit data and functions from multiple base classes. To define a derived class, we use a class derivation list to specify the base class(es). A class derivation list names one or more base classes and has the form \u2212</p>\n<pre class=\"result notranslate\">\nclass derived-class: access-specifier base-class\n</pre>\n<p>Where access-specifier is one of <b>public, protected,</b> or <b>private</b>, and base-class is the name of a previously defined class. If the access-specifier is not used, then it is private by default.</p>\n<p>Consider a base class <b>Shape</b> and its derived class <b>Rectangle</b> as follows \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/ykk4hq\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n \nusing namespace std;\n\n// Base class\nclass Shape {\n   public:\n      void setWidth(int w) {\n         width = w;\n      }\n      void setHeight(int h) {\n         height = h;\n      }\n      \n   protected:\n      int width;\n      int height;\n};\n\n// Derived class\nclass Rectangle: public Shape {\n   public:\n      int getArea() { \n         return (width * height); \n      }\n};\n\nint main(void) {\n   Rectangle Rect;\n \n   Rect.setWidth(5);\n   Rect.setHeight(7);\n\n   // Print the area of the object.\n   cout &lt;&lt; \"Total area: \" &lt;&lt; Rect.getArea() &lt;&lt; endl;\n\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nTotal area: 35\n</pre>\n<h2>Access Control and Inheritance</h2>\n<p>A derived class can access all the non-private members of its base class. Thus base-class members that should not be accessible to the member functions of derived classes should be declared private in the base class.</p>\n<p>We can summarize the different access types according to - who can access them in the following way \u2212</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<th style=\"text-align:center;\" width=\"25%\">Access</th>\n<th style=\"text-align:center;\" width=\"25%\">public</th>\n<th style=\"text-align:center;\" width=\"25%\">protected</th>\n<th style=\"text-align:center;\" width=\"25%\">private</th>\n</tr>\n<tr>\n<td>Same class</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>Derived classes</td>\n<td>yes</td>\n<td>yes</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Outside classes</td>\n<td>yes</td>\n<td>no</td>\n<td>no</td>\n</tr>\n</table>\n<p>A derived class inherits all base class methods with the following exceptions \u2212</p>\n<ul class=\"list\">\n<li>Constructors, destructors and copy constructors of the base class.</li>\n<li>Overloaded operators of the base class.</li>\n<li>The friend functions of the base class.</li>\n</ul>\n<h2>Type of Inheritance</h2>\n<p>When deriving a class from a base class, the base class may be inherited through <b>public, protected</b> or <b> private</b> inheritance. The type of inheritance is specified by the access-specifier as explained above.</p>\n<p>We hardly use <b>protected</b> or <b> private</b> inheritance, but <b>public</b> inheritance is commonly used. While using different type of inheritance, following rules are applied \u2212</p>\n<ul class=\"list\">\n<li><p><b>Public Inheritance</b> \u2212 When deriving a class from a <b>public</b> base class, <b>public</b> members of the base class become <b>public</b> members of the derived class and <b>protected</b> members of the base class become <b>protected</b> members of the derived class. A base class's <b>private</b> members are never accessible directly from a derived class, but can be accessed through calls to the <b>public</b> and <b>protected</b> members of the base class.</p></li>\n<li><p><b>Protected Inheritance</b> \u2212  When deriving from a <b>protected</b> base class, <b>public</b> and <b>protected</b> members of the base class become <b>protected</b> members of the derived class.</p></li>\n<li><p><b>Private Inheritance</b> \u2212 When deriving from a <b>private</b> base class, <b>public</b> and <b>protected</b> members of the base class become <b>private</b> members of the derived class.</p></li>\n</ul>\n<h2>Multiple Inheritance</h2>\n<p>A C++ class can inherit members from more than one class and here is the extended syntax \u2212</p>\n<pre class=\"result notranslate\">\nclass derived-class: access baseA, access baseB....\n</pre>\n<p>Where access is one of <b>public, protected,</b> or <b>private</b> and would be given for every base class and they will be separated by comma as shown above. Let us try the following example \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/NPe3oQ\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n \nusing namespace std;\n\n// Base class Shape\nclass Shape {\n   public:\n      void setWidth(int w) {\n         width = w;\n      }\n      void setHeight(int h) {\n         height = h;\n      }\n      \n   protected:\n      int width;\n      int height;\n};\n\n// Base class PaintCost\nclass PaintCost {\n   public:\n      int getCost(int area) {\n         return area * 70;\n      }\n};\n\n// Derived class\nclass Rectangle: public Shape, public PaintCost {\n   public:\n      int getArea() {\n         return (width * height); \n      }\n};\n\nint main(void) {\n   Rectangle Rect;\n   int area;\n \n   Rect.setWidth(5);\n   Rect.setHeight(7);\n\n   area = Rect.getArea();\n   \n   // Print the area of the object.\n   cout &lt;&lt; \"Total area: \" &lt;&lt; Rect.getArea() &lt;&lt; endl;\n\n   // Print the total cost of painting\n   cout &lt;&lt; \"Total paint cost: $\" &lt;&lt; Rect.getCost(area) &lt;&lt; endl;\n\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nTotal area: 35\nTotal paint cost: $2450\n</pre>\n<h1>C++ Overloading (Operator and Function)</h1>\n<p>C++ allows you to specify more than one definition for a <b>function</b> name or an <b>operator</b> in the same scope, which is called <b>function overloading</b> and <b>operator overloading</b> respectively.</p>\n<p>An overloaded declaration is a declaration that is declared with the same name as a previously declared declaration in the same scope, except that both declarations have different arguments and obviously different definition (implementation).</p>\n<p>When you call an overloaded <b>function</b> or <b>operator</b>, the compiler determines the most appropriate definition to use, by comparing the argument types you have used to call the function or operator with the parameter types specified in the definitions. The process of selecting the most appropriate overloaded function or operator is called <b>overload resolution</b>.</p>\n<h2>Function Overloading in C++</h2>\n<p>You can have multiple definitions for the same function name in the same scope. The definition of the function must differ from each other by the types and/or the number of arguments in the argument list. You cannot overload function declarations that differ only by return type.</p>\n<p>Following is the example where same function <b>print()</b> is being used to print different data types \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/cR3W4M\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n \nclass printData {\n   public:\n      void print(int i) {\n        cout &lt;&lt; \"Printing int: \" &lt;&lt; i &lt;&lt; endl;\n      }\n      void print(double  f) {\n        cout &lt;&lt; \"Printing float: \" &lt;&lt; f &lt;&lt; endl;\n      }\n      void print(char* c) {\n        cout &lt;&lt; \"Printing character: \" &lt;&lt; c &lt;&lt; endl;\n      }\n};\n\nint main(void) {\n   printData pd;\n \n   // Call print to print integer\n   pd.print(5);\n   \n   // Call print to print float\n   pd.print(500.263);\n   \n   // Call print to print character\n   pd.print(\"Hello C++\");\n \n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nPrinting int: 5\nPrinting float: 500.263\nPrinting character: Hello C++\n</pre>\n<h2>Operators Overloading in C++</h2>\n<p>You can redefine or overload most of the built-in operators available in C++. Thus, a programmer can use operators with user-defined types as well.</p>\n<p>Overloaded operators are functions with special names: the keyword \"operator\" followed by the symbol for the operator being defined. Like any other function, an overloaded operator has a return type and a parameter list.</p>\n<pre class=\"result notranslate\">\nBox operator+(const Box&amp;);\n</pre>\n<p>declares the addition operator that can be used to <b>add</b> two Box objects and returns final Box object. Most overloaded operators may be defined as ordinary non-member functions or as class member functions. In case we define above function as non-member function of a class then we would have to pass two arguments for each operand as follows \u2212</p>\n<pre class=\"result notranslate\">\nBox operator+(const Box&amp;, const Box&amp;);\n</pre>\n<p>Following is the example to show the concept of operator over loading using a member function. Here an object is passed as an argument whose properties will be accessed using this object, the object which will call this operator can be accessed using <b>this</b> operator as explained below \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/4Alfgt\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nclass Box {\n   public:\n      double getVolume(void) {\n         return length * breadth * height;\n      }\n      void setLength( double len ) {\n         length = len;\n      }\n      void setBreadth( double bre ) {\n         breadth = bre;\n      }\n      void setHeight( double hei ) {\n         height = hei;\n      }\n      \n      // Overload + operator to add two Box objects.\n      Box operator+(const Box&amp; b) {\n         Box box;\n         box.length = this-&gt;length + b.length;\n         box.breadth = this-&gt;breadth + b.breadth;\n         box.height = this-&gt;height + b.height;\n         return box;\n      }\n      \n   private:\n      double length;      // Length of a box\n      double breadth;     // Breadth of a box\n      double height;      // Height of a box\n};\n\n// Main function for the program\nint main() {\n   Box Box1;                // Declare Box1 of type Box\n   Box Box2;                // Declare Box2 of type Box\n   Box Box3;                // Declare Box3 of type Box\n   double volume = 0.0;     // Store the volume of a box here\n \n   // box 1 specification\n   Box1.setLength(6.0); \n   Box1.setBreadth(7.0); \n   Box1.setHeight(5.0);\n \n   // box 2 specification\n   Box2.setLength(12.0); \n   Box2.setBreadth(13.0); \n   Box2.setHeight(10.0);\n \n   // volume of box 1\n   volume = Box1.getVolume();\n   cout &lt;&lt; \"Volume of Box1 : \" &lt;&lt; volume &lt;&lt;endl;\n \n   // volume of box 2\n   volume = Box2.getVolume();\n   cout &lt;&lt; \"Volume of Box2 : \" &lt;&lt; volume &lt;&lt;endl;\n\n   // Add two object as follows:\n   Box3 = Box1 + Box2;\n\n   // volume of box 3\n   volume = Box3.getVolume();\n   cout &lt;&lt; \"Volume of Box3 : \" &lt;&lt; volume &lt;&lt;endl;\n\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nVolume of Box1 : 210\nVolume of Box2 : 1560\nVolume of Box3 : 5400\n</pre>\n<h2>Overloadable/Non-overloadableOperators</h2>\n<p>Following is the list of operators which can be overloaded \u2212</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<td width=\"16.6%\">+</td>\n<td width=\"16.6%\">-</td>\n<td width=\"16.6%\">*</td>\n<td width=\"16.6%\">/</td>\n<td width=\"16.6%\">%</td>\n<td width=\"16.6%\">^</td>\n</tr>\n<tr>\n<td>&amp;</td>\n<td>|</td>\n<td>~</td>\n<td>!</td>\n<td>,</td>\n<td>=</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>&gt;</td>\n<td>&lt;=</td>\n<td>&gt;=</td>\n<td>++</td>\n<td>--</td>\n</tr>\n<tr>\n<td>&lt;&lt;</td>\n<td>&gt;&gt;</td>\n<td>==</td>\n<td>!=</td>\n<td>&amp;&amp;</td>\n<td>||</td>\n</tr>\n<tr>\n<td>+=</td>\n<td>-=</td>\n<td>/=</td>\n<td>%=</td>\n<td>^=</td>\n<td>&amp;=</td>\n</tr>\n<tr>\n<td>|=</td>\n<td>*=</td>\n<td>&lt;&lt;=</td>\n<td>&gt;&gt;=</td>\n<td>[]</td>\n<td>()</td>\n</tr>\n<tr>\n<td>-&gt;</td>\n<td>-&gt;*</td>\n<td>new</td>\n<td>new []</td>\n<td>delete</td>\n<td>delete []</td>\n</tr>\n</table>\n<p>Following is the list of operators, which can not be overloaded \u2212</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<td width=\"25%\">::</td>\n<td width=\"25%\">.*</td>\n<td width=\"25%\">.</td>\n<td width=\"25%\">?:</td>\n</tr>\n</table>\n<h2 id=\"examples\">Operator Overloading Examples</h2>\n<p>Here are various operator overloading examples to help you in understanding the concept.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\">Sr.No</th>\n<th style=\"text-align:center;\">Operators &amp; Example</th>\n</tr>\n<tr>\n<td style=\"text-align:center;\">1</td>\n<td><a href=\"/cplusplus/unary_operators_overloading.htm\">Unary Operators Overloading</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">2</td>\n<td><a href=\"/cplusplus/binary_operators_overloading.htm\">Binary Operators Overloading</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">3</td>\n<td><a href=\"/cplusplus/relational_operators_overloading.htm\">Relational Operators Overloading</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">4</td>\n<td><a href=\"/cplusplus/input_output_operators_overloading.htm\">Input/Output Operators Overloading</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">5</td>\n<td><a href=\"/cplusplus/increment_decrement_operators_overloading.htm\"> ++ and -- Operators Overloading</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">6</td>\n<td><a href=\"/cplusplus/assignment_operators_overloading.htm\">Assignment Operators Overloading</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">7</td>\n<td><a href=\"/cplusplus/function_call_operator_overloading.htm\">Function call () Operator  Overloading</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">8</td>\n<td><a href=\"/cplusplus/subscripting_operator_overloading.htm\">Subscripting [] Operator Overloading</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">9</td>\n<td><a href=\"/cplusplus/class_member_access_operator_overloading.htm\">Class Member Access Operator -&gt; Overloading</a></td>\n</tr>\n</table>\n<h1>Polymorphism in C++</h1>\n<p>The word <b>polymorphism</b> means having many forms. Typically, polymorphism occurs when there is a hierarchy of classes and they are related by inheritance.</p>\n<p>C++ polymorphism means that a call to a member function will cause a different function to be executed depending on the type of object that invokes the function.</p>\n<p>Consider the following example where a base class has been derived by other two classes \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/LSyBTc\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt; \nusing namespace std;\n \nclass Shape {\n   protected:\n      int width, height;\n      \n   public:\n      Shape( int a = 0, int b = 0){\n         width = a;\n         height = b;\n      }\n      int area() {\n         cout &lt;&lt; \"Parent class area :\" &lt;&lt;endl;\n         return 0;\n      }\n};\nclass Rectangle: public Shape {\n   public:\n      Rectangle( int a = 0, int b = 0):Shape(a, b) { }\n      \n      int area () { \n         cout &lt;&lt; \"Rectangle class area :\" &lt;&lt;endl;\n         return (width * height); \n      }\n};\n\nclass Triangle: public Shape {\n   public:\n      Triangle( int a = 0, int b = 0):Shape(a, b) { }\n      \n      int area () { \n         cout &lt;&lt; \"Triangle class area :\" &lt;&lt;endl;\n         return (width * height / 2); \n      }\n};\n\n// Main function for the program\nint main() {\n   Shape *shape;\n   Rectangle rec(10,7);\n   Triangle  tri(10,5);\n\n   // store the address of Rectangle\n   shape = &amp;rec;\n   \n   // call rectangle area.\n   shape-&gt;area();\n\n   // store the address of Triangle\n   shape = &amp;tri;\n   \n   // call triangle area.\n   shape-&gt;area();\n   \n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nParent class area :\nParent class area :\n</pre>\n<p>The reason for the incorrect output is that the call of the function area() is being set once by the compiler as the version defined in the base class. This is called <b>static resolution</b> of the function call, or <b>static linkage</b> - the function call is fixed before the program is executed. This is also sometimes called <b>early binding</b> because the area() function is set during the compilation of the program.</p>\n<p>But now, let's make a slight modification in our program and precede the declaration of area() in the Shape class with the keyword <b>virtual</b> so that it  looks like this \u2212</p>\n<pre class=\"result notranslate\">\nclass Shape {\n   protected:\n      int width, height;\n      \n   public:\n      Shape( int a = 0, int b = 0) {\n         width = a;\n         height = b;\n      }\n      virtual int area() {\n         cout &lt;&lt; \"Parent class area :\" &lt;&lt;endl;\n         return 0;\n      }\n};\n</pre>\n<p>After this slight modification, when the previous example code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nRectangle class area\nTriangle class area\n</pre>\n<p>This time, the compiler looks at the contents of the pointer instead of it's type. Hence, since addresses of objects of tri and rec classes are stored in *shape the respective area() function is called.</p>\n<p>As you can see, each of the child classes has a separate implementation for the function area(). This is how <b>polymorphism</b> is generally used. You have different classes with a function of the same name, and even the same parameters, but with different implementations.</p>\n<h2>Virtual Function</h2>\n<p>A <b>virtual</b> function is a function in a base class that is declared using the keyword <b>virtual</b>. Defining in a base class a virtual function, with another version in a derived class, signals to the compiler that we don't want static linkage for this function.</p>\n<p>What we do want is the selection of the function to be called at any given point in the program to be based on the kind of object for which it is called.  This sort of operation is referred to as <b>dynamic linkage</b>, or <b>late binding</b>.</p>\n<h2>Pure Virtual Functions</h2>\n<p>It is possible that you want to include a virtual function in a base class so that it may be redefined in a derived class to suit the objects of that class, but that there is no meaningful definition you could give for the function in the base class.</p>\n<p>We can change the virtual function area() in the base class to the following \u2212</p>\n<pre class=\"result notranslate\">\nclass Shape {\n   protected:\n      int width, height;\n\n   public:\n      Shape(int a = 0, int b = 0) {\n         width = a;\n         height = b;\n      }\n      \n      // pure virtual function\n      virtual int area() = 0;\n};\n</pre>\n<p>The = 0 tells the compiler that the function has no body  and above virtual function will be called <b>pure virtual function</b>.</p>\n<h1>Data Abstraction in C++</h1>\n<p>Data abstraction refers to providing only essential information to the outside world and hiding their background details, i.e., to represent the needed information in program without presenting the details.</p>\n<p>Data abstraction is a programming (and design) technique that relies on the separation of interface and implementation.</p>\n<p>Let's take one real life example of a TV, which you can turn on and off, change the channel, adjust the volume, and add external components such as speakers, VCRs, and DVD players, BUT you do not know its internal details, that is, you do not know how it receives signals over the air or through a cable, how it translates them, and  finally displays them on the screen.</p>\n<p>Thus, we can say a television clearly separates its internal implementation from its external interface and you can play with its interfaces like the power button, channel changer, and volume control without having any knowledge of its internals.</p>\n<p>In C++, classes provides great level of <b>data abstraction</b>. They provide sufficient public methods to the outside world to play with the functionality of the object and to manipulate object data, i.e., state without actually knowing how class has been implemented internally.</p>\n<p>For example, your program can make a call to the <b>sort()</b> function without knowing what algorithm the function actually uses to sort the given values. In fact, the underlying implementation of the sorting functionality could change between releases of the library, and as long as the interface stays the same, your function call will still work.</p>\n<p>In C++, we use <b>classes</b> to define our own abstract data types (ADT). You can use the <b>cout</b> object of class <b>ostream</b> to stream data to standard output like this \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/iaAqF8\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n   cout &lt;&lt; \"Hello C++\" &lt;&lt;endl;\n   return 0;\n}\n</pre>\n<p>Here, you don't need to understand how <b>cout</b> displays the text on the user's screen. You need to only know the public interface and the underlying implementation of \u2018cout\u2019 is free to change.</p>\n<h2>Access Labels Enforce Abstraction</h2>\n<p>In C++, we use access labels to define the abstract interface to the class. A class may contain zero or more access labels \u2212</p>\n<ul class=\"list\">\n<li><p>Members defined with a public label are accessible to all parts of the program. The data-abstraction view of a type is defined by its public members.</p></li>\n<li><p>Members defined with a private label are not accessible to code that uses the class. The private sections hide the implementation from code that uses the type.</p></li>\n</ul>\n<p>There are no restrictions on how often an access label may appear. Each access label specifies the access level of the succeeding member definitions. The specified access level remains in effect until the next access label is encountered or the closing right brace of the class body is seen.</p>\n<h2>Benefits of Data Abstraction</h2>\n<p>Data abstraction provides two important advantages \u2212</p>\n<ul class=\"list\">\n<li><p>Class internals are protected from inadvertent user-level errors, which might corrupt the state of the object.</p></li>\n<li><p>The class implementation may evolve over time in response to changing requirements or bug reports without requiring change in user-level code.</p></li>\n</ul>\n<p>By defining data members only in the private section of the class, the class author is free to make changes in the data. If the implementation changes, only the class code needs to be examined to see what affect the change may have. If data is public, then any function that directly access the data members of the old representation might be broken.</p>\n<h2>Data Abstraction Example</h2>\n<p>Any C++ program where you implement a class with public and private members is an example of data abstraction. Consider the following example \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/Dm4Yt3\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nclass Adder {\n   public:\n      // constructor\n      Adder(int i = 0) {\n         total = i;\n      }\n      \n      // interface to outside world\n      void addNum(int number) {\n         total += number;\n      }\n      \n      // interface to outside world\n      int getTotal() {\n         return total;\n      };\n      \n   private:\n      // hidden data from outside world\n      int total;\n};\n\nint main() {\n   Adder a;\n   \n   a.addNum(10);\n   a.addNum(20);\n   a.addNum(30);\n\n   cout &lt;&lt; \"Total \" &lt;&lt; a.getTotal() &lt;&lt;endl;\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nTotal 60\n</pre>\n<p>Above class adds numbers together, and returns the sum. The public members - <b>addNum</b> and <b>getTotal</b> are the interfaces to the outside world and a user needs to know them to use the class. The private member <b>total</b> is something that the user doesn't need to know about, but is needed for the class to operate properly.</p>\n<h2>Designing Strategy</h2>\n<p>Abstraction separates code into interface and implementation. So while designing your component, you must keep interface independent of the implementation so that if you change underlying implementation then interface would remain intact.</p>\n<p>In this case whatever programs are using these interfaces, they would not be impacted and would just need a recompilation with the latest implementation.</p>\n<h1>Data Encapsulation in C++</h1>\n<p>All C++ programs are composed of the following two fundamental elements \u2212</p>\n<ul class=\"list\">\n<li><p><b>Program statements (code)</b> \u2212 This is the part of a program that performs actions and they are called functions.</p></li>\n<li><p><b>Program data</b> \u2212 The data is the information of the program which gets affected by the program functions.</p></li>\n</ul>\n<p>Encapsulation is an Object Oriented Programming concept that binds together the data and functions that manipulate the data, and that keeps both safe from outside interference and misuse. Data encapsulation led to the important OOP concept of <b>data hiding</b>.</p>\n<p><b>Data encapsulation</b> is a mechanism of bundling the data, and the functions that use them and <b>data abstraction</b> is a mechanism of exposing only the interfaces and hiding the implementation details from the user.</p>\n<p>C++ supports the properties of encapsulation and data hiding through the creation of user-defined types, called <b>classes</b>. We already have studied that a class can contain <b>private, protected </b> and <b>public</b> members. By default, all items defined in a class are private. For example \u2212</p>\n<pre class=\"result notranslate\">\nclass Box {\n   public:\n      double getVolume(void) {\n         return length * breadth * height;\n      }\n\n   private:\n      double length;      // Length of a box\n      double breadth;     // Breadth of a box\n      double height;      // Height of a box\n};\n</pre>\n<p>The variables length, breadth, and height are <b>private</b>. This means that they can be accessed only by other members of the Box class, and not by any other part of your program. This is one way encapsulation is achieved.</p>\n<p>To make parts of a class <b>public</b> (i.e., accessible to other parts of your program), you must declare them after the <b>public</b> keyword. All variables or functions defined after the public specifier are accessible by all other functions in your program.</p>\n<p>Making one class a friend of another exposes the implementation details and reduces encapsulation. The ideal is to keep as many of the details of each class hidden from all other classes as possible.</p>\n<h2>Data Encapsulation Example</h2>\n<p>Any C++ program where you implement a class with public and private members is an example of data encapsulation and data abstraction. Consider the following example \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/lZz6R0\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nclass Adder {\n   public:\n      // constructor\n      Adder(int i = 0) {\n         total = i;\n      }\n      \n      // interface to outside world\n      void addNum(int number) {\n         total += number;\n      }\n      \n      // interface to outside world\n      int getTotal() {\n         return total;\n      };\n   \n   private:\n      // hidden data from outside world\n      int total;\n};\n\nint main() {\n   Adder a;\n   \n   a.addNum(10);\n   a.addNum(20);\n   a.addNum(30);\n\n   cout &lt;&lt; \"Total \" &lt;&lt; a.getTotal() &lt;&lt;endl;\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nTotal 60\n</pre>\n<p>Above class adds numbers together, and returns the sum. The public members <b>addNum</b> and <b>getTotal </b> are the interfaces to the outside world and a user needs to know them to use the class. The private member <b>total</b> is something that is hidden from the outside world, but is needed for the class to operate properly.</p>\n<h2>Designing Strategy</h2>\n<p>Most of us have learnt to make class members private by default unless we really need to expose them. That's just good <b>encapsulation</b>.</p>\n<p>This is applied most frequently to data members, but it applies equally to all members, including virtual functions.</p>\n<h1>Interfaces in C++ (Abstract Classes)</h1>\n<p>An interface describes the behavior or capabilities of a C++ class without committing to a particular implementation of that class.</p>\n<p>The C++ interfaces are implemented using <b>abstract classes</b> and these abstract classes should not be confused with data abstraction which is a concept of keeping implementation details separate from associated data.</p>\n<p>A class is made abstract by declaring at least one of its functions as <b>pure virtual</b> function. A pure virtual function is specified by placing \"= 0\" in its declaration as follows \u2212</p>\n<pre class=\"result notranslate\">\nclass Box {\n   public:\n      // pure virtual function\n      virtual double getVolume() = 0;\n      \n   private:\n      double length;      // Length of a box\n      double breadth;     // Breadth of a box\n      double height;      // Height of a box\n};\n</pre>\n<p>The purpose of an <b>abstract class</b> (often referred to as an ABC) is to provide an appropriate base class from which other classes can inherit. Abstract classes cannot be used to instantiate objects and serves only as an <b>interface</b>. Attempting to instantiate an object of an abstract class causes a compilation error.</p>\n<p>Thus, if a subclass of an ABC needs to be instantiated, it has to implement each of the virtual functions, which means that it supports the interface declared by the ABC.  Failure to override a pure virtual function in a derived class, then attempting to instantiate objects of that class, is a compilation error.</p>\n<p>Classes that can be used to instantiate objects are called <b>concrete classes</b>.</p>\n<h2>Abstract Class Example</h2>\n<p>Consider the following example where parent class provides an interface to the base class  to implement a function called <b>getArea()</b> \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/5qXjq1\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n \nusing namespace std;\n \n// Base class\nclass Shape {\n   public:\n      // pure virtual function providing interface framework.\n      virtual int getArea() = 0;\n      void setWidth(int w) {\n         width = w;\n      }\n   \n      void setHeight(int h) {\n         height = h;\n      }\n   \n   protected:\n      int width;\n      int height;\n};\n \n// Derived classes\nclass Rectangle: public Shape {\n   public:\n      int getArea() { \n         return (width * height); \n      }\n};\n\nclass Triangle: public Shape {\n   public:\n      int getArea() { \n         return (width * height)/2; \n      }\n};\n \nint main(void) {\n   Rectangle Rect;\n   Triangle  Tri;\n \n   Rect.setWidth(5);\n   Rect.setHeight(7);\n   \n   // Print the area of the object.\n   cout &lt;&lt; \"Total Rectangle area: \" &lt;&lt; Rect.getArea() &lt;&lt; endl;\n\n   Tri.setWidth(5);\n   Tri.setHeight(7);\n   \n   // Print the area of the object.\n   cout &lt;&lt; \"Total Triangle area: \" &lt;&lt; Tri.getArea() &lt;&lt; endl; \n\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nTotal Rectangle area: 35\nTotal Triangle area: 17\n</pre>\n<p>You can see how an abstract class defined an interface in terms of getArea() and two other classes implemented same function but with different algorithm to calculate the area specific to the shape.</p>\n<h2>Designing Strategy</h2>\n<p>An object-oriented system might use an abstract base class to provide a common and standardized interface appropriate for all the external applications. Then, through inheritance from that abstract base class, derived classes are formed that operate similarly.</p>\n<p>The capabilities (i.e., the public functions) offered by the external applications are provided as pure virtual functions in the abstract base class. The implementations of these pure virtual functions are provided in the derived classes that correspond to the specific types of the application.</p>\n<p>This architecture also allows new applications to be added to a system easily, even after the system has been defined.</p>\n<h1>C++ Files and Streams</h1>\n<p>So far, we have been using the <b>iostream</b> standard library, which provides <b>cin</b> and <b>cout</b> methods for reading from standard input and writing to standard output respectively.</p>\n<p>This tutorial will teach you how to read and write from a file. This requires another standard C++ library called <b>fstream</b>, which defines three new data types \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Data Type &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>ofstream</b></p>\n<p>This data type represents the output file stream and is used to create files and to write information to files.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>ifstream</b></p>\n<p>This data type represents the input file stream and  is used to read information from files.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>fstream</b></p>\n<p>This data type represents the file stream generally, and has the capabilities of both ofstream and ifstream which means it can create files, write information to files, and read information from files.</p></td>\n</tr>\n</table>\n<p>To perform file processing in C++, header files &lt;iostream&gt; and &lt;fstream&gt; must be included in your C++ source file.</p>\n<h2>Opening a File</h2>\n<p>A file must be opened before you can read from it or write to it. Either <b>ofstream</b> or <b>fstream</b> object may be used to open a file for writing. And ifstream object is used to open a file for reading purpose only.</p>\n<p>Following is the standard syntax for open() function, which is a member of fstream, ifstream, and ofstream objects.</p>\n<pre class=\"result notranslate\">\nvoid open(const char *filename, ios::openmode mode);\n</pre>\n<p>Here, the first argument specifies the name and location of the file to be opened and the second argument of the <b>open()</b> member function defines the mode in which the file should be opened.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Mode Flag &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>ios::app</b></p>\n<p>Append mode. All output to that file to be appended to the end.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>ios::ate</b></p>\n<p>Open a file for output and move the read/write control to the end of the file.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>ios::in</b></p>\n<p>Open a file for reading.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>ios::out</b></p>\n<p>Open a file for writing.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>ios::trunc</b></p>\n<p>If the file already exists, its contents will be truncated before opening the file.</p></td>\n</tr>\n</table>\n<p>You can combine two or more of these values by <b>OR</b>ing them together. For example if you want to open a file in write mode and want to truncate it in case that already exists, following will be the syntax \u2212</p>\n<pre class=\"result notranslate\">\nofstream outfile;\noutfile.open(\"file.dat\", ios::out | ios::trunc );\n</pre>\n<p>Similar way, you can open a file for reading and writing purpose as follows \u2212</p>\n<pre class=\"result notranslate\">\nfstream  afile;\nafile.open(\"file.dat\", ios::out | ios::in );\n</pre>\n<h2>Closing a File</h2>\n<p>When a C++ program  terminates it automatically flushes all the streams, release all the allocated memory and close all the opened files. But it is always a good practice that a programmer should close all the opened files before program termination.</p>\n<p>Following is the standard syntax for close() function, which is a member of fstream, ifstream, and ofstream objects.</p>\n<pre class=\"result notranslate\">\nvoid close();\n</pre>\n<h2>Writing to a File</h2>\n<p>While doing C++ programming, you write information to a file from your program using the stream insertion operator (&lt;&lt;) just as you use that operator to output information to the screen. The only difference is that you use an <b>ofstream</b> or <b>fstream</b> object instead of the <b>cout</b> object.</p>\n<h2>Reading from a File</h2>\n<p>You read information from a file into your program using the stream extraction operator (&gt;&gt;) just as you use that operator to input information from the keyboard. The only difference is that you use an <b>ifstream</b> or <b>fstream</b> object instead of the <b>cin</b> object.</p>\n<h2>Read and Write Example</h2>\n<p>Following is the C++ program which opens a file in reading and writing mode. After writing information entered by the user to a file named afile.dat, the program reads information from the file and outputs it onto the screen \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/MLhc7C\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;fstream&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n \nint main () {\n   char data[100];\n\n   // open a file in write mode.\n   ofstream outfile;\n   outfile.open(\"afile.dat\");\n\n   cout &lt;&lt; \"Writing to the file\" &lt;&lt; endl;\n   cout &lt;&lt; \"Enter your name: \"; \n   cin.getline(data, 100);\n\n   // write inputted data into the file.\n   outfile &lt;&lt; data &lt;&lt; endl;\n\n   cout &lt;&lt; \"Enter your age: \"; \n   cin &gt;&gt; data;\n   cin.ignore();\n   \n   // again write inputted data into the file.\n   outfile &lt;&lt; data &lt;&lt; endl;\n\n   // close the opened file.\n   outfile.close();\n\n   // open a file in read mode.\n   ifstream infile; \n   infile.open(\"afile.dat\"); \n \n   cout &lt;&lt; \"Reading from the file\" &lt;&lt; endl; \n   infile &gt;&gt; data; \n\n   // write the data at the screen.\n   cout &lt;&lt; data &lt;&lt; endl;\n   \n   // again read the data from the file and display it.\n   infile &gt;&gt; data; \n   cout &lt;&lt; data &lt;&lt; endl; \n\n   // close the opened file.\n   infile.close();\n\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following sample input and output \u2212</p>\n<pre class=\"result notranslate\">\n$./a.out\nWriting to the file\nEnter your name: Zara\nEnter your age: 9\nReading from the file\nZara\n9\n</pre>\n<p>Above examples make use of additional functions from cin object, like getline() function to read the line from outside and ignore() function to ignore the extra characters left by previous read statement.</p>\n<h2>File Position Pointers</h2>\n<p>Both <b>istream</b> and <b>ostream</b> provide member functions for repositioning the file-position pointer. These member functions are <b>seekg</b> (\"seek get\") for istream and <b>seekp</b> (\"seek put\") for ostream.</p>\n<p>The argument to seekg and seekp normally is a long integer. A second argument can be specified to indicate the seek direction. The seek direction can be <b>ios::beg</b> (the default) for positioning relative to the beginning of a stream, <b>ios::cur</b> for positioning relative to the current position in a stream or <b>ios::end</b> for positioning relative to the end of a stream.</p>\n<p>The file-position pointer is an integer value that specifies the location in the file as a number of bytes from the file's starting location. Some examples of positioning the \"get\" file-position pointer are \u2212</p>\n<pre class=\"result notranslate\">\n// position to the nth byte of fileObject (assumes ios::beg)\nfileObject.seekg( n );\n\n// position n bytes forward in fileObject\nfileObject.seekg( n, ios::cur );\n\n// position n bytes back from end of fileObject\nfileObject.seekg( n, ios::end );\n\n// position at end of fileObject\nfileObject.seekg( 0, ios::end );\n</pre>\n<h1>C++ Exception Handling</h1>\n<p>An exception is a problem that arises during the execution of a program. A C++ exception is a response to an exceptional circumstance that arises while a program is running, such as an attempt to divide by zero.</p>\n<p>Exceptions provide a way to transfer control from one part of a program to another. C++ exception handling is built upon three keywords: <b>try, catch,</b> and <b>throw</b>.</p>\n<ul class=\"list\">\n<li><p><b>throw</b> \u2212 A program throws an exception when a problem shows up. This is done using a <b>throw</b> keyword.</p></li>\n<li><p><b>catch</b> \u2212 A program catches an exception with an exception handler at the place in a program where you want to handle the problem. The <b>catch</b> keyword indicates the catching of an exception.</p></li>\n<li><p><b>try</b> \u2212 A <b>try</b> block identifies a block of code for which particular exceptions will be activated. It's followed by one or more catch blocks.</p></li>\n</ul>\n<p>Assuming a block will raise an exception, a method catches an exception using a combination of the <b>try</b> and <b>catch</b> keywords. A try/catch block is placed around the code that might generate an exception. Code within a try/catch block is referred to as protected code, and the syntax for using try/catch as follows \u2212</p>\n<pre class=\"result notranslate\">\ntry {\n   // protected code\n} catch( ExceptionName e1 ) {\n   // catch block\n} catch( ExceptionName e2 ) {\n   // catch block\n} catch( ExceptionName eN ) {\n   // catch block\n}\n</pre>\n<p>You can list down multiple <b>catch</b> statements to catch different type of exceptions in case your <b>try</b> block raises more than one exception in different situations.</p>\n<h2>Throwing Exceptions</h2>\n<p>Exceptions can be thrown anywhere within a code block using  <b>throw</b> statement. The operand of the throw statement determines a type for the exception and can be any expression and the type of the result of the expression determines the type of exception thrown.</p>\n<p>Following is an example of throwing an exception when dividing by zero condition occurs \u2212</p>\n<pre class=\"result notranslate\">\ndouble division(int a, int b) {\n   if( b == 0 ) {\n      throw \"Division by zero condition!\";\n   }\n   return (a/b);\n}\n</pre>\n<h2>Catching Exceptions</h2>\n<p>The <b>catch</b> block following the <b>try</b> block catches any exception. You can specify what type of exception you want to catch and this is determined by the exception declaration that appears in parentheses following the keyword catch.</p>\n<pre class=\"result notranslate\">\ntry {\n   // protected code\n} catch( ExceptionName e ) {\n  // code to handle ExceptionName exception\n}\n</pre>\n<p>Above code will catch an exception of <b>ExceptionName</b> type. If you want to specify that a catch block should handle any type of exception that is thrown in a try block, you must put an ellipsis, ...,  between the parentheses enclosing the exception declaration as follows \u2212</p>\n<pre class=\"result notranslate\">\ntry {\n   // protected code\n} catch(...) {\n  // code to handle any exception\n}\n</pre>\n<p>The following is an example, which throws a division by zero exception and we catch it in catch block.</p>\n<a class=\"demo\" href=\"http://tpcg.io/Nuo9hc\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\ndouble division(int a, int b) {\n   if( b == 0 ) {\n      throw \"Division by zero condition!\";\n   }\n   return (a/b);\n}\n\nint main () {\n   int x = 50;\n   int y = 0;\n   double z = 0;\n \n   try {\n      z = division(x, y);\n      cout &lt;&lt; z &lt;&lt; endl;\n   } catch (const char* msg) {\n     cerr &lt;&lt; msg &lt;&lt; endl;\n   }\n\n   return 0;\n}\n</pre>\n<p>Because we are raising an exception of type <b>const char*</b>, so while catching this exception, we have to use const char* in catch block. If we compile and run above code, this would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nDivision by zero condition!\n</pre>\n<h2>C++ Standard Exceptions</h2>\n<p>C++ provides a list of standard exceptions defined in <b>&lt;exception&gt;</b>  which we can use in our programs. These are arranged in a parent-child class hierarchy shown below \u2212</p>\n<img alt=\"C++ Exceptions Hierarchy\" src=\"/cplusplus/images/cpp_exceptions.jpg\"/>\n<p>Here is the small description of each exception mentioned in the above hierarchy \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Exception &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>std::exception</b></p>\n<p>An exception and parent class of all the standard C++ exceptions.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>std::bad_alloc</b></p>\n<p>This can be thrown by <b>new</b>.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>std::bad_cast</b></p>\n<p>This can be thrown by <b>dynamic_cast</b>.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>std::bad_exception</b></p>\n<p>This is useful device to handle unexpected exceptions in a C++ program.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>std::bad_typeid</b></p>\n<p>This can be thrown by <b>typeid</b>.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><p><b>std::logic_error</b></p>\n<p>An exception that theoretically can be detected by reading the code.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">7</td>\n<td><p><b>std::domain_error</b></p>\n<p>This is an exception thrown when a mathematically invalid domain is used.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">8</td>\n<td><p><b>std::invalid_argument</b></p>\n<p>This is thrown due to invalid arguments.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">9</td>\n<td><p><b>std::length_error</b></p>\n<p>This is thrown when a too big std::string is created.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">10</td>\n<td><p><b>std::out_of_range</b></p>\n<p>This can be thrown by the 'at' method, for example a std::vector and std::bitset&lt;&gt;::operator[]().</p></td>\n</tr>\n<tr>\n<td class=\"ts\">11</td>\n<td><p><b>std::runtime_error</b></p>\n<p>An exception that theoretically cannot be detected by reading the code.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">12</td>\n<td><p><b>std::overflow_error</b></p>\n<p>This is thrown if a mathematical overflow occurs.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">13</td>\n<td><p><b>std::range_error</b></p>\n<p>This is occurred when you try to store a value which is out of range.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">14</td>\n<td><p><b>std::underflow_error</b></p>\n<p>This is thrown if a mathematical underflow occurs.</p></td>\n</tr>\n</table>\n<h2>Define New Exceptions</h2>\n<p>You can define your own exceptions by inheriting and overriding <b>exception</b> class functionality. Following is the example, which shows how you can use std::exception class to implement your own exception in standard way \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/FUdUJO\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;exception&gt;\nusing namespace std;\n\nstruct MyException : public exception {\n   const char * what () const throw () {\n      return \"C++ Exception\";\n   }\n};\n \nint main() {\n   try {\n      throw MyException();\n   } catch(MyException&amp; e) {\n      std::cout &lt;&lt; \"MyException caught\" &lt;&lt; std::endl;\n      std::cout &lt;&lt; e.what() &lt;&lt; std::endl;\n   } catch(std::exception&amp; e) {\n      //Other errors\n   }\n}\n</pre>\n<p>This would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nMyException caught\nC++ Exception\n</pre>\n<p>Here, <b>what()</b> is a public method provided by exception class and it has been overridden by all the child exception classes. This returns the cause of an exception.</p>\n<h1>C++ Dynamic Memory</h1>\n<p>A good understanding of how dynamic memory really works in C++ is essential to becoming a good C++ programmer. Memory in your C++ program is divided into two parts \u2212</p>\n<ul class=\"list\">\n<li><p><b>The stack</b> \u2212 All variables declared inside the function will take up memory from the stack.</p></li>\n<li><p><b>The heap</b> \u2212 This is unused memory of the program and can be used to allocate the memory dynamically when program runs.</p></li>\n</ul>\n<p>Many times, you are not aware in advance how much memory you will need to store particular information in a defined variable and the size of required memory can be determined at run time.</p>\n<p>You can allocate memory at run time within the heap for the variable of a given type using a special operator in C++ which returns the address of the space allocated. This operator is called <b>new</b> operator.</p>\n<p>If you are not in need of dynamically allocated memory anymore, you can use <b>delete</b> operator, which de-allocates memory that was previously allocated by new operator.</p>\n<h2>new and delete Operators</h2>\n<p>There is following generic syntax to use <b>new</b> operator to allocate memory dynamically for any data-type.</p>\n<pre class=\"result notranslate\">\nnew data-type;\n</pre>\n<p>Here, <b>data-type</b> could be any built-in data type including an array or any user defined data types include class or structure. Let us start with built-in data types. For example we can define a pointer to type double and then request that the memory be allocated at execution time. We can do this using the <b>new </b> operator with the following statements \u2212</p>\n<pre class=\"result notranslate\">\ndouble* pvalue  = NULL; // Pointer initialized with null\npvalue  = new double;   // Request memory for the variable\n</pre>\n<p>The memory may not have been allocated successfully, if the free store had been used up. So it is good practice to check if new operator is returning NULL pointer and take appropriate action as below \u2212</p>\n<pre class=\"result notranslate\">\ndouble* pvalue  = NULL;\nif( !(pvalue  = new double )) {\n   cout &lt;&lt; \"Error: out of memory.\" &lt;&lt;endl;\n   exit(1);\n}\n</pre>\n<p>The <b>malloc()</b> function from C, still exists in C++, but it is recommended to avoid using malloc() function. The main advantage of new over malloc() is that new doesn't just allocate memory, it constructs objects which is prime purpose of C++.</p>\n<p>At any point, when you feel a variable that has been dynamically allocated is not anymore required, you can free up the memory that it occupies in the free store with the \u2018delete\u2019 operator as follows \u2212</p>\n<pre class=\"result notranslate\">\ndelete pvalue;        // Release memory pointed to by pvalue\n</pre>\n<p>Let us put above concepts and form the following example to show how \u2018new\u2019 and \u2018delete\u2019 work \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/YFq73r\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main () {\n   double* pvalue  = NULL; // Pointer initialized with null\n   pvalue  = new double;   // Request memory for the variable\n \n   *pvalue = 29494.99;     // Store value at allocated address\n   cout &lt;&lt; \"Value of pvalue : \" &lt;&lt; *pvalue &lt;&lt; endl;\n\n   delete pvalue;         // free up the memory.\n\n   return 0;\n}\n</pre>\n<p>If we compile and run above code, this would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nValue of pvalue : 29495\n</pre>\n<h2>Dynamic Memory Allocation for Arrays</h2>\n<p>Consider you want to allocate memory for an array of characters, i.e., string of 20 characters. Using the same syntax what we have used above we can allocate memory dynamically as shown below.</p>\n<pre class=\"result notranslate\">\nchar* pvalue  = NULL;         // Pointer initialized with null\npvalue  = new char[20];       // Request memory for the variable\n</pre>\n<p>To remove the array that we have just created the statement would look like this \u2212</p>\n<pre class=\"result notranslate\">\ndelete [] pvalue;             // Delete array pointed to by pvalue\n</pre>\n<p>Following the similar generic syntax of new operator, you can allocate for a multi-dimensional array as follows \u2212</p>\n<pre class=\"result notranslate\">\ndouble** pvalue  = NULL;      // Pointer initialized with null \npvalue  = new double [3][4];  // Allocate memory for a 3x4 array \n</pre>\n<p>However, the syntax to release the memory for multi-dimensional array will still remain same as above \u2212</p>\n<pre class=\"result notranslate\">\ndelete [] pvalue;            // Delete array pointed to by pvalue\n</pre>\n<h2>Dynamic Memory Allocation for Objects</h2>\n<p>Objects are no different from simple data types. For example, consider the following code where we are going to use an array of objects to clarify the concept \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/qxQQ36\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nclass Box {\n   public:\n      Box() { \n         cout &lt;&lt; \"Constructor called!\" &lt;&lt;endl; \n      }\n      ~Box() { \n         cout &lt;&lt; \"Destructor called!\" &lt;&lt;endl; \n      }\n};\nint main() {\n   Box* myBoxArray = new Box[4];\n   delete [] myBoxArray; // Delete array\n\n   return 0;\n}\n</pre>\n<p>If you were to allocate an array of four Box objects, the Simple constructor would be called four times and similarly while deleting these objects, destructor will also be called same number of times.</p>\n<p>If we compile and run above code, this would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nConstructor called!\nConstructor called!\nConstructor called!\nConstructor called!\nDestructor called!\nDestructor called!\nDestructor called!\nDestructor called!\n</pre>\n<h1>Namespaces in C++</h1>\n<p>Consider a situation, when we have two persons with the same name, Zara, in the same class. Whenever we need to differentiate them definitely we would have to use some additional information along with their name, like either the area, if they live in different area or their mother\u2019s or father\u2019s name, etc.</p>\n<p>Same situation can arise in your C++ applications. For example, you might be writing some code that has a function called xyz() and there is another library available which is also having same function xyz(). Now the compiler has no way of knowing which version of xyz() function you are referring to within your code.</p>\n<p>A <b>namespace</b> is designed to overcome this difficulty and is used as additional information to differentiate similar functions, classes, variables etc. with the same name available in different libraries. Using namespace, you can define the context in which names are defined. In essence, a namespace defines a scope.</p>\n<h2>Defining a Namespace</h2>\n<p>A namespace definition begins with the keyword <b>namespace</b> followed by the namespace name as follows \u2212</p>\n<pre class=\"result notranslate\">\nnamespace namespace_name {\n   // code declarations\n}\n</pre>\n<p>To call the namespace-enabled version of either function or variable, prepend (::) the namespace name as follows \u2212</p>\n<pre class=\"result notranslate\">\nname::code;  // code could be variable or function.\n</pre>\n<p>Let us see how namespace scope the entities including variable and functions \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/0xMQ1K\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\n// first name space\nnamespace first_space {\n   void func() {\n      cout &lt;&lt; \"Inside first_space\" &lt;&lt; endl;\n   }\n}\n\n// second name space\nnamespace second_space {\n   void func() {\n      cout &lt;&lt; \"Inside second_space\" &lt;&lt; endl;\n   }\n}\n\nint main () {\n   // Calls function from first name space.\n   first_space::func();\n   \n   // Calls function from second name space.\n   second_space::func(); \n\n   return 0;\n}\n</pre>\n<p>If we compile and run above code, this would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nInside first_space\nInside second_space\n</pre>\n<h2>The using directive</h2>\n<p>You can also avoid prepending of namespaces with the <b>using namespace</b> directive. This directive tells the compiler that the subsequent code is making use of names in the specified namespace. The namespace is thus implied for the following code \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/8ggeE3\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\n// first name space\nnamespace first_space {\n   void func() {\n      cout &lt;&lt; \"Inside first_space\" &lt;&lt; endl;\n   }\n}\n\n// second name space\nnamespace second_space {\n   void func() {\n      cout &lt;&lt; \"Inside second_space\" &lt;&lt; endl;\n   }\n}\n\nusing namespace first_space;\nint main () {\n   // This calls function from first name space.\n   func();\n   \n   return 0;\n}\n</pre>\n<p>If we compile and run above code, this would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nInside first_space\n</pre>\n<p>The \u2018using\u2019 directive can also be used to refer to a particular item within a namespace. For example, if the only part of the std namespace that you intend to use is cout, you can refer to it as follows \u2212</p>\n<pre class=\"result notranslate\">\nusing std::cout;\n</pre>\n<p>Subsequent code can refer to cout without prepending the namespace, but other items in the <b>std </b> namespace will still need to be explicit as follows \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/J1UkeN\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing std::cout;\n\nint main () {\n   cout &lt;&lt; \"std::endl is used with std!\" &lt;&lt; std::endl;\n   \n   return 0;\n}\n</pre>\n<p>If we compile and run above code, this would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nstd::endl is used with std!\n</pre>\n<p>Names introduced in a <b>using</b> directive obey normal scope rules. The name is visible from the point of the <b>using</b> directive to the end of the scope in which the directive is found. Entities with the same name defined in an outer scope are hidden.</p>\n<h2>Discontiguous Namespaces</h2>\n<p>A namespace can be defined in several parts and so a namespace is made up of the sum of its separately defined parts. The separate parts of a namespace can be spread over multiple files.</p>\n<p>So, if one part of the namespace requires a name defined in another file, that name must still be declared. Writing a following namespace definition either defines a new namespace or adds new elements to an existing one \u2212</p>\n<pre class=\"result notranslate\">\nnamespace namespace_name {\n   // code declarations\n}\n</pre>\n<h2>Nested Namespaces</h2>\n<p>Namespaces can be nested where you can define one namespace inside another name space as follows \u2212</p>\n<pre class=\"result notranslate\">\nnamespace namespace_name1 {\n   // code declarations\n   namespace namespace_name2 {\n      // code declarations\n   }\n}\n</pre>\n<p>You can access members of nested namespace by using resolution operators as follows \u2212</p>\n<pre class=\"result notranslate\">\n// to access members of namespace_name2\nusing namespace namespace_name1::namespace_name2;\n\n// to access members of namespace:name1\nusing namespace namespace_name1;\n</pre>\n<p>In the above statements if you are using namespace_name1, then it will make elements of namespace_name2 available in the scope as follows \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/2ydw4V\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\n// first name space\nnamespace first_space {\n   void func() {\n      cout &lt;&lt; \"Inside first_space\" &lt;&lt; endl;\n   }\n   \n   // second name space\n   namespace second_space {\n      void func() {\n         cout &lt;&lt; \"Inside second_space\" &lt;&lt; endl;\n      }\n   }\n}\n\nusing namespace first_space::second_space;\nint main () {\n   // This calls function from second name space.\n   func();\n   \n   return 0;\n}\n</pre>\n<p>If we compile and run above code, this would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nInside second_space\n</pre>\n<h1>C++ Templates</h1>\n<p>Templates are the foundation of generic programming, which involves writing code in a way that is independent of any particular type.</p>\n<p>A template is a blueprint or formula for creating a generic class or a function. The library containers like iterators and algorithms are examples of generic programming and have been developed using template concept.</p>\n<p>There is a single definition of each container, such as <b>vector</b>, but we can define many different kinds of vectors for example, <b>vector &lt;int&gt;</b> or <b>vector &lt;string&gt;</b>.</p>\n<p>You can use templates to define functions as well as classes, let us see how they work \u2212</p>\n<h2>Function Template</h2>\n<p>The general form of a template function definition is shown here \u2212</p>\n<pre class=\"result notranslate\">\ntemplate &lt;class type&gt; ret-type func-name(parameter list) {\n   // body of function\n} \n</pre>\n<p>Here, type is a placeholder name for a data type used by the function. This name can be used within the function definition.</p>\n<p>The following is the example of a function template that returns the maximum of two values \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/6cvVGA\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\ntemplate &lt;typename T&gt;\ninline T const&amp; Max (T const&amp; a, T const&amp; b) { \n   return a &lt; b ? b:a; \n}\n\nint main () {\n   int i = 39;\n   int j = 20;\n   cout &lt;&lt; \"Max(i, j): \" &lt;&lt; Max(i, j) &lt;&lt; endl; \n\n   double f1 = 13.5; \n   double f2 = 20.7; \n   cout &lt;&lt; \"Max(f1, f2): \" &lt;&lt; Max(f1, f2) &lt;&lt; endl; \n\n   string s1 = \"Hello\"; \n   string s2 = \"World\"; \n   cout &lt;&lt; \"Max(s1, s2): \" &lt;&lt; Max(s1, s2) &lt;&lt; endl; \n\n   return 0;\n}\n</pre>\n<p>If we compile and run above code, this would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nMax(i, j): 39\nMax(f1, f2): 20.7\nMax(s1, s2): World\n</pre>\n<h2>Class Template</h2>\n<p>Just as we can define function templates, we can also define class templates. The general form of a generic class declaration is shown here \u2212</p>\n<pre class=\"result notranslate\">\ntemplate &lt;class type&gt; class class-name {\n   .\n   .\n   .\n}\n</pre>\n<p>Here, <b>type</b>  is the placeholder type name, which will be specified when a class is instantiated. You can define more than one generic data type by using a comma-separated list.</p>\n<p>Following is the example to define class Stack&lt;&gt; and implement generic methods to push and pop the elements from the stack \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/ixzLqn\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;cstdlib&gt;\n#include &lt;string&gt;\n#include &lt;stdexcept&gt;\n\nusing namespace std;\n\ntemplate &lt;class T&gt;\nclass Stack { \n   private: \n      vector&lt;T&gt; elems;    // elements \n\n   public: \n      void push(T const&amp;);  // push element \n      void pop();               // pop element \n      T top() const;            // return top element \n      \n      bool empty() const {      // return true if empty.\n         return elems.empty(); \n      } \n}; \n\ntemplate &lt;class T&gt;\nvoid Stack&lt;T&gt;::push (T const&amp; elem) { \n   // append copy of passed element \n   elems.push_back(elem);    \n} \n\ntemplate &lt;class T&gt;\nvoid Stack&lt;T&gt;::pop () { \n   if (elems.empty()) { \n      throw out_of_range(\"Stack&lt;&gt;::pop(): empty stack\"); \n   }\n   \n   // remove last element \n   elems.pop_back();         \n} \n\ntemplate &lt;class T&gt;\nT Stack&lt;T&gt;::top () const { \n   if (elems.empty()) { \n      throw out_of_range(\"Stack&lt;&gt;::top(): empty stack\"); \n   }\n   \n   // return copy of last element \n   return elems.back();      \n} \n\nint main() { \n   try {\n      Stack&lt;int&gt;         intStack;  // stack of ints \n      Stack&lt;string&gt; stringStack;    // stack of strings \n\n      // manipulate int stack \n      intStack.push(7); \n      cout &lt;&lt; intStack.top() &lt;&lt;endl; \n\n      // manipulate string stack \n      stringStack.push(\"hello\"); \n      cout &lt;&lt; stringStack.top() &lt;&lt; std::endl; \n      stringStack.pop(); \n      stringStack.pop(); \n   } catch (exception const&amp; ex) { \n      cerr &lt;&lt; \"Exception: \" &lt;&lt; ex.what() &lt;&lt;endl; \n      return -1;\n   } \n} \n</pre>\n<p>If we compile and run above code, this would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\n7\nhello\nException: Stack&lt;&gt;::pop(): empty stack\n</pre>\n<h1>C++ Preprocessor</h1>\n<p>The preprocessors are the directives, which give instructions to the compiler to preprocess the information before actual compilation starts.</p>\n<p>All preprocessor directives begin with #, and only white-space characters may appear before a preprocessor directive on a line. Preprocessor directives are not C++ statements, so they do not end in a semicolon (;).</p>\n<p>You already have seen a <b>#include</b> directive in all the examples. This macro is used to include a header file into the source file.</p>\n<p>There are number of preprocessor directives supported by C++ like #include, #define, #if, #else, #line, etc. Let us see important directives \u2212</p>\n<h2>The #define Preprocessor</h2>\n<p>The #define preprocessor directive creates symbolic constants. The symbolic constant is called a <b>macro</b> and the general form of the directive is \u2212</p>\n<pre class=\"result notranslate\">\n#define macro-name replacement-text \n</pre>\n<p>When this line appears in a file, all subsequent occurrences of macro in that file will be replaced by replacement-text before the program is compiled. For example \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\n#define PI 3.14159\n\nint main () {\n   cout &lt;&lt; \"Value of PI :\" &lt;&lt; PI &lt;&lt; endl; \n\n   return 0;\n}\n</pre>\n<p>Now, let us do the preprocessing of this code to see the result assuming we have the source code file. So let us compile it with -E option and redirect the result to test.p. Now, if you check test.p, it will have lots of information and at the bottom, you will find the value replaced as follows \u2212</p>\n<pre class=\"result notranslate\">\n$gcc -E test.cpp &gt; test.p\n\n...\nint main () {\n   cout &lt;&lt; \"Value of PI :\" &lt;&lt; 3.14159 &lt;&lt; endl; \n   return 0;\n}\n</pre>\n<h2>Function-Like Macros</h2>\n<p>You can use #define to define a macro which will take argument as follows \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/4pUj1I\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\n#define MIN(a,b) (((a)&lt;(b)) ? a : b)\n\nint main () {\n   int i, j;\n   \n   i = 100;\n   j = 30;\n   \n   cout &lt;&lt;\"The minimum is \" &lt;&lt; MIN(i, j) &lt;&lt; endl;\n\n   return 0;\n}\n</pre>\n<p>If we compile and run above code, this would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nThe minimum is 30\n</pre>\n<h2>Conditional Compilation</h2>\n<p>There are several directives, which can be used to compile selective portions of your program's source code. This process is called conditional compilation.</p>\n<p>The conditional preprocessor construct is much like the \u2018if\u2019 selection structure. Consider the following preprocessor code \u2212</p>\n<pre class=\"result notranslate\">\n#ifndef NULL\n   #define NULL 0\n#endif\n</pre>\n<p>You can compile a program for debugging purpose. You can also turn on or off the debugging using a single macro as follows \u2212</p>\n<pre class=\"result notranslate\">\n#ifdef DEBUG\n   cerr &lt;&lt;\"Variable x = \" &lt;&lt; x &lt;&lt; endl;\n#endif\n</pre>\n<p>This causes the <b>cerr</b> statement to be compiled in the program if the symbolic constant DEBUG has been defined before directive #ifdef DEBUG. You can use #if 0 statment to comment out a portion of the program as follows \u2212</p>\n<pre class=\"result notranslate\">\n#if 0\n   code prevented from compiling\n#endif\n</pre>\n<p>Let us try the following example \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/r3qAkV\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n#define DEBUG\n\n#define MIN(a,b) (((a)&lt;(b)) ? a : b)\n\nint main () {\n   int i, j;\n   \n   i = 100;\n   j = 30;\n\n#ifdef DEBUG\n   cerr &lt;&lt;\"Trace: Inside main function\" &lt;&lt; endl;\n#endif\n\n#if 0\n   /* This is commented part */\n   cout &lt;&lt; MKSTR(HELLO C++) &lt;&lt; endl;\n#endif\n\n   cout &lt;&lt;\"The minimum is \" &lt;&lt; MIN(i, j) &lt;&lt; endl;\n\n#ifdef DEBUG\n   cerr &lt;&lt;\"Trace: Coming out of main function\" &lt;&lt; endl;\n#endif\n\n   return 0;\n}\n</pre>\n<p>If we compile and run above code, this would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nThe minimum is 30\nTrace: Inside main function\nTrace: Coming out of main function\n</pre>\n<h2>The # and ## Operators</h2>\n<p>The # and ## preprocessor operators are available in C++ and ANSI/ISO C. The # operator causes a replacement-text token to be converted to a string surrounded by quotes. </p>\n<p>Consider the following macro definition \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/54XMO7\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\n#define MKSTR( x ) #x\n\nint main () {\n\n   cout &lt;&lt; MKSTR(HELLO C++) &lt;&lt; endl;\n\n   return 0;\n}\n</pre>\n<p>If we compile and run above code, this would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nHELLO C++\n</pre>\n<p>Let us see how it worked. It is simple to understand that the C++ preprocessor turns the line \u2212</p>\n<pre class=\"result notranslate\">\ncout &lt;&lt; MKSTR(HELLO C++) &lt;&lt; endl;\n</pre>\n<p>Above line will be turned into the following line \u2212</p>\n<pre class=\"result notranslate\">\ncout &lt;&lt; \"HELLO C++\" &lt;&lt; endl;\n</pre>\n<p>The ## operator is used to concatenate two tokens. Here is an example \u2212</p>\n<pre class=\"result notranslate\">\n#define CONCAT( x, y )  x ## y\n</pre>\n<p>When CONCAT appears in the program, its arguments are concatenated and used to replace the macro. For example, CONCAT(HELLO, C++) is replaced by \"HELLO C++\" in the program as follows.</p>\n<a class=\"demo\" href=\"http://tpcg.io/xadPS5\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\n#define concat(a, b) a ## b\nint main() {\n   int xy = 100;\n   \n   cout &lt;&lt; concat(x, y);\n   return 0;\n}\n</pre>\n<p>If we compile and run above code, this would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\n100\n</pre>\n<p>Let us see how it worked. It is simple to understand that the C++ preprocessor transforms \u2212</p>\n<pre class=\"result notranslate\">\ncout &lt;&lt; concat(x, y);\n</pre>\n<p>Above line will be transformed into the following line \u2212</p>\n<pre class=\"result notranslate\">\ncout &lt;&lt; xy;\n</pre>\n<h2>Predefined C++ Macros</h2>\n<p>C++ provides a number of predefined macros mentioned below \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Macro &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>__LINE__</b></p>\n<p>This contains the current line number of the program when it is being compiled.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>__FILE__</b></p>\n<p>This contains the current file name of the program when it is being compiled.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>__DATE__</b></p>\n<p>This contains a string of the form month/day/year that is the date of the translation of the source file into object code.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>__TIME__</b></p>\n<p>This contains a string of the form hour:minute:second that is the time at which the program was compiled.</p></td>\n</tr>\n</table>\n<p>Let us see an example for all the above macros \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/uO9yHk\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main () {\n   cout &lt;&lt; \"Value of __LINE__ : \" &lt;&lt; __LINE__ &lt;&lt; endl;\n   cout &lt;&lt; \"Value of __FILE__ : \" &lt;&lt; __FILE__ &lt;&lt; endl;\n   cout &lt;&lt; \"Value of __DATE__ : \" &lt;&lt; __DATE__ &lt;&lt; endl;\n   cout &lt;&lt; \"Value of __TIME__ : \" &lt;&lt; __TIME__ &lt;&lt; endl;\n\n   return 0;\n}\n</pre>\n<p>If we compile and run above code, this would produce the following result \u2212</p>\n<pre class=\"result notranslate\">\nValue of __LINE__ : 6\nValue of __FILE__ : test.cpp\nValue of __DATE__ : Feb 28 2011\nValue of __TIME__ : 18:52:48\n</pre>\n<h1>C++ Signal Handling</h1>\n<p>Signals are the interrupts delivered to a process by the operating system which can terminate a program prematurely. You can generate interrupts by pressing Ctrl+C on a UNIX, LINUX, Mac OS X or Windows system.</p>\n<p>There are signals which can not be caught by the program but there is a following list of signals which you can catch in your program and can take appropriate actions based on the signal. These signals are defined in C++ header file &lt;csignal&gt;.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Signal &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>SIGABRT</b></p>\n<p>Abnormal termination of the program, such as a call to <b>abort</b>.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>SIGFPE</b></p>\n<p>An erroneous arithmetic operation, such as a divide by zero or an operation resulting in overflow.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>SIGILL</b></p>\n<p>Detection of an illegal instruction.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>SIGINT</b></p>\n<p>Receipt of an interactive attention signal.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>SIGSEGV</b></p>\n<p>An invalid access to storage.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><p><b>SIGTERM</b></p>\n<p>A termination request sent to the program.</p></td>\n</tr>\n</table>\n<h2>The signal() Function</h2>\n<p>C++ signal-handling library provides function <b>signal</b> to trap unexpected events. Following is the syntax of the signal() function \u2212</p>\n<pre class=\"result notranslate\">\nvoid (*signal (int sig, void (*func)(int)))(int); \n</pre>\n<p>Keeping it simple, this function receives two arguments: first argument as an integer which represents signal number and second argument as a pointer to the signal-handling function.</p>\n<p>Let us write a simple C++ program where we will catch SIGINT signal using signal() function. Whatever signal you want to catch in your program, you must register that signal using <b>signal</b> function and associate it with a signal handler. Examine the following example \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;csignal&gt;\n\nusing namespace std;\n\nvoid signalHandler( int signum ) {\n   cout &lt;&lt; \"Interrupt signal (\" &lt;&lt; signum &lt;&lt; \") received.\\n\";\n\n   // cleanup and close up stuff here  \n   // terminate program  \n\n   exit(signum);  \n}\n\nint main () {\n   // register signal SIGINT and signal handler  \n   signal(SIGINT, signalHandler);  \n\n   while(1) {\n      cout &lt;&lt; \"Going to sleep....\" &lt;&lt; endl;\n      sleep(1);\n   }\n\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nGoing to sleep....\nGoing to sleep....\nGoing to sleep....\n</pre>\n<p>Now, press Ctrl+c to interrupt the program and you will see that your program will catch the signal and would come out by printing something as follows \u2212</p>\n<pre class=\"result notranslate\">\nGoing to sleep....\nGoing to sleep....\nGoing to sleep....\nInterrupt signal (2) received.\n</pre>\n<h2>The raise() Function</h2>\n<p>You can generate signals by function <b>raise()</b>, which takes an integer signal number as an argument and has the following syntax.</p>\n<pre class=\"result notranslate\">\nint raise (signal sig);\n</pre>\n<p>Here, <b>sig</b> is the signal number to send any of the signals: SIGINT, SIGABRT, SIGFPE, SIGILL, SIGSEGV, SIGTERM, SIGHUP. Following is the example where we raise a signal internally using raise() function as follows \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;csignal&gt;\n\nusing namespace std;\n\nvoid signalHandler( int signum ) {\n   cout &lt;&lt; \"Interrupt signal (\" &lt;&lt; signum &lt;&lt; \") received.\\n\";\n\n   // cleanup and close up stuff here  \n   // terminate program  \n\n   exit(signum);  \n}\n\nint main () {\n   int i = 0;\n   // register signal SIGINT and signal handler  \n   signal(SIGINT, signalHandler);  \n\n   while(++i) {\n      cout &lt;&lt; \"Going to sleep....\" &lt;&lt; endl;\n      if( i == 3 ) {\n         raise( SIGINT);\n      }\n      sleep(1);\n   }\n\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result and would come out automatically \u2212</p>\n<pre class=\"result notranslate\">\nGoing to sleep....\nGoing to sleep....\nGoing to sleep....\nInterrupt signal (2) received.\n</pre>\n<h1>C++ Multithreading</h1>\n<p>Multithreading is a specialized form of multitasking and a multitasking is the feature that allows your computer to run two or more programs concurrently.  In general, there are two types of multitasking: process-based and thread-based.</p>\n<p>Process-based multitasking handles the concurrent execution of programs. Thread-based multitasking deals with the concurrent execution of pieces of the same program.</p>\n<p>A multithreaded program contains two or more parts that can run concurrently. Each part of such a program is called a thread, and each thread defines a separate path of execution.</p>\n<p>C++ does not contain any built-in support for multithreaded applications. Instead, it relies entirely upon the operating system to provide this feature.</p>\n<p>This tutorial assumes that you are working on Linux OS and we are going to write multi-threaded C++ program using POSIX. POSIX Threads, or Pthreads provides  API which are available on many Unix-like POSIX systems such as FreeBSD, NetBSD, GNU/Linux, Mac OS X and Solaris.</p>\n<h2>Creating Threads</h2>\n<p>The following routine is used to create a POSIX thread \u2212</p>\n<pre class=\"result notranslate\">\n#include &lt;pthread.h&gt;\npthread_create (thread, attr, start_routine, arg) \n</pre>\n<p>Here, <b>pthread_create</b> creates a new thread and makes it executable. This routine can be called any number of times from anywhere within your code. Here is the description of the parameters \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Parameter &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>thread</b></p>\n<p>An opaque, unique identifier for the new thread returned by the subroutine.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>attr</b></p>\n<p>An opaque attribute object that may be used to set thread attributes. You can specify a thread attributes object, or NULL for the default values.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>start_routine</b></p>\n<p>The C++ routine that the thread will execute once it is created.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>arg</b></p>\n<p>A single argument that may be passed to start_routine. It must be passed by reference as a pointer cast of type void. NULL may be used if no argument is to be passed.</p></td>\n</tr>\n</table>\n<p>The maximum number of threads that may be created by a process is implementation dependent. Once created, threads are peers, and may create other threads. There is no implied hierarchy or dependency between threads.</p>\n<h2>Terminating Threads</h2>\n<p>There is following routine which we use to terminate a POSIX thread \u2212</p>\n<pre class=\"result notranslate\">\n#include &lt;pthread.h&gt;\npthread_exit (status) \n</pre>\n<p>Here <b>pthread_exit</b> is used to explicitly exit a thread. Typically, the pthread_exit() routine is called after a thread has completed its work and is no longer required to exist.</p>\n<p>If main() finishes before the threads it has created, and exits with pthread_exit(), the other threads will continue to execute. Otherwise, they will be automatically terminated when main() finishes.</p>\n<p><b>Example</b></p>\n<p>This simple example code creates 5 threads with the pthread_create() routine. Each thread prints a \"Hello World!\" message, and then terminates with a call to pthread_exit(). </p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;cstdlib&gt;\n#include &lt;pthread.h&gt;\n\nusing namespace std;\n\n#define NUM_THREADS 5\n\nvoid *PrintHello(void *threadid) {\n   long tid;\n   tid = (long)threadid;\n   cout &lt;&lt; \"Hello World! Thread ID, \" &lt;&lt; tid &lt;&lt; endl;\n   pthread_exit(NULL);\n}\n\nint main () {\n   pthread_t threads[NUM_THREADS];\n   int rc;\n   int i;\n   \n   for( i = 0; i &lt; NUM_THREADS; i++ ) {\n      cout &lt;&lt; \"main() : creating thread, \" &lt;&lt; i &lt;&lt; endl;\n      rc = pthread_create(&amp;threads[i], NULL, PrintHello, (void *)i);\n      \n      if (rc) {\n         cout &lt;&lt; \"Error:unable to create thread,\" &lt;&lt; rc &lt;&lt; endl;\n         exit(-1);\n      }\n   }\n   pthread_exit(NULL);\n}\n</pre>\n<p>Compile the following program using -lpthread library as follows \u2212</p>\n<pre class=\"result notranslate\">\n$gcc test.cpp -lpthread\n</pre>\n<p>Now, execute your program which gives the following output \u2212</p>\n<pre class=\"result notranslate\">\nmain() : creating thread, 0\nmain() : creating thread, 1\nmain() : creating thread, 2\nmain() : creating thread, 3\nmain() : creating thread, 4\nHello World! Thread ID, 0\nHello World! Thread ID, 1\nHello World! Thread ID, 2\nHello World! Thread ID, 3\nHello World! Thread ID, 4\n</pre>\n<h2>Passing Arguments to Threads</h2>\n<p>This example shows how to pass multiple arguments via a structure. You can pass any data type in a thread callback because it points to void as explained in the following example \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;cstdlib&gt;\n#include &lt;pthread.h&gt;\n\nusing namespace std;\n\n#define NUM_THREADS 5\n\nstruct thread_data {\n   int  thread_id;\n   char *message;\n};\n\nvoid *PrintHello(void *threadarg) {\n   struct thread_data *my_data;\n   my_data = (struct thread_data *) threadarg;\n\n   cout &lt;&lt; \"Thread ID : \" &lt;&lt; my_data-&gt;thread_id ;\n   cout &lt;&lt; \" Message : \" &lt;&lt; my_data-&gt;message &lt;&lt; endl;\n\n   pthread_exit(NULL);\n}\n\nint main () {\n   pthread_t threads[NUM_THREADS];\n   struct thread_data td[NUM_THREADS];\n   int rc;\n   int i;\n\n   for( i = 0; i &lt; NUM_THREADS; i++ ) {\n      cout &lt;&lt;\"main() : creating thread, \" &lt;&lt; i &lt;&lt; endl;\n      td[i].thread_id = i;\n      td[i].message = \"This is message\";\n      rc = pthread_create(&amp;threads[i], NULL, PrintHello, (void *)&amp;td[i]);\n      \n      if (rc) {\n         cout &lt;&lt; \"Error:unable to create thread,\" &lt;&lt; rc &lt;&lt; endl;\n         exit(-1);\n      }\n   }\n   pthread_exit(NULL);\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nmain() : creating thread, 0\nmain() : creating thread, 1\nmain() : creating thread, 2\nmain() : creating thread, 3\nmain() : creating thread, 4\nThread ID : 3 Message : This is message\nThread ID : 2 Message : This is message\nThread ID : 0 Message : This is message\nThread ID : 1 Message : This is message\nThread ID : 4 Message : This is message\n</pre>\n<h2>Joining and Detaching Threads</h2>\n<p>There are following two routines which we can use to join or detach threads \u2212</p>\n<pre class=\"result notranslate\">\npthread_join (threadid, status) \npthread_detach (threadid) \n</pre>\n<p>The pthread_join() subroutine blocks the calling thread until the specified 'threadid' thread terminates. When a thread is created, one of its attributes defines whether it is joinable or detached. Only threads that are created as joinable can be joined. If a thread is created as detached, it can never be joined.</p>\n<p>This example demonstrates how to wait for thread completions by using the Pthread join routine.</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;cstdlib&gt;\n#include &lt;pthread.h&gt;\n#include &lt;unistd.h&gt;\n\nusing namespace std;\n\n#define NUM_THREADS 5\n\nvoid *wait(void *t) {\n   int i;\n   long tid;\n\n   tid = (long)t;\n\n   sleep(1);\n   cout &lt;&lt; \"Sleeping in thread \" &lt;&lt; endl;\n   cout &lt;&lt; \"Thread with id : \" &lt;&lt; tid &lt;&lt; \"  ...exiting \" &lt;&lt; endl;\n   pthread_exit(NULL);\n}\n\nint main () {\n   int rc;\n   int i;\n   pthread_t threads[NUM_THREADS];\n   pthread_attr_t attr;\n   void *status;\n\n   // Initialize and set thread joinable\n   pthread_attr_init(&amp;attr);\n   pthread_attr_setdetachstate(&amp;attr, PTHREAD_CREATE_JOINABLE);\n\n   for( i = 0; i &lt; NUM_THREADS; i++ ) {\n      cout &lt;&lt; \"main() : creating thread, \" &lt;&lt; i &lt;&lt; endl;\n      rc = pthread_create(&amp;threads[i], attr, wait, (void *)i );\n      \n      if (rc) {\n         cout &lt;&lt; \"Error:unable to create thread,\" &lt;&lt; rc &lt;&lt; endl;\n         exit(-1);\n      }\n   }\n\n   // free attribute and wait for the other threads\n   pthread_attr_destroy(&amp;attr);\n   for( i = 0; i &lt; NUM_THREADS; i++ ) {\n      rc = pthread_join(threads[i], &amp;status);\n      if (rc) {\n         cout &lt;&lt; \"Error:unable to join,\" &lt;&lt; rc &lt;&lt; endl;\n         exit(-1);\n      }\n      \n      cout &lt;&lt; \"Main: completed thread id :\" &lt;&lt; i ;\n      cout &lt;&lt; \"  exiting with status :\" &lt;&lt; status &lt;&lt; endl;\n   }\n\n   cout &lt;&lt; \"Main: program exiting.\" &lt;&lt; endl;\n   pthread_exit(NULL);\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nmain() : creating thread, 0\nmain() : creating thread, 1\nmain() : creating thread, 2\nmain() : creating thread, 3\nmain() : creating thread, 4\nSleeping in thread\nThread with id : 0 .... exiting\nSleeping in thread\nThread with id : 1 .... exiting\nSleeping in thread\nThread with id : 2 .... exiting\nSleeping in thread\nThread with id : 3 .... exiting\nSleeping in thread\nThread with id : 4 .... exiting\nMain: completed thread id :0  exiting with status :0\nMain: completed thread id :1  exiting with status :0\nMain: completed thread id :2  exiting with status :0\nMain: completed thread id :3  exiting with status :0\nMain: completed thread id :4  exiting with status :0\nMain: program exiting.\n</pre>\n<h1>C++ Web Programming</h1>\n<h2>What is CGI?</h2>\n<ul class=\"list\">\n<li><p>The Common Gateway Interface, or CGI, is a set of standards that define how information is exchanged between the web server and a custom script.</p></li>\n<li><p>The CGI specs are currently maintained by the NCSA and NCSA defines CGI is as follows \u2212</p></li>\n<li><p>The Common Gateway Interface, or CGI, is a standard for external gateway programs to interface with information servers such as HTTP servers.</p></li>\n<li><p>The current version is CGI/1.1 and CGI/1.2 is under progress.</p></li>\n</ul>\n<h2>Web Browsing</h2>\n<p>To understand the concept of CGI, let's see what happens when we click a hyperlink to browse a particular web page or URL.</p>\n<ul class=\"list\">\n<li><p>Your browser contacts the HTTP web server and demand for the URL ie. filename.</p></li>\n<li><p>Web Server will parse the URL and will look for the filename. If it finds requested file then web server sends that file back to the browser otherwise sends an error message indicating that you have requested a wrong file.</p></li>\n<li><p>Web browser takes response from web server and displays either the received file or error message based on the received response.</p></li>\n</ul>\n<p>However, it is possible to set up the HTTP server in such a way that whenever a file in a certain directory is requested, that file is not sent back; instead it is executed as a program, and produced output from the program is sent back to your browser to display.</p>\n<p>The Common Gateway Interface (CGI) is a standard protocol for enabling applications (called CGI programs or CGI scripts) to interact with Web servers and with clients. These CGI programs can be a written in Python, PERL, Shell, C or C++ etc.</p>\n<h2>CGI Architecture Diagram</h2>\n<p>The following simple program shows a simple architecture of CGI \u2212</p>\n<img alt=\"CGI Architecture\" src=\"/cplusplus/images/cgiarch.gif\"/>\n<h2>Web Server Configuration</h2>\n<p>Before you proceed with CGI Programming, make sure that your Web Server supports CGI and it is configured to handle CGI Programs. All the CGI Programs to be executed by the HTTP server are kept in a pre-configured directory. This directory is called CGI directory and by convention it is named as /var/www/cgi-bin. By convention CGI files will have extension as <b>.cgi</b>, though they are C++ executable.</p>\n<p>By default, Apache Web Server is configured to run CGI programs in /var/www/cgi-bin. If you want to specify any other directory to run your CGI scripts, you can modify the following section in the httpd.conf file \u2212</p>\n<pre class=\"prettyprint notranslate\">\n&lt;Directory \"/var/www/cgi-bin\"&gt;\n   AllowOverride None\n   Options ExecCGI\n   Order allow,deny\n   Allow from all\n&lt;/Directory&gt;\n \n&lt;Directory \"/var/www/cgi-bin\"&gt;\n   Options All\n&lt;/Directory&gt;\n</pre>\n<p>Here, I assume that you have Web Server up and running successfully and you are able to run any other CGI program like Perl or Shell etc.</p>\n<h2>First CGI Program</h2>\n<p>Consider the following C++ Program content \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main () {\n   cout &lt;&lt; \"Content-type:text/html\\r\\n\\r\\n\";\n   cout &lt;&lt; \"&lt;html&gt;\\n\";\n   cout &lt;&lt; \"&lt;head&gt;\\n\";\n   cout &lt;&lt; \"&lt;title&gt;Hello World - First CGI Program&lt;/title&gt;\\n\";\n   cout &lt;&lt; \"&lt;/head&gt;\\n\";\n   cout &lt;&lt; \"&lt;body&gt;\\n\";\n   cout &lt;&lt; \"&lt;h2&gt;Hello World! This is my first CGI program&lt;/h2&gt;\\n\";\n   cout &lt;&lt; \"&lt;/body&gt;\\n\";\n   cout &lt;&lt; \"&lt;/html&gt;\\n\";\n   \n   return 0;\n}\n</pre>\n<p>Compile above code and name the executable  as cplusplus.cgi. This file is being kept in /var/www/cgi-bin directory and it has following content. Before running your CGI program make sure you have change mode of file using <b>chmod 755 cplusplus.cgi</b> UNIX command to make file executable.</p>\n<h2>My First CGI program</h2>\n<p>The above C++ program is a simple program which is writing its output on STDOUT file i.e. screen. There is one important and extra feature available which is first line printing <b>Content-type:text/html\\r\\n\\r\\n</b>. This line is sent back to the browser and specify the content type to be displayed on the browser screen. Now you must have understood the basic concept of CGI and you can write many complicated CGI programs using Python. A C++ CGI program can interact with any other external system, such as RDBMS, to exchange information.</p>\n<h2>HTTP Header</h2>\n<p>The line <b>Content-type:text/html\\r\\n\\r\\n</b> is a part of HTTP header, which is sent to the browser to understand the content. All the HTTP header will be in the following form \u2212</p>\n<pre class=\"result notranslate\">\nHTTP Field Name: Field Content\n \nFor Example\nContent-type: text/html\\r\\n\\r\\n\n</pre>\n<p>There are few other important HTTP headers, which you will use frequently in your CGI Programming.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Header &amp; Description</th></tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>Content-type:</b></p>\n<p>A MIME string defining the format of the file being returned. Example is Content-type:text/html.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>Expires: Date</b></p>\n<p>The date the information becomes invalid. This should be used by the browser to decide when a page needs to be refreshed. A valid date string should be in the format 01 Jan 1998 12:00:00 GMT.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>Location: URL</b></p>\n<p>The URL that should be returned instead of the URL requested. You can use this filed to redirect a request to any file.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>Last-modified: Date</b></p>\n<p>The date of last modification of the resource.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>Content-length: N</b></p>\n<p>The length, in bytes, of the data being returned. The browser uses this value to report the estimated download time for a file.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><p><b>Set-Cookie: String</b></p>\n<p>Set the cookie passed through the <i>string</i>.</p></td>\n</tr>\n</table>\n<h2>CGI Environment Variables</h2>\n<p>All the CGI program will have access to the following environment variables. These variables play an important role while writing any CGI program.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th>Sr.No</th>\n<th style=\"text-align:center;\">Variable Name &amp; Description</th>\n</tr>\n<tr>\n<td class=\"ts\">1</td>\n<td><p><b>CONTENT_TYPE</b></p>\n<p>The data type of the content, used when the client is sending attached content to the server. For example file upload etc.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">2</td>\n<td><p><b>CONTENT_LENGTH</b></p>\n<p>The length of the query information that is available only for POST requests.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">3</td>\n<td><p><b>HTTP_COOKIE</b></p>\n<p>Returns the set cookies in the form of key &amp; value pair.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">4</td>\n<td><p><b>HTTP_USER_AGENT</b></p>\n<p>The User-Agent request-header field contains information about the user agent originating the request. It is a name of the web browser.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">5</td>\n<td><p><b>PATH_INFO</b></p>\n<p>The path for the CGI script.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">6</td>\n<td><p><b>QUERY_STRING</b></p>\n<p>The URL-encoded information that is sent with GET method request.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">7</td>\n<td><p><b>REMOTE_ADDR</b></p>\n<p>The IP address of the remote host making the request. This can be useful for logging or for authentication purpose.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">8</td>\n<td><p><b>REMOTE_HOST</b></p>\n<p>The fully qualified name of the host making the request. If this information is not available then REMOTE_ADDR can be used to get IR address.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">9</td>\n<td><p><b>REQUEST_METHOD</b></p>\n<p>The method used to make the request. The most common methods are GET and POST.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">10</td>\n<td><p><b>SCRIPT_FILENAME</b></p>\n<p>The full path to the CGI script.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">11</td>\n<td><p><b>SCRIPT_NAME</b></p>\n<p>The name of the CGI script.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">12</td>\n<td><p><b>SERVER_NAME</b></p>\n<p>The server's hostname or IP Address.</p></td>\n</tr>\n<tr>\n<td class=\"ts\">13</td>\n<td><p><b>SERVER_SOFTWARE</b></p>\n<p>The name and version of the software the server is running.</p></td>\n</tr>\n</table>\n<p>Here is small CGI program to list out all the CGI variables.</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;stdlib.h&gt;\nusing namespace std;\n\nconst string ENV[ 24 ] = {\n   \"COMSPEC\", \"DOCUMENT_ROOT\", \"GATEWAY_INTERFACE\",   \n   \"HTTP_ACCEPT\", \"HTTP_ACCEPT_ENCODING\",             \n   \"HTTP_ACCEPT_LANGUAGE\", \"HTTP_CONNECTION\",         \n   \"HTTP_HOST\", \"HTTP_USER_AGENT\", \"PATH\",            \n   \"QUERY_STRING\", \"REMOTE_ADDR\", \"REMOTE_PORT\",      \n   \"REQUEST_METHOD\", \"REQUEST_URI\", \"SCRIPT_FILENAME\",\n   \"SCRIPT_NAME\", \"SERVER_ADDR\", \"SERVER_ADMIN\",      \n   \"SERVER_NAME\",\"SERVER_PORT\",\"SERVER_PROTOCOL\",     \n   \"SERVER_SIGNATURE\",\"SERVER_SOFTWARE\" };   \n\nint main () {\n   cout &lt;&lt; \"Content-type:text/html\\r\\n\\r\\n\";\n   cout &lt;&lt; \"&lt;html&gt;\\n\";\n   cout &lt;&lt; \"&lt;head&gt;\\n\";\n   cout &lt;&lt; \"&lt;title&gt;CGI Environment Variables&lt;/title&gt;\\n\";\n   cout &lt;&lt; \"&lt;/head&gt;\\n\";\n   cout &lt;&lt; \"&lt;body&gt;\\n\";\n   cout &lt;&lt; \"&lt;table border = \\\"0\\\" cellspacing = \\\"2\\\"&gt;\";\n\n   for ( int i = 0; i &lt; 24; i++ ) {\n      cout &lt;&lt; \"&lt;tr&gt;&lt;td&gt;\" &lt;&lt; ENV[ i ] &lt;&lt; \"&lt;/td&gt;&lt;td&gt;\";\n      \n      // attempt to retrieve value of environment variable\n      char *value = getenv( ENV[ i ].c_str() );  \n      if ( value != 0 ) {\n         cout &lt;&lt; value;                                 \n      } else {\n         cout &lt;&lt; \"Environment variable does not exist.\";\n      }\n      cout &lt;&lt; \"&lt;/td&gt;&lt;/tr&gt;\\n\";\n   }\n   \n   cout &lt;&lt; \"&lt;/table&gt;&lt;\\n\";\n   cout &lt;&lt; \"&lt;/body&gt;\\n\";\n   cout &lt;&lt; \"&lt;/html&gt;\\n\";\n   \n   return 0;\n}\n</pre>\n<h2>C++ CGI Library</h2>\n<p>For real examples, you would need to do many operations by your CGI program. There is a CGI library written for C++ program which you can download from <a href=\"ftp://ftp.gnu.org/gnu/cgicc/\" rel=\"nofollow\" target=\"_blank\">ftp://ftp.gnu.org/gnu/cgicc/</a> and follow the steps to install the library \u2212</p>\n<pre class=\"result notranslate\">\n$tar xzf cgicc-X.X.X.tar.gz \n$cd cgicc-X.X.X/ \n$./configure --prefix=/usr \n$make\n$make install\n</pre>\n<p>You can check related documentation available at <a href=\"https://www.gnu.org/software/cgicc/doc/index.html\" rel=\"nofollow\" target=\"_blank\">\u2018C++ CGI Lib Documentation</a>.</p>\n<h2>GET and POST Methods</h2>\n<p>You must have come across many situations when you need to pass some information from your browser to web server and ultimately to your CGI Program. Most frequently browser uses two methods to pass this information to web server. These methods are GET Method and POST Method.</p>\n<h2>Passing Information Using GET Method</h2>\n<p>The GET method sends the encoded user information appended to the page request. The page and the encoded information are separated by the ? character as follows \u2212</p>\n<pre class=\"result notranslate\">\nhttp://www.test.com/cgi-bin/cpp.cgi?key1=value1&amp;key2=value2\n</pre>\n<p>The GET method is the default  method to pass information from browser to web server and it produces a long string that appears in your browser's Location:box. Never use the GET method if you have password or other sensitive information to pass to the server. The GET method has size limitation  and you can pass upto 1024 characters in a request string.</p>\n<p>When using GET method, information is passed using QUERY_STRING http header and will be accessible in your CGI Program through QUERY_STRING environment variable.</p>\n<p>You can pass information by simply concatenating key and value pairs alongwith any URL or you can use HTML &lt;FORM&gt; tags to pass information using GET method.</p>\n<h2>Simple URL Example: Get Method</h2>\n<p>Here is a simple URL which will pass two values to hello_get.py program using GET method.</p>\n<a href=\"/cgi-bin/cpp_get.cgi?first_name=ZARA&amp;last_name=ALI\" style=\"text-decoration:none;\" target=\"_blank\">/cgi-bin/cpp_get.cgi?first_name=ZARA&amp;last_name=ALI</a>\n<p>Below is a program to generate <b>cpp_get.cgi</b> CGI program to handle input given by web browser. We are going to use C++ CGI library which makes it very easy to access passed information \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;vector&gt;  \n#include &lt;string&gt;  \n#include &lt;stdio.h&gt;  \n#include &lt;stdlib.h&gt; \n\n#include &lt;cgicc/CgiDefs.h&gt; \n#include &lt;cgicc/Cgicc.h&gt; \n#include &lt;cgicc/HTTPHTMLHeader.h&gt; \n#include &lt;cgicc/HTMLClasses.h&gt;  \n\nusing namespace std;\nusing namespace cgicc;\n\nint main () {\n   Cgicc formData;\n   \n   cout &lt;&lt; \"Content-type:text/html\\r\\n\\r\\n\";\n   cout &lt;&lt; \"&lt;html&gt;\\n\";\n   cout &lt;&lt; \"&lt;head&gt;\\n\";\n   cout &lt;&lt; \"&lt;title&gt;Using GET and POST Methods&lt;/title&gt;\\n\";\n   cout &lt;&lt; \"&lt;/head&gt;\\n\";\n   cout &lt;&lt; \"&lt;body&gt;\\n\";\n\n   form_iterator fi = formData.getElement(\"first_name\");  \n   if( !fi-&gt;isEmpty() &amp;&amp; fi != (*formData).end()) {  \n      cout &lt;&lt; \"First name: \" &lt;&lt; **fi &lt;&lt; endl;  \n   } else {\n      cout &lt;&lt; \"No text entered for first name\" &lt;&lt; endl;  \n   }\n   \n   cout &lt;&lt; \"&lt;br/&gt;\\n\";\n   fi = formData.getElement(\"last_name\");  \n   if( !fi-&gt;isEmpty() &amp;&amp;fi != (*formData).end()) {  \n      cout &lt;&lt; \"Last name: \" &lt;&lt; **fi &lt;&lt; endl;  \n   } else {\n      cout &lt;&lt; \"No text entered for last name\" &lt;&lt; endl;  \n   }\n   \n   cout &lt;&lt; \"&lt;br/&gt;\\n\";\n   cout &lt;&lt; \"&lt;/body&gt;\\n\";\n   cout &lt;&lt; \"&lt;/html&gt;\\n\";\n   \n   return 0;\n}\n</pre>\n<p>Now, compile the above program as follows \u2212</p>\n<pre class=\"result notranslate\">\n$g++ -o cpp_get.cgi cpp_get.cpp -lcgicc\n</pre>\n<p>Generate cpp_get.cgi and put it in your CGI directory and try to access using following link \u2212</p>\n<a href=\"/cgi-bin/cpp_get.cgi?first_name=ZARA&amp;last_name=ALI\" style=\"text-decoration:none;\" target=\"_blank\">/cgi-bin/cpp_get.cgi?first_name=ZARA&amp;last_name=ALI</a>\n<p>This would generate following result \u2212</p>\n<pre class=\"result notranslate\">\nFirst name: ZARA \nLast name: ALI \n</pre>\n<h2>Simple FORM Example: GET Method</h2>\n<p>Here is a simple example which passes two values using HTML FORM and submit button. We are going to use same CGI script cpp_get.cgi to handle this input.</p>\n<pre class=\"prettyprint notranslate\">\n&lt;form action = \"/cgi-bin/cpp_get.cgi\" method = \"get\"&gt;\n   First Name: &lt;input type = \"text\" name = \"first_name\"&gt;  &lt;br /&gt;\n \n   Last Name: &lt;input type = \"text\" name = \"last_name\" /&gt;\n   &lt;input type = \"submit\" value = \"Submit\" /&gt;\n&lt;/form&gt;\n</pre>\n<p>Here is the actual output of the above form. You enter First and Last Name and\nthen click submit button to see the result.</p>\n<form action=\"/cgi-bin/cpp_get.cgi\" method=\"get\" target=\"_blank\">\nFirst Name: <input name=\"first_name\" type=\"text\">\n \nLast Name: <input name=\"last_name\" type=\"text\"/>\n<input type=\"submit\" value=\"Submit\"/>\n</input></form>\n<h2>Passing Information Using POST Method</h2>\n<p>A generally more reliable method  of passing information to a CGI program is the POST method. This packages the information in exactly the same way as GET methods, but instead of sending it as a text string after a ? in the URL it sends it as a separate message. This message comes into the CGI script in the form of the standard input.</p>\n<p>The same cpp_get.cgi program will handle POST method as well. Let us take same example as above, which passes two values using HTML FORM and submit button but this time with POST method as follows \u2212</p>\n<pre class=\"prettyprint notranslate\">\n&lt;form action = \"/cgi-bin/cpp_get.cgi\" method = \"post\"&gt;\n   First Name: &lt;input type = \"text\" name = \"first_name\"&gt;&lt;br /&gt;\n   Last Name: &lt;input type = \"text\" name = \"last_name\" /&gt;\n \n   &lt;input type = \"submit\" value = \"Submit\" /&gt;\n&lt;/form&gt;\n</pre>\n<p>Here is the actual output of the above form. You enter First and Last Name and\nthen click submit button to see the result.</p>\n<form action=\"/cgi-bin/cpp_get.cgi\" method=\"post\" target=\"_blank\">\nFirst Name: <input name=\"first_name\" type=\"text\"/>\n \nLast Name: <input name=\"last_name\" type=\"text\"/>\n<input type=\"submit\" value=\"Submit\"/>\n</form>\n<h2>Passing Checkbox Data to CGI Program</h2>\n<p>Checkboxes are used when more than one option is required to be selected.</p>\n<p>Here is example HTML code for a form with two checkboxes \u2212</p>\n<pre class=\"prettyprint notranslate\">\n&lt;form action = \"/cgi-bin/cpp_checkbox.cgi\" method = \"POST\" target = \"_blank\"&gt;\n   &lt;input type = \"checkbox\" name = \"maths\" value = \"on\" /&gt; Maths\n   &lt;input type = \"checkbox\" name = \"physics\" value = \"on\" /&gt; Physics\n   &lt;input type = \"submit\" value = \"Select Subject\" /&gt;\n&lt;/form&gt;\n</pre>\n<p> The result of this code is the following form \u2212</p>\n<form action=\"/cgi-bin/cpp_checkbox.cgi\" method=\"post\" target=\"_blank\">\n<input name=\"maths\" type=\"checkbox\" value=\"on\"/> Maths\n<input name=\"physics\" type=\"checkbox\" value=\"on\"/> Physics\n<input type=\"submit\" value=\"Select Subject\"/>\n</form>\n<p>Below is C++ program, which will generate cpp_checkbox.cgi script to handle input given by web browser through checkbox button.</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;vector&gt;  \n#include &lt;string&gt;  \n#include &lt;stdio.h&gt;  \n#include &lt;stdlib.h&gt; \n\n#include &lt;cgicc/CgiDefs.h&gt; \n#include &lt;cgicc/Cgicc.h&gt; \n#include &lt;cgicc/HTTPHTMLHeader.h&gt; \n#include &lt;cgicc/HTMLClasses.h&gt; \n\nusing namespace std;\nusing namespace cgicc;\n\nint main () {\n   Cgicc formData;\n   bool maths_flag, physics_flag;\n\n   cout &lt;&lt; \"Content-type:text/html\\r\\n\\r\\n\";\n   cout &lt;&lt; \"&lt;html&gt;\\n\";\n   cout &lt;&lt; \"&lt;head&gt;\\n\";\n   cout &lt;&lt; \"&lt;title&gt;Checkbox Data to CGI&lt;/title&gt;\\n\";\n   cout &lt;&lt; \"&lt;/head&gt;\\n\";\n   cout &lt;&lt; \"&lt;body&gt;\\n\";\n\n   maths_flag = formData.queryCheckbox(\"maths\");\n   if( maths_flag ) {  \n      cout &lt;&lt; \"Maths Flag: ON \" &lt;&lt; endl;  \n   } else {\n      cout &lt;&lt; \"Maths Flag: OFF \" &lt;&lt; endl;  \n   }\n   cout &lt;&lt; \"&lt;br/&gt;\\n\";\n\n   physics_flag = formData.queryCheckbox(\"physics\");\n   if( physics_flag ) {  \n      cout &lt;&lt; \"Physics Flag: ON \" &lt;&lt; endl;  \n   } else {\n      cout &lt;&lt; \"Physics Flag: OFF \" &lt;&lt; endl;  \n   }\n   \n   cout &lt;&lt; \"&lt;br/&gt;\\n\";\n   cout &lt;&lt; \"&lt;/body&gt;\\n\";\n   cout &lt;&lt; \"&lt;/html&gt;\\n\";\n   \n   return 0;\n}\n</pre>\n<h2>Passing Radio Button Data to CGI Program</h2>\n<p>Radio Buttons are used when only one option is required to be selected.</p>\n<p>Here is example HTML code for a form with two radio button \u2212</p>\n<pre class=\"prettyprint notranslate\">\n&lt;form action = \"/cgi-bin/cpp_radiobutton.cgi\" method = \"post\" target = \"_blank\"&gt;\n   &lt;input type = \"radio\" name = \"subject\" value = \"maths\" checked = \"checked\"/&gt; Maths \n   &lt;input type = \"radio\" name = \"subject\" value = \"physics\" /&gt; Physics\n   &lt;input type = \"submit\" value = \"Select Subject\" /&gt;\n&lt;/form&gt;\n</pre>\n<p>The result of this code is the following form \u2212</p>\n<form action=\"/cgi-bin/cpp_radiobutton.cgi\" method=\"post\" target=\"_blank\">\n<input checked=\"checked\" name=\"subject\" type=\"radio\" value=\"Maths\"/> Maths\n<input name=\"subject\" type=\"radio\" value=\"Physics\"/> Physics\n<input type=\"submit\" value=\"Select Subject\"/>\n</form>\n<p>Below is C++ program, which will generate cpp_radiobutton.cgi script to handle input given by web browser through radio buttons.</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;vector&gt;  \n#include &lt;string&gt;  \n#include &lt;stdio.h&gt;  \n#include &lt;stdlib.h&gt; \n\n#include &lt;cgicc/CgiDefs.h&gt; \n#include &lt;cgicc/Cgicc.h&gt; \n#include &lt;cgicc/HTTPHTMLHeader.h&gt; \n#include &lt;cgicc/HTMLClasses.h&gt; \n\nusing namespace std;\nusing namespace cgicc;\n\nint main () {\n   Cgicc formData;\n  \n   cout &lt;&lt; \"Content-type:text/html\\r\\n\\r\\n\";\n   cout &lt;&lt; \"&lt;html&gt;\\n\";\n   cout &lt;&lt; \"&lt;head&gt;\\n\";\n   cout &lt;&lt; \"&lt;title&gt;Radio Button Data to CGI&lt;/title&gt;\\n\";\n   cout &lt;&lt; \"&lt;/head&gt;\\n\";\n   cout &lt;&lt; \"&lt;body&gt;\\n\";\n\n   form_iterator fi = formData.getElement(\"subject\");  \n   if( !fi-&gt;isEmpty() &amp;&amp; fi != (*formData).end()) {  \n      cout &lt;&lt; \"Radio box selected: \" &lt;&lt; **fi &lt;&lt; endl;  \n   }\n  \n   cout &lt;&lt; \"&lt;br/&gt;\\n\";\n   cout &lt;&lt; \"&lt;/body&gt;\\n\";\n   cout &lt;&lt; \"&lt;/html&gt;\\n\";\n   \n   return 0;\n}\n</pre>\n<h2>Passing Text Area Data to CGI Program</h2>\n<p>TEXTAREA element is used when multiline text has to be passed to the CGI Program.</p>\n<p>Here is example HTML code for a form with a TEXTAREA box \u2212</p>\n<pre class=\"prettyprint notranslate\">\n&lt;form action = \"/cgi-bin/cpp_textarea.cgi\" method = \"post\" target = \"_blank\"&gt;\n   &lt;textarea name = \"textcontent\" cols = \"40\" rows = \"4\"&gt;\n      Type your text here...\n   &lt;/textarea&gt;\n   &lt;input type = \"submit\" value = \"Submit\" /&gt;\n&lt;/form&gt;\n</pre>\n<p>The result of this code is the following form \u2212</p>\n<form action=\"/cgi-bin/cpp_textarea.cgi\" method=\"post\" target=\"_blank\">\n<textarea cols=\"40\" name=\"textcontent\" rows=\"4\">Type your text here...</textarea>\n<input type=\"submit\" value=\"Submit\"/>\n</form>\n<p>Below is C++ program, which will generate cpp_textarea.cgi script to handle input given by web browser through text area.</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;vector&gt;  \n#include &lt;string&gt;  \n#include &lt;stdio.h&gt;  \n#include &lt;stdlib.h&gt; \n\n#include &lt;cgicc/CgiDefs.h&gt; \n#include &lt;cgicc/Cgicc.h&gt; \n#include &lt;cgicc/HTTPHTMLHeader.h&gt; \n#include &lt;cgicc/HTMLClasses.h&gt; \n\nusing namespace std;\nusing namespace cgicc;\n\nint main () {\n   Cgicc formData;\n  \n   cout &lt;&lt; \"Content-type:text/html\\r\\n\\r\\n\";\n   cout &lt;&lt; \"&lt;html&gt;\\n\";\n   cout &lt;&lt; \"&lt;head&gt;\\n\";\n   cout &lt;&lt; \"&lt;title&gt;Text Area Data to CGI&lt;/title&gt;\\n\";\n   cout &lt;&lt; \"&lt;/head&gt;\\n\";\n   cout &lt;&lt; \"&lt;body&gt;\\n\";\n\n   form_iterator fi = formData.getElement(\"textcontent\");  \n   if( !fi-&gt;isEmpty() &amp;&amp; fi != (*formData).end()) {  \n      cout &lt;&lt; \"Text Content: \" &lt;&lt; **fi &lt;&lt; endl;  \n   } else {\n      cout &lt;&lt; \"No text entered\" &lt;&lt; endl;  \n   }\n  \n   cout &lt;&lt; \"&lt;br/&gt;\\n\";\n   cout &lt;&lt; \"&lt;/body&gt;\\n\";\n   cout &lt;&lt; \"&lt;/html&gt;\\n\";\n   \n   return 0;\n}\n</pre>\n<h2>Passing Drop down Box Data to CGI Program</h2>\n<p>Drop down Box is used when we have many options available but only one or two will be selected.</p>\n<p>Here is example HTML code for a form with one drop down box \u2212</p>\n<pre class=\"prettyprint notranslate\">\n&lt;form action = \"/cgi-bin/cpp_dropdown.cgi\" method = \"post\" target = \"_blank\"&gt;\n   &lt;select name = \"dropdown\"&gt;\n      &lt;option value = \"Maths\" selected&gt;Maths&lt;/option&gt;\n      &lt;option value = \"Physics\"&gt;Physics&lt;/option&gt;\n   &lt;/select&gt;\n   \n   &lt;input type = \"submit\" value = \"Submit\"/&gt;\n&lt;/form&gt;\n</pre>\n<p> The result of this code is the following form \u2212</p>\n<form action=\"/cgi-bin/cpp_dropdown.cgi\" method=\"post\" target=\"_blank\">\n<select name=\"dropdown\">\n<option selected=\"selected\" value=\"Maths\">Maths</option>\n<option value=\"Physics\">Physics</option>\n</select>\n<input type=\"submit\" value=\"Submit\"/>\n</form>\n<p>Below is C++ program, which will generate cpp_dropdown.cgi script to handle input given by web browser through drop down box.</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;vector&gt;  \n#include &lt;string&gt;  \n#include &lt;stdio.h&gt;  \n#include &lt;stdlib.h&gt; \n\n#include &lt;cgicc/CgiDefs.h&gt; \n#include &lt;cgicc/Cgicc.h&gt; \n#include &lt;cgicc/HTTPHTMLHeader.h&gt; \n#include &lt;cgicc/HTMLClasses.h&gt; \n\nusing namespace std;\nusing namespace cgicc;\n\nint main () {\n   Cgicc formData;\n  \n   cout &lt;&lt; \"Content-type:text/html\\r\\n\\r\\n\";\n   cout &lt;&lt; \"&lt;html&gt;\\n\";\n   cout &lt;&lt; \"&lt;head&gt;\\n\";\n   cout &lt;&lt; \"&lt;title&gt;Drop Down Box Data to CGI&lt;/title&gt;\\n\";\n   cout &lt;&lt; \"&lt;/head&gt;\\n\";\n   cout &lt;&lt; \"&lt;body&gt;\\n\";\n\n   form_iterator fi = formData.getElement(\"dropdown\");  \n   if( !fi-&gt;isEmpty() &amp;&amp; fi != (*formData).end()) {  \n      cout &lt;&lt; \"Value Selected: \" &lt;&lt; **fi &lt;&lt; endl;  \n   }\n  \n   cout &lt;&lt; \"&lt;br/&gt;\\n\";\n   cout &lt;&lt; \"&lt;/body&gt;\\n\";\n   cout &lt;&lt; \"&lt;/html&gt;\\n\";\n   \n   return 0;\n}\n</pre>\n<h2>Using Cookies in CGI</h2>\n<p>HTTP protocol is a stateless protocol. But for a commercial website it is required to maintain session information  among different pages. For example one user registration ends after completing many pages. But how to maintain user's session information across all the web pages.</p>\n<p>In many situations, using cookies is the most efficient method of remembering and tracking preferences, purchases, commissions, and other information required for better visitor experience or site statistics.</p>\n<h2>How It Works</h2>\n<p>Your server sends some data to the visitor's browser in the form of a cookie. The browser may accept the cookie. If it does, it is stored as a plain text record on the visitor's hard drive. Now, when the visitor arrives at another page on your site, the cookie is available for retrieval. Once retrieved, your server knows/remembers what was stored.</p>\n<p>Cookies are a plain text data record of 5 variable-length fields \u2212</p>\n<ul class=\"list\">\n<li><p><b>Expires</b> \u2212 This shows date the cookie will expire. If this is blank, the cookie will expire when the visitor quits the browser.</p></li>\n<li><p><b>Domain</b> \u2212 This shows domain name of your site.</p></li>\n<li><p><b>Path</b> \u2212 This shows path to the directory or web page that set the cookie. This may be blank if you want to retrieve the cookie from any directory or page.</p></li>\n<li><p><b>Secure</b> \u2212 If this field contains the word \"secure\" then the cookie may only be retrieved with a secure server. If this field is blank, no such restriction exists.</p></li>\n<li><p><b>Name = Value</b> \u2212 Cookies are set and retrieved  in the form of key and value pairs.</p></li>\n</ul>\n<h2>Setting up Cookies</h2>\n<p>It is very easy to send cookies to browser. These cookies will be sent along with HTTP Header before the Content-type filed. Assuming you want to set UserID and Password as cookies. So cookies setting will be done as follows</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main () {\n   cout &lt;&lt; \"Set-Cookie:UserID = XYZ;\\r\\n\";\n   cout &lt;&lt; \"Set-Cookie:Password = XYZ123;\\r\\n\";\n   cout &lt;&lt; \"Set-Cookie:Domain = www.tutorialspoint.com;\\r\\n\";\n   cout &lt;&lt; \"Set-Cookie:Path = /perl;\\n\";\n   cout &lt;&lt; \"Content-type:text/html\\r\\n\\r\\n\";\n\n   cout &lt;&lt; \"&lt;html&gt;\\n\";\n   cout &lt;&lt; \"&lt;head&gt;\\n\";\n   cout &lt;&lt; \"&lt;title&gt;Cookies in CGI&lt;/title&gt;\\n\";\n   cout &lt;&lt; \"&lt;/head&gt;\\n\";\n   cout &lt;&lt; \"&lt;body&gt;\\n\";\n\n   cout &lt;&lt; \"Setting cookies\" &lt;&lt; endl;  \n  \n   cout &lt;&lt; \"&lt;br/&gt;\\n\";\n   cout &lt;&lt; \"&lt;/body&gt;\\n\";\n   cout &lt;&lt; \"&lt;/html&gt;\\n\";\n   \n   return 0;\n}\n</pre>\n<p>From this example, you must have understood how to set cookies. We use <b>Set-Cookie</b> HTTP header to set cookies.</p>\n<p>Here, it is optional to set cookies attributes like Expires, Domain, and Path. It is notable that cookies are set before sending magic line <b>\"Content-type:text/html\\r\\n\\r\\n</b>.</p>\n<p>Compile above program to produce setcookies.cgi, and try to set cookies using following link. It will set four cookies at your computer \u2212</p>\n<p><a href=\"/cgi-bin/setcookies.cgi\" style=\"text-decoration:none;\" target=\"_blank\">/cgi-bin/setcookies.cgi</a></p>\n<h2>Retrieving Cookies</h2>\n<p>It is easy to retrieve all the set cookies. Cookies are stored in CGI environment variable HTTP_COOKIE and they will have following form.</p>\n<pre class=\"result notranslate\">\nkey1 = value1; key2 = value2; key3 = value3....\n</pre>\n<p>Here is an example of how to retrieve cookies.</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;vector&gt;  \n#include &lt;string&gt;  \n#include &lt;stdio.h&gt;  \n#include &lt;stdlib.h&gt; \n\n#include &lt;cgicc/CgiDefs.h&gt; \n#include &lt;cgicc/Cgicc.h&gt; \n#include &lt;cgicc/HTTPHTMLHeader.h&gt; \n#include &lt;cgicc/HTMLClasses.h&gt;\n\nusing namespace std;\nusing namespace cgicc;\n\nint main () {\n   Cgicc cgi;\n   const_cookie_iterator cci;\n\n   cout &lt;&lt; \"Content-type:text/html\\r\\n\\r\\n\";\n   cout &lt;&lt; \"&lt;html&gt;\\n\";\n   cout &lt;&lt; \"&lt;head&gt;\\n\";\n   cout &lt;&lt; \"&lt;title&gt;Cookies in CGI&lt;/title&gt;\\n\";\n   cout &lt;&lt; \"&lt;/head&gt;\\n\";\n   cout &lt;&lt; \"&lt;body&gt;\\n\";\n   cout &lt;&lt; \"&lt;table border = \\\"0\\\" cellspacing = \\\"2\\\"&gt;\";\n   \n   // get environment variables\n   const CgiEnvironment&amp; env = cgi.getEnvironment();\n\n   for( cci = env.getCookieList().begin();\n   cci != env.getCookieList().end(); \n   ++cci ) {\n      cout &lt;&lt; \"&lt;tr&gt;&lt;td&gt;\" &lt;&lt; cci-&gt;getName() &lt;&lt; \"&lt;/td&gt;&lt;td&gt;\";\n      cout &lt;&lt; cci-&gt;getValue();                                 \n      cout &lt;&lt; \"&lt;/td&gt;&lt;/tr&gt;\\n\";\n   }\n   \n   cout &lt;&lt; \"&lt;/table&gt;&lt;\\n\";\n   cout &lt;&lt; \"&lt;br/&gt;\\n\";\n   cout &lt;&lt; \"&lt;/body&gt;\\n\";\n   cout &lt;&lt; \"&lt;/html&gt;\\n\";\n   \n   return 0;\n}\n</pre>\n<p>Now, compile above program to produce getcookies.cgi, and try to get a list of all the cookies available at your computer \u2212</p>\n<p><a href=\"/cgi-bin/getcookies.cgi\" style=\"text-decoration:none;\" target=\"_blank\">/cgi-bin/getcookies.cgi</a></p>\n<p>This will produce a list of all the four cookies set in previous section and all other cookies set in your computer \u2212</p>\n<pre class=\"result notranslate\">\nUserID XYZ \nPassword XYZ123 \nDomain www.tutorialspoint.com \nPath /perl \n</pre>\n<h2>File Upload Example</h2>\n<p>To upload a file the HTML form must have the enctype attribute set to <b>multipart/form-data</b>. The input tag with the file type will create a \"Browse\" button.</p>\n<pre class=\"prettyprint notranslate\">\n&lt;html&gt;\n   &lt;body&gt;\n      &lt;form enctype = \"multipart/form-data\" action = \"/cgi-bin/cpp_uploadfile.cgi\"\n         method = \"post\"&gt;\n         &lt;p&gt;File: &lt;input type = \"file\" name = \"userfile\" /&gt;&lt;/p&gt;\n         &lt;p&gt;&lt;input type = \"submit\" value = \"Upload\" /&gt;&lt;/p&gt;\n      &lt;/form&gt;\n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>The result of this code is the following form \u2212</p>\n<form action=\"/cgi-bin/cpp_uploadfile.cgi\" enctype=\"multipart/form-data\" method=\"post\">\n<p>File: <input name=\"userfile\" type=\"file\"/></p>\n<p><input type=\"reset\" value=\"Upload\"/></p>\n</form>\n<p><b>Note</b> \u2212 Above example has been disabled intentionally to stop people uploading files on our server. But you can try above code with your server.</p>\n<p>Here is the script <b>cpp_uploadfile.cpp</b> to handle file upload \u2212</p>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\n#include &lt;vector&gt;  \n#include &lt;string&gt;  \n#include &lt;stdio.h&gt;  \n#include &lt;stdlib.h&gt; \n\n#include &lt;cgicc/CgiDefs.h&gt; \n#include &lt;cgicc/Cgicc.h&gt; \n#include &lt;cgicc/HTTPHTMLHeader.h&gt; \n#include &lt;cgicc/HTMLClasses.h&gt;\n\nusing namespace std;\nusing namespace cgicc;\n\nint main () {\n   Cgicc cgi;\n\n   cout &lt;&lt; \"Content-type:text/html\\r\\n\\r\\n\";\n   cout &lt;&lt; \"&lt;html&gt;\\n\";\n   cout &lt;&lt; \"&lt;head&gt;\\n\";\n   cout &lt;&lt; \"&lt;title&gt;File Upload in CGI&lt;/title&gt;\\n\";\n   cout &lt;&lt; \"&lt;/head&gt;\\n\";\n   cout &lt;&lt; \"&lt;body&gt;\\n\";\n\n   // get list of files to be uploaded\n   const_file_iterator file = cgi.getFile(\"userfile\");\n   if(file != cgi.getFiles().end()) {\n      // send data type at cout.\n      cout &lt;&lt; HTTPContentHeader(file-&gt;getDataType());\n      // write content at cout.\n      file-&gt;writeToStream(cout);\n   }\n   cout &lt;&lt; \"&lt;File uploaded successfully&gt;\\n\";\n   cout &lt;&lt; \"&lt;/body&gt;\\n\";\n   cout &lt;&lt; \"&lt;/html&gt;\\n\";\n   \n   return 0;\n}\n</pre>\n<p>The above example is for writing content at <b>cout</b> stream but you can open your file stream and save the content of uploaded file in a file at desired location.</p>\n<p>Hope you have enjoyed this tutorial. If yes, please send us your feedback.</p>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/cplusplus/cpp_questions_answers.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/cplusplus/cpp_object_oriented.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</img></div>\n</div>\n<div class=\"row\">\n<div class=\"col-md-3\" id=\"rightbar\">\n<div class=\"simple-ad\">\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.facebook.com/sharer.php?u=' + 'https://www.tutorialspoint.com/cplusplus/cpp_quick_guide.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/facebookIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://twitter.com/share?url=' + 'https://www.tutorialspoint.com/cplusplus/cpp_quick_guide.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/twitterIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'https://www.tutorialspoint.com/cplusplus/cpp_quick_guide.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/linkedinIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=https://www.tutorialspoint.com/cplusplus/cpp_quick_guide.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/googlePlusIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.stumbleupon.com/submit?url=https://www.tutorialspoint.com/cplusplus/cpp_quick_guide.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/StumbleUponIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://reddit.com/submit?url=https://www.tutorialspoint.com/cplusplus/cpp_quick_guide.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/reddit.jpg\"/>\n</a>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\ngoogle_ad_format = \"300x250_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 600;\ngoogle_ad_format = \"300x600_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"ca-pub-2537027957187252\";\n/* Right Side Ad */\ngoogle_ad_slot = \"right_side_ad\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\n//-->\n</script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"footer-copyright\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-1\">\n<a class=\"logo\" href=\"index.htm\"> <img alt=\"Tutorials Point\" class=\"img-responsive\" src=\"/scripts/img/logo-footer.png\"/> </a>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<nav id=\"sub-menu\">\n<ul>\n<li><a href=\"/about/about_privacy.htm\">Privacy Policy</a></li>\n<li><a href=\"/about/about_cookies.htm\">Cookies Policy</a></li>\n<li><a href=\"/about/contact_us.htm\">Contact</a></li>\n</ul>\n</nav>\n</div>\n<div class=\"col-md-3 col-sm-12 col-xs-12\">\n<p>\u00a9 Copyright 2019. All Rights Reserved.</p>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<div class=\"news-group\">\n<input autocomplete=\"off\" class=\"form-control-foot search\" id=\"textemail\" name=\"textemail\" onblur=\"if (this.value == '') {this.value = 'Enter email for newsletter...';}\" onfocus=\"if (this.value == 'Enter email for newsletter...') {this.value = '';}\" placeholder=\"Enter email for newsletter\" type=\"text\"/>\n<span class=\"input-group-btn\"> <button class=\"btn btn-default btn-footer\" id=\"btnemail\" onclick=\"javascript:void(0);\" type=\"submit\">go</button> </span>\n<div id=\"newsresponse\"></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"privacy-banner\">\n<div>\n<p>\n      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.\n      <a href=\"javascript:void(0)\" id=\"banner-accept\">Accept</a>\n<a href=\"/about/about_cookies.htm\" id=\"banner-learn\" target=\"_blank\">Learn more</a>\n</p>\n</div>\n</div>\n<script>\n// Banner Trigger if Not Closed\nif (!localStorage.bannerClosed) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n} else {\n  document.getElementById('privacy-banner').style.display = \"none\";\n}\ndocument.getElementById('banner-accept').addEventListener('click', function() {\n  document.getElementById('privacy-banner').style.display = \"none\";\n  localStorage.bannerClosed = 'true';\n});\nif (navigator.userAgent.match(/Opera|OPR\\//)) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n}\n</script>\n<!-- Libs -->\n<script src=\"/theme/js/custom-min.js?v=7\"></script>\n<script src=\"https://www.google-analytics.com/urchin.js\">\n</script>\n<script>\n_uacct = \"UA-232293-6\";\nurchinTracker();\n$('.pg-icon').click(function(){\n   $('.wrapLoader').show();\n});\n</script>\n\n\n\n", "url": "https://www.tutorialspoint.com/cplusplus/cpp_quick_guide.htm", "title_html": "<h1>C++ Quick Guide</h1>"}