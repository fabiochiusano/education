{"content": "\n PL/SQL - Collections \n  \n Advertisements \n \n<!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//-->\n\n\n \n  \n \n Previous Page\n \n \nNext Page \u00a0\n \n  \n  \n In this chapter, we will discuss the Collections in PL/SQL. A collection is an ordered group of elements having the same data type. Each element is identified by a unique subscript that represents its position in the collection. \n PL/SQL provides three collection types \u2212 \n \nIndex-by tables or Associative array\nNested table\nVariable-size array or Varray\n \n Oracle documentation provides the following characteristics for each type of collections \u2212 \n \n\nCollection Type\nNumber of Elements\nSubscript Type\nDense or Sparse\nWhere Created\nCan Be Object Type Attribute\n\n\nAssociative array (or index-by table)\nUnbounded\nString or integer\nEither\nOnly in PL/SQL block\nNo\n\n\nNested table\nUnbounded\nInteger\nStarts dense, can become sparse\nEither in PL/SQL block or at schema level\nYes\n\n\nVariablesize array (Varray)\nBounded\nInteger\nAlways dense\nEither in PL/SQL block or at schema level\nYes\n\n \n We have already discussed varray in the chapter 'PL/SQL arrays'. In this chapter, we will discuss the PL/SQL tables. \n Both types of PL/SQL tables, i.e., the index-by tables and the nested tables have the same structure and their rows are accessed using the subscript notation. However, these two types of tables differ in one aspect; the nested tables can be stored in a database column and the index-by tables cannot. \n Index-By Table \n An index-by table (also called an associative array) is a set of key-value pairs. Each key is unique and is used to locate the corresponding value. The key can be either an integer or a string. \n An index-by table is created using the following syntax. Here, we are creating an index-by table named table_name, the keys of which will be of the subscript_type and associated values will be of the element_type \n \nTYPE type_name IS TABLE OF element_type [NOT NULL] INDEX BY subscript_type; \n \ntable_name type_name;\n \n Example \n Following example shows how to create a table to store integer values along with names and later it prints the same list of names. \n \nDECLARE \n   TYPE salary IS TABLE OF NUMBER INDEX BY VARCHAR2(20); \n   salary_list salary; \n   name   VARCHAR2(20); \nBEGIN \n   -- adding elements to the table \n   salary_list('Rajnish') := 62000; \n   salary_list('Minakshi') := 75000; \n   salary_list('Martin') := 100000; \n   salary_list('James') := 78000;  \n   \n   -- printing the table \n   name := salary_list.FIRST; \n   WHILE name IS NOT null LOOP \n      dbms_output.put_line \n      ('Salary of ' || name || ' is ' || TO_CHAR(salary_list(name))); \n      name := salary_list.NEXT(name); \n   END LOOP; \nEND; \n/\n \n When the above code is executed at the SQL prompt, it produces the following result \u2212 \n \nSalary of James is 78000 \nSalary of Martin is 100000 \nSalary of Minakshi is 75000 \nSalary of Rajnish is 62000  \n\nPL/SQL procedure successfully completed.\n \n Example \n Elements of an index-by table could also be a %ROWTYPE of any database table or %TYPE of any database table field. The following example illustrates the concept. We will use the CUSTOMERS table stored in our database as \u2212 \n \nSelect * from customers;  \n\n+----+----------+-----+-----------+----------+ \n| ID | NAME     | AGE | ADDRESS   | SALARY   | \n+----+----------+-----+-----------+----------+ \n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 | \n|  2 | Khilan   |  25 | Delhi     |  1500.00 | \n|  3 | kaushik  |  23 | Kota      |  2000.00 | \n|  4 | Chaitali |  25 | Mumbai    |  6500.00 | \n|  5 | Hardik   |  27 | Bhopal    |  8500.00 | \n|  6 | Komal    |  22 | MP        |  4500.00 | \n+----+----------+-----+-----------+----------+  \n \n  \n \nDECLARE \n   CURSOR c_customers is \n      select name from customers; \n\n   TYPE c_list IS TABLE of customers.Name%type INDEX BY binary_integer; \n   name_list c_list; \n   counter integer :=0; \nBEGIN \n   FOR n IN c_customers LOOP \n      counter := counter +1; \n      name_list(counter) := n.name; \n      dbms_output.put_line('Customer('||counter||'):'||name_lis t(counter)); \n   END LOOP; \nEND; \n/ \n \n When the above code is executed at the SQL prompt, it produces the following result \u2212 \n \nCustomer(1): Ramesh  \nCustomer(2): Khilan  \nCustomer(3): kaushik     \nCustomer(4): Chaitali  \nCustomer(5): Hardik  \nCustomer(6): Komal  \n\nPL/SQL procedure successfully completed\n \n Nested Tables \n A nested table is like a one-dimensional array with an arbitrary number of elements. However, a nested table differs from an array in the following aspects \u2212 \n \nAn array has a declared number of elements, but a nested table does not. The size of a nested table can increase dynamically.\nAn array is always dense, i.e., it always has consecutive subscripts. A nested array is dense initially, but it can become sparse when elements are deleted from it.\n \n A nested table is created using the following syntax \u2212 \n \nTYPE type_name IS TABLE OF element_type [NOT NULL]; \n \ntable_name type_name; \n \n This declaration is similar to the declaration of an index-by table, but there is no INDEX BY clause. \n A nested table can be stored in a database column. It can further be used for simplifying SQL operations where you join a single-column table with a larger table. An associative array cannot be stored in the database. \n Example \n The following examples illustrate the use of nested table \u2212 \n \nDECLARE \n   TYPE names_table IS TABLE OF VARCHAR2(10); \n   TYPE grades IS TABLE OF INTEGER;  \n   names names_table; \n   marks grades; \n   total integer; \nBEGIN \n   names := names_table('Kavita', 'Pritam', 'Ayan', 'Rishav', 'Aziz'); \n   marks:= grades(98, 97, 78, 87, 92); \n   total := names.count; \n   dbms_output.put_line('Total '|| total || ' Students'); \n   FOR i IN 1 .. total LOOP \n      dbms_output.put_line('Student:'||names(i)||', Marks:' || marks(i)); \n   end loop; \nEND; \n/  \n \n When the above code is executed at the SQL prompt, it produces the following result \u2212 \n \nTotal 5 Students \nStudent:Kavita, Marks:98 \nStudent:Pritam, Marks:97 \nStudent:Ayan, Marks:78 \nStudent:Rishav, Marks:87 \nStudent:Aziz, Marks:92  \n\nPL/SQL procedure successfully completed. \n \n Example \n Elements of a nested table can also be a %ROWTYPE of any database table or %TYPE of any database table field. The following example illustrates the concept. We will use the CUSTOMERS table stored in our database as \u2212 \n \nSelect * from customers;  \n\n+----+----------+-----+-----------+----------+ \n| ID | NAME     | AGE | ADDRESS   | SALARY   | \n+----+----------+-----+-----------+----------+ \n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 | \n|  2 | Khilan   |  25 | Delhi     |  1500.00 | \n|  3 | kaushik  |  23 | Kota      |  2000.00 | \n|  4 | Chaitali |  25 | Mumbai    |  6500.00 | \n|  5 | Hardik   |  27 | Bhopal    |  8500.00 | \n|  6 | Komal    |  22 | MP        |  4500.00 | \n+----+----------+-----+-----------+----------+ \n \n  \n \nDECLARE \n   CURSOR c_customers is  \n      SELECT  name FROM customers;  \n   TYPE c_list IS TABLE of customerS.No.ame%type; \n   name_list c_list := c_list(); \n   counter integer :=0; \nBEGIN \n   FOR n IN c_customers LOOP \n      counter := counter +1; \n      name_list.extend; \n      name_list(counter)  := n.name; \n      dbms_output.put_line('Customer('||counter||'):'||name_list(counter)); \n   END LOOP; \nEND; \n/ \n \n When the above code is executed at the SQL prompt, it produces the following result \u2212 \n \nCustomer(1): Ramesh  \nCustomer(2): Khilan  \nCustomer(3): kaushik     \nCustomer(4): Chaitali  \nCustomer(5): Hardik  \nCustomer(6): Komal  \n\nPL/SQL procedure successfully completed. \n \n Collection Methods \n PL/SQL provides the built-in collection methods that make collections easier to use. The following table lists the methods and their purpose \u2212 \n \n\nS.No\nMethod Name & Purpose\n\n\n1\nEXISTS(n)\nReturns TRUE if the nth element in a collection exists; otherwise returns FALSE.\n\n\n2\nCOUNT\nReturns the number of elements that a collection currently contains.\n\n\n3\nLIMIT\nChecks the maximum size of a collection.\n\n\n4\nFIRST\nReturns the first (smallest) index numbers in a collection that uses the integer subscripts.\n\n\n5\nLAST\nReturns the last (largest) index numbers in a collection that uses the integer subscripts.\n\n\n6\nPRIOR(n)\nReturns the index number that precedes index n in a collection.\n\n\n7\nNEXT(n)\nReturns the index number that succeeds index n.\n\n\n8\nEXTEND\nAppends one null element to a collection.\n\n\n9\nEXTEND(n)\nAppends n null elements to a collection.\n\n\n10\nEXTEND(n,i)\nAppends n copies of the ith element to a collection.\n\n\n11\nTRIM\nRemoves one element from the end of a collection.\n\n\n12\nTRIM(n)\nRemoves n elements from the end of a collection.\n\n\n13\nDELETE\nRemoves all elements from a collection, setting COUNT to 0.\n\n\n14\nDELETE(n)\nRemoves the nth element from an associative array with a numeric key or a nested table. If the associative array has a string key, the element corresponding to the key value is deleted. If n is null, DELETE(n) does nothing.\n\n\n15\nDELETE(m,n)\nRemoves all elements in the range m..n from an associative array or nested table. If m is larger than n or if m or n is null, DELETE(m,n) does nothing.\n\n \n Collection Exceptions \n The following table provides the collection exceptions and when they are raised \u2212 \n \n\nCollection Exception\nRaised in Situations\n\n\nCOLLECTION_IS_NULL\nYou try to operate on an atomically null collection.\n\n\nNO_DATA_FOUND\nA subscript designates an element that was deleted, or a nonexistent element of an associative array.\n\n\nSUBSCRIPT_BEYOND_COUNT\nA subscript exceeds the number of elements in a collection.\n\n\nSUBSCRIPT_OUTSIDE_LIMIT\nA subscript is outside the allowed range.\n\n\nVALUE_ERROR\nA subscript is null or not convertible to the key type. This exception might occur if the key is defined as a PLS_INTEGER range, and the subscript is outside this range.\n\n \n  \n \n Previous Page\n \n \n Print\n \n \nNext Page \u00a0\n \n  \n  PRINTING ENDS HERE  \n \nAdvertisements\n<!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//-->\n\n\n \n", "title": "PL/SQL - Collections", "content_html": "<div class=\"col-md-7 middle-col\">\n<h1>PL/SQL - Collections</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/plsql/plsql_packages.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/plsql/plsql_transactions.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>In this chapter, we will discuss the Collections in PL/SQL. A collection is an ordered group of elements having the same data type. Each element is identified by a unique subscript that represents its position in the collection.</p>\n<p>PL/SQL provides three collection types \u2212</p>\n<ul class=\"list\">\n<li>Index-by tables or Associative array</li>\n<li>Nested table</li>\n<li>Variable-size array or Varray</li>\n</ul>\n<p>Oracle documentation provides the following characteristics for each type of collections \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center; vertical-align:middle;\">Collection Type</th>\n<th style=\"text-align:center; vertical-align:middle;\">Number of Elements</th>\n<th style=\"text-align:center; vertical-align:middle;\">Subscript Type</th>\n<th style=\"text-align:center; vertical-align:middle;\">Dense or Sparse</th>\n<th style=\"text-align:center; vertical-align:middle;\">Where Created</th>\n<th style=\"text-align:center; vertical-align:middle;\">Can Be Object Type Attribute</th>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">Associative array (or index-by table)</td>\n<td style=\"text-align:center; vertical-align:middle;\">Unbounded</td>\n<td style=\"text-align:center; vertical-align:middle;\">String or integer</td>\n<td style=\"text-align:center; vertical-align:middle;\">Either</td>\n<td style=\"vertical-align:middle;\">Only in PL/SQL block</td>\n<td style=\"text-align:center; vertical-align:middle;\">No</td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">Nested table</td>\n<td style=\"text-align:center; vertical-align:middle;\">Unbounded</td>\n<td style=\"text-align:center; vertical-align:middle;\">Integer</td>\n<td style=\"text-align:center; vertical-align:middle;\">Starts dense, can become sparse</td>\n<td style=\"vertical-align:middle;\">Either in PL/SQL block or at schema level</td>\n<td style=\"text-align:center; vertical-align:middle;\">Yes</td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">Variablesize array (Varray)</td>\n<td style=\"text-align:center; vertical-align:middle;\">Bounded</td>\n<td style=\"text-align:center; vertical-align:middle;\">Integer</td>\n<td style=\"text-align:center; vertical-align:middle;\">Always dense</td>\n<td style=\"vertical-align:middle;\">Either in PL/SQL block or at schema level</td>\n<td style=\"text-align:center; vertical-align:middle;\">Yes</td>\n</tr>\n</table>\n<p>We have already discussed varray in the chapter <b>'PL/SQL arrays'</b>. In this chapter, we will discuss the PL/SQL tables.</p>\n<p>Both types of PL/SQL tables, i.e., the index-by tables and the nested tables have the same structure and their rows are accessed using the subscript notation. However, these two types of tables differ in one aspect; the nested tables can be stored in a database column and the index-by tables cannot.</p>\n<h2>Index-By Table</h2>\n<p>An <b>index-by</b> table (also called an <b>associative array</b>) is a set of <b>key-value</b> pairs. Each key is unique and is used to locate the corresponding value. The key can be either an integer or a string.</p>\n<p>An index-by table is created using the following syntax. Here, we are creating an <b>index-by</b> table named <b>table_name</b>, the keys of which will be of the subscript_type and associated values will be of the <i>element_type</i></p>\n<pre class=\"result notranslate\">\nTYPE type_name IS TABLE OF element_type [NOT NULL] INDEX BY subscript_type; \n \ntable_name type_name;\n</pre>\n<h3>Example</h3>\n<p>Following example shows how to create a table to store integer values along with names and later it prints the same list of names.</p>\n<pre class=\"prettyprint notranslate\">\nDECLARE \n   TYPE salary IS TABLE OF NUMBER INDEX BY VARCHAR2(20); \n   salary_list salary; \n   name   VARCHAR2(20); \nBEGIN \n   -- adding elements to the table \n   salary_list('Rajnish') := 62000; \n   salary_list('Minakshi') := 75000; \n   salary_list('Martin') := 100000; \n   salary_list('James') := 78000;  \n   \n   -- printing the table \n   name := salary_list.FIRST; \n   WHILE name IS NOT null LOOP \n      dbms_output.put_line \n      ('Salary of ' || name || ' is ' || TO_CHAR(salary_list(name))); \n      name := salary_list.NEXT(name); \n   END LOOP; \nEND; \n/\n</pre>\n<p>When the above code is executed at the SQL prompt, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nSalary of James is 78000 \nSalary of Martin is 100000 \nSalary of Minakshi is 75000 \nSalary of Rajnish is 62000  \n\nPL/SQL procedure successfully completed.\n</pre>\n<h3>Example</h3>\n<p>Elements of an index-by table could also be a <b>%ROWTYPE</b> of any database table or <b>%TYPE</b> of any database table field. The following example illustrates the concept. We will use the <b>CUSTOMERS</b> table stored in our database as \u2212</p>\n<pre class=\"result notranslate\">\nSelect * from customers;  \n\n+----+----------+-----+-----------+----------+ \n| ID | NAME     | AGE | ADDRESS   | SALARY   | \n+----+----------+-----+-----------+----------+ \n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 | \n|  2 | Khilan   |  25 | Delhi     |  1500.00 | \n|  3 | kaushik  |  23 | Kota      |  2000.00 | \n|  4 | Chaitali |  25 | Mumbai    |  6500.00 | \n|  5 | Hardik   |  27 | Bhopal    |  8500.00 | \n|  6 | Komal    |  22 | MP        |  4500.00 | \n+----+----------+-----+-----------+----------+  \n</pre>\n<p></p>\n<pre class=\"prettyprint notranslate\">\nDECLARE \n   CURSOR c_customers is \n      select name from customers; \n\n   TYPE c_list IS TABLE of customers.Name%type INDEX BY binary_integer; \n   name_list c_list; \n   counter integer :=0; \nBEGIN \n   FOR n IN c_customers LOOP \n      counter := counter +1; \n      name_list(counter) := n.name; \n      dbms_output.put_line('Customer('||counter||'):'||name_lis t(counter)); \n   END LOOP; \nEND; \n/ \n</pre>\n<p>When the above code is executed at the SQL prompt, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nCustomer(1): Ramesh  \nCustomer(2): Khilan  \nCustomer(3): kaushik     \nCustomer(4): Chaitali  \nCustomer(5): Hardik  \nCustomer(6): Komal  \n\nPL/SQL procedure successfully completed\n</pre>\n<h2>Nested Tables</h2>\n<p>A <b>nested table</b> is like a one-dimensional array with an arbitrary number of elements. However, a nested table differs from an array in the following aspects \u2212</p>\n<ul class=\"list\">\n<li><p>An array has a declared number of elements, but a nested table does not. The size of a nested table can increase dynamically.</p></li>\n<li><p>An array is always dense, i.e., it always has consecutive subscripts. A nested array is dense initially, but it can become sparse when elements are deleted from it.</p></li>\n</ul>\n<p>A nested table is created using the following syntax \u2212</p>\n<pre class=\"result notranslate\">\nTYPE type_name IS TABLE OF element_type [NOT NULL]; \n \ntable_name type_name; \n</pre>\n<p>This declaration is similar to the declaration of an <b>index-by</b> table, but there is no <b>INDEX BY</b> clause.</p>\n<p>A nested table can be stored in a database column. It can further be used for simplifying SQL operations where you join a single-column table with a larger table. An associative array cannot be stored in the database.</p>\n<h3>Example</h3>\n<p>The following examples illustrate the use of nested table \u2212</p>\n<pre class=\"prettyprint notranslate\">\nDECLARE \n   TYPE names_table IS TABLE OF VARCHAR2(10); \n   TYPE grades IS TABLE OF INTEGER;  \n   names names_table; \n   marks grades; \n   total integer; \nBEGIN \n   names := names_table('Kavita', 'Pritam', 'Ayan', 'Rishav', 'Aziz'); \n   marks:= grades(98, 97, 78, 87, 92); \n   total := names.count; \n   dbms_output.put_line('Total '|| total || ' Students'); \n   FOR i IN 1 .. total LOOP \n      dbms_output.put_line('Student:'||names(i)||', Marks:' || marks(i)); \n   end loop; \nEND; \n/  \n</pre>\n<p>When the above code is executed at the SQL prompt, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nTotal 5 Students \nStudent:Kavita, Marks:98 \nStudent:Pritam, Marks:97 \nStudent:Ayan, Marks:78 \nStudent:Rishav, Marks:87 \nStudent:Aziz, Marks:92  \n\nPL/SQL procedure successfully completed. \n</pre>\n<h3>Example</h3>\n<p>Elements of a <b>nested table</b> can also be a <b>%ROWTYPE</b> of any database table or %TYPE of any database table field. The following example illustrates the concept. We will use the CUSTOMERS table stored in our database as \u2212</p>\n<pre class=\"result notranslate\">\nSelect * from customers;  \n\n+----+----------+-----+-----------+----------+ \n| ID | NAME     | AGE | ADDRESS   | SALARY   | \n+----+----------+-----+-----------+----------+ \n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 | \n|  2 | Khilan   |  25 | Delhi     |  1500.00 | \n|  3 | kaushik  |  23 | Kota      |  2000.00 | \n|  4 | Chaitali |  25 | Mumbai    |  6500.00 | \n|  5 | Hardik   |  27 | Bhopal    |  8500.00 | \n|  6 | Komal    |  22 | MP        |  4500.00 | \n+----+----------+-----+-----------+----------+ \n</pre>\n<p></p>\n<pre class=\"prettyprint notranslate\">\nDECLARE \n   CURSOR c_customers is  \n      SELECT  name FROM customers;  \n   TYPE c_list IS TABLE of customerS.No.ame%type; \n   name_list c_list := c_list(); \n   counter integer :=0; \nBEGIN \n   FOR n IN c_customers LOOP \n      counter := counter +1; \n      name_list.extend; \n      name_list(counter)  := n.name; \n      dbms_output.put_line('Customer('||counter||'):'||name_list(counter)); \n   END LOOP; \nEND; \n/ \n</pre>\n<p>When the above code is executed at the SQL prompt, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nCustomer(1): Ramesh  \nCustomer(2): Khilan  \nCustomer(3): kaushik     \nCustomer(4): Chaitali  \nCustomer(5): Hardik  \nCustomer(6): Komal  \n\nPL/SQL procedure successfully completed. \n</pre>\n<h2>Collection Methods</h2>\n<p>PL/SQL provides the built-in collection methods that make collections easier to use. The following table lists the methods and their purpose \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\">S.No</th>\n<th style=\"text-align:center;\">Method Name &amp; Purpose</th>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">1</td>\n<td><p><b>EXISTS(n)</b></p>\n<p>Returns TRUE if the nth element in a collection exists; otherwise returns FALSE.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">2</td>\n<td><p><b>COUNT</b></p>\n<p>Returns the number of elements that a collection currently contains.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">3</td>\n<td><p><b>LIMIT</b></p>\n<p>Checks the maximum size of a collection.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">4</td>\n<td><p><b>FIRST</b></p>\n<p>Returns the first (smallest) index numbers in a collection that uses the integer subscripts.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">5</td>\n<td><p><b>LAST</b></p>\n<p>Returns the last (largest) index numbers in a collection that uses the integer subscripts.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">6</td>\n<td><p><b>PRIOR(n)</b></p>\n<p>Returns the index number that precedes index n in a collection.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">7</td>\n<td><p><b>NEXT(n)</b></p>\n<p>Returns the index number that succeeds index n.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">8</td>\n<td><p><b>EXTEND</b></p>\n<p>Appends one null element to a collection.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">9</td>\n<td><p><b>EXTEND(n)</b></p>\n<p>Appends n null elements to a collection.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">10</td>\n<td><p><b>EXTEND(n,i)</b></p>\n<p>Appends <b>n</b> copies of the i<sup>th</sup> element to a collection.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">11</td>\n<td><p><b>TRIM</b></p>\n<p>Removes one element from the end of a collection.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">12</td>\n<td><p><b>TRIM(n)</b></p>\n<p>Removes <b>n</b> elements from the end of a collection.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">13</td>\n<td><p><b>DELETE</b></p>\n<p>Removes all elements from a collection, setting COUNT to 0.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">14</td>\n<td><p><b>DELETE(n)</b></p>\n<p>Removes the <b>n<sup>th</sup></b> element from an associative array with a numeric key or a nested table. If the associative array has a string key, the element corresponding to the key value is deleted. If <b>n</b> is null, <b>DELETE(n)</b> does nothing.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">15</td>\n<td><p><b>DELETE(m,n)</b></p>\n<p>Removes all elements in the range <b>m..n</b> from an associative array or nested table. If <b>m</b> is larger than <b>n</b> or if <b>m</b> or <b>n</b> is null, <b>DELETE(m,n)</b> does nothing.</p></td>\n</tr>\n</table>\n<h2>Collection Exceptions</h2>\n<p>The following table provides the collection exceptions and when they are raised \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\">Collection Exception</th>\n<th style=\"text-align:center;\">Raised in Situations</th>\n</tr>\n<tr>\n<td style=\"text-align:center;\">COLLECTION_IS_NULL</td>\n<td>You try to operate on an atomically null collection.</td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">NO_DATA_FOUND</td>\n<td>A subscript designates an element that was deleted, or a nonexistent element of an associative array.</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">SUBSCRIPT_BEYOND_COUNT</td>\n<td>A subscript exceeds the number of elements in a collection.</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">SUBSCRIPT_OUTSIDE_LIMIT</td>\n<td>A subscript is outside the allowed range.</td>\n</tr>\n<tr>\n<td style=\"text-align:center;vertical-align:middle;\">VALUE_ERROR</td>\n<td>A subscript is null or not convertible to the key type. This exception might occur if the key is defined as a <b>PLS_INTEGER</b> range, and the subscript is outside this range.</td>\n</tr>\n</table>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/plsql/plsql_packages.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/plsql/plsql_transactions.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>", "html": "<!DOCTYPE html>\n\n<!--[if IE 8]><html class=\"ie ie8\"> <![endif]-->\n<!--[if IE 9]><html class=\"ie ie9\"> <![endif]-->\n<!--[if gt IE 9]><!--> <html> <!--<![endif]-->\n<head>\n<!-- Basic -->\n<meta charset=\"utf-8\"/>\n<title>PL/SQL Collections</title>\n<meta content=\"PL/SQL collections - Learn PL/SQL programming in simple and easy steps starting with PL/SQL syntax, Environment Setup, Operators, Transactions, Date and Time, data types, variables, constants, records, conditional statements, iterative statements, cursors, procedures, functions, exception handling, triggers, packages, collections, external procedures, arrays, strings, dbms output.\" name=\"description\">\n<meta content=\"PL/SQL, syntax, Environment Setup, Operators, Transactions, Date and Time, data types, variables, constants, records, conditional statements, iterative statements, cursors, procedures, functions, exception handling, triggers, packages, collections, external procedures, arrays, strings, dbms output.\" name=\"keywords\"/>\n<base href=\"https://www.tutorialspoint.com/\"/>\n<link href=\"/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"/>\n<meta content=\"width=device-width,initial-scale=1.0,user-scalable=yes\" name=\"viewport\"/>\n<meta content=\"en_US\" property=\"og:locale\">\n<meta content=\"website\" property=\"og:type\"/>\n<meta content=\"471319149685276\" property=\"fb:app_id\"/>\n<meta content=\"www.tutorialspoint.com\" property=\"og:site_name\"/>\n<meta content=\"yes\" name=\"apple-mobile-web-app-capable\"/>\n<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"/>\n<meta content=\"tutorialspoint.com\" name=\"author\"/>\n<script src=\"https://www.tutorialspoint.com/theme/js/script-min-v4.js?v=2\" type=\"text/javascript\"></script>\n<link href=\"https://www.tutorialspoint.com/theme/css/style-min.css?v=3.1\" rel=\"stylesheet\"/>\n<script>\r\nfunction openNav() {\t\r\n  document.getElementById(\"mySidenav\").style.width = \"250px\";\r\n  document.getElementById(\"right_obs\").style.display = \"block\";\r\n}\r\nfunction closeNav() {\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\nfunction close_obs_sidenav(){\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\n</script>\n<!-- Head Libs -->\n<!--[if IE 8]>\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/theme/css/ie8.css\">\r\n<![endif]-->\n<style>\r\n#privacy-banner {\r\n    position: fixed;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    max-width: 100%;\r\n    padding: 1rem .5rem;\r\n    background: #fff;\r\n    z-index: 1030;\r\n    color: #000;\r\n    font-size: 14px;\r\n    margin: 0;\r\n    display: none;\r\n    border-top: 2px solid rgb(130, 130, 130);\r\n  }\r\n  #privacy-banner p {\r\n    margin: 0;\r\n    color: #000;\r\n    text-align: center;\r\n  }\r\n  #privacy-banner a {\r\n    text-decoration: none;\r\n    margin: 20px auto 0 auto;\r\n    display: block;\r\n    max-width: 150px;\r\n  }\r\n  #privacy-banner a:hover {\r\n    text-decoration: underline;\r\n  }\r\n  #banner-learn {\r\n    color: #000;\r\n  }\r\n  #banner-accept {\r\n    padding: 7px 15px;\r\n    color: #fff;\r\n    border-radius: 5px;\r\n    background:#737373 !important;\r\n  }\r\n  @media (min-width: 768px) {\r\n    #privacy-banner {\r\n      padding: 1.5rem .5rem;\r\n    }\r\n    #privacy-banner a {\r\n      display: inline-block;\r\n      margin: 0 10px;\r\n    }\r\n}\r\nselect{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }\r\n.btnsbmt{ background: #d02023 !important;}\r\nul.nav-list.primary>li a.videolink{    background: none; margin: 0px; padding: 0px; border: 1px solid #d6d6d6;}\r\ndiv.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #d02023 url(/images/pattern.png) repeat center center !important;}\r\n.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #d02023 !important;}\r\n.submenu-item{ border-bottom: 2px solid #d02023 !important; border-top: 2px solid #d02023 !important }\r\n.ace_scroller{overflow: auto!important;}\r\na.demo{font-family: \"Open Sans\",Arial,sans-serif; background:#d02023; color:#fff; font-size:13px; padding:3px 10px; border:1px solid #d6d6d6; position:absolute; right:5px; margin:-6px 17px 0px 0px;}\r\na.demo:hover{opacity:.8}\r\n</style>\n<script>\r\n$(document).ready(function() {\r\n  $('input[name=\"q\"]').keydown(function(event){\r\n    if(event.keyCode == 13) {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n  });\r\n});\r\n</script>\n</meta></meta></head>\n<body onload=\"prettyPrint()\">\n<div class=\"wrapLoader\">\n<div class=\"imgLoader\">\n<img alt=\"\" height=\"70\" src=\"/images/loading-cg.gif\" width=\"70\"/>\n</div>\n</div>\n<div class=\"display-none\" id=\"right_obs\" onclick=\"close_obs_sidenav()\"></div>\n<header>\n<div class=\"container\">\n<h1 class=\"logo\">\n<a href=\"index.htm\" title=\"tutorialspoint\">\n<img alt=\"tutorialspoint\" src=\"/plsql/images/logo.png\"/>\n</a>\n</h1>\n<ul class=\"tp-inline-block pull-right\" id=\"tp-head-icons\">\n<li>\n<div class=\"tp-second-nav tp-display-none tp-pointer\" onclick=\"openNav()\">\n<i class=\"fa fa-th-large fa-lg\"></i>\n</div>\n</li>\n</ul>\n<button class=\"btn btn-responsive-nav btn-inverse\" data-target=\".nav-main-collapse\" data-toggle=\"collapse\" id=\"pull\" style=\"top: 24px!important\"> <i class=\"icon icon-bars\"></i> </button>\n<nav>\n<ul class=\"nav nav-pills nav-top\">\n<li><a href=\"/about/about_careers.htm\" style=\"background: #fffb09; font-weight: bold;\"><i class=\"icon icon-suitcase\"></i> Jobs</a></li>\n<li> <a href=\"/programming_examples/\" target=\"_blank\"><i class=\"fa fa-cubes\"></i> \u00a0Examples</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/whiteboard.htm\"><img alt=\"Whiteboard\" src=\"theme/css/icons/image-editor.png\" title=\"Whiteboard\"/> \u00a0Whiteboard</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/netmeeting.php\"><i class=\"fa-camera\"></i> \u00a0Net Meeting</a> </li>\n<li> <a href=\"/online_dev_tools.htm\"> <i class=\"dev-tools-menu\" style=\"opacity:.5\"></i> Tools </a> </li>\n<li> <a href=\"/articles/index.php\"><i class=\"icon icon-file-text-o\"></i> \u00a0Articles</a> </li>\n<li class=\"top-icons\">\n<ul class=\"social-icons\">\n<li class=\"facebook\"><a data-placement=\"bottom\" href=\"https://www.facebook.com/tutorialspointindia\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Facebook\">Facebook</a></li>\n<li class=\"googleplus\"><a data-placement=\"bottom\" href=\"https://plus.google.com/u/0/116678774017490391259/posts\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Google+\">Google+</a></li>\n<li class=\"twitter\"><a data-placement=\"bottom\" href=\"https://www.twitter.com/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Twitter\">Twitter</a></li>\n<li class=\"linkedin\"><a data-placement=\"bottom\" href=\"https://www.linkedin.com/company/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Linkedin\">Linkedin</a></li>\n<li class=\"youtube\"><a data-placement=\"bottom\" href=\"https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint YouTube\">YouTube</a></li>\n</ul>\n</li>\n</ul>\n</nav>\n</div>\n<div class=\"sidenav\" id=\"mySidenav\">\n<div class=\"navbar nav-main\">\n<div class=\"container\">\n<nav class=\"nav-main mega-menu\">\n<ul class=\"nav nav-pills nav-main\" id=\"mainMenu\">\n<li class=\"dropdown no-sub-menu\"> <a class=\"dropdown\" href=\"index.htm\"><i class=\"icon icon-home\"></i> Home</a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"/questions/index.php\"><i class=\"fa fa-send\"></i> Q/A </a> </li>\n<li class=\"dropdown\"><a class=\"dropdown\" href=\"tutorialslibrary.htm\"><span class=\"tut-lib\"> Library </span></a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"videotutorials/index.htm\"><i class=\"fa-toggle-right\"></i> Videos </a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"tutor_connect/index.php\"><i class=\"fa-user\"> </i> Tutors</a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"codingground.htm\"><i class=\"fa-code\"></i> Coding Ground </a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"https://store.tutorialspoint.com/\"><i class=\"fa-usd\"></i> Store </a> </li>\n<li class=\"dropdown no-sub-menu\">\n<div class=\"searchform-popup\">\n<input autocomplete=\"off\" class=\"header-search-box\" id=\"search-string\" name=\"q\" onblur=\"if (this.value == '') {this.value = 'Search your favorite tutorials...';}\" onfocus=\"if (this.value == 'Search your favorite tutorials...') {this.value = '';}\" placeholder=\"Search your favorite tutorials...\" type=\"text\"/>\n<div class=\"magnifying-glass\"><i class=\"icon-search\"></i> Search </div>\n</div>\n</li>\n</ul>\n</nav>\n</div>\n</div>\n</div>\n</header></body></html>\n\n<div style=\"clear:both;\"></div>\n<div class=\"main\" role=\"main\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-2\">\n<aside class=\"sidebar\">\n<div class=\"mini-logo\">\n<img alt=\"PL/SQL Tutorial\" src=\"/plsql/images/plsql-mini-logo.jpg\">\n</img></div>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">PL/SQL Tutorial</li>\n<li><a href=\"/plsql/index.htm\">PL/SQL - Home</a></li>\n<li><a href=\"/plsql/plsql_overview.htm\">PL/SQL - Overview</a></li>\n<li><a href=\"/plsql/plsql_environment_setup.htm\">PL/SQL - Environment</a></li>\n<li><a href=\"/plsql/plsql_basic_syntax.htm\">PL/SQL - Basic Syntax</a></li>\n<li><a href=\"/plsql/plsql_data_types.htm\">PL/SQL - Data Types</a></li>\n<li><a href=\"/plsql/plsql_variable_types.htm\">PL/SQL - Variables</a></li>\n<li><a href=\"/plsql/plsql_constants.htm\">PL/SQL - Constants and Literals</a></li>\n<li><a href=\"/plsql/plsql_operators.htm\">PL/SQL - Operators</a></li>\n<li><a href=\"/plsql/plsql_conditional_control.htm\">PL/SQL - Conditions</a></li>\n<li><a href=\"/plsql/plsql_loops.htm\">PL/SQL - Loops </a></li>\n<li><a href=\"/plsql/plsql_strings.htm\">PL/SQL - Strings</a></li>\n<li><a href=\"/plsql/plsql_arrays.htm\">PL/SQL - Arrays</a></li>\n<li><a href=\"/plsql/plsql_procedures.htm\">PL/SQL - Procedures</a></li>\n<li><a href=\"/plsql/plsql_functions.htm\">PL/SQL - Functions</a></li>\n<li><a href=\"/plsql/plsql_cursors.htm\">PL/SQL - Cursors</a></li>\n<li><a href=\"/plsql/plsql_records.htm\">PL/SQL - Records</a></li>\n<li><a href=\"/plsql/plsql_exceptions.htm\">PL/SQL - Exceptions</a></li>\n<li><a href=\"/plsql/plsql_triggers.htm\">PL/SQL - Triggers</a></li>\n<li><a href=\"/plsql/plsql_packages.htm\">PL/SQL - Packages</a></li>\n<li><a href=\"/plsql/plsql_collections.htm\">PL/SQL - Collections</a></li>\n<li><a href=\"/plsql/plsql_transactions.htm\">PL/SQL - Transactions</a></li>\n<li><a href=\"/plsql/plsql_date_time.htm\">PL/SQL - Date &amp; Time</a></li>\n<li><a href=\"/plsql/plsql_dbms_output.htm\">PL/SQL - DBMS Output</a></li>\n<li><a href=\"/plsql/plsql_object_oriented.htm\">PL/SQL - Object Oriented</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">PL/SQL Useful Resources</li>\n<li><a href=\"/plsql/plsql_questions_answers.htm\">PL/SQL - Questions and Answers</a></li>\n<li><a href=\"/plsql/plsql_quick_guide.htm\">PL/SQL - Quick Guide</a></li>\n<li><a href=\"/plsql/plsql_useful_resources.htm\">PL/SQL - Useful Resources</a></li>\n<li><a href=\"/plsql/plsql_discussion.htm\">PL/SQL - Discussion</a></li>\n</ul>\n<ul class=\"nav nav-list primary push-bottom left-menu special\">\n<li class=\"sreading\">Selected Reading</li>\n<li><a href=\"/upsc_ias_exams.htm\" target=\"_top\">UPSC IAS Exams Notes</a></li>\n<li><a href=\"/developers_best_practices/index.htm\" target=\"_top\">Developer's Best Practices</a></li>\n<li><a href=\"/questions_and_answers.htm\" target=\"_top\">Questions and Answers</a></li>\n<li><a href=\"/effective_resume_writing.htm\" target=\"_top\">Effective Resume Writing</a></li>\n<li><a href=\"/hr_interview_questions/index.htm\" target=\"_top\">HR Interview Questions</a></li>\n<li><a href=\"/computer_glossary.htm\" target=\"_top\">Computer Glossary</a></li>\n<li><a href=\"/computer_whoiswho.htm\" target=\"_top\">Who is Who</a></li>\n</ul>\n</aside>\n</div>\n<!-- PRINTING STARTS HERE -->\n<div class=\"row\">\n<div class=\"content\">\n<div class=\"col-md-7 middle-col\">\n<h1>PL/SQL - Collections</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/plsql/plsql_packages.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/plsql/plsql_transactions.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>In this chapter, we will discuss the Collections in PL/SQL. A collection is an ordered group of elements having the same data type. Each element is identified by a unique subscript that represents its position in the collection.</p>\n<p>PL/SQL provides three collection types \u2212</p>\n<ul class=\"list\">\n<li>Index-by tables or Associative array</li>\n<li>Nested table</li>\n<li>Variable-size array or Varray</li>\n</ul>\n<p>Oracle documentation provides the following characteristics for each type of collections \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center; vertical-align:middle;\">Collection Type</th>\n<th style=\"text-align:center; vertical-align:middle;\">Number of Elements</th>\n<th style=\"text-align:center; vertical-align:middle;\">Subscript Type</th>\n<th style=\"text-align:center; vertical-align:middle;\">Dense or Sparse</th>\n<th style=\"text-align:center; vertical-align:middle;\">Where Created</th>\n<th style=\"text-align:center; vertical-align:middle;\">Can Be Object Type Attribute</th>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">Associative array (or index-by table)</td>\n<td style=\"text-align:center; vertical-align:middle;\">Unbounded</td>\n<td style=\"text-align:center; vertical-align:middle;\">String or integer</td>\n<td style=\"text-align:center; vertical-align:middle;\">Either</td>\n<td style=\"vertical-align:middle;\">Only in PL/SQL block</td>\n<td style=\"text-align:center; vertical-align:middle;\">No</td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">Nested table</td>\n<td style=\"text-align:center; vertical-align:middle;\">Unbounded</td>\n<td style=\"text-align:center; vertical-align:middle;\">Integer</td>\n<td style=\"text-align:center; vertical-align:middle;\">Starts dense, can become sparse</td>\n<td style=\"vertical-align:middle;\">Either in PL/SQL block or at schema level</td>\n<td style=\"text-align:center; vertical-align:middle;\">Yes</td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">Variablesize array (Varray)</td>\n<td style=\"text-align:center; vertical-align:middle;\">Bounded</td>\n<td style=\"text-align:center; vertical-align:middle;\">Integer</td>\n<td style=\"text-align:center; vertical-align:middle;\">Always dense</td>\n<td style=\"vertical-align:middle;\">Either in PL/SQL block or at schema level</td>\n<td style=\"text-align:center; vertical-align:middle;\">Yes</td>\n</tr>\n</table>\n<p>We have already discussed varray in the chapter <b>'PL/SQL arrays'</b>. In this chapter, we will discuss the PL/SQL tables.</p>\n<p>Both types of PL/SQL tables, i.e., the index-by tables and the nested tables have the same structure and their rows are accessed using the subscript notation. However, these two types of tables differ in one aspect; the nested tables can be stored in a database column and the index-by tables cannot.</p>\n<h2>Index-By Table</h2>\n<p>An <b>index-by</b> table (also called an <b>associative array</b>) is a set of <b>key-value</b> pairs. Each key is unique and is used to locate the corresponding value. The key can be either an integer or a string.</p>\n<p>An index-by table is created using the following syntax. Here, we are creating an <b>index-by</b> table named <b>table_name</b>, the keys of which will be of the subscript_type and associated values will be of the <i>element_type</i></p>\n<pre class=\"result notranslate\">\nTYPE type_name IS TABLE OF element_type [NOT NULL] INDEX BY subscript_type; \n \ntable_name type_name;\n</pre>\n<h3>Example</h3>\n<p>Following example shows how to create a table to store integer values along with names and later it prints the same list of names.</p>\n<pre class=\"prettyprint notranslate\">\nDECLARE \n   TYPE salary IS TABLE OF NUMBER INDEX BY VARCHAR2(20); \n   salary_list salary; \n   name   VARCHAR2(20); \nBEGIN \n   -- adding elements to the table \n   salary_list('Rajnish') := 62000; \n   salary_list('Minakshi') := 75000; \n   salary_list('Martin') := 100000; \n   salary_list('James') := 78000;  \n   \n   -- printing the table \n   name := salary_list.FIRST; \n   WHILE name IS NOT null LOOP \n      dbms_output.put_line \n      ('Salary of ' || name || ' is ' || TO_CHAR(salary_list(name))); \n      name := salary_list.NEXT(name); \n   END LOOP; \nEND; \n/\n</pre>\n<p>When the above code is executed at the SQL prompt, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nSalary of James is 78000 \nSalary of Martin is 100000 \nSalary of Minakshi is 75000 \nSalary of Rajnish is 62000  \n\nPL/SQL procedure successfully completed.\n</pre>\n<h3>Example</h3>\n<p>Elements of an index-by table could also be a <b>%ROWTYPE</b> of any database table or <b>%TYPE</b> of any database table field. The following example illustrates the concept. We will use the <b>CUSTOMERS</b> table stored in our database as \u2212</p>\n<pre class=\"result notranslate\">\nSelect * from customers;  \n\n+----+----------+-----+-----------+----------+ \n| ID | NAME     | AGE | ADDRESS   | SALARY   | \n+----+----------+-----+-----------+----------+ \n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 | \n|  2 | Khilan   |  25 | Delhi     |  1500.00 | \n|  3 | kaushik  |  23 | Kota      |  2000.00 | \n|  4 | Chaitali |  25 | Mumbai    |  6500.00 | \n|  5 | Hardik   |  27 | Bhopal    |  8500.00 | \n|  6 | Komal    |  22 | MP        |  4500.00 | \n+----+----------+-----+-----------+----------+  \n</pre>\n<p></p>\n<pre class=\"prettyprint notranslate\">\nDECLARE \n   CURSOR c_customers is \n      select name from customers; \n\n   TYPE c_list IS TABLE of customers.Name%type INDEX BY binary_integer; \n   name_list c_list; \n   counter integer :=0; \nBEGIN \n   FOR n IN c_customers LOOP \n      counter := counter +1; \n      name_list(counter) := n.name; \n      dbms_output.put_line('Customer('||counter||'):'||name_lis t(counter)); \n   END LOOP; \nEND; \n/ \n</pre>\n<p>When the above code is executed at the SQL prompt, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nCustomer(1): Ramesh  \nCustomer(2): Khilan  \nCustomer(3): kaushik     \nCustomer(4): Chaitali  \nCustomer(5): Hardik  \nCustomer(6): Komal  \n\nPL/SQL procedure successfully completed\n</pre>\n<h2>Nested Tables</h2>\n<p>A <b>nested table</b> is like a one-dimensional array with an arbitrary number of elements. However, a nested table differs from an array in the following aspects \u2212</p>\n<ul class=\"list\">\n<li><p>An array has a declared number of elements, but a nested table does not. The size of a nested table can increase dynamically.</p></li>\n<li><p>An array is always dense, i.e., it always has consecutive subscripts. A nested array is dense initially, but it can become sparse when elements are deleted from it.</p></li>\n</ul>\n<p>A nested table is created using the following syntax \u2212</p>\n<pre class=\"result notranslate\">\nTYPE type_name IS TABLE OF element_type [NOT NULL]; \n \ntable_name type_name; \n</pre>\n<p>This declaration is similar to the declaration of an <b>index-by</b> table, but there is no <b>INDEX BY</b> clause.</p>\n<p>A nested table can be stored in a database column. It can further be used for simplifying SQL operations where you join a single-column table with a larger table. An associative array cannot be stored in the database.</p>\n<h3>Example</h3>\n<p>The following examples illustrate the use of nested table \u2212</p>\n<pre class=\"prettyprint notranslate\">\nDECLARE \n   TYPE names_table IS TABLE OF VARCHAR2(10); \n   TYPE grades IS TABLE OF INTEGER;  \n   names names_table; \n   marks grades; \n   total integer; \nBEGIN \n   names := names_table('Kavita', 'Pritam', 'Ayan', 'Rishav', 'Aziz'); \n   marks:= grades(98, 97, 78, 87, 92); \n   total := names.count; \n   dbms_output.put_line('Total '|| total || ' Students'); \n   FOR i IN 1 .. total LOOP \n      dbms_output.put_line('Student:'||names(i)||', Marks:' || marks(i)); \n   end loop; \nEND; \n/  \n</pre>\n<p>When the above code is executed at the SQL prompt, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nTotal 5 Students \nStudent:Kavita, Marks:98 \nStudent:Pritam, Marks:97 \nStudent:Ayan, Marks:78 \nStudent:Rishav, Marks:87 \nStudent:Aziz, Marks:92  \n\nPL/SQL procedure successfully completed. \n</pre>\n<h3>Example</h3>\n<p>Elements of a <b>nested table</b> can also be a <b>%ROWTYPE</b> of any database table or %TYPE of any database table field. The following example illustrates the concept. We will use the CUSTOMERS table stored in our database as \u2212</p>\n<pre class=\"result notranslate\">\nSelect * from customers;  \n\n+----+----------+-----+-----------+----------+ \n| ID | NAME     | AGE | ADDRESS   | SALARY   | \n+----+----------+-----+-----------+----------+ \n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 | \n|  2 | Khilan   |  25 | Delhi     |  1500.00 | \n|  3 | kaushik  |  23 | Kota      |  2000.00 | \n|  4 | Chaitali |  25 | Mumbai    |  6500.00 | \n|  5 | Hardik   |  27 | Bhopal    |  8500.00 | \n|  6 | Komal    |  22 | MP        |  4500.00 | \n+----+----------+-----+-----------+----------+ \n</pre>\n<p></p>\n<pre class=\"prettyprint notranslate\">\nDECLARE \n   CURSOR c_customers is  \n      SELECT  name FROM customers;  \n   TYPE c_list IS TABLE of customerS.No.ame%type; \n   name_list c_list := c_list(); \n   counter integer :=0; \nBEGIN \n   FOR n IN c_customers LOOP \n      counter := counter +1; \n      name_list.extend; \n      name_list(counter)  := n.name; \n      dbms_output.put_line('Customer('||counter||'):'||name_list(counter)); \n   END LOOP; \nEND; \n/ \n</pre>\n<p>When the above code is executed at the SQL prompt, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nCustomer(1): Ramesh  \nCustomer(2): Khilan  \nCustomer(3): kaushik     \nCustomer(4): Chaitali  \nCustomer(5): Hardik  \nCustomer(6): Komal  \n\nPL/SQL procedure successfully completed. \n</pre>\n<h2>Collection Methods</h2>\n<p>PL/SQL provides the built-in collection methods that make collections easier to use. The following table lists the methods and their purpose \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\">S.No</th>\n<th style=\"text-align:center;\">Method Name &amp; Purpose</th>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">1</td>\n<td><p><b>EXISTS(n)</b></p>\n<p>Returns TRUE if the nth element in a collection exists; otherwise returns FALSE.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">2</td>\n<td><p><b>COUNT</b></p>\n<p>Returns the number of elements that a collection currently contains.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">3</td>\n<td><p><b>LIMIT</b></p>\n<p>Checks the maximum size of a collection.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">4</td>\n<td><p><b>FIRST</b></p>\n<p>Returns the first (smallest) index numbers in a collection that uses the integer subscripts.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">5</td>\n<td><p><b>LAST</b></p>\n<p>Returns the last (largest) index numbers in a collection that uses the integer subscripts.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">6</td>\n<td><p><b>PRIOR(n)</b></p>\n<p>Returns the index number that precedes index n in a collection.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">7</td>\n<td><p><b>NEXT(n)</b></p>\n<p>Returns the index number that succeeds index n.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">8</td>\n<td><p><b>EXTEND</b></p>\n<p>Appends one null element to a collection.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">9</td>\n<td><p><b>EXTEND(n)</b></p>\n<p>Appends n null elements to a collection.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">10</td>\n<td><p><b>EXTEND(n,i)</b></p>\n<p>Appends <b>n</b> copies of the i<sup>th</sup> element to a collection.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">11</td>\n<td><p><b>TRIM</b></p>\n<p>Removes one element from the end of a collection.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">12</td>\n<td><p><b>TRIM(n)</b></p>\n<p>Removes <b>n</b> elements from the end of a collection.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">13</td>\n<td><p><b>DELETE</b></p>\n<p>Removes all elements from a collection, setting COUNT to 0.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">14</td>\n<td><p><b>DELETE(n)</b></p>\n<p>Removes the <b>n<sup>th</sup></b> element from an associative array with a numeric key or a nested table. If the associative array has a string key, the element corresponding to the key value is deleted. If <b>n</b> is null, <b>DELETE(n)</b> does nothing.</p></td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">15</td>\n<td><p><b>DELETE(m,n)</b></p>\n<p>Removes all elements in the range <b>m..n</b> from an associative array or nested table. If <b>m</b> is larger than <b>n</b> or if <b>m</b> or <b>n</b> is null, <b>DELETE(m,n)</b> does nothing.</p></td>\n</tr>\n</table>\n<h2>Collection Exceptions</h2>\n<p>The following table provides the collection exceptions and when they are raised \u2212</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\">Collection Exception</th>\n<th style=\"text-align:center;\">Raised in Situations</th>\n</tr>\n<tr>\n<td style=\"text-align:center;\">COLLECTION_IS_NULL</td>\n<td>You try to operate on an atomically null collection.</td>\n</tr>\n<tr>\n<td style=\"text-align:center; vertical-align:middle;\">NO_DATA_FOUND</td>\n<td>A subscript designates an element that was deleted, or a nonexistent element of an associative array.</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">SUBSCRIPT_BEYOND_COUNT</td>\n<td>A subscript exceeds the number of elements in a collection.</td>\n</tr>\n<tr>\n<td style=\"text-align:center;\">SUBSCRIPT_OUTSIDE_LIMIT</td>\n<td>A subscript is outside the allowed range.</td>\n</tr>\n<tr>\n<td style=\"text-align:center;vertical-align:middle;\">VALUE_ERROR</td>\n<td>A subscript is null or not convertible to the key type. This exception might occur if the key is defined as a <b>PLS_INTEGER</b> range, and the subscript is outside this range.</td>\n</tr>\n</table>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/plsql/plsql_packages.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/plsql/plsql_transactions.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n<div class=\"row\">\n<div class=\"col-md-3\" id=\"rightbar\">\n<div class=\"simple-ad\">\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.facebook.com/sharer.php?u=' + 'https://www.tutorialspoint.com/plsql/plsql_collections.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/facebookIcon.jpg\">\n</img></a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://twitter.com/share?url=' + 'https://www.tutorialspoint.com/plsql/plsql_collections.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/twitterIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'https://www.tutorialspoint.com/plsql/plsql_collections.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/linkedinIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=https://www.tutorialspoint.com/plsql/plsql_collections.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/googlePlusIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.stumbleupon.com/submit?url=https://www.tutorialspoint.com/plsql/plsql_collections.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/StumbleUponIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://reddit.com/submit?url=https://www.tutorialspoint.com/plsql/plsql_collections.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/reddit.jpg\"/>\n</a>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\ngoogle_ad_format = \"300x250_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 600;\ngoogle_ad_format = \"300x600_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"ca-pub-2537027957187252\";\n/* Right Side Ad */\ngoogle_ad_slot = \"right_side_ad\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\n//-->\n</script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"footer-copyright\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-1\">\n<a class=\"logo\" href=\"index.htm\"> <img alt=\"Tutorials Point\" class=\"img-responsive\" src=\"/scripts/img/logo-footer.png\"/> </a>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<nav id=\"sub-menu\">\n<ul>\n<li><a href=\"/about/about_privacy.htm\">Privacy Policy</a></li>\n<li><a href=\"/about/about_cookies.htm\">Cookies Policy</a></li>\n<li><a href=\"/about/contact_us.htm\">Contact</a></li>\n</ul>\n</nav>\n</div>\n<div class=\"col-md-3 col-sm-12 col-xs-12\">\n<p>\u00a9 Copyright 2019. All Rights Reserved.</p>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<div class=\"news-group\">\n<input autocomplete=\"off\" class=\"form-control-foot search\" id=\"textemail\" name=\"textemail\" onblur=\"if (this.value == '') {this.value = 'Enter email for newsletter...';}\" onfocus=\"if (this.value == 'Enter email for newsletter...') {this.value = '';}\" placeholder=\"Enter email for newsletter\" type=\"text\"/>\n<span class=\"input-group-btn\"> <button class=\"btn btn-default btn-footer\" id=\"btnemail\" onclick=\"javascript:void(0);\" type=\"submit\">go</button> </span>\n<div id=\"newsresponse\"></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"privacy-banner\">\n<div>\n<p>\n      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.\n      <a href=\"javascript:void(0)\" id=\"banner-accept\">Accept</a>\n<a href=\"/about/about_cookies.htm\" id=\"banner-learn\" target=\"_blank\">Learn more</a>\n</p>\n</div>\n</div>\n<script>\n// Banner Trigger if Not Closed\nif (!localStorage.bannerClosed) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n} else {\n  document.getElementById('privacy-banner').style.display = \"none\";\n}\ndocument.getElementById('banner-accept').addEventListener('click', function() {\n  document.getElementById('privacy-banner').style.display = \"none\";\n  localStorage.bannerClosed = 'true';\n});\nif (navigator.userAgent.match(/Opera|OPR\\//)) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n}\n</script>\n<!-- Libs -->\n<script src=\"/theme/js/custom-min.js?v=7\"></script>\n<script src=\"https://www.google-analytics.com/urchin.js\">\n</script>\n<script>\n_uacct = \"UA-232293-6\";\nurchinTracker();\n$('.pg-icon').click(function(){\n   $('.wrapLoader').show();\n});\n</script>\n\n\n\n", "url": "https://www.tutorialspoint.com/plsql/plsql_collections.htm", "title_html": "<h1>PL/SQL - Collections</h1>"}