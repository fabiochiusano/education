{"content": "\n C++ Constants/Literals \n  \n Advertisements \n \n<!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//-->\n\n\n \n  \n \n Previous Page\n \n \nNext Page \u00a0\n \n  \n  \n Constants refer to fixed values that the program may not alter and they are called literals. \n Constants can be of any of the basic data types and can be divided into Integer Numerals, Floating-Point Numerals, Characters, Strings and Boolean Values. \n Again, constants are treated just like regular variables except that their values cannot be modified after their definition. \n Integer Literals \n An integer literal can be a decimal, octal, or hexadecimal constant. A prefix specifies the base or radix: 0x or 0X for hexadecimal, 0 for octal, and nothing for decimal. \n An integer literal can also have a suffix that is a combination of U and L, for unsigned and long, respectively. The suffix can be uppercase or lowercase and can be in any order. \n Here are some examples of integer literals \u2212 \n \n212         // Legal\n215u        // Legal\n0xFeeL      // Legal\n078         // Illegal: 8 is not an octal digit\n032UU       // Illegal: cannot repeat a suffix\n \n Following are other examples of various types of Integer literals \u2212 \n \n85         // decimal\n0213       // octal\n0x4b       // hexadecimal\n30         // int\n30u        // unsigned int\n30l        // long\n30ul       // unsigned long\n \n Floating-point Literals \n A floating-point literal has an integer part, a decimal point, a fractional part, and an exponent part. You can represent floating point literals either in decimal form or exponential form. \n While representing using decimal form, you must include the decimal point, the exponent, or both and while representing using exponential form, you must include the integer part, the fractional part, or both. The signed exponent is introduced by e or E. \n Here are some examples of floating-point literals \u2212 \n \n3.14159       // Legal\n314159E-5L    // Legal\n510E          // Illegal: incomplete exponent\n210f          // Illegal: no decimal or exponent\n.e55          // Illegal: missing integer or fraction\n \n Boolean Literals \n There are two Boolean literals and they are part of standard C++ keywords \u2212 \n \nA value of true representing true.\nA value of false representing false.\n \n You should not consider the value of true equal to 1 and value of false equal to 0. \n Character Literals \n Character literals are enclosed in single quotes. If the literal begins with L (uppercase only), it is a wide character literal (e.g., L'x') and should be stored in wchar_t type of variable . Otherwise, it is a narrow character literal (e.g., 'x') and can be stored in a simple variable of char type. \n A character literal can be a plain character (e.g., 'x'), an escape sequence (e.g., '\\t'), or a universal character (e.g., '\\u02C0').  \n There are certain characters in C++ when they are preceded by a backslash they will have special meaning and they are used to represent like newline (\\n) or tab (\\t). Here, you have a list of some of such escape sequence codes \u2212 \n \n\nEscape sequence\nMeaning\n\n\n\\\\\n\\ character\n\n\n\\'\n ' character\n\n\n\\\"\n\" character\n\n\n\\?\n? character\n\n\n\\a\nAlert or bell\n\n\n\\b\nBackspace\n\n\n\\f\nForm feed\n\n\n\\n\nNewline\n\n\n\\r\nCarriage return\n\n\n\\t\nHorizontal tab\n\n\n\\v\nVertical tab\n\n\n\\ooo\nOctal number of one to three digits\n\n\n\\xhh . . .\nHexadecimal number of one or more digits\n\n \n Following is the example to show a few escape sequence characters \u2212 \n  Live Demo \n \n#include <iostream>\nusing namespace std;\n\nint main() {\n   cout << \"Hello\\tWorld\\n\\n\";\n   return 0;\n}\n \n When the above code is compiled and executed, it produces the following result \u2212 \n \nHello   World\n \n String Literals \n String literals are enclosed in double quotes. A string contains characters that are similar to character literals: plain characters, escape sequences, and universal characters. \n You can break a long line into multiple lines using string literals and separate them using whitespaces. \n Here are some examples of string literals. All the three forms are identical strings. \n \n\"hello, dear\"\n\n\"hello, \\\n\ndear\"\n\n\"hello, \" \"d\" \"ear\"\n \n Defining Constants \n There are two simple ways in C++ to define constants \u2212 \n \nUsing #define preprocessor.\nUsing const keyword.\n \n The #define Preprocessor \n Following is the form to use #define preprocessor to define a constant \u2212 \n \n#define identifier value\n \n Following example explains it in detail \u2212 \n  Live Demo \n \n#include <iostream>\nusing namespace std;\n\n#define LENGTH 10   \n#define WIDTH  5\n#define NEWLINE '\\n'\n\nint main() {\n   int area;  \n   \n   area = LENGTH * WIDTH;\n   cout << area;\n   cout << NEWLINE;\n   return 0;\n}\n \n When the above code is compiled and executed, it produces the following result \u2212 \n \n50\n \n The const Keyword \n You can use const prefix to declare constants with a specific type as follows \u2212 \n \nconst type variable = value;\n \n Following example explains it in detail \u2212 \n  Live Demo \n \n#include <iostream>\nusing namespace std;\n\nint main() {\n   const int  LENGTH = 10;\n   const int  WIDTH  = 5;\n   const char NEWLINE = '\\n';\n   int area;  \n   \n   area = LENGTH * WIDTH;\n   cout << area;\n   cout << NEWLINE;\n   return 0;\n}\n \n When the above code is compiled and executed, it produces the following result \u2212 \n \n50\n \n Note that it is a good programming practice to define constants in CAPITALS. \n  \n \n Previous Page\n \n \n Print\n \n \nNext Page \u00a0\n \n  \n  PRINTING ENDS HERE  \n \nAdvertisements\n<!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//-->\n\n\n \n", "title": "C++ Constants/Literals", "content_html": "<div class=\"col-md-7 middle-col\">\n<h1>C++ Constants/Literals</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/cplusplus/cpp_variable_scope.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/cplusplus/cpp_modifier_types.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>Constants refer to fixed values that the program may not alter and they are called <b>literals</b>.</p>\n<p>Constants can be of any of the basic data types and can be divided into Integer Numerals, Floating-Point Numerals, Characters, Strings and Boolean Values.</p>\n<p>Again, constants are treated just like regular variables except that their values cannot be modified after their definition.</p>\n<h2>Integer Literals</h2>\n<p>An integer literal can be a decimal, octal, or hexadecimal constant. A prefix specifies the base or radix: 0x or 0X for hexadecimal, 0 for octal, and nothing for decimal.</p>\n<p>An integer literal can also have a suffix that is a combination of U and L, for unsigned and long, respectively. The suffix can be uppercase or lowercase and can be in any order.</p>\n<p>Here are some examples of integer literals \u2212</p>\n<pre class=\"result notranslate\">\n212         // Legal\n215u        // Legal\n0xFeeL      // Legal\n078         // Illegal: 8 is not an octal digit\n032UU       // Illegal: cannot repeat a suffix\n</pre>\n<p>Following are other examples of various types of Integer literals \u2212</p>\n<pre class=\"result notranslate\">\n85         // decimal\n0213       // octal\n0x4b       // hexadecimal\n30         // int\n30u        // unsigned int\n30l        // long\n30ul       // unsigned long\n</pre>\n<h2>Floating-point Literals</h2>\n<p>A floating-point literal has an integer part, a decimal point, a fractional part, and an exponent part. You can represent floating point literals either in decimal form or exponential form.</p>\n<p>While representing using decimal form, you must include the decimal point, the exponent, or both and while representing using exponential form, you must include the integer part, the fractional part, or both. The signed exponent is introduced by e or E.</p>\n<p>Here are some examples of floating-point literals \u2212</p>\n<pre class=\"result notranslate\">\n3.14159       // Legal\n314159E-5L    // Legal\n510E          // Illegal: incomplete exponent\n210f          // Illegal: no decimal or exponent\n.e55          // Illegal: missing integer or fraction\n</pre>\n<h2>Boolean Literals</h2>\n<p>There are two Boolean literals and they are part of standard C++ keywords \u2212</p>\n<ul class=\"list\">\n<li><p>A value of <b>true</b> representing true.</p></li>\n<li><p>A value of <b>false</b> representing false.</p></li>\n</ul>\n<p>You should not consider the value of true equal to 1 and value of false equal to 0.</p>\n<h2>Character Literals</h2>\n<p>Character literals are enclosed in single quotes. If the literal begins with L (uppercase only), it is a wide character literal (e.g., L'x') and should be stored in <b>wchar_t</b> type of variable . Otherwise, it is a narrow character literal (e.g., 'x') and can be stored in a simple variable of <b>char</b> type.</p>\n<p>A character literal can be a plain character (e.g., 'x'), an escape sequence (e.g., '\\t'), or a universal character (e.g., '\\u02C0'). </p>\n<p>There are certain characters in C++ when they are preceded by a backslash they will have special meaning and they are used to represent like newline (\\n) or tab (\\t). Here, you have a list of some of such escape sequence codes \u2212</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<th style=\"text-align:center;\">Escape sequence</th>\n<th style=\"text-align:center;\">Meaning</th>\n</tr>\n<tr>\n<td>\\\\</td>\n<td>\\ character</td>\n</tr>\n<tr>\n<td>\\'</td>\n<td> ' character</td>\n</tr>\n<tr>\n<td>\\\"</td>\n<td>\" character</td>\n</tr>\n<tr>\n<td>\\?</td>\n<td>? character</td>\n</tr>\n<tr>\n<td>\\a</td>\n<td>Alert or bell</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>Backspace</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>Form feed</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>Newline</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>Carriage return</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>Horizontal tab</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>Vertical tab</td>\n</tr>\n<tr>\n<td>\\ooo</td>\n<td>Octal number of one to three digits</td>\n</tr>\n<tr>\n<td>\\xhh . . .</td>\n<td>Hexadecimal number of one or more digits</td>\n</tr>\n</table>\n<p>Following is the example to show a few escape sequence characters \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/8RqQ5S\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n   cout &lt;&lt; \"Hello\\tWorld\\n\\n\";\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nHello   World\n</pre>\n<h2>String Literals</h2>\n<p>String literals are enclosed in double quotes. A string contains characters that are similar to character literals: plain characters, escape sequences, and universal characters.</p>\n<p>You can break a long line into multiple lines using string literals and separate them using whitespaces.</p>\n<p>Here are some examples of string literals. All the three forms are identical strings.</p>\n<pre class=\"result notranslate\">\n\"hello, dear\"\n\n\"hello, \\\n\ndear\"\n\n\"hello, \" \"d\" \"ear\"\n</pre>\n<h2>Defining Constants</h2>\n<p>There are two simple ways in C++ to define constants \u2212</p>\n<ul class=\"list\">\n<li><p>Using <b>#define</b> preprocessor.</p></li>\n<li><p>Using <b>const</b> keyword.</p></li>\n</ul>\n<h2>The #define Preprocessor</h2>\n<p>Following is the form to use #define preprocessor to define a constant \u2212</p>\n<pre class=\"result notranslate\">\n#define identifier value\n</pre>\n<p>Following example explains it in detail \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/N6xxDP\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\n#define LENGTH 10   \n#define WIDTH  5\n#define NEWLINE '\\n'\n\nint main() {\n   int area;  \n   \n   area = LENGTH * WIDTH;\n   cout &lt;&lt; area;\n   cout &lt;&lt; NEWLINE;\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\n50\n</pre>\n<h2>The const Keyword</h2>\n<p>You can use <b>const</b> prefix to declare constants with a specific type as follows \u2212</p>\n<pre class=\"result notranslate\">\nconst type variable = value;\n</pre>\n<p>Following example explains it in detail \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/IA1cea\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n   const int  LENGTH = 10;\n   const int  WIDTH  = 5;\n   const char NEWLINE = '\\n';\n   int area;  \n   \n   area = LENGTH * WIDTH;\n   cout &lt;&lt; area;\n   cout &lt;&lt; NEWLINE;\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\n50\n</pre>\n<p>Note that it is a good programming practice to define constants in CAPITALS.</p>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/cplusplus/cpp_variable_scope.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/cplusplus/cpp_modifier_types.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>", "html": "<!DOCTYPE html>\n\n<!--[if IE 8]><html class=\"ie ie8\"> <![endif]-->\n<!--[if IE 9]><html class=\"ie ie9\"> <![endif]-->\n<!--[if gt IE 9]><!--> <html> <!--<![endif]-->\n<head>\n<!-- Basic -->\n<meta charset=\"utf-8\"/>\n<title>C++ Constants/Literals</title>\n<meta content=\"C++ Constants/Literals - Learn C++ in simple and easy steps starting from basic to advanced concepts with examples including C++ Overview, Environment Setup, Basic Syntax, Comments, Data Types, Variable Types, Scope, Constants/Literals, Modifier Types, Storage Classes, Operators, Loop Types, Decision Making, Functions, Numbers, Arrays, Strings, Pointers, References, Date and Time, Basic Input/Output, Data Structures, Classes and Objects, Object Oriented Language, Methods, Overriding, Inheritance, Polymorphism, Abstraction, Encapsulation, Interfaces, Files and Streams, STL, Iterators, Algorithms, Exception Handling, Dynamic Memory, Overloading, Templates, Namespaces and Signal Handling, Preprocessor, Multithreading, Web Programming.\" name=\"description\">\n<meta content=\"C++, Tutorial, Overview, Environment Setup, Basic Syntax, Comments, Data Types, Variable Types, Scope, Constants/Literals, Modifier Types, Storage Classes, Operators, Loop Types, Decision Making, Functions, Numbers, Arrays, Strings, Pointers, References, Date and Time, Basic Input/Output, Data Structures, Classes and Objects, Object Oriented Language, Methods, Overriding, Inheritance, Polymorphism, Abstraction, Encapsulation, Interfaces, Files and Streams, STL, Iterators, Algorithms, Exception Handling, Dynamic Memory, Overloading, Templates, Namespaces and Signal Handling, Preprocessor, Multithreading, Web Programming.\" name=\"Keywords\"/>\n<base href=\"https://www.tutorialspoint.com/\"/>\n<link href=\"/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"/>\n<meta content=\"width=device-width,initial-scale=1.0,user-scalable=yes\" name=\"viewport\"/>\n<meta content=\"en_US\" property=\"og:locale\">\n<meta content=\"website\" property=\"og:type\"/>\n<meta content=\"471319149685276\" property=\"fb:app_id\"/>\n<meta content=\"www.tutorialspoint.com\" property=\"og:site_name\"/>\n<meta content=\"yes\" name=\"apple-mobile-web-app-capable\"/>\n<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"/>\n<meta content=\"tutorialspoint.com\" name=\"author\"/>\n<script src=\"https://www.tutorialspoint.com/theme/js/script-min-v4.js?v=2\" type=\"text/javascript\"></script>\n<link href=\"https://www.tutorialspoint.com/theme/css/style-min.css?v=3.1\" rel=\"stylesheet\"/>\n<script>\r\nfunction openNav() {\t\r\n  document.getElementById(\"mySidenav\").style.width = \"250px\";\r\n  document.getElementById(\"right_obs\").style.display = \"block\";\r\n}\r\nfunction closeNav() {\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\nfunction close_obs_sidenav(){\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\n</script>\n<!-- Head Libs -->\n<!--[if IE 8]>\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/theme/css/ie8.css\">\r\n<![endif]-->\n<style>\r\n#privacy-banner {\r\n    position: fixed;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    max-width: 100%;\r\n    padding: 1rem .5rem;\r\n    background: #fff;\r\n    z-index: 1030;\r\n    color: #000;\r\n    font-size: 14px;\r\n    margin: 0;\r\n    display: none;\r\n    border-top: 2px solid rgb(130, 130, 130);\r\n  }\r\n  #privacy-banner p {\r\n    margin: 0;\r\n    color: #000;\r\n    text-align: center;\r\n  }\r\n  #privacy-banner a {\r\n    text-decoration: none;\r\n    margin: 20px auto 0 auto;\r\n    display: block;\r\n    max-width: 150px;\r\n  }\r\n  #privacy-banner a:hover {\r\n    text-decoration: underline;\r\n  }\r\n  #banner-learn {\r\n    color: #000;\r\n  }\r\n  #banner-accept {\r\n    padding: 7px 15px;\r\n    color: #fff;\r\n    border-radius: 5px;\r\n    background:#737373 !important;\r\n  }\r\n  @media (min-width: 768px) {\r\n    #privacy-banner {\r\n      padding: 1.5rem .5rem;\r\n    }\r\n    #privacy-banner a {\r\n      display: inline-block;\r\n      margin: 0 10px;\r\n    }\r\n}\r\nselect{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }\r\n.btnsbmt{ background: #004481 !important;}\r\nul.nav-list.primary>li a.videolink{    background: none; margin: 0px; padding: 0px; border: 1px solid #d6d6d6;}\r\ndiv.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #004481 url(/images/pattern.png) repeat center center !important;}\r\n.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #004481 !important;}\r\n.submenu-item{ border-bottom: 2px solid #004481 !important; border-top: 2px solid #004481 !important }\r\n.ace_scroller{overflow: auto!important;}\r\na.demo{font-family: \"Open Sans\",Arial,sans-serif; background:#004481; color:#fff; font-size:13px; padding:3px 10px; border:1px solid #d6d6d6; position:absolute; right:5px; margin:-6px 17px 0px 0px;}\r\na.demo:hover{opacity:.8}\r\n</style>\n<script>\r\n$(document).ready(function() {\r\n  $('input[name=\"q\"]').keydown(function(event){\r\n    if(event.keyCode == 13) {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n  });\r\n});\r\n</script>\n</meta></meta></head>\n<body onload=\"prettyPrint()\">\n<div class=\"wrapLoader\">\n<div class=\"imgLoader\">\n<img alt=\"\" height=\"70\" src=\"/images/loading-cg.gif\" width=\"70\"/>\n</div>\n</div>\n<div class=\"display-none\" id=\"right_obs\" onclick=\"close_obs_sidenav()\"></div>\n<header>\n<div class=\"container\">\n<h1 class=\"logo\">\n<a href=\"index.htm\" title=\"tutorialspoint\">\n<img alt=\"tutorialspoint\" src=\"/cplusplus/images/logo.png\"/>\n</a>\n</h1>\n<ul class=\"tp-inline-block pull-right\" id=\"tp-head-icons\">\n<li>\n<div class=\"tp-second-nav tp-display-none tp-pointer\" onclick=\"openNav()\">\n<i class=\"fa fa-th-large fa-lg\"></i>\n</div>\n</li>\n</ul>\n<button class=\"btn btn-responsive-nav btn-inverse\" data-target=\".nav-main-collapse\" data-toggle=\"collapse\" id=\"pull\" style=\"top: 24px!important\"> <i class=\"icon icon-bars\"></i> </button>\n<nav>\n<ul class=\"nav nav-pills nav-top\">\n<li><a href=\"/about/about_careers.htm\" style=\"background: #fffb09; font-weight: bold;\"><i class=\"icon icon-suitcase\"></i> Jobs</a></li>\n<li> <a href=\"/programming_examples/\" target=\"_blank\"><i class=\"fa fa-cubes\"></i> \u00a0Examples</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/whiteboard.htm\"><img alt=\"Whiteboard\" src=\"theme/css/icons/image-editor.png\" title=\"Whiteboard\"/> \u00a0Whiteboard</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/netmeeting.php\"><i class=\"fa-camera\"></i> \u00a0Net Meeting</a> </li>\n<li> <a href=\"/online_dev_tools.htm\"> <i class=\"dev-tools-menu\" style=\"opacity:.5\"></i> Tools </a> </li>\n<li> <a href=\"/articles/index.php\"><i class=\"icon icon-file-text-o\"></i> \u00a0Articles</a> </li>\n<li class=\"top-icons\">\n<ul class=\"social-icons\">\n<li class=\"facebook\"><a data-placement=\"bottom\" href=\"https://www.facebook.com/tutorialspointindia\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Facebook\">Facebook</a></li>\n<li class=\"googleplus\"><a data-placement=\"bottom\" href=\"https://plus.google.com/u/0/116678774017490391259/posts\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Google+\">Google+</a></li>\n<li class=\"twitter\"><a data-placement=\"bottom\" href=\"https://www.twitter.com/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Twitter\">Twitter</a></li>\n<li class=\"linkedin\"><a data-placement=\"bottom\" href=\"https://www.linkedin.com/company/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Linkedin\">Linkedin</a></li>\n<li class=\"youtube\"><a data-placement=\"bottom\" href=\"https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint YouTube\">YouTube</a></li>\n</ul>\n</li>\n</ul>\n</nav>\n</div>\n<div class=\"sidenav\" id=\"mySidenav\">\n<div class=\"navbar nav-main\">\n<div class=\"container\">\n<nav class=\"nav-main mega-menu\">\n<ul class=\"nav nav-pills nav-main\" id=\"mainMenu\">\n<li class=\"dropdown no-sub-menu\"> <a class=\"dropdown\" href=\"index.htm\"><i class=\"icon icon-home\"></i> Home</a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"/questions/index.php\"><i class=\"fa fa-send\"></i> Q/A </a> </li>\n<li class=\"dropdown\"><a class=\"dropdown\" href=\"tutorialslibrary.htm\"><span class=\"tut-lib\"> Library </span></a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"videotutorials/index.htm\"><i class=\"fa-toggle-right\"></i> Videos </a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"tutor_connect/index.php\"><i class=\"fa-user\"> </i> Tutors</a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"codingground.htm\"><i class=\"fa-code\"></i> Coding Ground </a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"https://store.tutorialspoint.com/\"><i class=\"fa-usd\"></i> Store </a> </li>\n<li class=\"dropdown no-sub-menu\">\n<div class=\"searchform-popup\">\n<input autocomplete=\"off\" class=\"header-search-box\" id=\"search-string\" name=\"q\" onblur=\"if (this.value == '') {this.value = 'Search your favorite tutorials...';}\" onfocus=\"if (this.value == 'Search your favorite tutorials...') {this.value = '';}\" placeholder=\"Search your favorite tutorials...\" type=\"text\"/>\n<div class=\"magnifying-glass\"><i class=\"icon-search\"></i> Search </div>\n</div>\n</li>\n</ul>\n</nav>\n</div>\n</div>\n</div>\n</header></body></html>\n\n<div style=\"clear:both;\"></div>\n<div class=\"main\" role=\"main\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-2\">\n<aside class=\"sidebar\">\n<style>\r\n.ts {\r\n   text-align:center !important;\r\n   vertical-align:middle !important;\r\n}\r\n</style>\n<div class=\"mini-logo\">\n<img alt=\"C++ Tutorial\" src=\"/cplusplus/images/cpp-mini-logo.jpg\">\n</img></div>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">C++ Basics</li>\n<li><a href=\"/cplusplus/index.htm\">C++ Home</a></li>\n<li><a href=\"/cplusplus/cpp_overview.htm\">C++ Overview</a></li>\n<li><a href=\"/cplusplus/cpp_environment_setup.htm\">C++ Environment Setup</a></li>\n<li><a href=\"/cplusplus/cpp_basic_syntax.htm\">C++ Basic Syntax</a></li>\n<li><a href=\"/cplusplus/cpp_comments.htm\">C++ Comments</a></li>\n<li><a href=\"/cplusplus/cpp_data_types.htm\">C++ Data Types</a></li>\n<li><a href=\"/cplusplus/cpp_variable_types.htm\">C++ Variable Types</a></li>\n<li><a href=\"/cplusplus/cpp_variable_scope.htm\">C++ Variable Scope</a></li>\n<li><a href=\"/cplusplus/cpp_constants_literals.htm\">C++ Constants/Literals</a></li>\n<li><a href=\"/cplusplus/cpp_modifier_types.htm\">C++ Modifier Types</a></li>\n<li><a href=\"/cplusplus/cpp_storage_classes.htm\">C++ Storage Classes</a></li>\n<li><a href=\"/cplusplus/cpp_operators.htm\">C++ Operators</a></li>\n<li><a href=\"/cplusplus/cpp_loop_types.htm\">C++ Loop Types</a></li>\n<li><a href=\"/cplusplus/cpp_decision_making.htm\">C++ Decision Making</a></li>\n<li><a href=\"/cplusplus/cpp_functions.htm\">C++ Functions</a></li>\n<li><a href=\"/cplusplus/cpp_numbers.htm\">C++ Numbers</a></li>\n<li><a href=\"/cplusplus/cpp_arrays.htm\">C++ Arrays</a></li>\n<li><a href=\"/cplusplus/cpp_strings.htm\">C++ Strings</a></li>\n<li><a href=\"/cplusplus/cpp_pointers.htm\">C++ Pointers</a></li>\n<li><a href=\"/cplusplus/cpp_references.htm\">C++ References</a></li>\n<li><a href=\"/cplusplus/cpp_date_time.htm\">C++ Date &amp; Time</a></li>\n<li><a href=\"/cplusplus/cpp_basic_input_output.htm\">C++ Basic Input/Output</a></li>\n<li><a href=\"/cplusplus/cpp_data_structures.htm\">C++ Data Structures</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">C++ Object Oriented</li>\n<li><a href=\"/cplusplus/cpp_classes_objects.htm\">C++ Classes &amp; Objects</a></li>\n<li><a href=\"/cplusplus/cpp_inheritance.htm\">C++ Inheritance</a></li>\n<li><a href=\"/cplusplus/cpp_overloading.htm\">C++ Overloading</a></li>\n<li><a href=\"/cplusplus/cpp_polymorphism.htm\">C++ Polymorphism</a></li>\n<li><a href=\"/cplusplus/cpp_data_abstraction.htm\">C++ Abstraction</a></li>\n<li><a href=\"/cplusplus/cpp_data_encapsulation.htm\">C++ Encapsulation</a></li>\n<li><a href=\"/cplusplus/cpp_interfaces.htm\">C++ Interfaces</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">C++ Advanced</li>\n<li><a href=\"/cplusplus/cpp_files_streams.htm\">C++ Files and Streams</a></li>\n<li><a href=\"/cplusplus/cpp_exceptions_handling.htm\">C++ Exception Handling</a></li>\n<li><a href=\"/cplusplus/cpp_dynamic_memory.htm\">C++ Dynamic Memory</a></li>\n<li><a href=\"/cplusplus/cpp_namespaces.htm\">C++ Namespaces</a></li>\n<li><a href=\"/cplusplus/cpp_templates.htm\">C++ Templates</a></li>\n<li><a href=\"/cplusplus/cpp_preprocessor.htm\">C++ Preprocessor</a></li>\n<li><a href=\"/cplusplus/cpp_signal_handling.htm\">C++ Signal Handling</a></li>\n<li><a href=\"/cplusplus/cpp_multithreading.htm\">C++ Multithreading</a></li>\n<li><a href=\"/cplusplus/cpp_web_programming.htm\">C++ Web Programming</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">C++ Useful Resources</li>\n<li><a href=\"/cplusplus/cpp_questions_answers.htm\">C++ Questions and Answers</a></li>\n<li><a href=\"/cplusplus/cpp_quick_guide.htm\">C++ Quick Guide</a></li>\n<li><a href=\"/cplusplus/cpp_object_oriented.htm\">C++ Object Oriented</a></li>\n<li><a href=\"/cplusplus/cpp_stl_tutorial.htm\">C++ STL Tutorial</a></li>\n<li><a href=\"/cplusplus/cpp_standard_library.htm\">C++ Standard Library</a></li>\n<li><a href=\"/cplusplus/cpp_useful_resources.htm\">C++ Useful Resources</a></li>\n<li><a href=\"/cplusplus/cpp_discussion.htm\">C++ Discussion</a></li>\n</ul>\n<ul class=\"nav nav-list primary push-bottom left-menu special\">\n<li class=\"sreading\">Selected Reading</li>\n<li><a href=\"/upsc_ias_exams.htm\" target=\"_top\">UPSC IAS Exams Notes</a></li>\n<li><a href=\"/developers_best_practices/index.htm\" target=\"_top\">Developer's Best Practices</a></li>\n<li><a href=\"/questions_and_answers.htm\" target=\"_top\">Questions and Answers</a></li>\n<li><a href=\"/effective_resume_writing.htm\" target=\"_top\">Effective Resume Writing</a></li>\n<li><a href=\"/hr_interview_questions/index.htm\" target=\"_top\">HR Interview Questions</a></li>\n<li><a href=\"/computer_glossary.htm\" target=\"_top\">Computer Glossary</a></li>\n<li><a href=\"/computer_whoiswho.htm\" target=\"_top\">Who is Who</a></li>\n</ul>\n</aside>\n</div>\n<!-- PRINTING STARTS HERE -->\n<div class=\"row\">\n<div class=\"content\">\n<div class=\"col-md-7 middle-col\">\n<h1>C++ Constants/Literals</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/cplusplus/cpp_variable_scope.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/cplusplus/cpp_modifier_types.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>Constants refer to fixed values that the program may not alter and they are called <b>literals</b>.</p>\n<p>Constants can be of any of the basic data types and can be divided into Integer Numerals, Floating-Point Numerals, Characters, Strings and Boolean Values.</p>\n<p>Again, constants are treated just like regular variables except that their values cannot be modified after their definition.</p>\n<h2>Integer Literals</h2>\n<p>An integer literal can be a decimal, octal, or hexadecimal constant. A prefix specifies the base or radix: 0x or 0X for hexadecimal, 0 for octal, and nothing for decimal.</p>\n<p>An integer literal can also have a suffix that is a combination of U and L, for unsigned and long, respectively. The suffix can be uppercase or lowercase and can be in any order.</p>\n<p>Here are some examples of integer literals \u2212</p>\n<pre class=\"result notranslate\">\n212         // Legal\n215u        // Legal\n0xFeeL      // Legal\n078         // Illegal: 8 is not an octal digit\n032UU       // Illegal: cannot repeat a suffix\n</pre>\n<p>Following are other examples of various types of Integer literals \u2212</p>\n<pre class=\"result notranslate\">\n85         // decimal\n0213       // octal\n0x4b       // hexadecimal\n30         // int\n30u        // unsigned int\n30l        // long\n30ul       // unsigned long\n</pre>\n<h2>Floating-point Literals</h2>\n<p>A floating-point literal has an integer part, a decimal point, a fractional part, and an exponent part. You can represent floating point literals either in decimal form or exponential form.</p>\n<p>While representing using decimal form, you must include the decimal point, the exponent, or both and while representing using exponential form, you must include the integer part, the fractional part, or both. The signed exponent is introduced by e or E.</p>\n<p>Here are some examples of floating-point literals \u2212</p>\n<pre class=\"result notranslate\">\n3.14159       // Legal\n314159E-5L    // Legal\n510E          // Illegal: incomplete exponent\n210f          // Illegal: no decimal or exponent\n.e55          // Illegal: missing integer or fraction\n</pre>\n<h2>Boolean Literals</h2>\n<p>There are two Boolean literals and they are part of standard C++ keywords \u2212</p>\n<ul class=\"list\">\n<li><p>A value of <b>true</b> representing true.</p></li>\n<li><p>A value of <b>false</b> representing false.</p></li>\n</ul>\n<p>You should not consider the value of true equal to 1 and value of false equal to 0.</p>\n<h2>Character Literals</h2>\n<p>Character literals are enclosed in single quotes. If the literal begins with L (uppercase only), it is a wide character literal (e.g., L'x') and should be stored in <b>wchar_t</b> type of variable . Otherwise, it is a narrow character literal (e.g., 'x') and can be stored in a simple variable of <b>char</b> type.</p>\n<p>A character literal can be a plain character (e.g., 'x'), an escape sequence (e.g., '\\t'), or a universal character (e.g., '\\u02C0'). </p>\n<p>There are certain characters in C++ when they are preceded by a backslash they will have special meaning and they are used to represent like newline (\\n) or tab (\\t). Here, you have a list of some of such escape sequence codes \u2212</p>\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n<tr>\n<th style=\"text-align:center;\">Escape sequence</th>\n<th style=\"text-align:center;\">Meaning</th>\n</tr>\n<tr>\n<td>\\\\</td>\n<td>\\ character</td>\n</tr>\n<tr>\n<td>\\'</td>\n<td> ' character</td>\n</tr>\n<tr>\n<td>\\\"</td>\n<td>\" character</td>\n</tr>\n<tr>\n<td>\\?</td>\n<td>? character</td>\n</tr>\n<tr>\n<td>\\a</td>\n<td>Alert or bell</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>Backspace</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>Form feed</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>Newline</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>Carriage return</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>Horizontal tab</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>Vertical tab</td>\n</tr>\n<tr>\n<td>\\ooo</td>\n<td>Octal number of one to three digits</td>\n</tr>\n<tr>\n<td>\\xhh . . .</td>\n<td>Hexadecimal number of one or more digits</td>\n</tr>\n</table>\n<p>Following is the example to show a few escape sequence characters \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/8RqQ5S\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n   cout &lt;&lt; \"Hello\\tWorld\\n\\n\";\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\nHello   World\n</pre>\n<h2>String Literals</h2>\n<p>String literals are enclosed in double quotes. A string contains characters that are similar to character literals: plain characters, escape sequences, and universal characters.</p>\n<p>You can break a long line into multiple lines using string literals and separate them using whitespaces.</p>\n<p>Here are some examples of string literals. All the three forms are identical strings.</p>\n<pre class=\"result notranslate\">\n\"hello, dear\"\n\n\"hello, \\\n\ndear\"\n\n\"hello, \" \"d\" \"ear\"\n</pre>\n<h2>Defining Constants</h2>\n<p>There are two simple ways in C++ to define constants \u2212</p>\n<ul class=\"list\">\n<li><p>Using <b>#define</b> preprocessor.</p></li>\n<li><p>Using <b>const</b> keyword.</p></li>\n</ul>\n<h2>The #define Preprocessor</h2>\n<p>Following is the form to use #define preprocessor to define a constant \u2212</p>\n<pre class=\"result notranslate\">\n#define identifier value\n</pre>\n<p>Following example explains it in detail \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/N6xxDP\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\n#define LENGTH 10   \n#define WIDTH  5\n#define NEWLINE '\\n'\n\nint main() {\n   int area;  \n   \n   area = LENGTH * WIDTH;\n   cout &lt;&lt; area;\n   cout &lt;&lt; NEWLINE;\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\n50\n</pre>\n<h2>The const Keyword</h2>\n<p>You can use <b>const</b> prefix to declare constants with a specific type as follows \u2212</p>\n<pre class=\"result notranslate\">\nconst type variable = value;\n</pre>\n<p>Following example explains it in detail \u2212</p>\n<a class=\"demo\" href=\"http://tpcg.io/IA1cea\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n<pre class=\"prettyprint notranslate\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n   const int  LENGTH = 10;\n   const int  WIDTH  = 5;\n   const char NEWLINE = '\\n';\n   int area;  \n   \n   area = LENGTH * WIDTH;\n   cout &lt;&lt; area;\n   cout &lt;&lt; NEWLINE;\n   return 0;\n}\n</pre>\n<p>When the above code is compiled and executed, it produces the following result \u2212</p>\n<pre class=\"result notranslate\">\n50\n</pre>\n<p>Note that it is a good programming practice to define constants in CAPITALS.</p>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/cplusplus/cpp_variable_scope.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/cplusplus/cpp_modifier_types.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n<div class=\"row\">\n<div class=\"col-md-3\" id=\"rightbar\">\n<div class=\"simple-ad\">\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.facebook.com/sharer.php?u=' + 'https://www.tutorialspoint.com/cplusplus/cpp_constants_literals.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/facebookIcon.jpg\">\n</img></a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://twitter.com/share?url=' + 'https://www.tutorialspoint.com/cplusplus/cpp_constants_literals.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/twitterIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'https://www.tutorialspoint.com/cplusplus/cpp_constants_literals.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/linkedinIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=https://www.tutorialspoint.com/cplusplus/cpp_constants_literals.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/googlePlusIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.stumbleupon.com/submit?url=https://www.tutorialspoint.com/cplusplus/cpp_constants_literals.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/StumbleUponIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://reddit.com/submit?url=https://www.tutorialspoint.com/cplusplus/cpp_constants_literals.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/reddit.jpg\"/>\n</a>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\ngoogle_ad_format = \"300x250_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 600;\ngoogle_ad_format = \"300x600_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"ca-pub-2537027957187252\";\n/* Right Side Ad */\ngoogle_ad_slot = \"right_side_ad\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\n//-->\n</script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"footer-copyright\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-1\">\n<a class=\"logo\" href=\"index.htm\"> <img alt=\"Tutorials Point\" class=\"img-responsive\" src=\"/scripts/img/logo-footer.png\"/> </a>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<nav id=\"sub-menu\">\n<ul>\n<li><a href=\"/about/about_privacy.htm\">Privacy Policy</a></li>\n<li><a href=\"/about/about_cookies.htm\">Cookies Policy</a></li>\n<li><a href=\"/about/contact_us.htm\">Contact</a></li>\n</ul>\n</nav>\n</div>\n<div class=\"col-md-3 col-sm-12 col-xs-12\">\n<p>\u00a9 Copyright 2019. All Rights Reserved.</p>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<div class=\"news-group\">\n<input autocomplete=\"off\" class=\"form-control-foot search\" id=\"textemail\" name=\"textemail\" onblur=\"if (this.value == '') {this.value = 'Enter email for newsletter...';}\" onfocus=\"if (this.value == 'Enter email for newsletter...') {this.value = '';}\" placeholder=\"Enter email for newsletter\" type=\"text\"/>\n<span class=\"input-group-btn\"> <button class=\"btn btn-default btn-footer\" id=\"btnemail\" onclick=\"javascript:void(0);\" type=\"submit\">go</button> </span>\n<div id=\"newsresponse\"></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"privacy-banner\">\n<div>\n<p>\n      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.\n      <a href=\"javascript:void(0)\" id=\"banner-accept\">Accept</a>\n<a href=\"/about/about_cookies.htm\" id=\"banner-learn\" target=\"_blank\">Learn more</a>\n</p>\n</div>\n</div>\n<script>\n// Banner Trigger if Not Closed\nif (!localStorage.bannerClosed) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n} else {\n  document.getElementById('privacy-banner').style.display = \"none\";\n}\ndocument.getElementById('banner-accept').addEventListener('click', function() {\n  document.getElementById('privacy-banner').style.display = \"none\";\n  localStorage.bannerClosed = 'true';\n});\nif (navigator.userAgent.match(/Opera|OPR\\//)) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n}\n</script>\n<!-- Libs -->\n<script src=\"/theme/js/custom-min.js?v=7\"></script>\n<script src=\"https://www.google-analytics.com/urchin.js\">\n</script>\n<script>\n_uacct = \"UA-232293-6\";\nurchinTracker();\n$('.pg-icon').click(function(){\n   $('.wrapLoader').show();\n});\n</script>\n\n\n\n", "url": "https://www.tutorialspoint.com/cplusplus/cpp_constants_literals.htm", "title_html": "<h1>C++ Constants/Literals</h1>"}