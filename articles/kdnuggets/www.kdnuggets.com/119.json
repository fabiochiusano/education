{"title_html": "<h1 id=\"title\"><img align=\"right\" alt=\"Gold Blog\" src=\"/images/tkb-1902-g.png\" width=\"94\"/>4 Reasons Why Your Machine Learning Code is Probably Bad</h1> ", "html": "<!DOCTYPE html>\n\n<html lang=\"en-US\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head profile=\"http://gmpg.org/xfn/11\">\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n<title>  4 Reasons Why Your Machine Learning Code is Probably Bad</title>\n<link href=\"/wp-content/themes/kdn17/images/favicon.ico\" rel=\"shortcut icon\"/>\n<link href=\"/wp-content/themes/kdn17/style.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"/wp-content/themes/kdn17/js/jquery-1.9.1.min.js\" type=\"text/javascript\"></script>\n<script src=\"/aps/kda_all.js\" type=\"text/javascript\"></script>\n<link href=\"/feed/\" rel=\"alternate\" title=\"KDnuggets: Analytics, Big Data, Data Mining and Data Science Feed\" type=\"application/rss+xml\"/>\n<link href=\"//s.w.org\" rel=\"dns-prefetch\"/>\n<link href=\"https://www.kdnuggets.com/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/comments/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/2019/02/4-reasons-machine-learning-code-probably-bad.html/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb 4 Reasons Why Your Machine Learning Code is Probably Bad Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-json/\" rel=\"https://api.w.org/\"/>\n<link href=\"https://www.kdnuggets.com/xmlrpc.php?rsd\" rel=\"EditURI\" title=\"RSD\" type=\"application/rsd+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-includes/wlwmanifest.xml\" rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\"/>\n<link href=\"https://www.kdnuggets.com/2019/02/simple-yet-practical-data-cleaning-codes.html\" rel=\"prev\" title=\"Simple Yet Practical Data Cleaning Codes\"/>\n<link href=\"https://www.kdnuggets.com/2019/02/reflections-state-ai-2018.html\" rel=\"next\" title=\"Reflections on the State of AI: 2018\"/>\n<meta content=\"WordPress 4.9.10\" name=\"generator\">\n<link href=\"https://www.kdnuggets.com/2019/02/4-reasons-machine-learning-code-probably-bad.html\" rel=\"canonical\"/>\n<link href=\"https://www.kdnuggets.com/?p=90967\" rel=\"shortlink\"/>\n<link href=\"https://www.kdnuggets.com/2019/02/4-reasons-machine-learning-code-probably-bad.html\" rel=\"canonical\"/>\n<!-- BEGIN ExactMetrics v5.3.7 Universal Analytics - https://exactmetrics.com/ -->\n<script>\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-361129-1', 'auto');\n  ga('send', 'pageview');\n</script>\n<!-- END ExactMetrics Universal Analytics -->\n</meta></head>\n<body class=\"post-template-default single single-post postid-90967 single-format-standard\">\n<div class=\"main_wrapper\"><!-- publ: 26-Feb, 2019  -->\n<div id=\"wrapper\">\n<div id=\"header\">\n<div id=\"header_log\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<h1>KDnuggets</h1>\n<div class=\"text-container\">\n            \u00a0\u00a0<a href=\"/news/subscribe.html\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a> \u00a0|\n <a href=\"https://twitter.com/kdnuggets\" target=\"_blank\"><img alt=\"Twitter\" height=\"48\" src=\"/images/tw_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n <a href=\"https://www.facebook.com/kdnuggets\" target=\"_blank\"><img alt=\"Facebook\" height=\"48\" src=\"/images/fb_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n<a href=\"https://www.linkedin.com/groups/54257/\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"48\" src=\"/images/in_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \n\u00a0|\u00a0 <a href=\"/contact.html\"><b>Contact</b></a>\n</div>\n</div>\n<div class=\"search\">\n<form action=\"/\" id=\"searchform\" method=\"get\">\n<input id=\"s\" name=\"s\" placeholder=\"search KDnuggets\" type=\"text\" value=\"\"/>\n<input type=\"submit\" value=\"Search\"/></form>\n</div>\n<div href=\"#\" id=\"pull\">\n<img class=\"menu\" src=\"/images/menu-30.png\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<img class=\"search-icon\" src=\"/images/search-icon.png\">\n</img></img></div>\n<div id=\"pull-menu\">\n<div class=\"navigation\"><ul class=\"menu\" id=\"menu-menu\"><li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-1070\" id=\"menu-item-1070\"><a href=\"/software/index.html\" title=\"Data Science Software\">SOFTWARE</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13756\" id=\"menu-item-13756\"><a href=\"/news/index.html\" title=\"News\">News/Blog</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-46286\" id=\"menu-item-46286\"><a href=\"/news/top-stories.html\">Top stories</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-42152\" id=\"menu-item-42152\"><a href=\"https://www.kdnuggets.com/opinions/index.html\" title=\"Opinions\">Opinions</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-46415\" id=\"menu-item-46415\"><a href=\"https://www.kdnuggets.com/tutorials/index.html\">Tutorials</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13364\" id=\"menu-item-13364\"><a href=\"/jobs/index.html\" title=\"Jobs in Analytics, Data Science\">JOBS</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-63505\" id=\"menu-item-63505\"><a href=\"https://www.kdnuggets.com/companies/index.html\">Companies</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13366\" id=\"menu-item-13366\"><a href=\"/courses/index.html\">Courses</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-1499\" id=\"menu-item-1499\"><a href=\"https://www.kdnuggets.com/datasets/index.html\">Datasets</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-14286\" id=\"menu-item-14286\"><a href=\"https://www.kdnuggets.com/education/index.html\" title=\"Education in Analytics, Big Data, Data Science\">EDUCATION</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-51558\" id=\"menu-item-51558\"><a href=\"https://www.kdnuggets.com/education/analytics-data-mining-certificates.html\" title=\"Certificates in Analytics, Big Data, Data Science\">Certificates</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-14752\" id=\"menu-item-14752\"><a href=\"/meetings/index.html\">Meetings</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13721\" id=\"menu-item-13721\"><a href=\"/webcasts/index.html\" title=\"Webcasts and Webinars\">Webinars</a></li>\n</ul></div></div>\n</div> <!--#header end-->\n<div id=\"spacer\">\n         \u00a0\n      </div>\n<div id=\"content_wrapper\">\n<div id=\"ad_wrapper\">\n<script type=\"text/javascript\">\n\tjQuery(function() {\n   \t    var pull        = $('#pull');\n            menu        = $('#header .navigation ul');\n            menuImage = $('#header img.menu');\n            mobileMenu        = $('#pull-menu-mobile');\n            search = $('img.search-icon');\n            searchBar = $('div.search');\n            searchClick = false;\n            search.on('click', function() {\n                  searchBar.slideToggle();\n                  searchClick = true;\n            });  \n     \t    $(menuImage).on('click', function(e) {\n\t        //e.preventDefault();\n                if (!searchClick) {\n                  menu.slideToggle();\n                }\n                searchClick = false;\n\t    });\n           /* pullMobile.on('click', function(e) {\n              e.preventDefault();\n                if (!searchClick) {\n                  mobileMenu.slideToggle();\n                }\n                searchClick = false;\n\t    });*/\n            \n\t});\n\tkpath = '/'; kda_top(); kda_sid_init(); kda_sid_n=3;\n\t</script>\n</div> <div class=\"breadcumb\">\n<br/>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2019/index.html\">2019</a> \u00bb <a href=\"https://www.kdnuggets.com/2019/02/index.html\">Feb</a> \u00bb <a href=\"https://www.kdnuggets.com/2019/02/opinions.html\">Opinions</a> \u00bb 4 Reasons Why Your Machine Learning Code is Probably Bad (\u00a0<a href=\"/2019/n09.html\">19:n09</a>\u00a0)    </div>\n<div class=\"single\" id=\"content\">\n<div id=\"post-header\">\n<h1 id=\"title\"><img align=\"right\" alt=\"Gold Blog\" src=\"/images/tkb-1902-g.png\" width=\"94\"/>4 Reasons Why Your Machine Learning Code is Probably Bad</h1>\n<div class=\"pagi\">\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2019/02/simple-yet-practical-data-cleaning-codes.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"> <strong>Previous post</strong></img></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2019/02/reflections-state-ai-2018.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/>\u00a0<br/>\u00a0\n    <div class=\"addthis_native_toolbox\"></div>\n</div>\n<div class=\"tag-data\">Tags: <a href=\"https://www.kdnuggets.com/tag/data-science\" rel=\"tag\">Data Science</a>, <a href=\"https://www.kdnuggets.com/tag/machine-learning\" rel=\"tag\">Machine Learning</a>, <a href=\"https://www.kdnuggets.com/tag/programming\" rel=\"tag\">Programming</a>, <a href=\"https://www.kdnuggets.com/tag/python\" rel=\"tag\">Python</a>, <a href=\"https://www.kdnuggets.com/tag/workflow\" rel=\"tag\">Workflow</a></div>\n<br/>\n<p class=\"excerpt\">\n     Your current ML workflow probably chains together several functions executed linearly. Instead of linearly chaining functions, data science code is better written as a set of tasks with dependencies between them. That is your data science workflow should be a DAG.\n  </p>\n</div>\n<div id=\"post-header-ad\">\n<script type=\"text/javascript\">kda_sid_write(1); kda_sid_n=2;</script>\n</div>\n<hr class=\"grey-line\"/><br/>\n<div class=\"post\" id=\"post-\">\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p><b>By <a href=\"https://www.linkedin.com/in/normanniemer/\" rel=\"noopener noreferrer\" target=\"_blank\">Norman Niemer</a>, Chief Data Scientist</b></p>\n<p><img alt=\"\" class=\"aligncenter\" src=\"/wp-content/uploads/d6tflow-code.jpg\" width=\"99%\"/></p>\n<p>Your current workflow probably chains several functions together like in the example below. While quick, it likely has many problems:</p>\n<ul>\n<li>it doesn't scale well as you add complexity\n<li>you have to manually keep track of which functions were run with which parameter\n<li>you have to manually keep track of where data is saved\n<li>it's difficult for others to read\n</li></li></li></li></ul>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>import pandas as pd\r\nimport sklearn.svm, sklearn.metrics\r\n\r\ndef get_data():\r\n    data = download_data()\r\n    data = clean_data(data)\r\n    data.to_pickle('data.pkl')\r\n\r\ndef preprocess(data):\r\n    data = apply_function(data)\r\n    return data\r\n\r\n# flow parameters\r\nreload_source = True\r\ndo_preprocess = True\r\n\r\n# run workflow\r\nif reload_source:\r\n    get_data()\r\n\r\ndf_train = pd.read_pickle('data.pkl')\r\nif do_preprocess:\r\n    df_train = preprocess(df_train)\r\nmodel = sklearn.svm.SVC()\r\nmodel.fit(df_train.iloc[:,:-1], df_train['y'])\r\nprint(sklearn.metrics.accuracy_score(df_train['y'],model.predict(df_train.iloc[:,:-1])))</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>\u00a0</p>\n<h3>What to do about it?</h3>\n<p>\u00a0<br>\nInstead of linearly chaining functions, data science code is better written as a set of tasks with dependencies between them. That is your data science workflow should be a DAG.</br></p>\n<p>So instead of writing a function that does:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>def process_data(data, parameter):\r\n\r\n    if parameter:\r\n        data = do_stuff(data)\r\n    else:\r\n        data = do_other_stuff(data)\r\n\r\n    data.to_pickle('data.pkl')\r\n    return data</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>You are better of writing tasks that you can chain together as a DAG:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>class TaskProcess(d6tflow.tasks.TaskPqPandas): # define output format\r\n\r\n    def requires(self):\r\n        return TaskGetData() # define dependency\r\n\r\n    def run(self):\r\n        data = self.input().load() # load input data\r\n        data = do_stuff(data) # process data\r\n        self.save(data) # save output data</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>The benefits of doings this are:</p>\n<ul>\n<li>All tasks follow the same pattern no matter how complex your workflow gets\n<li>You have a scalable input\u00a0<code>requires()</code>\u00a0and processing function\u00a0<code>run()</code>\n<li>You can quickly load and save data without having to hardcode filenames\n<li>If the input task is not complete it will automatically run\n<li>If input data or parameters change, the function will automatically rerun\n</li></li></li></li></li></ul>\n<p>\u00a0</p>\n<h3>An example machine learning DAG</h3>\n<p>\u00a0<br/>\nBelow is a stylized example of a machine learning flow which is expressed as a DAG. In the end you just need to run TaskTrain() and it will automatically know which dependencies to run. For a full example see\u00a0<a href=\"https://github.com/d6t/d6tflow/blob/master/docs/example-ml.md\" rel=\"noopener noreferrer\" target=\"_blank\">https://github.com/d6t/d6tflow/blob/master/docs/example-ml.md</a></p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>import pandas as pd\r\nimport sklearn, sklearn.svm\r\nimport d6tflow\r\nimport luigi\r\n\r\n# define workflow\r\nclass TaskGetData(d6tflow.tasks.TaskPqPandas):  # save dataframe as parquet\r\n\r\n    def run(self):\r\n        data = download_data()\r\n        data = clean_data(data)\r\n        self.save(data) # quickly save dataframe\r\n\r\nclass TaskPreprocess(d6tflow.tasks.TaskCachePandas):  # save data in memory\r\n    do_preprocess = luigi.BoolParameter(default=True) # parameter for preprocessing yes/no\r\n\r\n    def requires(self):\r\n        return TaskGetData() # define dependency\r\n\r\n    def run(self):\r\n        df_train = self.input().load() # quickly load required data\r\n        if self.do_preprocess:\r\n            df_train = preprocess(df_train)\r\n        self.save(df_train)\r\n\r\nclass TaskTrain(d6tflow.tasks.TaskPickle): # save output as pickle\r\n    do_preprocess = luigi.BoolParameter(default=True)\r\n\r\n    def requires(self):\r\n        return TaskPreprocess(do_preprocess=self.do_preprocess)\r\n\r\n    def run(self):\r\n        df_train = self.input().load()\r\n        model = sklearn.svm.SVC()\r\n        model.fit(df_train.iloc[:,:-1], df_train['y'])\r\n        self.save(model)\r\n\r\n# Check task dependencies and their execution status\r\nd6tflow.preview(TaskTrain())\r\n\r\n'''\r\n\u2514\u2500--[TaskTrain-{'do_preprocess': 'True'} (PENDING)]\r\n   \u2514\u2500--[TaskPreprocess-{'do_preprocess': 'True'} (PENDING)]\r\n      \u2514\u2500--[TaskGetData-{} (PENDING)]\r\n'''\r\n\r\n# Execute the model training task including dependencies\r\nd6tflow.run(TaskTrain())\r\n\r\n'''\r\n===== Luigi Execution Summary =====\r\n\r\nScheduled 3 tasks of which:\r\n* 3 ran successfully:\r\n    - 1 TaskGetData()\r\n    - 1 TaskPreprocess(do_preprocess=True)\r\n    - 1 TaskTrain(do_preprocess=True)\r\n'''\r\n\r\n# Load task output to pandas dataframe and model object for model evaluation\r\nmodel = TaskTrain().output().load()\r\ndf_train = TaskPreprocess().output().load()\r\nprint(sklearn.metrics.accuracy_score(df_train['y'],model.predict(df_train.iloc[:,:-1])))\r\n# 0.9733333333333334</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>\u00a0</p>\n<h3>Conclusion</h3>\n<p>\u00a0<br/>\nWriting machine learning code as a linear series of functions likely creates many workflow problems. Because of the complex dependencies between different ML tasks it is better to write them as a DAG.\u00a0<a href=\"https://github.com/d6t/d6tflow\" rel=\"noopener noreferrer\" target=\"_blank\">https://github.com/d6t/d6tflow</a>\u00a0makes this very easy. Alternatively you can use <a href=\"https://github.com/spotify/luigi\" rel=\"noopener noreferrer\" target=\"_blank\">luigi</a> and <a href=\"https://airflow.apache.org/\" rel=\"noopener noreferrer\" target=\"_blank\">airflow</a> but they are more optimized for ETL than data science.</p>\n<p>\u00a0<br/>\n<b>Bio: <a href=\"https://www.linkedin.com/in/normanniemer/\" rel=\"noopener noreferrer\" target=\"_blank\">Norman Niemer</a></b> is the Chief Data Scientist at a large asset manager where he delivers data-driven investment insights. He holds a MS Financial Engineering from Columbia University and a BS in Banking and Finance from Cass Business School (London).</p>\n<p><a href=\"https://gist.github.com/d6tdev/44083e201104006b05be7f2ed5eeb5f9\" rel=\"noopener noreferrer\" target=\"_blank\">Original</a>. Reposted with permission.</p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2018/12/machine-learning-project-checklist.html\">The Machine Learning Project Checklist</a>\n<li><a href=\"/2019/01/data-science-project-flow-startups.html\">Data Science Project Flow for Startups</a>\n<li><a href=\"/2019/01/end-to-end-guide-machine-learning-project.html\">End To End Guide For Machine Learning Projects</a>\n</li></li></li></ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p> <script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets';\n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div>\n<div class=\"page-link\"></div>\n<div class=\"pagi\">\n<hr class=\"grey-line\"/>\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2019/02/simple-yet-practical-data-cleaning-codes.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"/> <strong>Previous post</strong></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2019/02/reflections-state-ai-2018.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/><br/>\n<div>\n<hr class=\"grey-line\"/><br/>\n<h2>Top Stories Past 30 Days</h2>\n<table align=\"center\" cellpadding=\"3\" cellspacing=\"10\" class=\"latn\" width=\"100%\">\n<tr>\n<td valign=\"top\" width=\"50%\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Popular</b></th></tr>\n<tr><td>\n<ol class=\"three_ol\"><li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-mp-1-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/03/another-10-free-must-read-books-for-machine-learning-and-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-mp-2-another-10-books');\"><b>Another 10 Free Must-Read Books for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-mp-3-good-from-bad');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n<li> <a href=\"/2018/05/simplilearn-9-must-have-skills-data-scientist.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-mp-4-simplilearn');\"><b>9 Must-have skills you need to become a Data Scientist, updated</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-mp-5-intro-ts');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/03/random-forest-python.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-mp-6-explain-rf');\"><b>Explaining Random Forest (with Python Implementation)</b></a>\n<li> <a href=\"/2019/04/predict-age-gender-using-convolutional-neural-network-opencv.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-mp-7-age-gender');\"><b>Predict Age and Gender Using Convolutional Neural Network and OpenCV</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td> <td valign=\"top\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Shared</b></th></tr>\n<tr><td><ol class=\"three_ol\">\n<li> <a href=\"/2019/03/artificial-neural-networks-optimization-genetic-algorithm-python.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-ms-1-optimization-ga');\"><b>Artificial Neural Networks Optimization using Genetic Algorithm with Python</b></a>\n<li> <a href=\"/2019/04/another-10-free-must-see-courses-machine-learning-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-ms-2-another-10-courses');\"><b>Another 10 Free Must-See Courses for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-ms-3-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/03/r-vs-python-data-visualization.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-ms-4-r-py-viz');\"><b>R vs Python for Data Visualization</b></a>\n<li> <a href=\"/2019/03/simplilearn-8-reasons-microsoft-azure-certification.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-ms-5-azure-cert');\"><b>8 Reasons Why You Should Get a Microsoft Azure Certification</b></a>\n<li> <a href=\"/2019/03/deep-learning-toolset-overview.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-ms-6-dl-toolset');\"><b>The Deep Learning Toolset \u2014 An Overview</b></a>\n<li> <a href=\"/2019/03/work-data-science-ai-big-data.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-ms-7-how-work');\"><b>How To Work In Data Science, AI, Big Data</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<!--#content end--></div>\n<div id=\"sidebar\">\n<div class=\"latn\">\n<h3><b><a href=\"/news/index.html\">Latest News</a></b></h3>\n<ul style=\"font-size:14px; margin-top:5px\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/paw-data-driven-government-workshops-announced.html\">Data Driven Government Workshops Announced!</a><li> <a href=\"https://www.kdnuggets.com/2019/04/rise-generative-adversarial-networks.html\">The Rise of Generative Adversarial Networks</a><li> <a href=\"https://www.kdnuggets.com/jobs/19/04-19-nasdaq100-leader-data-science.html\">NASDAQ 100: Leader of Data Science [East Coast]</a><li> <a href=\"https://www.kdnuggets.com/2019/04/data-visualization-python-matplotlib-seaborn.html\">Data Visualization in Python: Matplotlib vs Seaborn</a><li> <a href=\"https://www.kdnuggets.com/2019/04/intel-unleash-faster-python-data.html\">Unleash a faster Python on your data</a><li> <a href=\"https://www.kdnuggets.com/2019/04/sisense-blox-beyond-dashboards.html\">Sisense BloX \u2013 Go Beyond Dashboards</a></li></li></li></li></li></li></ul>\n</div>\n<div>\n<script type=\"text/javascript\">kda_sid_write(kda_sid_n);</script>\n</div>\n<br/><script src=\"/aps/sbm.js\" type=\"text/javascript\"></script>\n</div>\n</div><div class=\"breadcrumbs_bottom\">\n<div class=\"breadcumb\">\n<br>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2019/index.html\">2019</a> \u00bb <a href=\"https://www.kdnuggets.com/2019/02/index.html\">Feb</a> \u00bb <a href=\"https://www.kdnuggets.com/2019/02/opinions.html\">Opinions</a> \u00bb 4 Reasons Why Your Machine Learning Code is Probably Bad (\u00a0<a href=\"/2019/n09.html\">19:n09</a>\u00a0)    </br></div>\n</div>\n<!--#content_wrapper end--></div>\n<br>\n<div id=\"footer\">\n<br/>\u00a9 2019 KDnuggets. <a href=\"/about/index.html\">About KDnuggets</a>. \u00a0<a href=\"/news/privacy-policy.html\">Privacy policy</a>. <a href=\"/terms-of-service.html\">Terms of Service</a><br/>\u00a0\n<div class=\"kd_bottom\">\n<div class=\"footer-container\">\n<div class=\"footer-news\">\n<a href=\"/news/subscribe.html\" onclick=\"_gaq.push(['_trackPageview','/x/bot/sub']);\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a>\n</div>\n<div class=\"footer-sm\">\n<a href=\"https://twitter.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/twt']);\" target=\"_blank\"><img height=\"32\" src=\"/images/tw_c48.png\" width=\"32\"/></a>\n<a href=\"https://facebook.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/fb']);\" target=\"_blank\"><img alt=\"Facebook\" height=\"32\" src=\"/images/fb_c48.png\" width=\"32\"/></a>\n<a href=\"https://www.linkedin.com/groups/54257\" onclick=\"_gaq.push(['_trackPageview','/x/bot/in']);\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"32\" src=\"/images/in_c48.png\" width=\"32\"/></a>\n</div>\n</div>\n<div class=\"close-footer\">X</div>\n</div>\n<script type=\"text/javascript\">\n  jQuery('.close-footer').click(\n      function(){       \n         jQuery('.kd_bottom').hide();\n      }\n   );\n</script> </div>\n<div class=\"clear\"><!--blank--></div>\n</br></div>\n<div style=\"display: none;\"><div id=\"boxzilla-box-82996-content\"><script type=\"text/javascript\">(function() {\n\tif (!window.mc4wp) {\n\t\twindow.mc4wp = {\n\t\t\tlisteners: [],\n\t\t\tforms    : {\n\t\t\t\ton: function (event, callback) {\n\t\t\t\t\twindow.mc4wp.listeners.push({\n\t\t\t\t\t\tevent   : event,\n\t\t\t\t\t\tcallback: callback\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})();\n</script><!-- MailChimp for WordPress v4.1.14 - https://wordpress.org/plugins/mailchimp-for-wp/ --><form class=\"mc4wp-form mc4wp-form-77281\" data-id=\"77281\" data-name=\"Subscribe to KDnuggets News\" id=\"mc4wp-form-1\" method=\"post\"><div class=\"mc4wp-form-fields\"><div class=\"header-container\">\n<img align=\"left\" src=\"/wp-content/uploads/envelope.png\"><a href=\"/news/subscribe.html\">Get KDnuggets, a leading newsletter on AI, \r\n  Data Science, and Machine Learning</a>\n</img></div>\n<div class=\"form-fields\">\n<div class=\"field-container\"><label>Email:</label><input maxlength=\"60\" name=\"EMAIL\" placeholder=\"Your email\" required=\"\" size=\"30\" type=\"email\"/></div>\n<div class=\"field-container submit-container\"><div class=\"form-button\" onclick=\"document.getElementById('mc4wp-form-1').submit()\">Sign Up</div></div>\n</div>\n<label style=\"display: none !important;\">Leave this field empty if you're human: <input autocomplete=\"off\" name=\"_mc4wp_honeypot\" tabindex=\"-1\" type=\"text\" value=\"\"/></label><input name=\"_mc4wp_timestamp\" type=\"hidden\" value=\"1555892006\"/><input name=\"_mc4wp_form_id\" type=\"hidden\" value=\"77281\"/><input name=\"_mc4wp_form_element_id\" type=\"hidden\" value=\"mc4wp-form-1\"/></div><div class=\"mc4wp-response\"></div></form><!-- / MailChimp for WordPress Plugin -->\n</div></div><script type=\"text/javascript\">(function() {function addEventListener(element,event,handler) {\n\tif(element.addEventListener) {\n\t\telement.addEventListener(event,handler, false);\n\t} else if(element.attachEvent){\n\t\telement.attachEvent('on'+event,handler);\n\t}\n}function maybePrefixUrlField() {\n\tif(this.value.trim() !== '' && this.value.indexOf('http') !== 0) {\n\t\tthis.value = \"http://\" + this.value;\n\t}\n}\n\nvar urlFields = document.querySelectorAll('.mc4wp-form input[type=\"url\"]');\nif( urlFields && urlFields.length > 0 ) {\n\tfor( var j=0; j < urlFields.length; j++ ) {\n\t\taddEventListener(urlFields[j],'blur',maybePrefixUrlField);\n\t}\n}/* test if browser supports date fields */\nvar testInput = document.createElement('input');\ntestInput.setAttribute('type', 'date');\nif( testInput.type !== 'date') {\n\n\t/* add placeholder & pattern to all date fields */\n\tvar dateFields = document.querySelectorAll('.mc4wp-form input[type=\"date\"]');\n\tfor(var i=0; i<dateFields.length; i++) {\n\t\tif(!dateFields[i].placeholder) {\n\t\t\tdateFields[i].placeholder = 'YYYY-MM-DD';\n\t\t}\n\t\tif(!dateFields[i].pattern) {\n\t\t\tdateFields[i].pattern = '[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])';\n\t\t}\n\t}\n}\n\n})();</script><script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_options = {\"testMode\":\"\",\"boxes\":[{\"id\":82996,\"icon\":\"&times;\",\"content\":\"\",\"css\":{\"background_color\":\"#eeee22\",\"width\":600,\"border_width\":2,\"border_style\":\"double\",\"position\":\"center\"},\"trigger\":{\"method\":\"time_on_page\",\"value\":\"3\"},\"animation\":\"fade\",\"cookie\":{\"triggered\":0,\"dismissed\":336},\"rehide\":true,\"position\":\"center\",\"screenWidthCondition\":{\"condition\":\"larger\",\"value\":500},\"closable\":true,\"post\":{\"id\":82996,\"title\":\"Subscribe to KDnuggets\",\"slug\":\"subscribe-to-kdnuggets\"}}]};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla/assets/js/script.min.js?ver=3.2.5\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_stats_config = {\"ajaxurl\":\"https:\\/\\/www.kdnuggets.com\\/wp-admin\\/admin-ajax.php?action=boxzilla_stats_track\"};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla-stats/assets/js/tracking.min.js?ver=1.0.4\" type=\"text/javascript\"></script>\n<script src=\"https://www.kdnuggets.com/wp-includes/js/wp-embed.min.js?ver=4.9.10\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar mc4wp_forms_config = [];\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/forms-api.min.js?ver=4.1.14\" type=\"text/javascript\"></script>\n<!--[if lte IE 9]>\n<script type='text/javascript' src='https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/third-party/placeholders.min.js?ver=4.1.14'></script>\n<![endif]-->\n<!--/.main_wrapper--></body></html>\n<script src=\"https://s7.addthis.com/js/300/addthis_widget.js#pubid=gpsaddthis\" type=\"text/javascript\"></script>\n\n\n<!-- Dynamic page generated in 0.651 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2019-04-21 20:13:26 -->\n<!-- Compression = gzip -->", "content": "\n    comments   \n By  Norman Niemer  , Chief Data Scientist   \n   \n Your current workflow probably chains several functions together like in the example below. While quick, it likely has many problems:  \n \n it doesn't scale well as you add complexity\n you have to manually keep track of which functions were run with which parameter\n you have to manually keep track of where data is saved\n it's difficult for others to read\n      \n \n import pandas as pd\r\nimport sklearn.svm, sklearn.metrics\r\n\r\ndef get_data():\r\n    data = download_data()\r\n    data = clean_data(data)\r\n    data.to_pickle('data.pkl')\r\n\r\ndef preprocess(data):\r\n    data = apply_function(data)\r\n    return data\r\n\r\n# flow parameters\r\nreload_source = True\r\ndo_preprocess = True\r\n\r\n# run workflow\r\nif reload_source:\r\n    get_data()\r\n\r\ndf_train = pd.read_pickle('data.pkl')\r\nif do_preprocess:\r\n    df_train = preprocess(df_train)\r\nmodel = sklearn.svm.SVC()\r\nmodel.fit(df_train.iloc[:,:-1], df_train['y'])\r\nprint(sklearn.metrics.accuracy_score(df_train['y'],model.predict(df_train.iloc[:,:-1])))  \n  \n   \n \u00a0  \n What to do about it?  \n \u00a0 \nInstead of linearly chaining functions, data science code is better written as a set of tasks with dependencies between them. That is your data science workflow should be a DAG.   \n So instead of writing a function that does:  \n \n def process_data(data, parameter):\r\n\r\n    if parameter:\r\n        data = do_stuff(data)\r\n    else:\r\n        data = do_other_stuff(data)\r\n\r\n    data.to_pickle('data.pkl')\r\n    return data  \n  \n   \n You are better of writing tasks that you can chain together as a DAG:  \n \n class TaskProcess(d6tflow.tasks.TaskPqPandas): # define output format\r\n\r\n    def requires(self):\r\n        return TaskGetData() # define dependency\r\n\r\n    def run(self):\r\n        data = self.input().load() # load input data\r\n        data = do_stuff(data) # process data\r\n        self.save(data) # save output data  \n  \n   \n The benefits of doings this are:  \n \n All tasks follow the same pattern no matter how complex your workflow gets\n You have a scalable input\u00a0 requires()  \u00a0and processing function\u00a0 run()  \n You can quickly load and save data without having to hardcode filenames\n If the input task is not complete it will automatically run\n If input data or parameters change, the function will automatically rerun\n       \n \u00a0  \n An example machine learning DAG  \n \u00a0  \nBelow is a stylized example of a machine learning flow which is expressed as a DAG. In the end you just need to run TaskTrain() and it will automatically know which dependencies to run. For a full example see\u00a0 https://github.com/d6t/d6tflow/blob/master/docs/example-ml.md   \n \n import pandas as pd\r\nimport sklearn, sklearn.svm\r\nimport d6tflow\r\nimport luigi\r\n\r\n# define workflow\r\nclass TaskGetData(d6tflow.tasks.TaskPqPandas):  # save dataframe as parquet\r\n\r\n    def run(self):\r\n        data = download_data()\r\n        data = clean_data(data)\r\n        self.save(data) # quickly save dataframe\r\n\r\nclass TaskPreprocess(d6tflow.tasks.TaskCachePandas):  # save data in memory\r\n    do_preprocess = luigi.BoolParameter(default=True) # parameter for preprocessing yes/no\r\n\r\n    def requires(self):\r\n        return TaskGetData() # define dependency\r\n\r\n    def run(self):\r\n        df_train = self.input().load() # quickly load required data\r\n        if self.do_preprocess:\r\n            df_train = preprocess(df_train)\r\n        self.save(df_train)\r\n\r\nclass TaskTrain(d6tflow.tasks.TaskPickle): # save output as pickle\r\n    do_preprocess = luigi.BoolParameter(default=True)\r\n\r\n    def requires(self):\r\n        return TaskPreprocess(do_preprocess=self.do_preprocess)\r\n\r\n    def run(self):\r\n        df_train = self.input().load()\r\n        model = sklearn.svm.SVC()\r\n        model.fit(df_train.iloc[:,:-1], df_train['y'])\r\n        self.save(model)\r\n\r\n# Check task dependencies and their execution status\r\nd6tflow.preview(TaskTrain())\r\n\r\n'''\r\n\u2514\u2500--[TaskTrain-{'do_preprocess': 'True'} (PENDING)]\r\n   \u2514\u2500--[TaskPreprocess-{'do_preprocess': 'True'} (PENDING)]\r\n      \u2514\u2500--[TaskGetData-{} (PENDING)]\r\n'''\r\n\r\n# Execute the model training task including dependencies\r\nd6tflow.run(TaskTrain())\r\n\r\n'''\r\n===== Luigi Execution Summary =====\r\n\r\nScheduled 3 tasks of which:\r\n* 3 ran successfully:\r\n    - 1 TaskGetData()\r\n    - 1 TaskPreprocess(do_preprocess=True)\r\n    - 1 TaskTrain(do_preprocess=True)\r\n'''\r\n\r\n# Load task output to pandas dataframe and model object for model evaluation\r\nmodel = TaskTrain().output().load()\r\ndf_train = TaskPreprocess().output().load()\r\nprint(sklearn.metrics.accuracy_score(df_train['y'],model.predict(df_train.iloc[:,:-1])))\r\n# 0.9733333333333334  \n  \n   \n \u00a0  \n Conclusion  \n \u00a0  \nWriting machine learning code as a linear series of functions likely creates many workflow problems. Because of the complex dependencies between different ML tasks it is better to write them as a DAG.\u00a0 https://github.com/d6t/d6tflow  \u00a0makes this very easy. Alternatively you can use  luigi   and  airflow   but they are more optimized for ETL than data science.  \n \u00a0  \n Bio:  Norman Niemer    is the Chief Data Scientist at a large asset manager where he delivers data-driven investment insights. He holds a MS Financial Engineering from Columbia University and a BS in Banking and Finance from Cass Business School (London).  \n Original  . Reposted with permission.  \n Related:   \n \n The Machine Learning Project Checklist  \n Data Science Project Flow for Startups  \n End To End Guide For Machine Learning Projects  \n     \n   \n  \n     \n  ", "title": " 4 Reasons Why Your Machine Learning Code is Probably Bad  ", "content_html": "<div class=\"post\" id=\"post-\">\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p><b>By <a href=\"https://www.linkedin.com/in/normanniemer/\" rel=\"noopener noreferrer\" target=\"_blank\">Norman Niemer</a>, Chief Data Scientist</b></p>\n<p><img alt=\"\" class=\"aligncenter\" src=\"/wp-content/uploads/d6tflow-code.jpg\" width=\"99%\"/></p>\n<p>Your current workflow probably chains several functions together like in the example below. While quick, it likely has many problems:</p>\n<ul>\n<li>it doesn't scale well as you add complexity\n<li>you have to manually keep track of which functions were run with which parameter\n<li>you have to manually keep track of where data is saved\n<li>it's difficult for others to read\n</li></li></li></li></ul>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>import pandas as pd\r\nimport sklearn.svm, sklearn.metrics\r\n\r\ndef get_data():\r\n    data = download_data()\r\n    data = clean_data(data)\r\n    data.to_pickle('data.pkl')\r\n\r\ndef preprocess(data):\r\n    data = apply_function(data)\r\n    return data\r\n\r\n# flow parameters\r\nreload_source = True\r\ndo_preprocess = True\r\n\r\n# run workflow\r\nif reload_source:\r\n    get_data()\r\n\r\ndf_train = pd.read_pickle('data.pkl')\r\nif do_preprocess:\r\n    df_train = preprocess(df_train)\r\nmodel = sklearn.svm.SVC()\r\nmodel.fit(df_train.iloc[:,:-1], df_train['y'])\r\nprint(sklearn.metrics.accuracy_score(df_train['y'],model.predict(df_train.iloc[:,:-1])))</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>\u00a0</p>\n<h3>What to do about it?</h3>\n<p>\u00a0<br>\nInstead of linearly chaining functions, data science code is better written as a set of tasks with dependencies between them. That is your data science workflow should be a DAG.</br></p>\n<p>So instead of writing a function that does:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>def process_data(data, parameter):\r\n\r\n    if parameter:\r\n        data = do_stuff(data)\r\n    else:\r\n        data = do_other_stuff(data)\r\n\r\n    data.to_pickle('data.pkl')\r\n    return data</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>You are better of writing tasks that you can chain together as a DAG:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>class TaskProcess(d6tflow.tasks.TaskPqPandas): # define output format\r\n\r\n    def requires(self):\r\n        return TaskGetData() # define dependency\r\n\r\n    def run(self):\r\n        data = self.input().load() # load input data\r\n        data = do_stuff(data) # process data\r\n        self.save(data) # save output data</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>The benefits of doings this are:</p>\n<ul>\n<li>All tasks follow the same pattern no matter how complex your workflow gets\n<li>You have a scalable input\u00a0<code>requires()</code>\u00a0and processing function\u00a0<code>run()</code>\n<li>You can quickly load and save data without having to hardcode filenames\n<li>If the input task is not complete it will automatically run\n<li>If input data or parameters change, the function will automatically rerun\n</li></li></li></li></li></ul>\n<p>\u00a0</p>\n<h3>An example machine learning DAG</h3>\n<p>\u00a0<br/>\nBelow is a stylized example of a machine learning flow which is expressed as a DAG. In the end you just need to run TaskTrain() and it will automatically know which dependencies to run. For a full example see\u00a0<a href=\"https://github.com/d6t/d6tflow/blob/master/docs/example-ml.md\" rel=\"noopener noreferrer\" target=\"_blank\">https://github.com/d6t/d6tflow/blob/master/docs/example-ml.md</a></p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>import pandas as pd\r\nimport sklearn, sklearn.svm\r\nimport d6tflow\r\nimport luigi\r\n\r\n# define workflow\r\nclass TaskGetData(d6tflow.tasks.TaskPqPandas):  # save dataframe as parquet\r\n\r\n    def run(self):\r\n        data = download_data()\r\n        data = clean_data(data)\r\n        self.save(data) # quickly save dataframe\r\n\r\nclass TaskPreprocess(d6tflow.tasks.TaskCachePandas):  # save data in memory\r\n    do_preprocess = luigi.BoolParameter(default=True) # parameter for preprocessing yes/no\r\n\r\n    def requires(self):\r\n        return TaskGetData() # define dependency\r\n\r\n    def run(self):\r\n        df_train = self.input().load() # quickly load required data\r\n        if self.do_preprocess:\r\n            df_train = preprocess(df_train)\r\n        self.save(df_train)\r\n\r\nclass TaskTrain(d6tflow.tasks.TaskPickle): # save output as pickle\r\n    do_preprocess = luigi.BoolParameter(default=True)\r\n\r\n    def requires(self):\r\n        return TaskPreprocess(do_preprocess=self.do_preprocess)\r\n\r\n    def run(self):\r\n        df_train = self.input().load()\r\n        model = sklearn.svm.SVC()\r\n        model.fit(df_train.iloc[:,:-1], df_train['y'])\r\n        self.save(model)\r\n\r\n# Check task dependencies and their execution status\r\nd6tflow.preview(TaskTrain())\r\n\r\n'''\r\n\u2514\u2500--[TaskTrain-{'do_preprocess': 'True'} (PENDING)]\r\n   \u2514\u2500--[TaskPreprocess-{'do_preprocess': 'True'} (PENDING)]\r\n      \u2514\u2500--[TaskGetData-{} (PENDING)]\r\n'''\r\n\r\n# Execute the model training task including dependencies\r\nd6tflow.run(TaskTrain())\r\n\r\n'''\r\n===== Luigi Execution Summary =====\r\n\r\nScheduled 3 tasks of which:\r\n* 3 ran successfully:\r\n    - 1 TaskGetData()\r\n    - 1 TaskPreprocess(do_preprocess=True)\r\n    - 1 TaskTrain(do_preprocess=True)\r\n'''\r\n\r\n# Load task output to pandas dataframe and model object for model evaluation\r\nmodel = TaskTrain().output().load()\r\ndf_train = TaskPreprocess().output().load()\r\nprint(sklearn.metrics.accuracy_score(df_train['y'],model.predict(df_train.iloc[:,:-1])))\r\n# 0.9733333333333334</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>\u00a0</p>\n<h3>Conclusion</h3>\n<p>\u00a0<br/>\nWriting machine learning code as a linear series of functions likely creates many workflow problems. Because of the complex dependencies between different ML tasks it is better to write them as a DAG.\u00a0<a href=\"https://github.com/d6t/d6tflow\" rel=\"noopener noreferrer\" target=\"_blank\">https://github.com/d6t/d6tflow</a>\u00a0makes this very easy. Alternatively you can use <a href=\"https://github.com/spotify/luigi\" rel=\"noopener noreferrer\" target=\"_blank\">luigi</a> and <a href=\"https://airflow.apache.org/\" rel=\"noopener noreferrer\" target=\"_blank\">airflow</a> but they are more optimized for ETL than data science.</p>\n<p>\u00a0<br/>\n<b>Bio: <a href=\"https://www.linkedin.com/in/normanniemer/\" rel=\"noopener noreferrer\" target=\"_blank\">Norman Niemer</a></b> is the Chief Data Scientist at a large asset manager where he delivers data-driven investment insights. He holds a MS Financial Engineering from Columbia University and a BS in Banking and Finance from Cass Business School (London).</p>\n<p><a href=\"https://gist.github.com/d6tdev/44083e201104006b05be7f2ed5eeb5f9\" rel=\"noopener noreferrer\" target=\"_blank\">Original</a>. Reposted with permission.</p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2018/12/machine-learning-project-checklist.html\">The Machine Learning Project Checklist</a>\n<li><a href=\"/2019/01/data-science-project-flow-startups.html\">Data Science Project Flow for Startups</a>\n<li><a href=\"/2019/01/end-to-end-guide-machine-learning-project.html\">End To End Guide For Machine Learning Projects</a>\n</li></li></li></ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p> <script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets';\n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div> ", "url": "https://www.kdnuggets.com/2019/02/4-reasons-machine-learning-code-probably-bad.html"}