{"content": "By Olga Davydova, Data Monsters . An artificial neural network (ANN) \u00a0is a computational nonlinear model based on the neural structure of the brain that is able to learn to perform tasks like classification, prediction, decision-making, visualization, and others just by considering examples. An artificial neural network consists of artificial neurons or processing elements and is organized in three interconnected layers: input, hidden that may include more than one layer, and output. An artificial neural network ( /wiki/Artificial_neural_network#/media/File:Colored_neural_network.svg ) The input layer contains input neurons that send information to the hidden layer. The hidden layer sends data to the output layer. Every neuron has weighted inputs ( synapses ), an\u00a0 activation function \u00a0(defines the output given an input), and one output. Synapses are the adjustable parameters that convert a neural network to a parameterized system. Artificial neuron with four inputs ( /wiki/File:Artificialneuron.png ) The weighted sum of the inputs produces the activation signal that is passed to the activation function to obtain one output from the neuron. The commonly used activation functions are linear, step, sigmoid, tanh, and rectified linear unit (ReLu) functions. Linear Function =ax Step Function Logistic (Sigmoid) Function Tanh Function Rectified linear unit (ReLu) Function Training is the weights optimizing process in which the error of predictions is minimized and the network reaches a specified level of accuracy. The method mostly used to determine the error contribution of each neuron is called\u00a0 backpropagation \u00a0that calculates the gradient of the loss function. It is possible to make the system more flexible and more powerful by using additional hidden layers. Artificial neural networks with multiple hidden layers between the input and output layers are called\u00a0 deep neural networks (DNNs) , and they can model complex nonlinear relationships. \u00a0 1. Multilayer perceptron (MLP) \u00a0 A perceptron\u00a0( /wikipedia/ru/d/de/Neuro.PNG ) A multilayer perceptron (MLP) has three or more layers. It utilizes a nonlinear activation function (mainly hyperbolic tangent or logistic function) that lets it classify data that is not linearly separable. Every node in a layer connects to each node in the following layer making the network fully connected. For example, multilayer perceptron natural language processing (NLP) applications are speech recognition and machine translation. \u00a0 2. Convolutional neural network\u00a0(CNN) \u00a0 Typical CNN architecture ( /wiki/Convolutional_neural_network#/media/File:Typical_cnn.png ) A convolutional neural network (CNN) contains one or more convolutional layers, pooling or fully connected, and uses a variation of multilayer perceptrons discussed above. Convolutional layers use a\u00a0 convolution operation \u00a0to the input passing the result to the next layer. This operation allows the network to be deeper with much fewer parameters. Convolutional neural networks show outstanding results in image and speech applications. Yoon Kim in\u00a0 Convolutional Neural Networks for Sentence Classification \u00a0describes the process and the results of text classification tasks using CNNs\u00a0 [1] . He presents a model built on top of\u00a0 word2vec , conducts a series of experiments with it, and tests it against several benchmarks, demonstrating that the model performs excellent. In\u00a0 Text Understanding from Scratch , Xiang Zhang and Yann LeCun, demonstrate that CNNs can achieve outstanding performance without the knowledge of words, phrases, sentences and any other syntactic or semantic structures with regards to a human language\u00a0 [2] . Semantic parsing\u00a0 [3] , paraphrase detection\u00a0 [4] , speech recognition\u00a0 [5] \u00a0are also the applications of CNNs.", "title_html": "<h1 id=\"title\"><img align=\"right\" alt=\"Silver Blog\" src=\"/images/tkb-1710-s.png\" width=\"94\"/>7 Types of Artificial Neural Networks for Natural Language Processing</h1> ", "url": "https://www.kdnuggets.com/2017/10/7-types-artificial-neural-networks-natural-language-processing.html", "tfidf": {"tfidf": {"base": 1.14628158845, "natur": 1.5392670157100001, "typicalcnnpng": 1323.0, "built": 1.99447236181, "signal": 5.12459651388, "neuron": 385.6518218622, "addit": 1.24634950542, "paramet": 34.513043478200004, "human": 1.8965476048299998, "layer": 122.1230769231, "follow": 1.04640126549, "contain": 3.19629555064, "four": 1.20950784702, "function": 29.94530022, "neural": 654.0674157303, "sentenc": 11.69072164948, "just": 1.33580143037, "interconnect": 30.297709923699998, "wikiconvolutionalneuralnetwork": 1323.0, "classifi": 5.2937645882, "lecun": 1323.0, "defin": 2.72830383227, "contribut": 1.9255306246200001, "train": 1.9365698950999999, "translat": 2.85745140389, "complex": 2.34021226415, "multipl": 2.74813917258, "test": 2.65707112971, "present": 1.25551601423, "wordnumvec": 1323.0, "seri": 1.46511627907, "semant": 78.2068965518, "deeper": 15.0769230769, "for": 2.00063008002, "word": 1.7965372864099998, "benchmark": 51.8823529412, "deep": 3.6279707495399998, "the": 34.0, "consid": 1.2397313759200002, "unit": 2.30789358918, "yoon": 407.07692307699995, "power": 1.3396337861799998, "linear": 69.388111888, "next": 1.4950560316400001, "perform": 4.59419311275, "recognit": 8.80044345898, "demonstr": 5.29994992488, "obtain": 2.68629441624, "classif": 24.201219512190004, "connect": 5.653175074170001, "inform": 1.5753125620200001, "num": 7.00220528007, "conduct": 2.2637958077900002, "hidden": 39.0649606299, "organ": 1.6387283237, "exampl": 3.00966824644, "has": 2.0872995004, "given": 1.35426085473, "knowledg": 3.3981164383599998, "adjust": 7.112903225810001, "pass": 3.23636734278, "experi": 1.87062566278, "wikifil": 1323.0, "model": 8.3623913616, "than": 1.03278688525, "possibl": 1.4173734488, "abl": 1.8208510150200001, "structur": 4.1161524500999995, "much": 1.1942229577299999, "pool": 7.052865393160001, "also": 1.01476510067, "optim": 11.5377906977, "typic": 2.2541530597799997, "specifi": 6.920662598080001, "loss": 2.42529789184, "not": 1.01567398119, "task": 7.77282741738, "syntact": 87.7127071823, "are": 5.1495296789000005, "may": 1.05201775893, "minim": 6.10850327049, "decisionmak": 1323.0, "one": 4.02509982888, "regard": 1.78944995491, "describ": 1.47027227264, "kim": 13.7216940363, "paraphras": 63.2509960159, "util": 4.65981802172, "convert": 3.2740771293099997, "separ": 1.6012102874399998, "system": 2.77479681902, "reach": 1.49801849406, "let": 3.48616600791, "determin": 2.1658935879900003, "outstand": 15.53424657534, "logist": 28.1989342806, "which": 1.005191845, "node": 88.6927374302, "davydova": 1323.0, "activ": 7.32017705645, "other": 2.01984732824, "without": 1.29547123623, "calcul": 6.12972972973, "consist": 1.4901445466499998, "show": 1.26703910615, "fewer": 5.94829524166, "parameter": 330.75, "accuraci": 12.7620578778, "imag": 2.70137825421, "sever": 1.07241286139, "network": 33.71801993144, "like": 1.14918566775, "three": 2.13243787778, "abov": 1.90382539873, "tanh": 2646.0, "detect": 5.41288782816, "sum": 6.681818181819999, "backpropag": 1323.0, "element": 2.36004162331, "includ": 1.0190641247799999, "coloredneuralnetworksvg": 1323.0, "languag": 4.58976582828, "phrase": 6.18465134398, "ani": 1.13383802314, "cnns": 3969.0, "from": 2.00113442994, "process": 6.78099305928, "allow": 1.2716059271100002, "mediafil": 2646.0, "relu": 2646.0, "most": 1.02096463023, "between": 1.03453668708, "excel": 4.84467500763, "predict": 10.3696930111, "wikipediaruddeneuropng": 1323.0, "output": 46.06189555128, "top": 1.8387769284200002, "fulli": 5.58031634446, "with": 5.005991044949999, "input": 109.8262874709, "gradient": 41.889182058, "result": 3.43834825296, "rectifi": 108.7397260274, "synaps": 423.36, "xiang": 182.482758621, "that": 10.0398406375, "weight": 14.636754763379997, "architectur": 5.12790697674, "call": 2.1353059852, "more": 5.085853408499999, "and": 16.00100787408, "produc": 1.36932896326, "discuss": 2.19676214197, "achiev": 1.87216981132, "pars": 145.651376147, "artifici": 49.898376113160005, "visual": 5.22752716497, "artificialneuronpng": 1323.0, "monster": 15.0769230769, "sigmoid": 2116.8, "can": 2.35252278284, "comput": 3.9277585353800006, "make": 2.1525320317200003, "olga": 64.5365853659, "each": 2.37949640288, "hyperbol": 85.8162162162, "they": 1.03017325287, "applic": 10.28016404058, "this": 1.00379362671, "speech": 11.468336142540002, "step": 5.655860349119999, "scratch": 25.8146341463, "error": 12.08219178082, "zhang": 43.8563535912, "common": 1.4025974025999999, "data": 10.12930667802, "yann": 378.0, "oper": 3.10958769954, "method": 2.5714285714300003, "machin": 4.02433460076, "level": 1.6544393497299998, "convolut": 707.847133756, "perceptron": 6615.0, "tangent": 104.44736842100001, "text": 6.25655172414, "send": 7.50106307584, "understand": 2.96858638743, "variat": 4.704, "wikiartificialneuralnetwork": 1323.0, "everi": 2.95835274388, "nonlinear": 297.67499999999995, "dnns": 1323.0, "use": 6.177832544279999, "relationship": 2.39132399458, "against": 1.2902072328299998, "flexibl": 9.68639414277, "main": 1.25303867403, "learn": 2.32275054865, "brain": 8.929133858270001, "multilay": 1296.0}, "logtfidf": {"base": 0.13652330228700002, "natur": 0.431306339292, "typicalcnnpng": 7.18765716411, "built": 0.690379535065, "signal": 1.6340517929299998, "neuron": 24.97905286362, "addit": 0.220218882972, "paramet": 5.696380287719999, "human": 0.640035183243, "layer": 31.454687435250005, "follow": 0.045356911094199995, "contain": 0.937690636472, "four": 0.190213538869, "function": 10.973588899128, "neural": 44.9384667105, "sentenc": 3.5312966504400003, "just": 0.289531434109, "interconnect": 3.41107212958, "wikiconvolutionalneuralnetwork": 7.18765716411, "classifi": 1.6665296351499999, "lecun": 7.18765716411, "defin": 1.00368010925, "contribut": 0.655201578909, "train": 0.660918312839, "translat": 1.0499301100299998, "complex": 0.8502416364309999, "multipl": 1.01092401812, "test": 0.977224437103, "present": 0.227546654799, "wordnumvec": 7.18765716411, "seri": 0.38193461069799994, "semant": 7.3324213086, "deeper": 2.7131653017699997, "for": 0.0006299807907940001, "word": 0.585861082385, "benchmark": 3.9489787119499997, "deep": 1.2886734698, "the": 0.0, "consid": 0.214894723824, "unit": 0.286376123634, "yoon": 6.009002167769999, "power": 0.292396282715, "linear": 13.151388209799999, "next": 0.402163685499, "perform": 1.27854255174, "recognit": 2.9633098654400003, "demonstr": 1.9491003836379999, "obtain": 0.988162703503, "classif": 6.263372208870001, "connect": 1.9008151760460001, "inform": 0.454453704662, "num": 0.0022049327677790003, "conduct": 0.817042965366, "hidden": 10.278940026, "organ": 0.49392052866999997, "exampl": 0.8173653499979999, "has": 0.0854478897096, "given": 0.303255810831, "knowledg": 1.2232212893899999, "adjust": 1.9619104904, "pass": 0.96260865948, "experi": 0.626272953933, "wikifil": 7.18765716411, "model": 2.9498002924440003, "than": 0.0322608622182, "possibl": 0.348805474891, "abl": 0.599303982475, "structur": 1.4435433502700001, "much": 0.17749572930100002, "pool": 1.953433973, "also": 0.0146571578, "optim": 2.4456277954099996, "typic": 0.812774319158, "specifi": 1.93451151621, "loss": 0.885954358842, "not": 0.0155524130075, "task": 2.71497361322, "syntact": 4.47406678264, "are": 0.1473373679135, "may": 0.050709995284400004, "minim": 1.80968177926, "decisionmak": 7.18765716411, "one": 0.025021406582, "regard": 0.5819082848730001, "describ": 0.385447603125, "kim": 2.61897808671, "paraphras": 4.14711087477, "util": 1.5389763962399998, "convert": 1.1860360368, "separ": 0.470759772949, "system": 0.65486069117, "reach": 0.40414323085000003, "let": 1.2488025672799998, "determin": 0.772833019022, "outstand": 4.09979972516, "logist": 5.2922740104, "which": 0.00517841384543, "node": 7.584061655, "davydova": 7.18765716411, "activ": 1.90598301642, "other": 0.01974949583952, "without": 0.258874517941, "calcul": 1.8131506592099997, "consist": 0.398873126426, "show": 0.236682766013, "fewer": 1.7831046645, "parameter": 5.801362803, "accuraci": 2.5464765406, "imag": 0.99376210729, "sever": 0.06991112039689999, "network": 12.390079689675998, "like": 0.139053576545, "three": 0.12823737644980002, "abov": 0.643865229816, "tanh": 14.37531432822, "detect": 1.68878274493, "sum": 1.89939013342, "backpropag": 7.18765716411, "element": 0.8586792558769999, "includ": 0.0188846813905, "coloredneuralnetworksvg": 7.18765716411, "languag": 1.6613636488119998, "phrase": 1.82207063303, "ani": 0.125608358366, "cnns": 21.56297149233, "from": 0.001134108337732, "process": 2.1113167961, "allow": 0.24028061118900002, "mediafil": 14.37531432822, "relu": 14.37531432822, "most": 0.020747896295599998, "between": 0.033953681165299995, "excel": 1.5778801652, "predict": 3.2914804753799998, "wikipediaruddeneuropng": 7.18765716411, "output": 12.22935946962, "top": 0.609100637788, "fulli": 2.05219657356, "with": 0.00598745856695, "input": 22.51507801851, "gradient": 3.73502760882, "result": 0.40913672514300004, "rectifi": 7.991620023260001, "synaps": 10.71015140074, "xiang": 5.206655695249999, "that": 0.039761483796399995, "weight": 4.7547705783600005, "architectur": 1.63469757919, "call": 0.1309255488976, "more": 0.08512465799999999, "and": 0.0010078422730176, "produc": 0.314320812003, "discuss": 0.78698452262, "achiev": 0.6270980851169999, "pars": 4.9812159316699995, "artifici": 12.709373941079999, "visual": 1.6539383488600001, "artificialneuronpng": 7.18765716411, "monster": 2.7131653017699997, "sigmoid": 13.929027225599999, "can": 0.324682192788, "comput": 1.36806891594, "make": 0.14699531564579998, "olga": 4.16723227797, "each": 0.347483378608, "hyperbol": 4.45220798882, "they": 0.0297269947676, "applic": 3.6948117854699998, "this": 0.0037864490525, "speech": 4.02293271081, "step": 2.07909011396, "scratch": 3.2509415461, "error": 3.5971708686, "zhang": 3.78091960208, "common": 0.338325805271, "data": 3.6504617544, "yann": 5.934894195619999, "oper": 0.882685928694, "method": 0.944461608841, "machin": 1.39235958062, "level": 0.503462189943, "convolut": 32.31422605985, "perceptron": 35.93828582055, "tangent": 4.6486832930599995, "text": 2.28096401998, "send": 2.64379514676, "understand": 1.0880858756799998, "variat": 1.5484132106, "wikiartificialneuralnetwork": 7.18765716411, "everi": 0.782970854842, "nonlinear": 13.79216999601, "dnns": 7.18765716411, "use": 0.1752481183896, "relationship": 0.871847185184, "against": 0.254802851078, "flexibl": 2.2707222351599996, "main": 0.225571540588, "learn": 0.842752064745, "brain": 2.18931939783, "multilay": 23.12297406316}, "logidf": {"base": 0.13652330228700002, "natur": 0.431306339292, "typicalcnnpng": 7.18765716411, "built": 0.690379535065, "signal": 1.6340517929299998, "neuron": 4.16317547727, "addit": 0.220218882972, "paramet": 2.8481901438599997, "human": 0.640035183243, "layer": 2.0969791623500003, "follow": 0.045356911094199995, "contain": 0.468845318236, "four": 0.190213538869, "function": 0.914465741594, "neural": 4.0853151555, "sentenc": 1.7656483252200001, "just": 0.289531434109, "interconnect": 3.41107212958, "wikiconvolutionalneuralnetwork": 7.18765716411, "classifi": 1.6665296351499999, "lecun": 7.18765716411, "defin": 1.00368010925, "contribut": 0.655201578909, "train": 0.660918312839, "translat": 1.0499301100299998, "complex": 0.8502416364309999, "multipl": 1.01092401812, "test": 0.977224437103, "present": 0.227546654799, "wordnumvec": 7.18765716411, "seri": 0.38193461069799994, "semant": 3.6662106543, "deeper": 2.7131653017699997, "for": 0.00031499039539700004, "word": 0.585861082385, "benchmark": 3.9489787119499997, "deep": 1.2886734698, "the": 0.0, "consid": 0.214894723824, "unit": 0.143188061817, "yoon": 6.009002167769999, "power": 0.292396282715, "linear": 2.63027764196, "next": 0.402163685499, "perform": 0.42618085058, "recognit": 1.4816549327200002, "demonstr": 0.9745501918189999, "obtain": 0.988162703503, "classif": 2.08779073629, "connect": 0.633605058682, "inform": 0.454453704662, "num": 0.00031499039539700004, "conduct": 0.817042965366, "hidden": 2.0557880052, "organ": 0.49392052866999997, "exampl": 0.40868267499899996, "has": 0.0427239448548, "given": 0.303255810831, "knowledg": 1.2232212893899999, "adjust": 1.9619104904, "pass": 0.48130432974, "experi": 0.626272953933, "wikifil": 7.18765716411, "model": 0.7374500731110001, "than": 0.0322608622182, "possibl": 0.348805474891, "abl": 0.599303982475, "structur": 0.7217716751350001, "much": 0.17749572930100002, "pool": 1.953433973, "also": 0.0146571578, "optim": 2.4456277954099996, "typic": 0.812774319158, "specifi": 1.93451151621, "loss": 0.885954358842, "not": 0.0155524130075, "task": 1.35748680661, "syntact": 4.47406678264, "are": 0.0294674735827, "may": 0.050709995284400004, "minim": 1.80968177926, "decisionmak": 7.18765716411, "one": 0.0062553516455, "regard": 0.5819082848730001, "describ": 0.385447603125, "kim": 2.61897808671, "paraphras": 4.14711087477, "util": 1.5389763962399998, "convert": 1.1860360368, "separ": 0.470759772949, "system": 0.327430345585, "reach": 0.40414323085000003, "let": 1.2488025672799998, "determin": 0.772833019022, "outstand": 2.04989986258, "logist": 2.6461370052, "which": 0.00517841384543, "node": 3.7920308275, "davydova": 7.18765716411, "activ": 0.381196603284, "other": 0.00987474791976, "without": 0.258874517941, "calcul": 1.8131506592099997, "consist": 0.398873126426, "show": 0.236682766013, "fewer": 1.7831046645, "parameter": 5.801362803, "accuraci": 2.5464765406, "imag": 0.99376210729, "sever": 0.06991112039689999, "network": 0.9530830530519999, "like": 0.139053576545, "three": 0.06411868822490001, "abov": 0.643865229816, "tanh": 7.18765716411, "detect": 1.68878274493, "sum": 1.89939013342, "backpropag": 7.18765716411, "element": 0.8586792558769999, "includ": 0.0188846813905, "coloredneuralnetworksvg": 7.18765716411, "languag": 0.8306818244059999, "phrase": 1.82207063303, "ani": 0.125608358366, "cnns": 7.18765716411, "from": 0.000567054168866, "process": 0.527829199025, "allow": 0.24028061118900002, "mediafil": 7.18765716411, "relu": 7.18765716411, "most": 0.020747896295599998, "between": 0.033953681165299995, "excel": 1.5778801652, "predict": 1.6457402376899999, "wikipediaruddeneuropng": 7.18765716411, "output": 2.03822657827, "top": 0.609100637788, "fulli": 1.02609828678, "with": 0.00119749171339, "input": 2.50167533539, "gradient": 3.73502760882, "result": 0.136378908381, "rectifi": 3.9958100116300006, "synaps": 5.35507570037, "xiang": 5.206655695249999, "that": 0.00397614837964, "weight": 1.58492352612, "architectur": 1.63469757919, "call": 0.0654627744488, "more": 0.017024931599999998, "and": 6.29901420636e-05, "produc": 0.314320812003, "discuss": 0.78698452262, "achiev": 0.6270980851169999, "pars": 4.9812159316699995, "artifici": 2.11822899018, "visual": 1.6539383488600001, "artificialneuronpng": 7.18765716411, "monster": 2.7131653017699997, "sigmoid": 6.964513612799999, "can": 0.162341096394, "comput": 1.36806891594, "make": 0.07349765782289999, "olga": 4.16723227797, "each": 0.173741689304, "hyperbol": 4.45220798882, "they": 0.0297269947676, "applic": 1.23160392849, "this": 0.0037864490525, "speech": 1.3409775702700002, "step": 1.03954505698, "scratch": 3.2509415461, "error": 1.7985854343, "zhang": 3.78091960208, "common": 0.338325805271, "data": 1.2168205848, "yann": 5.934894195619999, "oper": 0.441342964347, "method": 0.944461608841, "machin": 1.39235958062, "level": 0.503462189943, "convolut": 4.61631800855, "perceptron": 7.18765716411, "tangent": 4.6486832930599995, "text": 1.14048200999, "send": 1.32189757338, "understand": 1.0880858756799998, "variat": 1.5484132106, "wikiartificialneuralnetwork": 7.18765716411, "everi": 0.391485427421, "nonlinear": 4.59738999867, "dnns": 7.18765716411, "use": 0.0292080197316, "relationship": 0.871847185184, "against": 0.254802851078, "flexibl": 2.2707222351599996, "main": 0.225571540588, "learn": 0.842752064745, "brain": 2.18931939783, "multilay": 5.78074351579}, "freq": {"base": 1, "natur": 1, "typicalcnnpng": 1, "built": 1, "signal": 1, "neuron": 6, "addit": 1, "paramet": 2, "human": 1, "layer": 15, "follow": 1, "contain": 2, "four": 1, "function": 12, "neural": 11, "sentenc": 2, "just": 1, "interconnect": 1, "wikiconvolutionalneuralnetwork": 1, "classifi": 1, "lecun": 1, "defin": 1, "contribut": 1, "train": 1, "translat": 1, "complex": 1, "multipl": 1, "test": 1, "present": 1, "wordnumvec": 1, "seri": 1, "semant": 2, "deeper": 1, "for": 2, "word": 1, "benchmark": 1, "deep": 1, "the": 34, "consid": 1, "unit": 2, "yoon": 1, "power": 1, "linear": 5, "next": 1, "perform": 3, "recognit": 2, "demonstr": 2, "obtain": 1, "classif": 3, "connect": 3, "inform": 1, "num": 7, "conduct": 1, "hidden": 5, "organ": 1, "exampl": 2, "has": 2, "given": 1, "knowledg": 1, "adjust": 1, "pass": 2, "experi": 1, "wikifil": 1, "model": 4, "than": 1, "possibl": 1, "abl": 1, "structur": 2, "much": 1, "pool": 1, "also": 1, "optim": 1, "typic": 1, "specifi": 1, "loss": 1, "not": 1, "task": 2, "syntact": 1, "are": 5, "may": 1, "minim": 1, "decisionmak": 1, "one": 4, "regard": 1, "describ": 1, "kim": 1, "paraphras": 1, "util": 1, "convert": 1, "separ": 1, "system": 2, "reach": 1, "let": 1, "determin": 1, "outstand": 2, "logist": 2, "which": 1, "node": 2, "davydova": 1, "activ": 5, "other": 2, "without": 1, "calcul": 1, "consist": 1, "show": 1, "fewer": 1, "parameter": 1, "accuraci": 1, "imag": 1, "sever": 1, "network": 13, "like": 1, "three": 2, "abov": 1, "tanh": 2, "detect": 1, "sum": 1, "backpropag": 1, "element": 1, "includ": 1, "coloredneuralnetworksvg": 1, "languag": 2, "phrase": 1, "ani": 1, "cnns": 3, "from": 2, "process": 4, "allow": 1, "mediafil": 2, "relu": 2, "most": 1, "between": 1, "excel": 1, "predict": 2, "wikipediaruddeneuropng": 1, "output": 6, "top": 1, "fulli": 2, "with": 5, "input": 9, "gradient": 1, "result": 3, "rectifi": 2, "synaps": 2, "xiang": 1, "that": 10, "weight": 3, "architectur": 1, "call": 2, "more": 5, "and": 16, "produc": 1, "discuss": 1, "achiev": 1, "pars": 1, "artifici": 6, "visual": 1, "artificialneuronpng": 1, "monster": 1, "sigmoid": 2, "can": 2, "comput": 1, "make": 2, "olga": 1, "each": 2, "hyperbol": 1, "they": 1, "applic": 3, "this": 1, "speech": 3, "step": 2, "scratch": 1, "error": 2, "zhang": 1, "common": 1, "data": 3, "yann": 1, "oper": 2, "method": 1, "machin": 1, "level": 1, "convolut": 7, "perceptron": 5, "tangent": 1, "text": 2, "send": 2, "understand": 1, "variat": 1, "wikiartificialneuralnetwork": 1, "everi": 2, "nonlinear": 3, "dnns": 1, "use": 6, "relationship": 1, "against": 1, "flexibl": 1, "main": 1, "learn": 1, "brain": 1, "multilay": 4}, "idf": {"base": 1.14628158845, "natur": 1.5392670157100001, "typicalcnnpng": 1323.0, "built": 1.99447236181, "signal": 5.12459651388, "neuron": 64.2753036437, "addit": 1.24634950542, "paramet": 17.256521739100002, "human": 1.8965476048299998, "layer": 8.14153846154, "follow": 1.04640126549, "contain": 1.59814777532, "four": 1.20950784702, "function": 2.495441685, "neural": 59.4606741573, "sentenc": 5.84536082474, "just": 1.33580143037, "interconnect": 30.297709923699998, "wikiconvolutionalneuralnetwork": 1323.0, "classifi": 5.2937645882, "lecun": 1323.0, "defin": 2.72830383227, "contribut": 1.9255306246200001, "train": 1.9365698950999999, "translat": 2.85745140389, "complex": 2.34021226415, "multipl": 2.74813917258, "test": 2.65707112971, "present": 1.25551601423, "wordnumvec": 1323.0, "seri": 1.46511627907, "semant": 39.1034482759, "deeper": 15.0769230769, "for": 1.00031504001, "word": 1.7965372864099998, "benchmark": 51.8823529412, "deep": 3.6279707495399998, "the": 1.0, "consid": 1.2397313759200002, "unit": 1.15394679459, "yoon": 407.07692307699995, "power": 1.3396337861799998, "linear": 13.8776223776, "next": 1.4950560316400001, "perform": 1.5313977042500002, "recognit": 4.40022172949, "demonstr": 2.64997496244, "obtain": 2.68629441624, "classif": 8.067073170730001, "connect": 1.8843916913900003, "inform": 1.5753125620200001, "num": 1.00031504001, "conduct": 2.2637958077900002, "hidden": 7.81299212598, "organ": 1.6387283237, "exampl": 1.50483412322, "has": 1.0436497502, "given": 1.35426085473, "knowledg": 3.3981164383599998, "adjust": 7.112903225810001, "pass": 1.61818367139, "experi": 1.87062566278, "wikifil": 1323.0, "model": 2.0905978404, "than": 1.03278688525, "possibl": 1.4173734488, "abl": 1.8208510150200001, "structur": 2.0580762250499998, "much": 1.1942229577299999, "pool": 7.052865393160001, "also": 1.01476510067, "optim": 11.5377906977, "typic": 2.2541530597799997, "specifi": 6.920662598080001, "loss": 2.42529789184, "not": 1.01567398119, "task": 3.88641370869, "syntact": 87.7127071823, "are": 1.02990593578, "may": 1.05201775893, "minim": 6.10850327049, "decisionmak": 1323.0, "one": 1.00627495722, "regard": 1.78944995491, "describ": 1.47027227264, "kim": 13.7216940363, "paraphras": 63.2509960159, "util": 4.65981802172, "convert": 3.2740771293099997, "separ": 1.6012102874399998, "system": 1.38739840951, "reach": 1.49801849406, "let": 3.48616600791, "determin": 2.1658935879900003, "outstand": 7.76712328767, "logist": 14.0994671403, "which": 1.005191845, "node": 44.3463687151, "davydova": 1323.0, "activ": 1.46403541129, "other": 1.00992366412, "without": 1.29547123623, "calcul": 6.12972972973, "consist": 1.4901445466499998, "show": 1.26703910615, "fewer": 5.94829524166, "parameter": 330.75, "accuraci": 12.7620578778, "imag": 2.70137825421, "sever": 1.07241286139, "network": 2.59369384088, "like": 1.14918566775, "three": 1.06621893889, "abov": 1.90382539873, "tanh": 1323.0, "detect": 5.41288782816, "sum": 6.681818181819999, "backpropag": 1323.0, "element": 2.36004162331, "includ": 1.0190641247799999, "coloredneuralnetworksvg": 1323.0, "languag": 2.29488291414, "phrase": 6.18465134398, "ani": 1.13383802314, "cnns": 1323.0, "from": 1.00056721497, "process": 1.69524826482, "allow": 1.2716059271100002, "mediafil": 1323.0, "relu": 1323.0, "most": 1.02096463023, "between": 1.03453668708, "excel": 4.84467500763, "predict": 5.18484650555, "wikipediaruddeneuropng": 1323.0, "output": 7.676982591880001, "top": 1.8387769284200002, "fulli": 2.79015817223, "with": 1.0011982089899998, "input": 12.2029208301, "gradient": 41.889182058, "result": 1.14611608432, "rectifi": 54.3698630137, "synaps": 211.68, "xiang": 182.482758621, "that": 1.00398406375, "weight": 4.878918254459999, "architectur": 5.12790697674, "call": 1.0676529926, "more": 1.0171706817, "and": 1.00006299213, "produc": 1.36932896326, "discuss": 2.19676214197, "achiev": 1.87216981132, "pars": 145.651376147, "artifici": 8.31639601886, "visual": 5.22752716497, "artificialneuronpng": 1323.0, "monster": 15.0769230769, "sigmoid": 1058.4, "can": 1.17626139142, "comput": 3.9277585353800006, "make": 1.0762660158600001, "olga": 64.5365853659, "each": 1.18974820144, "hyperbol": 85.8162162162, "they": 1.03017325287, "applic": 3.42672134686, "this": 1.00379362671, "speech": 3.8227787141800005, "step": 2.8279301745599996, "scratch": 25.8146341463, "error": 6.04109589041, "zhang": 43.8563535912, "common": 1.4025974025999999, "data": 3.37643555934, "yann": 378.0, "oper": 1.55479384977, "method": 2.5714285714300003, "machin": 4.02433460076, "level": 1.6544393497299998, "convolut": 101.121019108, "perceptron": 1323.0, "tangent": 104.44736842100001, "text": 3.12827586207, "send": 3.75053153792, "understand": 2.96858638743, "variat": 4.704, "wikiartificialneuralnetwork": 1323.0, "everi": 1.47917637194, "nonlinear": 99.225, "dnns": 1323.0, "use": 1.0296387573799999, "relationship": 2.39132399458, "against": 1.2902072328299998, "flexibl": 9.68639414277, "main": 1.25303867403, "learn": 2.32275054865, "brain": 8.929133858270001, "multilay": 324.0}}, "html": "<!DOCTYPE html>\n\n<html lang=\"en-US\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head profile=\"http://gmpg.org/xfn/11\">\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n<title>  7 Types of Artificial Neural Networks for Natural Language Processing</title>\n<link href=\"/wp-content/themes/kdn17/images/favicon.ico\" rel=\"shortcut icon\"/>\n<link href=\"/wp-content/themes/kdn17/style.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"/wp-content/themes/kdn17/js/jquery-1.9.1.min.js\" type=\"text/javascript\"></script>\n<script src=\"/aps/kda_all.js\" type=\"text/javascript\"></script>\n<link href=\"/feed/\" rel=\"alternate\" title=\"KDnuggets: Analytics, Big Data, Data Mining and Data Science Feed\" type=\"application/rss+xml\"/>\n<link href=\"//s.w.org\" rel=\"dns-prefetch\"/>\n<link href=\"https://www.kdnuggets.com/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/comments/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/2017/10/7-types-artificial-neural-networks-natural-language-processing.html/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb 7 Types of Artificial Neural Networks for Natural Language Processing Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-json/\" rel=\"https://api.w.org/\"/>\n<link href=\"https://www.kdnuggets.com/xmlrpc.php?rsd\" rel=\"EditURI\" title=\"RSD\" type=\"application/rsd+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-includes/wlwmanifest.xml\" rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\"/>\n<link href=\"https://www.kdnuggets.com/2017/10/7-techniques-visualize-geospatial-data.html\" rel=\"prev\" title=\"7 Techniques to Visualize Geospatial Data\"/>\n<link href=\"https://www.kdnuggets.com/2017/10/one-line-code-run-regression.html\" rel=\"next\" title=\"It Only Takes One Line of Code to Run Regression\"/>\n<meta content=\"WordPress 4.9.10\" name=\"generator\">\n<link href=\"https://www.kdnuggets.com/2017/10/7-types-artificial-neural-networks-natural-language-processing.html\" rel=\"canonical\"/>\n<link href=\"https://www.kdnuggets.com/?p=73273\" rel=\"shortlink\"/>\n<link href=\"https://www.kdnuggets.com/2017/10/7-types-artificial-neural-networks-natural-language-processing.html\" rel=\"canonical\"/>\n<!-- BEGIN ExactMetrics v5.3.7 Universal Analytics - https://exactmetrics.com/ -->\n<script>\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-361129-1', 'auto');\n  ga('send', 'pageview');\n</script>\n<!-- END ExactMetrics Universal Analytics -->\n</meta></head>\n<body class=\"post-template-default single single-post postid-73273 single-format-standard\">\n<div class=\"main_wrapper\"><!-- publ: 19-Oct, 2017  -->\n<div id=\"wrapper\">\n<div id=\"header\">\n<div id=\"header_log\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<h1>KDnuggets</h1>\n<div class=\"text-container\">\n            \u00a0\u00a0<a href=\"/news/subscribe.html\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a> \u00a0|\n <a href=\"https://twitter.com/kdnuggets\" target=\"_blank\"><img alt=\"Twitter\" height=\"48\" src=\"/images/tw_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n <a href=\"https://www.facebook.com/kdnuggets\" target=\"_blank\"><img alt=\"Facebook\" height=\"48\" src=\"/images/fb_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n<a href=\"https://www.linkedin.com/groups/54257/\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"48\" src=\"/images/in_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \n\u00a0|\u00a0 <a href=\"/contact.html\"><b>Contact</b></a>\n</div>\n</div>\n<div class=\"search\">\n<form action=\"/\" id=\"searchform\" method=\"get\">\n<input id=\"s\" name=\"s\" placeholder=\"search KDnuggets\" type=\"text\" value=\"\"/>\n<input type=\"submit\" value=\"Search\"/></form>\n</div>\n<div href=\"#\" id=\"pull\">\n<img class=\"menu\" src=\"/images/menu-30.png\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<img class=\"search-icon\" src=\"/images/search-icon.png\">\n</img></img></div>\n<div id=\"pull-menu\">\n<div class=\"navigation\"><ul class=\"menu\" id=\"menu-menu\"><li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-1070\" id=\"menu-item-1070\"><a href=\"/software/index.html\" title=\"Data Science Software\">SOFTWARE</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13756\" id=\"menu-item-13756\"><a href=\"/news/index.html\" title=\"News\">News/Blog</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-46286\" id=\"menu-item-46286\"><a href=\"/news/top-stories.html\">Top stories</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-42152\" id=\"menu-item-42152\"><a href=\"https://www.kdnuggets.com/opinions/index.html\" title=\"Opinions\">Opinions</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-46415\" id=\"menu-item-46415\"><a href=\"https://www.kdnuggets.com/tutorials/index.html\">Tutorials</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13364\" id=\"menu-item-13364\"><a href=\"/jobs/index.html\" title=\"Jobs in Analytics, Data Science\">JOBS</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-63505\" id=\"menu-item-63505\"><a href=\"https://www.kdnuggets.com/companies/index.html\">Companies</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13366\" id=\"menu-item-13366\"><a href=\"/courses/index.html\">Courses</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-1499\" id=\"menu-item-1499\"><a href=\"https://www.kdnuggets.com/datasets/index.html\">Datasets</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-14286\" id=\"menu-item-14286\"><a href=\"https://www.kdnuggets.com/education/index.html\" title=\"Education in Analytics, Big Data, Data Science\">EDUCATION</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-51558\" id=\"menu-item-51558\"><a href=\"https://www.kdnuggets.com/education/analytics-data-mining-certificates.html\" title=\"Certificates in Analytics, Big Data, Data Science\">Certificates</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-14752\" id=\"menu-item-14752\"><a href=\"/meetings/index.html\">Meetings</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13721\" id=\"menu-item-13721\"><a href=\"/webcasts/index.html\" title=\"Webcasts and Webinars\">Webinars</a></li>\n</ul></div></div>\n</div> <!--#header end-->\n<div id=\"spacer\">\n         \u00a0\n      </div>\n<div id=\"content_wrapper\">\n<div id=\"ad_wrapper\">\n<script type=\"text/javascript\">\n\tjQuery(function() {\n   \t    var pull        = $('#pull');\n            menu        = $('#header .navigation ul');\n            menuImage = $('#header img.menu');\n            mobileMenu        = $('#pull-menu-mobile');\n            search = $('img.search-icon');\n            searchBar = $('div.search');\n            searchClick = false;\n            search.on('click', function() {\n                  searchBar.slideToggle();\n                  searchClick = true;\n            });  \n     \t    $(menuImage).on('click', function(e) {\n\t        //e.preventDefault();\n                if (!searchClick) {\n                  menu.slideToggle();\n                }\n                searchClick = false;\n\t    });\n           /* pullMobile.on('click', function(e) {\n              e.preventDefault();\n                if (!searchClick) {\n                  mobileMenu.slideToggle();\n                }\n                searchClick = false;\n\t    });*/\n            \n\t});\n\tkpath = '/'; kda_top(); kda_sid_init(); kda_sid_n=3;\n\t</script>\n</div> <div class=\"breadcumb\">\n<br/>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2017/index.html\">2017</a> \u00bb <a href=\"https://www.kdnuggets.com/2017/10/index.html\">Oct</a> \u00bb <a href=\"https://www.kdnuggets.com/2017/10/tutorials.html\">Tutorials, Overviews</a> \u00bb 7 Types of Artificial Neural Networks for Natural Language Processing (\u00a0<a href=\"/2017/n41.html\">17:n41</a>\u00a0)    </div>\n<div class=\"single\" id=\"content\">\n<div id=\"post-header\">\n<h1 id=\"title\"><img align=\"right\" alt=\"Silver Blog\" src=\"/images/tkb-1710-s.png\" width=\"94\"/>7 Types of Artificial Neural Networks for Natural Language Processing</h1>\n<div class=\"pagi\">\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2017/10/7-techniques-visualize-geospatial-data.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"> <strong>Previous post</strong></img></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2017/10/one-line-code-run-regression.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/>\u00a0<br/>\u00a0\n    <div class=\"addthis_native_toolbox\"></div>\n</div>\n<div class=\"tag-data\">Tags: <a href=\"https://www.kdnuggets.com/tag/ai\" rel=\"tag\">AI</a>, <a href=\"https://www.kdnuggets.com/tag/deep-learning\" rel=\"tag\">Deep Learning</a>, <a href=\"https://www.kdnuggets.com/tag/natural-language-processing\" rel=\"tag\">Natural Language Processing</a>, <a href=\"https://www.kdnuggets.com/tag/neural-networks\" rel=\"tag\">Neural Networks</a></div>\n<br/>\n<p class=\"excerpt\">\n     What is an artificial neural network? How does it work? What types of artificial neural networks exist? How are different types of artificial neural networks used in natural language processing? We will discuss all these questions in the following article.\n  </p>\n</div>\n<div id=\"post-header-ad\">\n<script type=\"text/javascript\">kda_sid_write(1); kda_sid_n=2;</script>\n</div>\n<hr class=\"grey-line\"/><br/>\n<div class=\"post\" id=\"post-\">\n<p><b>By Olga Davydova, <a href=\"https://datamonsters.co/\" rel=\"noopener\" target=\"_blank\">Data Monsters</a>.</b></p>\n<p><img alt=\"Header image\" class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/800/1*FBXS211lj7zWEQZRAmDedQ.png\" width=\"85%\"/></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Artificial_neural_network\" target=\"_blank\">An artificial neural network (ANN)</a>\u00a0is a computational nonlinear model based on the neural structure of the brain that is able to learn to perform tasks like classification, prediction, decision-making, visualization, and others just by considering examples.</p>\n<p>An artificial neural network consists of artificial neurons or processing elements and is organized in three interconnected layers: input, hidden that may include more than one layer, and output.</p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/0*WI9KgVlDd_Q0BwTt.\" width=\"50%\"/><br>\n<font size=\"-1\">An artificial neural network (<a href=\"https://en.wikipedia.org/wiki/Artificial_neural_network#/media/File:Colored_neural_network.svg\" target=\"_blank\">https://en.wikipedia.org/wiki/Artificial_neural_network#/media/File:Colored_neural_network.svg</a>)</font></br></center></p>\n<p>The input layer contains input neurons that send information to the hidden layer. The hidden layer sends data to the output layer. Every neuron has weighted inputs (<a href=\"https://en.wikipedia.org/wiki/Synaptic_weight\" target=\"_blank\">synapses</a>), an\u00a0<a href=\"https://en.wikipedia.org/wiki/Activation_function\" target=\"_blank\">activation function</a>\u00a0(defines the output given an input), and one output. Synapses are the adjustable parameters that convert a neural network to a parameterized system.</p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/0*po7D6t18VWduLAcG.\" width=\"80%\"/><br>\n<font size=\"-1\">Artificial neuron with four inputs (<a href=\"http://en.citizendium.org/wiki/File:Artificialneuron.png\" target=\"_blank\">http://en.citizendium.org/wiki/File:Artificialneuron.png</a>)</font></br></center></p>\n<p>The weighted sum of the inputs produces the activation signal that is passed to the activation function to obtain one output from the neuron. The commonly used activation functions are linear, step, sigmoid, tanh, and rectified linear unit (ReLu) functions.</p>\n<p><strong>Linear Function</strong></p>\n<p><em>f(x)=ax</em></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/800/0*IHZAnIM0Qx1nRlTS.\" width=\"200\"/></p>\n<p><strong>Step Function</strong></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/800/0*Vx0yjLP7VgvPIe88.\" width=\"200\"/></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/800/0*c-iSbldwDoezVto9.\" width=\"200\"/></p>\n<p><strong>Logistic (Sigmoid) Function</strong></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/800/0*TzwfGagVeF43Kiks.\" width=\"200\"/></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/800/0*xCScqxaMVjBBFyk7.\" width=\"200\"/></p>\n<p><strong>Tanh Function</strong></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/800/0*4ljHOiE3Z60ivC5G.\" width=\"200\"/></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/800/0*mKS2p9ty2BLZd4fN.\" width=\"200\"/></p>\n<p><strong>Rectified linear unit (ReLu) Function</strong></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/800/0*D2lOXl28ZoL52blt.\" width=\"200\"/></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/800/0*6w7BcYz0R1x8PRkv.\" width=\"200\"/></p>\n<p>Training is the weights optimizing process in which the error of predictions is minimized and the network reaches a specified level of accuracy. The method mostly used to determine the error contribution of each neuron is called\u00a0<a href=\"https://en.wikipedia.org/wiki/Backpropagation\" target=\"_blank\">backpropagation</a>\u00a0that calculates the gradient of the loss function.</p>\n<p>It is possible to make the system more flexible and more powerful by using additional hidden layers. Artificial neural networks with multiple hidden layers between the input and output layers are called\u00a0<a href=\"https://en.wikipedia.org/wiki/Deep_learning#Deep_neural_networks\" target=\"_blank\">deep neural networks (DNNs)</a>, and they can model complex nonlinear relationships.</p>\n<p>\u00a0</p>\n<h3>1. Multilayer perceptron (MLP)</h3>\n<p>\u00a0<br>\n<center><img src=\"https://cdn-images-1.medium.com/max/800/0*jAC99PP0pwL6YPxk.\" width=\"80%\"/><br>\n<font size=\"-1\">A perceptron\u00a0(<a href=\"https://upload.wikimedia.org/wikipedia/ru/d/de/Neuro.PNG\" target=\"_blank\">https://upload.wikimedia.org/wikipedia/ru/d/de/Neuro.PNG</a>)</font></br></center></br></p>\n<p>A multilayer perceptron (MLP) has three or more layers. It utilizes a nonlinear activation function (mainly hyperbolic tangent or logistic function) that lets it classify data that is not linearly separable. Every node in a layer connects to each node in the following layer making the network fully connected. For example, multilayer perceptron natural language processing (NLP) applications are speech recognition and machine translation.</p>\n<p>\u00a0</p>\n<h3>2. Convolutional neural network\u00a0(CNN)</h3>\n<p>\u00a0<br/>\n<center><img src=\"https://cdn-images-1.medium.com/max/800/0*3rz2ME5BhSKS4o7H.\" width=\"99%\"/><br/>\n<font size=\"-1\">Typical CNN architecture (<a href=\"https://en.wikipedia.org/wiki/Convolutional_neural_network#/media/File:Typical_cnn.png\" target=\"_blank\">https://en.wikipedia.org/wiki/Convolutional_neural_network#/media/File:Typical_cnn.png</a>)</font></center></p>\n<p>A convolutional neural network (CNN) contains one or more convolutional layers, pooling or fully connected, and uses a variation of multilayer perceptrons discussed above. Convolutional layers use a\u00a0<a href=\"https://en.wikipedia.org/wiki/Convolution\" target=\"_blank\">convolution operation</a>\u00a0to the input passing the result to the next layer. This operation allows the network to be deeper with much fewer parameters.</p>\n<p>Convolutional neural networks show outstanding results in image and speech applications. Yoon Kim in\u00a0<a href=\"http://www.aclweb.org/anthology/D14-1181\" target=\"_blank\">Convolutional Neural Networks for Sentence Classification</a>\u00a0describes the process and the results of text classification tasks using CNNs\u00a0<a href=\"http://www.aclweb.org/anthology/D14-1181\" target=\"_blank\">[1]</a>. He presents a model built on top of\u00a0<a href=\"https://en.wikipedia.org/wiki/Word2vec\" target=\"_blank\">word2vec</a>, conducts a series of experiments with it, and tests it against several benchmarks, demonstrating that the model performs excellent.</p>\n<p>In\u00a0<a href=\"https://arxiv.org/pdf/1502.01710.pdf\" target=\"_blank\">Text Understanding from Scratch</a>, Xiang Zhang and Yann LeCun, demonstrate that CNNs can achieve outstanding performance without the knowledge of words, phrases, sentences and any other syntactic or semantic structures with regards to a human language\u00a0<a href=\"https://arxiv.org/pdf/1502.01710.pdf\" target=\"_blank\">[2]</a>. Semantic parsing\u00a0<a href=\"http://www.aclweb.org/anthology/P15-1128\" target=\"_blank\">[3]</a>, paraphrase detection\u00a0<a href=\"https://www.aclweb.org/anthology/K15-1013\" target=\"_blank\">[4]</a>, speech recognition\u00a0<a href=\"https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/CNN_ASLPTrans2-14.pdf\" target=\"_blank\">[5]</a>\u00a0are also the applications of CNNs.</p>\n</div>\n<div class=\"page-link\"><p>Pages: 1 <a href=\"https://www.kdnuggets.com/2017/10/7-types-artificial-neural-networks-natural-language-processing.html/2\">2</a></p></div>\n<div class=\"pagi\">\n<hr class=\"grey-line\"/>\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2017/10/7-techniques-visualize-geospatial-data.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"/> <strong>Previous post</strong></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2017/10/one-line-code-run-regression.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/><br/>\n<div>\n<hr class=\"grey-line\"/><br/>\n<h2>Top Stories Past 30 Days</h2>\n<table align=\"center\" cellpadding=\"3\" cellspacing=\"10\" class=\"latn\" width=\"100%\">\n<tr>\n<td valign=\"top\" width=\"50%\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Popular</b></th></tr>\n<tr><td>\n<ol class=\"three_ol\"><li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-1-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-2-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n<li> <a href=\"/2018/05/simplilearn-9-must-have-skills-data-scientist.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-3-simplilearn');\"><b>9 Must-have skills you need to become a Data Scientist, updated</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-4-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/03/another-10-free-must-read-books-for-machine-learning-and-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-5-another-10-books');\"><b>Another 10 Free Must-Read Books for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-6-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/best-data-visualization-techniques.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-7-best-data-viz');\"><b>Best Data Visualization Techniques for small and large data</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td> <td valign=\"top\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Shared</b></th></tr>\n<tr><td><ol class=\"three_ol\">\n<li> <a href=\"/2019/04/another-10-free-must-see-courses-machine-learning-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-1-another-10-courses');\"><b>Another 10 Free Must-See Courses for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-2-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/03/r-vs-python-data-visualization.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-3-r-py-viz');\"><b>R vs Python for Data Visualization</b></a>\n<li> <a href=\"/2019/03/deep-learning-toolset-overview.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-4-dl-toolset');\"><b>The Deep Learning Toolset \u2014 An Overview</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-5-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-6-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-7-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<!--#content end--></div>\n<div id=\"sidebar\">\n<div class=\"latn\">\n<h3><b><a href=\"/news/index.html\">Latest News</a></b></h3>\n<ul style=\"font-size:14px; margin-top:5px\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/datarobot-delivering-trusted-ai-microsoft.html\">Delivering Trusted AI with DataRobot and Microsoft</a><li> <a href=\"https://www.kdnuggets.com/2019/04/formulated-ai-data-production-landscape.html\">AI and the data production landscape</a><li> <a href=\"https://www.kdnuggets.com/2019/04/most-desired-skill-data-science.html\">The most desired skill in data science</a><li> <a href=\"https://www.kdnuggets.com/2019/04/projects-include-data-science-portfolio.html\">Projects to Include in a Data Science Portfolio</a><li> <a href=\"https://www.kdnuggets.com/2019/04/rework-meet-worlds-leading-ai-deep-learning-experts.html\">Meet the World\u2019s Leading AI &amp; Deep Learning ...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/problem-data-science-job-postings.html\">The problem with data science job postings</a></li></li></li></li></li></li></ul>\n</div>\n<div>\n<script type=\"text/javascript\">kda_sid_write(kda_sid_n);</script>\n</div>\n<br/><script src=\"/aps/sbm.js\" type=\"text/javascript\"></script>\n<div class=\"latn\" style=\"margin-top: 15px;\">\n<h3><b>More Recent Stories</b></h3>\n<ul class=\"next-posts\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/problem-data-science-job-postings.html\">The problem with data science job postings</a><li> <a href=\"https://www.kdnuggets.com/2019/04/graduating-gans-understanding-generative-adversarial-networks.html\">Graduating in GANs: Going From Understanding Generative Advers...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/datax-join-new-generation-ai-technologists.html\">Join the new generation of AI technologists</a><li> <a href=\"https://www.kdnuggets.com/2019/04/top-tweets-apr17-apr23.html\">Top tweets, Apr 17\u201323: The History of Artificial #NeuralN...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/activestate-top-10-python-use-cases.html\">Top 10 Python Use Cases</a><li> <a href=\"https://www.kdnuggets.com/2019/04/future-generative-adversarial-networks.html\">Generative Adversarial Networks \u2013 Key Milestones and Sta...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/attention-craving-rnn-building-transformer-networks.html\">Attention Craving RNNS: Building Up To Transformer Networks</a><li> <a href=\"https://www.kdnuggets.com/jobs/19/04-24-fors-marsh-group-lead-data-scientist.html\">Fors Marsh Group: Lead Data Scientist [Arlington, VA]</a><li> <a href=\"https://www.kdnuggets.com/2019/n16.html\">KDnuggets 19:n16, Apr 24: Data Visualization in Python with...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/paw-mega-paw-las-vegas-lower-rates-end-friday.html\">Lower Rates End Friday for Mega-PAW Vegas \u2013 the Largest Pred...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/top-news-week-0415-0421.html\">Top Stories, Apr 15-21: Data Visualization in Python: Matplotl...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/wharton-customer-analytics-initiative-conference.html\">Wharton Customer Analytics Initiative Annual Conference in Phi...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/machine-learning-graph-analytics.html\">Machine Learning and Deep Link Graph Analytics: A Powerful Com...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/best-masters-data-science-analytics-online.html\">2019 Best Masters in Data Science and Analytics \u2013 Online</a><li> <a href=\"https://www.kdnuggets.com/2019/04/worth-studying-data-science-masters.html\">Was it Worth Studying a Data Science Masters?</a><li> <a href=\"https://www.kdnuggets.com/2019/04/approach-pre-trained-deep-learning-models-caution.html\">Approach pre-trained deep learning models with caution</a><li> <a href=\"https://www.kdnuggets.com/2019/04/coursera-earn-deep-learning-certificate.html\">Earn a Deep Learning Certificate</a><li> <a href=\"https://www.kdnuggets.com/2019/04/octoparse-scrape-data-website.html\">Easy Way to Scrape Data from Website By Yourself</a><li> <a href=\"https://www.kdnuggets.com/2019/04/ai-environment.html\">AI Supporting The Earth</a><li> <a href=\"https://www.kdnuggets.com/2019/04/mueller-report-word-cloud-brief-tutorial-r.html\">The Mueller Report Word Cloud: A brief tutorial in R</a></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></ul>\n</div>\n</div><div class=\"breadcrumbs_bottom\">\n<div class=\"breadcumb\">\n<br>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2017/index.html\">2017</a> \u00bb <a href=\"https://www.kdnuggets.com/2017/10/index.html\">Oct</a> \u00bb <a href=\"https://www.kdnuggets.com/2017/10/tutorials.html\">Tutorials, Overviews</a> \u00bb 7 Types of Artificial Neural Networks for Natural Language Processing (\u00a0<a href=\"/2017/n41.html\">17:n41</a>\u00a0)    </br></div>\n</div>\n<!--#content_wrapper end--></div>\n<br>\n<div id=\"footer\">\n<br/>\u00a9 2019 KDnuggets. <a href=\"/about/index.html\">About KDnuggets</a>. \u00a0<a href=\"/news/privacy-policy.html\">Privacy policy</a>. <a href=\"/terms-of-service.html\">Terms of Service</a><br/>\u00a0\n<div class=\"kd_bottom\">\n<div class=\"footer-container\">\n<div class=\"footer-news\">\n<a href=\"/news/subscribe.html\" onclick=\"_gaq.push(['_trackPageview','/x/bot/sub']);\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a>\n</div>\n<div class=\"footer-sm\">\n<a href=\"https://twitter.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/twt']);\" target=\"_blank\"><img height=\"32\" src=\"/images/tw_c48.png\" width=\"32\"/></a>\n<a href=\"https://facebook.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/fb']);\" target=\"_blank\"><img alt=\"Facebook\" height=\"32\" src=\"/images/fb_c48.png\" width=\"32\"/></a>\n<a href=\"https://www.linkedin.com/groups/54257\" onclick=\"_gaq.push(['_trackPageview','/x/bot/in']);\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"32\" src=\"/images/in_c48.png\" width=\"32\"/></a>\n</div>\n</div>\n<div class=\"close-footer\">X</div>\n</div>\n<script type=\"text/javascript\">\n  jQuery('.close-footer').click(\n      function(){       \n         jQuery('.kd_bottom').hide();\n      }\n   );\n</script> </div>\n<div class=\"clear\"><!--blank--></div>\n</br></div>\n<div style=\"display: none;\"><div id=\"boxzilla-box-82996-content\"><script type=\"text/javascript\">(function() {\n\tif (!window.mc4wp) {\n\t\twindow.mc4wp = {\n\t\t\tlisteners: [],\n\t\t\tforms    : {\n\t\t\t\ton: function (event, callback) {\n\t\t\t\t\twindow.mc4wp.listeners.push({\n\t\t\t\t\t\tevent   : event,\n\t\t\t\t\t\tcallback: callback\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})();\n</script><!-- MailChimp for WordPress v4.1.14 - https://wordpress.org/plugins/mailchimp-for-wp/ --><form class=\"mc4wp-form mc4wp-form-77281\" data-id=\"77281\" data-name=\"Subscribe to KDnuggets News\" id=\"mc4wp-form-1\" method=\"post\"><div class=\"mc4wp-form-fields\"><div class=\"header-container\">\n<img align=\"left\" src=\"/wp-content/uploads/envelope.png\"><a href=\"/news/subscribe.html\">Get KDnuggets, a leading newsletter on AI, \r\n  Data Science, and Machine Learning</a>\n</img></div>\n<div class=\"form-fields\">\n<div class=\"field-container\"><label>Email:</label><input maxlength=\"60\" name=\"EMAIL\" placeholder=\"Your email\" required=\"\" size=\"30\" type=\"email\"/></div>\n<div class=\"field-container submit-container\"><div class=\"form-button\" onclick=\"document.getElementById('mc4wp-form-1').submit()\">Sign Up</div></div>\n</div>\n<label style=\"display: none !important;\">Leave this field empty if you're human: <input autocomplete=\"off\" name=\"_mc4wp_honeypot\" tabindex=\"-1\" type=\"text\" value=\"\"/></label><input name=\"_mc4wp_timestamp\" type=\"hidden\" value=\"1556333116\"/><input name=\"_mc4wp_form_id\" type=\"hidden\" value=\"77281\"/><input name=\"_mc4wp_form_element_id\" type=\"hidden\" value=\"mc4wp-form-1\"/></div><div class=\"mc4wp-response\"></div></form><!-- / MailChimp for WordPress Plugin -->\n</div></div><script type=\"text/javascript\">(function() {function addEventListener(element,event,handler) {\n\tif(element.addEventListener) {\n\t\telement.addEventListener(event,handler, false);\n\t} else if(element.attachEvent){\n\t\telement.attachEvent('on'+event,handler);\n\t}\n}function maybePrefixUrlField() {\n\tif(this.value.trim() !== '' && this.value.indexOf('http') !== 0) {\n\t\tthis.value = \"http://\" + this.value;\n\t}\n}\n\nvar urlFields = document.querySelectorAll('.mc4wp-form input[type=\"url\"]');\nif( urlFields && urlFields.length > 0 ) {\n\tfor( var j=0; j < urlFields.length; j++ ) {\n\t\taddEventListener(urlFields[j],'blur',maybePrefixUrlField);\n\t}\n}/* test if browser supports date fields */\nvar testInput = document.createElement('input');\ntestInput.setAttribute('type', 'date');\nif( testInput.type !== 'date') {\n\n\t/* add placeholder & pattern to all date fields */\n\tvar dateFields = document.querySelectorAll('.mc4wp-form input[type=\"date\"]');\n\tfor(var i=0; i<dateFields.length; i++) {\n\t\tif(!dateFields[i].placeholder) {\n\t\t\tdateFields[i].placeholder = 'YYYY-MM-DD';\n\t\t}\n\t\tif(!dateFields[i].pattern) {\n\t\t\tdateFields[i].pattern = '[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])';\n\t\t}\n\t}\n}\n\n})();</script><script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_options = {\"testMode\":\"\",\"boxes\":[{\"id\":82996,\"icon\":\"&times;\",\"content\":\"\",\"css\":{\"background_color\":\"#eeee22\",\"width\":600,\"border_width\":2,\"border_style\":\"double\",\"position\":\"center\"},\"trigger\":{\"method\":\"time_on_page\",\"value\":\"3\"},\"animation\":\"fade\",\"cookie\":{\"triggered\":0,\"dismissed\":336},\"rehide\":true,\"position\":\"center\",\"screenWidthCondition\":{\"condition\":\"larger\",\"value\":500},\"closable\":true,\"post\":{\"id\":82996,\"title\":\"Subscribe to KDnuggets\",\"slug\":\"subscribe-to-kdnuggets\"}}]};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla/assets/js/script.min.js?ver=3.2.5\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_stats_config = {\"ajaxurl\":\"https:\\/\\/www.kdnuggets.com\\/wp-admin\\/admin-ajax.php?action=boxzilla_stats_track\"};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla-stats/assets/js/tracking.min.js?ver=1.0.4\" type=\"text/javascript\"></script>\n<script src=\"https://www.kdnuggets.com/wp-includes/js/wp-embed.min.js?ver=4.9.10\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar mc4wp_forms_config = [];\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/forms-api.min.js?ver=4.1.14\" type=\"text/javascript\"></script>\n<!--[if lte IE 9]>\n<script type='text/javascript' src='https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/third-party/placeholders.min.js?ver=4.1.14'></script>\n<![endif]-->\n<!--/.main_wrapper--></div>\n<script src=\"https://s7.addthis.com/js/300/addthis_widget.js#pubid=gpsaddthis\" type=\"text/javascript\"></script>\n</body>\n</html>\n<!-- Dynamic page generated in 0.700 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2019-04-26 22:45:16 -->\n<!-- Compression = gzip -->", "content_tokenized": ["olga", "davydova", "data", "monster", "artifici", "neural", "network", "comput", "nonlinear", "model", "base", "the", "neural", "structur", "the", "brain", "that", "abl", "learn", "perform", "task", "like", "classif", "predict", "decisionmak", "visual", "and", "other", "just", "consid", "exampl", "artifici", "neural", "network", "consist", "artifici", "neuron", "process", "element", "and", "organ", "three", "interconnect", "layer", "input", "hidden", "that", "may", "includ", "more", "than", "one", "layer", "and", "output", "artifici", "neural", "network", "wikiartificialneuralnetwork", "mediafil", "coloredneuralnetworksvg", "the", "input", "layer", "contain", "input", "neuron", "that", "send", "inform", "the", "hidden", "layer", "the", "hidden", "layer", "send", "data", "the", "output", "layer", "everi", "neuron", "has", "weight", "input", "synaps", "activ", "function", "defin", "the", "output", "given", "input", "and", "one", "output", "synaps", "are", "the", "adjust", "paramet", "that", "convert", "neural", "network", "parameter", "system", "artifici", "neuron", "with", "four", "input", "wikifil", "artificialneuronpng", "the", "weight", "sum", "the", "input", "produc", "the", "activ", "signal", "that", "pass", "the", "activ", "function", "obtain", "one", "output", "from", "the", "neuron", "the", "common", "use", "activ", "function", "are", "linear", "step", "sigmoid", "tanh", "and", "rectifi", "linear", "unit", "relu", "function", "linear", "function", "step", "function", "logist", "sigmoid", "function", "tanh", "function", "rectifi", "linear", "unit", "relu", "function", "train", "the", "weight", "optim", "process", "which", "the", "error", "predict", "minim", "and", "the", "network", "reach", "specifi", "level", "accuraci", "the", "method", "most", "use", "determin", "the", "error", "contribut", "each", "neuron", "call", "backpropag", "that", "calcul", "the", "gradient", "the", "loss", "function", "possibl", "make", "the", "system", "more", "flexibl", "and", "more", "power", "use", "addit", "hidden", "layer", "artifici", "neural", "network", "with", "multipl", "hidden", "layer", "between", "the", "input", "and", "output", "layer", "are", "call", "deep", "neural", "network", "dnns", "and", "they", "can", "model", "complex", "nonlinear", "relationship", "num", "multilay", "perceptron", "perceptron", "wikipediaruddeneuropng", "multilay", "perceptron", "has", "three", "more", "layer", "util", "nonlinear", "activ", "function", "main", "hyperbol", "tangent", "logist", "function", "that", "let", "classifi", "data", "that", "not", "linear", "separ", "everi", "node", "layer", "connect", "each", "node", "the", "follow", "layer", "make", "the", "network", "fulli", "connect", "for", "exampl", "multilay", "perceptron", "natur", "languag", "process", "applic", "are", "speech", "recognit", "and", "machin", "translat", "num", "convolut", "neural", "network", "typic", "architectur", "wikiconvolutionalneuralnetwork", "mediafil", "typicalcnnpng", "convolut", "neural", "network", "contain", "one", "more", "convolut", "layer", "pool", "fulli", "connect", "and", "use", "variat", "multilay", "perceptron", "discuss", "abov", "convolut", "layer", "use", "convolut", "oper", "the", "input", "pass", "the", "result", "the", "next", "layer", "this", "oper", "allow", "the", "network", "deeper", "with", "much", "fewer", "paramet", "convolut", "neural", "network", "show", "outstand", "result", "imag", "and", "speech", "applic", "yoon", "kim", "convolut", "neural", "network", "for", "sentenc", "classif", "describ", "the", "process", "and", "the", "result", "text", "classif", "task", "use", "cnns", "num", "present", "model", "built", "top", "wordnumvec", "conduct", "seri", "experi", "with", "and", "test", "against", "sever", "benchmark", "demonstr", "that", "the", "model", "perform", "excel", "text", "understand", "from", "scratch", "xiang", "zhang", "and", "yann", "lecun", "demonstr", "that", "cnns", "can", "achiev", "outstand", "perform", "without", "the", "knowledg", "word", "phrase", "sentenc", "and", "ani", "other", "syntact", "semant", "structur", "with", "regard", "human", "languag", "num", "semant", "pars", "num", "paraphras", "detect", "num", "speech", "recognit", "num", "are", "also", "the", "applic", "cnns"], "timestamp_scraper": 1556379520.621798, "title": "7 Types of Artificial Neural Networks for Natural Language Processing", "read_time": 163.79999999999998, "content_html": "<div class=\"post\" id=\"post-\">\n<p><b>By Olga Davydova, <a href=\"https://datamonsters.co/\" rel=\"noopener\" target=\"_blank\">Data Monsters</a>.</b></p>\n<p><img alt=\"Header image\" class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/800/1*FBXS211lj7zWEQZRAmDedQ.png\" width=\"85%\"/></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Artificial_neural_network\" target=\"_blank\">An artificial neural network (ANN)</a>\u00a0is a computational nonlinear model based on the neural structure of the brain that is able to learn to perform tasks like classification, prediction, decision-making, visualization, and others just by considering examples.</p>\n<p>An artificial neural network consists of artificial neurons or processing elements and is organized in three interconnected layers: input, hidden that may include more than one layer, and output.</p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/0*WI9KgVlDd_Q0BwTt.\" width=\"50%\"/><br>\n<font size=\"-1\">An artificial neural network (<a href=\"https://en.wikipedia.org/wiki/Artificial_neural_network#/media/File:Colored_neural_network.svg\" target=\"_blank\">https://en.wikipedia.org/wiki/Artificial_neural_network#/media/File:Colored_neural_network.svg</a>)</font></br></center></p>\n<p>The input layer contains input neurons that send information to the hidden layer. The hidden layer sends data to the output layer. Every neuron has weighted inputs (<a href=\"https://en.wikipedia.org/wiki/Synaptic_weight\" target=\"_blank\">synapses</a>), an\u00a0<a href=\"https://en.wikipedia.org/wiki/Activation_function\" target=\"_blank\">activation function</a>\u00a0(defines the output given an input), and one output. Synapses are the adjustable parameters that convert a neural network to a parameterized system.</p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/0*po7D6t18VWduLAcG.\" width=\"80%\"/><br>\n<font size=\"-1\">Artificial neuron with four inputs (<a href=\"http://en.citizendium.org/wiki/File:Artificialneuron.png\" target=\"_blank\">http://en.citizendium.org/wiki/File:Artificialneuron.png</a>)</font></br></center></p>\n<p>The weighted sum of the inputs produces the activation signal that is passed to the activation function to obtain one output from the neuron. The commonly used activation functions are linear, step, sigmoid, tanh, and rectified linear unit (ReLu) functions.</p>\n<p><strong>Linear Function</strong></p>\n<p><em>f(x)=ax</em></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/800/0*IHZAnIM0Qx1nRlTS.\" width=\"200\"/></p>\n<p><strong>Step Function</strong></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/800/0*Vx0yjLP7VgvPIe88.\" width=\"200\"/></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/800/0*c-iSbldwDoezVto9.\" width=\"200\"/></p>\n<p><strong>Logistic (Sigmoid) Function</strong></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/800/0*TzwfGagVeF43Kiks.\" width=\"200\"/></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/800/0*xCScqxaMVjBBFyk7.\" width=\"200\"/></p>\n<p><strong>Tanh Function</strong></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/800/0*4ljHOiE3Z60ivC5G.\" width=\"200\"/></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/800/0*mKS2p9ty2BLZd4fN.\" width=\"200\"/></p>\n<p><strong>Rectified linear unit (ReLu) Function</strong></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/800/0*D2lOXl28ZoL52blt.\" width=\"200\"/></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/800/0*6w7BcYz0R1x8PRkv.\" width=\"200\"/></p>\n<p>Training is the weights optimizing process in which the error of predictions is minimized and the network reaches a specified level of accuracy. The method mostly used to determine the error contribution of each neuron is called\u00a0<a href=\"https://en.wikipedia.org/wiki/Backpropagation\" target=\"_blank\">backpropagation</a>\u00a0that calculates the gradient of the loss function.</p>\n<p>It is possible to make the system more flexible and more powerful by using additional hidden layers. Artificial neural networks with multiple hidden layers between the input and output layers are called\u00a0<a href=\"https://en.wikipedia.org/wiki/Deep_learning#Deep_neural_networks\" target=\"_blank\">deep neural networks (DNNs)</a>, and they can model complex nonlinear relationships.</p>\n<p>\u00a0</p>\n<h3>1. Multilayer perceptron (MLP)</h3>\n<p>\u00a0<br>\n<center><img src=\"https://cdn-images-1.medium.com/max/800/0*jAC99PP0pwL6YPxk.\" width=\"80%\"/><br>\n<font size=\"-1\">A perceptron\u00a0(<a href=\"https://upload.wikimedia.org/wikipedia/ru/d/de/Neuro.PNG\" target=\"_blank\">https://upload.wikimedia.org/wikipedia/ru/d/de/Neuro.PNG</a>)</font></br></center></br></p>\n<p>A multilayer perceptron (MLP) has three or more layers. It utilizes a nonlinear activation function (mainly hyperbolic tangent or logistic function) that lets it classify data that is not linearly separable. Every node in a layer connects to each node in the following layer making the network fully connected. For example, multilayer perceptron natural language processing (NLP) applications are speech recognition and machine translation.</p>\n<p>\u00a0</p>\n<h3>2. Convolutional neural network\u00a0(CNN)</h3>\n<p>\u00a0<br/>\n<center><img src=\"https://cdn-images-1.medium.com/max/800/0*3rz2ME5BhSKS4o7H.\" width=\"99%\"/><br/>\n<font size=\"-1\">Typical CNN architecture (<a href=\"https://en.wikipedia.org/wiki/Convolutional_neural_network#/media/File:Typical_cnn.png\" target=\"_blank\">https://en.wikipedia.org/wiki/Convolutional_neural_network#/media/File:Typical_cnn.png</a>)</font></center></p>\n<p>A convolutional neural network (CNN) contains one or more convolutional layers, pooling or fully connected, and uses a variation of multilayer perceptrons discussed above. Convolutional layers use a\u00a0<a href=\"https://en.wikipedia.org/wiki/Convolution\" target=\"_blank\">convolution operation</a>\u00a0to the input passing the result to the next layer. This operation allows the network to be deeper with much fewer parameters.</p>\n<p>Convolutional neural networks show outstanding results in image and speech applications. Yoon Kim in\u00a0<a href=\"http://www.aclweb.org/anthology/D14-1181\" target=\"_blank\">Convolutional Neural Networks for Sentence Classification</a>\u00a0describes the process and the results of text classification tasks using CNNs\u00a0<a href=\"http://www.aclweb.org/anthology/D14-1181\" target=\"_blank\">[1]</a>. He presents a model built on top of\u00a0<a href=\"https://en.wikipedia.org/wiki/Word2vec\" target=\"_blank\">word2vec</a>, conducts a series of experiments with it, and tests it against several benchmarks, demonstrating that the model performs excellent.</p>\n<p>In\u00a0<a href=\"https://arxiv.org/pdf/1502.01710.pdf\" target=\"_blank\">Text Understanding from Scratch</a>, Xiang Zhang and Yann LeCun, demonstrate that CNNs can achieve outstanding performance without the knowledge of words, phrases, sentences and any other syntactic or semantic structures with regards to a human language\u00a0<a href=\"https://arxiv.org/pdf/1502.01710.pdf\" target=\"_blank\">[2]</a>. Semantic parsing\u00a0<a href=\"http://www.aclweb.org/anthology/P15-1128\" target=\"_blank\">[3]</a>, paraphrase detection\u00a0<a href=\"https://www.aclweb.org/anthology/K15-1013\" target=\"_blank\">[4]</a>, speech recognition\u00a0<a href=\"https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/CNN_ASLPTrans2-14.pdf\" target=\"_blank\">[5]</a>\u00a0are also the applications of CNNs.</p>\n</div> ", "website": "kdnuggets"}