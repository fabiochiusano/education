{"content": "By Karlijn Willems, Data Science Journalist & DataCamp Contributor . Structured Query Language (SQL) is an indispensable skill in the data science industry and generally speaking, learning this skill is fairly easy. However, most forget that SQL isn\u2019t just about writing queries, which is just the first step down the road. Ensuring that queries are performant or that they fit the context that you\u2019re working in is a whole other thing. That\u2019s why this SQL tutorial will provide you with a small peek at some steps that you can go through to evaluate your query: First off, you\u2019ll start with a short overview of the\u00a0 importance of learning SQL \u00a0for jobs in data science; Next, you\u2019ll first learn more about how\u00a0 SQL query processing and execution \u00a0so that you can properly understand the importance of writing qualitative queries: more specifically, you\u2019ll see that the query is parsed, rewritten, optimized and finally evaluated; With that in mind, you\u2019ll not only go over some\u00a0 query anti-patterns \u00a0that beginners make when writing queries, but you\u2019ll also learn more about alternatives and solutions to those possible mistakes; You\u2019ll also learn more about the\u00a0 set-based versus the procedural approach \u00a0to querying. You\u2019ll also see that these anti-patterns stem from performance concerns and that, besides the \u201cmanual\u201d approach to improving SQL queries, you can\u00a0 analyze your queries \u00a0also in a more structured, in-depth way by making use of some other tools that help you to see the query plan; And, You\u2019ll briefly go more into\u00a0 time complexity and the big O notation \u00a0to get an idea about the time complexity of an execution plan before you execute your query; Lastly, You\u2019ll briefly get some pointers on how you can\u00a0 tune your query \u00a0further. Are you interested in an SQL course? Take DataCamp\u2019s\u00a0 Intro to SQL for Data Science \u00a0course! \u00a0 Why Should I Learn SQL For Data\u00a0Science? \u00a0 SQL is far from dead: it\u2019s one of the most in-demand skills that you find in job descriptions from the data science industry, whether you\u2019re applying for a data analyst, a data engineer, a data scientist or\u00a0 any other roles . This is confirmed by 70% of the respondents of the 2016 O\u2019Reilly Data Science Salary Survey, who indicate that they use SQL in their professional context. What\u2019s more, in this survey, SQL stands out way above the R (57%) and Python (54%) programming languages. You get the picture: SQL is a must-have skill when you\u2019re working towards getting a job in the data science industry. Not bad for a language that was developed in the early 1970s, right? But why exactly is it that it is so frequently used? And why isn\u2019t it dead even though it has been around for such a long time? There are several reasons: one of the first reasons would be that companies mostly store data in Relational Database Management Systems (RDBMS) or in Relational Data Stream Management Systems (RDSMS) and you need SQL to access that data. SQL is the lingua franca of data: it gives you the ability to interact with almost any database or to even build your own locally! As if this wasn\u2019t enough yet, keep in mind that there are quite a few SQL implementations that are incompatible between vendors and do not necessarily follow standards. Knowing the standard SQL is thus a requirement for you to find your way around in the (data science) industry. On top of that, it\u2019s safe to say that SQL has also been embraced by newer technologies, such as Hive, a SQL-like query language interface to query and manage large datasets, or Spark SQL, which you can use to execute SQL queries. Once again, the SQL that you find there will differ from the standard that you might have learned, but the learning curve will be considerably easier. If you do want to make a comparison, consider it as learning linear algebra: by putting all that effort into this one subject, you know that you will be able to use it to master machine learning as well! In short, this is why you should learn this query language: It\u2019s is fairly easy to learn, even for total newbies. The learning curve is quite easy and gradual, so you\u2019ll be writing queries in no time. It follows the \u201clearn once, use anywhere\u201d principle, so it\u2019s a great investment of your time! It\u2019s an excellent addition to programming languages; In some cases, writing a query is even preferred over writing code because it\u2019s more performant! \u2026 What are you still waiting for?\u00a0:) \u00a0 SQL Processing & Query Execution \u00a0 To improve the performance of your SQL query, you first have to know what happens internally when you press the shortcut to run the query. First, the query is parsed into a \u201cparse tree\u201d; The query is analyzed to see if it satisfies the syntactical and semantical requirements. The parser creates an internal representation of the input query. This output is then passed on to the rewrite engine. It is then the task of the optimizer to find the optimal execution or query plan for the given query. The execution plan defines exactly what algorithm is used for each operation, and how the execution of the operations is coordinated. To indeed find the most optimal execution plan, the optimizer enumerates all possible execution plans, determines the quality or cost of each plan, takes information about the current database state and then chooses the best one as the final execution plan. Because query optimizers can be imperfect, database users and administrators sometimes need to manually examine and tune the plans produced by the optimizer to get better performance. Now you probably wonder what is considered to be a \u201cgood query plan\u201d. As you already read, the quality of cost of a plan plays a huge role. More specifically, things such as the number of disk I/Os that are required to evaluate the plan, the plan\u2019s CPU cost and the overall response time that can be observed by the database client and the total execution time are essential. That is where the notion of time complexity will come in. You\u2019ll read more about this later on. Next, the chosen query plan is executed, evaluated by the system\u2019s execution engine and the results of your query are returned. \u00a0 Writing SQL Queries \u00a0 What might not have become clear from the previous section is that the Garbage In, Garbage Out (GIGO) principle naturally surfaces within the query processing and execution: the one who formulates the query also holds the keys to the performance of your SQL queries. If the optimizer gets a badly formulated query, it will only be able to do as much\u2026 That means that there are some things that\u00a0 you \u00a0can do when you\u2019re writing a query. As you already saw in the introduction, the responsibility is two-fold: it\u2019s not only about writing queries that live up to a certain standard, but also about gathering an idea of where performance problems might be lurking within your query. An ideal starting point is to think of \u201cspots\u201d within your queries where issues might sneak in. And, in general, there are four clauses and keywords where newbies can expect performance issues to occur: The\u00a0 WHERE \u00a0clause; Any\u00a0 INNER JOIN \u00a0or\u00a0 LEFT JOIN \u00a0keywords; And, The\u00a0 HAVING \u00a0clause; Granted, this approach is simple and naive, but as a beginner, these clauses and statements are nice pointers and it\u2019s safe to say that when you\u2019re just starting out, these spots are the ones where mistakes happen and, ironically enough, where they\u2019re also hard to spot. However, you should also realize that performance is something that needs a context to become meaningful: simply saying that these clauses and keywords are bad isn\u2019t the way to go when you\u2019re thinking about SQL performance. Having a\u00a0 WHERE \u00a0or\u00a0 HAVING \u00a0clause in your query doesn\u2019t necessarily mean that it\u2019s a bad query\u2026 Take a look at the following section to learn more about anti-patterns and alternative approaches to building up your query. These tips and tricks are meant as a guide. How and if you actually need to rewrite your query depends on the amount of data, the database and the number of times you need to execute the query, among other things. It entirely depends on the goal of your query and having some prior knowledge about the database that you want to query is crucial! \u00a0 1. Only Retrieve The Data You\u00a0Need \u00a0 The mindset of \u201cthe more data, the better\u201d isn\u2019t one that you should necessarily live by when you\u2019re writing SQL queries: not only do you risk obscuring your insights by getting more than what you actually need, but also your performance might suffer from the fact that your query pulls up too much data. That\u2019s why it\u2019s generally a good idea to look out for the\u00a0 SELECT \u00a0statement, the\u00a0 DISTINCT \u00a0clause and the\u00a0 LIKE \u00a0operator. The SELECT Statement A first thing that you can already check when you have written your query is whether the\u00a0 SELECT \u00a0statement is as compact as possible. Your aim here should be to remove unncessary columns from\u00a0 SELECT . This way you force yourself to only pull up data that serves your query goal. In case you have correlated subqueries that have\u00a0 EXISTS , you should try to use a constant in the\u00a0 SELECT \u00a0statement of that subquery instead of selecting the value of an actual column. This is especially handy when you\u2019re checking the existence only. Remember \u00a0that a correlated subquery is a subquery that uses values from the outer query. And note that, even though\u00a0 NULL \u00a0can work in this context as a \u201cconstant\u201d, it\u2019s very confusing! Consider the following example to understand what is meant by using a constant: SELECT driverslicensenr, name \r FROM Drivers \r WHERE EXISTS (SELECT '1' FROM Fines \r WHERE fines.driverslicensenr = drivers.driverslicensenr); Tip : it\u2019s handy to know that having a correlated subquery isn\u2019t always a good idea. You can always consider getting rid of them by, for example, rewriting them with an\u00a0 INNER JOIN : SELECT driverslicensenr, name \r FROM drivers \r INNER JOIN fines ON fines.driverslicensenr = drivers.driverslicensenr; The DISTINCT Clause The\u00a0 SELECT DISTINCT \u00a0statement is used to return only distinct (different) values.\u00a0 DISTINCT \u00a0is a clause that you should definitely try to avoid if you can; Like you have read in other examples, the execution time only increases if you add this clause to your query. It\u2019s therefore always a good idea to consider whether you really need this\u00a0 DISTINCT \u00a0operation to take place to get the results that you want to accomplish. The LIKE Operator When you use the\u00a0 LIKE \u00a0operator in a query, the index isn\u2019t used if the pattern starts with\u00a0 % \u00a0or\u00a0 _ . It will prevent the database from using an index (if it exists). Of course, from another point of view, you could also argue that this type of query potentially leaves the door open to retrieve too many records that don\u2019t necessarily satisfy your query goal. Once again, your knowledge of the data that is stored in the database can help you to formulate a pattern that will filter correctly through all the data to find only the rows that really matter for your query. \u00a0 2. Limit Your\u00a0Results \u00a0 When you can not avoid filtering down on your\u00a0 SELECT \u00a0statement, you can consider limiting your results in other ways. Here\u2019s where approaches such as the\u00a0 LIMIT \u00a0clause and data type conversions come in. TOP , LIMIT And ROWNUM Clauses You can add the\u00a0 LIMIT \u00a0or\u00a0 TOP \u00a0clauses to your queries to set a maximum number of rows for the result set. Here are some examples: SELECT TOP 3 * \r FROM Drivers; Note \u00a0that you can further specify the\u00a0 PERCENT , for example, if you change the first line of the query by\u00a0 SELECT TOP 50 PERCENT * . SELECT driverslicensenr, name \r FROM Drivers \r LIMIT 2; Additionally, you can also add the\u00a0 ROWNUM \u00a0clause, which is equivalent to using\u00a0 LIMIT \u00a0in your query: SELECT * \r FROM Drivers \r WHERE driverslicensenr = 123456 AND ROWNUM <= 3; \u00a0 Data Type Conversions \u00a0 You should always use the most efficient, that is, smallest, data types possible. There\u2019s always a risk when you provide a huge data type when a smaller one will be more sufficient. However, when you add data type conversion to your query, you only increase the execution time. An alternative is just to avoid data type conversion as much as possible. Note also here that it\u2019s not always possible to remove or omit the data type conversion from your queries, but that you should definitely aim to be careful in including them and that when you do, you test the effect of the addition before you run the query.", "title_html": "<h1 id=\"title\">How To Write Better SQL Queries: The Definitive Guide \u2013 Part 1</h1> ", "url": "https://www.kdnuggets.com/2017/08/write-better-sql-queries-definitive-guide-part-1.html", "tfidf": {"tfidf": {"outer": 8.413354531, "semant": 39.1034482759, "anywher": 10.1638924456, "equival": 4.09175257732, "omit": 13.0131147541, "antipattern": 1536.3870967740002, "onc": 4.492359932099999, "too": 3.6317053643, "occur": 1.7453825857499998, "analyst": 14.8373831776, "play": 1.46390041494, "imperfect": 30.5307692308, "rememb": 4.88793103448, "addit": 3.73904851626, "would": 1.0828729281799998, "number": 3.30428749827, "previous": 1.42846859816, "rewritten": 47.6756756757, "dataset": 193.609756098, "client": 14.1371326803, "driver": 33.99571734475, "well": 1.0655748708, "tri": 3.7089125102199993, "tree": 4.127925117, "creat": 1.2492917847, "approach": 10.37782716695, "toward": 1.6303142329, "know": 10.3730806926, "their": 1.01547908405, "mistak": 17.42700329308, "store": 6.89361702128, "instead": 1.59461631177, "fit": 3.37070063694, "how": 6.41001312204, "test": 2.65707112971, "fair": 6.41066020594, "good": 6.07926479036, "increas": 2.6404989605, "especi": 1.66712170534, "satisfi": 15.361393323660002, "given": 1.35426085473, "interest": 1.60331246213, "indispens": 51.2129032258, "tutori": 59.4606741573, "beginn": 106.909090909, "overview": 12.6805111821, "specif": 3.7438981252199994, "open": 1.24556723678, "sqllike": 512.129032258, "disk": 24.767550701999998, "confus": 4.1451697127900005, "vendor": 27.2783505155, "intro": 66.7058823529, "clear": 1.85423966363, "perform": 16.845374746750004, "but": 7.11426925293, "view": 1.6407606448899998, "definit": 6.48, "need": 11.498098859279999, "cost": 6.95807158509, "final": 2.6801721955, "algebra": 41.4516971279, "expect": 2.20011086475, "point": 2.51980001588, "record": 1.42334588488, "naiv": 50.2405063291, "key": 2.28005170185, "prevent": 2.16117615029, "much\u2026": 512.129032258, "has": 2.0872995004, "enough": 4.463939266140001, "besid": 5.1362018764199995, "formul": 29.58260869566, "pass": 1.61818367139, "use": 16.474220118079998, "trick": 14.7272727273, "out": 4.24066777964, "administr": 2.3898840885099997, "suffer": 2.16117615029, "quit": 5.769943667100001, "alway": 12.404740200540001, "line": 1.4182597820299998, "cours": 6.45278417559, "forc": 1.32399299475, "huge": 8.77854575616, "optim": 92.3023255816, "program": 4.04278074866, "iron": 3.84499878905, "franca": 67.27118644069999, "not": 8.12539184952, "far": 1.71022298826, "necessarili": 29.33210161664, "short": 2.82591669634, "are": 16.47849497248, "whole": 2.29488291414, "such": 4.24605509496, "altern": 6.4171382376600015, "aim": 5.792046698280001, "four": 1.20950784702, "dead": 5.9216710182800005, "easi": 15.8812937646, "will": 11.02329887364, "though": 2.72152224222, "finesdriverslicensenr": 1024.258064516, "index": 13.993829881, "they": 3.09051975861, "anoth": 1.13643521832, "qualit": 42.223404255300004, "driversdriverslicensenr": 1024.258064516, "indemand": 512.129032258, "effect": 1.3963060686000002, "choos": 4.17899447223, "scienc": 20.87726475744, "chosen": 3.59266802444, "spark": 8.360189573460001, "claus": 171.76506955160002, "sneak": 46.017391304300006, "stem": 7.453521126760001, "ensur": 3.4127257093700005, "suffici": 4.3117870722400005, "journalist": 5.01136363636, "respons": 3.0133814178600002, "alreadi": 5.86551724137, "provid": 2.43105428374, "respond": 3.17329602239, "valu": 6.833285509320001, "mind": 7.1837104072399995, "develop": 1.1955719557200002, "pattern": 7.58347265346, "sever": 1.07241286139, "those": 1.19548192771, "therefor": 2.33401940606, "python": 56.2978723404, "some": 8.32293577984, "small": 1.3594793629, "should": 14.978928608910001, "invest": 4.16146788991, "result": 5.7305804216, "concern": 1.8852867830400002, "press": 1.41245551601, "produc": 1.36932896326, "filter": 33.7787234042, "setbas": 512.129032258, "languag": 13.76929748484, "set": 2.37415881562, "wait": 4.55421686747, "ani": 3.40151406942, "and": 40.0025196852, "from": 11.00623936467, "limit": 3.0373062942400004, "whether": 6.62051709759, "num": 13.00409552013, "technolog": 2.6034765496900003, "happen": 5.92719805862, "idea": 10.4653922215, "curv": 22.2197340798, "safe": 10.05446485118, "for": 16.00504064016, "depend": 4.4822134387400006, "output": 7.676982591880001, "spot": 13.588587731819999, "with": 6.007189253939998, "written": 1.9573418813999999, "handi": 204.851612904, "these": 5.3707713126000005, "determin": 2.1658935879900003, "simpli": 2.5192002538900002, "better": 4.0131445905000005, "compani": 1.5523613963, "newer": 9.9225, "effort": 1.89247824532, "current": 1.5325803649, "frequent": 2.10501193317, "meaning": 21.8076923077, "look": 3.8172637653199994, "pointer": 136.8620689656, "veri": 1.25880114177, "intern": 2.60711060022, "surfac": 3.97396745932, "think": 5.81431972166, "work": 3.34560269739, "pars": 436.954128441, "confirm": 3.0827184466000004, "amount": 2.27027027027, "master": 3.15125049623, "column": 14.156041016500001, "again": 3.01767724768, "remov": 4.011623499680001, "then": 3.25973581548, "later": 1.08650424309, "even": 5.8230633803, "convers": 16.743303100600002, "give": 1.3653250774, "proper": 3.3388012618299996, "rewrit": 98.00000000010002, "check": 13.0131147541, "place": 1.1004366812200002, "great": 1.26592775696, "avoid": 7.379609544479999, "goal": 9.84456386937, "total": 3.0920245398799997, "big": 2.7400759406299997, "type": 16.224833929520003, "note": 4.27348586811, "row": 11.098217406500002, "probabl": 2.64555907349, "scientist": 4.69426374926, "machin": 4.02433460076, "into": 3.04507384437, "prior": 2.17807655371, "abov": 1.90382539873, "constant": 10.976722747170001, "requir": 4.58534706846, "where": 7.47005444647, "meant": 6.41195476576, "descript": 4.00504540868, "what": 10.02747513024, "obscur": 10.584000000000001, "local": 1.51720183486, "wonder": 7.265903890160001, "fine": 8.04459082848, "help": 2.79925945518, "larg": 1.18574949585, "find": 10.376470588259998, "briefli": 9.7339055794, "potenti": 2.52080025405, "actual": 5.62446858762, "solut": 4.7278141751, "own": 1.17844418052, "natur": 1.5392670157100001, "fact": 1.73375559681, "who": 2.12558575446, "pictur": 3.4953764861300005, "hold": 1.6551292744, "lurk": 157.188118812, "here": 9.69230769232, "ideal": 4.65571847507, "maximum": 4.80072573329, "last": 1.2117234010100002, "long": 1.2657259028899999, "section": 4.2568708942199995, "much": 2.3884459154599997, "evalu": 27.803852889679998, "than": 1.03278688525, "care": 2.49426551453, "about": 12.77832181908, "problem": 1.76674827509, "stream": 6.5118949959000005, "job": 9.761836441889999, "distinct": 2.2836593786000003, "mindset": 84.44680851060001, "context": 17.03890528576, "survey": 7.558200428460001, "just": 5.34320572148, "entir": 1.59365589239, "correct": 3.6631287494199998, "hive": 108.739726027, "each": 2.37949640288, "grant": 2.2490437739099995, "statement": 23.956025005359997, "them": 3.29628347982, "defin": 2.72830383227, "willem": 48.5504587156, "smallest": 13.2964824121, "live": 2.61182857612, "complex": 7.0206367924499995, "notion": 7.356811862839999, "tool": 4.99716713881, "start": 5.06694326976, "driverslicensenr": 2048.516129032, "among": 1.25670862028, "run": 3.11385701676, "guid": 2.49113447356, "coordin": 5.65586034913, "insight": 11.8037174721, "simpl": 3.3981164383599998, "keep": 2.04245465071, "bad": 13.577934573439999, "observ": 2.22446406053, "execut": 40.2546837582, "standard": 7.566305254360001, "whi": 19.539692307720003, "comparison": 4.9597000937199995, "karlijn": 512.129032258, "mani": 1.04426757877, "pull": 10.37308069258, "realiz": 4.89244992296, "over": 2.05050048434, "step": 5.655860349119999, "door": 4.89244992296, "build": 3.2683479156, "subqueri": 2560.64516129, "algorithm": 27.9507042254, "linear": 13.8776223776, "earli": 1.12468121281, "exact": 6.9372951715, "there": 6.24547600314, "exist": 2.9294215333599998, "inform": 1.5753125620200001, "incompat": 23.4159292035, "possibl": 8.5042406928, "industri": 8.09277430864, "say": 5.2633440159, "best": 1.5828514456600002, "exampl": 7.5241706161, "right": 1.4054532577899999, "correl": 39.558139534800006, "knowledg": 6.7962328767199995, "take": 4.55846672888, "follow": 4.18560506196, "now": 1.160780873, "further": 2.723623263, "name": 3.3063519611100003, "code": 3.8807137619199996, "hard": 2.73253012048, "interact": 4.4185917061, "tip": 18.84391691394, "represent": 5.928304705, "abl": 3.6417020300400003, "realli": 9.495215311, "peek": 160.363636364, "indic": 2.0826446281, "matter": 2.44773358002, "issu": 2.87843350558, "also": 13.191946308710001, "specifi": 6.920662598080001, "risk": 8.191950464400001, "around": 2.42789417342, "mean": 2.89813800658, "embrac": 8.45817794353, "task": 3.88641370869, "role": 3.10654534782, "plan": 21.4997098085, "accomplish": 5.17302052786, "syntact": 87.7127071823, "the": 129.0, "becom": 2.24984057252, "analyz": 19.37278828554, "appli": 2.2972073506, "stand": 2.0845588235299997, "consid": 7.438388255520001, "want": 5.99094339624, "which": 3.015575535, "abil": 2.70875277256, "twofold": 127.008, "system": 4.16219522853, "parser": 512.129032258, "howev": 3.2835573939899994, "essenti": 2.9280708225700005, "manual": 15.45861733204, "crucial": 7.7443902439, "still": 1.1866357724799999, "contributor": 14.4721969006, "databas": 74.22545454543, "saw": 1.94845360825, "skill": 14.795899347639999, "thus": 1.6463756092500001, "other": 6.05954198472, "introduct": 2.7808723068799996, "procedur": 5.8691312384500005, "one": 8.05019965776, "prefer": 3.0216977540900003, "see": 5.08968502044, "becaus": 2.2990369994999997, "query\u2026": 512.129032258, "get": 16.07063322465, "easier": 7.84, "like": 1.14918566775, "implement": 3.57648118946, "examin": 3.8505942275, "manag": 4.934521342739999, "select": 2.02345144022, "process": 5.08574479446, "add": 18.44973852412, "yet": 2.1258703802900003, "includ": 1.0190641247799999, "structur": 4.1161524500999995, "notat": 26.8175675676, "next": 2.9901120632800002, "gather": 3.78631051753, "through": 2.14149861738, "put": 1.65806788512, "access": 1.8734953976900002, "road": 2.49819040126, "principl": 6.904109589039999, "time": 11.12402063828, "engin": 7.414072229129999, "relat": 2.47501753838, "chang": 1.1808985421, "smaller": 2.59369384088, "differ": 2.4730898045, "been": 2.0478555304799997, "profession": 2.6389627659599997, "forget": 16.9978586724, "most": 5.10482315115, "between": 1.03453668708, "return": 2.79064862014, "certain": 1.8077886586200003, "excel": 4.84467500763, "all": 3.03440366973, "top": 1.8387769284200002, "within": 3.7107908063999995, "tune": 20.8346456692, "reason": 3.44680851064, "someth": 3.28152128979, "almost": 1.53584212054, "case": 2.96997474512, "that": 64.25498008, "subject": 1.8715077213299998, "garbag": 87.9556786704, "reilli": 83.1204188482, "off": 1.5121440137200002, "more": 14.2403895438, "improv": 4.08753861998, "indepth": 512.129032258, "interfac": 20.9169960474, "salari": 10.2096463023, "compact": 12.451764705899999, "unncessari": 512.129032258, "yourself": 26.592964824099997, "keyword": 417.789473685, "general": 3.3654607122600004, "could": 1.2043695949, "befor": 2.20072082062, "retriev": 4.33652007648, "state": 1.0477133240899998, "shortcut": 127.008, "serv": 1.4668760972, "can": 22.34896643698, "make": 3.2287980475800007, "queri": 3603.0638297856, "way": 7.3144436766, "write": 20.575427682700003, "onli": 11.282124168260001, "musthav": 512.129032258, "enumer": 41.1295336788, "few": 1.31729173581, "rid": 23.837837837800002, "this": 17.06449165407, "thing": 12.032742155549998, "read": 6.944881889760001, "data": 101.2930667802, "oper": 9.32876309862, "versus": 7.77473065622, "sometim": 1.7126213592200001, "overal": 3.0442953020099996, "come": 2.65662650602, "might": 10.780931685450001, "learn": 34.841258229750004, "understand": 5.93717277486, "datacamp": 1024.258064516, "consider": 2.29920347574, "import": 2.6803984467400004, "first": 8.06092916984, "leav": 1.6615384615399997, "input": 12.2029208301, "speak": 2.89127663449, "nice": 17.7583892617, "have": 10.1489484114, "qualiti": 5.8658784408, "lingua": 55.7052631579, "newbi": 835.5789473680001, "user": 7.71053909665, "gradual": 3.7890214797099997, "down": 2.71779508688, "inde": 4.43092380687, "when": 15.31151546325, "argu": 2.67768595041, "effici": 5.09335899904}, "logtfidf": {"outer": 2.12982026853, "semant": 3.6662106543, "anywher": 2.3188414835, "equival": 1.40897338129, "omit": 2.56595767618, "antipattern": 18.715729828259995, "onc": 1.211297617065, "too": 1.1931103094439999, "occur": 0.556973778473, "analyst": 2.6971498864499996, "play": 0.38110439064199997, "imperfect": 3.4187350023299996, "rememb": 1.5867691126199999, "addit": 0.6606566489160001, "would": 0.0796176279647, "number": 0.2898257352558, "previous": 0.356602960063, "rewritten": 3.86442132392, "dataset": 5.26584456664, "client": 2.6488048591599997, "driver": 9.583983219, "well": 0.0635144383156, "tri": 1.23518305832, "tree": 1.41777488775, "creat": 0.222576818514, "approach": 3.6511680729050005, "toward": 0.48877277716000006, "know": 3.811678777592, "their": 0.015360505122700001, "mistak": 4.329747472159999, "store": 2.4748974670400004, "instead": 0.46663315041500003, "fit": 1.2151206268899999, "how": 1.8862678277200002, "test": 0.977224437103, "fair": 2.32963016262, "good": 1.674357619628, "increas": 0.555641437858, "especi": 0.511098609709, "satisfi": 4.07742050844, "given": 0.303255810831, "interest": 0.47207177798199995, "indispens": 3.9359915164199997, "tutori": 4.0853151555, "beginn": 7.9576633502, "overview": 2.54006626224, "specif": 1.253960335082, "open": 0.219591038029, "sqllike": 6.238576609419999, "disk": 3.2095343569800003, "confus": 1.4219437317299999, "vendor": 3.30609336617, "intro": 4.20029314023, "clear": 0.617474727198, "perform": 4.68798935638, "but": 0.1133466045033, "view": 0.49515994217299997, "definit": 2.3511466596, "need": 2.901921307536, "cost": 2.52387022854, "final": 0.585467727896, "algebra": 3.7245288247199992, "expect": 0.78850775216, "point": 0.46206471806599997, "record": 0.353010356953, "naiv": 3.9168216003199996, "key": 0.82419811896, "prevent": 0.7706525875229999, "much\u2026": 6.238576609419999, "has": 0.0854478897096, "enough": 1.605768878338, "besid": 1.63631387177, "formul": 6.865723067760001, "pass": 0.48130432974, "use": 0.4673283157056, "trick": 2.6897010624299997, "out": 0.2337055636772, "administr": 0.8712448662379999, "suffer": 0.7706525875229999, "quit": 2.11903027368, "alway": 4.3579152274320005, "line": 0.349430614452, "cours": 2.2976982123989997, "forc": 0.280652166524, "huge": 2.9583271639, "optim": 19.565022363279997, "program": 1.4075711575299998, "iron": 1.34677328802, "franca": 4.20873200888, "not": 0.12441930406, "far": 0.536623764503, "necessarili": 7.96955269388, "short": 0.691371251358, "are": 0.4714795773232, "whole": 0.8306818244059999, "such": 0.238783911224, "altern": 2.281079916846, "aim": 2.12667707408, "four": 0.190213538869, "dead": 2.1709429902200004, "easi": 4.99958890545, "will": 1.825078814235, "though": 0.616088382158, "finesdriverslicensenr": 12.477153218839998, "index": 3.89093865824, "they": 0.0891809843028, "anoth": 0.127896361652, "qualit": 3.74297467051, "driversdriverslicensenr": 12.477153218839998, "indemand": 6.238576609419999, "effect": 0.333830227158, "choos": 1.43007066072, "scienc": 7.572925610018999, "chosen": 1.27889510877, "spark": 2.12348110309, "claus": 35.09898474376, "sneak": 3.8290193968699997, "stem": 2.0086865552, "ensur": 1.22751130026, "suffici": 1.4613524521099999, "journalist": 1.61170806097, "respons": 0.8198313246060001, "alreadi": 2.011435142241, "provid": 0.39035568865000003, "respond": 1.15477080241, "valu": 2.469579930444, "mind": 2.5573376776599996, "develop": 0.178624694913, "pattern": 2.66564809576, "sever": 0.06991112039689999, "those": 0.17854939087299998, "therefor": 0.847591848336, "python": 4.03065674296, "some": 0.316588072516, "small": 0.307101805059, "should": 4.584778890822, "invest": 1.42586787018, "result": 0.681894541905, "concern": 0.634079948873, "press": 0.345329690455, "produc": 0.314320812003, "filter": 5.65336787728, "setbas": 6.238576609419999, "languag": 4.984090946436, "set": 0.342992022578, "wait": 1.51605358782, "ani": 0.376825075098, "and": 0.002519605682544, "from": 0.006237595857525999, "limit": 0.83564770926, "whether": 2.3746835689409997, "num": 0.004094875140161, "technolog": 0.956847686355, "happen": 2.17280883604, "idea": 3.6931796105999997, "curv": 4.81566727194, "safe": 3.22973923818, "for": 0.005039846326352001, "depend": 1.61393963, "output": 2.03822657827, "spot": 4.53185404329, "with": 0.00718495028034, "written": 0.671587369833, "handi": 9.25827739396, "these": 0.357668097004, "determin": 0.772833019022, "simpli": 0.923941491586, "better": 1.3928558812, "compani": 0.439777253097, "newer": 2.29480490568, "effort": 0.637887211057, "current": 0.42695282784500005, "frequent": 0.7443211360850001, "meaning": 3.08226276571, "look": 1.2927733872, "pointer": 8.451652884480001, "veri": 0.230159793238, "intern": 0.530190755632, "surfac": 1.3797649557, "think": 2.1343532235, "work": 0.327103701819, "pars": 14.943647795009998, "confirm": 1.12581182025, "amount": 0.819898886199, "master": 1.14779935699, "column": 3.91398855876, "again": 0.822680463224, "remov": 1.3920976831760001, "then": 0.24910159569269996, "later": 0.0829654259878, "even": 0.76194282417, "convers": 6.042802255, "give": 0.311392552224, "proper": 1.2056118389200001, "rewrit": 10.45906557, "check": 3.74562099124, "place": 0.0957070839572, "great": 0.235805258079, "avoid": 2.700325323873, "goal": 3.56492136819, "total": 0.8713577734100001, "big": 1.00798563557, "type": 5.656811883096, "note": 1.061452704249, "row": 3.4272746417, "probabl": 0.972882412913, "scientist": 1.54634128444, "machin": 1.39235958062, "into": 0.0447385896861, "prior": 0.778442172521, "abov": 0.643865229816, "constant": 3.8914938843, "requir": 1.272760532025, "where": 0.4549449712199001, "meant": 2.33003399908, "descript": 1.38755491845, "what": 1.807098374616, "obscur": 2.3593434268099998, "local": 0.416867740206, "wonder": 1.98319270637, "fine": 2.78370547648, "help": 0.672415442688, "larg": 0.17037506060600002, "find": 3.286687981728, "briefli": 3.1649360614399997, "potenti": 0.9245764122419999, "actual": 1.885542544944, "solut": 1.55346297627, "own": 0.164195077421, "natur": 0.431306339292, "fact": 0.5502899207949999, "who": 0.1218004659718, "pictur": 1.25144109124, "hold": 0.503879117196, "lurk": 5.05744329706, "here": 3.5401527534800006, "ideal": 1.53809624363, "maximum": 1.5687671009200002, "last": 0.19204364461100001, "long": 0.235645793878, "section": 1.510774355896, "much": 0.35499145860200004, "evalu": 7.755520972519999, "than": 0.0322608622182, "care": 0.9139943029109999, "about": 0.7541217296952001, "problem": 0.569140724273, "stream": 1.8736305038599999, "job": 3.5396047622699998, "distinct": 0.825779146958, "mindset": 4.43612185107, "context": 5.79681965768, "survey": 2.6589718854599997, "just": 1.158125736436, "entir": 0.46603068026999994, "correct": 1.29831763181, "hive": 4.68895719219, "each": 0.347483378608, "grant": 0.8105051365070001, "statement": 8.612167964050002, "them": 0.2825499807279, "defin": 1.00368010925, "willem": 3.88260364301, "smallest": 2.58749951995, "live": 0.533806798694, "complex": 2.5507249092929998, "notion": 1.9956266680799999, "tool": 1.60887117963, "start": 0.945773477164, "driverslicensenr": 24.954306437679996, "among": 0.228496097073, "run": 0.885429951078, "guid": 0.912738218589, "coordin": 1.73269223754, "insight": 2.46841452187, "simpl": 1.2232212893899999, "keep": 0.7141523446729999, "bad": 4.8886066247199995, "observ": 0.7995160149320001, "execut": 14.487382905552, "standard": 2.54964203928, "whi": 7.08413058282, "comparison": 1.60134527393, "karlijn": 6.238576609419999, "mani": 0.0433157581221, "pull": 3.2921337499199996, "realiz": 1.5876931847600002, "over": 0.0498734429914, "step": 2.07909011396, "door": 1.5876931847600002, "build": 0.982274904182, "subqueri": 31.192883047099997, "algorithm": 3.33044239518, "linear": 2.63027764196, "earli": 0.117499629108, "exact": 2.4875295465000002, "there": 0.24058735755299998, "exist": 0.7633155881739999, "inform": 0.454453704662, "incompat": 3.1534165259599996, "possibl": 2.0928328493460002, "industri": 2.8187089670999996, "say": 1.6864628416560001, "best": 0.459227932947, "exampl": 2.0434133749949996, "right": 0.34035985417, "correl": 7.737477564090001, "knowledg": 2.4464425787799997, "take": 0.522767848788, "follow": 0.18142764437679998, "now": 0.149092945021, "further": 0.617631790594, "name": 0.29169949915290005, "code": 1.35601909597, "hard": 1.00522796406, "interact": 1.4858210267899998, "tip": 4.486085942240001, "represent": 1.7797382876499999, "abl": 1.19860796495, "realli": 3.1152816794, "peek": 5.0774439637699995, "indic": 0.7336385419149999, "matter": 0.8951625270360001, "issu": 0.728198087868, "also": 0.1905430514, "specifi": 1.93451151621, "risk": 2.8200096817799998, "around": 0.38775421156400003, "mean": 0.74184256704, "embrac": 2.13513377732, "task": 1.35748680661, "role": 0.8807282151479999, "plan": 6.0057495140579995, "accomplish": 1.64345675928, "syntact": 4.47406678264, "the": 0.0, "becom": 0.23542435297800002, "analyz": 4.541444470319999, "appli": 0.8316941898119999, "stand": 0.7345572374320001, "consid": 1.289368342944, "want": 2.0749098187649997, "which": 0.01553524153629, "abil": 0.996488297427, "twofold": 4.8442500766, "system": 0.982291036755, "parser": 6.238576609419999, "howev": 0.27094535204250003, "essenti": 1.07434378384, "manual": 4.09003884682, "crucial": 2.04696874177, "still": 0.17112222142900002, "contributor": 2.67222935363, "databas": 18.988943104620002, "saw": 0.667036036556, "skill": 5.2322228406, "thus": 0.49857627139300004, "other": 0.05924848751856, "introduct": 1.02276465794, "procedur": 1.76970662262, "one": 0.050042813164, "prefer": 1.10581884366, "see": 0.963686341968, "becaus": 0.27868631765, "query\u2026": 6.238576609419999, "get": 5.217921052037999, "easier": 2.05923883436, "like": 0.139053576545, "implement": 1.27437940907, "examin": 1.3482274812000001, "manag": 1.492930161474, "select": 0.704804687133, "process": 1.583487597075, "add": 6.11502334852, "yet": 0.754181309241, "includ": 0.0188846813905, "structur": 1.4435433502700001, "notat": 3.2890571790200003, "next": 0.804327370998, "gather": 1.3313920667299999, "through": 0.1367173837698, "put": 0.505652999854, "access": 0.627805882716, "road": 0.915566630279, "principl": 2.4779392927200004, "time": 0.1233267074886, "engin": 2.7143026748279997, "relat": 0.42620060330799997, "chang": 0.166275625058, "smaller": 0.9530830530519999, "differ": 0.424642242624, "been": 0.04729196473680001, "profession": 0.970385948273, "forget": 2.8330873756700004, "most": 0.103739481478, "between": 0.033953681165299995, "return": 0.666253737184, "certain": 0.592104362781, "excel": 1.5778801652, "all": 0.03420789629339999, "top": 0.609100637788, "within": 0.6378981617939999, "tune": 4.686940155319999, "reason": 1.088603105924, "someth": 1.18830712273, "almost": 0.42907884333400004, "case": 0.790812537778, "that": 0.25447349629696, "subject": 0.6267443740950001, "garbag": 7.56737171114, "reilli": 4.42029038586, "off": 0.41352852038800003, "more": 0.23834904239999996, "improv": 1.4295916078639999, "indepth": 6.238576609419999, "interfac": 3.0405620365099995, "salari": 2.3233329892900003, "compact": 2.5218623563099998, "unncessari": 6.238576609419999, "yourself": 3.28064670051, "keyword": 14.809096096530002, "general": 0.344857734189, "could": 0.18595627229000003, "befor": 0.191275543759, "retriev": 1.547850040446, "state": 0.0466100027668, "shortcut": 4.8442500766, "serv": 0.383135035608, "can": 3.0844808314859997, "make": 0.22049297346869998, "queri": 257.96203154944, "way": 1.1885490596100001, "write": 7.21512439877, "onli": 0.2785669516201, "musthav": 6.238576609419999, "enumer": 3.71672644444, "few": 0.275577913653, "rid": 3.17127414336, "this": 0.0643696338925, "thing": 4.3909676734, "read": 2.51817804264, "data": 36.504617544, "oper": 2.648057786082, "versus": 2.05087881518, "sometim": 0.538025155343, "overal": 1.1132694464700001, "come": 0.5678198130600001, "might": 3.8417053826700003, "learn": 12.641280971175, "understand": 2.1761717513599996, "datacamp": 12.477153218839998, "consider": 0.8325627480600001, "import": 0.585636554132, "first": 0.060698318497279996, "leav": 0.507743957229, "input": 2.50167533539, "speak": 1.06169814662, "nice": 2.8768580387299996, "have": 0.14785002341200001, "qualiti": 2.15201013422, "lingua": 4.02007463363, "newbi": 12.069955308359999, "user": 2.04258810688, "gradual": 1.3321078009899998, "down": 0.613347482372, "inde": 1.4886080966, "when": 0.308324832876, "argu": 0.984952970196, "effici": 1.62793753414}, "logidf": {"outer": 2.12982026853, "semant": 3.6662106543, "anywher": 2.3188414835, "equival": 1.40897338129, "omit": 2.56595767618, "antipattern": 6.238576609419999, "onc": 0.403765872355, "too": 0.5965551547219999, "occur": 0.556973778473, "analyst": 2.6971498864499996, "play": 0.38110439064199997, "imperfect": 3.4187350023299996, "rememb": 1.5867691126199999, "addit": 0.220218882972, "would": 0.0796176279647, "number": 0.0966085784186, "previous": 0.356602960063, "rewritten": 3.86442132392, "dataset": 5.26584456664, "client": 2.6488048591599997, "driver": 1.9167966438, "well": 0.0635144383156, "tri": 0.61759152916, "tree": 1.41777488775, "creat": 0.222576818514, "approach": 0.7302336145810001, "toward": 0.48877277716000006, "know": 0.952919694398, "their": 0.015360505122700001, "mistak": 2.1648737360799997, "store": 1.2374487335200002, "instead": 0.46663315041500003, "fit": 1.2151206268899999, "how": 0.47156695693000006, "test": 0.977224437103, "fair": 1.16481508131, "good": 0.418589404907, "increas": 0.277820718929, "especi": 0.511098609709, "satisfi": 2.03871025422, "given": 0.303255810831, "interest": 0.47207177798199995, "indispens": 3.9359915164199997, "tutori": 4.0853151555, "beginn": 3.9788316751, "overview": 2.54006626224, "specif": 0.626980167541, "open": 0.219591038029, "sqllike": 6.238576609419999, "disk": 3.2095343569800003, "confus": 1.4219437317299999, "vendor": 3.30609336617, "intro": 4.20029314023, "clear": 0.617474727198, "perform": 0.42618085058, "but": 0.0161923720719, "view": 0.49515994217299997, "definit": 1.1755733298, "need": 0.362740163442, "cost": 0.84129007618, "final": 0.292733863948, "algebra": 3.7245288247199992, "expect": 0.78850775216, "point": 0.23103235903299998, "record": 0.353010356953, "naiv": 3.9168216003199996, "key": 0.82419811896, "prevent": 0.7706525875229999, "much\u2026": 6.238576609419999, "has": 0.0427239448548, "enough": 0.802884439169, "besid": 1.63631387177, "formul": 2.2885743559200002, "pass": 0.48130432974, "use": 0.0292080197316, "trick": 2.6897010624299997, "out": 0.0584263909193, "administr": 0.8712448662379999, "suffer": 0.7706525875229999, "quit": 1.05951513684, "alway": 0.726319204572, "line": 0.349430614452, "cours": 0.765899404133, "forc": 0.280652166524, "huge": 1.47916358195, "optim": 2.4456277954099996, "program": 0.7037855787649999, "iron": 1.34677328802, "franca": 4.20873200888, "not": 0.0155524130075, "far": 0.536623764503, "necessarili": 1.99238817347, "short": 0.345685625679, "are": 0.0294674735827, "whole": 0.8306818244059999, "such": 0.059695977806, "altern": 0.760359972282, "aim": 1.06333853704, "four": 0.190213538869, "dead": 1.0854714951100002, "easi": 1.6665296351499999, "will": 0.202786534915, "though": 0.308044191079, "finesdriverslicensenr": 6.238576609419999, "index": 1.94546932912, "they": 0.0297269947676, "anoth": 0.127896361652, "qualit": 3.74297467051, "driversdriverslicensenr": 6.238576609419999, "indemand": 6.238576609419999, "effect": 0.333830227158, "choos": 1.43007066072, "scienc": 0.841436178891, "chosen": 1.27889510877, "spark": 2.12348110309, "claus": 2.50707033884, "sneak": 3.8290193968699997, "stem": 2.0086865552, "ensur": 1.22751130026, "suffici": 1.4613524521099999, "journalist": 1.61170806097, "respons": 0.40991566230300003, "alreadi": 0.670478380747, "provid": 0.19517784432500002, "respond": 1.15477080241, "valu": 0.823193310148, "mind": 1.2786688388299998, "develop": 0.178624694913, "pattern": 1.33282404788, "sever": 0.06991112039689999, "those": 0.17854939087299998, "therefor": 0.847591848336, "python": 4.03065674296, "some": 0.0395735090645, "small": 0.307101805059, "should": 0.509419876758, "invest": 1.42586787018, "result": 0.136378908381, "concern": 0.634079948873, "press": 0.345329690455, "produc": 0.314320812003, "filter": 2.82668393864, "setbas": 6.238576609419999, "languag": 0.8306818244059999, "set": 0.171496011289, "wait": 1.51605358782, "ani": 0.125608358366, "and": 6.29901420636e-05, "from": 0.000567054168866, "limit": 0.41782385463, "whether": 0.791561189647, "num": 0.00031499039539700004, "technolog": 0.956847686355, "happen": 1.08640441802, "idea": 0.73863592212, "curv": 2.40783363597, "safe": 1.61486961909, "for": 0.00031499039539700004, "depend": 0.806969815, "output": 2.03822657827, "spot": 1.5106180144299999, "with": 0.00119749171339, "written": 0.671587369833, "handi": 4.62913869698, "these": 0.0715336194008, "determin": 0.772833019022, "simpli": 0.923941491586, "better": 0.6964279406, "compani": 0.439777253097, "newer": 2.29480490568, "effort": 0.637887211057, "current": 0.42695282784500005, "frequent": 0.7443211360850001, "meaning": 3.08226276571, "look": 0.6463866936, "pointer": 4.225826442240001, "veri": 0.230159793238, "intern": 0.265095377816, "surfac": 1.3797649557, "think": 1.06717661175, "work": 0.109034567273, "pars": 4.9812159316699995, "confirm": 1.12581182025, "amount": 0.819898886199, "master": 1.14779935699, "column": 1.95699427938, "again": 0.411340231612, "remov": 0.6960488415880001, "then": 0.08303386523089999, "later": 0.0829654259878, "even": 0.152388564834, "convers": 1.2085604509999999, "give": 0.311392552224, "proper": 1.2056118389200001, "rewrit": 3.48635519, "check": 1.87281049562, "place": 0.0957070839572, "great": 0.235805258079, "avoid": 0.900108441291, "goal": 1.18830712273, "total": 0.43567888670500005, "big": 1.00798563557, "type": 0.707101485387, "note": 0.353817568083, "row": 1.71363732085, "probabl": 0.972882412913, "scientist": 1.54634128444, "machin": 1.39235958062, "into": 0.0149128632287, "prior": 0.778442172521, "abov": 0.643865229816, "constant": 1.2971646281, "requir": 0.424253510675, "where": 0.0649921387457, "meant": 1.16501699954, "descript": 1.38755491845, "what": 0.225887296827, "obscur": 2.3593434268099998, "local": 0.416867740206, "wonder": 1.98319270637, "fine": 1.39185273824, "help": 0.336207721344, "larg": 0.17037506060600002, "find": 0.547781330288, "briefli": 1.5824680307199999, "potenti": 0.9245764122419999, "actual": 0.628514181648, "solut": 1.55346297627, "own": 0.164195077421, "natur": 0.431306339292, "fact": 0.5502899207949999, "who": 0.0609002329859, "pictur": 1.25144109124, "hold": 0.503879117196, "lurk": 5.05744329706, "here": 0.8850381883700001, "ideal": 1.53809624363, "maximum": 1.5687671009200002, "last": 0.19204364461100001, "long": 0.235645793878, "section": 0.755387177948, "much": 0.17749572930100002, "evalu": 1.9388802431299998, "than": 0.0322608622182, "care": 0.9139943029109999, "about": 0.0628434774746, "problem": 0.569140724273, "stream": 1.8736305038599999, "job": 1.1798682540899998, "distinct": 0.825779146958, "mindset": 4.43612185107, "context": 1.44920491442, "survey": 1.3294859427299999, "just": 0.289531434109, "entir": 0.46603068026999994, "correct": 1.29831763181, "hive": 4.68895719219, "each": 0.173741689304, "grant": 0.8105051365070001, "statement": 1.2303097091500002, "them": 0.0941833269093, "defin": 1.00368010925, "willem": 3.88260364301, "smallest": 2.58749951995, "live": 0.266903399347, "complex": 0.8502416364309999, "notion": 1.9956266680799999, "tool": 1.60887117963, "start": 0.236443369291, "driverslicensenr": 6.238576609419999, "among": 0.228496097073, "run": 0.442714975539, "guid": 0.912738218589, "coordin": 1.73269223754, "insight": 2.46841452187, "simpl": 1.2232212893899999, "keep": 0.7141523446729999, "bad": 1.2221516561799999, "observ": 0.7995160149320001, "execut": 0.804854605864, "standard": 0.63741050982, "whi": 1.18068843047, "comparison": 1.60134527393, "karlijn": 6.238576609419999, "mani": 0.0433157581221, "pull": 1.6460668749599998, "realiz": 1.5876931847600002, "over": 0.0249367214957, "step": 1.03954505698, "door": 1.5876931847600002, "build": 0.491137452091, "subqueri": 6.238576609419999, "algorithm": 3.33044239518, "linear": 2.63027764196, "earli": 0.117499629108, "exact": 1.2437647732500001, "there": 0.0400978929255, "exist": 0.38165779408699996, "inform": 0.454453704662, "incompat": 3.1534165259599996, "possibl": 0.348805474891, "industri": 0.7046772417749999, "say": 0.562154280552, "best": 0.459227932947, "exampl": 0.40868267499899996, "right": 0.34035985417, "correl": 2.57915918803, "knowledg": 1.2232212893899999, "take": 0.130691962197, "follow": 0.045356911094199995, "now": 0.149092945021, "further": 0.308815895297, "name": 0.09723316638430002, "code": 1.35601909597, "hard": 1.00522796406, "interact": 1.4858210267899998, "tip": 2.2430429711200004, "represent": 1.7797382876499999, "abl": 0.599303982475, "realli": 1.5576408397, "peek": 5.0774439637699995, "indic": 0.7336385419149999, "matter": 0.8951625270360001, "issu": 0.364099043934, "also": 0.0146571578, "specifi": 1.93451151621, "risk": 1.4100048408899999, "around": 0.19387710578200001, "mean": 0.37092128352, "embrac": 2.13513377732, "task": 1.35748680661, "role": 0.44036410757399996, "plan": 0.428982108147, "accomplish": 1.64345675928, "syntact": 4.47406678264, "the": 0.0, "becom": 0.11771217648900001, "analyz": 2.2707222351599996, "appli": 0.8316941898119999, "stand": 0.7345572374320001, "consid": 0.214894723824, "want": 0.6916366062549999, "which": 0.00517841384543, "abil": 0.996488297427, "twofold": 4.8442500766, "system": 0.327430345585, "parser": 6.238576609419999, "howev": 0.0903151173475, "essenti": 1.07434378384, "manual": 2.04501942341, "crucial": 2.04696874177, "still": 0.17112222142900002, "contributor": 2.67222935363, "databas": 2.10988256718, "saw": 0.667036036556, "skill": 1.30805571015, "thus": 0.49857627139300004, "other": 0.00987474791976, "introduct": 1.02276465794, "procedur": 1.76970662262, "one": 0.0062553516455, "prefer": 1.10581884366, "see": 0.240921585492, "becaus": 0.139343158825, "query\u2026": 6.238576609419999, "get": 0.579769005782, "easier": 2.05923883436, "like": 0.139053576545, "implement": 1.27437940907, "examin": 1.3482274812000001, "manag": 0.497643387158, "select": 0.704804687133, "process": 0.527829199025, "add": 1.52875583713, "yet": 0.754181309241, "includ": 0.0188846813905, "structur": 0.7217716751350001, "notat": 3.2890571790200003, "next": 0.402163685499, "gather": 1.3313920667299999, "through": 0.0683586918849, "put": 0.505652999854, "access": 0.627805882716, "road": 0.915566630279, "principl": 1.2389696463600002, "time": 0.0112115188626, "engin": 0.904767558276, "relat": 0.21310030165399999, "chang": 0.166275625058, "smaller": 0.9530830530519999, "differ": 0.212321121312, "been": 0.023645982368400004, "profession": 0.970385948273, "forget": 2.8330873756700004, "most": 0.020747896295599998, "between": 0.033953681165299995, "return": 0.333126868592, "certain": 0.592104362781, "excel": 1.5778801652, "all": 0.011402632097799998, "top": 0.609100637788, "within": 0.21263272059799998, "tune": 2.3434700776599997, "reason": 0.544301552962, "someth": 1.18830712273, "almost": 0.42907884333400004, "case": 0.395406268889, "that": 0.00397614837964, "subject": 0.6267443740950001, "garbag": 3.78368585557, "reilli": 4.42029038586, "off": 0.41352852038800003, "more": 0.017024931599999998, "improv": 0.7147958039319999, "indepth": 6.238576609419999, "interfac": 3.0405620365099995, "salari": 2.3233329892900003, "compact": 2.5218623563099998, "unncessari": 6.238576609419999, "yourself": 3.28064670051, "keyword": 4.93636536551, "general": 0.114952578063, "could": 0.18595627229000003, "befor": 0.0956377718795, "retriev": 0.773925020223, "state": 0.0466100027668, "shortcut": 4.8442500766, "serv": 0.383135035608, "can": 0.162341096394, "make": 0.07349765782289999, "queri": 4.03065674296, "way": 0.19809150993500002, "write": 0.721512439877, "onli": 0.025324268329099998, "musthav": 6.238576609419999, "enumer": 3.71672644444, "few": 0.275577913653, "rid": 3.17127414336, "this": 0.0037864490525, "thing": 0.8781935346799999, "read": 0.83939268088, "data": 1.2168205848, "oper": 0.441342964347, "versus": 2.05087881518, "sometim": 0.538025155343, "overal": 1.1132694464700001, "come": 0.28390990653000003, "might": 0.7683410765340001, "learn": 0.842752064745, "understand": 1.0880858756799998, "datacamp": 6.238576609419999, "consider": 0.8325627480600001, "import": 0.292818277066, "first": 0.0075872898121599995, "leav": 0.507743957229, "input": 2.50167533539, "speak": 1.06169814662, "nice": 2.8768580387299996, "have": 0.0147850023412, "qualiti": 1.07600506711, "lingua": 4.02007463363, "newbi": 6.0349776541799995, "user": 2.04258810688, "gradual": 1.3321078009899998, "down": 0.306673741186, "inde": 1.4886080966, "when": 0.0205549888584, "argu": 0.984952970196, "effici": 1.62793753414}, "freq": {"outer": 1, "semant": 1, "anywher": 1, "equival": 1, "omit": 1, "antipattern": 3, "onc": 3, "too": 2, "occur": 1, "analyst": 1, "play": 1, "imperfect": 1, "rememb": 1, "addit": 3, "would": 1, "number": 3, "previous": 1, "rewritten": 1, "dataset": 1, "client": 1, "driver": 5, "well": 1, "tri": 2, "tree": 1, "creat": 1, "approach": 5, "toward": 1, "know": 4, "their": 1, "mistak": 2, "store": 2, "instead": 1, "fit": 1, "how": 4, "test": 1, "fair": 2, "good": 4, "increas": 2, "especi": 1, "satisfi": 2, "given": 1, "interest": 1, "indispens": 1, "tutori": 1, "beginn": 2, "overview": 1, "specif": 2, "open": 1, "sqllike": 1, "disk": 1, "confus": 1, "vendor": 1, "intro": 1, "clear": 1, "perform": 11, "but": 7, "view": 1, "definit": 2, "need": 8, "cost": 3, "final": 2, "algebra": 1, "expect": 1, "point": 2, "record": 1, "naiv": 1, "key": 1, "prevent": 1, "much\u2026": 1, "has": 2, "enough": 2, "besid": 1, "formul": 3, "pass": 1, "use": 16, "trick": 1, "out": 4, "administr": 1, "suffer": 1, "quit": 2, "alway": 6, "line": 1, "cours": 3, "forc": 1, "huge": 2, "optim": 8, "program": 2, "iron": 1, "franca": 1, "not": 8, "far": 1, "necessarili": 4, "short": 2, "are": 16, "whole": 1, "such": 4, "altern": 3, "aim": 2, "four": 1, "dead": 2, "easi": 3, "will": 9, "though": 2, "finesdriverslicensenr": 2, "index": 2, "they": 3, "anoth": 1, "qualit": 1, "driversdriverslicensenr": 2, "indemand": 1, "effect": 1, "choos": 1, "scienc": 9, "chosen": 1, "spark": 1, "claus": 14, "sneak": 1, "stem": 1, "ensur": 1, "suffici": 1, "journalist": 1, "respons": 2, "alreadi": 3, "provid": 2, "respond": 1, "valu": 3, "mind": 2, "develop": 1, "pattern": 2, "sever": 1, "those": 1, "therefor": 1, "python": 1, "some": 8, "small": 1, "should": 9, "invest": 1, "result": 5, "concern": 1, "press": 1, "produc": 1, "filter": 2, "setbas": 1, "languag": 6, "set": 2, "wait": 1, "ani": 3, "and": 40, "from": 11, "limit": 2, "whether": 3, "num": 13, "technolog": 1, "happen": 2, "idea": 5, "curv": 2, "safe": 2, "for": 16, "depend": 2, "output": 1, "spot": 3, "with": 6, "written": 1, "handi": 2, "these": 5, "determin": 1, "simpli": 1, "better": 2, "compani": 1, "newer": 1, "effort": 1, "current": 1, "frequent": 1, "meaning": 1, "look": 2, "pointer": 2, "veri": 1, "intern": 2, "surfac": 1, "think": 2, "work": 3, "pars": 3, "confirm": 1, "amount": 1, "master": 1, "column": 2, "again": 2, "remov": 2, "then": 3, "later": 1, "even": 5, "convers": 5, "give": 1, "proper": 1, "rewrit": 3, "check": 2, "place": 1, "great": 1, "avoid": 3, "goal": 3, "total": 2, "big": 1, "type": 8, "note": 3, "row": 2, "probabl": 1, "scientist": 1, "machin": 1, "into": 3, "prior": 1, "abov": 1, "constant": 3, "requir": 3, "where": 7, "meant": 2, "descript": 1, "what": 8, "obscur": 1, "local": 1, "wonder": 1, "fine": 2, "help": 2, "larg": 1, "find": 6, "briefli": 2, "potenti": 1, "actual": 3, "solut": 1, "own": 1, "natur": 1, "fact": 1, "who": 2, "pictur": 1, "hold": 1, "lurk": 1, "here": 4, "ideal": 1, "maximum": 1, "last": 1, "long": 1, "section": 2, "much": 2, "evalu": 4, "than": 1, "care": 1, "about": 12, "problem": 1, "stream": 1, "job": 3, "distinct": 1, "mindset": 1, "context": 4, "survey": 2, "just": 4, "entir": 1, "correct": 1, "hive": 1, "each": 2, "grant": 1, "statement": 7, "them": 3, "defin": 1, "willem": 1, "smallest": 1, "live": 2, "complex": 3, "notion": 1, "tool": 1, "start": 4, "driverslicensenr": 4, "among": 1, "run": 2, "guid": 1, "coordin": 1, "insight": 1, "simpl": 1, "keep": 1, "bad": 4, "observ": 1, "execut": 18, "standard": 4, "whi": 6, "comparison": 1, "karlijn": 1, "mani": 1, "pull": 2, "realiz": 1, "over": 2, "step": 2, "door": 1, "build": 2, "subqueri": 5, "algorithm": 1, "linear": 1, "earli": 1, "exact": 2, "there": 6, "exist": 2, "inform": 1, "incompat": 1, "possibl": 6, "industri": 4, "say": 3, "best": 1, "exampl": 5, "right": 1, "correl": 3, "knowledg": 2, "take": 4, "follow": 4, "now": 1, "further": 2, "name": 3, "code": 1, "hard": 1, "interact": 1, "tip": 2, "represent": 1, "abl": 2, "realli": 2, "peek": 1, "indic": 1, "matter": 1, "issu": 2, "also": 13, "specifi": 1, "risk": 2, "around": 2, "mean": 2, "embrac": 1, "task": 1, "role": 2, "plan": 14, "accomplish": 1, "syntact": 1, "the": 129, "becom": 2, "analyz": 2, "appli": 1, "stand": 1, "consid": 6, "want": 3, "which": 3, "abil": 1, "twofold": 1, "system": 3, "parser": 1, "howev": 3, "essenti": 1, "manual": 2, "crucial": 1, "still": 1, "contributor": 1, "databas": 9, "saw": 1, "skill": 4, "thus": 1, "other": 6, "introduct": 1, "procedur": 1, "one": 8, "prefer": 1, "see": 4, "becaus": 2, "query\u2026": 1, "get": 9, "easier": 1, "like": 1, "implement": 1, "examin": 1, "manag": 3, "select": 1, "process": 3, "add": 4, "yet": 1, "includ": 1, "structur": 2, "notat": 1, "next": 2, "gather": 1, "through": 2, "put": 1, "access": 1, "road": 1, "principl": 2, "time": 11, "engin": 3, "relat": 2, "chang": 1, "smaller": 1, "differ": 2, "been": 2, "profession": 1, "forget": 1, "most": 5, "between": 1, "return": 2, "certain": 1, "excel": 1, "all": 3, "top": 1, "within": 3, "tune": 2, "reason": 2, "someth": 1, "almost": 1, "case": 2, "that": 64, "subject": 1, "garbag": 2, "reilli": 1, "off": 1, "more": 14, "improv": 2, "indepth": 1, "interfac": 1, "salari": 1, "compact": 1, "unncessari": 1, "yourself": 1, "keyword": 3, "general": 3, "could": 1, "befor": 2, "retriev": 2, "state": 1, "shortcut": 1, "serv": 1, "can": 19, "make": 3, "queri": 64, "way": 6, "write": 10, "onli": 11, "musthav": 1, "enumer": 1, "few": 1, "rid": 1, "this": 17, "thing": 5, "read": 3, "data": 30, "oper": 6, "versus": 1, "sometim": 1, "overal": 1, "come": 2, "might": 5, "learn": 15, "understand": 2, "datacamp": 2, "consider": 1, "import": 2, "first": 8, "leav": 1, "input": 1, "speak": 1, "nice": 1, "have": 10, "qualiti": 2, "lingua": 1, "newbi": 2, "user": 1, "gradual": 1, "down": 2, "inde": 1, "when": 15, "argu": 1, "effici": 1}, "idf": {"outer": 8.413354531, "semant": 39.1034482759, "anywher": 10.1638924456, "equival": 4.09175257732, "omit": 13.0131147541, "antipattern": 512.129032258, "onc": 1.4974533106999999, "too": 1.81585268215, "occur": 1.7453825857499998, "analyst": 14.8373831776, "play": 1.46390041494, "imperfect": 30.5307692308, "rememb": 4.88793103448, "addit": 1.24634950542, "would": 1.0828729281799998, "number": 1.10142916609, "previous": 1.42846859816, "rewritten": 47.6756756757, "dataset": 193.609756098, "client": 14.1371326803, "driver": 6.79914346895, "well": 1.0655748708, "tri": 1.8544562551099997, "tree": 4.127925117, "creat": 1.2492917847, "approach": 2.07556543339, "toward": 1.6303142329, "know": 2.59327017315, "their": 1.01547908405, "mistak": 8.71350164654, "store": 3.44680851064, "instead": 1.59461631177, "fit": 3.37070063694, "how": 1.60250328051, "test": 2.65707112971, "fair": 3.20533010297, "good": 1.51981619759, "increas": 1.32024948025, "especi": 1.66712170534, "satisfi": 7.680696661830001, "given": 1.35426085473, "interest": 1.60331246213, "indispens": 51.2129032258, "tutori": 59.4606741573, "beginn": 53.4545454545, "overview": 12.6805111821, "specif": 1.8719490626099997, "open": 1.24556723678, "sqllike": 512.129032258, "disk": 24.767550701999998, "confus": 4.1451697127900005, "vendor": 27.2783505155, "intro": 66.7058823529, "clear": 1.85423966363, "perform": 1.5313977042500002, "but": 1.01632417899, "view": 1.6407606448899998, "definit": 3.24, "need": 1.4372623574099999, "cost": 2.31935719503, "final": 1.34008609775, "algebra": 41.4516971279, "expect": 2.20011086475, "point": 1.25990000794, "record": 1.42334588488, "naiv": 50.2405063291, "key": 2.28005170185, "prevent": 2.16117615029, "much\u2026": 512.129032258, "has": 1.0436497502, "enough": 2.2319696330700003, "besid": 5.1362018764199995, "formul": 9.86086956522, "pass": 1.61818367139, "use": 1.0296387573799999, "trick": 14.7272727273, "out": 1.06016694491, "administr": 2.3898840885099997, "suffer": 2.16117615029, "quit": 2.8849718335500003, "alway": 2.06745670009, "line": 1.4182597820299998, "cours": 2.15092805853, "forc": 1.32399299475, "huge": 4.38927287808, "optim": 11.5377906977, "program": 2.02139037433, "iron": 3.84499878905, "franca": 67.27118644069999, "not": 1.01567398119, "far": 1.71022298826, "necessarili": 7.33302540416, "short": 1.41295834817, "are": 1.02990593578, "whole": 2.29488291414, "such": 1.06151377374, "altern": 2.1390460792200003, "aim": 2.8960233491400005, "four": 1.20950784702, "dead": 2.9608355091400003, "easi": 5.2937645882, "will": 1.22481098596, "though": 1.36076112111, "finesdriverslicensenr": 512.129032258, "index": 6.9969149405, "they": 1.03017325287, "anoth": 1.13643521832, "qualit": 42.223404255300004, "driversdriverslicensenr": 512.129032258, "indemand": 512.129032258, "effect": 1.3963060686000002, "choos": 4.17899447223, "scienc": 2.31969608416, "chosen": 3.59266802444, "spark": 8.360189573460001, "claus": 12.2689335394, "sneak": 46.017391304300006, "stem": 7.453521126760001, "ensur": 3.4127257093700005, "suffici": 4.3117870722400005, "journalist": 5.01136363636, "respons": 1.5066907089300001, "alreadi": 1.9551724137900002, "provid": 1.21552714187, "respond": 3.17329602239, "valu": 2.2777618364400003, "mind": 3.5918552036199998, "develop": 1.1955719557200002, "pattern": 3.79173632673, "sever": 1.07241286139, "those": 1.19548192771, "therefor": 2.33401940606, "python": 56.2978723404, "some": 1.04036697248, "small": 1.3594793629, "should": 1.6643254009900001, "invest": 4.16146788991, "result": 1.14611608432, "concern": 1.8852867830400002, "press": 1.41245551601, "produc": 1.36932896326, "filter": 16.8893617021, "setbas": 512.129032258, "languag": 2.29488291414, "set": 1.18707940781, "wait": 4.55421686747, "ani": 1.13383802314, "and": 1.00006299213, "from": 1.00056721497, "limit": 1.5186531471200002, "whether": 2.20683903253, "num": 1.00031504001, "technolog": 2.6034765496900003, "happen": 2.96359902931, "idea": 2.0930784443, "curv": 11.1098670399, "safe": 5.02723242559, "for": 1.00031504001, "depend": 2.2411067193700003, "output": 7.676982591880001, "spot": 4.52952924394, "with": 1.0011982089899998, "written": 1.9573418813999999, "handi": 102.425806452, "these": 1.07415426252, "determin": 2.1658935879900003, "simpli": 2.5192002538900002, "better": 2.0065722952500002, "compani": 1.5523613963, "newer": 9.9225, "effort": 1.89247824532, "current": 1.5325803649, "frequent": 2.10501193317, "meaning": 21.8076923077, "look": 1.9086318826599997, "pointer": 68.4310344828, "veri": 1.25880114177, "intern": 1.30355530011, "surfac": 3.97396745932, "think": 2.90715986083, "work": 1.11520089913, "pars": 145.651376147, "confirm": 3.0827184466000004, "amount": 2.27027027027, "master": 3.15125049623, "column": 7.078020508250001, "again": 1.50883862384, "remov": 2.0058117498400003, "then": 1.08657860516, "later": 1.08650424309, "even": 1.16461267606, "convers": 3.3486606201200004, "give": 1.3653250774, "proper": 3.3388012618299996, "rewrit": 32.6666666667, "check": 6.50655737705, "place": 1.1004366812200002, "great": 1.26592775696, "avoid": 2.45986984816, "goal": 3.28152128979, "total": 1.5460122699399999, "big": 2.7400759406299997, "type": 2.0281042411900003, "note": 1.42449528937, "row": 5.549108703250001, "probabl": 2.64555907349, "scientist": 4.69426374926, "machin": 4.02433460076, "into": 1.01502461479, "prior": 2.17807655371, "abov": 1.90382539873, "constant": 3.6589075823900004, "requir": 1.52844902282, "where": 1.06715063521, "meant": 3.20597738288, "descript": 4.00504540868, "what": 1.25343439128, "obscur": 10.584000000000001, "local": 1.51720183486, "wonder": 7.265903890160001, "fine": 4.02229541424, "help": 1.39962972759, "larg": 1.18574949585, "find": 1.7294117647099998, "briefli": 4.8669527897, "potenti": 2.52080025405, "actual": 1.87482286254, "solut": 4.7278141751, "own": 1.17844418052, "natur": 1.5392670157100001, "fact": 1.73375559681, "who": 1.06279287723, "pictur": 3.4953764861300005, "hold": 1.6551292744, "lurk": 157.188118812, "here": 2.42307692308, "ideal": 4.65571847507, "maximum": 4.80072573329, "last": 1.2117234010100002, "long": 1.2657259028899999, "section": 2.1284354471099998, "much": 1.1942229577299999, "evalu": 6.9509632224199995, "than": 1.03278688525, "care": 2.49426551453, "about": 1.06486015159, "problem": 1.76674827509, "stream": 6.5118949959000005, "job": 3.2539454806299997, "distinct": 2.2836593786000003, "mindset": 84.44680851060001, "context": 4.25972632144, "survey": 3.7791002142300005, "just": 1.33580143037, "entir": 1.59365589239, "correct": 3.6631287494199998, "hive": 108.739726027, "each": 1.18974820144, "grant": 2.2490437739099995, "statement": 3.42228928648, "them": 1.09876115994, "defin": 2.72830383227, "willem": 48.5504587156, "smallest": 13.2964824121, "live": 1.30591428806, "complex": 2.34021226415, "notion": 7.356811862839999, "tool": 4.99716713881, "start": 1.26673581744, "driverslicensenr": 512.129032258, "among": 1.25670862028, "run": 1.55692850838, "guid": 2.49113447356, "coordin": 5.65586034913, "insight": 11.8037174721, "simpl": 3.3981164383599998, "keep": 2.04245465071, "bad": 3.3944836433599996, "observ": 2.22446406053, "execut": 2.2363713199, "standard": 1.8915763135900003, "whi": 3.2566153846200003, "comparison": 4.9597000937199995, "karlijn": 512.129032258, "mani": 1.04426757877, "pull": 5.18654034629, "realiz": 4.89244992296, "over": 1.02525024217, "step": 2.8279301745599996, "door": 4.89244992296, "build": 1.6341739578, "subqueri": 512.129032258, "algorithm": 27.9507042254, "linear": 13.8776223776, "earli": 1.12468121281, "exact": 3.46864758575, "there": 1.04091266719, "exist": 1.4647107666799999, "inform": 1.5753125620200001, "incompat": 23.4159292035, "possibl": 1.4173734488, "industri": 2.02319357716, "say": 1.7544480053, "best": 1.5828514456600002, "exampl": 1.50483412322, "right": 1.4054532577899999, "correl": 13.1860465116, "knowledg": 3.3981164383599998, "take": 1.13961668222, "follow": 1.04640126549, "now": 1.160780873, "further": 1.3618116315, "name": 1.10211732037, "code": 3.8807137619199996, "hard": 2.73253012048, "interact": 4.4185917061, "tip": 9.42195845697, "represent": 5.928304705, "abl": 1.8208510150200001, "realli": 4.7476076555, "peek": 160.363636364, "indic": 2.0826446281, "matter": 2.44773358002, "issu": 1.43921675279, "also": 1.01476510067, "specifi": 6.920662598080001, "risk": 4.095975232200001, "around": 1.21394708671, "mean": 1.44906900329, "embrac": 8.45817794353, "task": 3.88641370869, "role": 1.55327267391, "plan": 1.5356935577500002, "accomplish": 5.17302052786, "syntact": 87.7127071823, "the": 1.0, "becom": 1.12492028626, "analyz": 9.68639414277, "appli": 2.2972073506, "stand": 2.0845588235299997, "consid": 1.2397313759200002, "want": 1.99698113208, "which": 1.005191845, "abil": 2.70875277256, "twofold": 127.008, "system": 1.38739840951, "parser": 512.129032258, "howev": 1.0945191313299998, "essenti": 2.9280708225700005, "manual": 7.72930866602, "crucial": 7.7443902439, "still": 1.1866357724799999, "contributor": 14.4721969006, "databas": 8.24727272727, "saw": 1.94845360825, "skill": 3.6989748369099997, "thus": 1.6463756092500001, "other": 1.00992366412, "introduct": 2.7808723068799996, "procedur": 5.8691312384500005, "one": 1.00627495722, "prefer": 3.0216977540900003, "see": 1.27242125511, "becaus": 1.1495184997499999, "query\u2026": 512.129032258, "get": 1.78562591385, "easier": 7.84, "like": 1.14918566775, "implement": 3.57648118946, "examin": 3.8505942275, "manag": 1.6448404475799998, "select": 2.02345144022, "process": 1.69524826482, "add": 4.61243463103, "yet": 2.1258703802900003, "includ": 1.0190641247799999, "structur": 2.0580762250499998, "notat": 26.8175675676, "next": 1.4950560316400001, "gather": 3.78631051753, "through": 1.07074930869, "put": 1.65806788512, "access": 1.8734953976900002, "road": 2.49819040126, "principl": 3.4520547945199995, "time": 1.01127460348, "engin": 2.47135740971, "relat": 1.23750876919, "chang": 1.1808985421, "smaller": 2.59369384088, "differ": 1.23654490225, "been": 1.0239277652399998, "profession": 2.6389627659599997, "forget": 16.9978586724, "most": 1.02096463023, "between": 1.03453668708, "return": 1.39532431007, "certain": 1.8077886586200003, "excel": 4.84467500763, "all": 1.01146788991, "top": 1.8387769284200002, "within": 1.2369302688, "tune": 10.4173228346, "reason": 1.72340425532, "someth": 3.28152128979, "almost": 1.53584212054, "case": 1.48498737256, "that": 1.00398406375, "subject": 1.8715077213299998, "garbag": 43.9778393352, "reilli": 83.1204188482, "off": 1.5121440137200002, "more": 1.0171706817, "improv": 2.04376930999, "indepth": 512.129032258, "interfac": 20.9169960474, "salari": 10.2096463023, "compact": 12.451764705899999, "unncessari": 512.129032258, "yourself": 26.592964824099997, "keyword": 139.263157895, "general": 1.1218202374200001, "could": 1.2043695949, "befor": 1.10036041031, "retriev": 2.16826003824, "state": 1.0477133240899998, "shortcut": 127.008, "serv": 1.4668760972, "can": 1.17626139142, "make": 1.0762660158600001, "queri": 56.2978723404, "way": 1.2190739461, "write": 2.0575427682700003, "onli": 1.0256476516600002, "musthav": 512.129032258, "enumer": 41.1295336788, "few": 1.31729173581, "rid": 23.837837837800002, "this": 1.00379362671, "thing": 2.4065484311099996, "read": 2.3149606299200003, "data": 3.37643555934, "oper": 1.55479384977, "versus": 7.77473065622, "sometim": 1.7126213592200001, "overal": 3.0442953020099996, "come": 1.32831325301, "might": 2.1561863370900003, "learn": 2.32275054865, "understand": 2.96858638743, "datacamp": 512.129032258, "consider": 2.29920347574, "import": 1.3401992233700002, "first": 1.00761614623, "leav": 1.6615384615399997, "input": 12.2029208301, "speak": 2.89127663449, "nice": 17.7583892617, "have": 1.0148948411399998, "qualiti": 2.9329392204, "lingua": 55.7052631579, "newbi": 417.78947368400003, "user": 7.71053909665, "gradual": 3.7890214797099997, "down": 1.35889754344, "inde": 4.43092380687, "when": 1.02076769755, "argu": 2.67768595041, "effici": 5.09335899904}}, "html": "<!DOCTYPE html>\n\n<html lang=\"en-US\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head profile=\"http://gmpg.org/xfn/11\">\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n<title>  How To Write Better SQL Queries: The Definitive Guide \u2013 Part 1</title>\n<link href=\"/wp-content/themes/kdn17/images/favicon.ico\" rel=\"shortcut icon\"/>\n<link href=\"/wp-content/themes/kdn17/style.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"/wp-content/themes/kdn17/js/jquery-1.9.1.min.js\" type=\"text/javascript\"></script>\n<script src=\"/aps/kda_all.js\" type=\"text/javascript\"></script>\n<link href=\"/feed/\" rel=\"alternate\" title=\"KDnuggets: Analytics, Big Data, Data Mining and Data Science Feed\" type=\"application/rss+xml\"/>\n<link href=\"//s.w.org\" rel=\"dns-prefetch\"/>\n<link href=\"https://www.kdnuggets.com/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/comments/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/2017/08/write-better-sql-queries-definitive-guide-part-1.html/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb How To Write Better SQL Queries: The Definitive Guide \u2013 Part 1 Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-json/\" rel=\"https://api.w.org/\"/>\n<link href=\"https://www.kdnuggets.com/xmlrpc.php?rsd\" rel=\"EditURI\" title=\"RSD\" type=\"application/rsd+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-includes/wlwmanifest.xml\" rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\"/>\n<link href=\"https://www.kdnuggets.com/2017/08/machine-learning-vs-statistics.html\" rel=\"prev\" title=\"Machine Learning vs. Statistics: The Texas Death Match of Data Science\"/>\n<link href=\"https://www.kdnuggets.com/2017/08/understanding-overfitting-meme-supervised-learning.html\" rel=\"next\" title=\"Understanding overfitting: an inaccurate meme in Machine Learning\"/>\n<meta content=\"WordPress 4.9.10\" name=\"generator\">\n<link href=\"https://www.kdnuggets.com/2017/08/write-better-sql-queries-definitive-guide-part-1.html\" rel=\"canonical\"/>\n<link href=\"https://www.kdnuggets.com/?p=70333\" rel=\"shortlink\"/>\n<link href=\"https://www.kdnuggets.com/2017/08/write-better-sql-queries-definitive-guide-part-1.html\" rel=\"canonical\"/>\n<!-- BEGIN ExactMetrics v5.3.7 Universal Analytics - https://exactmetrics.com/ -->\n<script>\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-361129-1', 'auto');\n  ga('send', 'pageview');\n</script>\n<!-- END ExactMetrics Universal Analytics -->\n</meta></head>\n<body class=\"post-template-default single single-post postid-70333 single-format-standard\">\n<div class=\"main_wrapper\"><!-- publ: 23-Aug, 2017  -->\n<div id=\"wrapper\">\n<div id=\"header\">\n<div id=\"header_log\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<h1>KDnuggets</h1>\n<div class=\"text-container\">\n            \u00a0\u00a0<a href=\"/news/subscribe.html\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a> \u00a0|\n <a href=\"https://twitter.com/kdnuggets\" target=\"_blank\"><img alt=\"Twitter\" height=\"48\" src=\"/images/tw_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n <a href=\"https://www.facebook.com/kdnuggets\" target=\"_blank\"><img alt=\"Facebook\" height=\"48\" src=\"/images/fb_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n<a href=\"https://www.linkedin.com/groups/54257/\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"48\" src=\"/images/in_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \n\u00a0|\u00a0 <a href=\"/contact.html\"><b>Contact</b></a>\n</div>\n</div>\n<div class=\"search\">\n<form action=\"/\" id=\"searchform\" method=\"get\">\n<input id=\"s\" name=\"s\" placeholder=\"search KDnuggets\" type=\"text\" value=\"\"/>\n<input type=\"submit\" value=\"Search\"/></form>\n</div>\n<div href=\"#\" id=\"pull\">\n<img class=\"menu\" src=\"/images/menu-30.png\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<img class=\"search-icon\" src=\"/images/search-icon.png\">\n</img></img></div>\n<div id=\"pull-menu\">\n<div class=\"navigation\"><ul class=\"menu\" id=\"menu-menu\"><li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-1070\" id=\"menu-item-1070\"><a href=\"/software/index.html\" title=\"Data Science Software\">SOFTWARE</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13756\" id=\"menu-item-13756\"><a href=\"/news/index.html\" title=\"News\">News/Blog</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-46286\" id=\"menu-item-46286\"><a href=\"/news/top-stories.html\">Top stories</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-42152\" id=\"menu-item-42152\"><a href=\"https://www.kdnuggets.com/opinions/index.html\" title=\"Opinions\">Opinions</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-46415\" id=\"menu-item-46415\"><a href=\"https://www.kdnuggets.com/tutorials/index.html\">Tutorials</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13364\" id=\"menu-item-13364\"><a href=\"/jobs/index.html\" title=\"Jobs in Analytics, Data Science\">JOBS</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-63505\" id=\"menu-item-63505\"><a href=\"https://www.kdnuggets.com/companies/index.html\">Companies</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13366\" id=\"menu-item-13366\"><a href=\"/courses/index.html\">Courses</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-1499\" id=\"menu-item-1499\"><a href=\"https://www.kdnuggets.com/datasets/index.html\">Datasets</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-14286\" id=\"menu-item-14286\"><a href=\"https://www.kdnuggets.com/education/index.html\" title=\"Education in Analytics, Big Data, Data Science\">EDUCATION</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-51558\" id=\"menu-item-51558\"><a href=\"https://www.kdnuggets.com/education/analytics-data-mining-certificates.html\" title=\"Certificates in Analytics, Big Data, Data Science\">Certificates</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-14752\" id=\"menu-item-14752\"><a href=\"/meetings/index.html\">Meetings</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13721\" id=\"menu-item-13721\"><a href=\"/webcasts/index.html\" title=\"Webcasts and Webinars\">Webinars</a></li>\n</ul></div></div>\n</div> <!--#header end-->\n<div id=\"spacer\">\n         \u00a0\n      </div>\n<div id=\"content_wrapper\">\n<div id=\"ad_wrapper\">\n<script type=\"text/javascript\">\n\tjQuery(function() {\n   \t    var pull        = $('#pull');\n            menu        = $('#header .navigation ul');\n            menuImage = $('#header img.menu');\n            mobileMenu        = $('#pull-menu-mobile');\n            search = $('img.search-icon');\n            searchBar = $('div.search');\n            searchClick = false;\n            search.on('click', function() {\n                  searchBar.slideToggle();\n                  searchClick = true;\n            });  \n     \t    $(menuImage).on('click', function(e) {\n\t        //e.preventDefault();\n                if (!searchClick) {\n                  menu.slideToggle();\n                }\n                searchClick = false;\n\t    });\n           /* pullMobile.on('click', function(e) {\n              e.preventDefault();\n                if (!searchClick) {\n                  mobileMenu.slideToggle();\n                }\n                searchClick = false;\n\t    });*/\n            \n\t});\n\tkpath = '/'; kda_top(); kda_sid_init(); kda_sid_n=3;\n\t</script>\n</div> <div class=\"breadcumb\">\n<br/>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2017/index.html\">2017</a> \u00bb <a href=\"https://www.kdnuggets.com/2017/08/index.html\">Aug</a> \u00bb <a href=\"https://www.kdnuggets.com/2017/08/tutorials.html\">Tutorials, Overviews</a> \u00bb How To Write Better SQL Queries: The Definitive Guide \u2013 Part 1 (\u00a0<a href=\"/2017/n33.html\">17:n33</a>\u00a0)    </div>\n<div class=\"single\" id=\"content\">\n<div id=\"post-header\">\n<h1 id=\"title\">How To Write Better SQL Queries: The Definitive Guide \u2013 Part 1</h1>\n<div class=\"pagi\">\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2017/08/machine-learning-vs-statistics.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"> <strong>Previous post</strong></img></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2017/08/understanding-overfitting-meme-supervised-learning.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/>\u00a0<br/>\u00a0\n    <span class=\"http-likes\" style=\"float: left; font-size:14px\">http likes 317</span> <div class=\"addthis_native_toolbox\"></div>\n</div>\n<div class=\"tag-data\">Tags: <a href=\"https://www.kdnuggets.com/tag/databases\" rel=\"tag\">Databases</a>, <a href=\"https://www.kdnuggets.com/tag/relational-databases\" rel=\"tag\">Relational Databases</a>, <a href=\"https://www.kdnuggets.com/tag/sql\" rel=\"tag\">SQL</a></div>\n<br/>\n<p class=\"excerpt\">\n     Most forget that SQL isn\u2019t just about writing queries, which is just the first step down the road. Ensuring that queries are performant or that they fit the context that you\u2019re working in is a whole other thing. This SQL tutorial will provide you with a small peek at some steps that you can go through to evaluate your query.\n  </p>\n</div>\n<div id=\"post-header-ad\">\n<script type=\"text/javascript\">kda_sid_write(1); kda_sid_n=2;</script>\n</div>\n<hr class=\"grey-line\"/><br/>\n<div class=\"post\" id=\"post-\">\n<p><b>By Karlijn Willems, Data Science Journalist &amp; <a href=\"https://www.datacamp.com/\">DataCamp</a> Contributor</b>.</p>\n<p>Structured Query Language (SQL) is an indispensable skill in the data science industry and generally speaking, learning this skill is fairly easy. However, most forget that SQL isn\u2019t just about writing queries, which is just the first step down the road. Ensuring that queries are performant or that they fit the context that you\u2019re working in is a whole other thing.</p>\n<p>That\u2019s why this SQL tutorial will provide you with a small peek at some steps that you can go through to evaluate your query:</p>\n<ul>\n<li>First off, you\u2019ll start with a short overview of the\u00a0<a href=\"https://www.datacamp.com/community/tutorials/sql-tutorial-query#importance\" target=\"_blank\">importance of learning SQL</a>\u00a0for jobs in data science;\n<li>Next, you\u2019ll first learn more about how\u00a0<a href=\"https://www.datacamp.com/community/tutorials/sql-tutorial-query#execution\" target=\"_blank\">SQL query processing and execution</a>\u00a0so that you can properly understand the importance of writing qualitative queries: more specifically, you\u2019ll see that the query is parsed, rewritten, optimized and finally evaluated;\n<li>With that in mind, you\u2019ll not only go over some\u00a0<a href=\"https://www.datacamp.com/community/tutorials/sql-tutorial-query#antipattern\" target=\"_blank\">query anti-patterns</a>\u00a0that beginners make when writing queries, but you\u2019ll also learn more about alternatives and solutions to those possible mistakes; You\u2019ll also learn more about the\u00a0<a href=\"https://www.datacamp.com/community/tutorials/sql-tutorial-query#setbased\" target=\"_blank\">set-based versus the procedural approach</a>\u00a0to querying.\n<li>You\u2019ll also see that these anti-patterns stem from performance concerns and that, besides the \u201cmanual\u201d approach to improving SQL queries, you can\u00a0<a href=\"https://www.datacamp.com/community/tutorials/sql-tutorial-query#queryplan\" target=\"_blank\">analyze your queries</a>\u00a0also in a more structured, in-depth way by making use of some other tools that help you to see the query plan; And,\n<li>You\u2019ll briefly go more into\u00a0<a href=\"https://www.datacamp.com/community/tutorials/sql-tutorial-query#bigo\" target=\"_blank\">time complexity and the big O notation</a>\u00a0to get an idea about the time complexity of an execution plan before you execute your query; Lastly,\n<li>You\u2019ll briefly get some pointers on how you can\u00a0<a href=\"https://www.datacamp.com/community/tutorials/sql-tutorial-query#tune\" target=\"_blank\">tune your query</a>\u00a0further.\n</li></li></li></li></li></li></ul>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/800/0*zaI1WPqkM52wDdC-.jpeg\" width=\"60%\"/></p>\n<p>Are you interested in an SQL course? Take DataCamp\u2019s\u00a0<a href=\"https://www.datacamp.com/courses/intro-to-sql-for-data-science\" target=\"_blank\">Intro to SQL for Data Science</a>\u00a0course!</p>\n<p>\u00a0</p>\n<h3>Why Should I Learn SQL For Data\u00a0Science?</h3>\n<p>\u00a0<br>\nSQL is far from dead: it\u2019s one of the most in-demand skills that you find in job descriptions from the data science industry, whether you\u2019re applying for a data analyst, a data engineer, a data scientist or\u00a0<a href=\"https://www.datacamp.com/community/tutorials/data-science-industry-infographic\" target=\"_blank\">any other roles</a>. This is confirmed by 70% of the respondents of the 2016 O\u2019Reilly Data Science Salary Survey, who indicate that they use SQL in their professional context. What\u2019s more, in this survey, SQL stands out way above the R (57%) and Python (54%) programming languages.</br></p>\n<p>You get the picture: SQL is a must-have skill when you\u2019re working towards getting a job in the data science industry.</p>\n<p>Not bad for a language that was developed in the early 1970s, right?</p>\n<p>But why exactly is it that it is so frequently used? And why isn\u2019t it dead even though it has been around for such a long time?</p>\n<p>There are several reasons: one of the first reasons would be that companies mostly store data in Relational Database Management Systems (RDBMS) or in Relational Data Stream Management Systems (RDSMS) and you need SQL to access that data. SQL is the lingua franca of data: it gives you the ability to interact with almost any database or to even build your own locally!</p>\n<p>As if this wasn\u2019t enough yet, keep in mind that there are quite a few SQL implementations that are incompatible between vendors and do not necessarily follow standards. Knowing the standard SQL is thus a requirement for you to find your way around in the (data science) industry.</p>\n<p>On top of that, it\u2019s safe to say that SQL has also been embraced by newer technologies, such as Hive, a SQL-like query language interface to query and manage large datasets, or Spark SQL, which you can use to execute SQL queries. Once again, the SQL that you find there will differ from the standard that you might have learned, but the learning curve will be considerably easier.</p>\n<p>If you do want to make a comparison, consider it as learning linear algebra: by putting all that effort into this one subject, you know that you will be able to use it to master machine learning as well!</p>\n<p>In short, this is why you should learn this query language:</p>\n<ul>\n<li>It\u2019s is fairly easy to learn, even for total newbies. The learning curve is quite easy and gradual, so you\u2019ll be writing queries in no time.\n<li>It follows the \u201clearn once, use anywhere\u201d principle, so it\u2019s a great investment of your time!\n<li>It\u2019s an excellent addition to programming languages; In some cases, writing a query is even preferred over writing code because it\u2019s more performant!\n<li>\u2026\n</li></li></li></li></ul>\n<p>What are you still waiting for?\u00a0:)</p>\n<p>\u00a0</p>\n<h3>SQL Processing &amp; Query Execution</h3>\n<p>\u00a0<br>\nTo improve the performance of your SQL query, you first have to know what happens internally when you press the shortcut to run the query.</br></p>\n<p>First, the query is parsed into a \u201cparse tree\u201d; The query is analyzed to see if it satisfies the syntactical and semantical requirements. The parser creates an internal representation of the input query. This output is then passed on to the rewrite engine.</p>\n<p>It is then the task of the optimizer to find the optimal execution or query plan for the given query. The execution plan defines exactly what algorithm is used for each operation, and how the execution of the operations is coordinated.</p>\n<p>To indeed find the most optimal execution plan, the optimizer enumerates all possible execution plans, determines the quality or cost of each plan, takes information about the current database state and then chooses the best one as the final execution plan. Because query optimizers can be imperfect, database users and administrators sometimes need to manually examine and tune the plans produced by the optimizer to get better performance.</p>\n<p>Now you probably wonder what is considered to be a \u201cgood query plan\u201d.</p>\n<p>As you already read, the quality of cost of a plan plays a huge role. More specifically, things such as the number of disk I/Os that are required to evaluate the plan, the plan\u2019s CPU cost and the overall response time that can be observed by the database client and the total execution time are essential. That is where the notion of time complexity will come in. You\u2019ll read more about this later on.</p>\n<p>Next, the chosen query plan is executed, evaluated by the system\u2019s execution engine and the results of your query are returned.</p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/800/0*0nMJKb-YmCGAsrdX.png\" width=\"50%\"/></p>\n<p>\u00a0</p>\n<h3>Writing SQL Queries</h3>\n<p>\u00a0<br>\nWhat might not have become clear from the previous section is that the Garbage In, Garbage Out (GIGO) principle naturally surfaces within the query processing and execution: the one who formulates the query also holds the keys to the performance of your SQL queries. If the optimizer gets a badly formulated query, it will only be able to do as much\u2026</br></p>\n<p>That means that there are some things that\u00a0<em>you</em>\u00a0can do when you\u2019re writing a query. As you already saw in the introduction, the responsibility is two-fold: it\u2019s not only about writing queries that live up to a certain standard, but also about gathering an idea of where performance problems might be lurking within your query.</p>\n<p>An ideal starting point is to think of \u201cspots\u201d within your queries where issues might sneak in. And, in general, there are four clauses and keywords where newbies can expect performance issues to occur:</p>\n<ul>\n<li>The\u00a0<code>WHERE</code>\u00a0clause;\n<li>Any\u00a0<code>INNER JOIN</code>\u00a0or\u00a0<code>LEFT JOIN</code>\u00a0keywords; And,\n<li>The\u00a0<code>HAVING</code>\u00a0clause;\n</li></li></li></ul>\n<p>Granted, this approach is simple and naive, but as a beginner, these clauses and statements are nice pointers and it\u2019s safe to say that when you\u2019re just starting out, these spots are the ones where mistakes happen and, ironically enough, where they\u2019re also hard to spot.</p>\n<p>However, you should also realize that performance is something that needs a context to become meaningful: simply saying that these clauses and keywords are bad isn\u2019t the way to go when you\u2019re thinking about SQL performance. Having a\u00a0<code>WHERE</code>\u00a0or\u00a0<code>HAVING</code>\u00a0clause in your query doesn\u2019t necessarily mean that it\u2019s a bad query\u2026</p>\n<p>Take a look at the following section to learn more about anti-patterns and alternative approaches to building up your query. These tips and tricks are meant as a guide. How and if you actually need to rewrite your query depends on the amount of data, the database and the number of times you need to execute the query, among other things. It entirely depends on the goal of your query and having some prior knowledge about the database that you want to query is crucial!</p>\n<p>\u00a0</p>\n<h3>1. Only Retrieve The Data You\u00a0Need</h3>\n<p>\u00a0<br>\nThe mindset of \u201cthe more data, the better\u201d isn\u2019t one that you should necessarily live by when you\u2019re writing SQL queries: not only do you risk obscuring your insights by getting more than what you actually need, but also your performance might suffer from the fact that your query pulls up too much data.</br></p>\n<p>That\u2019s why it\u2019s generally a good idea to look out for the\u00a0<code>SELECT</code>\u00a0statement, the\u00a0<code>DISTINCT</code>\u00a0clause and the\u00a0<code>LIKE</code>\u00a0operator.</p>\n<p><strong>The <code>SELECT</code> Statement</strong></p>\n<p>A first thing that you can already check when you have written your query is whether the\u00a0<code>SELECT</code>\u00a0statement is as compact as possible. Your aim here should be to remove unncessary columns from\u00a0<code>SELECT</code>. This way you force yourself to only pull up data that serves your query goal.</p>\n<p>In case you have correlated subqueries that have\u00a0<code>EXISTS</code>, you should try to use a constant in the\u00a0<code>SELECT</code>\u00a0statement of that subquery instead of selecting the value of an actual column. This is especially handy when you\u2019re checking the existence only.</p>\n<p><strong>Remember</strong>\u00a0that a correlated subquery is a subquery that uses values from the outer query. And note that, even though\u00a0<code>NULL</code>\u00a0can work in this context as a \u201cconstant\u201d, it\u2019s very confusing!</p>\n<p>Consider the following example to understand what is meant by using a constant:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre><code>SELECT driverslicensenr, name \r\nFROM Drivers \r\nWHERE EXISTS (SELECT '1' FROM Fines \r\n              WHERE fines.driverslicensenr = drivers.driverslicensenr);</code></pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><strong>Tip</strong>: it\u2019s handy to know that having a correlated subquery isn\u2019t always a good idea. You can always consider getting rid of them by, for example, rewriting them with an\u00a0<code>INNER JOIN</code>:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre><code>SELECT driverslicensenr, name \r\nFROM drivers \r\nINNER JOIN fines ON fines.driverslicensenr = drivers.driverslicensenr;</code></pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><strong>The <code>DISTINCT</code> Clause</strong></p>\n<p>The\u00a0<code>SELECT DISTINCT</code>\u00a0statement is used to return only distinct (different) values.\u00a0<code>DISTINCT</code>\u00a0is a clause that you should definitely try to avoid if you can; Like you have read in other examples, the execution time only increases if you add this clause to your query. It\u2019s therefore always a good idea to consider whether you really need this\u00a0<code>DISTINCT</code>\u00a0operation to take place to get the results that you want to accomplish.</p>\n<p><strong>The <code>LIKE</code> Operator</strong></p>\n<p>When you use the\u00a0<code>LIKE</code>\u00a0operator in a query, the index isn\u2019t used if the pattern starts with\u00a0<code>%</code>\u00a0or\u00a0<code>_</code>. It will prevent the database from using an index (if it exists). Of course, from another point of view, you could also argue that this type of query potentially leaves the door open to retrieve too many records that don\u2019t necessarily satisfy your query goal.</p>\n<p>Once again, your knowledge of the data that is stored in the database can help you to formulate a pattern that will filter correctly through all the data to find only the rows that really matter for your query.</p>\n<p>\u00a0</p>\n<h3>2. Limit Your\u00a0Results</h3>\n<p>\u00a0<br/>\nWhen you can not avoid filtering down on your\u00a0<code>SELECT</code>\u00a0statement, you can consider limiting your results in other ways. Here\u2019s where approaches such as the\u00a0<code>LIMIT</code>\u00a0clause and data type conversions come in.</p>\n<p><strong><code>TOP</code>, <code>LIMIT</code> And <code>ROWNUM</code> Clauses</strong></p>\n<p>You can add the\u00a0<code>LIMIT</code>\u00a0or\u00a0<code>TOP</code>\u00a0clauses to your queries to set a maximum number of rows for the result set. Here are some examples:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre><code>SELECT TOP 3 * \r\nFROM Drivers;</code></pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><strong>Note</strong>\u00a0that you can further specify the\u00a0<code>PERCENT</code>, for example, if you change the first line of the query by\u00a0<code>SELECT TOP 50 PERCENT *</code>.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre><code>SELECT driverslicensenr, name \r\nFROM Drivers \r\nLIMIT 2;</code></pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Additionally, you can also add the\u00a0<code>ROWNUM</code>\u00a0clause, which is equivalent to using\u00a0<code>LIMIT</code>\u00a0in your query:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre><code>SELECT * \r\nFROM Drivers \r\nWHERE driverslicensenr = 123456 AND ROWNUM &lt;= 3;</code></pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>\u00a0</p>\n<h3>Data Type Conversions</h3>\n<p>\u00a0<br/>\nYou should always use the most efficient, that is, smallest, data types possible. There\u2019s always a risk when you provide a huge data type when a smaller one will be more sufficient.</p>\n<p>However, when you add data type conversion to your query, you only increase the execution time.</p>\n<p>An alternative is just to avoid data type conversion as much as possible. Note also here that it\u2019s not always possible to remove or omit the data type conversion from your queries, but that you should definitely aim to be careful in including them and that when you do, you test the effect of the addition before you run the query.</p>\n</div>\n<div class=\"page-link\"><p>Pages: 1 <a href=\"https://www.kdnuggets.com/2017/08/write-better-sql-queries-definitive-guide-part-1.html/2\">2</a></p></div>\n<div class=\"pagi\">\n<hr class=\"grey-line\"/>\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2017/08/machine-learning-vs-statistics.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"/> <strong>Previous post</strong></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2017/08/understanding-overfitting-meme-supervised-learning.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/><br/>\n<div>\n<hr class=\"grey-line\"/><br/>\n<h2>Top Stories Past 30 Days</h2>\n<table align=\"center\" cellpadding=\"3\" cellspacing=\"10\" class=\"latn\" width=\"100%\">\n<tr>\n<td valign=\"top\" width=\"50%\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Popular</b></th></tr>\n<tr><td>\n<ol class=\"three_ol\"><li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-1-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-2-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n<li> <a href=\"/2018/05/simplilearn-9-must-have-skills-data-scientist.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-3-simplilearn');\"><b>9 Must-have skills you need to become a Data Scientist, updated</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-4-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/03/another-10-free-must-read-books-for-machine-learning-and-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-5-another-10-books');\"><b>Another 10 Free Must-Read Books for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-6-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/best-data-visualization-techniques.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-7-best-data-viz');\"><b>Best Data Visualization Techniques for small and large data</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td> <td valign=\"top\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Shared</b></th></tr>\n<tr><td><ol class=\"three_ol\">\n<li> <a href=\"/2019/04/another-10-free-must-see-courses-machine-learning-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-1-another-10-courses');\"><b>Another 10 Free Must-See Courses for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-2-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/03/r-vs-python-data-visualization.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-3-r-py-viz');\"><b>R vs Python for Data Visualization</b></a>\n<li> <a href=\"/2019/03/deep-learning-toolset-overview.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-4-dl-toolset');\"><b>The Deep Learning Toolset \u2014 An Overview</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-5-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-6-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-7-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<!--#content end--></div>\n<div id=\"sidebar\">\n<div class=\"latn\">\n<h3><b><a href=\"/news/index.html\">Latest News</a></b></h3>\n<ul style=\"font-size:14px; margin-top:5px\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/datarobot-delivering-trusted-ai-microsoft.html\">Delivering Trusted AI with DataRobot and Microsoft</a><li> <a href=\"https://www.kdnuggets.com/2019/04/formulated-ai-data-production-landscape.html\">AI and the data production landscape</a><li> <a href=\"https://www.kdnuggets.com/2019/04/most-desired-skill-data-science.html\">The most desired skill in data science</a><li> <a href=\"https://www.kdnuggets.com/2019/04/projects-include-data-science-portfolio.html\">Projects to Include in a Data Science Portfolio</a><li> <a href=\"https://www.kdnuggets.com/2019/04/rework-meet-worlds-leading-ai-deep-learning-experts.html\">Meet the World\u2019s Leading AI &amp; Deep Learning ...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/problem-data-science-job-postings.html\">The problem with data science job postings</a></li></li></li></li></li></li></ul>\n</div>\n<div>\n<script type=\"text/javascript\">kda_sid_write(kda_sid_n);</script>\n</div>\n<br/><script src=\"/aps/sbm.js\" type=\"text/javascript\"></script>\n<div class=\"latn\" style=\"margin-top: 15px;\">\n<h3><b>More Recent Stories</b></h3>\n<ul class=\"next-posts\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/problem-data-science-job-postings.html\">The problem with data science job postings</a><li> <a href=\"https://www.kdnuggets.com/2019/04/graduating-gans-understanding-generative-adversarial-networks.html\">Graduating in GANs: Going From Understanding Generative Advers...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/datax-join-new-generation-ai-technologists.html\">Join the new generation of AI technologists</a><li> <a href=\"https://www.kdnuggets.com/2019/04/top-tweets-apr17-apr23.html\">Top tweets, Apr 17\u201323: The History of Artificial #NeuralN...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/activestate-top-10-python-use-cases.html\">Top 10 Python Use Cases</a><li> <a href=\"https://www.kdnuggets.com/2019/04/future-generative-adversarial-networks.html\">Generative Adversarial Networks \u2013 Key Milestones and Sta...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/attention-craving-rnn-building-transformer-networks.html\">Attention Craving RNNS: Building Up To Transformer Networks</a><li> <a href=\"https://www.kdnuggets.com/jobs/19/04-24-fors-marsh-group-lead-data-scientist.html\">Fors Marsh Group: Lead Data Scientist [Arlington, VA]</a><li> <a href=\"https://www.kdnuggets.com/2019/n16.html\">KDnuggets 19:n16, Apr 24: Data Visualization in Python with...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/paw-mega-paw-las-vegas-lower-rates-end-friday.html\">Lower Rates End Friday for Mega-PAW Vegas \u2013 the Largest Pred...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/top-news-week-0415-0421.html\">Top Stories, Apr 15-21: Data Visualization in Python: Matplotl...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/wharton-customer-analytics-initiative-conference.html\">Wharton Customer Analytics Initiative Annual Conference in Phi...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/machine-learning-graph-analytics.html\">Machine Learning and Deep Link Graph Analytics: A Powerful Com...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/best-masters-data-science-analytics-online.html\">2019 Best Masters in Data Science and Analytics \u2013 Online</a><li> <a href=\"https://www.kdnuggets.com/2019/04/worth-studying-data-science-masters.html\">Was it Worth Studying a Data Science Masters?</a><li> <a href=\"https://www.kdnuggets.com/2019/04/approach-pre-trained-deep-learning-models-caution.html\">Approach pre-trained deep learning models with caution</a><li> <a href=\"https://www.kdnuggets.com/2019/04/coursera-earn-deep-learning-certificate.html\">Earn a Deep Learning Certificate</a><li> <a href=\"https://www.kdnuggets.com/2019/04/octoparse-scrape-data-website.html\">Easy Way to Scrape Data from Website By Yourself</a><li> <a href=\"https://www.kdnuggets.com/2019/04/ai-environment.html\">AI Supporting The Earth</a><li> <a href=\"https://www.kdnuggets.com/2019/04/mueller-report-word-cloud-brief-tutorial-r.html\">The Mueller Report Word Cloud: A brief tutorial in R</a></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></ul>\n</div>\n</div><div class=\"breadcrumbs_bottom\">\n<div class=\"breadcumb\">\n<br>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2017/index.html\">2017</a> \u00bb <a href=\"https://www.kdnuggets.com/2017/08/index.html\">Aug</a> \u00bb <a href=\"https://www.kdnuggets.com/2017/08/tutorials.html\">Tutorials, Overviews</a> \u00bb How To Write Better SQL Queries: The Definitive Guide \u2013 Part 1 (\u00a0<a href=\"/2017/n33.html\">17:n33</a>\u00a0)    </br></div>\n</div>\n<!--#content_wrapper end--></div>\n<br>\n<div id=\"footer\">\n<br/>\u00a9 2019 KDnuggets. <a href=\"/about/index.html\">About KDnuggets</a>. \u00a0<a href=\"/news/privacy-policy.html\">Privacy policy</a>. <a href=\"/terms-of-service.html\">Terms of Service</a><br/>\u00a0\n<div class=\"kd_bottom\">\n<div class=\"footer-container\">\n<div class=\"footer-news\">\n<a href=\"/news/subscribe.html\" onclick=\"_gaq.push(['_trackPageview','/x/bot/sub']);\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a>\n</div>\n<div class=\"footer-sm\">\n<a href=\"https://twitter.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/twt']);\" target=\"_blank\"><img height=\"32\" src=\"/images/tw_c48.png\" width=\"32\"/></a>\n<a href=\"https://facebook.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/fb']);\" target=\"_blank\"><img alt=\"Facebook\" height=\"32\" src=\"/images/fb_c48.png\" width=\"32\"/></a>\n<a href=\"https://www.linkedin.com/groups/54257\" onclick=\"_gaq.push(['_trackPageview','/x/bot/in']);\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"32\" src=\"/images/in_c48.png\" width=\"32\"/></a>\n</div>\n</div>\n<div class=\"close-footer\">X</div>\n</div>\n<script type=\"text/javascript\">\n  jQuery('.close-footer').click(\n      function(){       \n         jQuery('.kd_bottom').hide();\n      }\n   );\n</script> </div>\n<div class=\"clear\"><!--blank--></div>\n</br></div>\n<div style=\"display: none;\"><div id=\"boxzilla-box-82996-content\"><script type=\"text/javascript\">(function() {\n\tif (!window.mc4wp) {\n\t\twindow.mc4wp = {\n\t\t\tlisteners: [],\n\t\t\tforms    : {\n\t\t\t\ton: function (event, callback) {\n\t\t\t\t\twindow.mc4wp.listeners.push({\n\t\t\t\t\t\tevent   : event,\n\t\t\t\t\t\tcallback: callback\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})();\n</script><!-- MailChimp for WordPress v4.1.14 - https://wordpress.org/plugins/mailchimp-for-wp/ --><form class=\"mc4wp-form mc4wp-form-77281\" data-id=\"77281\" data-name=\"Subscribe to KDnuggets News\" id=\"mc4wp-form-1\" method=\"post\"><div class=\"mc4wp-form-fields\"><div class=\"header-container\">\n<img align=\"left\" src=\"/wp-content/uploads/envelope.png\"><a href=\"/news/subscribe.html\">Get KDnuggets, a leading newsletter on AI, \r\n  Data Science, and Machine Learning</a>\n</img></div>\n<div class=\"form-fields\">\n<div class=\"field-container\"><label>Email:</label><input maxlength=\"60\" name=\"EMAIL\" placeholder=\"Your email\" required=\"\" size=\"30\" type=\"email\"/></div>\n<div class=\"field-container submit-container\"><div class=\"form-button\" onclick=\"document.getElementById('mc4wp-form-1').submit()\">Sign Up</div></div>\n</div>\n<label style=\"display: none !important;\">Leave this field empty if you're human: <input autocomplete=\"off\" name=\"_mc4wp_honeypot\" tabindex=\"-1\" type=\"text\" value=\"\"/></label><input name=\"_mc4wp_timestamp\" type=\"hidden\" value=\"1556374191\"/><input name=\"_mc4wp_form_id\" type=\"hidden\" value=\"77281\"/><input name=\"_mc4wp_form_element_id\" type=\"hidden\" value=\"mc4wp-form-1\"/></div><div class=\"mc4wp-response\"></div></form><!-- / MailChimp for WordPress Plugin -->\n</div></div><script type=\"text/javascript\">(function() {function addEventListener(element,event,handler) {\n\tif(element.addEventListener) {\n\t\telement.addEventListener(event,handler, false);\n\t} else if(element.attachEvent){\n\t\telement.attachEvent('on'+event,handler);\n\t}\n}function maybePrefixUrlField() {\n\tif(this.value.trim() !== '' && this.value.indexOf('http') !== 0) {\n\t\tthis.value = \"http://\" + this.value;\n\t}\n}\n\nvar urlFields = document.querySelectorAll('.mc4wp-form input[type=\"url\"]');\nif( urlFields && urlFields.length > 0 ) {\n\tfor( var j=0; j < urlFields.length; j++ ) {\n\t\taddEventListener(urlFields[j],'blur',maybePrefixUrlField);\n\t}\n}/* test if browser supports date fields */\nvar testInput = document.createElement('input');\ntestInput.setAttribute('type', 'date');\nif( testInput.type !== 'date') {\n\n\t/* add placeholder & pattern to all date fields */\n\tvar dateFields = document.querySelectorAll('.mc4wp-form input[type=\"date\"]');\n\tfor(var i=0; i<dateFields.length; i++) {\n\t\tif(!dateFields[i].placeholder) {\n\t\t\tdateFields[i].placeholder = 'YYYY-MM-DD';\n\t\t}\n\t\tif(!dateFields[i].pattern) {\n\t\t\tdateFields[i].pattern = '[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])';\n\t\t}\n\t}\n}\n\n})();</script><script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_options = {\"testMode\":\"\",\"boxes\":[{\"id\":82996,\"icon\":\"&times;\",\"content\":\"\",\"css\":{\"background_color\":\"#eeee22\",\"width\":600,\"border_width\":2,\"border_style\":\"double\",\"position\":\"center\"},\"trigger\":{\"method\":\"time_on_page\",\"value\":\"3\"},\"animation\":\"fade\",\"cookie\":{\"triggered\":0,\"dismissed\":336},\"rehide\":true,\"position\":\"center\",\"screenWidthCondition\":{\"condition\":\"larger\",\"value\":500},\"closable\":true,\"post\":{\"id\":82996,\"title\":\"Subscribe to KDnuggets\",\"slug\":\"subscribe-to-kdnuggets\"}}]};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla/assets/js/script.min.js?ver=3.2.5\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_stats_config = {\"ajaxurl\":\"https:\\/\\/www.kdnuggets.com\\/wp-admin\\/admin-ajax.php?action=boxzilla_stats_track\"};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla-stats/assets/js/tracking.min.js?ver=1.0.4\" type=\"text/javascript\"></script>\n<script src=\"https://www.kdnuggets.com/wp-includes/js/wp-embed.min.js?ver=4.9.10\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar mc4wp_forms_config = [];\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/forms-api.min.js?ver=4.1.14\" type=\"text/javascript\"></script>\n<!--[if lte IE 9]>\n<script type='text/javascript' src='https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/third-party/placeholders.min.js?ver=4.1.14'></script>\n<![endif]-->\n<!--/.main_wrapper--></div>\n<script src=\"https://s7.addthis.com/js/300/addthis_widget.js#pubid=gpsaddthis\" type=\"text/javascript\"></script>\n</body>\n</html>\n<!-- Dynamic page generated in 0.711 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2019-04-27 10:09:51 -->\n<!-- Compression = gzip -->", "content_tokenized": ["karlijn", "willem", "data", "scienc", "journalist", "datacamp", "contributor", "structur", "queri", "languag", "indispens", "skill", "the", "data", "scienc", "industri", "and", "general", "speak", "learn", "this", "skill", "fair", "easi", "howev", "most", "forget", "that", "just", "about", "write", "queri", "which", "just", "the", "first", "step", "down", "the", "road", "ensur", "that", "queri", "are", "perform", "that", "they", "fit", "the", "context", "that", "work", "whole", "other", "thing", "that", "whi", "this", "tutori", "will", "provid", "with", "small", "peek", "some", "step", "that", "can", "through", "evalu", "queri", "first", "off", "start", "with", "short", "overview", "the", "import", "learn", "for", "job", "data", "scienc", "next", "first", "learn", "more", "about", "how", "queri", "process", "and", "execut", "that", "can", "proper", "understand", "the", "import", "write", "qualit", "queri", "more", "specif", "see", "that", "the", "queri", "pars", "rewritten", "optim", "and", "final", "evalu", "with", "that", "mind", "not", "onli", "over", "some", "queri", "antipattern", "that", "beginn", "make", "when", "write", "queri", "but", "also", "learn", "more", "about", "altern", "and", "solut", "those", "possibl", "mistak", "also", "learn", "more", "about", "the", "setbas", "versus", "the", "procedur", "approach", "queri", "also", "see", "that", "these", "antipattern", "stem", "from", "perform", "concern", "and", "that", "besid", "the", "manual", "approach", "improv", "queri", "can", "analyz", "queri", "also", "more", "structur", "indepth", "way", "make", "use", "some", "other", "tool", "that", "help", "see", "the", "queri", "plan", "and", "briefli", "more", "into", "time", "complex", "and", "the", "big", "notat", "get", "idea", "about", "the", "time", "complex", "execut", "plan", "befor", "execut", "queri", "last", "briefli", "get", "some", "pointer", "how", "can", "tune", "queri", "further", "are", "interest", "cours", "take", "datacamp", "intro", "for", "data", "scienc", "cours", "whi", "should", "learn", "for", "data", "scienc", "far", "from", "dead", "one", "the", "most", "indemand", "skill", "that", "find", "job", "descript", "from", "the", "data", "scienc", "industri", "whether", "appli", "for", "data", "analyst", "data", "engin", "data", "scientist", "ani", "other", "role", "this", "confirm", "num", "the", "respond", "the", "num", "reilli", "data", "scienc", "salari", "survey", "who", "indic", "that", "they", "use", "their", "profession", "context", "what", "more", "this", "survey", "stand", "out", "way", "abov", "the", "num", "and", "python", "num", "program", "languag", "get", "the", "pictur", "musthav", "skill", "when", "work", "toward", "get", "job", "the", "data", "scienc", "industri", "not", "bad", "for", "languag", "that", "develop", "the", "earli", "num", "right", "but", "whi", "exact", "that", "frequent", "use", "and", "whi", "dead", "even", "though", "has", "been", "around", "for", "such", "long", "time", "there", "are", "sever", "reason", "one", "the", "first", "reason", "would", "that", "compani", "most", "store", "data", "relat", "databas", "manag", "system", "relat", "data", "stream", "manag", "system", "and", "need", "access", "that", "data", "the", "lingua", "franca", "data", "give", "the", "abil", "interact", "with", "almost", "ani", "databas", "even", "build", "own", "local", "this", "enough", "yet", "keep", "mind", "that", "there", "are", "quit", "few", "implement", "that", "are", "incompat", "between", "vendor", "and", "not", "necessarili", "follow", "standard", "know", "the", "standard", "thus", "requir", "for", "find", "way", "around", "the", "data", "scienc", "industri", "top", "that", "safe", "say", "that", "has", "also", "been", "embrac", "newer", "technolog", "such", "hive", "sqllike", "queri", "languag", "interfac", "queri", "and", "manag", "larg", "dataset", "spark", "which", "can", "use", "execut", "queri", "onc", "again", "the", "that", "find", "there", "will", "differ", "from", "the", "standard", "that", "might", "have", "learn", "but", "the", "learn", "curv", "will", "consider", "easier", "want", "make", "comparison", "consid", "learn", "linear", "algebra", "put", "all", "that", "effort", "into", "this", "one", "subject", "know", "that", "will", "abl", "use", "master", "machin", "learn", "well", "short", "this", "whi", "should", "learn", "this", "queri", "languag", "fair", "easi", "learn", "even", "for", "total", "newbi", "the", "learn", "curv", "quit", "easi", "and", "gradual", "write", "queri", "time", "follow", "the", "learn", "onc", "use", "anywher", "principl", "great", "invest", "time", "excel", "addit", "program", "languag", "some", "case", "write", "queri", "even", "prefer", "over", "write", "code", "becaus", "more", "perform", "what", "are", "still", "wait", "for", "process", "queri", "execut", "improv", "the", "perform", "queri", "first", "have", "know", "what", "happen", "intern", "when", "press", "the", "shortcut", "run", "the", "queri", "first", "the", "queri", "pars", "into", "pars", "tree", "the", "queri", "analyz", "see", "satisfi", "the", "syntact", "and", "semant", "requir", "the", "parser", "creat", "intern", "represent", "the", "input", "queri", "this", "output", "then", "pass", "the", "rewrit", "engin", "then", "the", "task", "the", "optim", "find", "the", "optim", "execut", "queri", "plan", "for", "the", "given", "queri", "the", "execut", "plan", "defin", "exact", "what", "algorithm", "use", "for", "each", "oper", "and", "how", "the", "execut", "the", "oper", "coordin", "inde", "find", "the", "most", "optim", "execut", "plan", "the", "optim", "enumer", "all", "possibl", "execut", "plan", "determin", "the", "qualiti", "cost", "each", "plan", "take", "inform", "about", "the", "current", "databas", "state", "and", "then", "choos", "the", "best", "one", "the", "final", "execut", "plan", "becaus", "queri", "optim", "can", "imperfect", "databas", "user", "and", "administr", "sometim", "need", "manual", "examin", "and", "tune", "the", "plan", "produc", "the", "optim", "get", "better", "perform", "now", "probabl", "wonder", "what", "consid", "good", "queri", "plan", "alreadi", "read", "the", "qualiti", "cost", "plan", "play", "huge", "role", "more", "specif", "thing", "such", "the", "number", "disk", "that", "are", "requir", "evalu", "the", "plan", "the", "plan", "cost", "and", "the", "overal", "respons", "time", "that", "can", "observ", "the", "databas", "client", "and", "the", "total", "execut", "time", "are", "essenti", "that", "where", "the", "notion", "time", "complex", "will", "come", "read", "more", "about", "this", "later", "next", "the", "chosen", "queri", "plan", "execut", "evalu", "the", "system", "execut", "engin", "and", "the", "result", "queri", "are", "return", "write", "queri", "what", "might", "not", "have", "becom", "clear", "from", "the", "previous", "section", "that", "the", "garbag", "garbag", "out", "principl", "natur", "surfac", "within", "the", "queri", "process", "and", "execut", "the", "one", "who", "formul", "the", "queri", "also", "hold", "the", "key", "the", "perform", "queri", "the", "optim", "get", "bad", "formul", "queri", "will", "onli", "abl", "much\u2026", "that", "mean", "that", "there", "are", "some", "thing", "that", "can", "when", "write", "queri", "alreadi", "saw", "the", "introduct", "the", "respons", "twofold", "not", "onli", "about", "write", "queri", "that", "live", "certain", "standard", "but", "also", "about", "gather", "idea", "where", "perform", "problem", "might", "lurk", "within", "queri", "ideal", "start", "point", "think", "spot", "within", "queri", "where", "issu", "might", "sneak", "and", "general", "there", "are", "four", "claus", "and", "keyword", "where", "newbi", "can", "expect", "perform", "issu", "occur", "the", "claus", "ani", "keyword", "and", "the", "claus", "grant", "this", "approach", "simpl", "and", "naiv", "but", "beginn", "these", "claus", "and", "statement", "are", "nice", "pointer", "and", "safe", "say", "that", "when", "just", "start", "out", "these", "spot", "are", "the", "one", "where", "mistak", "happen", "and", "iron", "enough", "where", "they", "also", "hard", "spot", "howev", "should", "also", "realiz", "that", "perform", "someth", "that", "need", "context", "becom", "meaning", "simpli", "say", "that", "these", "claus", "and", "keyword", "are", "bad", "the", "way", "when", "think", "about", "perform", "have", "claus", "queri", "necessarili", "mean", "that", "bad", "query\u2026", "take", "look", "the", "follow", "section", "learn", "more", "about", "antipattern", "and", "altern", "approach", "build", "queri", "these", "tip", "and", "trick", "are", "meant", "guid", "how", "and", "actual", "need", "rewrit", "queri", "depend", "the", "amount", "data", "the", "databas", "and", "the", "number", "time", "need", "execut", "the", "queri", "among", "other", "thing", "entir", "depend", "the", "goal", "queri", "and", "have", "some", "prior", "knowledg", "about", "the", "databas", "that", "want", "queri", "crucial", "num", "onli", "retriev", "the", "data", "need", "the", "mindset", "the", "more", "data", "the", "better", "one", "that", "should", "necessarili", "live", "when", "write", "queri", "not", "onli", "risk", "obscur", "insight", "get", "more", "than", "what", "actual", "need", "but", "also", "perform", "might", "suffer", "from", "the", "fact", "that", "queri", "pull", "too", "much", "data", "that", "whi", "general", "good", "idea", "look", "out", "for", "the", "statement", "the", "claus", "and", "the", "oper", "the", "statement", "first", "thing", "that", "can", "alreadi", "check", "when", "have", "written", "queri", "whether", "the", "statement", "compact", "possibl", "aim", "here", "should", "remov", "unncessari", "column", "from", "this", "way", "forc", "yourself", "onli", "pull", "data", "that", "serv", "queri", "goal", "case", "have", "correl", "subqueri", "that", "have", "should", "tri", "use", "constant", "the", "statement", "that", "subqueri", "instead", "select", "the", "valu", "actual", "column", "this", "especi", "handi", "when", "check", "the", "exist", "onli", "rememb", "that", "correl", "subqueri", "subqueri", "that", "use", "valu", "from", "the", "outer", "queri", "and", "note", "that", "even", "though", "can", "work", "this", "context", "constant", "veri", "confus", "consid", "the", "follow", "exampl", "understand", "what", "meant", "use", "constant", "driverslicensenr", "name", "driver", "num", "fine", "finesdriverslicensenr", "driversdriverslicensenr", "tip", "handi", "know", "that", "have", "correl", "subqueri", "alway", "good", "idea", "can", "alway", "consid", "get", "rid", "them", "for", "exampl", "rewrit", "them", "with", "driverslicensenr", "name", "driver", "fine", "finesdriverslicensenr", "driversdriverslicensenr", "the", "claus", "the", "statement", "use", "return", "onli", "distinct", "differ", "valu", "claus", "that", "should", "definit", "tri", "avoid", "can", "like", "have", "read", "other", "exampl", "the", "execut", "time", "onli", "increas", "add", "this", "claus", "queri", "therefor", "alway", "good", "idea", "consid", "whether", "realli", "need", "this", "oper", "take", "place", "get", "the", "result", "that", "want", "accomplish", "the", "oper", "when", "use", "the", "oper", "queri", "the", "index", "use", "the", "pattern", "start", "with", "will", "prevent", "the", "databas", "from", "use", "index", "exist", "cours", "from", "anoth", "point", "view", "could", "also", "argu", "that", "this", "type", "queri", "potenti", "leav", "the", "door", "open", "retriev", "too", "mani", "record", "that", "necessarili", "satisfi", "queri", "goal", "onc", "again", "knowledg", "the", "data", "that", "store", "the", "databas", "can", "help", "formul", "pattern", "that", "will", "filter", "correct", "through", "all", "the", "data", "find", "onli", "the", "row", "that", "realli", "matter", "for", "queri", "num", "limit", "result", "when", "can", "not", "avoid", "filter", "down", "statement", "can", "consid", "limit", "result", "other", "way", "here", "where", "approach", "such", "the", "claus", "and", "data", "type", "convers", "come", "and", "claus", "can", "add", "the", "claus", "queri", "set", "maximum", "number", "row", "for", "the", "result", "set", "here", "are", "some", "exampl", "num", "driver", "note", "that", "can", "further", "specifi", "the", "for", "exampl", "chang", "the", "first", "line", "the", "queri", "num", "driverslicensenr", "name", "driver", "num", "addit", "can", "also", "add", "the", "claus", "which", "equival", "use", "queri", "driver", "driverslicensenr", "num", "num", "data", "type", "convers", "should", "alway", "use", "the", "most", "effici", "that", "smallest", "data", "type", "possibl", "there", "alway", "risk", "when", "provid", "huge", "data", "type", "when", "smaller", "one", "will", "more", "suffici", "howev", "when", "add", "data", "type", "convers", "queri", "onli", "increas", "the", "execut", "time", "altern", "just", "avoid", "data", "type", "convers", "much", "possibl", "note", "also", "here", "that", "not", "alway", "possibl", "remov", "omit", "the", "data", "type", "convers", "from", "queri", "but", "that", "should", "definit", "aim", "care", "includ", "them", "and", "that", "when", "test", "the", "effect", "the", "addit", "befor", "run", "the", "queri"], "timestamp_scraper": 1556374191.740613, "title": "How To Write Better SQL Queries: The Definitive Guide \u2013 Part 1", "read_time": 642.0, "content_html": "<div class=\"post\" id=\"post-\">\n<p><b>By Karlijn Willems, Data Science Journalist &amp; <a href=\"https://www.datacamp.com/\">DataCamp</a> Contributor</b>.</p>\n<p>Structured Query Language (SQL) is an indispensable skill in the data science industry and generally speaking, learning this skill is fairly easy. However, most forget that SQL isn\u2019t just about writing queries, which is just the first step down the road. Ensuring that queries are performant or that they fit the context that you\u2019re working in is a whole other thing.</p>\n<p>That\u2019s why this SQL tutorial will provide you with a small peek at some steps that you can go through to evaluate your query:</p>\n<ul>\n<li>First off, you\u2019ll start with a short overview of the\u00a0<a href=\"https://www.datacamp.com/community/tutorials/sql-tutorial-query#importance\" target=\"_blank\">importance of learning SQL</a>\u00a0for jobs in data science;\n<li>Next, you\u2019ll first learn more about how\u00a0<a href=\"https://www.datacamp.com/community/tutorials/sql-tutorial-query#execution\" target=\"_blank\">SQL query processing and execution</a>\u00a0so that you can properly understand the importance of writing qualitative queries: more specifically, you\u2019ll see that the query is parsed, rewritten, optimized and finally evaluated;\n<li>With that in mind, you\u2019ll not only go over some\u00a0<a href=\"https://www.datacamp.com/community/tutorials/sql-tutorial-query#antipattern\" target=\"_blank\">query anti-patterns</a>\u00a0that beginners make when writing queries, but you\u2019ll also learn more about alternatives and solutions to those possible mistakes; You\u2019ll also learn more about the\u00a0<a href=\"https://www.datacamp.com/community/tutorials/sql-tutorial-query#setbased\" target=\"_blank\">set-based versus the procedural approach</a>\u00a0to querying.\n<li>You\u2019ll also see that these anti-patterns stem from performance concerns and that, besides the \u201cmanual\u201d approach to improving SQL queries, you can\u00a0<a href=\"https://www.datacamp.com/community/tutorials/sql-tutorial-query#queryplan\" target=\"_blank\">analyze your queries</a>\u00a0also in a more structured, in-depth way by making use of some other tools that help you to see the query plan; And,\n<li>You\u2019ll briefly go more into\u00a0<a href=\"https://www.datacamp.com/community/tutorials/sql-tutorial-query#bigo\" target=\"_blank\">time complexity and the big O notation</a>\u00a0to get an idea about the time complexity of an execution plan before you execute your query; Lastly,\n<li>You\u2019ll briefly get some pointers on how you can\u00a0<a href=\"https://www.datacamp.com/community/tutorials/sql-tutorial-query#tune\" target=\"_blank\">tune your query</a>\u00a0further.\n</li></li></li></li></li></li></ul>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/800/0*zaI1WPqkM52wDdC-.jpeg\" width=\"60%\"/></p>\n<p>Are you interested in an SQL course? Take DataCamp\u2019s\u00a0<a href=\"https://www.datacamp.com/courses/intro-to-sql-for-data-science\" target=\"_blank\">Intro to SQL for Data Science</a>\u00a0course!</p>\n<p>\u00a0</p>\n<h3>Why Should I Learn SQL For Data\u00a0Science?</h3>\n<p>\u00a0<br>\nSQL is far from dead: it\u2019s one of the most in-demand skills that you find in job descriptions from the data science industry, whether you\u2019re applying for a data analyst, a data engineer, a data scientist or\u00a0<a href=\"https://www.datacamp.com/community/tutorials/data-science-industry-infographic\" target=\"_blank\">any other roles</a>. This is confirmed by 70% of the respondents of the 2016 O\u2019Reilly Data Science Salary Survey, who indicate that they use SQL in their professional context. What\u2019s more, in this survey, SQL stands out way above the R (57%) and Python (54%) programming languages.</br></p>\n<p>You get the picture: SQL is a must-have skill when you\u2019re working towards getting a job in the data science industry.</p>\n<p>Not bad for a language that was developed in the early 1970s, right?</p>\n<p>But why exactly is it that it is so frequently used? And why isn\u2019t it dead even though it has been around for such a long time?</p>\n<p>There are several reasons: one of the first reasons would be that companies mostly store data in Relational Database Management Systems (RDBMS) or in Relational Data Stream Management Systems (RDSMS) and you need SQL to access that data. SQL is the lingua franca of data: it gives you the ability to interact with almost any database or to even build your own locally!</p>\n<p>As if this wasn\u2019t enough yet, keep in mind that there are quite a few SQL implementations that are incompatible between vendors and do not necessarily follow standards. Knowing the standard SQL is thus a requirement for you to find your way around in the (data science) industry.</p>\n<p>On top of that, it\u2019s safe to say that SQL has also been embraced by newer technologies, such as Hive, a SQL-like query language interface to query and manage large datasets, or Spark SQL, which you can use to execute SQL queries. Once again, the SQL that you find there will differ from the standard that you might have learned, but the learning curve will be considerably easier.</p>\n<p>If you do want to make a comparison, consider it as learning linear algebra: by putting all that effort into this one subject, you know that you will be able to use it to master machine learning as well!</p>\n<p>In short, this is why you should learn this query language:</p>\n<ul>\n<li>It\u2019s is fairly easy to learn, even for total newbies. The learning curve is quite easy and gradual, so you\u2019ll be writing queries in no time.\n<li>It follows the \u201clearn once, use anywhere\u201d principle, so it\u2019s a great investment of your time!\n<li>It\u2019s an excellent addition to programming languages; In some cases, writing a query is even preferred over writing code because it\u2019s more performant!\n<li>\u2026\n</li></li></li></li></ul>\n<p>What are you still waiting for?\u00a0:)</p>\n<p>\u00a0</p>\n<h3>SQL Processing &amp; Query Execution</h3>\n<p>\u00a0<br>\nTo improve the performance of your SQL query, you first have to know what happens internally when you press the shortcut to run the query.</br></p>\n<p>First, the query is parsed into a \u201cparse tree\u201d; The query is analyzed to see if it satisfies the syntactical and semantical requirements. The parser creates an internal representation of the input query. This output is then passed on to the rewrite engine.</p>\n<p>It is then the task of the optimizer to find the optimal execution or query plan for the given query. The execution plan defines exactly what algorithm is used for each operation, and how the execution of the operations is coordinated.</p>\n<p>To indeed find the most optimal execution plan, the optimizer enumerates all possible execution plans, determines the quality or cost of each plan, takes information about the current database state and then chooses the best one as the final execution plan. Because query optimizers can be imperfect, database users and administrators sometimes need to manually examine and tune the plans produced by the optimizer to get better performance.</p>\n<p>Now you probably wonder what is considered to be a \u201cgood query plan\u201d.</p>\n<p>As you already read, the quality of cost of a plan plays a huge role. More specifically, things such as the number of disk I/Os that are required to evaluate the plan, the plan\u2019s CPU cost and the overall response time that can be observed by the database client and the total execution time are essential. That is where the notion of time complexity will come in. You\u2019ll read more about this later on.</p>\n<p>Next, the chosen query plan is executed, evaluated by the system\u2019s execution engine and the results of your query are returned.</p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/800/0*0nMJKb-YmCGAsrdX.png\" width=\"50%\"/></p>\n<p>\u00a0</p>\n<h3>Writing SQL Queries</h3>\n<p>\u00a0<br>\nWhat might not have become clear from the previous section is that the Garbage In, Garbage Out (GIGO) principle naturally surfaces within the query processing and execution: the one who formulates the query also holds the keys to the performance of your SQL queries. If the optimizer gets a badly formulated query, it will only be able to do as much\u2026</br></p>\n<p>That means that there are some things that\u00a0<em>you</em>\u00a0can do when you\u2019re writing a query. As you already saw in the introduction, the responsibility is two-fold: it\u2019s not only about writing queries that live up to a certain standard, but also about gathering an idea of where performance problems might be lurking within your query.</p>\n<p>An ideal starting point is to think of \u201cspots\u201d within your queries where issues might sneak in. And, in general, there are four clauses and keywords where newbies can expect performance issues to occur:</p>\n<ul>\n<li>The\u00a0<code>WHERE</code>\u00a0clause;\n<li>Any\u00a0<code>INNER JOIN</code>\u00a0or\u00a0<code>LEFT JOIN</code>\u00a0keywords; And,\n<li>The\u00a0<code>HAVING</code>\u00a0clause;\n</li></li></li></ul>\n<p>Granted, this approach is simple and naive, but as a beginner, these clauses and statements are nice pointers and it\u2019s safe to say that when you\u2019re just starting out, these spots are the ones where mistakes happen and, ironically enough, where they\u2019re also hard to spot.</p>\n<p>However, you should also realize that performance is something that needs a context to become meaningful: simply saying that these clauses and keywords are bad isn\u2019t the way to go when you\u2019re thinking about SQL performance. Having a\u00a0<code>WHERE</code>\u00a0or\u00a0<code>HAVING</code>\u00a0clause in your query doesn\u2019t necessarily mean that it\u2019s a bad query\u2026</p>\n<p>Take a look at the following section to learn more about anti-patterns and alternative approaches to building up your query. These tips and tricks are meant as a guide. How and if you actually need to rewrite your query depends on the amount of data, the database and the number of times you need to execute the query, among other things. It entirely depends on the goal of your query and having some prior knowledge about the database that you want to query is crucial!</p>\n<p>\u00a0</p>\n<h3>1. Only Retrieve The Data You\u00a0Need</h3>\n<p>\u00a0<br>\nThe mindset of \u201cthe more data, the better\u201d isn\u2019t one that you should necessarily live by when you\u2019re writing SQL queries: not only do you risk obscuring your insights by getting more than what you actually need, but also your performance might suffer from the fact that your query pulls up too much data.</br></p>\n<p>That\u2019s why it\u2019s generally a good idea to look out for the\u00a0<code>SELECT</code>\u00a0statement, the\u00a0<code>DISTINCT</code>\u00a0clause and the\u00a0<code>LIKE</code>\u00a0operator.</p>\n<p><strong>The <code>SELECT</code> Statement</strong></p>\n<p>A first thing that you can already check when you have written your query is whether the\u00a0<code>SELECT</code>\u00a0statement is as compact as possible. Your aim here should be to remove unncessary columns from\u00a0<code>SELECT</code>. This way you force yourself to only pull up data that serves your query goal.</p>\n<p>In case you have correlated subqueries that have\u00a0<code>EXISTS</code>, you should try to use a constant in the\u00a0<code>SELECT</code>\u00a0statement of that subquery instead of selecting the value of an actual column. This is especially handy when you\u2019re checking the existence only.</p>\n<p><strong>Remember</strong>\u00a0that a correlated subquery is a subquery that uses values from the outer query. And note that, even though\u00a0<code>NULL</code>\u00a0can work in this context as a \u201cconstant\u201d, it\u2019s very confusing!</p>\n<p>Consider the following example to understand what is meant by using a constant:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre><code>SELECT driverslicensenr, name \r\nFROM Drivers \r\nWHERE EXISTS (SELECT '1' FROM Fines \r\n              WHERE fines.driverslicensenr = drivers.driverslicensenr);</code></pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><strong>Tip</strong>: it\u2019s handy to know that having a correlated subquery isn\u2019t always a good idea. You can always consider getting rid of them by, for example, rewriting them with an\u00a0<code>INNER JOIN</code>:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre><code>SELECT driverslicensenr, name \r\nFROM drivers \r\nINNER JOIN fines ON fines.driverslicensenr = drivers.driverslicensenr;</code></pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><strong>The <code>DISTINCT</code> Clause</strong></p>\n<p>The\u00a0<code>SELECT DISTINCT</code>\u00a0statement is used to return only distinct (different) values.\u00a0<code>DISTINCT</code>\u00a0is a clause that you should definitely try to avoid if you can; Like you have read in other examples, the execution time only increases if you add this clause to your query. It\u2019s therefore always a good idea to consider whether you really need this\u00a0<code>DISTINCT</code>\u00a0operation to take place to get the results that you want to accomplish.</p>\n<p><strong>The <code>LIKE</code> Operator</strong></p>\n<p>When you use the\u00a0<code>LIKE</code>\u00a0operator in a query, the index isn\u2019t used if the pattern starts with\u00a0<code>%</code>\u00a0or\u00a0<code>_</code>. It will prevent the database from using an index (if it exists). Of course, from another point of view, you could also argue that this type of query potentially leaves the door open to retrieve too many records that don\u2019t necessarily satisfy your query goal.</p>\n<p>Once again, your knowledge of the data that is stored in the database can help you to formulate a pattern that will filter correctly through all the data to find only the rows that really matter for your query.</p>\n<p>\u00a0</p>\n<h3>2. Limit Your\u00a0Results</h3>\n<p>\u00a0<br/>\nWhen you can not avoid filtering down on your\u00a0<code>SELECT</code>\u00a0statement, you can consider limiting your results in other ways. Here\u2019s where approaches such as the\u00a0<code>LIMIT</code>\u00a0clause and data type conversions come in.</p>\n<p><strong><code>TOP</code>, <code>LIMIT</code> And <code>ROWNUM</code> Clauses</strong></p>\n<p>You can add the\u00a0<code>LIMIT</code>\u00a0or\u00a0<code>TOP</code>\u00a0clauses to your queries to set a maximum number of rows for the result set. Here are some examples:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre><code>SELECT TOP 3 * \r\nFROM Drivers;</code></pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><strong>Note</strong>\u00a0that you can further specify the\u00a0<code>PERCENT</code>, for example, if you change the first line of the query by\u00a0<code>SELECT TOP 50 PERCENT *</code>.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre><code>SELECT driverslicensenr, name \r\nFROM Drivers \r\nLIMIT 2;</code></pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Additionally, you can also add the\u00a0<code>ROWNUM</code>\u00a0clause, which is equivalent to using\u00a0<code>LIMIT</code>\u00a0in your query:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre><code>SELECT * \r\nFROM Drivers \r\nWHERE driverslicensenr = 123456 AND ROWNUM &lt;= 3;</code></pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>\u00a0</p>\n<h3>Data Type Conversions</h3>\n<p>\u00a0<br/>\nYou should always use the most efficient, that is, smallest, data types possible. There\u2019s always a risk when you provide a huge data type when a smaller one will be more sufficient.</p>\n<p>However, when you add data type conversion to your query, you only increase the execution time.</p>\n<p>An alternative is just to avoid data type conversion as much as possible. Note also here that it\u2019s not always possible to remove or omit the data type conversion from your queries, but that you should definitely aim to be careful in including them and that when you do, you test the effect of the addition before you run the query.</p>\n</div> ", "website": "kdnuggets"}