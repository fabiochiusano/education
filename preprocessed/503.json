{"content": "comments By Rubens Zimbres , Data Scientist Google Colab has open source projects that help Data Scientists everywhere. Inspired in this mindset, I developed my first IoT project using my notebook as an IoT device and AWS IoT as infrastructure. So, I had a \"simple\" idea: collect CPU Temperature from my Notebook running on Ubuntu, send to Amazon AWS IoT, save data, make it available for Machine Learning models and dashboards. However, the operationalization of this idea is quite complex: first, develop a Python notebook that runs Ubuntu command line internally ('sensors'), collecting CPU temperature and is able to connect to AWS IoT via proper security protocols using MQTT. Without using a MQTT broker like Mosquitto. It is necessary to create a Thing at AWS IoT, get the Certificates, create and attach the Policy and create a SQL Rule to send data (JSON) to Cloud Watch and Dynamo DB. Then, create a Data Pipeline from Dynamo DB to S3, so that the data become available for a Machine Learning model and also to AWS Quick Sight dashboard. Let's get started by installing 'sensors' in Ubuntu 16.04 and 'AWSIoTPythonSDK' library in Anaconda 3: \r $ sudo apt-get install lm-sensors\r $ sudo service kmod start \u00a0\r \u00a0 Let\u2019s see what the \u2018sensors\u2019 command look like: Now, install AWSIoTPythonSDK library: \r $ pip install AWSIoTPythonSDK\r Let's start with the Python notebook: the following function was developed to collect CPU Temperature with a delay of 5 seconds: \r import subprocess\r import shlex\r import time\r \r def :\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = ,\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stdout=subprocess.PIPE,\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bufsize=10, universal_newlines=True)\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \r \u00a0\u00a0\u00a0\r while True:\r \u00a0\u00a0\u00a0string=[0]\r \u00a0\u00a0\u00a0[8])\r \u00a0\u00a0\u00a0 Then, we run the notebook from Linux command line: Good. Now this code is inserted in basicPubSub.py notebook from AWSIoTPythonSDK library like this: \r while True:\r \u00a0\u00a0\u00a0if args.mode == 'both' or args.mode == 'publish':\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0args.message=[0].[8]\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mess={\"reported\": {\"light\": \"blue\",\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Temperature\": [0].[8],\"timestamp\": \r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\"timestamp\": 1526519248}\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0args.message=mess\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0].[8],(-start)/60,'min')\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0message = {}\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0message['message'] = args.message\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0message['sequence'] = loopCount\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0messageJson = \r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if args.mode == 'publish':\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0loopCount += 1\r \u00a0\u00a0\u00a0\r Cool. We have a Python notebook that will connect to AWS IoT Core via MQTT protocol. Now we set up the shadow (JSON file) at AWS IoT, that is similar to the 'device twin' from Microsoft. Note that as I had only one device, I didn\u2019t insert a device ID in the JSON file. \r {\r \u00a0\"desired\": {\r \u00a0\u00a0\u00a0\"light\": \"green\",\r \u00a0\u00a0\u00a0\"Temperature\": 55,\r \u00a0\u00a0\u00a0\"timestamp\": 1526323886\r \u00a0},\r \u00a0\"reported\": {\r \u00a0\u00a0\u00a0\"light\": \"blue\",\r \u00a0\u00a0\u00a0\"Temperature\": 55,\r \u00a0\u00a0\u00a0\"timestamp\": 1526323886\r \u00a0},\r \u00a0\"delta\": {\r \u00a0\u00a0\u00a0\"light\": \"green\"\r \u00a0}\r }\r \u00a0 Now we get the certificates .pem, .key files and rootCA.pem for a safe connection. We type CTRL+ALT+T at Ubuntu and enter the command line and publish to a topic '-t': \r $ python basicPubSub_adapted.py -e 1212345.iot.us-east-1.amazonaws.com -r rootCA.pem -c 2212345-certificate.pem.crt -k 2212345-private.pem.key -id arn:aws:iot:us-east-1:11231112345:thing/CPUUbuntu -t 'Teste' We will receive the feedback from AWS IoT connection in the Linux shell, and check in AWS IoT monitoring tool (after 1 minute) if connections were successful: It is also possible to see if the messages are being published (orange area) and also the protocol used for the connection (on the left): Also, we see that the 'shadow' is also being updated (center): Now we create a SQL rule to send data to Cloud Watch and also to Dynamo DB, creating IAM roles, policies and permissions: Data is then saved in DynamoDB, as a JSON file. Instead of timestamp, you can use MessageID as the Primary Key. Now we can visualize Cloud dynamics and data transfer in CloudWatch: Then we create a Data Pipeline from DynamoDB to S3 to be used by QuickSight: It is also needed to create a JSON file and set up IAM permissions so that Quick Sight can read from S3 bucket: \r {\r \u00a0\u00a0\u00a0\"fileLocations\": [\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"URIs\": [\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"/your-bucket/2018-05-19-19-41-16/12345-c2712345-12345\"\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0]\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"URIPrefixes\": [\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"/your-bucket/2018-05-19-19-41-16/12345-c2712345-12345\"\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0]\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r \u00a0\u00a0\u00a0],\r \u00a0\u00a0\u00a0\"globalUploadSettings\": {\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"format\": \"JSON\",\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"delimiter\": \"\\n\",\"textqualifier\":\"'\"\r \u00a0\u00a0\u00a0}\r }\r Now we have our static plot of CPU Temperature in Quick Sight. Also, S3 data (.JSON file) is now available for Machine Learning models, like anomaly detection, prediction and classification, making possible to create a pipeline with Sage Maker and Deep Learning libraries = FUN. This was a very nice way to get in touch with Amazon AWS services, like EC2, IoT, Cloud Watch, DynamoDB, S3, Quick Sight and Lambda. It's definitely not easy to set up everything and their dependencies, but this part of the project costed less than 1 USD. And generated a lot of fun ! This is the flowchart of the first part of the project at AWS: \u00a0 \u00a0 Project Part 2 \u2013 Near Real-Time Dashboard \u00a0 Now let's develop a second solution, using Streaming Data from AWS IoT that is sent to Kinesis / Firehose and then to AWS ElasticSearch, and finally to Kibana, a near real-time dashboard. You can opt to clean and extract data with Lambda (or not) using AWS IoT as input and AWS Batch as output to connect with Kinesis. Anyway, Kibana is able to interpret your JSON file. First we must set up another rule for AWS IoT send telemetry to Kinesis Firehose stream delivery: Then create an Elastic Search domain Setting up the access to a specific IP: \r {\r \u00a0\"Version\": \"2012-10-17\",\r \u00a0\"Statement\": [\r \u00a0\u00a0\u00a0{\r \u00a0\u00a0\u00a0\u00a0\u00a0\"Effect\": \"Allow\",\r \u00a0\u00a0\u00a0\u00a0\u00a0\"Principal\": {\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"AWS\": \"*\"\r \u00a0\u00a0\u00a0\u00a0\u00a0},\r \u00a0\u00a0\u00a0\u00a0\u00a0\"Action\": \"es:*\",\r \u00a0\u00a0\u00a0\u00a0\u00a0\"Resource\": \"arn:aws:es:us-east-1:12345:domain/domain/*\",\r \u00a0\u00a0\u00a0\u00a0\u00a0\"Condition\": {\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"IpAddress\": {\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"aws:SourceIp\": \"178.042.222.33\"\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r \u00a0\u00a0\u00a0\u00a0\u00a0}\r \u00a0\u00a0\u00a0}\r \u00a0]\r } Then we create the Stream and Stream delivery with Kinesis Firehose. \u00a0 Finally, we connect AWS Elasticsearch with Kibana, adjusting at Kibana\u2019s 'Dev Tools': \r PUT /data\r {\r \"mappings\": {\r \u00a0\"doc\": {\r \u00a0\u00a0\"properties\": {\r \u00a0\u00a0\u00a0\u00a0\"light\":{\"type\":\"text\"},\r \u00a0\u00a0\u00a0\"Temperature\": {\"type\": \"integer\"},\r \u00a0\u00a0\u00a0\"timestamp\": {\"type\": \"integer\"}\r \u00a0\u00a0}\r \u00a0}\r }\r } Note that Elasticsearch will provide a Kibana endopint. Finally, we have our Near Real-Time Dashboard of CPU Temperature. It\u2019s important to notice that we are almost in a real-time environment. The issue here is that Kibana updates the graphic each 5 seconds (or 15 if you want) but Elasticsearch has a minimum latency of 60 seconds. We can now visualize our fancy dashboard: More info and files at my GitHub - Repo 2018 (CPU Temperature \u2013 IoT Project): \u00a0 /RubensZimbres/Repo-2018 \u00a0 Bio: Rubens Zimbres is a Data Scientist, PhD in Business Administration with emphasis in Artificial Intelligence and Cellular Automata. Currently works in Telecommunications area, developing Machine Learning, Deep Learning models and IoT solutions for the financial sector and agriculture. Related: GANs in TensorFlow from the Command Line: Creating Your First GitHub Project Putting the \u201cScience\u201d Back in Data Science Machine Learning Applied to Big Data, Explained", "title_html": "<h1 id=\"title\">IoT on AWS: Machine Learning Models and Dashboards from Sensor Data</h1> ", "url": "https://www.kdnuggets.com/2018/06/zimbres-iot-aws-machine-learning-dashboard.html", "tfidf": {"tfidf": {"after": 1.02070207021, "relat": 1.23750876919, "telecommun": 18.1647597254, "googl": 11.388809182200001, "enter": 1.75813953488, "avail": 5.1865403463, "permiss": 12.560126582279999, "watch": 11.77744807122, "delta": 12.165517241400002, "here": 2.42307692308, "telemetri": 189.0, "scientist": 14.082791247780001, "pip": 135.692307692, "report": 2.7268979732, "visual": 10.45505432994, "repo": 369.209302326, "delay": 4.23247134098, "were": 1.02458857696, "clean": 6.86975335353, "integ": 92.03478260860001, "sage": 21.1962616822, "what": 1.25343439128, "touch": 5.45567010309, "elasticsearch": 6350.4, "than": 1.03278688525, "arn": 162.0, "specif": 1.8719490626099997, "function": 2.495441685, "everywher": 15.923771313900001, "universalnewlinestru": 1587.6, "thing": 2.4065484311099996, "mindset": 84.44680851060001, "python": 225.1914893616, "search": 3.2539454806299997, "broker": 31.562624254499998, "devic": 20.03280757096, "argsmessagemess": 1587.6, "rule": 5.224659938579999, "topic": 5.457545548300001, "yourbucketnumcnum": 3175.2, "static": 16.468879668, "statement": 3.42228928648, "anomali": 43.8563535912, "attach": 4.4885496183199995, "stream": 26.047579983600002, "sourceip": 1587.6, "sent": 2.32683570277, "check": 6.50655737705, "dev": 148.373831776, "flowchart": 1443.27272727, "dynam": 6.52527743527, "princip": 3.3578680202999998, "save": 5.6357827475999995, "complex": 2.34021226415, "instead": 1.59461631177, "creat": 14.9915014164, "kmod": 1587.6, "model": 8.3623913616, "globaluploadset": 1587.6, "plot": 5.383519837230001, "run": 4.6707855251399995, "subprocess": 1587.6, "test": 2.65707112971, "format": 2.53125, "light": 9.5511972085, "anyway": 23.244509516799997, "simpl": 3.3981164383599998, "look": 1.9086318826599997, "had": 2.0951501154799996, "explain": 2.60049140049, "secur": 2.16885245902, "timestamp": 3175.2000000000003, "insert": 20.083491461199998, "quit": 2.8849718335500003, "numprivatepemkey": 1587.6, "abl": 3.6417020300400003, "deep": 7.2559414990799995, "quicksight": 1587.6, "min": 33.3529411765, "the": 32.0, "open": 1.24556723678, "generat": 2.05275407292, "shadow": 15.876, "see": 3.81726376533, "protocol": 44.1818181819, "one": 1.00627495722, "monitor": 6.05723006486, "string": 8.37783641161, "updat": 11.12933753944, "lambda": 182.4827586206, "uriprefix": 1587.6, "loopcount": 3175.2, "near": 3.86308703058, "but": 2.03264835798, "success": 1.32002993265, "definit": 3.24, "need": 1.4372623574099999, "our": 7.07276507277, "classif": 8.067073170730001, "colab": 1587.6, "cost": 2.31935719503, "connect": 15.075133531120002, "doc": 34.8157894737, "possibl": 2.8347468976, "amazon": 66.2881002088, "messag": 24.8372966208, "operation": 453.6, "useastnum": 3175.2, "has": 2.0872995004, "have": 3.0446845234199995, "also": 8.11812080536, "tensorflow": 1587.6, "adjust": 7.112903225810001, "textqualifi": 1587.6, "use": 8.237110059039999, "follow": 1.04640126549, "now": 11.60780873, "aptget": 1587.6, "resourc": 2.9487369985100003, "green": 5.26130903066, "then": 7.60605023612, "code": 3.8807137619199996, "administr": 2.3898840885099997, "ipaddress": 1587.6, "desir": 3.00170164492, "good": 1.51981619759, "bucket": 54.9342560554, "publish": 5.47542679772, "comment": 3.05954904606, "note": 2.84899057874, "issu": 1.43921675279, "iot": 24535.636363589998, "opt": 12.721153846199998, "argsmod": 4762.799999999999, "start": 5.06694326976, "sourc": 1.69760479042, "everyth": 4.81967213115, "pipelin": 96.41295546570001, "not": 2.03134796238, "will": 3.67443295788, "notic": 4.36994219653, "stdoutsubprocesspip": 1587.6, "fanci": 30.5895953757, "batch": 35.6764044944, "bufsizenum": 1587.6, "area": 2.7762525137800003, "polici": 5.05927342256, "becom": 1.12492028626, "less": 1.46904783936, "solut": 9.4556283502, "kinesi": 6350.4, "maker": 9.7339055794, "quick": 8.82, "easi": 5.2937645882, "temp": 63.2509960159, "notebook": 281.3468354431, "want": 1.99698113208, "sector": 5.493425605540001, "ruben": 126.0, "graphic": 9.035856573710001, "anoth": 1.13643521832, "core": 4.623179965059999, "instal": 15.14885496184, "howev": 1.0945191313299998, "effect": 1.3963060686000002, "let": 13.94466403164, "lmsensor": 1587.6, "minimum": 6.02962400304, "def": 81.83505154640001, "minut": 3.11233091551, "github": 3175.2, "role": 1.55327267391, "kibana": 9525.599999999999, "intellig": 4.19334389857, "via": 4.595744680859999, "numcertificatepemcrt": 1587.6, "scienc": 4.63939216832, "sudo": 3175.2, "appli": 2.2972073506, "provid": 1.21552714187, "deliveri": 17.80818844644, "inspir": 2.8487349721900004, "second": 4.4523592512, "uri": 94.5, "develop": 5.977859778600001, "financi": 2.60860992442, "zimbr": 3175.2, "sensor": 86.5963636365, "get": 7.1425036554, "like": 5.745928338750001, "orang": 8.204651162789999, "without": 1.29547123623, "lot": 4.40877534018, "phd": 22.3605633803, "cellular": 31.0078125, "collect": 4.92329956584, "both": 1.05215720061, "file": 30.168171021359996, "detect": 5.41288782816, "part": 3.12992048367, "put": 1.65806788512, "twin": 6.954007884360001, "version": 2.0083491461099996, "messagejson": 1587.6, "cool": 6.8578833693300005, "return": 1.39532431007, "receiv": 1.3054847463200001, "send": 15.00212615168, "info": 37.7102137767, "text": 3.12827586207, "transfer": 2.72549356223, "and": 31.001952756029997, "from": 10.0056721497, "anaconda": 223.605633803, "back": 1.26070038911, "similar": 1.37514075357, "temperatur": 54.5567010309, "work": 1.11520089913, "project": 12.274353876750002, "num": 27.008506080270003, "awsiotpythonsdk": 6350.4, "idea": 4.1861568886, "environ": 3.43561999567, "microsoft": 24.8450704225, "safe": 5.02723242559, "domain": 9.39408284024, "for": 7.00220528007, "depend": 2.2411067193700003, "predict": 5.18484650555, "rubenszimbresreponum": 1587.6, "output": 7.676982591880001, "basicpubsubadaptedpi": 1587.6, "argsmessag": 3175.2, "action": 1.81855670103, "with": 9.010783880909997, "input": 12.2029208301, "mosquitto": 1587.6, "are": 2.05981187156, "condit": 1.92483026188, "true": 5.11139729556, "almost": 1.53584212054, "command": 13.33445321685, "current": 1.5325803649, "that": 12.047808765, "feedback": 24.652173913000002, "gan": 101.121019108, "final": 4.02025829325, "more": 1.0171706817, "agricultur": 4.45704660303, "cloud": 42.4775919732, "veri": 1.25880114177, "extract": 7.703056768560001, "intern": 1.30355530011, "domaindomain": 1587.6, "center": 1.7423178226499998, "latenc": 174.46153846200002, "artifici": 8.31639601886, "realtim": 1716.324324324, "librari": 10.7306522474, "emphasi": 6.01135933359, "dynamo": 249.3612565446, "shlex": 1587.6, "map": 4.0728578758300005, "endopint": 1587.6, "can": 5.8813069571, "messageid": 1587.6, "linux": 130.131147541, "make": 2.1525320317200003, "set": 5.93539703905, "way": 1.2190739461, "proper": 3.3388012618299996, "onli": 1.0256476516600002, "each": 1.18974820144, "access": 1.8734953976900002, "infrastructur": 6.825451418740001, "this": 7.02655538697, "necessari": 2.8421052631599997, "read": 2.3149606299200003, "time": 1.01127460348, "mess": 34.588235294099995, "primari": 2.2373167981999997, "big": 2.7400759406299997, "cloudwatch": 1587.6, "data": 57.39940450878, "left": 1.4398693996, "key": 4.5601034037, "their": 1.01547908405, "sequenc": 6.07112810707, "dynamodb": 4762.799999999999, "dashboard": 710.8656716400001, "machin": 20.121673003799998, "while": 2.0883977900599997, "pem": 1443.27272727, "bio": 42.336000000000006, "firehos": 4762.799999999999, "blue": 6.14039837556, "must": 1.9220338983099996, "thingcpuubuntu": 1587.6, "automata": 269.084745763, "basicpubsubpi": 1587.6, "line": 5.673039128119999, "fileloc": 1587.6, "servic": 3.0260173449, "delimit": 99.225, "import": 5.360796893480001, "first": 5.03808073115, "sight": 27.1965738758, "busi": 2.05541170378, "allow": 1.2716059271100002, "nice": 17.7583892617, "fun": 12.8863636364, "tool": 9.99433427762, "ubuntu": 2116.8, "interpret": 3.2150668286799995, "properti": 2.5949656750599996, "help": 1.39962972759, "type": 8.112416964760001, "numiotuseastnumamazonawscom": 1587.6, "shell": 8.32511798637, "learn": 16.259253840550002, "elast": 49.7680250784, "rootcapem": 3175.2, "certif": 19.290400972060002}, "logtfidf": {"after": 0.020490694648099998, "relat": 0.21310030165399999, "telecommun": 2.89948343825, "googl": 2.43263122258, "enter": 0.564256167492, "avail": 1.642363758867, "permiss": 3.6747601172800004, "watch": 4.10272270128, "delta": 2.49860549415, "here": 0.8850381883700001, "telemetri": 5.24174701506, "scientist": 4.6390238533199994, "pip": 4.91038987911, "report": 0.6200350180740001, "visual": 3.3078766977200003, "repo": 5.91136369821, "delay": 1.44278606382, "were": 0.024291143681099997, "clean": 1.9271282036300001, "integ": 7.658038793739999, "sage": 3.0538248303900004, "what": 0.225887296827, "touch": 1.6966554537399998, "elasticsearch": 29.479914883640003, "than": 0.0322608622182, "arn": 8.788898309339999, "specif": 0.626980167541, "function": 0.914465741594, "everywher": 2.76781304394, "universalnewlinestru": 7.369978720910001, "thing": 0.8781935346799999, "mindset": 4.43612185107, "python": 16.12262697184, "search": 1.1798682540899998, "broker": 3.4519736438, "devic": 6.444307788119999, "argsmessagemess": 7.369978720910001, "rule": 1.664332270611, "topic": 1.6969991554100001, "yourbucketnumcnum": 14.739957441820001, "static": 2.8014725192900003, "statement": 1.2303097091500002, "anomali": 3.78091960208, "attach": 1.5015296247, "stream": 7.494522015439999, "sourceip": 7.369978720910001, "sent": 0.844509277088, "check": 1.87281049562, "dev": 4.99973497944, "flowchart": 7.2746685411000005, "dynam": 1.8756834711200001, "princip": 1.21130625482, "save": 2.07197773094, "complex": 0.8502416364309999, "instead": 0.46663315041500003, "creat": 2.670921822168, "kmod": 7.369978720910001, "model": 2.9498002924440003, "globaluploadset": 7.369978720910001, "plot": 1.68334240509, "run": 1.328144926617, "subprocess": 7.369978720910001, "test": 0.977224437103, "format": 0.9287132518729999, "light": 3.2361429817499996, "anyway": 3.1460689543299996, "simpl": 1.2232212893899999, "look": 0.6463866936, "had": 0.0929560488222, "explain": 0.955700427358, "secur": 0.774198206948, "timestamp": 37.62819859344, "insert": 4.613501953380001, "quit": 1.05951513684, "numprivatepemkey": 7.369978720910001, "abl": 1.19860796495, "deep": 2.5773469396, "quicksight": 7.369978720910001, "min": 3.5071459596699994, "the": 0.0, "open": 0.219591038029, "generat": 0.719182341736, "shadow": 4.1433227087199995, "see": 0.722764756476, "protocol": 8.069103187289999, "one": 0.0062553516455, "monitor": 1.80125261058, "string": 2.1255896963900005, "updat": 3.4328749253799997, "lambda": 9.027017029380001, "uriprefix": 7.369978720910001, "loopcount": 14.739957441820001, "near": 0.758562972102, "but": 0.0323847441438, "success": 0.27765441259199997, "definit": 1.1755733298, "need": 0.362740163442, "our": 2.5729176425460003, "classif": 2.08779073629, "colab": 7.369978720910001, "cost": 0.84129007618, "connect": 5.068840469456, "doc": 3.55007100439, "possibl": 0.697610949782, "amazon": 7.00172643298, "messag": 8.0145425351, "operation": 6.117215752409999, "useastnum": 14.739957441820001, "has": 0.0854478897096, "have": 0.0443550070236, "also": 0.1172572624, "tensorflow": 7.369978720910001, "adjust": 1.9619104904, "textqualifi": 7.369978720910001, "use": 0.2336641578528, "follow": 0.045356911094199995, "now": 1.4909294502100001, "aptget": 7.369978720910001, "resourc": 1.08137694258, "green": 1.9344653607420002, "then": 0.5812370566163, "code": 1.35601909597, "administr": 0.8712448662379999, "ipaddress": 7.369978720910001, "desir": 1.0991793428399999, "good": 0.418589404907, "bucket": 4.00613712579, "publish": 1.255903461868, "comment": 1.11826753454, "note": 0.707635136166, "issu": 0.364099043934, "iot": 123.6693651987, "opt": 2.54326626497, "argsmod": 22.10993616273, "start": 0.945773477164, "sourc": 0.529218310751, "everyth": 1.57270590317, "pipelin": 10.41008489016, "not": 0.031104826015, "will": 0.6083596047450001, "notic": 1.47474978168, "stdoutsubprocesspip": 7.369978720910001, "fanci": 3.42065993074, "batch": 3.5744895317400003, "bufsizenum": 7.369978720910001, "area": 0.655909642244, "polici": 1.8561514001, "becom": 0.11771217648900001, "less": 0.3846144626, "solut": 3.10692595254, "kinesi": 29.479914883640003, "maker": 2.27561521128, "quick": 3.162910035596, "easi": 1.6665296351499999, "temp": 4.14711087477, "notebook": 25.855746343, "want": 0.6916366062549999, "sector": 1.7035520328, "ruben": 8.28626945278, "graphic": 2.20120072572, "anoth": 0.127896361652, "core": 1.53108277245, "instal": 5.3265223516, "howev": 0.0903151173475, "effect": 0.333830227158, "let": 4.995210269119999, "lmsensor": 7.369978720910001, "minimum": 1.79668465441, "def": 4.40470565484, "minut": 1.1353719359799999, "github": 14.739957441820001, "role": 0.44036410757399996, "kibana": 44.21987232546, "intellig": 1.43349848213, "via": 1.663967250828, "numcertificatepemcrt": 7.369978720910001, "scienc": 1.682872357782, "sudo": 14.739957441820001, "appli": 0.8316941898119999, "provid": 0.19517784432500002, "deliveri": 4.37302239208, "inspir": 1.04687502633, "second": 0.42855905351999996, "uri": 4.5485998345, "develop": 0.8931234745650001, "financi": 0.958817483446, "zimbr": 14.739957441820001, "sensor": 10.08793660704, "get": 2.319076023128, "like": 0.6952678827250001, "orang": 2.1047012084400003, "without": 0.258874517941, "lot": 1.4835969502500002, "phd": 3.10729884387, "cellular": 3.43423918886, "collect": 1.48609998156, "both": 0.050842533389300004, "file": 10.61876709784, "detect": 1.68878274493, "part": 0.12718593294840003, "put": 0.505652999854, "twin": 1.9393181673700002, "version": 0.697313064259, "messagejson": 7.369978720910001, "cool": 1.9253988473800001, "return": 0.333126868592, "receiv": 0.266574424922, "send": 5.28759029352, "info": 3.6299309802199997, "text": 1.14048200999, "transfer": 1.00264953547, "and": 0.0019526944039716, "from": 0.00567054168866, "anaconda": 5.40988393686, "back": 0.23166743089699998, "similar": 0.318556092114, "temperatur": 16.966554537399997, "work": 0.109034567273, "project": 3.931213201349, "num": 0.008504740675719002, "awsiotpythonsdk": 29.479914883640003, "idea": 1.47727184424, "environ": 1.2341974030299998, "microsoft": 3.21265935953, "safe": 1.61486961909, "domain": 2.24008000599, "for": 0.0022049327677790003, "depend": 0.806969815, "predict": 1.6457402376899999, "rubenszimbresreponum": 7.369978720910001, "output": 2.03822657827, "basicpubsubadaptedpi": 7.369978720910001, "argsmessag": 14.739957441820001, "action": 0.598043165069, "with": 0.01077742542051, "input": 2.50167533539, "mosquitto": 7.369978720910001, "are": 0.0589349471654, "condit": 0.654837788206, "true": 1.876651259268, "almost": 0.42907884333400004, "command": 4.904566203750001, "current": 0.42695282784500005, "that": 0.04771378055568, "feedback": 3.2048650877999996, "gan": 4.61631800855, "final": 0.878201591844, "more": 0.017024931599999998, "agricultur": 1.4944863500499999, "cloud": 9.45072931232, "veri": 0.230159793238, "extract": 2.04161723301, "intern": 0.265095377816, "domaindomain": 7.369978720910001, "center": 0.555216308776, "latenc": 5.16170430739, "artifici": 2.11822899018, "realtim": 24.246583605039998, "librari": 3.947239923772, "emphasi": 1.7936509016099997, "dynamo": 13.260871157579999, "shlex": 7.369978720910001, "map": 1.40434493384, "endopint": 7.369978720910001, "can": 0.8117054819699999, "messageid": 7.369978720910001, "linux": 8.35079117722, "make": 0.14699531564579998, "set": 0.857480056445, "way": 0.19809150993500002, "proper": 1.2056118389200001, "onli": 0.025324268329099998, "each": 0.173741689304, "access": 0.627805882716, "infrastructur": 1.9206584808200002, "this": 0.026505143367499998, "necessari": 1.0445450673999999, "read": 0.83939268088, "time": 0.0112115188626, "mess": 3.54351360384, "primari": 0.805277289914, "big": 1.00798563557, "cloudwatch": 7.369978720910001, "data": 20.6859499416, "left": 0.364552414753, "key": 1.64839623792, "their": 0.015360505122700001, "sequenc": 1.8035444374, "dynamodb": 22.10993616273, "dashboard": 28.648344083700003, "machin": 6.9617979031, "while": 0.08649996758760002, "pem": 7.2746685411000005, "bio": 3.7456377879300002, "firehos": 22.10993616273, "blue": 2.2434848830200003, "must": 0.653383947388, "thingcpuubuntu": 7.369978720910001, "automata": 5.59502637, "basicpubsubpi": 7.369978720910001, "line": 1.397722457808, "fileloc": 7.369978720910001, "servic": 0.8282003334900001, "delimit": 4.59738999867, "import": 1.171273108264, "first": 0.0379364490608, "sight": 7.6671865752, "busi": 0.720476170355, "allow": 0.24028061118900002, "nice": 2.8768580387299996, "fun": 2.5561696698099996, "tool": 3.21774235926, "ubuntu": 25.08546572896, "interpret": 1.1678481440000001, "properti": 0.953573289192, "help": 0.336207721344, "type": 2.828405941548, "numiotuseastnumamazonawscom": 7.369978720910001, "shell": 2.1192772083, "learn": 5.899264453215, "elast": 3.90737271112, "rootcapem": 14.739957441820001, "certif": 4.53292086534}, "logidf": {"after": 0.020490694648099998, "relat": 0.21310030165399999, "telecommun": 2.89948343825, "googl": 2.43263122258, "enter": 0.564256167492, "avail": 0.547454586289, "permiss": 1.8373800586400002, "watch": 1.36757423376, "delta": 2.49860549415, "here": 0.8850381883700001, "telemetri": 5.24174701506, "scientist": 1.54634128444, "pip": 4.91038987911, "report": 0.31001750903700004, "visual": 1.6539383488600001, "repo": 5.91136369821, "delay": 1.44278606382, "were": 0.024291143681099997, "clean": 1.9271282036300001, "integ": 3.8290193968699997, "sage": 3.0538248303900004, "what": 0.225887296827, "touch": 1.6966554537399998, "elasticsearch": 7.369978720910001, "than": 0.0322608622182, "arn": 4.394449154669999, "specif": 0.626980167541, "function": 0.914465741594, "everywher": 2.76781304394, "universalnewlinestru": 7.369978720910001, "thing": 0.8781935346799999, "mindset": 4.43612185107, "python": 4.03065674296, "search": 1.1798682540899998, "broker": 3.4519736438, "devic": 1.6110769470299997, "argsmessagemess": 7.369978720910001, "rule": 0.554777423537, "topic": 1.6969991554100001, "yourbucketnumcnum": 7.369978720910001, "static": 2.8014725192900003, "statement": 1.2303097091500002, "anomali": 3.78091960208, "attach": 1.5015296247, "stream": 1.8736305038599999, "sourceip": 7.369978720910001, "sent": 0.844509277088, "check": 1.87281049562, "dev": 4.99973497944, "flowchart": 7.2746685411000005, "dynam": 1.8756834711200001, "princip": 1.21130625482, "save": 1.03598886547, "complex": 0.8502416364309999, "instead": 0.46663315041500003, "creat": 0.222576818514, "kmod": 7.369978720910001, "model": 0.7374500731110001, "globaluploadset": 7.369978720910001, "plot": 1.68334240509, "run": 0.442714975539, "subprocess": 7.369978720910001, "test": 0.977224437103, "format": 0.9287132518729999, "light": 0.64722859635, "anyway": 3.1460689543299996, "simpl": 1.2232212893899999, "look": 0.6463866936, "had": 0.0464780244111, "explain": 0.955700427358, "secur": 0.774198206948, "timestamp": 6.27136643224, "insert": 2.3067509766900005, "quit": 1.05951513684, "numprivatepemkey": 7.369978720910001, "abl": 0.599303982475, "deep": 1.2886734698, "quicksight": 7.369978720910001, "min": 3.5071459596699994, "the": 0.0, "open": 0.219591038029, "generat": 0.719182341736, "shadow": 2.0716613543599998, "see": 0.240921585492, "protocol": 2.6897010624299997, "one": 0.0062553516455, "monitor": 1.80125261058, "string": 2.1255896963900005, "updat": 1.7164374626899999, "lambda": 4.513508514690001, "uriprefix": 7.369978720910001, "loopcount": 7.369978720910001, "near": 0.252854324034, "but": 0.0161923720719, "success": 0.27765441259199997, "definit": 1.1755733298, "need": 0.362740163442, "our": 0.8576392141820001, "classif": 2.08779073629, "colab": 7.369978720910001, "cost": 0.84129007618, "connect": 0.633605058682, "doc": 3.55007100439, "possibl": 0.348805474891, "amazon": 3.50086321649, "messag": 1.6029085070200002, "operation": 6.117215752409999, "useastnum": 7.369978720910001, "has": 0.0427239448548, "have": 0.0147850023412, "also": 0.0146571578, "tensorflow": 7.369978720910001, "adjust": 1.9619104904, "textqualifi": 7.369978720910001, "use": 0.0292080197316, "follow": 0.045356911094199995, "now": 0.149092945021, "aptget": 7.369978720910001, "resourc": 1.08137694258, "green": 0.9672326803710001, "then": 0.08303386523089999, "code": 1.35601909597, "administr": 0.8712448662379999, "ipaddress": 7.369978720910001, "desir": 1.0991793428399999, "good": 0.418589404907, "bucket": 4.00613712579, "publish": 0.313975865467, "comment": 1.11826753454, "note": 0.353817568083, "issu": 0.364099043934, "iot": 7.2746685411000005, "opt": 2.54326626497, "argsmod": 7.369978720910001, "start": 0.236443369291, "sourc": 0.529218310751, "everyth": 1.57270590317, "pipelin": 3.47002829672, "not": 0.0155524130075, "will": 0.202786534915, "notic": 1.47474978168, "stdoutsubprocesspip": 7.369978720910001, "fanci": 3.42065993074, "batch": 3.5744895317400003, "bufsizenum": 7.369978720910001, "area": 0.327954821122, "polici": 0.92807570005, "becom": 0.11771217648900001, "less": 0.3846144626, "solut": 1.55346297627, "kinesi": 7.369978720910001, "maker": 2.27561521128, "quick": 0.790727508899, "easi": 1.6665296351499999, "temp": 4.14711087477, "notebook": 3.693678049, "want": 0.6916366062549999, "sector": 1.7035520328, "ruben": 4.14313472639, "graphic": 2.20120072572, "anoth": 0.127896361652, "core": 1.53108277245, "instal": 1.3316305879, "howev": 0.0903151173475, "effect": 0.333830227158, "let": 1.2488025672799998, "lmsensor": 7.369978720910001, "minimum": 1.79668465441, "def": 4.40470565484, "minut": 1.1353719359799999, "github": 7.369978720910001, "role": 0.44036410757399996, "kibana": 7.369978720910001, "intellig": 1.43349848213, "via": 0.831983625414, "numcertificatepemcrt": 7.369978720910001, "scienc": 0.841436178891, "sudo": 7.369978720910001, "appli": 0.8316941898119999, "provid": 0.19517784432500002, "deliveri": 2.18651119604, "inspir": 1.04687502633, "second": 0.10713976337999999, "uri": 4.5485998345, "develop": 0.178624694913, "financi": 0.958817483446, "zimbr": 7.369978720910001, "sensor": 3.36264553568, "get": 0.579769005782, "like": 0.139053576545, "orang": 2.1047012084400003, "without": 0.258874517941, "lot": 1.4835969502500002, "phd": 3.10729884387, "cellular": 3.43423918886, "collect": 0.49536666052, "both": 0.050842533389300004, "file": 1.32734588723, "detect": 1.68878274493, "part": 0.04239531098280001, "put": 0.505652999854, "twin": 1.9393181673700002, "version": 0.697313064259, "messagejson": 7.369978720910001, "cool": 1.9253988473800001, "return": 0.333126868592, "receiv": 0.266574424922, "send": 1.32189757338, "info": 3.6299309802199997, "text": 1.14048200999, "transfer": 1.00264953547, "and": 6.29901420636e-05, "from": 0.000567054168866, "anaconda": 5.40988393686, "back": 0.23166743089699998, "similar": 0.318556092114, "temperatur": 1.6966554537399998, "work": 0.109034567273, "project": 0.561601885907, "num": 0.00031499039539700004, "awsiotpythonsdk": 7.369978720910001, "idea": 0.73863592212, "environ": 1.2341974030299998, "microsoft": 3.21265935953, "safe": 1.61486961909, "domain": 2.24008000599, "for": 0.00031499039539700004, "depend": 0.806969815, "predict": 1.6457402376899999, "rubenszimbresreponum": 7.369978720910001, "output": 2.03822657827, "basicpubsubadaptedpi": 7.369978720910001, "argsmessag": 7.369978720910001, "action": 0.598043165069, "with": 0.00119749171339, "input": 2.50167533539, "mosquitto": 7.369978720910001, "are": 0.0294674735827, "condit": 0.654837788206, "true": 0.938325629634, "almost": 0.42907884333400004, "command": 0.9809132407500001, "current": 0.42695282784500005, "that": 0.00397614837964, "feedback": 3.2048650877999996, "gan": 4.61631800855, "final": 0.292733863948, "more": 0.017024931599999998, "agricultur": 1.4944863500499999, "cloud": 2.36268232808, "veri": 0.230159793238, "extract": 2.04161723301, "intern": 0.265095377816, "domaindomain": 7.369978720910001, "center": 0.555216308776, "latenc": 5.16170430739, "artifici": 2.11822899018, "realtim": 6.0616459012599995, "librari": 0.986809980943, "emphasi": 1.7936509016099997, "dynamo": 4.42029038586, "shlex": 7.369978720910001, "map": 1.40434493384, "endopint": 7.369978720910001, "can": 0.162341096394, "messageid": 7.369978720910001, "linux": 4.17539558861, "make": 0.07349765782289999, "set": 0.171496011289, "way": 0.19809150993500002, "proper": 1.2056118389200001, "onli": 0.025324268329099998, "each": 0.173741689304, "access": 0.627805882716, "infrastructur": 1.9206584808200002, "this": 0.0037864490525, "necessari": 1.0445450673999999, "read": 0.83939268088, "time": 0.0112115188626, "mess": 3.54351360384, "primari": 0.805277289914, "big": 1.00798563557, "cloudwatch": 7.369978720910001, "data": 1.2168205848, "left": 0.364552414753, "key": 0.82419811896, "their": 0.015360505122700001, "sequenc": 1.8035444374, "dynamodb": 7.369978720910001, "dashboard": 4.77472401395, "machin": 1.39235958062, "while": 0.04324998379380001, "pem": 7.2746685411000005, "bio": 3.7456377879300002, "firehos": 7.369978720910001, "blue": 1.1217424415100001, "must": 0.653383947388, "thingcpuubuntu": 7.369978720910001, "automata": 5.59502637, "basicpubsubpi": 7.369978720910001, "line": 0.349430614452, "fileloc": 7.369978720910001, "servic": 0.41410016674500005, "delimit": 4.59738999867, "import": 0.292818277066, "first": 0.0075872898121599995, "sight": 1.9167966438, "busi": 0.720476170355, "allow": 0.24028061118900002, "nice": 2.8768580387299996, "fun": 2.5561696698099996, "tool": 1.60887117963, "ubuntu": 6.27136643224, "interpret": 1.1678481440000001, "properti": 0.953573289192, "help": 0.336207721344, "type": 0.707101485387, "numiotuseastnumamazonawscom": 7.369978720910001, "shell": 2.1192772083, "learn": 0.842752064745, "elast": 3.90737271112, "rootcapem": 7.369978720910001, "certif": 2.26646043267}, "freq": {"after": 1, "relat": 1, "telecommun": 1, "googl": 1, "enter": 1, "avail": 3, "permiss": 2, "watch": 3, "delta": 1, "here": 1, "telemetri": 1, "scientist": 3, "pip": 1, "report": 2, "visual": 2, "repo": 1, "delay": 1, "were": 1, "clean": 1, "integ": 2, "sage": 1, "what": 1, "touch": 1, "elasticsearch": 4, "than": 1, "arn": 2, "specif": 1, "function": 1, "everywher": 1, "universalnewlinestru": 1, "thing": 1, "mindset": 1, "python": 4, "search": 1, "broker": 1, "devic": 4, "argsmessagemess": 1, "rule": 3, "topic": 1, "yourbucketnumcnum": 2, "static": 1, "statement": 1, "anomali": 1, "attach": 1, "stream": 4, "sourceip": 1, "sent": 1, "check": 1, "dev": 1, "flowchart": 1, "dynam": 1, "princip": 1, "save": 2, "complex": 1, "instead": 1, "creat": 12, "kmod": 1, "model": 4, "globaluploadset": 1, "plot": 1, "run": 3, "subprocess": 1, "test": 1, "format": 1, "light": 5, "anyway": 1, "simpl": 1, "look": 1, "had": 2, "explain": 1, "secur": 1, "timestamp": 6, "insert": 2, "quit": 1, "numprivatepemkey": 1, "abl": 2, "deep": 2, "quicksight": 1, "min": 1, "the": 32, "open": 1, "generat": 1, "shadow": 2, "see": 3, "protocol": 3, "one": 1, "monitor": 1, "string": 1, "updat": 2, "lambda": 2, "uriprefix": 1, "loopcount": 2, "near": 3, "but": 2, "success": 1, "definit": 1, "need": 1, "our": 3, "classif": 1, "colab": 1, "cost": 1, "connect": 8, "doc": 1, "possibl": 2, "amazon": 2, "messag": 5, "operation": 1, "useastnum": 2, "has": 2, "have": 3, "also": 8, "tensorflow": 1, "adjust": 1, "textqualifi": 1, "use": 8, "follow": 1, "now": 10, "aptget": 1, "resourc": 1, "green": 2, "then": 7, "code": 1, "administr": 1, "ipaddress": 1, "desir": 1, "good": 1, "bucket": 1, "publish": 4, "comment": 1, "note": 2, "issu": 1, "iot": 17, "opt": 1, "argsmod": 3, "start": 4, "sourc": 1, "everyth": 1, "pipelin": 3, "not": 2, "will": 3, "notic": 1, "stdoutsubprocesspip": 1, "fanci": 1, "batch": 1, "bufsizenum": 1, "area": 2, "polici": 2, "becom": 1, "less": 1, "solut": 2, "kinesi": 4, "maker": 1, "quick": 4, "easi": 1, "temp": 1, "notebook": 7, "want": 1, "sector": 1, "ruben": 2, "graphic": 1, "anoth": 1, "core": 1, "instal": 4, "howev": 1, "effect": 1, "let": 4, "lmsensor": 1, "minimum": 1, "def": 1, "minut": 1, "github": 2, "role": 1, "kibana": 6, "intellig": 1, "via": 2, "numcertificatepemcrt": 1, "scienc": 2, "sudo": 2, "appli": 1, "provid": 1, "deliveri": 2, "inspir": 1, "second": 4, "uri": 1, "develop": 5, "financi": 1, "zimbr": 2, "sensor": 3, "get": 4, "like": 5, "orang": 1, "without": 1, "lot": 1, "phd": 1, "cellular": 1, "collect": 3, "both": 1, "file": 8, "detect": 1, "part": 3, "put": 1, "twin": 1, "version": 1, "messagejson": 1, "cool": 1, "return": 1, "receiv": 1, "send": 4, "info": 1, "text": 1, "transfer": 1, "and": 31, "from": 10, "anaconda": 1, "back": 1, "similar": 1, "temperatur": 10, "work": 1, "project": 7, "num": 27, "awsiotpythonsdk": 4, "idea": 2, "environ": 1, "microsoft": 1, "safe": 1, "domain": 1, "for": 7, "depend": 1, "predict": 1, "rubenszimbresreponum": 1, "output": 1, "basicpubsubadaptedpi": 1, "argsmessag": 2, "action": 1, "with": 9, "input": 1, "mosquitto": 1, "are": 2, "condit": 1, "true": 2, "almost": 1, "command": 5, "current": 1, "that": 12, "feedback": 1, "gan": 1, "final": 3, "more": 1, "agricultur": 1, "cloud": 4, "veri": 1, "extract": 1, "intern": 1, "domaindomain": 1, "center": 1, "latenc": 1, "artifici": 1, "realtim": 4, "librari": 4, "emphasi": 1, "dynamo": 3, "shlex": 1, "map": 1, "endopint": 1, "can": 5, "messageid": 1, "linux": 2, "make": 2, "set": 5, "way": 1, "proper": 1, "onli": 1, "each": 1, "access": 1, "infrastructur": 1, "this": 7, "necessari": 1, "read": 1, "time": 1, "mess": 1, "primari": 1, "big": 1, "cloudwatch": 1, "data": 17, "left": 1, "key": 2, "their": 1, "sequenc": 1, "dynamodb": 3, "dashboard": 6, "machin": 5, "while": 2, "pem": 1, "bio": 1, "firehos": 3, "blue": 2, "must": 1, "thingcpuubuntu": 1, "automata": 1, "basicpubsubpi": 1, "line": 4, "fileloc": 1, "servic": 2, "delimit": 1, "import": 4, "first": 5, "sight": 4, "busi": 1, "allow": 1, "nice": 1, "fun": 1, "tool": 2, "ubuntu": 4, "interpret": 1, "properti": 1, "help": 1, "type": 4, "numiotuseastnumamazonawscom": 1, "shell": 1, "learn": 7, "elast": 1, "rootcapem": 2, "certif": 2}, "idf": {"after": 1.02070207021, "relat": 1.23750876919, "telecommun": 18.1647597254, "googl": 11.388809182200001, "enter": 1.75813953488, "avail": 1.7288467821, "permiss": 6.280063291139999, "watch": 3.92581602374, "delta": 12.165517241400002, "here": 2.42307692308, "telemetri": 189.0, "scientist": 4.69426374926, "pip": 135.692307692, "report": 1.3634489866, "visual": 5.22752716497, "repo": 369.209302326, "delay": 4.23247134098, "were": 1.02458857696, "clean": 6.86975335353, "integ": 46.017391304300006, "sage": 21.1962616822, "what": 1.25343439128, "touch": 5.45567010309, "elasticsearch": 1587.6, "than": 1.03278688525, "arn": 81.0, "specif": 1.8719490626099997, "function": 2.495441685, "everywher": 15.923771313900001, "universalnewlinestru": 1587.6, "thing": 2.4065484311099996, "mindset": 84.44680851060001, "python": 56.2978723404, "search": 3.2539454806299997, "broker": 31.562624254499998, "devic": 5.00820189274, "argsmessagemess": 1587.6, "rule": 1.7415533128599998, "topic": 5.457545548300001, "yourbucketnumcnum": 1587.6, "static": 16.468879668, "statement": 3.42228928648, "anomali": 43.8563535912, "attach": 4.4885496183199995, "stream": 6.5118949959000005, "sourceip": 1587.6, "sent": 2.32683570277, "check": 6.50655737705, "dev": 148.373831776, "flowchart": 1443.27272727, "dynam": 6.52527743527, "princip": 3.3578680202999998, "save": 2.8178913737999998, "complex": 2.34021226415, "instead": 1.59461631177, "creat": 1.2492917847, "kmod": 1587.6, "model": 2.0905978404, "globaluploadset": 1587.6, "plot": 5.383519837230001, "run": 1.55692850838, "subprocess": 1587.6, "test": 2.65707112971, "format": 2.53125, "light": 1.9102394417, "anyway": 23.244509516799997, "simpl": 3.3981164383599998, "look": 1.9086318826599997, "had": 1.0475750577399998, "explain": 2.60049140049, "secur": 2.16885245902, "timestamp": 529.2, "insert": 10.041745730599999, "quit": 2.8849718335500003, "numprivatepemkey": 1587.6, "abl": 1.8208510150200001, "deep": 3.6279707495399998, "quicksight": 1587.6, "min": 33.3529411765, "the": 1.0, "open": 1.24556723678, "generat": 2.05275407292, "shadow": 7.938, "see": 1.27242125511, "protocol": 14.7272727273, "one": 1.00627495722, "monitor": 6.05723006486, "string": 8.37783641161, "updat": 5.56466876972, "lambda": 91.2413793103, "uriprefix": 1587.6, "loopcount": 1587.6, "near": 1.28769567686, "but": 1.01632417899, "success": 1.32002993265, "definit": 3.24, "need": 1.4372623574099999, "our": 2.35758835759, "classif": 8.067073170730001, "colab": 1587.6, "cost": 2.31935719503, "connect": 1.8843916913900003, "doc": 34.8157894737, "possibl": 1.4173734488, "amazon": 33.1440501044, "messag": 4.96745932416, "operation": 453.6, "useastnum": 1587.6, "has": 1.0436497502, "have": 1.0148948411399998, "also": 1.01476510067, "tensorflow": 1587.6, "adjust": 7.112903225810001, "textqualifi": 1587.6, "use": 1.0296387573799999, "follow": 1.04640126549, "now": 1.160780873, "aptget": 1587.6, "resourc": 2.9487369985100003, "green": 2.63065451533, "then": 1.08657860516, "code": 3.8807137619199996, "administr": 2.3898840885099997, "ipaddress": 1587.6, "desir": 3.00170164492, "good": 1.51981619759, "bucket": 54.9342560554, "publish": 1.36885669943, "comment": 3.05954904606, "note": 1.42449528937, "issu": 1.43921675279, "iot": 1443.27272727, "opt": 12.721153846199998, "argsmod": 1587.6, "start": 1.26673581744, "sourc": 1.69760479042, "everyth": 4.81967213115, "pipelin": 32.1376518219, "not": 1.01567398119, "will": 1.22481098596, "notic": 4.36994219653, "stdoutsubprocesspip": 1587.6, "fanci": 30.5895953757, "batch": 35.6764044944, "bufsizenum": 1587.6, "area": 1.3881262568900001, "polici": 2.52963671128, "becom": 1.12492028626, "less": 1.46904783936, "solut": 4.7278141751, "kinesi": 1587.6, "maker": 9.7339055794, "quick": 2.205, "easi": 5.2937645882, "temp": 63.2509960159, "notebook": 40.1924050633, "want": 1.99698113208, "sector": 5.493425605540001, "ruben": 63.0, "graphic": 9.035856573710001, "anoth": 1.13643521832, "core": 4.623179965059999, "instal": 3.78721374046, "howev": 1.0945191313299998, "effect": 1.3963060686000002, "let": 3.48616600791, "lmsensor": 1587.6, "minimum": 6.02962400304, "def": 81.83505154640001, "minut": 3.11233091551, "github": 1587.6, "role": 1.55327267391, "kibana": 1587.6, "intellig": 4.19334389857, "via": 2.2978723404299997, "numcertificatepemcrt": 1587.6, "scienc": 2.31969608416, "sudo": 1587.6, "appli": 2.2972073506, "provid": 1.21552714187, "deliveri": 8.90409422322, "inspir": 2.8487349721900004, "second": 1.1130898128, "uri": 94.5, "develop": 1.1955719557200002, "financi": 2.60860992442, "zimbr": 1587.6, "sensor": 28.8654545455, "get": 1.78562591385, "like": 1.14918566775, "orang": 8.204651162789999, "without": 1.29547123623, "lot": 4.40877534018, "phd": 22.3605633803, "cellular": 31.0078125, "collect": 1.64109985528, "both": 1.05215720061, "file": 3.7710213776699995, "detect": 5.41288782816, "part": 1.04330682789, "put": 1.65806788512, "twin": 6.954007884360001, "version": 2.0083491461099996, "messagejson": 1587.6, "cool": 6.8578833693300005, "return": 1.39532431007, "receiv": 1.3054847463200001, "send": 3.75053153792, "info": 37.7102137767, "text": 3.12827586207, "transfer": 2.72549356223, "and": 1.00006299213, "from": 1.00056721497, "anaconda": 223.605633803, "back": 1.26070038911, "similar": 1.37514075357, "temperatur": 5.45567010309, "work": 1.11520089913, "project": 1.7534791252500002, "num": 1.00031504001, "awsiotpythonsdk": 1587.6, "idea": 2.0930784443, "environ": 3.43561999567, "microsoft": 24.8450704225, "safe": 5.02723242559, "domain": 9.39408284024, "for": 1.00031504001, "depend": 2.2411067193700003, "predict": 5.18484650555, "rubenszimbresreponum": 1587.6, "output": 7.676982591880001, "basicpubsubadaptedpi": 1587.6, "argsmessag": 1587.6, "action": 1.81855670103, "with": 1.0011982089899998, "input": 12.2029208301, "mosquitto": 1587.6, "are": 1.02990593578, "condit": 1.92483026188, "true": 2.55569864778, "almost": 1.53584212054, "command": 2.66689064337, "current": 1.5325803649, "that": 1.00398406375, "feedback": 24.652173913000002, "gan": 101.121019108, "final": 1.34008609775, "more": 1.0171706817, "agricultur": 4.45704660303, "cloud": 10.6193979933, "veri": 1.25880114177, "extract": 7.703056768560001, "intern": 1.30355530011, "domaindomain": 1587.6, "center": 1.7423178226499998, "latenc": 174.46153846200002, "artifici": 8.31639601886, "realtim": 429.081081081, "librari": 2.68266306185, "emphasi": 6.01135933359, "dynamo": 83.1204188482, "shlex": 1587.6, "map": 4.0728578758300005, "endopint": 1587.6, "can": 1.17626139142, "messageid": 1587.6, "linux": 65.0655737705, "make": 1.0762660158600001, "set": 1.18707940781, "way": 1.2190739461, "proper": 3.3388012618299996, "onli": 1.0256476516600002, "each": 1.18974820144, "access": 1.8734953976900002, "infrastructur": 6.825451418740001, "this": 1.00379362671, "necessari": 2.8421052631599997, "read": 2.3149606299200003, "time": 1.01127460348, "mess": 34.588235294099995, "primari": 2.2373167981999997, "big": 2.7400759406299997, "cloudwatch": 1587.6, "data": 3.37643555934, "left": 1.4398693996, "key": 2.28005170185, "their": 1.01547908405, "sequenc": 6.07112810707, "dynamodb": 1587.6, "dashboard": 118.47761194, "machin": 4.02433460076, "while": 1.0441988950299999, "pem": 1443.27272727, "bio": 42.336000000000006, "firehos": 1587.6, "blue": 3.07019918778, "must": 1.9220338983099996, "thingcpuubuntu": 1587.6, "automata": 269.084745763, "basicpubsubpi": 1587.6, "line": 1.4182597820299998, "fileloc": 1587.6, "servic": 1.51300867245, "delimit": 99.225, "import": 1.3401992233700002, "first": 1.00761614623, "sight": 6.79914346895, "busi": 2.05541170378, "allow": 1.2716059271100002, "nice": 17.7583892617, "fun": 12.8863636364, "tool": 4.99716713881, "ubuntu": 529.2, "interpret": 3.2150668286799995, "properti": 2.5949656750599996, "help": 1.39962972759, "type": 2.0281042411900003, "numiotuseastnumamazonawscom": 1587.6, "shell": 8.32511798637, "learn": 2.32275054865, "elast": 49.7680250784, "rootcapem": 1587.6, "certif": 9.645200486030001}}, "html": "<!DOCTYPE html>\n\n<html lang=\"en-US\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head profile=\"http://gmpg.org/xfn/11\">\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n<title>  IoT on AWS: Machine Learning Models and Dashboards from Sensor Data</title>\n<link href=\"/wp-content/themes/kdn17/images/favicon.ico\" rel=\"shortcut icon\"/>\n<link href=\"/wp-content/themes/kdn17/style.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"/wp-content/themes/kdn17/js/jquery-1.9.1.min.js\" type=\"text/javascript\"></script>\n<script src=\"/aps/kda_all.js\" type=\"text/javascript\"></script>\n<link href=\"/feed/\" rel=\"alternate\" title=\"KDnuggets: Analytics, Big Data, Data Mining and Data Science Feed\" type=\"application/rss+xml\"/>\n<link href=\"//s.w.org\" rel=\"dns-prefetch\"/>\n<link href=\"https://www.kdnuggets.com/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/comments/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/2018/06/zimbres-iot-aws-machine-learning-dashboard.html/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb IoT on AWS: Machine Learning Models and Dashboards from Sensor Data Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-json/\" rel=\"https://api.w.org/\"/>\n<link href=\"https://www.kdnuggets.com/xmlrpc.php?rsd\" rel=\"EditURI\" title=\"RSD\" type=\"application/rsd+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-includes/wlwmanifest.xml\" rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\"/>\n<link href=\"https://www.kdnuggets.com/2018/06/pearl-gray-statistics-causality-claims-difficult-swallow.html\" rel=\"prev\" title=\"Statistics, Causality, and What Claims are Difficult to Swallow: Judea Pearl debates Kevin Gray\"/>\n<link href=\"https://www.kdnuggets.com/jobs/18/06-15-apple-software-engineer-applied-machine-learning.html\" rel=\"next\" title=\"Apple: Sr Software Engineer \u2013 Applied Machine Learning\"/>\n<meta content=\"WordPress 4.9.10\" name=\"generator\">\n<link href=\"https://www.kdnuggets.com/2018/06/zimbres-iot-aws-machine-learning-dashboard.html\" rel=\"canonical\"/>\n<link href=\"https://www.kdnuggets.com/?p=81986\" rel=\"shortlink\"/>\n<link href=\"https://www.kdnuggets.com/2018/06/zimbres-iot-aws-machine-learning-dashboard.html\" rel=\"canonical\"/>\n<!-- BEGIN ExactMetrics v5.3.7 Universal Analytics - https://exactmetrics.com/ -->\n<script>\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-361129-1', 'auto');\n  ga('send', 'pageview');\n</script>\n<!-- END ExactMetrics Universal Analytics -->\n</meta></head>\n<body class=\"post-template-default single single-post postid-81986 single-format-standard\">\n<div class=\"main_wrapper\"><!-- publ: 15-Jun, 2018  -->\n<div id=\"wrapper\">\n<div id=\"header\">\n<div id=\"header_log\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<h1>KDnuggets</h1>\n<div class=\"text-container\">\n            \u00a0\u00a0<a href=\"/news/subscribe.html\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a> \u00a0|\n <a href=\"https://twitter.com/kdnuggets\" target=\"_blank\"><img alt=\"Twitter\" height=\"48\" src=\"/images/tw_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n <a href=\"https://www.facebook.com/kdnuggets\" target=\"_blank\"><img alt=\"Facebook\" height=\"48\" src=\"/images/fb_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n<a href=\"https://www.linkedin.com/groups/54257/\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"48\" src=\"/images/in_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \n\u00a0|\u00a0 <a href=\"/contact.html\"><b>Contact</b></a>\n</div>\n</div>\n<div class=\"search\">\n<form action=\"/\" id=\"searchform\" method=\"get\">\n<input id=\"s\" name=\"s\" placeholder=\"search KDnuggets\" type=\"text\" value=\"\"/>\n<input type=\"submit\" value=\"Search\"/></form>\n</div>\n<div href=\"#\" id=\"pull\">\n<img class=\"menu\" src=\"/images/menu-30.png\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<img class=\"search-icon\" src=\"/images/search-icon.png\">\n</img></img></div>\n<div id=\"pull-menu\">\n<div class=\"navigation\"><ul class=\"menu\" id=\"menu-menu\"><li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-1070\" id=\"menu-item-1070\"><a href=\"/software/index.html\" title=\"Data Science Software\">SOFTWARE</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13756\" id=\"menu-item-13756\"><a href=\"/news/index.html\" title=\"News\">News/Blog</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-46286\" id=\"menu-item-46286\"><a href=\"/news/top-stories.html\">Top stories</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-42152\" id=\"menu-item-42152\"><a href=\"https://www.kdnuggets.com/opinions/index.html\" title=\"Opinions\">Opinions</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-46415\" id=\"menu-item-46415\"><a href=\"https://www.kdnuggets.com/tutorials/index.html\">Tutorials</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13364\" id=\"menu-item-13364\"><a href=\"/jobs/index.html\" title=\"Jobs in Analytics, Data Science\">JOBS</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-63505\" id=\"menu-item-63505\"><a href=\"https://www.kdnuggets.com/companies/index.html\">Companies</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13366\" id=\"menu-item-13366\"><a href=\"/courses/index.html\">Courses</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-1499\" id=\"menu-item-1499\"><a href=\"https://www.kdnuggets.com/datasets/index.html\">Datasets</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-14286\" id=\"menu-item-14286\"><a href=\"https://www.kdnuggets.com/education/index.html\" title=\"Education in Analytics, Big Data, Data Science\">EDUCATION</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-51558\" id=\"menu-item-51558\"><a href=\"https://www.kdnuggets.com/education/analytics-data-mining-certificates.html\" title=\"Certificates in Analytics, Big Data, Data Science\">Certificates</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-14752\" id=\"menu-item-14752\"><a href=\"/meetings/index.html\">Meetings</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13721\" id=\"menu-item-13721\"><a href=\"/webcasts/index.html\" title=\"Webcasts and Webinars\">Webinars</a></li>\n</ul></div></div>\n</div> <!--#header end-->\n<div id=\"spacer\">\n         \u00a0\n      </div>\n<div id=\"content_wrapper\">\n<div id=\"ad_wrapper\">\n<script type=\"text/javascript\">\n\tjQuery(function() {\n   \t    var pull        = $('#pull');\n            menu        = $('#header .navigation ul');\n            menuImage = $('#header img.menu');\n            mobileMenu        = $('#pull-menu-mobile');\n            search = $('img.search-icon');\n            searchBar = $('div.search');\n            searchClick = false;\n            search.on('click', function() {\n                  searchBar.slideToggle();\n                  searchClick = true;\n            });  \n     \t    $(menuImage).on('click', function(e) {\n\t        //e.preventDefault();\n                if (!searchClick) {\n                  menu.slideToggle();\n                }\n                searchClick = false;\n\t    });\n           /* pullMobile.on('click', function(e) {\n              e.preventDefault();\n                if (!searchClick) {\n                  mobileMenu.slideToggle();\n                }\n                searchClick = false;\n\t    });*/\n            \n\t});\n\tkpath = '/'; kda_top(); kda_sid_init(); kda_sid_n=3;\n\t</script>\n</div> <div class=\"breadcumb\">\n<br/>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2018/index.html\">2018</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/06/index.html\">Jun</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/06/tutorials.html\">Tutorials, Overviews</a> \u00bb IoT on AWS: Machine Learning Models and Dashboards from Sensor Data (\u00a0<a href=\"/2018/n24.html\">18:n24</a>\u00a0)    </div>\n<div class=\"single\" id=\"content\">\n<div id=\"post-header\">\n<h1 id=\"title\">IoT on AWS: Machine Learning Models and Dashboards from Sensor Data</h1>\n<div class=\"pagi\">\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2018/06/pearl-gray-statistics-causality-claims-difficult-swallow.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"> <strong>Previous post</strong></img></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/jobs/18/06-15-apple-software-engineer-applied-machine-learning.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/>\u00a0<br/>\u00a0\n    <div class=\"addthis_native_toolbox\"></div>\n</div>\n<div class=\"tag-data\">Tags: <a href=\"https://www.kdnuggets.com/tag/aws\" rel=\"tag\">AWS</a>, <a href=\"https://www.kdnuggets.com/tag/dashboard\" rel=\"tag\">Dashboard</a>, <a href=\"https://www.kdnuggets.com/tag/iot\" rel=\"tag\">IoT</a>, <a href=\"https://www.kdnuggets.com/tag/machine-learning\" rel=\"tag\">Machine Learning</a>, <a href=\"https://www.kdnuggets.com/tag/rubens-zimbres\" rel=\"tag\">Rubens Zimbres</a></div>\n<br/>\n<p class=\"excerpt\">\n     I developed my first IoT project using my notebook as an IoT device and AWS IoT as infrastructure, with this \"simple\" idea: collect CPU Temperature from my Notebook running on Ubuntu, send to Amazon AWS IoT, save data, make it available for Machine Learning models and dashboards.\n  </p>\n</div>\n<div id=\"post-header-ad\">\n<script type=\"text/javascript\">kda_sid_write(1); kda_sid_n=2;</script>\n</div>\n<hr class=\"grey-line\"/><br/>\n<div class=\"post\" id=\"post-\">\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p><b>By <a href=\"https://www.linkedin.com/in/rubens-zimbres\" rel=\"noopener noreferrer\" target=\"_blank\">Rubens Zimbres</a>, Data Scientist</b></p>\n<p>Google Colab has open source projects that help Data Scientists everywhere. Inspired in this mindset, I developed my first IoT project using my notebook as an IoT device and AWS IoT as infrastructure.</p>\n<p>So, I had a \"simple\" idea: collect CPU Temperature from my Notebook running on Ubuntu, send to Amazon AWS IoT, save data, make it available for Machine Learning models and dashboards.</p>\n<p>However, the operationalization of this idea is quite complex: first, develop a Python notebook that runs Ubuntu command line internally ('sensors'), collecting CPU temperature and is able to connect to AWS IoT via proper security protocols using MQTT. Without using a MQTT broker like Mosquitto.</p>\n<p>It is necessary to create a Thing at AWS IoT, get the Certificates, create and attach the Policy and create a SQL Rule to send data (JSON) to Cloud Watch and Dynamo DB. Then, create a Data Pipeline from Dynamo DB to S3, so that the data become available for a Machine Learning model and also to AWS Quick Sight dashboard.</p>\n<p>Let's get started by installing 'sensors' in Ubuntu 16.04 and 'AWSIoTPythonSDK' library in Anaconda 3:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\n$ sudo apt-get install lm-sensors\r\n$ sudo service kmod start \u00a0\r\n</pre>\n</div>\n<p><br class=\"blank\">\u00a0</br></p>\n<p>Let\u2019s see what the \u2018sensors\u2019 command look like:</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/cfJn3T/image1.png\" width=\"99%\"/></p>\n<p>Now, install AWSIoTPythonSDK library:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\n$ pip install AWSIoTPythonSDK\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Let's start with the Python notebook: the following function was developed to collect CPU Temperature with a delay of 5 seconds:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\nimport subprocess\r\nimport shlex\r\nimport time\r\n\r\ndef measure_temp():\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = subprocess.Popen(shlex.split('sensors -u'),\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stdout=subprocess.PIPE,\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bufsize=10, universal_newlines=True)\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return temp.communicate()\r\n \u00a0\u00a0\u00a0\r\nwhile True:\r\n \u00a0\u00a0\u00a0string=measure_temp()[0]\r\n \u00a0\u00a0\u00a0print(string.split()[8])\r\n \u00a0\u00a0\u00a0time.sleep(5)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Then, we run the notebook from Linux command line:</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/fXsmxo/image12.png\" width=\"99%\"/></p>\n<p>Good. Now this code is inserted in basicPubSub.py notebook from AWSIoTPythonSDK library like this:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\nwhile True:\r\n \u00a0\u00a0\u00a0if args.mode == 'both' or args.mode == 'publish':\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0args.message=measure_temp()[0].split()[8]\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mess={\"reported\": {\"light\": \"blue\",\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Temperature\": measure_temp()[0].split()[8],\"timestamp\": time.time()\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\"timestamp\": 1526519248}\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0args.message=mess\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(measure_temp()[0].split()[8],(time.time()-start)/60,'min')\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(mess,'\\n')\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0message = {}\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0message['message'] = args.message\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0message['sequence'] = loopCount\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0messageJson = json.dumps(message)\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0myAWSIoTMQTTClient.publish(topic, messageJson, 1)\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if args.mode == 'publish':\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Published topic %s: %s\\n' % (topic, messageJson))\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0loopCount += 1\r\n \u00a0\u00a0\u00a0time.sleep(5)\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Cool. We have a Python notebook that will connect to AWS IoT Core via MQTT protocol. Now we set up the shadow (JSON file) at AWS IoT, that is similar to the 'device twin' from Microsoft. Note that as I had only one device, I didn\u2019t insert a device ID in the JSON file.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\n{\r\n \u00a0\"desired\": {\r\n \u00a0\u00a0\u00a0\"light\": \"green\",\r\n \u00a0\u00a0\u00a0\"Temperature\": 55,\r\n \u00a0\u00a0\u00a0\"timestamp\": 1526323886\r\n \u00a0},\r\n \u00a0\"reported\": {\r\n \u00a0\u00a0\u00a0\"light\": \"blue\",\r\n \u00a0\u00a0\u00a0\"Temperature\": 55,\r\n \u00a0\u00a0\u00a0\"timestamp\": 1526323886\r\n \u00a0},\r\n \u00a0\"delta\": {\r\n \u00a0\u00a0\u00a0\"light\": \"green\"\r\n \u00a0}\r\n}\r\n</pre>\n</div>\n<p><br class=\"blank\"/><br/>\n\u00a0<br/>\nNow we get the certificates .pem, .key files and rootCA.pem for a safe connection. We type CTRL+ALT+T at Ubuntu and enter the command line and publish to a topic '-t':</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\n$ python basicPubSub_adapted.py -e 1212345.iot.us-east-1.amazonaws.com -r rootCA.pem -c 2212345-certificate.pem.crt -k 2212345-private.pem.key -id arn:aws:iot:us-east-1:11231112345:thing/CPUUbuntu -t 'Teste'</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>We will receive the feedback from AWS IoT connection in the Linux shell, and check in AWS IoT monitoring tool (after 1 minute) if connections were successful:</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/j3CrV8/image5.png\" width=\"99%\"/></p>\n<p>It is also possible to see if the messages are being published (orange area) and also the protocol used for the connection (on the left):</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/bCkpHo/image4.png\" width=\"99%\"/></p>\n<p>Also, we see that the 'shadow' is also being updated (center):</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/bSGqOT/image15.png\" width=\"99%\"/></p>\n<p>Now we create a SQL rule to send data to Cloud Watch and also to Dynamo DB, creating IAM roles, policies and permissions:</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/g9puiT/image2.png\" width=\"60%\"/></p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/cxMPiT/image14.png\" width=\"99%\"/></p>\n<p>Data is then saved in DynamoDB, as a JSON file. Instead of timestamp, you can use MessageID as the Primary Key.</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/kox3co/image3.png\" width=\"99%\"/></p>\n<p>Now we can visualize Cloud dynamics and data transfer in CloudWatch:</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/cVmqOT/image16.png\" width=\"99%\"/></p>\n<p>Then we create a Data Pipeline from DynamoDB to S3 to be used by QuickSight:</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/hwy4iT/image11.png\" width=\"99%\"/></p>\n<p>It is also needed to create a JSON file and set up IAM permissions so that Quick Sight can read from S3 bucket:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\n{\r\n \u00a0\u00a0\u00a0\"fileLocations\": [\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"URIs\": [\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"https://s3.amazonaws.com/your-bucket/2018-05-19-19-41-16/12345-c2712345-12345\"\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0]\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"URIPrefixes\": [\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"https://s3.amazonaws.com/your-bucket/2018-05-19-19-41-16/12345-c2712345-12345\"\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0]\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n \u00a0\u00a0\u00a0],\r\n \u00a0\u00a0\u00a0\"globalUploadSettings\": {\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"format\": \"JSON\",\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"delimiter\": \"\\n\",\"textqualifier\":\"'\"\r\n \u00a0\u00a0\u00a0}\r\n}\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Now we have our static plot of CPU Temperature in Quick Sight.</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/gFzGxo/image7.png\" width=\"99%\"/></p>\n<p>Also, S3 data (.JSON file) is now available for Machine Learning models, like anomaly detection, prediction and classification, making possible to create a pipeline with Sage Maker and Deep Learning libraries = FUN.</p>\n<p>This was a very nice way to get in touch with Amazon AWS services, like EC2, IoT, Cloud Watch, DynamoDB, S3, Quick Sight and Lambda. It's definitely not easy to set up everything and their dependencies, but this part of the project costed less than 1 USD. And generated a lot of fun !</p>\n<p>This is the flowchart of the first part of the project at AWS:</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/go4zHo/image13.png\" width=\"99%\"/>\u00a0</p>\n<p>\u00a0</p>\n<h3>Project Part 2 \u2013 Near Real-Time Dashboard</h3>\n<p>\u00a0<br/>\nNow let's develop a second solution, using Streaming Data from AWS IoT that is sent to Kinesis / Firehose and then to AWS ElasticSearch, and finally to Kibana, a near real-time dashboard. You can opt to clean and extract data with Lambda (or not) using AWS IoT as input and AWS Batch as output to connect with Kinesis. Anyway, Kibana is able to interpret your JSON file.</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/cmsaq8/image18.png\" width=\"99%\"/></p>\n<p>First we must set up another rule for AWS IoT send telemetry to Kinesis Firehose stream delivery:</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/gkuico/image8.png\" width=\"99%\"/></p>\n<p>Then create an Elastic Search domain</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/iCMPiT/image10.png\" width=\"99%\"/></p>\n<p>Setting up the access to a specific IP:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\n{\r\n \u00a0\"Version\": \"2012-10-17\",\r\n \u00a0\"Statement\": [\r\n \u00a0\u00a0\u00a0{\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\"Effect\": \"Allow\",\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\"Principal\": {\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"AWS\": \"*\"\r\n \u00a0\u00a0\u00a0\u00a0\u00a0},\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\"Action\": \"es:*\",\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\"Resource\": \"arn:aws:es:us-east-1:12345:domain/domain/*\",\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\"Condition\": {\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"IpAddress\": {\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"aws:SourceIp\": \"178.042.222.33\"\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n \u00a0\u00a0\u00a0\u00a0\u00a0}\r\n \u00a0\u00a0\u00a0}\r\n \u00a0]\r\n}</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Then we create the Stream and Stream delivery with Kinesis Firehose.</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/gVVH3T/image17.png\" width=\"99%\"/></p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/m7QZiT/image6.png\" width=\"99%\"/>\u00a0</p>\n<p>Finally, we connect AWS Elasticsearch with Kibana, adjusting at Kibana\u2019s 'Dev Tools':</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\nPUT /data\r\n{\r\n \"mappings\": {\r\n \u00a0\"doc\": {\r\n \u00a0\u00a0\"properties\": {\r\n \u00a0\u00a0\u00a0\u00a0\"light\":{\"type\":\"text\"},\r\n \u00a0\u00a0\u00a0\"Temperature\": {\"type\": \"integer\"},\r\n \u00a0\u00a0\u00a0\"timestamp\": {\"type\": \"integer\"}\r\n \u00a0\u00a0}\r\n \u00a0}\r\n }\r\n}</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Note that Elasticsearch will provide a Kibana endopint. Finally, we have our Near Real-Time Dashboard of CPU Temperature. It\u2019s important to notice that we are almost in a real-time environment. The issue here is that Kibana updates the graphic each 5 seconds (or 15 if you want) but Elasticsearch has a minimum latency of 60 seconds.</p>\n<p>We can now visualize our fancy dashboard:</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/faX8A8/image9.png\" width=\"99%\"/></p>\n<p>More info and files at my GitHub - Repo 2018 (CPU Temperature \u2013 IoT Project): \u00a0<a href=\"https://github.com/RubensZimbres/Repo-2018\" rel=\"noopener noreferrer\" target=\"_blank\">https://github.com/RubensZimbres/Repo-2018</a></p>\n<p>\u00a0<br/>\n<b>Bio: <a href=\"https://www.linkedin.com/in/rubens-zimbres\" rel=\"noopener noreferrer\" target=\"_blank\">Rubens Zimbres</a></b> is a Data Scientist, PhD in Business Administration with emphasis in Artificial Intelligence and Cellular Automata. Currently works in Telecommunications area, developing Machine Learning, Deep Learning models and IoT solutions for the financial sector and agriculture.</p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2018/05/zimbres-first-github-project-gans.html\">GANs in TensorFlow from the Command Line: Creating Your First GitHub Project</a>\n<li><a href=\"/2017/09/science-data-science.html\">Putting the \u201cScience\u201d Back in Data Science</a>\n<li><a href=\"/2017/07/machine-learning-big-data-explained.html\">Machine Learning Applied to Big Data, Explained</a>\n</li></li></li></ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p> <script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets';\n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div>\n<div class=\"page-link\"></div>\n<div class=\"pagi\">\n<hr class=\"grey-line\"/>\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2018/06/pearl-gray-statistics-causality-claims-difficult-swallow.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"/> <strong>Previous post</strong></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/jobs/18/06-15-apple-software-engineer-applied-machine-learning.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/><br/>\n<div>\n<hr class=\"grey-line\"/><br/>\n<h2>Top Stories Past 30 Days</h2>\n<table align=\"center\" cellpadding=\"3\" cellspacing=\"10\" class=\"latn\" width=\"100%\">\n<tr>\n<td valign=\"top\" width=\"50%\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Popular</b></th></tr>\n<tr><td>\n<ol class=\"three_ol\"><li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-1-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-2-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n<li> <a href=\"/2018/05/simplilearn-9-must-have-skills-data-scientist.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-3-simplilearn');\"><b>9 Must-have skills you need to become a Data Scientist, updated</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-4-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/03/another-10-free-must-read-books-for-machine-learning-and-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-5-another-10-books');\"><b>Another 10 Free Must-Read Books for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-6-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/best-data-visualization-techniques.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-7-best-data-viz');\"><b>Best Data Visualization Techniques for small and large data</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td> <td valign=\"top\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Shared</b></th></tr>\n<tr><td><ol class=\"three_ol\">\n<li> <a href=\"/2019/04/another-10-free-must-see-courses-machine-learning-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-1-another-10-courses');\"><b>Another 10 Free Must-See Courses for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-2-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/03/r-vs-python-data-visualization.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-3-r-py-viz');\"><b>R vs Python for Data Visualization</b></a>\n<li> <a href=\"/2019/03/deep-learning-toolset-overview.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-4-dl-toolset');\"><b>The Deep Learning Toolset \u2014 An Overview</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-5-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-6-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-7-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<!--#content end--></div>\n<div id=\"sidebar\">\n<div class=\"latn\">\n<h3><b><a href=\"/news/index.html\">Latest News</a></b></h3>\n<ul style=\"font-size:14px; margin-top:5px\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/kdnuggets-editor.html\">Looking for a KDnuggets Editor</a><li> <a href=\"https://www.kdnuggets.com/2019/04/datarobot-delivering-trusted-ai-microsoft.html\">Delivering Trusted AI with DataRobot and Microsoft</a><li> <a href=\"https://www.kdnuggets.com/2019/04/formulated-ai-data-production-landscape.html\">AI and the data production landscape</a><li> <a href=\"https://www.kdnuggets.com/2019/04/most-desired-skill-data-science.html\">The most desired skill in data science</a><li> <a href=\"https://www.kdnuggets.com/2019/04/projects-include-data-science-portfolio.html\">Projects to Include in a Data Science Portfolio</a><li> <a href=\"https://www.kdnuggets.com/2019/04/rework-meet-worlds-leading-ai-deep-learning-experts.html\">Meet the World\u2019s Leading AI &amp; Deep Learning ...</a></li></li></li></li></li></li></ul>\n</div>\n<div>\n<script type=\"text/javascript\">kda_sid_write(kda_sid_n);</script>\n</div>\n<br/><script src=\"/aps/sbm.js\" type=\"text/javascript\"></script>\n<div class=\"latn\" style=\"margin-top: 15px;\">\n<h3><b>More Recent Stories</b></h3>\n<ul class=\"next-posts\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/rework-meet-worlds-leading-ai-deep-learning-experts.html\">Meet the World\u2019s Leading AI &amp; Deep Learning Experts</a><li> <a href=\"https://www.kdnuggets.com/2019/04/problem-data-science-job-postings.html\">The problem with data science job postings</a><li> <a href=\"https://www.kdnuggets.com/2019/04/graduating-gans-understanding-generative-adversarial-networks.html\">Graduating in GANs: Going From Understanding Generative Advers...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/datax-join-new-generation-ai-technologists.html\">Join the new generation of AI technologists</a><li> <a href=\"https://www.kdnuggets.com/2019/04/top-tweets-apr17-apr23.html\">Top tweets, Apr 17\u201323: The History of Artificial #NeuralN...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/activestate-top-10-python-use-cases.html\">Top 10 Python Use Cases</a><li> <a href=\"https://www.kdnuggets.com/2019/04/future-generative-adversarial-networks.html\">Generative Adversarial Networks \u2013 Key Milestones and Sta...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/attention-craving-rnn-building-transformer-networks.html\">Attention Craving RNNS: Building Up To Transformer Networks</a><li> <a href=\"https://www.kdnuggets.com/jobs/19/04-24-fors-marsh-group-lead-data-scientist.html\">Fors Marsh Group: Lead Data Scientist [Arlington, VA]</a><li> <a href=\"https://www.kdnuggets.com/2019/n16.html\">KDnuggets 19:n16, Apr 24: Data Visualization in Python with...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/paw-mega-paw-las-vegas-lower-rates-end-friday.html\">Lower Rates End Friday for Mega-PAW Vegas \u2013 the Largest Pred...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/top-news-week-0415-0421.html\">Top Stories, Apr 15-21: Data Visualization in Python: Matplotl...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/wharton-customer-analytics-initiative-conference.html\">Wharton Customer Analytics Initiative Annual Conference in Phi...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/machine-learning-graph-analytics.html\">Machine Learning and Deep Link Graph Analytics: A Powerful Com...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/best-masters-data-science-analytics-online.html\">2019 Best Masters in Data Science and Analytics \u2013 Online</a><li> <a href=\"https://www.kdnuggets.com/2019/04/worth-studying-data-science-masters.html\">Was it Worth Studying a Data Science Masters?</a><li> <a href=\"https://www.kdnuggets.com/2019/04/approach-pre-trained-deep-learning-models-caution.html\">Approach pre-trained deep learning models with caution</a><li> <a href=\"https://www.kdnuggets.com/2019/04/coursera-earn-deep-learning-certificate.html\">Earn a Deep Learning Certificate</a><li> <a href=\"https://www.kdnuggets.com/2019/04/octoparse-scrape-data-website.html\">Easy Way to Scrape Data from Website By Yourself</a><li> <a href=\"https://www.kdnuggets.com/2019/04/ai-environment.html\">AI Supporting The Earth</a></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></ul>\n</div>\n</div><div class=\"breadcrumbs_bottom\">\n<div class=\"breadcumb\">\n<br>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2018/index.html\">2018</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/06/index.html\">Jun</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/06/tutorials.html\">Tutorials, Overviews</a> \u00bb IoT on AWS: Machine Learning Models and Dashboards from Sensor Data (\u00a0<a href=\"/2018/n24.html\">18:n24</a>\u00a0)    </br></div>\n</div>\n<!--#content_wrapper end--></div>\n<br>\n<div id=\"footer\">\n<br/>\u00a9 2019 KDnuggets. <a href=\"/about/index.html\">About KDnuggets</a>. \u00a0<a href=\"/news/privacy-policy.html\">Privacy policy</a>. <a href=\"/terms-of-service.html\">Terms of Service</a><br/>\u00a0\n<div class=\"kd_bottom\">\n<div class=\"footer-container\">\n<div class=\"footer-news\">\n<a href=\"/news/subscribe.html\" onclick=\"_gaq.push(['_trackPageview','/x/bot/sub']);\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a>\n</div>\n<div class=\"footer-sm\">\n<a href=\"https://twitter.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/twt']);\" target=\"_blank\"><img height=\"32\" src=\"/images/tw_c48.png\" width=\"32\"/></a>\n<a href=\"https://facebook.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/fb']);\" target=\"_blank\"><img alt=\"Facebook\" height=\"32\" src=\"/images/fb_c48.png\" width=\"32\"/></a>\n<a href=\"https://www.linkedin.com/groups/54257\" onclick=\"_gaq.push(['_trackPageview','/x/bot/in']);\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"32\" src=\"/images/in_c48.png\" width=\"32\"/></a>\n</div>\n</div>\n<div class=\"close-footer\">X</div>\n</div>\n<script type=\"text/javascript\">\n  jQuery('.close-footer').click(\n      function(){       \n         jQuery('.kd_bottom').hide();\n      }\n   );\n</script> </div>\n<div class=\"clear\"><!--blank--></div>\n</br></div>\n<div style=\"display: none;\"><div id=\"boxzilla-box-82996-content\"><script type=\"text/javascript\">(function() {\n\tif (!window.mc4wp) {\n\t\twindow.mc4wp = {\n\t\t\tlisteners: [],\n\t\t\tforms    : {\n\t\t\t\ton: function (event, callback) {\n\t\t\t\t\twindow.mc4wp.listeners.push({\n\t\t\t\t\t\tevent   : event,\n\t\t\t\t\t\tcallback: callback\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})();\n</script><!-- MailChimp for WordPress v4.1.14 - https://wordpress.org/plugins/mailchimp-for-wp/ --><form class=\"mc4wp-form mc4wp-form-77281\" data-id=\"77281\" data-name=\"Subscribe to KDnuggets News\" id=\"mc4wp-form-1\" method=\"post\"><div class=\"mc4wp-form-fields\"><div class=\"header-container\">\n<img align=\"left\" src=\"/wp-content/uploads/envelope.png\"><a href=\"/news/subscribe.html\">Get KDnuggets, a leading newsletter on AI, \r\n  Data Science, and Machine Learning</a>\n</img></div>\n<div class=\"form-fields\">\n<div class=\"field-container\"><label>Email:</label><input maxlength=\"60\" name=\"EMAIL\" placeholder=\"Your email\" required=\"\" size=\"30\" type=\"email\"/></div>\n<div class=\"field-container submit-container\"><div class=\"form-button\" onclick=\"document.getElementById('mc4wp-form-1').submit()\">Sign Up</div></div>\n</div>\n<div>\n<br/><span style=\"font-size:9px\">By subscribing, you agree to KDnuggets <a href=\"https://www.kdnuggets.com/news/privacy-policy.html\">privacy policy</a></span>\n</div>\n<label style=\"display: none !important;\">Leave this field empty if you're human: <input autocomplete=\"off\" name=\"_mc4wp_honeypot\" tabindex=\"-1\" type=\"text\" value=\"\"/></label><input name=\"_mc4wp_timestamp\" type=\"hidden\" value=\"1556469839\"/><input name=\"_mc4wp_form_id\" type=\"hidden\" value=\"77281\"/><input name=\"_mc4wp_form_element_id\" type=\"hidden\" value=\"mc4wp-form-1\"/></div><div class=\"mc4wp-response\"></div></form><!-- / MailChimp for WordPress Plugin -->\n</div></div><script type=\"text/javascript\">(function() {function addEventListener(element,event,handler) {\n\tif(element.addEventListener) {\n\t\telement.addEventListener(event,handler, false);\n\t} else if(element.attachEvent){\n\t\telement.attachEvent('on'+event,handler);\n\t}\n}function maybePrefixUrlField() {\n\tif(this.value.trim() !== '' && this.value.indexOf('http') !== 0) {\n\t\tthis.value = \"http://\" + this.value;\n\t}\n}\n\nvar urlFields = document.querySelectorAll('.mc4wp-form input[type=\"url\"]');\nif( urlFields && urlFields.length > 0 ) {\n\tfor( var j=0; j < urlFields.length; j++ ) {\n\t\taddEventListener(urlFields[j],'blur',maybePrefixUrlField);\n\t}\n}/* test if browser supports date fields */\nvar testInput = document.createElement('input');\ntestInput.setAttribute('type', 'date');\nif( testInput.type !== 'date') {\n\n\t/* add placeholder & pattern to all date fields */\n\tvar dateFields = document.querySelectorAll('.mc4wp-form input[type=\"date\"]');\n\tfor(var i=0; i<dateFields.length; i++) {\n\t\tif(!dateFields[i].placeholder) {\n\t\t\tdateFields[i].placeholder = 'YYYY-MM-DD';\n\t\t}\n\t\tif(!dateFields[i].pattern) {\n\t\t\tdateFields[i].pattern = '[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])';\n\t\t}\n\t}\n}\n\n})();</script><script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_options = {\"testMode\":\"\",\"boxes\":[{\"id\":82996,\"icon\":\"&times;\",\"content\":\"\",\"css\":{\"background_color\":\"#eeee22\",\"width\":600,\"border_width\":2,\"border_style\":\"double\",\"position\":\"center\"},\"trigger\":{\"method\":\"time_on_page\",\"value\":\"3\"},\"animation\":\"fade\",\"cookie\":{\"triggered\":0,\"dismissed\":336},\"rehide\":true,\"position\":\"center\",\"screenWidthCondition\":{\"condition\":\"larger\",\"value\":500},\"closable\":true,\"post\":{\"id\":82996,\"title\":\"Subscribe to KDnuggets\",\"slug\":\"subscribe-to-kdnuggets\"}}]};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla/assets/js/script.min.js?ver=3.2.5\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_stats_config = {\"ajaxurl\":\"https:\\/\\/www.kdnuggets.com\\/wp-admin\\/admin-ajax.php?action=boxzilla_stats_track\"};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla-stats/assets/js/tracking.min.js?ver=1.0.4\" type=\"text/javascript\"></script>\n<script src=\"https://www.kdnuggets.com/wp-includes/js/wp-embed.min.js?ver=4.9.10\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar mc4wp_forms_config = [];\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/forms-api.min.js?ver=4.1.14\" type=\"text/javascript\"></script>\n<!--[if lte IE 9]>\n<script type='text/javascript' src='https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/third-party/placeholders.min.js?ver=4.1.14'></script>\n<![endif]-->\n<!--/.main_wrapper--></div>\n<script src=\"https://s7.addthis.com/js/300/addthis_widget.js#pubid=gpsaddthis\" type=\"text/javascript\"></script>\n</body>\n</html>\n<!-- Dynamic page generated in 0.736 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2019-04-28 12:43:59 -->\n<!-- Compression = gzip -->", "content_tokenized": ["comment", "ruben", "zimbr", "data", "scientist", "googl", "colab", "has", "open", "sourc", "project", "that", "help", "data", "scientist", "everywher", "inspir", "this", "mindset", "develop", "first", "iot", "project", "use", "notebook", "iot", "devic", "and", "iot", "infrastructur", "had", "simpl", "idea", "collect", "temperatur", "from", "notebook", "run", "ubuntu", "send", "amazon", "iot", "save", "data", "make", "avail", "for", "machin", "learn", "model", "and", "dashboard", "howev", "the", "operation", "this", "idea", "quit", "complex", "first", "develop", "python", "notebook", "that", "run", "ubuntu", "command", "line", "intern", "sensor", "collect", "temperatur", "and", "abl", "connect", "iot", "via", "proper", "secur", "protocol", "use", "without", "use", "broker", "like", "mosquitto", "necessari", "creat", "thing", "iot", "get", "the", "certif", "creat", "and", "attach", "the", "polici", "and", "creat", "rule", "send", "data", "cloud", "watch", "and", "dynamo", "then", "creat", "data", "pipelin", "from", "dynamo", "that", "the", "data", "becom", "avail", "for", "machin", "learn", "model", "and", "also", "quick", "sight", "dashboard", "let", "get", "start", "instal", "sensor", "ubuntu", "num", "and", "awsiotpythonsdk", "librari", "anaconda", "num", "sudo", "aptget", "instal", "lmsensor", "sudo", "servic", "kmod", "start", "let", "see", "what", "the", "sensor", "command", "look", "like", "now", "instal", "awsiotpythonsdk", "librari", "pip", "instal", "awsiotpythonsdk", "let", "start", "with", "the", "python", "notebook", "the", "follow", "function", "develop", "collect", "temperatur", "with", "delay", "num", "second", "import", "subprocess", "import", "shlex", "import", "time", "def", "temp", "stdoutsubprocesspip", "bufsizenum", "universalnewlinestru", "return", "while", "true", "string", "num", "num", "then", "run", "the", "notebook", "from", "linux", "command", "line", "good", "now", "this", "code", "insert", "basicpubsubpi", "notebook", "from", "awsiotpythonsdk", "librari", "like", "this", "while", "true", "argsmod", "both", "argsmod", "publish", "argsmessag", "num", "num", "mess", "report", "light", "blue", "temperatur", "num", "num", "timestamp", "timestamp", "num", "argsmessagemess", "num", "num", "start", "num", "min", "messag", "messag", "messag", "argsmessag", "messag", "sequenc", "loopcount", "messagejson", "argsmod", "publish", "loopcount", "num", "cool", "have", "python", "notebook", "that", "will", "connect", "iot", "core", "via", "protocol", "now", "set", "the", "shadow", "file", "iot", "that", "similar", "the", "devic", "twin", "from", "microsoft", "note", "that", "had", "onli", "one", "devic", "insert", "devic", "the", "file", "desir", "light", "green", "temperatur", "num", "timestamp", "num", "report", "light", "blue", "temperatur", "num", "timestamp", "num", "delta", "light", "green", "now", "get", "the", "certif", "pem", "key", "file", "and", "rootcapem", "for", "safe", "connect", "type", "ubuntu", "and", "enter", "the", "command", "line", "and", "publish", "topic", "python", "basicpubsubadaptedpi", "numiotuseastnumamazonawscom", "rootcapem", "numcertificatepemcrt", "numprivatepemkey", "arn", "iot", "useastnum", "thingcpuubuntu", "test", "will", "receiv", "the", "feedback", "from", "iot", "connect", "the", "linux", "shell", "and", "check", "iot", "monitor", "tool", "after", "num", "minut", "connect", "were", "success", "also", "possibl", "see", "the", "messag", "are", "publish", "orang", "area", "and", "also", "the", "protocol", "use", "for", "the", "connect", "the", "left", "also", "see", "that", "the", "shadow", "also", "updat", "center", "now", "creat", "rule", "send", "data", "cloud", "watch", "and", "also", "dynamo", "creat", "role", "polici", "and", "permiss", "data", "then", "save", "dynamodb", "file", "instead", "timestamp", "can", "use", "messageid", "the", "primari", "key", "now", "can", "visual", "cloud", "dynam", "and", "data", "transfer", "cloudwatch", "then", "creat", "data", "pipelin", "from", "dynamodb", "use", "quicksight", "also", "need", "creat", "file", "and", "set", "permiss", "that", "quick", "sight", "can", "read", "from", "bucket", "fileloc", "uri", "yourbucketnumcnum", "uriprefix", "yourbucketnumcnum", "globaluploadset", "format", "delimit", "textqualifi", "now", "have", "our", "static", "plot", "temperatur", "quick", "sight", "also", "data", "file", "now", "avail", "for", "machin", "learn", "model", "like", "anomali", "detect", "predict", "and", "classif", "make", "possibl", "creat", "pipelin", "with", "sage", "maker", "and", "deep", "learn", "librari", "this", "veri", "nice", "way", "get", "touch", "with", "amazon", "servic", "like", "iot", "cloud", "watch", "dynamodb", "quick", "sight", "and", "lambda", "definit", "not", "easi", "set", "everyth", "and", "their", "depend", "but", "this", "part", "the", "project", "cost", "less", "than", "num", "and", "generat", "lot", "fun", "this", "the", "flowchart", "the", "first", "part", "the", "project", "project", "part", "num", "near", "realtim", "dashboard", "now", "let", "develop", "second", "solut", "use", "stream", "data", "from", "iot", "that", "sent", "kinesi", "firehos", "and", "then", "elasticsearch", "and", "final", "kibana", "near", "realtim", "dashboard", "can", "opt", "clean", "and", "extract", "data", "with", "lambda", "not", "use", "iot", "input", "and", "batch", "output", "connect", "with", "kinesi", "anyway", "kibana", "abl", "interpret", "file", "first", "must", "set", "anoth", "rule", "for", "iot", "send", "telemetri", "kinesi", "firehos", "stream", "deliveri", "then", "creat", "elast", "search", "domain", "set", "the", "access", "specif", "version", "num", "statement", "effect", "allow", "princip", "action", "resourc", "arn", "useastnum", "domaindomain", "condit", "ipaddress", "sourceip", "num", "then", "creat", "the", "stream", "and", "stream", "deliveri", "with", "kinesi", "firehos", "final", "connect", "elasticsearch", "with", "kibana", "adjust", "kibana", "dev", "tool", "data", "map", "doc", "properti", "light", "type", "text", "temperatur", "type", "integ", "timestamp", "type", "integ", "note", "that", "elasticsearch", "will", "provid", "kibana", "endopint", "final", "have", "our", "near", "realtim", "dashboard", "temperatur", "import", "notic", "that", "are", "almost", "realtim", "environ", "the", "issu", "here", "that", "kibana", "updat", "the", "graphic", "each", "num", "second", "num", "want", "but", "elasticsearch", "has", "minimum", "latenc", "num", "second", "can", "now", "visual", "our", "fanci", "dashboard", "more", "info", "and", "file", "github", "repo", "num", "temperatur", "iot", "project", "rubenszimbresreponum", "bio", "ruben", "zimbr", "data", "scientist", "phd", "busi", "administr", "with", "emphasi", "artifici", "intellig", "and", "cellular", "automata", "current", "work", "telecommun", "area", "develop", "machin", "learn", "deep", "learn", "model", "and", "iot", "solut", "for", "the", "financi", "sector", "and", "agricultur", "relat", "gan", "tensorflow", "from", "the", "command", "line", "creat", "first", "github", "project", "put", "the", "scienc", "back", "data", "scienc", "machin", "learn", "appli", "big", "data", "explain"], "timestamp_scraper": 1556479558.918635, "title": "IoT on AWS: Machine Learning Models and Dashboards from Sensor Data", "read_time": 325.2, "content_html": "<div class=\"post\" id=\"post-\">\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p><b>By <a href=\"https://www.linkedin.com/in/rubens-zimbres\" rel=\"noopener noreferrer\" target=\"_blank\">Rubens Zimbres</a>, Data Scientist</b></p>\n<p>Google Colab has open source projects that help Data Scientists everywhere. Inspired in this mindset, I developed my first IoT project using my notebook as an IoT device and AWS IoT as infrastructure.</p>\n<p>So, I had a \"simple\" idea: collect CPU Temperature from my Notebook running on Ubuntu, send to Amazon AWS IoT, save data, make it available for Machine Learning models and dashboards.</p>\n<p>However, the operationalization of this idea is quite complex: first, develop a Python notebook that runs Ubuntu command line internally ('sensors'), collecting CPU temperature and is able to connect to AWS IoT via proper security protocols using MQTT. Without using a MQTT broker like Mosquitto.</p>\n<p>It is necessary to create a Thing at AWS IoT, get the Certificates, create and attach the Policy and create a SQL Rule to send data (JSON) to Cloud Watch and Dynamo DB. Then, create a Data Pipeline from Dynamo DB to S3, so that the data become available for a Machine Learning model and also to AWS Quick Sight dashboard.</p>\n<p>Let's get started by installing 'sensors' in Ubuntu 16.04 and 'AWSIoTPythonSDK' library in Anaconda 3:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\n$ sudo apt-get install lm-sensors\r\n$ sudo service kmod start \u00a0\r\n</pre>\n</div>\n<p><br class=\"blank\">\u00a0</br></p>\n<p>Let\u2019s see what the \u2018sensors\u2019 command look like:</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/cfJn3T/image1.png\" width=\"99%\"/></p>\n<p>Now, install AWSIoTPythonSDK library:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\n$ pip install AWSIoTPythonSDK\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Let's start with the Python notebook: the following function was developed to collect CPU Temperature with a delay of 5 seconds:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\nimport subprocess\r\nimport shlex\r\nimport time\r\n\r\ndef measure_temp():\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = subprocess.Popen(shlex.split('sensors -u'),\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stdout=subprocess.PIPE,\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bufsize=10, universal_newlines=True)\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return temp.communicate()\r\n \u00a0\u00a0\u00a0\r\nwhile True:\r\n \u00a0\u00a0\u00a0string=measure_temp()[0]\r\n \u00a0\u00a0\u00a0print(string.split()[8])\r\n \u00a0\u00a0\u00a0time.sleep(5)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Then, we run the notebook from Linux command line:</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/fXsmxo/image12.png\" width=\"99%\"/></p>\n<p>Good. Now this code is inserted in basicPubSub.py notebook from AWSIoTPythonSDK library like this:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\nwhile True:\r\n \u00a0\u00a0\u00a0if args.mode == 'both' or args.mode == 'publish':\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0args.message=measure_temp()[0].split()[8]\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mess={\"reported\": {\"light\": \"blue\",\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Temperature\": measure_temp()[0].split()[8],\"timestamp\": time.time()\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\"timestamp\": 1526519248}\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0args.message=mess\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(measure_temp()[0].split()[8],(time.time()-start)/60,'min')\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(mess,'\\n')\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0message = {}\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0message['message'] = args.message\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0message['sequence'] = loopCount\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0messageJson = json.dumps(message)\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0myAWSIoTMQTTClient.publish(topic, messageJson, 1)\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if args.mode == 'publish':\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Published topic %s: %s\\n' % (topic, messageJson))\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0loopCount += 1\r\n \u00a0\u00a0\u00a0time.sleep(5)\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Cool. We have a Python notebook that will connect to AWS IoT Core via MQTT protocol. Now we set up the shadow (JSON file) at AWS IoT, that is similar to the 'device twin' from Microsoft. Note that as I had only one device, I didn\u2019t insert a device ID in the JSON file.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\n{\r\n \u00a0\"desired\": {\r\n \u00a0\u00a0\u00a0\"light\": \"green\",\r\n \u00a0\u00a0\u00a0\"Temperature\": 55,\r\n \u00a0\u00a0\u00a0\"timestamp\": 1526323886\r\n \u00a0},\r\n \u00a0\"reported\": {\r\n \u00a0\u00a0\u00a0\"light\": \"blue\",\r\n \u00a0\u00a0\u00a0\"Temperature\": 55,\r\n \u00a0\u00a0\u00a0\"timestamp\": 1526323886\r\n \u00a0},\r\n \u00a0\"delta\": {\r\n \u00a0\u00a0\u00a0\"light\": \"green\"\r\n \u00a0}\r\n}\r\n</pre>\n</div>\n<p><br class=\"blank\"/><br/>\n\u00a0<br/>\nNow we get the certificates .pem, .key files and rootCA.pem for a safe connection. We type CTRL+ALT+T at Ubuntu and enter the command line and publish to a topic '-t':</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\n$ python basicPubSub_adapted.py -e 1212345.iot.us-east-1.amazonaws.com -r rootCA.pem -c 2212345-certificate.pem.crt -k 2212345-private.pem.key -id arn:aws:iot:us-east-1:11231112345:thing/CPUUbuntu -t 'Teste'</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>We will receive the feedback from AWS IoT connection in the Linux shell, and check in AWS IoT monitoring tool (after 1 minute) if connections were successful:</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/j3CrV8/image5.png\" width=\"99%\"/></p>\n<p>It is also possible to see if the messages are being published (orange area) and also the protocol used for the connection (on the left):</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/bCkpHo/image4.png\" width=\"99%\"/></p>\n<p>Also, we see that the 'shadow' is also being updated (center):</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/bSGqOT/image15.png\" width=\"99%\"/></p>\n<p>Now we create a SQL rule to send data to Cloud Watch and also to Dynamo DB, creating IAM roles, policies and permissions:</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/g9puiT/image2.png\" width=\"60%\"/></p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/cxMPiT/image14.png\" width=\"99%\"/></p>\n<p>Data is then saved in DynamoDB, as a JSON file. Instead of timestamp, you can use MessageID as the Primary Key.</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/kox3co/image3.png\" width=\"99%\"/></p>\n<p>Now we can visualize Cloud dynamics and data transfer in CloudWatch:</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/cVmqOT/image16.png\" width=\"99%\"/></p>\n<p>Then we create a Data Pipeline from DynamoDB to S3 to be used by QuickSight:</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/hwy4iT/image11.png\" width=\"99%\"/></p>\n<p>It is also needed to create a JSON file and set up IAM permissions so that Quick Sight can read from S3 bucket:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\n{\r\n \u00a0\u00a0\u00a0\"fileLocations\": [\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"URIs\": [\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"https://s3.amazonaws.com/your-bucket/2018-05-19-19-41-16/12345-c2712345-12345\"\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0]\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"URIPrefixes\": [\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"https://s3.amazonaws.com/your-bucket/2018-05-19-19-41-16/12345-c2712345-12345\"\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0]\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n \u00a0\u00a0\u00a0],\r\n \u00a0\u00a0\u00a0\"globalUploadSettings\": {\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"format\": \"JSON\",\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"delimiter\": \"\\n\",\"textqualifier\":\"'\"\r\n \u00a0\u00a0\u00a0}\r\n}\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Now we have our static plot of CPU Temperature in Quick Sight.</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/gFzGxo/image7.png\" width=\"99%\"/></p>\n<p>Also, S3 data (.JSON file) is now available for Machine Learning models, like anomaly detection, prediction and classification, making possible to create a pipeline with Sage Maker and Deep Learning libraries = FUN.</p>\n<p>This was a very nice way to get in touch with Amazon AWS services, like EC2, IoT, Cloud Watch, DynamoDB, S3, Quick Sight and Lambda. It's definitely not easy to set up everything and their dependencies, but this part of the project costed less than 1 USD. And generated a lot of fun !</p>\n<p>This is the flowchart of the first part of the project at AWS:</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/go4zHo/image13.png\" width=\"99%\"/>\u00a0</p>\n<p>\u00a0</p>\n<h3>Project Part 2 \u2013 Near Real-Time Dashboard</h3>\n<p>\u00a0<br/>\nNow let's develop a second solution, using Streaming Data from AWS IoT that is sent to Kinesis / Firehose and then to AWS ElasticSearch, and finally to Kibana, a near real-time dashboard. You can opt to clean and extract data with Lambda (or not) using AWS IoT as input and AWS Batch as output to connect with Kinesis. Anyway, Kibana is able to interpret your JSON file.</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/cmsaq8/image18.png\" width=\"99%\"/></p>\n<p>First we must set up another rule for AWS IoT send telemetry to Kinesis Firehose stream delivery:</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/gkuico/image8.png\" width=\"99%\"/></p>\n<p>Then create an Elastic Search domain</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/iCMPiT/image10.png\" width=\"99%\"/></p>\n<p>Setting up the access to a specific IP:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\n{\r\n \u00a0\"Version\": \"2012-10-17\",\r\n \u00a0\"Statement\": [\r\n \u00a0\u00a0\u00a0{\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\"Effect\": \"Allow\",\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\"Principal\": {\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"AWS\": \"*\"\r\n \u00a0\u00a0\u00a0\u00a0\u00a0},\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\"Action\": \"es:*\",\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\"Resource\": \"arn:aws:es:us-east-1:12345:domain/domain/*\",\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\"Condition\": {\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"IpAddress\": {\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"aws:SourceIp\": \"178.042.222.33\"\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n \u00a0\u00a0\u00a0\u00a0\u00a0}\r\n \u00a0\u00a0\u00a0}\r\n \u00a0]\r\n}</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Then we create the Stream and Stream delivery with Kinesis Firehose.</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/gVVH3T/image17.png\" width=\"99%\"/></p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/m7QZiT/image6.png\" width=\"99%\"/>\u00a0</p>\n<p>Finally, we connect AWS Elasticsearch with Kibana, adjusting at Kibana\u2019s 'Dev Tools':</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\nPUT /data\r\n{\r\n \"mappings\": {\r\n \u00a0\"doc\": {\r\n \u00a0\u00a0\"properties\": {\r\n \u00a0\u00a0\u00a0\u00a0\"light\":{\"type\":\"text\"},\r\n \u00a0\u00a0\u00a0\"Temperature\": {\"type\": \"integer\"},\r\n \u00a0\u00a0\u00a0\"timestamp\": {\"type\": \"integer\"}\r\n \u00a0\u00a0}\r\n \u00a0}\r\n }\r\n}</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Note that Elasticsearch will provide a Kibana endopint. Finally, we have our Near Real-Time Dashboard of CPU Temperature. It\u2019s important to notice that we are almost in a real-time environment. The issue here is that Kibana updates the graphic each 5 seconds (or 15 if you want) but Elasticsearch has a minimum latency of 60 seconds.</p>\n<p>We can now visualize our fancy dashboard:</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/faX8A8/image9.png\" width=\"99%\"/></p>\n<p>More info and files at my GitHub - Repo 2018 (CPU Temperature \u2013 IoT Project): \u00a0<a href=\"https://github.com/RubensZimbres/Repo-2018\" rel=\"noopener noreferrer\" target=\"_blank\">https://github.com/RubensZimbres/Repo-2018</a></p>\n<p>\u00a0<br/>\n<b>Bio: <a href=\"https://www.linkedin.com/in/rubens-zimbres\" rel=\"noopener noreferrer\" target=\"_blank\">Rubens Zimbres</a></b> is a Data Scientist, PhD in Business Administration with emphasis in Artificial Intelligence and Cellular Automata. Currently works in Telecommunications area, developing Machine Learning, Deep Learning models and IoT solutions for the financial sector and agriculture.</p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2018/05/zimbres-first-github-project-gans.html\">GANs in TensorFlow from the Command Line: Creating Your First GitHub Project</a>\n<li><a href=\"/2017/09/science-data-science.html\">Putting the \u201cScience\u201d Back in Data Science</a>\n<li><a href=\"/2017/07/machine-learning-big-data-explained.html\">Machine Learning Applied to Big Data, Explained</a>\n</li></li></li></ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p> <script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets';\n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div> ", "website": "kdnuggets"}