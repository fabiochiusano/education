{"title": "Data Structure & Algorithms - Tree Traversal", "tfidf": {"tfidf": {"use": 1.0296387573799999, "general": 1.1218202374200001, "itself": 1.74557449148, "link": 2.15151104486, "sort": 5.188235294119999, "valu": 6.833285509320001, "item": 5.07869481766, "can": 1.17626139142, "from": 1.00056721497, "will": 1.22481098596, "three": 1.06621893889, "repres": 1.46972782818, "which": 1.005191845, "via": 2.2978723404299997, "this": 1.00379362671, "should": 1.6643254009900001, "start": 1.26673581744, "binari": 32.4, "root": 7.15618661258, "output": 7.676982591880001, "all": 3.03440366973, "given": 1.35426085473, "subtre": 133.0391061453, "the": 8.0, "method": 2.5714285714300003, "connect": 1.8843916913900003, "contain": 1.59814777532, "their": 1.01547908405, "produc": 1.36932896326, "then": 1.08657860516, "inord": 44.3463687151, "tree": 24.767550702, "everi": 1.47917637194, "edg": 4.45704660303, "search": 3.2539454806299997, "head": 1.57781753131, "node": 221.7318435755, "print": 6.59439252336, "right": 1.4054532577899999, "key": 4.5601034037, "and": 2.00012598426, "way": 1.2190739461, "process": 1.69524826482, "access": 1.8734953976900002, "visit": 4.41245136186, "too": 1.81585268215, "there": 1.04091266719, "locat": 1.59766529134, "left": 1.4398693996, "that": 2.0079681275, "alway": 4.13491340018, "may": 2.10403551786, "becaus": 1.1495184997499999, "ascend": 13.431472081199999, "order": 1.24625166811, "random": 7.1902173913, "first": 1.00761614623, "rememb": 4.88793103448, "not": 1.01567398119, "are": 2.05981187156, "later": 1.08650424309, "travers": 114.05172413800001}, "idf": {"use": 1.0296387573799999, "general": 1.1218202374200001, "itself": 1.74557449148, "link": 2.15151104486, "sort": 5.188235294119999, "valu": 2.2777618364400003, "item": 5.07869481766, "can": 1.17626139142, "from": 1.00056721497, "will": 1.22481098596, "three": 1.06621893889, "repres": 1.46972782818, "which": 1.005191845, "via": 2.2978723404299997, "this": 1.00379362671, "should": 1.6643254009900001, "start": 1.26673581744, "binari": 32.4, "root": 3.57809330629, "output": 7.676982591880001, "all": 1.01146788991, "given": 1.35426085473, "subtre": 44.3463687151, "the": 1.0, "method": 2.5714285714300003, "connect": 1.8843916913900003, "contain": 1.59814777532, "their": 1.01547908405, "produc": 1.36932896326, "then": 1.08657860516, "inord": 44.3463687151, "tree": 4.127925117, "everi": 1.47917637194, "edg": 4.45704660303, "search": 3.2539454806299997, "head": 1.57781753131, "node": 44.3463687151, "print": 3.29719626168, "right": 1.4054532577899999, "key": 2.28005170185, "and": 1.00006299213, "way": 1.2190739461, "process": 1.69524826482, "access": 1.8734953976900002, "visit": 2.20622568093, "too": 1.81585268215, "there": 1.04091266719, "locat": 1.59766529134, "left": 1.4398693996, "that": 1.00398406375, "alway": 2.06745670009, "may": 1.05201775893, "becaus": 1.1495184997499999, "ascend": 13.431472081199999, "order": 1.24625166811, "random": 7.1902173913, "first": 1.00761614623, "rememb": 4.88793103448, "not": 1.01567398119, "are": 1.02990593578, "later": 1.08650424309, "travers": 22.8103448276}, "logidf": {"use": 0.0292080197316, "general": 0.114952578063, "itself": 0.5570837229510001, "link": 0.7661704068449999, "sort": 1.64639361896, "valu": 0.823193310148, "item": 1.62505430292, "can": 0.162341096394, "from": 0.000567054168866, "will": 0.202786534915, "three": 0.06411868822490001, "repres": 0.38507723275, "which": 0.00517841384543, "via": 0.831983625414, "this": 0.0037864490525, "should": 0.509419876758, "start": 0.236443369291, "binari": 3.4781584227999995, "root": 1.27483006252, "output": 2.03822657827, "all": 0.011402632097799998, "given": 0.303255810831, "subtre": 3.7920308275, "the": 0.0, "method": 0.944461608841, "connect": 0.633605058682, "contain": 0.468845318236, "their": 0.015360505122700001, "produc": 0.314320812003, "then": 0.08303386523089999, "inord": 3.7920308275, "tree": 1.41777488775, "everi": 0.391485427421, "edg": 1.4944863500499999, "search": 1.1798682540899998, "head": 0.456042582852, "node": 3.7920308275, "print": 1.19307248967, "right": 0.34035985417, "key": 0.82419811896, "and": 6.29901420636e-05, "way": 0.19809150993500002, "process": 0.527829199025, "access": 0.627805882716, "visit": 0.791283218833, "too": 0.5965551547219999, "there": 0.0400978929255, "locat": 0.46854337067199997, "left": 0.364552414753, "that": 0.00397614837964, "alway": 0.726319204572, "may": 0.050709995284400004, "becaus": 0.139343158825, "ascend": 2.5976006159400002, "order": 0.22014038079300002, "random": 1.9727214065099998, "first": 0.0075872898121599995, "rememb": 1.5867691126199999, "not": 0.0155524130075, "are": 0.0294674735827, "later": 0.0829654259878, "travers": 3.1272141535699998}, "freq": {"use": 1, "general": 1, "itself": 1, "link": 1, "sort": 1, "valu": 3, "item": 1, "can": 1, "from": 1, "will": 1, "three": 1, "repres": 1, "which": 1, "via": 1, "this": 1, "should": 1, "start": 1, "binari": 1, "root": 2, "output": 1, "all": 3, "given": 1, "subtre": 3, "the": 8, "method": 1, "connect": 1, "contain": 1, "their": 1, "produc": 1, "then": 1, "inord": 1, "tree": 6, "everi": 1, "edg": 1, "search": 1, "head": 1, "node": 5, "print": 2, "right": 1, "key": 2, "and": 2, "way": 1, "process": 1, "access": 1, "visit": 2, "too": 1, "there": 1, "locat": 1, "left": 1, "that": 2, "alway": 2, "may": 2, "becaus": 1, "ascend": 1, "order": 1, "random": 1, "first": 1, "rememb": 1, "not": 1, "are": 2, "later": 1, "travers": 5}, "logtfidf": {"use": 0.0292080197316, "general": 0.114952578063, "itself": 0.5570837229510001, "link": 0.7661704068449999, "sort": 1.64639361896, "valu": 2.469579930444, "item": 1.62505430292, "can": 0.162341096394, "from": 0.000567054168866, "will": 0.202786534915, "three": 0.06411868822490001, "repres": 0.38507723275, "which": 0.00517841384543, "via": 0.831983625414, "this": 0.0037864490525, "should": 0.509419876758, "start": 0.236443369291, "binari": 3.4781584227999995, "root": 2.54966012504, "output": 2.03822657827, "all": 0.03420789629339999, "given": 0.303255810831, "subtre": 11.3760924825, "the": 0.0, "method": 0.944461608841, "connect": 0.633605058682, "contain": 0.468845318236, "their": 0.015360505122700001, "produc": 0.314320812003, "then": 0.08303386523089999, "inord": 3.7920308275, "tree": 8.5066493265, "everi": 0.391485427421, "edg": 1.4944863500499999, "search": 1.1798682540899998, "head": 0.456042582852, "node": 18.960154137500002, "print": 2.38614497934, "right": 0.34035985417, "key": 1.64839623792, "and": 0.0001259802841272, "way": 0.19809150993500002, "process": 0.527829199025, "access": 0.627805882716, "visit": 1.582566437666, "too": 0.5965551547219999, "there": 0.0400978929255, "locat": 0.46854337067199997, "left": 0.364552414753, "that": 0.00795229675928, "alway": 1.452638409144, "may": 0.10141999056880001, "becaus": 0.139343158825, "ascend": 2.5976006159400002, "order": 0.22014038079300002, "random": 1.9727214065099998, "first": 0.0075872898121599995, "rememb": 1.5867691126199999, "not": 0.0155524130075, "are": 0.0589349471654, "later": 0.0829654259878, "travers": 15.636070767849999}}, "html": "<!DOCTYPE html>\n\n<!--[if IE 8]><html class=\"ie ie8\"> <![endif]-->\n<!--[if IE 9]><html class=\"ie ie9\"> <![endif]-->\n<!--[if gt IE 9]><!--> <html> <!--<![endif]-->\n<head>\n<meta charset=\"utf-8\"/>\n<title>Data Structures and Algorithms Tree Traversal</title>\n<meta content=\"Data Structures and Algorithms Tree Traversal - Learn Data Structures and Algorithm using c, C++ and Java in simple and easy steps starting from basic to advanced concepts with examples including Overview, Environment Setup, Algorithm, Asymptotic Analysis, Greedy Algorithms, Divide and Conquer, Dynamic Programming, Data Structures, Array, Linked List, Doubly Linked List, Circular List, Stack, Parsing Expression, Queue, Priority queue, Linear, Binary, Interpolation Search, Tree, Tree Traversal, Binary Search Tree, B+, AVL, Spanning, Tower of Hanoi, Hash Table, Heap, Graph, Depth, Breadth First Traversal, Search techniques, Sorting techniques, Sorting Algorithm, Bubble, Merge Sort Algorithm, Insertion, Selection, Shell, Quick Sort, Recursion, Fibonacci Series.\" name=\"Description\">\n<meta content=\"Overview, Environment Setup, Algorithm, Asymptotic Analysis, Greedy Algorithms, Divide and Conquer, Dynamic Programming, Data Structures, Array, Linked List, Doubly Linked List, Circular List, Stack, Parsing Expression, Queue, Priority queue, Linear, Binary, Interpolation Search, Tree, Tree Traversal, Binary Search Tree, B+, AVL, Spanning, Tower of Hanoi, Hash Table, Heap, Graph, Depth, Breadth First Traversal, Search techniques, Sorting techniques, Sorting Algorithm, Bubble, Merge Sort Algorithm, Insertion, Selection, Shell, Quick Sort, Recursion, Fibonacci Series.\" name=\"Keywords\"/>\n<base href=\"https://www.tutorialspoint.com/\"/>\n<link href=\"/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"/>\n<meta content=\"width=device-width,initial-scale=1.0,user-scalable=yes\" name=\"viewport\"/>\n<meta content=\"en_US\" property=\"og:locale\">\n<meta content=\"website\" property=\"og:type\"/>\n<meta content=\"471319149685276\" property=\"fb:app_id\"/>\n<meta content=\"www.tutorialspoint.com\" property=\"og:site_name\"/>\n<meta content=\"yes\" name=\"apple-mobile-web-app-capable\"/>\n<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"/>\n<meta content=\"tutorialspoint.com\" name=\"author\"/>\n<script src=\"https://www.tutorialspoint.com/theme/js/script-min-v4.js?v=2\" type=\"text/javascript\"></script>\n<link href=\"https://www.tutorialspoint.com/theme/css/style-min.css?v=3.1\" rel=\"stylesheet\"/>\n<script>\r\nfunction openNav() {\t\r\n  document.getElementById(\"mySidenav\").style.width = \"250px\";\r\n  document.getElementById(\"right_obs\").style.display = \"block\";\r\n}\r\nfunction closeNav() {\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\nfunction close_obs_sidenav(){\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\n</script>\n<!-- Head Libs -->\n<!--[if IE 8]>\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/theme/css/ie8.css\">\r\n<![endif]-->\n<style>\r\n#privacy-banner {\r\n    position: fixed;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    max-width: 100%;\r\n    padding: 1rem .5rem;\r\n    background: #fff;\r\n    z-index: 1030;\r\n    color: #000;\r\n    font-size: 14px;\r\n    margin: 0;\r\n    display: none;\r\n    border-top: 2px solid rgb(130, 130, 130);\r\n  }\r\n  #privacy-banner p {\r\n    margin: 0;\r\n    color: #000;\r\n    text-align: center;\r\n  }\r\n  #privacy-banner a {\r\n    text-decoration: none;\r\n    margin: 20px auto 0 auto;\r\n    display: block;\r\n    max-width: 150px;\r\n  }\r\n  #privacy-banner a:hover {\r\n    text-decoration: underline;\r\n  }\r\n  #banner-learn {\r\n    color: #000;\r\n  }\r\n  #banner-accept {\r\n    padding: 7px 15px;\r\n    color: #fff;\r\n    border-radius: 5px;\r\n    background:#737373 !important;\r\n  }\r\n  @media (min-width: 768px) {\r\n    #privacy-banner {\r\n      padding: 1.5rem .5rem;\r\n    }\r\n    #privacy-banner a {\r\n      display: inline-block;\r\n      margin: 0 10px;\r\n    }\r\n}\r\nselect{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }\r\n.btnsbmt{ background: #cd3300 !important;}\r\nul.nav-list.primary>li a.videolink{    background: none; margin: 0px; padding: 0px; border: 1px solid #d6d6d6;}\r\ndiv.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #cd3300 url(/images/pattern.png) repeat center center !important;}\r\n.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #cd3300 !important;}\r\n.submenu-item{ border-bottom: 2px solid #cd3300 !important; border-top: 2px solid #cd3300 !important }\r\n.ace_scroller{overflow: auto!important;}\r\na.demo{font-family: \"Open Sans\",Arial,sans-serif; background:#cd3300; color:#fff; font-size:13px; padding:3px 10px; border:1px solid #d6d6d6; position:absolute; right:5px; margin:-6px 17px 0px 0px;}\r\na.demo:hover{opacity:.8}\r\n</style>\n<script>\r\n$(document).ready(function() {\r\n  $('input[name=\"q\"]').keydown(function(event){\r\n    if(event.keyCode == 13) {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n  });\r\n});\r\n</script>\n</meta></meta></head>\n<body onload=\"prettyPrint()\">\n<div class=\"wrapLoader\">\n<div class=\"imgLoader\">\n<img alt=\"\" height=\"70\" src=\"/images/loading-cg.gif\" width=\"70\"/>\n</div>\n</div>\n<div class=\"display-none\" id=\"right_obs\" onclick=\"close_obs_sidenav()\"></div>\n<header>\n<div class=\"container\">\n<h1 class=\"logo\">\n<a href=\"index.htm\" title=\"tutorialspoint\">\n<img alt=\"tutorialspoint\" src=\"/data_structures_algorithms/images/logo.png\"/>\n</a>\n</h1>\n<ul class=\"tp-inline-block pull-right\" id=\"tp-head-icons\">\n<li>\n<div class=\"tp-second-nav tp-display-none tp-pointer\" onclick=\"openNav()\">\n<i class=\"fa fa-th-large fa-lg\"></i>\n</div>\n</li>\n</ul>\n<button class=\"btn btn-responsive-nav btn-inverse\" data-target=\".nav-main-collapse\" data-toggle=\"collapse\" id=\"pull\" style=\"top: 24px!important\"> <i class=\"icon icon-bars\"></i> </button>\n<nav>\n<ul class=\"nav nav-pills nav-top\">\n<li><a href=\"/about/about_careers.htm\" style=\"background: #fffb09; font-weight: bold;\"><i class=\"icon icon-suitcase\"></i> Jobs</a></li>\n<li> <a href=\"/programming_examples/\" target=\"_blank\"><i class=\"fa fa-cubes\"></i> \u00a0Examples</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/whiteboard.htm\"><img alt=\"Whiteboard\" src=\"theme/css/icons/image-editor.png\" title=\"Whiteboard\"/> \u00a0Whiteboard</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/netmeeting.php\"><i class=\"fa-camera\"></i> \u00a0Net Meeting</a> </li>\n<li> <a href=\"/online_dev_tools.htm\"> <i class=\"dev-tools-menu\" style=\"opacity:.5\"></i> Tools </a> </li>\n<li> <a href=\"/articles/index.php\"><i class=\"icon icon-file-text-o\"></i> \u00a0Articles</a> </li>\n<li class=\"top-icons\">\n<ul class=\"social-icons\">\n<li class=\"facebook\"><a data-placement=\"bottom\" href=\"https://www.facebook.com/tutorialspointindia\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Facebook\">Facebook</a></li>\n<li class=\"googleplus\"><a data-placement=\"bottom\" href=\"https://plus.google.com/u/0/116678774017490391259/posts\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Google+\">Google+</a></li>\n<li class=\"twitter\"><a data-placement=\"bottom\" href=\"https://www.twitter.com/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Twitter\">Twitter</a></li>\n<li class=\"linkedin\"><a data-placement=\"bottom\" href=\"https://www.linkedin.com/company/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Linkedin\">Linkedin</a></li>\n<li class=\"youtube\"><a data-placement=\"bottom\" href=\"https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint YouTube\">YouTube</a></li>\n</ul>\n</li>\n</ul>\n</nav>\n</div>\n<div class=\"sidenav\" id=\"mySidenav\">\n<div class=\"navbar nav-main\">\n<div class=\"container\">\n<nav class=\"nav-main mega-menu\">\n<ul class=\"nav nav-pills nav-main\" id=\"mainMenu\">\n<li class=\"dropdown no-sub-menu\"> <a class=\"dropdown\" href=\"index.htm\"><i class=\"icon icon-home\"></i> Home</a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"/questions/index.php\"><i class=\"fa fa-send\"></i> Q/A </a> </li>\n<li class=\"dropdown\"><a class=\"dropdown\" href=\"tutorialslibrary.htm\"><span class=\"tut-lib\"> Library </span></a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"videotutorials/index.htm\"><i class=\"fa-toggle-right\"></i> Videos </a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"tutor_connect/index.php\"><i class=\"fa-user\"> </i> Tutors</a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"codingground.htm\"><i class=\"fa-code\"></i> Coding Ground </a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"https://store.tutorialspoint.com/\"><i class=\"fa-usd\"></i> Store </a> </li>\n<li class=\"dropdown no-sub-menu\">\n<div class=\"searchform-popup\">\n<input autocomplete=\"off\" class=\"header-search-box\" id=\"search-string\" name=\"q\" onblur=\"if (this.value == '') {this.value = 'Search your favorite tutorials...';}\" onfocus=\"if (this.value == 'Search your favorite tutorials...') {this.value = '';}\" placeholder=\"Search your favorite tutorials...\" type=\"text\"/>\n<div class=\"magnifying-glass\"><i class=\"icon-search\"></i> Search </div>\n</div>\n</li>\n</ul>\n</nav>\n</div>\n</div>\n</div>\n</header></body></html>\n\n<div style=\"clear:both;\"></div>\n<div class=\"main\" role=\"main\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-2\">\n<aside class=\"sidebar\">\n<style>\r\n.ts {\r\n   text-align:center !important;\r\n   vertical-align:middle !important;\r\n}\r\n</style>\n<div class=\"mini-logo\">\n<img alt=\"Data Structures &amp; Algorithms Tutorial\" src=\"/data_structures_algorithms/images/data-structure-mini-logo.jpg\">\n</img></div>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Data Structures &amp; Algorithms</li>\n<li><a href=\"/data_structures_algorithms/index.htm\">DSA - Home</a></li>\n<li><a href=\"/data_structures_algorithms/data_structure_overview.htm\">DSA - Overview</a></li>\n<li><a href=\"/data_structures_algorithms/data_structure_environment.htm\">DSA - Environment Setup</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Algorithm</li>\n<li><a href=\"/data_structures_algorithms/algorithms_basics.htm\">DSA - Algorithms Basics</a></li>\n<li><a href=\"/data_structures_algorithms/asymptotic_analysis.htm\">DSA - Asymptotic Analysis</a></li>\n<li><a href=\"/data_structures_algorithms/greedy_algorithms.htm\">DSA - Greedy Algorithms</a></li>\n<li><a href=\"/data_structures_algorithms/divide_and_conquer.htm\">DSA - Divide and Conquer</a></li>\n<li><a href=\"/data_structures_algorithms/dynamic_programming.htm\">DSA - Dynamic Programming</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Data Structures</li>\n<li><a href=\"/data_structures_algorithms/data_structures_basics.htm\">DSA - Data Structure Basics</a></li>\n<li><a href=\"/data_structures_algorithms/array_data_structure.htm\">DSA - Array Data Structure</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Linked Lists</li></ul></aside></div></div></div></div>\n<li><a href=\"/data_structures_algorithms/linked_list_algorithms.htm\">DSA - Linked List Basics</a></li>\n<li><a href=\"/data_structures_algorithms/doubly_linked_list_algorithm.htm\">DSA - Doubly Linked List</a></li>\n<li><a href=\"/data_structures_algorithms/circular_linked_list_algorithm.htm\">DSA - Circular Linked List</a></li>\n\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Stack &amp; Queue</li>\n<li><a href=\"/data_structures_algorithms/stack_algorithm.htm\">DSA - Stack</a></li>\n<li><a href=\"/data_structures_algorithms/expression_parsing.htm\">DSA - Expression Parsing</a></li>\n<li><a href=\"/data_structures_algorithms/dsa_queue.htm\">DSA - Queue</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Searching Techniques</li>\n<!--<li style=\"background:yellow;\"><a href=\"/data_structures_algorithms/searching_algorithms.htm\">DSA - Searching Algorithms</a></li>-->\n<li><a href=\"/data_structures_algorithms/linear_search_algorithm.htm\">DSA - Linear Search</a></li>\n<li><a href=\"/data_structures_algorithms/binary_search_algorithm.htm\">DSA - Binary Search</a></li>\n<li><a href=\"/data_structures_algorithms/interpolation_search_algorithm.htm\">DSA - Interpolation Search</a></li>\n<li><a href=\"/data_structures_algorithms/hash_data_structure.htm\">DSA - Hash Table</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Sorting Techniques</li>\n<li><a href=\"/data_structures_algorithms/sorting_algorithms.htm\">DSA - Sorting Algorithms</a></li>\n<li><a href=\"/data_structures_algorithms/bubble_sort_algorithm.htm\">DSA - Bubble Sort</a></li>\n<li><a href=\"/data_structures_algorithms/insertion_sort_algorithm.htm\">DSA - Insertion Sort</a></li>\n<li><a href=\"/data_structures_algorithms/selection_sort_algorithm.htm\">DSA - Selection Sort</a></li>\n<li><a href=\"/data_structures_algorithms/merge_sort_algorithm.htm\">DSA - Merge Sort</a></li>\n<li><a href=\"/data_structures_algorithms/shell_sort_algorithm.htm\">DSA - Shell Sort</a></li>\n<li><a href=\"/data_structures_algorithms/quick_sort_algorithm.htm\">DSA - Quick Sort</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Graph Data Structure</li>\n<li><a href=\"/data_structures_algorithms/graph_data_structure.htm\">DSA - Graph Data Structure</a></li>\n<li><a href=\"/data_structures_algorithms/depth_first_traversal.htm\">DSA - Depth First Traversal</a></li>\n<li><a href=\"/data_structures_algorithms/breadth_first_traversal.htm\">DSA - Breadth First Traversal</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Tree Data Structure</li>\n<li><a href=\"/data_structures_algorithms/tree_data_structure.htm\">DSA - Tree Data Structure</a></li>\n<li><a href=\"/data_structures_algorithms/tree_traversal.htm\">DSA - Tree Traversal</a></li>\n<li><a href=\"/data_structures_algorithms/binary_search_tree.htm\">DSA - Binary Search Tree</a></li>\n<li><a href=\"/data_structures_algorithms/avl_tree_algorithm.htm\">DSA - AVL Tree</a></li>\n<li><a href=\"/data_structures_algorithms/spanning_tree.htm\">DSA - Spanning Tree</a></li>\n<li><a href=\"/data_structures_algorithms/heap_data_structure.htm\">DSA - Heap</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Recursion</li>\n<li><a href=\"/data_structures_algorithms/recursion_basics.htm\">DSA - Recursion Basics</a></li>\n<li><a href=\"/data_structures_algorithms/tower_of_hanoi.htm\">DSA - Tower of Hanoi</a></li>\n<li><a href=\"/data_structures_algorithms/fibonacci_series.htm\">DSA - Fibonacci Series</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">DSA Useful Resources</li>\n<li><a href=\"/data_structures_algorithms/data_structures_algorithms_questions_answers.htm\">DSA - Questions and Answers</a></li>\n<li><a href=\"/data_structures_algorithms/dsa_quick_guide.htm\">DSA - Quick Guide</a></li>\n<li><a href=\"/data_structures_algorithms/dsa_useful_resources.htm\">DSA - Useful Resources</a></li>\n<li><a href=\"/data_structures_algorithms/dsa_discussion.htm\">DSA - Discussion</a></li>\n</ul>\n<ul class=\"nav nav-list primary push-bottom left-menu special\">\n<li class=\"sreading\">Selected Reading</li>\n<li><a href=\"/upsc_ias_exams.htm\" target=\"_top\">UPSC IAS Exams Notes</a></li>\n<li><a href=\"/developers_best_practices/index.htm\" target=\"_top\">Developer's Best Practices</a></li>\n<li><a href=\"/questions_and_answers.htm\" target=\"_top\">Questions and Answers</a></li>\n<li><a href=\"/effective_resume_writing.htm\" target=\"_top\">Effective Resume Writing</a></li>\n<li><a href=\"/hr_interview_questions/index.htm\" target=\"_top\">HR Interview Questions</a></li>\n<li><a href=\"/computer_glossary.htm\" target=\"_top\">Computer Glossary</a></li>\n<li><a href=\"/computer_whoiswho.htm\" target=\"_top\">Who is Who</a></li>\n</ul>\n\n\n<!-- PRINTING STARTS HERE -->\n<div class=\"row\">\n<div class=\"content\">\n<div class=\"col-md-7 middle-col\">\n<h1>Data Structure &amp; Algorithms - Tree Traversal</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align: center;\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/data_structures_algorithms/tree_data_structure.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/data_structures_algorithms/binary_search_tree.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>Traversal is a process to visit all the nodes of a tree and may print their values too. Because, all nodes are connected via edges (links) we always start from the root (head) node. That is, we cannot randomly access a node in a tree. There are three ways which we use to traverse a tree \u2212</p>\n<ul class=\"list\">\n<li>In-order Traversal</li>\n<li>Pre-order Traversal</li>\n<li>Post-order Traversal</li>\n</ul>\n<p>Generally, we traverse a tree to search or locate a given item or key in the tree or to print all the values it contains.</p>\n<h2>In-order Traversal</h2>\n<p>In this traversal method, the left subtree is visited first, then the root and later the right sub-tree. We should always remember that every node may represent a subtree itself.</p>\n<p>If a binary tree is traversed <b>in-order</b>, the output will produce sorted key values in an ascending order.</p>\n<img alt=\"In Order Traversal\" src=\"/data_structures_algorithms/images/inorder_traversal.jpg\">\n<p>We start from <b>A</b>, and following in-order traversal, we move to its left subtree <b>B</b>. <b>B</b> is also traversed in-order. The process goes on until all the nodes are visited. The output of inorder traversal of this tree will be \u2212</p>\n<p style=\"text-align:center;\"><b><i>D \u2192 B \u2192 E \u2192 A \u2192 F \u2192 C \u2192 G</i></b></p>\n<h3>Algorithm</h3>\n<pre class=\"result notranslate\">\nUntil all nodes are traversed \u2212\n<b>Step 1</b> \u2212 Recursively traverse left subtree.\n<b>Step 2</b> \u2212 Visit root node.\n<b>Step 3</b> \u2212 Recursively traverse right subtree.\n</pre>\n<h2>Pre-order Traversal</h2>\n<p>In this traversal method, the root node is visited first, then the left subtree and finally the right subtree.</p>\n<img alt=\"Pre Order Traversal\" src=\"/data_structures_algorithms/images/preorder_traversal.jpg\"/>\n<p>We start from <b>A</b>, and following pre-order traversal, we first visit <b>A</b> itself and then move to its left subtree <b>B</b>. <b>B</b> is also traversed pre-order. The process goes on until all the nodes are visited. The output of pre-order traversal of this tree will be \u2212</p>\n<p style=\"text-align:center;\"><b><i>A \u2192 B \u2192 D \u2192 E \u2192 C \u2192 F \u2192 G</i></b></p>\n<h3>Algorithm</h3>\n<pre class=\"result notranslate\">\nUntil all nodes are traversed \u2212\n<b>Step 1</b> \u2212 Visit root node.\n<b>Step 2</b> \u2212 Recursively traverse left subtree.\n<b>Step 3</b> \u2212 Recursively traverse right subtree.\n</pre>\n<h2>Post-order Traversal</h2>\n<p>In this traversal method, the root node is visited last, hence the name. First we traverse the left subtree, then the right subtree and finally the root node.</p>\n<img alt=\"Post Order Traversal\" src=\"/data_structures_algorithms/images/postorder_traversal.jpg\"/>\n<p>We start from <b>A</b>, and following Post-order traversal, we first visit the left subtree <b>B</b>. <b>B</b> is also traversed post-order. The process goes on until all the nodes are visited. The output of post-order traversal of this tree will be \u2212</p>\n<p style=\"text-align:center;\"><b><i>D \u2192 E \u2192 B \u2192 F \u2192 G \u2192 C \u2192 A</i></b></p>\n<h3>Algorithm</h3>\n<pre class=\"result notranslate\">\nUntil all nodes are traversed \u2212\n<b>Step 1</b> \u2212 Recursively traverse left subtree.\n<b>Step 2</b> \u2212 Recursively traverse right subtree.\n<b>Step 3</b> \u2212 Visit root node.\n</pre>\n<p>To check the C implementation of tree traversing, please <a href=\"/data_structures_algorithms/tree_traversal_in_c.htm\">click here</a>.</p>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/data_structures_algorithms/tree_data_structure.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/data_structures_algorithms/binary_search_tree.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</img></div>\n</div>\n<div class=\"row\">\n<div class=\"col-md-3\" id=\"rightbar\">\n<div class=\"simple-ad\">\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.facebook.com/sharer.php?u=' + 'https://www.tutorialspoint.com/data_structures_algorithms/tree_traversal.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/facebookIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://twitter.com/share?url=' + 'https://www.tutorialspoint.com/data_structures_algorithms/tree_traversal.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/twitterIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'https://www.tutorialspoint.com/data_structures_algorithms/tree_traversal.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/linkedinIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=https://www.tutorialspoint.com/data_structures_algorithms/tree_traversal.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/googlePlusIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.stumbleupon.com/submit?url=https://www.tutorialspoint.com/data_structures_algorithms/tree_traversal.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/StumbleUponIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://reddit.com/submit?url=https://www.tutorialspoint.com/data_structures_algorithms/tree_traversal.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/reddit.jpg\"/>\n</a>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\ngoogle_ad_format = \"300x250_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 600;\ngoogle_ad_format = \"300x600_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"ca-pub-2537027957187252\";\n/* Right Side Ad */\ngoogle_ad_slot = \"right_side_ad\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\n//-->\n</script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n</div>\n\n\n<div class=\"footer-copyright\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-1\">\n<a class=\"logo\" href=\"index.htm\"> <img alt=\"Tutorials Point\" class=\"img-responsive\" src=\"/scripts/img/logo-footer.png\"/> </a>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<nav id=\"sub-menu\">\n<ul>\n<li><a href=\"/about/about_privacy.htm\">Privacy Policy</a></li>\n<li><a href=\"/about/about_cookies.htm\">Cookies Policy</a></li>\n<li><a href=\"/about/contact_us.htm\">Contact</a></li>\n</ul>\n</nav>\n</div>\n<div class=\"col-md-3 col-sm-12 col-xs-12\">\n<p>\u00a9 Copyright 2019. All Rights Reserved.</p>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<div class=\"news-group\">\n<input autocomplete=\"off\" class=\"form-control-foot search\" id=\"textemail\" name=\"textemail\" onblur=\"if (this.value == '') {this.value = 'Enter email for newsletter...';}\" onfocus=\"if (this.value == 'Enter email for newsletter...') {this.value = '';}\" placeholder=\"Enter email for newsletter\" type=\"text\"/>\n<span class=\"input-group-btn\"> <button class=\"btn btn-default btn-footer\" id=\"btnemail\" onclick=\"javascript:void(0);\" type=\"submit\">go</button> </span>\n<div id=\"newsresponse\"></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n\n<div id=\"privacy-banner\">\n<div>\n<p>\n      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.\n      <a href=\"javascript:void(0)\" id=\"banner-accept\">Accept</a>\n<a href=\"/about/about_cookies.htm\" id=\"banner-learn\" target=\"_blank\">Learn more</a>\n</p>\n</div>\n</div>\n<script>\n// Banner Trigger if Not Closed\nif (!localStorage.bannerClosed) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n} else {\n  document.getElementById('privacy-banner').style.display = \"none\";\n}\ndocument.getElementById('banner-accept').addEventListener('click', function() {\n  document.getElementById('privacy-banner').style.display = \"none\";\n  localStorage.bannerClosed = 'true';\n});\nif (navigator.userAgent.match(/Opera|OPR\\//)) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n}\n</script>\n<!-- Libs -->\n<script src=\"/theme/js/custom-min.js?v=7\"></script>\n<script src=\"https://www.google-analytics.com/urchin.js\">\n</script>\n<script>\n_uacct = \"UA-232293-6\";\nurchinTracker();\n$('.pg-icon').click(function(){\n   $('.wrapLoader').show();\n});\n</script>\n\n\n\n", "content_html": "<p>Traversal is a process to visit all the nodes of a tree and may print their values too. Because, all nodes are connected via edges (links) we always start from the root (head) node. That is, we cannot randomly access a node in a tree. There are three ways which we use to traverse a tree \u2212</p> <p>Generally, we traverse a tree to search or locate a given item or key in the tree or to print all the values it contains.</p> <p>In this traversal method, the left subtree is visited first, then the root and later the right sub-tree. We should always remember that every node may represent a subtree itself.</p> <p>If a binary tree is traversed <b>in-order</b>, the output will produce sorted key values in an ascending order.</p> ", "content": "Traversal is a process to visit all the nodes of a tree and may print their values too. Because, all nodes are connected via edges (links) we always start from the root (head) node. That is, we cannot randomly access a node in a tree. There are three ways which we use to traverse a tree \u2212 Generally, we traverse a tree to search or locate a given item or key in the tree or to print all the values it contains. In this traversal method, the left subtree is visited first, then the root and later the right sub-tree. We should always remember that every node may represent a subtree itself. If a binary tree is traversed in-order , the output will produce sorted key values in an ascending order.", "read_time": 39.3, "title_html": "<h1>Data Structure &amp; Algorithms - Tree Traversal</h1> ", "url": "https://www.tutorialspoint.com/data_structures_algorithms/tree_traversal.htm"}