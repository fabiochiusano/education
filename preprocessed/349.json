{"title": "Data Visualization in Python: Matplotlib vs Seaborn", "tfidf": {"tfidf": {"requir": 1.52844902282, "text": 3.12827586207, "one": 1.00627495722, "give": 1.3653250774, "semicolon": 481.09090909099996, "between": 1.03453668708, "matplotlib": 12700.8, "commmand": 1587.6, "unapp": 396.9, "function": 2.495441685, "packag": 15.656804733720001, "when": 2.0415353951, "from": 2.00113442994, "more": 1.0171706817, "asel": 1587.6, "otherwis": 3.72151898734, "normal": 5.22150962012, "end": 1.10680423871, "bike": 98.60869565200001, "plt": 3175.2, "argument": 5.09335899904, "abov": 3.80765079746, "command": 2.66689064337, "structur": 2.0580762250499998, "were": 1.02458857696, "great": 1.26592775696, "easi": 5.2937645882, "dataset": 387.219512196, "can": 3.52878417426, "includ": 1.0190641247799999, "point": 2.51980001588, "execut": 8.9454852796, "notebookipython": 1587.6, "correspond": 3.32481675393, "amount": 2.27027027027, "modul": 16.9434364995, "handi": 102.425806452, "and": 5.00031496065, "contain": 1.59814777532, "machin": 4.02433460076, "will": 7.34886591576, "temp": 63.2509960159, "new": 1.0178880554, "capabl": 3.6580645161300005, "this": 5.0189681335500005, "last": 1.2117234010100002, "offer": 1.53896859248, "format": 2.53125, "share": 1.8566249561500001, "seaborn": 140.495575221, "convey": 12.297443842, "method": 2.5714285714300003, "code": 19.4035688096, "user": 15.4210781933, "yaxi": 1587.6, "pyplot": 3175.2, "use": 2.0592775147599998, "other": 1.00992366412, "run": 1.55692850838, "there": 2.08182533438, "has": 1.0436497502, "visual": 10.45505432994, "season": 8.488326501509999, "temperatur": 16.36701030927, "learn": 2.32275054865, "rang": 1.7848229342299997, "alway": 2.06745670009, "import": 4.020597670110001, "that": 4.015936255, "becaus": 1.1495184997499999, "than": 1.03278688525, "comment": 3.05954904606, "not": 1.01567398119, "high": 1.14777327935, "gone": 5.22408687068, "exclus": 3.40906162766, "need": 1.4372623574099999, "mendi": 721.636363636, "later": 1.08650424309, "everytim": 1587.6, "some": 1.04036697248, "line": 1.4182597820299998, "type": 2.0281042411900003, "repositori": 44.974504249300004, "generat": 4.10550814584, "librari": 5.3653261237, "influenti": 4.520501138949999, "see": 3.81726376533, "column": 7.078020508250001, "for": 1.00031504001, "edit": 1.99297012302, "fix": 4.4346368715099995, "which": 1.005191845, "color": 7.6510843373399995, "work": 1.11520089913, "relationship": 2.39132399458, "tutori": 118.9213483146, "initi": 1.35, "varieti": 2.2972073506, "pass": 3.23636734278, "posit": 1.37252528746, "versatil": 33.1440501044, "guid": 2.49113447356, "figur": 2.0343413634, "python": 112.5957446808, "make": 2.1525320317200003, "array": 10.1444089457, "whenev": 11.622254758399999, "num": 2.00063008002, "plot": 59.21871820953001, "much": 2.3884459154599997, "scatter": 37.55410999408, "string": 8.37783641161, "add": 4.61243463103, "datafram": 1587.6, "the": 28.0, "let": 6.97233201582, "determin": 2.1658935879900003, "kdnugget": 1587.6, "differ": 2.4730898045, "creat": 2.4985835694, "day": 1.18371607516, "easier": 7.84, "output": 15.353965183760002, "automat": 6.787516032490001, "data": 13.50574223736, "matplotliib": 1587.6, "chunk": 243.0, "tip": 9.42195845697, "without": 1.29547123623, "how": 1.60250328051, "show": 2.5340782123, "demonstr": 5.29994992488, "inform": 4.72593768606, "numpi": 1587.6, "inlin": 200.962025316, "cnt": 529.2, "jupyt": 1587.6, "with": 2.0023964179799996, "rental": 74.6520376176, "quick": 2.205, "arsenal": 22.583214793699998, "most": 1.02096463023, "doe": 1.70581282905, "matplotlibpyplot": 1587.6, "follow": 1.04640126549, "linear": 13.8776223776, "xaxi": 1587.6, "time": 1.01127460348, "group": 1.20996875238, "underneath": 19.4797546012, "customiz": 407.07692307699995, "below": 2.25607503197, "veri": 1.25880114177}, "idf": {"requir": 1.52844902282, "text": 3.12827586207, "one": 1.00627495722, "give": 1.3653250774, "semicolon": 481.09090909099996, "between": 1.03453668708, "matplotlib": 1587.6, "commmand": 1587.6, "unapp": 396.9, "function": 2.495441685, "packag": 7.828402366860001, "when": 1.02076769755, "from": 1.00056721497, "more": 1.0171706817, "asel": 1587.6, "otherwis": 3.72151898734, "normal": 2.61075481006, "end": 1.10680423871, "bike": 24.652173913000002, "plt": 1587.6, "argument": 5.09335899904, "abov": 1.90382539873, "command": 2.66689064337, "structur": 2.0580762250499998, "were": 1.02458857696, "great": 1.26592775696, "easi": 5.2937645882, "dataset": 193.609756098, "can": 1.17626139142, "includ": 1.0190641247799999, "point": 1.25990000794, "execut": 2.2363713199, "notebookipython": 1587.6, "correspond": 3.32481675393, "amount": 2.27027027027, "modul": 16.9434364995, "handi": 102.425806452, "and": 1.00006299213, "contain": 1.59814777532, "machin": 4.02433460076, "will": 1.22481098596, "temp": 63.2509960159, "new": 1.0178880554, "capabl": 3.6580645161300005, "this": 1.00379362671, "last": 1.2117234010100002, "offer": 1.53896859248, "format": 2.53125, "share": 1.8566249561500001, "seaborn": 140.495575221, "convey": 12.297443842, "method": 2.5714285714300003, "code": 3.8807137619199996, "user": 7.71053909665, "yaxi": 1587.6, "pyplot": 1587.6, "use": 1.0296387573799999, "other": 1.00992366412, "run": 1.55692850838, "there": 1.04091266719, "has": 1.0436497502, "visual": 5.22752716497, "season": 2.82944216717, "temperatur": 5.45567010309, "learn": 2.32275054865, "rang": 1.7848229342299997, "alway": 2.06745670009, "import": 1.3401992233700002, "that": 1.00398406375, "becaus": 1.1495184997499999, "than": 1.03278688525, "comment": 3.05954904606, "not": 1.01567398119, "high": 1.14777327935, "gone": 5.22408687068, "exclus": 3.40906162766, "need": 1.4372623574099999, "mendi": 721.636363636, "later": 1.08650424309, "everytim": 1587.6, "some": 1.04036697248, "line": 1.4182597820299998, "type": 2.0281042411900003, "repositori": 44.974504249300004, "generat": 2.05275407292, "librari": 2.68266306185, "influenti": 4.520501138949999, "see": 1.27242125511, "column": 7.078020508250001, "for": 1.00031504001, "edit": 1.99297012302, "fix": 4.4346368715099995, "which": 1.005191845, "color": 3.8255421686699997, "work": 1.11520089913, "relationship": 2.39132399458, "tutori": 59.4606741573, "initi": 1.35, "varieti": 2.2972073506, "pass": 1.61818367139, "posit": 1.37252528746, "versatil": 33.1440501044, "guid": 2.49113447356, "figur": 2.0343413634, "python": 56.2978723404, "make": 1.0762660158600001, "array": 10.1444089457, "whenev": 11.622254758399999, "num": 1.00031504001, "plot": 5.383519837230001, "much": 1.1942229577299999, "scatter": 9.38852749852, "string": 8.37783641161, "add": 4.61243463103, "datafram": 1587.6, "the": 1.0, "let": 3.48616600791, "determin": 2.1658935879900003, "kdnugget": 1587.6, "differ": 1.23654490225, "creat": 1.2492917847, "day": 1.18371607516, "easier": 7.84, "output": 7.676982591880001, "automat": 6.787516032490001, "data": 3.37643555934, "matplotliib": 1587.6, "chunk": 81.0, "tip": 9.42195845697, "without": 1.29547123623, "how": 1.60250328051, "show": 1.26703910615, "demonstr": 2.64997496244, "inform": 1.5753125620200001, "numpi": 1587.6, "inlin": 100.481012658, "cnt": 529.2, "jupyt": 1587.6, "with": 1.0011982089899998, "rental": 24.8840125392, "quick": 2.205, "arsenal": 22.583214793699998, "most": 1.02096463023, "doe": 1.70581282905, "matplotlibpyplot": 1587.6, "follow": 1.04640126549, "linear": 13.8776223776, "xaxi": 1587.6, "time": 1.01127460348, "group": 1.20996875238, "underneath": 19.4797546012, "customiz": 407.07692307699995, "below": 2.25607503197, "veri": 1.25880114177}, "logidf": {"requir": 0.424253510675, "text": 1.14048200999, "one": 0.0062553516455, "give": 0.311392552224, "semicolon": 6.17605625244, "between": 0.033953681165299995, "matplotlib": 7.369978720910001, "commmand": 7.369978720910001, "unapp": 5.98368435979, "function": 0.914465741594, "packag": 2.0577584491900005, "when": 0.0205549888584, "from": 0.000567054168866, "more": 0.017024931599999998, "asel": 7.369978720910001, "otherwis": 1.3141319148700001, "normal": 0.959639378783, "end": 0.101476798618, "bike": 3.2048650877999996, "plt": 7.369978720910001, "argument": 1.62793753414, "abov": 0.643865229816, "command": 0.9809132407500001, "structur": 0.7217716751350001, "were": 0.024291143681099997, "great": 0.235805258079, "easi": 1.6665296351499999, "dataset": 5.26584456664, "can": 0.162341096394, "includ": 0.0188846813905, "point": 0.23103235903299998, "execut": 0.804854605864, "notebookipython": 7.369978720910001, "correspond": 1.20141456099, "amount": 0.819898886199, "modul": 2.82988053166, "handi": 4.62913869698, "and": 6.29901420636e-05, "contain": 0.468845318236, "machin": 1.39235958062, "will": 0.202786534915, "temp": 4.14711087477, "new": 0.0177299468511, "capabl": 1.2969341868100002, "this": 0.0037864490525, "last": 0.19204364461100001, "offer": 0.431112446902, "format": 0.9287132518729999, "share": 0.618760299747, "seaborn": 4.94517599519, "convey": 2.50939142306, "method": 0.944461608841, "code": 1.35601909597, "user": 2.04258810688, "yaxi": 7.369978720910001, "pyplot": 7.369978720910001, "use": 0.0292080197316, "other": 0.00987474791976, "run": 0.442714975539, "there": 0.0400978929255, "has": 0.0427239448548, "visual": 1.6539383488600001, "season": 1.04007957815, "temperatur": 1.6966554537399998, "learn": 0.842752064745, "rang": 0.579319213803, "alway": 0.726319204572, "import": 0.292818277066, "that": 0.00397614837964, "becaus": 0.139343158825, "than": 0.0322608622182, "comment": 1.11826753454, "not": 0.0155524130075, "high": 0.13782378654000002, "gone": 1.65328002099, "exclus": 1.22643707092, "need": 0.362740163442, "mendi": 6.58152136054, "later": 0.0829654259878, "everytim": 7.369978720910001, "some": 0.0395735090645, "line": 0.349430614452, "type": 0.707101485387, "repositori": 3.8060957569699996, "generat": 0.719182341736, "librari": 0.986809980943, "influenti": 1.50862285915, "see": 0.240921585492, "column": 1.95699427938, "for": 0.00031499039539700004, "edit": 0.6896260501610001, "fix": 1.48944573451, "which": 0.00517841384543, "color": 1.3417002006799998, "work": 0.109034567273, "relationship": 0.871847185184, "tutori": 4.0853151555, "initi": 0.30010459245, "varieti": 0.8316941898119999, "pass": 0.48130432974, "posit": 0.316652318608, "versatil": 3.50086321649, "guid": 0.912738218589, "figur": 0.7101721121600001, "python": 4.03065674296, "make": 0.07349765782289999, "array": 2.31692271093, "whenev": 2.45292177377, "num": 0.00031499039539700004, "plot": 1.68334240509, "much": 0.17749572930100002, "scatter": 2.239488465, "string": 2.1255896963900005, "add": 1.52875583713, "datafram": 7.369978720910001, "the": 0.0, "let": 1.2488025672799998, "determin": 0.772833019022, "kdnugget": 7.369978720910001, "differ": 0.212321121312, "creat": 0.222576818514, "day": 0.16865870631700003, "easier": 2.05923883436, "output": 2.03822657827, "automat": 1.9150850473199998, "data": 1.2168205848, "matplotliib": 7.369978720910001, "chunk": 4.394449154669999, "tip": 2.2430429711200004, "without": 0.258874517941, "how": 0.47156695693000006, "show": 0.236682766013, "demonstr": 0.9745501918189999, "inform": 0.454453704662, "numpi": 7.369978720910001, "inlin": 4.609968780880001, "cnt": 6.27136643224, "jupyt": 7.369978720910001, "with": 0.00119749171339, "rental": 3.21422553056, "quick": 0.790727508899, "arsenal": 3.11720692209, "most": 0.020747896295599998, "doe": 0.5340417297169999, "matplotlibpyplot": 7.369978720910001, "follow": 0.045356911094199995, "linear": 2.63027764196, "xaxi": 7.369978720910001, "time": 0.0112115188626, "group": 0.190594534797, "underneath": 2.9693757006599997, "customiz": 6.009002167769999, "below": 0.813626591936, "veri": 0.230159793238}, "freq": {"requir": 1, "text": 1, "one": 1, "give": 1, "semicolon": 1, "between": 1, "matplotlib": 8, "commmand": 1, "unapp": 1, "function": 1, "packag": 2, "when": 2, "from": 2, "more": 1, "asel": 1, "otherwis": 1, "normal": 2, "end": 1, "bike": 4, "plt": 2, "argument": 1, "abov": 2, "command": 1, "structur": 1, "were": 1, "great": 1, "easi": 1, "dataset": 2, "can": 3, "includ": 1, "point": 2, "execut": 4, "notebookipython": 1, "correspond": 1, "amount": 1, "modul": 1, "handi": 1, "and": 5, "contain": 1, "machin": 1, "will": 6, "temp": 1, "new": 1, "capabl": 1, "this": 5, "last": 1, "offer": 1, "format": 1, "share": 1, "seaborn": 1, "convey": 1, "method": 1, "code": 5, "user": 2, "yaxi": 1, "pyplot": 2, "use": 2, "other": 1, "run": 1, "there": 2, "has": 1, "visual": 2, "season": 3, "temperatur": 3, "learn": 1, "rang": 1, "alway": 1, "import": 3, "that": 4, "becaus": 1, "than": 1, "comment": 1, "not": 1, "high": 1, "gone": 1, "exclus": 1, "need": 1, "mendi": 1, "later": 1, "everytim": 1, "some": 1, "line": 1, "type": 1, "repositori": 1, "generat": 2, "librari": 2, "influenti": 1, "see": 3, "column": 1, "for": 1, "edit": 1, "fix": 1, "which": 1, "color": 2, "work": 1, "relationship": 1, "tutori": 2, "initi": 1, "varieti": 1, "pass": 2, "posit": 1, "versatil": 1, "guid": 1, "figur": 1, "python": 2, "make": 2, "array": 1, "whenev": 1, "num": 2, "plot": 11, "much": 2, "scatter": 4, "string": 1, "add": 1, "datafram": 1, "the": 28, "let": 2, "determin": 1, "kdnugget": 1, "differ": 2, "creat": 2, "day": 1, "easier": 1, "output": 2, "automat": 1, "data": 4, "matplotliib": 1, "chunk": 3, "tip": 1, "without": 1, "how": 1, "show": 2, "demonstr": 2, "inform": 3, "numpi": 1, "inlin": 2, "cnt": 1, "jupyt": 1, "with": 2, "rental": 3, "quick": 1, "arsenal": 1, "most": 1, "doe": 1, "matplotlibpyplot": 1, "follow": 1, "linear": 1, "xaxi": 1, "time": 1, "group": 1, "underneath": 1, "customiz": 1, "below": 1, "veri": 1}, "logtfidf": {"requir": 0.424253510675, "text": 1.14048200999, "one": 0.0062553516455, "give": 0.311392552224, "semicolon": 6.17605625244, "between": 0.033953681165299995, "matplotlib": 58.959829767280006, "commmand": 7.369978720910001, "unapp": 5.98368435979, "function": 0.914465741594, "packag": 4.115516898380001, "when": 0.0411099777168, "from": 0.001134108337732, "more": 0.017024931599999998, "asel": 7.369978720910001, "otherwis": 1.3141319148700001, "normal": 1.919278757566, "end": 0.101476798618, "bike": 12.819460351199998, "plt": 14.739957441820001, "argument": 1.62793753414, "abov": 1.287730459632, "command": 0.9809132407500001, "structur": 0.7217716751350001, "were": 0.024291143681099997, "great": 0.235805258079, "easi": 1.6665296351499999, "dataset": 10.53168913328, "can": 0.487023289182, "includ": 0.0188846813905, "point": 0.46206471806599997, "execut": 3.219418423456, "notebookipython": 7.369978720910001, "correspond": 1.20141456099, "amount": 0.819898886199, "modul": 2.82988053166, "handi": 4.62913869698, "and": 0.000314950710318, "contain": 0.468845318236, "machin": 1.39235958062, "will": 1.2167192094900001, "temp": 4.14711087477, "new": 0.0177299468511, "capabl": 1.2969341868100002, "this": 0.0189322452625, "last": 0.19204364461100001, "offer": 0.431112446902, "format": 0.9287132518729999, "share": 0.618760299747, "seaborn": 4.94517599519, "convey": 2.50939142306, "method": 0.944461608841, "code": 6.78009547985, "user": 4.08517621376, "yaxi": 7.369978720910001, "pyplot": 14.739957441820001, "use": 0.0584160394632, "other": 0.00987474791976, "run": 0.442714975539, "there": 0.080195785851, "has": 0.0427239448548, "visual": 3.3078766977200003, "season": 3.12023873445, "temperatur": 5.089966361219999, "learn": 0.842752064745, "rang": 0.579319213803, "alway": 0.726319204572, "import": 0.878454831198, "that": 0.01590459351856, "becaus": 0.139343158825, "than": 0.0322608622182, "comment": 1.11826753454, "not": 0.0155524130075, "high": 0.13782378654000002, "gone": 1.65328002099, "exclus": 1.22643707092, "need": 0.362740163442, "mendi": 6.58152136054, "later": 0.0829654259878, "everytim": 7.369978720910001, "some": 0.0395735090645, "line": 0.349430614452, "type": 0.707101485387, "repositori": 3.8060957569699996, "generat": 1.438364683472, "librari": 1.973619961886, "influenti": 1.50862285915, "see": 0.722764756476, "column": 1.95699427938, "for": 0.00031499039539700004, "edit": 0.6896260501610001, "fix": 1.48944573451, "which": 0.00517841384543, "color": 2.6834004013599997, "work": 0.109034567273, "relationship": 0.871847185184, "tutori": 8.170630311, "initi": 0.30010459245, "varieti": 0.8316941898119999, "pass": 0.96260865948, "posit": 0.316652318608, "versatil": 3.50086321649, "guid": 0.912738218589, "figur": 0.7101721121600001, "python": 8.06131348592, "make": 0.14699531564579998, "array": 2.31692271093, "whenev": 2.45292177377, "num": 0.0006299807907940001, "plot": 18.516766455990002, "much": 0.35499145860200004, "scatter": 8.95795386, "string": 2.1255896963900005, "add": 1.52875583713, "datafram": 7.369978720910001, "the": 0.0, "let": 2.4976051345599997, "determin": 0.772833019022, "kdnugget": 7.369978720910001, "differ": 0.424642242624, "creat": 0.445153637028, "day": 0.16865870631700003, "easier": 2.05923883436, "output": 4.07645315654, "automat": 1.9150850473199998, "data": 4.8672823392, "matplotliib": 7.369978720910001, "chunk": 13.183347464009998, "tip": 2.2430429711200004, "without": 0.258874517941, "how": 0.47156695693000006, "show": 0.473365532026, "demonstr": 1.9491003836379999, "inform": 1.363361113986, "numpi": 7.369978720910001, "inlin": 9.219937561760002, "cnt": 6.27136643224, "jupyt": 7.369978720910001, "with": 0.00239498342678, "rental": 9.642676591679999, "quick": 0.790727508899, "arsenal": 3.11720692209, "most": 0.020747896295599998, "doe": 0.5340417297169999, "matplotlibpyplot": 7.369978720910001, "follow": 0.045356911094199995, "linear": 2.63027764196, "xaxi": 7.369978720910001, "time": 0.0112115188626, "group": 0.190594534797, "underneath": 2.9693757006599997, "customiz": 6.009002167769999, "below": 0.813626591936, "veri": 0.230159793238}}, "url": "https://www.kdnuggets.com/2019/04/data-visualization-python-matplotlib-seaborn.html", "html": "<!DOCTYPE html>\n\n<html lang=\"en-US\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head profile=\"http://gmpg.org/xfn/11\">\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n<title>  Data Visualization in Python: Matplotlib vs Seaborn</title>\n<link href=\"/wp-content/themes/kdn17/images/favicon.ico\" rel=\"shortcut icon\"/>\n<link href=\"/wp-content/themes/kdn17/style.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"/wp-content/themes/kdn17/js/jquery-1.9.1.min.js\" type=\"text/javascript\"></script>\n<script src=\"/aps/kda_all.js\" type=\"text/javascript\"></script>\n<link href=\"/feed/\" rel=\"alternate\" title=\"KDnuggets: Analytics, Big Data, Data Mining and Data Science Feed\" type=\"application/rss+xml\"/>\n<link href=\"//s.w.org\" rel=\"dns-prefetch\"/>\n<link href=\"https://www.kdnuggets.com/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/comments/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/2019/04/data-visualization-python-matplotlib-seaborn.html/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Data Visualization in Python: Matplotlib vs Seaborn Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-json/\" rel=\"https://api.w.org/\"/>\n<link href=\"https://www.kdnuggets.com/xmlrpc.php?rsd\" rel=\"EditURI\" title=\"RSD\" type=\"application/rsd+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-includes/wlwmanifest.xml\" rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\"/>\n<link href=\"https://www.kdnuggets.com/2019/04/intel-unleash-faster-python-data.html\" rel=\"prev\" title=\"Unleash a faster Python on your data\"/>\n<link href=\"https://www.kdnuggets.com/jobs/19/04-19-nasdaq100-leader-data-science.html\" rel=\"next\" title=\"NASDAQ 100: Leader of Data Science [East Coast]\"/>\n<meta content=\"WordPress 4.9.10\" name=\"generator\">\n<link href=\"https://www.kdnuggets.com/2019/04/data-visualization-python-matplotlib-seaborn.html\" rel=\"canonical\"/>\n<link href=\"https://www.kdnuggets.com/?p=90677\" rel=\"shortlink\"/>\n<link href=\"https://www.kdnuggets.com/2019/04/data-visualization-python-matplotlib-seaborn.html\" rel=\"canonical\"/>\n<!-- BEGIN ExactMetrics v5.3.7 Universal Analytics - https://exactmetrics.com/ -->\n<script>\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-361129-1', 'auto');\n  ga('send', 'pageview');\n</script>\n<!-- END ExactMetrics Universal Analytics -->\n</meta></head>\n<body class=\"post-template-default single single-post postid-90677 single-format-standard\">\n<div class=\"main_wrapper\"><!-- publ: 19-Apr, 2019  -->\n<div id=\"wrapper\">\n<div id=\"header\">\n<div id=\"header_log\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<h1>KDnuggets</h1>\n<div class=\"text-container\">\n            \u00a0\u00a0<a href=\"/news/subscribe.html\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a> \u00a0|\n <a href=\"https://twitter.com/kdnuggets\" target=\"_blank\"><img alt=\"Twitter\" height=\"48\" src=\"/images/tw_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n <a href=\"https://www.facebook.com/kdnuggets\" target=\"_blank\"><img alt=\"Facebook\" height=\"48\" src=\"/images/fb_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n<a href=\"https://www.linkedin.com/groups/54257/\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"48\" src=\"/images/in_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \n\u00a0|\u00a0 <a href=\"/contact.html\"><b>Contact</b></a>\n</div>\n</div>\n<div class=\"search\">\n<form action=\"/\" id=\"searchform\" method=\"get\">\n<input id=\"s\" name=\"s\" placeholder=\"search KDnuggets\" type=\"text\" value=\"\"/>\n<input type=\"submit\" value=\"Search\"/></form>\n</div>\n<div href=\"#\" id=\"pull\">\n<img class=\"menu\" src=\"/images/menu-30.png\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<img class=\"search-icon\" src=\"/images/search-icon.png\">\n</img></img></div>\n<div id=\"pull-menu\">\n<div class=\"navigation\"><ul class=\"menu\" id=\"menu-menu\"><li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-1070\" id=\"menu-item-1070\"><a href=\"/software/index.html\" title=\"Data Science Software\">SOFTWARE</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13756\" id=\"menu-item-13756\"><a href=\"/news/index.html\" title=\"News\">News/Blog</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-46286\" id=\"menu-item-46286\"><a href=\"/news/top-stories.html\">Top stories</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-42152\" id=\"menu-item-42152\"><a href=\"https://www.kdnuggets.com/opinions/index.html\" title=\"Opinions\">Opinions</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-46415\" id=\"menu-item-46415\"><a href=\"https://www.kdnuggets.com/tutorials/index.html\">Tutorials</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13364\" id=\"menu-item-13364\"><a href=\"/jobs/index.html\" title=\"Jobs in Analytics, Data Science\">JOBS</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-63505\" id=\"menu-item-63505\"><a href=\"https://www.kdnuggets.com/companies/index.html\">Companies</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13366\" id=\"menu-item-13366\"><a href=\"/courses/index.html\">Courses</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-1499\" id=\"menu-item-1499\"><a href=\"https://www.kdnuggets.com/datasets/index.html\">Datasets</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-14286\" id=\"menu-item-14286\"><a href=\"https://www.kdnuggets.com/education/index.html\" title=\"Education in Analytics, Big Data, Data Science\">EDUCATION</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-51558\" id=\"menu-item-51558\"><a href=\"https://www.kdnuggets.com/education/analytics-data-mining-certificates.html\" title=\"Certificates in Analytics, Big Data, Data Science\">Certificates</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-14752\" id=\"menu-item-14752\"><a href=\"/meetings/index.html\">Meetings</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13721\" id=\"menu-item-13721\"><a href=\"/webcasts/index.html\" title=\"Webcasts and Webinars\">Webinars</a></li>\n</ul></div></div>\n</div> <!--#header end-->\n<div id=\"spacer\">\n         \u00a0\n      </div>\n<div id=\"content_wrapper\">\n<div id=\"ad_wrapper\">\n<script type=\"text/javascript\">\n\tjQuery(function() {\n   \t    var pull        = $('#pull');\n            menu        = $('#header .navigation ul');\n            menuImage = $('#header img.menu');\n            mobileMenu        = $('#pull-menu-mobile');\n            search = $('img.search-icon');\n            searchBar = $('div.search');\n            searchClick = false;\n            search.on('click', function() {\n                  searchBar.slideToggle();\n                  searchClick = true;\n            });  \n     \t    $(menuImage).on('click', function(e) {\n\t        //e.preventDefault();\n                if (!searchClick) {\n                  menu.slideToggle();\n                }\n                searchClick = false;\n\t    });\n           /* pullMobile.on('click', function(e) {\n              e.preventDefault();\n                if (!searchClick) {\n                  mobileMenu.slideToggle();\n                }\n                searchClick = false;\n\t    });*/\n            \n\t});\n\tkpath = '/'; kda_top(); kda_sid_init(); kda_sid_n=3;\n\t</script>\n</div> <div class=\"breadcumb\">\n<br/>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2019/index.html\">2019</a> \u00bb <a href=\"https://www.kdnuggets.com/2019/04/index.html\">Apr</a> \u00bb <a href=\"https://www.kdnuggets.com/2019/04/tutorials.html\">Tutorials, Overviews</a> \u00bb Data Visualization in Python: Matplotlib vs Seaborn (\u00a0<a href=\"/2019/n16.html\">19:n16</a>\u00a0)    </div>\n<div class=\"single\" id=\"content\">\n<div id=\"post-header\">\n<h1 id=\"title\">Data Visualization in Python: Matplotlib vs Seaborn</h1>\n<div class=\"pagi\">\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2019/04/intel-unleash-faster-python-data.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"> <strong>Previous post</strong></img></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/jobs/19/04-19-nasdaq100-leader-data-science.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/>\u00a0<br/>\u00a0\n    <div class=\"addthis_native_toolbox\"></div>\n</div>\n<div class=\"tag-data\">Tags: <a href=\"https://www.kdnuggets.com/tag/advice\" rel=\"tag\">Advice</a>, <a href=\"https://www.kdnuggets.com/tag/data-visualization\" rel=\"tag\">Data Visualization</a>, <a href=\"https://www.kdnuggets.com/tag/matplotlib\" rel=\"tag\">Matplotlib</a>, <a href=\"https://www.kdnuggets.com/tag/python\" rel=\"tag\">Python</a>, <a href=\"https://www.kdnuggets.com/tag/seaborn\" rel=\"tag\">Seaborn</a></div>\n<br/>\n<p class=\"excerpt\">\n     Seaborn and Matplotlib are two of Python's most powerful visualization libraries. Seaborn uses fewer syntax and has stunning default themes and Matplotlib is more easily customizable through accessing the classes.\n  </p>\n</div>\n<div id=\"post-header-ad\">\n<script type=\"text/javascript\">kda_sid_write(1); kda_sid_n=2;</script>\n</div>\n<hr class=\"grey-line\"/><br/>\n<div class=\"post\" id=\"post-\">\n<div class=\"author-link\"><b>By <a href=\"https://www.kdnuggets.com/author/asel-mendis\" rel=\"author\" title=\"Posts by Asel Mendis\">Asel Mendis</a>, KDnuggets.</b></div>\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<div style=\"text-align:center\"><img alt=\"matplotlib-vs-seaborn\" src=\"/wp-content/uploads/matplotlib-vs-seaborn.jpg\" width=\"90%\"/></div>\n<p>Python offers a variety of packages for plotting data. This tutorial will use the following packages to demonstrate Python's plotting capabilities:</p>\n<ul>\n<li><a href=\"https://matplotlib.org/\" rel=\"noopener noreferrer\" target=\"_blank\">Matplotlib</a></li>\n<li><a href=\"https://seaborn.pydata.org/\" rel=\"noopener noreferrer\" target=\"_blank\">Seaborn</a></li>\n</ul>\n<p>\u00a0</p>\n<h3>Matplotlib </h3>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre><code>import matplotlib.pyplot as plt\r\n%matplotlib inline\r\nimport numpy as np</code></pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>In the above code chunk, we import the Matplotliib library with the <code>PyPlot</code> module as <code>plt</code> This is to make it easier to execute commmands as we will see later on in the tutorial. <code>PyPlot</code> contains a range of commands required to create and edit plots. <code>%matplotlib inline</code> is run so that the plot will show underneath the code chunk automatically when it is executed. Otherwise the user will need to type <code>plt.show()</code> everytime a new plot is created. This functionality is exclusive to Jupyter Notebook/IPython. Matplotlib's highly customizable code structure makes it a great guide to other plotting libraries. Lets see how we can generate a scatter plot from matplotlib.</p>\n<p><strong><em>A handy tip is that whenever matplotlib is executed, the output will always include a text output that can be very visually unappealing. To fix this, add a semicolon - ';' at the end of the last line of code when executing a code chunk to generate a figure.</em></strong></p>\n<p>The dataset used is the <a href=\"https://archive.ics.uci.edu/ml/datasets/bike+sharing+dataset\" rel=\"noopener noreferrer\" target=\"_blank\">Bike Sharing Dataset</a> from the UCI Machine Learning Repository.</p>\n<p>\u00a0</p>\n<h3>Matplotlib: Scatter Plot </h3>\n<p>\u00a0<br>\nA scatter plot is one of the most influential, informative, and versatile plots in your arsenal. It can convey an array of information to the user without much work (as demonstrated below)</br></p>\n<ul>\n<li><code>plt.scatter()</code> will give us a scatter plot of the data we pass in as the initial arguments. <code>temp</code> is the x-axis and <code>cnt</code> is the y-axis.</li>\n<li><code>c</code> determines the colors of the data points. Because we passed a string - 'season' which is a column of the dataframe day, the colors correspond to the different seasons. This is a quick and easy method to group data in a visual format.</li>\n</ul>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre><code>plt.scatter('temp', 'cnt', data=day, c='season')\r\nplt.xlabel('Normalized Temperature', fontsize='large')\r\nplt.ylabel('Count of Total Bike Rentals', fontsize='large');</code></pre>\n</div>\n<p><br class=\"blank\"/></p>\n<div style=\"text-align:center\"><img alt=\"matplotlib-scatterplot\" src=\"/wp-content/uploads/scatterplot.jpg\" width=\"80%\"/></div>\n<p>Lets see the information that it shows:<br>\n<strong><em></em></strong></br></p>\n<ul>\n<li>There were more than 8000 bike rentals at some point in time.</li>\n<li>The normalized temperature has gone above 0.8.</li>\n<li>The amount of bike rentals does not differ much with temperature or season.</li>\n<li>There is a positive linear relationship between bike rentals and normalized temperature.</li>\n</ul>\n<p></p></div></div></div></div></div></body></html>\n<p><strong>This graph does indeed give us much information. However, the graph does not produce a legend, which makes it difficult to decipher anything about the seasonal groups. This is due to the Matplotlib being unable to produce a legend when a plot is made in this fashion. In the next section we will see how the above plot is hiding and even misleading viewers.</strong></p>\n<p><em>Lets look at the same plot that has undergone thorough editing. The goal here will be to produce a legend to decipher differences between the groups.</em></p>\n<div style=\"width:98%;border:1px solid #ccc;overflow:auto;padding-left:10px;padding-bottom:10px;padding-top:10px\">\n<pre><code>plt.rcParams['figure.figsize'] = [15, 10]\r\n\r\nfontdict={'fontsize': 18,\r\n          'weight' : 'bold',\r\n         'horizontalalignment': 'center'}\r\n\r\nfontdictx={'fontsize': 18,\r\n          'weight' : 'bold',\r\n          'horizontalalignment': 'center'}\r\n\r\nfontdicty={'fontsize': 16,\r\n          'weight' : 'bold',\r\n          'verticalalignment': 'baseline',\r\n          'horizontalalignment': 'center'}\r\n\r\nspring = plt.scatter('temp', 'cnt', data=day[day['season']==1], marker='o', color='green')\r\nsummer = plt.scatter('temp', 'cnt', data=day[day['season']==2], marker='o', color='orange')\r\nautumn = plt.scatter('temp', 'cnt', data=day[day['season']==3], marker='o', color='brown')\r\nwinter = plt.scatter('temp', 'cnt', data=day[day['season']==4], marker='o', color='blue')\r\nplt.legend(handles=(spring,summer,autumn,winter),\r\n           labels=('Spring', 'Summer', 'Fall/Autumn', 'Winter'),\r\n           title=\"Season\", title_fontsize=16,\r\n           scatterpoints=1,\r\n           bbox_to_anchor=(1, 0.7), loc=2, borderaxespad=1.,\r\n           ncol=1,\r\n           fontsize=14)\r\nplt.title('Bike Rentals at Different Temperatures\\nBy Season', fontdict=fontdict, color=\"black\")\r\nplt.xlabel(\"Normalized temperature\", fontdict=fontdictx)\r\nplt.ylabel(\"Count of Total Rental Bikes\", fontdict=fontdicty);</code></pre>\n</div>\n<p><br class=\"blank\"/></p>\n<div style=\"text-align:center\"><img alt=\"matplotlib-scatterplot-2\" src=\"/wp-content/uploads/scatterplot2.jpg\" width=\"80%\"/></div>\n<ul>\n<li><code>plt.rcParams['figure.figsize'] = [15, 10]</code> allows to control the size of the entire plot. This corresponds to a <em>15\u221710 (length\u2217width)</em> plot.</li>\n<li><code>fontdict</code> is a dictionary that can be passed in as arguments for labeling axes. <code>fontdict</code> for the title, <code>fontdictx</code> for the x-axis and <code>fontdicty</code> for the y-axis.</li>\n<li>There are now 4 <code>plt.scatter()</code> function calls corresponding to one of the four seasons. This is seen again in the data argument in which it has been subsetted to correspond to a single season. marker and color arguments correspond to using a <code>'o'</code> to visually represent a data point and the respective color of that marker.</li>\n<li><code><a href=\"https://matplotlib.org/api/_as_gen/matplotlib.pyplot.legend.html\" rel=\"nopener noreferrer\" target=\"_blank\">plt.legend()</a></code> is where we can pass our arguments to make a legend. The first two arguments are handles: the actual plots to be represented in the legend and labels: the names corresponding to each plot that will be shown in the legend. scatterpoints are the size of each marker for the scatter plot.<code> bbox_to_anchor=(1, 0.7), loc=2, borderaxespad=1</code>. These 3 arguments are used in tandem to correspond to the location of the legend; click on the link at the start of this sentence to find out the nature of these arguments.</li>\n</ul>\n<p>Now we can distinguish the seasons to check for more underlying information. However, even after adding these extra layers, the plot can still hide information and be prone to misinterpretation. </p>\n<p>This plot:<br/>\n<strong><em></em></strong></p>\n<ul>\n<li>had data overlapping each other.</li>\n<li>was cluttered.</li>\n<li>did not reveal any discernable differences among the seasonality of bike rentals.</li>\n<li>hid patterns such as bike rentals increasing in the spring and summer as temperatures rose.</li>\n<li>shows an overall positive trend between total bike rentals and temperature.</li>\n<li>does not clearly show which season had the lowest temperature in comparison.</li>\n</ul>\n<p></p>\n<p>\u00a0</p>\n<h3>Subplots </h3>\n<p>\u00a0<br/>\nCreating subplots are probably one of the most attractive and professional charting techniques in the industry. Subplots are necessary when a single plot is overcrowded with information. That information cannot be assessed in that state.</p>\n<p><strong><em>Faceting</em></strong> is the process of creating multiple plots of a graph that share the same axes. Faceting is one of the most versatile techniques of data visualization. Faceted plots can convey information in many dimensions and can reveal information that was previously hidden.</p>\n<ul>\n<li><code>plt.figure()</code> will be used to create an empty plot canvas as explained before. It is saved as fig.</li>\n<li><code>fig.add_subplot()</code> will be repeated 4 times to correspond to a respective season. The arguments correspond to <code>nrows</code>, <code>ncols</code>, index. For example in <code>ax1</code> it corresponds to the 1st plot of the figure (index starts at 1 in the upper left corner and increases to the right.)</li>\n<li>The remaining function calls are either self-explanatory or have been previously covered.</li>\n</ul>\n<div style=\"width:98%;border:1px solid #ccc;overflow:auto;padding-left:10px;padding-bottom:10px;padding-top:10px\">\n<pre>\r\nfig = plt.figure()\r\n\r\nplt.rcParams['figure.figsize'] = [15,10]\r\nplt.rcParams[\"font.weight\"] = \"bold\"\r\n\r\nfontdict={'fontsize': 25,\r\n          'weight' : 'bold'}\r\n\r\nfontdicty={'fontsize': 18,\r\n          'weight' : 'bold',\r\n          'verticalalignment': 'baseline',\r\n          'horizontalalignment': 'center'}\r\n\r\nfontdictx={'fontsize': 18,\r\n          'weight' : 'bold',\r\n          'horizontalalignment': 'center'}\r\n\r\nplt.subplots_adjust(wspace=0.2, hspace=0.2)\r\n\r\nfig.suptitle('Bike Rentals at Different Temperatures\\nBy Season', fontsize=25,fontweight=\"bold\", color=\"black\", \r\n             position=(0.5,1.01))\r\n\r\nax1 = fig.add_subplot(221)\r\nax1.scatter('temp', 'cnt', data=day[day['season']==1], c=\"green\")\r\nax1.set_title('Spring', fontdict=fontdict, color=\"green\")\r\nax1.set_ylabel(\"Count of Total Rental Bikes\", fontdict=fontdicty, position=(0,-0.1))\r\n\r\n\r\nax2 = fig.add_subplot(222)\r\nax2.scatter('temp', 'cnt', data=day[day['season']==2], c=\"orange\")\r\nax2.set_title('Summer', fontdict=fontdict, color=\"orange\")\r\n\r\n\r\n\r\nax3 = fig.add_subplot(223)\r\nax3.scatter('temp', 'cnt', data=day[day['season']==3], c=\"brown\")\r\nax3.set_title('Fall or Autumn', fontdict=fontdict, color=\"brown\")\r\n\r\n\r\nax4 = fig.add_subplot(224)\r\nax4.scatter('temp', 'cnt', data=day[day['season']==4], c=\"blue\")\r\nax4.set_title(\"Winter\", fontdict=fontdict, color=\"blue\")\r\nax4.set_xlabel(\"Normalized temperature\", fontdict=fontdictx, position=(-0.1,0));\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<div style=\"text-align:center\"><img alt=\"scatterplot-facet-matplotlib-subplot\" src=\"/wp-content/uploads/scatterplot-facet-subplots.jpg\" width=\"80%\"/></div>\n<p>Now we can analyze each group independently and as we will see more effectively. First thing we should notice is that the relationship between temperature and bike rentals differs between seasons:<br/>\n<strong><em></em></strong></p>\n<ul>\n<li>Positive linear relationship in the Spring.</li>\n<li>Quadratic non-linear relationship in the Winter and Summer.</li>\n<li>Weak Positive to No discernible relationship in Autumn.</li>\n</ul>\n<p></p>\n<p>However, again there is a chance of misleading the viewers and it is for less than obvious reasons. The axes are all different among the 4 plots. Most people will not realize that this can cause misleading insights if no caution is taken. See below on how this issue can be fixed:</p>\n<div style=\"width:98%;border:1px solid #ccc;overflow:auto;padding-left:10px;padding-bottom:10px;padding-top:10px\">\n<pre>\r\nfig = plt.figure()\r\n\r\nplt.rcParams['figure.figsize'] = [12,12]\r\nplt.rcParams[\"font.weight\"] = \"bold\"\r\n\r\nplt.subplots_adjust(hspace=0.60)\r\n\r\n\r\nfontdicty={'fontsize': 20,\r\n          'weight' : 'bold',\r\n          'verticalalignment': 'baseline',\r\n          'horizontalalignment': 'center'}\r\n\r\nfontdictx={'fontsize': 20,\r\n          'weight' : 'bold',\r\n          'horizontalalignment': 'center'}\r\n\r\nfig.suptitle('Bike Rentals at Different Temperatures\\nBy Season', fontsize=25,fontweight=\"bold\", color=\"black\", \r\n             position=(0.5,1.0))\r\n\r\n#ax2 is defined first because the other plots are sharing its x-axis\r\nax2 = fig.add_subplot(412, sharex=ax2)\r\nax2.scatter('temp', 'cnt', data=day.loc[day['season']==2], c=\"orange\")\r\nax2.set_title('Summer', fontdict=fontdict, color=\"orange\")\r\nax2.set_ylabel(\"Count of Total Rental Bikes\", fontdict=fontdicty, position=(-0.3,-0.2))\r\n\r\n\r\nax1 = fig.add_subplot(411, sharex=ax2)\r\nax1.scatter('temp', 'cnt', data=day.loc[day['season']==1], c=\"green\")\r\nax1.set_title('Spring', fontdict=fontdict, color=\"green\")\r\n\r\n\r\nax3 = fig.add_subplot(413, sharex=ax2)\r\nax3.scatter('temp', 'cnt', data=day.loc[day['season']==3], c=\"brown\")\r\nax3.set_title('Fall or Autumn', fontdict=fontdict, color=\"brown\")\r\n\r\n\r\nax4 = fig.add_subplot(414, sharex=ax2)\r\nax4.scatter('temp', 'cnt', data=day.loc[day['season']==4], c=\"blue\")\r\nax4.set_title('Winter', fontdict=fontdict, color=\"blue\")\r\nax4.set_xlabel(\"Normalized temperature\", fontdict=fontdictx);\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<div style=\"text-align:center\"><img alt=\"scatterplot-facet-subplots-sharex\" src=\"/wp-content/uploads/scatterplot-facet-subplots-sharex.jpg\" width=\"80%\"/></div>\n<p>Now this plot grid has been adjusted to share the same x-axis as Summer because it has a wider range for temperature. Now interestingly, this data shows us some new insights:<br/>\n<strong><em></em></strong></p>\n<ul>\n<li>Spring had the lowest temperatures.</li>\n<li>Fall/Autumn had the highest temperatures.</li>\n<li>The total number of bike rentals and temperature seem to have a quadratic relationship in the Summer and Autumn.</li>\n<li>Less bikes are rented in low temperatures regardless of season.</li>\n<li>There is a clear positive linear relationship between temperature and total bike rentals in the Spring.</li>\n<li>There seems to be a mild negative linear relationship between temperature and bike rentals in the Fall/Autumn.</li>\n</ul>\n<p></p>\n<div style=\"width:98%;border:1px solid #ccc;overflow:auto;padding-left:10px;padding-bottom:10px;padding-top:10px\">\n<pre>\r\nfig = plt.figure()\r\n\r\nplt.rcParams['figure.figsize'] = [10,10]\r\nplt.rcParams[\"font.weight\"] = \"bold\"\r\n\r\nplt.subplots_adjust(wspace=0.5)\r\nfontdicty1={'fontsize': 18,\r\n          'weight' : 'bold'}\r\n\r\nfontdictx1={'fontsize': 18,\r\n          'weight' : 'bold',\r\n          'horizontalalignment': 'center'}\r\n\r\nfig.suptitle('Bike Rentals at Different Temperatures\\nBy Season', fontsize=25,fontweight=\"bold\", color=\"black\", \r\n             position=(0.5,1.0))\r\n\r\nax3 = fig.add_subplot(143, sharey=ax3)\r\nax3.scatter('temp', 'cnt', data=day.loc[day['season']==3], c=\"brown\")\r\nax3.set_title('Fall or Autumn', fontdict=fontdict,color=\"brown\")\r\n\r\n\r\nax1 = fig.add_subplot(141, sharey=ax3)\r\nax1.scatter('temp', 'cnt', data=day.loc[day['season']==1], c=\"green\")\r\nax1.set_title('Spring', fontdict=fontdict, color=\"green\")\r\nax1.set_ylabel(\"Count of Total Rental Bikes\", fontdict=fontdicty1, position=(0.5,0.5))\r\n\r\n\r\nax2 = fig.add_subplot(142, sharey=ax3)\r\nax2.scatter('temp', 'cnt', data=day.loc[day['season']==2], c=\"orange\")\r\nax2.set_title('Summer', fontdict=fontdict, color=\"orange\")\r\n\r\n\r\nax4 = fig.add_subplot(144, sharey=ax3)\r\nax4.scatter('temp', 'cnt', data=day.loc[day['season']==4], c=\"blue\")\r\nax4.set_title('Winter', fontdict=fontdict, color=\"blue\")\r\nax4.set_xlabel(\"Normalized temperature\", fontdict=fontdictx, position=(-1.5,0));\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<div style=\"text-align:center\"><img alt=\"scatterplot-facet-subplots-sharey\" src=\"https://www.kdnuggets.com/wp-content/uploads/scatterplot-facet-subplots-sharey.jpg\" width=\"80%\"/></div>\n<p>Re-angling/juxtaposing the plots now show another perspective:<br/>\n<strong><em></em></strong></p>\n<ul>\n<li>All seasons had over 8000 bike rentals at some point in time.</li>\n<li>There is a large clustering in Autumn and Spring compared to the other seasons.</li>\n<li>Winter and Summer had the most varied amount of bike rentals.</li>\n</ul>\n<p></p>\n<p><strong><em>Do not attempt to decipher a relationship between the variables from this angle. It can mislead you again because now it looks like there is a negative linear relationship between bike rentals and temperature in both Spring and Summer and we saw before that this is not the case.</em></strong></p>\n<p>Here is a link to an intuitive tutorial by <a href=\"https://realpython.com/python-matplotlib-guide/\" rel=\"noreferrer noopener\" target=\"_blank\">Real Python on using Matplotlib</a>.</p>\n<p>\u00a0</p>\n<h3><font size=\"size=+0.5\">Seaborn</font></h3>\n<p>\u00a0<br/>\nThe seaborn package was developed based on the Matplotlib library. It is used to create more attractive and informative statistical graphics. While seaborn is a different package, it can also be used to develop the attractiveness of matplotlib graphics.</p>\n<p>While matplotlib is great, we always want to do better. Run the code chunk below to import the seaborn library and create the previous plot and see what happens.</p>\n<p>First we import the library with <code>import seaborn as sns</code>. The next line </p>sns.set() will load seaborn's default theme and color palette to the session. Run the code below and watch the change in the chart area and the text.\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre><code>import seaborn as sns\r\nsns.set()</code></pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Once we load seaborn into the session, everytime a matplotlib plot is executed, seaborn's default customizations are added as you see above. However, a huge problem that troubles many users is that the titles can overlap. Combine this with matplotlib's only confusing naming convention for its titles it becomes a nuisance. Nevertheless, the attractive visuals still make it usable for Data Scientist's work.</p>\n<p>In order to get the titles in the fashion that we want and have more customizability, We need to use the structure below. <em>Note that this is only necessary if we use subtitles in our plots. Sometimes they are necessary so it is better to have it on hand.</em></p>\n<div style=\"width:98%;border:1px solid #ccc;overflow:auto;padding-left:10px;padding-bottom:10px;padding-top:10px\">\n<pre>fig = plt.figure()\r\nfig.suptitle('Seaborn with Python', fontsize='x-large', fontweight='bold')\r\nfig.subplots_adjust(top=0.87)\r\n#This is used for the main title. 'figure()' is a class that provides all the plotting elements of a diagram. \r\n#This must be used first or else the title will not show.fig.subplots_adjust(top=0.85) solves our overlapping title problem.\r\n\r\nax = fig.add_subplot(111)\r\n\r\nfontdict={'fontsize': 14,\r\n        'fontweight' : 'book',\r\n        'verticalalignment': 'baseline',\r\n        'horizontalalignment': 'center'}\r\n\r\nax.set_title('Plotting Tutorial', fontdict=fontdict)\r\n#This specifies which plot to add the customizations. fig.add_sublpot(111) corresponds to top left plot no.1 \r\n#(there is only one plot). \r\n\r\nplt.plot(x, y, 'go-', linewidth=1) #linewidth=1 to make it narrower\r\nplt.xlabel('x-axis', fontsize=14)\r\nplt.ylabel('yaxis', fontsize=14);</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<div style=\"text-align:center\"><img alt=\"seaborn-python-titlefix\" src=\"/wp-content/uploads/seaborn-python-titlefix.jpg\" width=\"50%\"/></div>\n<p><em><strong>Going deeper into seaborn, we can recreate the above visualizations from the Bike Rentals dataset with fewer lines of code and similar syntax. Seaborn still uses Matplotlib syntax to execute seaborn plots with relatively minor but obvious synctactic differences.</strong></em></p>\n<p>For simplicity and better visuals, I am going to rename and relabel the 'season' column of the bike rentals dataset.</p>\n<div style=\"width:98%;border:1px solid #ccc;overflow:auto;padding-left:10px;padding-bottom:10px;padding-top:10px\">\n<pre>\r\nday.rename(columns={'season':'Season'}, inplace=True)\r\nday['Season']=day.Season.map({1:'Spring', 2:'Summer', 3:'Fall/Autumn', 4:'Winter'})</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Now that the 'Season' column is edited to our liking, we will continue onto creating a seaborn style visualization of the previous plots.</p>\n<p>The first noticeable difference is the default theme that seaborn presents when its default aesthetics are loaded into the session. The default theme as you see directly above is a result of <code>sns.set_style('whitegrid')</code> being applied in the background when <code>sns.set()</code> is called. As we will see this is easily overridden according to our liking with the readily available themes as stated in the below cell:</p>\n<ul>\n<li><code>sns.set_style()</code> must be one of 'white', 'dark', 'whitegrid', 'darkgrid', 'ticks'. This controls the plot area. Such as the color, grid and presence of ticks.</li>\n<li><code>sns.set_context()</code> must be in 'paper', 'notebook', 'talk', 'poster'. This controls the layout of the plot in terms of how it is to be read. Such as if it was on a 'poster' where we will see enlarged images and text. 'Talk' will create a plot with a more bold font.</li>\n</ul>\n<div style=\"width:98%;border:1px solid #ccc;overflow:auto;padding-left:10px;padding-bottom:10px;padding-top:10px\">\n<pre>\r\nplt.figure(figsize=(7,6))\r\n\r\nfontdict={'fontsize': 18,\r\n          'weight' : 'bold',\r\n         'horizontalalignment': 'center'}\r\n\r\nsns.set_context('talk', font_scale=0.9)\r\nsns.set_style('ticks')\r\n\r\nsns.scatterplot(x='temp', y='cnt', hue='Season', data=day, style='Season', \r\n                    palette=['green','orange','brown','blue'], legend='full')\r\n\r\nplt.legend(scatterpoints=1,\r\n           bbox_to_anchor=(1, 0.7), loc=2, borderaxespad=1.,\r\n           ncol=1,\r\n           fontsize=14)\r\nplt.xlabel('Normalized Temperature', fontsize=16, fontweight='bold')\r\nplt.ylabel('Count of Total Bike Rentals', fontsize=16, fontweight='bold')\r\nplt.title('Bike Rentals at Different Temperatures\\nBy Season', fontdict=fontdict, color=\"black\",\r\n         position=(0.5,1));</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<div style=\"text-align:center\"><img alt=\"seaborn-scatterplot-talk-ticks\" src=\"/wp-content/uploads/seaborn-scatterplot-talk-ticks.jpg\" width=\"80%\"/></div>\n<p>Now lets take a look at the same plot but with <code>sns.set_context('paper', font_scale=2)</code> and <code>sns.set_style('white')</code></p>\n<div style=\"width:98%;border:1px solid #ccc;overflow:auto;padding-left:10px;padding-bottom:10px;padding-top:10px\">\n<pre>\r\nplt.figure(figsize=(7,6))\r\n\r\nfontdict={'fontsize': 18,\r\n          'weight' : 'bold',\r\n         'horizontalalignment': 'center'}\r\n\r\nsns.set_context('paper', font_scale=2) #this makes the font and scatterpoints much smaller, hence the need for size adjustemnts\r\nsns.set_style('white')\r\n\r\nsns.scatterplot(x='temp', y='cnt', hue='Season', data=day, style='Season', \r\n                    palette=['green','orange','brown','blue'], legend='full', size='Season', sizes=[100,100,100,100])\r\n\r\nplt.legend(scatterpoints=1,\r\n           bbox_to_anchor=(1, 0.7), loc=2, borderaxespad=1.,\r\n           ncol=1,\r\n           fontsize=14)\r\n\r\nplt.xlabel('Normalized Temperature', fontsize=16, fontweight='bold')\r\nplt.ylabel('Count of Total Bike Rentals', fontsize=16, fontweight='bold')\r\nplt.title('Bike Rentals at Different Temperatures\\nBy Season', fontdict=fontdict, color=\"black\",\r\n         position=(0.5,1));</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<div style=\"text-align:center\"><img alt=\"seaborn-scatterplot-paper-white\" src=\"/wp-content/uploads/seaborn-scatterplot-paper-white.jpg\" width=\"80%\"/></div>\n<p>Now we have finally recreated our previous matplotlib style plot with Seaborn using <b>fewer lines of code</b> and <b>better resolution</b> in my opinion. Let's take it one step further and facet the plot to finish:</p>\n<div style=\"width:98%;border:1px solid #ccc;overflow:auto;padding-left:10px;padding-bottom:10px;padding-top:10px\">\n<pre>\r\nsns.set(rc={'figure.figsize':(20,20)}) \r\nsns.set_context('talk', font_scale=2) \r\nsns.set_style('ticks')\r\ng = sns.relplot(x='temp', y='cnt', hue='Season', data=day,palette=['green','orange','brown','blue'],\r\n                col='Season', col_wrap=4, legend=False\r\n                height=6, aspect=0.5, style='Season', sizes=(800,1000))\r\n\r\ng.fig.suptitle('Bike Rentals at Different Temperatures\\nBy Season' ,position=(0.5,1.05), fontweight='bold', size=18)\r\ng.set_xlabels(\"Normalized Temperature\",fontweight='bold', size=15)\r\ng.set_ylabels(\"Count of Total Bike Rentals\",fontweight='bold', size=20);</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<div style=\"text-align:center\"><img alt=\"seaborn-scatterplot-talk-ticks-facet\" src=\"/wp-content/uploads/seaborn-scatterplot-talk-ticks-facet.jpg\" width=\"99%\"/></div>\n<p>In order to change the shape of the figures, the <code>aspect</code> argument needs to be changed. Increasing the value of aspect here will create a more square shaped figure. It works in tandem with <code>height</code> so experiment with the size using both arguments.</p>\n<p>To change the number of rows and columns, use the <code>col_wrap</code> argument to do this. This works in tandem with the <code>col</code> argument. It detects the number of categories and allocates it accordingly.</p>\n<div style=\"width:98%;border:1px solid #ccc;overflow:auto;padding-left:10px;padding-bottom:10px;padding-top:10px\">\n<pre>\r\nsns.set(rc={'figure.figsize':(20,20)}) \r\nsns.set_context('talk', font_scale=2) \r\nsns.set_style('ticks')\r\ng = sns.relplot(x='temp', y='cnt', hue='Season', data=day,palette=['green','orange','brown','blue'],\r\n                col='Season', col_wrap=2, legend=False\r\n                height=4, aspect=1.6, style='Season', sizes=(800,1000))\r\n\r\ng.fig.suptitle('Bike Rentals at Different Temperatures\\nBy Season' ,position=(0.5,1.05), fontweight='bold', size=18)\r\ng.set_xlabels(\"Normalized Temperature\",fontweight='bold', size=15)\r\ng.set_ylabels(\"Count of\\nTotal Bike Rentals\",fontweight='bold', size=20);</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<div style=\"text-align:center\"><img alt=\"figure-name\" src=\"/wp-content/uploads/seaborn-scatterplot-talk-ticks-facet-col-aspect.jpg\" width=\"99%\"/></div>\n<p>\n<strong><em><font size=\"-1\">Note: Parts of this tutorial were used in a tutorial I prepared for the <a href=\"https://www.vit.edu.au/\" rel=\"nopener noreferrer\" target=\"_blank\">Victorian Institute of Technology</a></font></em></strong></p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2019/02/data-visualization-disasters-avoid.html\">6 Data Visualization Disasters \u2013 How to Avoid Them</a>\n<li><a href=\"/2018/07/5-quick-easy-data-visualizations-python-code.html\">5 Quick and Easy Data Visualizations in Python with Code</a>\n<li><a href=\"/2016/06/python-data-visualization-libraries.html\">10 Useful Python Data Visualization Libraries for Any Discipline </a>\n</li></li></li></ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p> <script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets';\n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n\n<div class=\"page-link\"></div>\n<div class=\"pagi\">\n<hr class=\"grey-line\"/>\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2019/04/intel-unleash-faster-python-data.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"/> <strong>Previous post</strong></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/jobs/19/04-19-nasdaq100-leader-data-science.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/><br/>\n<div>\n<hr class=\"grey-line\"/><br/>\n<h2>Top Stories Past 30 Days</h2>\n<table align=\"center\" cellpadding=\"3\" cellspacing=\"10\" class=\"latn\" width=\"100%\">\n<tr>\n<td valign=\"top\" width=\"50%\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Popular</b></th></tr>\n<tr><td>\n<ol class=\"three_ol\"><li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-mp-1-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/03/another-10-free-must-read-books-for-machine-learning-and-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-mp-2-another-10-books');\"><b>Another 10 Free Must-Read Books for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-mp-3-good-from-bad');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n<li> <a href=\"/2018/05/simplilearn-9-must-have-skills-data-scientist.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-mp-4-simplilearn');\"><b>9 Must-have skills you need to become a Data Scientist, updated</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-mp-5-intro-ts');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/03/random-forest-python.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-mp-6-explain-rf');\"><b>Explaining Random Forest (with Python Implementation)</b></a>\n<li> <a href=\"/2019/04/predict-age-gender-using-convolutional-neural-network-opencv.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-mp-7-age-gender');\"><b>Predict Age and Gender Using Convolutional Neural Network and OpenCV</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td> <td valign=\"top\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Shared</b></th></tr>\n<tr><td><ol class=\"three_ol\">\n<li> <a href=\"/2019/03/artificial-neural-networks-optimization-genetic-algorithm-python.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-ms-1-optimization-ga');\"><b>Artificial Neural Networks Optimization using Genetic Algorithm with Python</b></a>\n<li> <a href=\"/2019/04/another-10-free-must-see-courses-machine-learning-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-ms-2-another-10-courses');\"><b>Another 10 Free Must-See Courses for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-ms-3-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/03/r-vs-python-data-visualization.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-ms-4-r-py-viz');\"><b>R vs Python for Data Visualization</b></a>\n<li> <a href=\"/2019/03/simplilearn-8-reasons-microsoft-azure-certification.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-ms-5-azure-cert');\"><b>8 Reasons Why You Should Get a Microsoft Azure Certification</b></a>\n<li> <a href=\"/2019/03/deep-learning-toolset-overview.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-ms-6-dl-toolset');\"><b>The Deep Learning Toolset \u2014 An Overview</b></a>\n<li> <a href=\"/2019/03/work-data-science-ai-big-data.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-ms-7-how-work');\"><b>How To Work In Data Science, AI, Big Data</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<!--#content end-->\n<div id=\"sidebar\">\n<div class=\"latn\">\n<h3><b><a href=\"/news/index.html\">Latest News</a></b></h3>\n<ul style=\"font-size:14px; margin-top:5px\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/paw-data-driven-government-workshops-announced.html\">Data Driven Government Workshops Announced!</a><li> <a href=\"https://www.kdnuggets.com/2019/04/rise-generative-adversarial-networks.html\">The Rise of Generative Adversarial Networks</a><li> <a href=\"https://www.kdnuggets.com/jobs/19/04-19-nasdaq100-leader-data-science.html\">NASDAQ 100: Leader of Data Science [East Coast]</a><li> <a href=\"https://www.kdnuggets.com/2019/04/data-visualization-python-matplotlib-seaborn.html\">Data Visualization in Python: Matplotlib vs Seaborn</a><li> <a href=\"https://www.kdnuggets.com/2019/04/intel-unleash-faster-python-data.html\">Unleash a faster Python on your data</a><li> <a href=\"https://www.kdnuggets.com/2019/04/sisense-blox-beyond-dashboards.html\">Sisense BloX \u2013 Go Beyond Dashboards</a></li></li></li></li></li></li></ul>\n</div>\n<div>\n<script type=\"text/javascript\">kda_sid_write(kda_sid_n);</script>\n</div>\n<br/><script src=\"/aps/sbm.js\" type=\"text/javascript\"></script>\n<div class=\"latn\" style=\"margin-top: 15px;\">\n<h3><b>More Recent Stories</b></h3>\n<ul class=\"next-posts\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/sisense-blox-beyond-dashboards.html\">Sisense BloX \u2013 Go Beyond Dashboards</a><li> <a href=\"https://www.kdnuggets.com/2019/04/3-big-problems-big-data.html\">3 Big Problems with Big Data and How to Solve Them</a><li> <a href=\"https://www.kdnuggets.com/2019/04/distributed-artificial-intelligence-multi-agent-systems-agent-based-modeling-swarm-intelligence.html\">Distributed Artificial Intelligence: A primer on Multi-Agent S...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/how-optimization-works.html\">How Optimization Works</a><li> <a href=\"https://www.kdnuggets.com/2019/04/top-tweets-apr10-apr16.html\">Top tweets, Apr 10\u201316: Math for Programmers teaches you t...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/datax-san-francisco-over-500-data-professionals.html\">DATAx San Francisco | 14-15 May | Over 500 Data Professionals</a><li> <a href=\"https://www.kdnuggets.com/jobs/19/04-17-bottomline-technologies-data-scientist.html\">Bottomline Technologies, Inc: Data Scientist [McLean, VA or Po...</a><li> <a href=\"https://www.kdnuggets.com/jobs/19/04-17-ten-x-data-scientist.html\">Ten-X: Data Scientist [San Mateo, CA]</a><li> <a href=\"https://www.kdnuggets.com/jobs/19/04-17-ten-x-data-engineer.html\">Ten-X: Sr Data Engineer [San Mateo, CA]</a><li> <a href=\"https://www.kdnuggets.com/2019/04/best-data-visualization-techniques.html\">Best Data Visualization Techniques for small and large data</a><li> <a href=\"https://www.kdnuggets.com/2019/04/building-flask-api-automatically-extract-named-entities-spacy.html\">Building a Flask API to Automatically Extract Named Entities U...</a><li> <a href=\"https://www.kdnuggets.com/2019/n15.html\">KDnuggets 19:n15, Apr 17: Time Series Forecasting with Neur...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/northwestern-ms-data-science.html\">Northwestern\u2019s MS in Data Science</a><li> <a href=\"https://www.kdnuggets.com/2019/04/penn-online-ms-data-analytics.html\">Penn State Online MS in Data Analytics.</a><li> <a href=\"https://www.kdnuggets.com/2019/04/introduction-clustering-algorithms.html\">How Machines Make Sense of Big Data: an Introduction to Cluste...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/best-masters-data-science-analytics-europe.html\">2019 Best Masters in Data Science and Analytics \u2013 Europe Edi...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/k-means-clustering-unsupervised-learning-recommender-systems.html\">K-Means Clustering: Unsupervised Learning for Recommender Systems</a><li> <a href=\"https://www.kdnuggets.com/2019/04/data-science-with-optimus-part-2-setting-dataops-environment.html\">Data Science with Optimus Part 2: Setting your DataOps Environ...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/top-news-week-0408-0414.html\">Top Stories, Apr 8-14: How to Recognize a Good Data Scientist ...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/paw-hot-deep-learning-applications-las-vegas.html\">Hot Deep Learning Applications at Deep Learning World \u2013 Las ...</a></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></ul>\n</div>\n</div><div class=\"breadcrumbs_bottom\">\n<div class=\"breadcumb\">\n<br>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2019/index.html\">2019</a> \u00bb <a href=\"https://www.kdnuggets.com/2019/04/index.html\">Apr</a> \u00bb <a href=\"https://www.kdnuggets.com/2019/04/tutorials.html\">Tutorials, Overviews</a> \u00bb Data Visualization in Python: Matplotlib vs Seaborn (\u00a0<a href=\"/2019/n16.html\">19:n16</a>\u00a0)    </br></div>\n</div>\n<!--#content_wrapper end-->\n<br>\n<div id=\"footer\">\n<br/>\u00a9 2019 KDnuggets. <a href=\"/about/index.html\">About KDnuggets</a>. \u00a0<a href=\"/news/privacy-policy.html\">Privacy policy</a>. <a href=\"/terms-of-service.html\">Terms of Service</a><br/>\u00a0\n<div class=\"kd_bottom\">\n<div class=\"footer-container\">\n<div class=\"footer-news\">\n<a href=\"/news/subscribe.html\" onclick=\"_gaq.push(['_trackPageview','/x/bot/sub']);\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a>\n</div>\n<div class=\"footer-sm\">\n<a href=\"https://twitter.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/twt']);\" target=\"_blank\"><img height=\"32\" src=\"/images/tw_c48.png\" width=\"32\"/></a>\n<a href=\"https://facebook.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/fb']);\" target=\"_blank\"><img alt=\"Facebook\" height=\"32\" src=\"/images/fb_c48.png\" width=\"32\"/></a>\n<a href=\"https://www.linkedin.com/groups/54257\" onclick=\"_gaq.push(['_trackPageview','/x/bot/in']);\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"32\" src=\"/images/in_c48.png\" width=\"32\"/></a>\n</div>\n</div>\n<div class=\"close-footer\">X</div>\n</div>\n<script type=\"text/javascript\">\n  jQuery('.close-footer').click(\n      function(){       \n         jQuery('.kd_bottom').hide();\n      }\n   );\n</script> </div>\n<div class=\"clear\"><!--blank--></div>\n</br>\n<div style=\"display: none;\"><div id=\"boxzilla-box-82996-content\"><script type=\"text/javascript\">(function() {\n\tif (!window.mc4wp) {\n\t\twindow.mc4wp = {\n\t\t\tlisteners: [],\n\t\t\tforms    : {\n\t\t\t\ton: function (event, callback) {\n\t\t\t\t\twindow.mc4wp.listeners.push({\n\t\t\t\t\t\tevent   : event,\n\t\t\t\t\t\tcallback: callback\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})();\n</script><!-- MailChimp for WordPress v4.1.14 - https://wordpress.org/plugins/mailchimp-for-wp/ --><form class=\"mc4wp-form mc4wp-form-77281\" data-id=\"77281\" data-name=\"Subscribe to KDnuggets News\" id=\"mc4wp-form-1\" method=\"post\"><div class=\"mc4wp-form-fields\"><div class=\"header-container\">\n<img align=\"left\" src=\"/wp-content/uploads/envelope.png\"><a href=\"/news/subscribe.html\">Get KDnuggets, a leading newsletter on AI, \r\n  Data Science, and Machine Learning</a>\n</img></div>\n<div class=\"form-fields\">\n<div class=\"field-container\"><label>Email:</label><input maxlength=\"60\" name=\"EMAIL\" placeholder=\"Your email\" required=\"\" size=\"30\" type=\"email\"/></div>\n<div class=\"field-container submit-container\"><div class=\"form-button\" onclick=\"document.getElementById('mc4wp-form-1').submit()\">Sign Up</div></div>\n</div>\n<label style=\"display: none !important;\">Leave this field empty if you're human: <input autocomplete=\"off\" name=\"_mc4wp_honeypot\" tabindex=\"-1\" type=\"text\" value=\"\"/></label><input name=\"_mc4wp_timestamp\" type=\"hidden\" value=\"1555891397\"/><input name=\"_mc4wp_form_id\" type=\"hidden\" value=\"77281\"/><input name=\"_mc4wp_form_element_id\" type=\"hidden\" value=\"mc4wp-form-1\"/></div><div class=\"mc4wp-response\"></div></form><!-- / MailChimp for WordPress Plugin -->\n</div></div><script type=\"text/javascript\">(function() {function addEventListener(element,event,handler) {\n\tif(element.addEventListener) {\n\t\telement.addEventListener(event,handler, false);\n\t} else if(element.attachEvent){\n\t\telement.attachEvent('on'+event,handler);\n\t}\n}function maybePrefixUrlField() {\n\tif(this.value.trim() !== '' && this.value.indexOf('http') !== 0) {\n\t\tthis.value = \"http://\" + this.value;\n\t}\n}\n\nvar urlFields = document.querySelectorAll('.mc4wp-form input[type=\"url\"]');\nif( urlFields && urlFields.length > 0 ) {\n\tfor( var j=0; j < urlFields.length; j++ ) {\n\t\taddEventListener(urlFields[j],'blur',maybePrefixUrlField);\n\t}\n}/* test if browser supports date fields */\nvar testInput = document.createElement('input');\ntestInput.setAttribute('type', 'date');\nif( testInput.type !== 'date') {\n\n\t/* add placeholder & pattern to all date fields */\n\tvar dateFields = document.querySelectorAll('.mc4wp-form input[type=\"date\"]');\n\tfor(var i=0; i<dateFields.length; i++) {\n\t\tif(!dateFields[i].placeholder) {\n\t\t\tdateFields[i].placeholder = 'YYYY-MM-DD';\n\t\t}\n\t\tif(!dateFields[i].pattern) {\n\t\t\tdateFields[i].pattern = '[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])';\n\t\t}\n\t}\n}\n\n})();</script><script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_options = {\"testMode\":\"\",\"boxes\":[{\"id\":82996,\"icon\":\"&times;\",\"content\":\"\",\"css\":{\"background_color\":\"#eeee22\",\"width\":600,\"border_width\":2,\"border_style\":\"double\",\"position\":\"center\"},\"trigger\":{\"method\":\"time_on_page\",\"value\":\"3\"},\"animation\":\"fade\",\"cookie\":{\"triggered\":0,\"dismissed\":336},\"rehide\":true,\"position\":\"center\",\"screenWidthCondition\":{\"condition\":\"larger\",\"value\":500},\"closable\":true,\"post\":{\"id\":82996,\"title\":\"Subscribe to KDnuggets\",\"slug\":\"subscribe-to-kdnuggets\"}}]};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla/assets/js/script.min.js?ver=3.2.5\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_stats_config = {\"ajaxurl\":\"https:\\/\\/www.kdnuggets.com\\/wp-admin\\/admin-ajax.php?action=boxzilla_stats_track\"};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla-stats/assets/js/tracking.min.js?ver=1.0.4\" type=\"text/javascript\"></script>\n<script src=\"https://www.kdnuggets.com/wp-includes/js/wp-embed.min.js?ver=4.9.10\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar mc4wp_forms_config = [];\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/forms-api.min.js?ver=4.1.14\" type=\"text/javascript\"></script>\n<!--[if lte IE 9]>\n<script type='text/javascript' src='https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/third-party/placeholders.min.js?ver=4.1.14'></script>\n<![endif]-->\n<!--/.main_wrapper-->\n<script src=\"https://s7.addthis.com/js/300/addthis_widget.js#pubid=gpsaddthis\" type=\"text/javascript\"></script>\n\n\n<!-- Dynamic page generated in 0.973 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2019-04-21 20:03:17 -->\n<!-- Compression = gzip -->", "content_html": "<div class=\"post\" id=\"post-\">\n<div class=\"author-link\"><b>By <a href=\"https://www.kdnuggets.com/author/asel-mendis\" rel=\"author\" title=\"Posts by Asel Mendis\">Asel Mendis</a>, KDnuggets.</b></div>\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<div style=\"text-align:center\"><img alt=\"matplotlib-vs-seaborn\" src=\"/wp-content/uploads/matplotlib-vs-seaborn.jpg\" width=\"90%\"/></div>\n<p>Python offers a variety of packages for plotting data. This tutorial will use the following packages to demonstrate Python's plotting capabilities:</p>\n<ul>\n<li><a href=\"https://matplotlib.org/\" rel=\"noopener noreferrer\" target=\"_blank\">Matplotlib</a></li>\n<li><a href=\"https://seaborn.pydata.org/\" rel=\"noopener noreferrer\" target=\"_blank\">Seaborn</a></li>\n</ul>\n<p>\u00a0</p>\n<h3>Matplotlib </h3>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre><code>import matplotlib.pyplot as plt\r\n%matplotlib inline\r\nimport numpy as np</code></pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>In the above code chunk, we import the Matplotliib library with the <code>PyPlot</code> module as <code>plt</code> This is to make it easier to execute commmands as we will see later on in the tutorial. <code>PyPlot</code> contains a range of commands required to create and edit plots. <code>%matplotlib inline</code> is run so that the plot will show underneath the code chunk automatically when it is executed. Otherwise the user will need to type <code>plt.show()</code> everytime a new plot is created. This functionality is exclusive to Jupyter Notebook/IPython. Matplotlib's highly customizable code structure makes it a great guide to other plotting libraries. Lets see how we can generate a scatter plot from matplotlib.</p>\n<p><strong><em>A handy tip is that whenever matplotlib is executed, the output will always include a text output that can be very visually unappealing. To fix this, add a semicolon - ';' at the end of the last line of code when executing a code chunk to generate a figure.</em></strong></p>\n<p>The dataset used is the <a href=\"https://archive.ics.uci.edu/ml/datasets/bike+sharing+dataset\" rel=\"noopener noreferrer\" target=\"_blank\">Bike Sharing Dataset</a> from the UCI Machine Learning Repository.</p>\n<p>\u00a0</p>\n<h3>Matplotlib: Scatter Plot </h3>\n<p>\u00a0<br>\nA scatter plot is one of the most influential, informative, and versatile plots in your arsenal. It can convey an array of information to the user without much work (as demonstrated below)</br></p>\n<ul>\n<li><code>plt.scatter()</code> will give us a scatter plot of the data we pass in as the initial arguments. <code>temp</code> is the x-axis and <code>cnt</code> is the y-axis.</li>\n<li><code>c</code> determines the colors of the data points. Because we passed a string - 'season' which is a column of the dataframe day, the colors correspond to the different seasons. This is a quick and easy method to group data in a visual format.</li>\n</ul>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre><code>plt.scatter('temp', 'cnt', data=day, c='season')\r\nplt.xlabel('Normalized Temperature', fontsize='large')\r\nplt.ylabel('Count of Total Bike Rentals', fontsize='large');</code></pre>\n</div>\n<p><br class=\"blank\"/></p>\n<div style=\"text-align:center\"><img alt=\"matplotlib-scatterplot\" src=\"/wp-content/uploads/scatterplot.jpg\" width=\"80%\"/></div>\n<p>Lets see the information that it shows:<br>\n<strong><em></em></strong></br></p>\n<ul>\n<li>There were more than 8000 bike rentals at some point in time.</li>\n<li>The normalized temperature has gone above 0.8.</li>\n<li>The amount of bike rentals does not differ much with temperature or season.</li>\n<li>There is a positive linear relationship between bike rentals and normalized temperature.</li>\n</ul>\n<p></p></div> ", "content": "By Asel Mendis , KDnuggets. comments Python offers a variety of packages for plotting data. This tutorial will use the following packages to demonstrate Python's plotting capabilities: Matplotlib Seaborn \u00a0 Matplotlib import matplotlib.pyplot as plt\r %matplotlib inline\r import numpy as np In the above code chunk, we import the Matplotliib library with the PyPlot module as plt This is to make it easier to execute commmands as we will see later on in the tutorial. PyPlot contains a range of commands required to create and edit plots. %matplotlib inline is run so that the plot will show underneath the code chunk automatically when it is executed. Otherwise the user will need to type  everytime a new plot is created. This functionality is exclusive to Jupyter Notebook/IPython. Matplotlib's highly customizable code structure makes it a great guide to other plotting libraries. Lets see how we can generate a scatter plot from matplotlib. A handy tip is that whenever matplotlib is executed, the output will always include a text output that can be very visually unappealing. To fix this, add a semicolon - ';' at the end of the last line of code when executing a code chunk to generate a figure. The dataset used is the Bike Sharing Dataset from the UCI Machine Learning Repository. \u00a0 Matplotlib: Scatter Plot \u00a0 A scatter plot is one of the most influential, informative, and versatile plots in your arsenal. It can convey an array of information to the user without much work (as demonstrated below)  will give us a scatter plot of the data we pass in as the initial arguments. temp is the x-axis and cnt is the y-axis. c determines the colors of the data points. Because we passed a string - 'season' which is a column of the dataframe day, the colors correspond to the different seasons. This is a quick and easy method to group data in a visual format. \r \r ; Lets see the information that it shows: There were more than 8000 bike rentals at some point in time. The normalized temperature has gone above 0.8. The amount of bike rentals does not differ much with temperature or season. There is a positive linear relationship between bike rentals and normalized temperature.", "read_time": 112.8, "title_html": "<h1 id=\"title\">Data Visualization in Python: Matplotlib vs Seaborn</h1> "}