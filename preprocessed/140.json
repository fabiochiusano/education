{"content": "By Matthew Mayo, KDnuggets . Contents Overview Getting Text From Images Getting Text From Audio and Video Getting Text From Documents, PDFs, and Archives 1. Overview \u00a0 As outlined in a pair of previous posts , HPE Haven OnDemand is a cloud services platform which simplifies how you can interact with data, allowing it to be transformed into an asset anytime, anywhere. HPE Haven OnDemand provides a collection of over 60 machine learning application programming interfaces (APIs) for interacting with structured and unstructured data in a variety of ways. KDnuggets and HPE Haven OnDemand have teamed up to bring you a Text Extraction API Cheat Sheet, covering numerous methods for obtaining text from different media for your applications. \u00a0This cheat sheet specifically covers how to get text from: Images Audio and video Documents, PDFs, and archives As further processing of text after it is extracted is often desired, the cheat sheet also touches on several additional text-processing APIs. The HPE Haven OnDemand native APIs are POST and GET method-based, and can easily be embedded in any programming language or invoked independently with cURL calls. \u00a0To make development even more flexible, Haven OnDemand also provides a number of programming language-specific APIs , including Android, Go, Node.js, R, Ruby and more. This cheat sheet will consider both the native APIs, demonstrated by cURL calls, and the Python API . \u00a0Details regarding installation of all language specific APIs, including Python, can be found in the applicable Github repositories. Note that using HPE Haven OnDemand requires that one register for a free API key . \u00a0Also note that HPE Haven OnDemand provides both synchronous and asynchronous API call functionality; some particular APIs support both call types, while others support only one or the other. \u00a0You may want to read more about asynchronous API calls . The cheat sheet does not cover the basics of HPE Haven OnDemand APIs, so you may want to refer to the following previous posts for more information. HPE Haven OnDemand and Microsoft Azure Machine Learning: Power Tools for Developers and Data Scientists Data Science and Cognitive Computing with HPE Haven OnDemand: The Simple Path to Reason and Insight 2. Getting Text From Images \u00a0 The OCR Document API extracts text from an image that you provide. Using the native Haven OnDemand API, cURL can be used to issue a POST request to the OnDemand platform: curl -X POST --form \"file=@ocr-test-en.png\" --form \"YOUR_API_KEY\" /1/api/sync/ocrdocument/v1\r This would result in the following: {\r \"text_block\": [\r {\r \"text\": \"This is a lot of 12 point text to test the\\nocr code and see if it works on all types\\nof file format.\\nThe quick brown dog jumped over the\\nlazy fox. The quick brown dog jumped\\nover the lazy fox. The quick brown dog\\njumped over the lazy fox. The quick\\nbrown dog jumped over the lazy fox.\",\r \"left\": 36,\r \"top\": 92,\r \"width\": 582,\r \"height\": 269\r }\r ]\r }\r To accomplish the same using the Python API: # Import Haven OnDemand APIs \r from havenondemand.hodclient import * \r \r # Initiate Haven OnDemand client \r client = \r \r # Parameters to pass with request \r params = { 'file' : 'ocr-test-en.png' }\r \r # Make the API call (POST request; works with both 'url' and 'file') \r # HODApps.OCR_DOCUMENT denotes the API to use \r # async=False specifies a synchronous API call \r response = \r \r # Print the returned text from image embedded in dict response \r # Also includes other useful data \r print response[ 'text_block' ][ 0 ][ 'text' ]\r Note above the use of the params dict to pass parameters to the request. The same could be accompished by building an inline dict inside of the API call, but as parameters grow, organizing them separately is cleaner. As with all responses, additional data is also available, enclosed in a returned dict. In this case we simply extracted the text. What about further processing of the results with the Python API? No problem! # Perform sentiment analysis on result \r sent = \r print sent[ 'aggregate' ][ 'score' ]\r \r # Returned aggregate score \r # ==> -0.568579962053 \r 3. Getting Text From Audio and Video \u00a0 The Speech Recognition API creates a transcript of the text in an audio or video file. You can then use this output with other Haven OnDemand APIs, such as Concept Extraction or Add to Text Index , to gain further insight and analysis. Using the native Haven OnDemand API, cURL can be used to issue a POST request to the OnDemand platform: curl -X POST --form \"file=@first-lesson.mp3\" --form \"apikey=YOUR_API_KEY\" /1/api/async/recognizespeech/v1\r Here, an audio file named \"first-lesson.mp3\" has been passed to the Speech Recognition API . The Speech Recognition API is asynchronous only, and so additional API calls are required to check the status and/or get the results of the API call. \u00a0The first call, above, returns a job ID, as shown below: {\r \"jobID\": \"YOUR_JOB_ID\"\r }\r Checking the status of this job is accomplished via the following cURL call: curl -X POST /1/job/status/YOUR_JOB_ID?apikey=YOUR_API_KEY\r Getting the results of this job, once finished, is accomplished via the following cURL call: curl -X POST /1/job/result/YOUR_JOB_ID?apikey=YOUR_API_KEY\r Both of these return data in JSON format, which can be be captured of further processed as necessary. Now, let's see this same functionality using the Python API: # Import Haven OnDemand APIs \r from havenondemand.hodclient import * \r \r # Initiate Haven OnDemand client \r client = \r \r # Parameters to pass with request \r params = { 'file' : 'obama-victory-speech.mp4' }\r \r # API call (this API is ASYNC only) \r response = \r \r # Get the job ID for checking asynchonously... \r print response[ 'jobID' ]\r jobID = response[ 'jobID' ]\r \r # Check status (also returns result when finished) \r # Preferential to use status over result API to avoid timeout \r status = \r print status\r \r # Alternatively, check result \r result = \r print result\r 4. Getting Text From Documents, PDFs, and Archives \u00a0 The Text Extraction API extracts metadata and text content from a file that you provide. The API can handle over 500 different file formats. We will use the Text Extract API to extract text from a PDF document, a Microsoft Word document, and a ZIP archive. Extracting Text From PDF Files Using the native Haven OnDemand API, cURL can be used to issue a POST request to the OnDemand platform: curl -X POST --form \"file=@kdnuggets-test.pdf\" --form \"extract_metadata=true\" --form \"extract_text=true\" --form \"extract_xmlattributes=false\" --form \"apikey=YOUR_API_KEY\" /1/api/sync/extracttext/v1\r This would result in the following (an excerpt): {\r \"document\": [\r {\r \"reference\": \"kdnuggets-test.pdf\",\r \"doc_iod_reference\": \"4733178f00148f4a2a1b573c6cb2674c\",\r \"app_name\": [\r \"Skia/PDF m53\"\r ],\r \"content_type\": [\r \"application/pdf\"\r ],\r \"document_attributes\": [\r \"0\"\r ],\r \"document_embedded_font_ratio\": [\r \"0\"\r ],\r \"document_pct_embedded_font\": [\r \"0\"\r ],\r \"document_pct_probability_mismatch\": [\r \"0\"\r ],\r \"file_size\": [\r 78519\r ],\r \"page_count\": [\r \"2\"\r ],\r \"processing_error_code\": [\r \"1\"\r ],\r \"processing_error_description\": [\r \"Document: Embedded Font\"\r ],\r \"content\": \"Top /r/MachineLearning stories this month:\r \r . . .\r \r }\r ],\r \"md5sum\": [\r \"f1b75da0ca2341a57316c9c0a375697a\"\r ]\r }\r Now, let's see this same functionality using the Python API (note that this would only print the content of the file, yet more data is returned): # Import Haven OnDemand APIs \r from havenondemand.hodclient import * \r \r # Initiate Haven OnDemand client \r client = \r \r # Parameters to pass with request \r params = { 'file' : 'kdnuggets-test.pdf' }\r \r # API call \r response = \r \r # Print only the content of the submitted file \r # Also includes other useful data \r print response[ 'document' ][ 0 ][ 'content' ]\r Extracting Text From Word Documents Using the native Haven OnDemand API, cURL can be used to issue a POST request to the OnDemand platform: curl -X POST --form \"file=@kdnuggets-test.docx\" --form \"extract_metadata=true\" --form \"extract_text=true\" --form \"extract_xmlattributes=false\" --form \"apikey=YOUR_API_KEY\" /1/api/sync/extracttext/v1\r This would result in the following (an excerpt): {\r \"document\": [\r {\r \"reference\": \"kdnuggets-test.docx\",\r \"doc_iod_reference\": \"2d761859357918e41912e19cd4818165\",\r \"content_type\": [\r \"application/x-ms-word07\"\r ],\r \"document_attributes\": [\r \"0\"\r ],\r \"file_size\": [\r 6267\r ],\r \"content\": \"Top /r/MachineLearning stories this month:\r \r . . .\r \r }\r ],\r \"md5sum\": [\r \"050a4db634241c7057bfd7539f09366f\"\r ]\r }\r This functionality is achievable via the Python API using the same code excerpt as in the PDF text extraction example above, substituting for the appropriate Microsoft Word filename. Extracting Text From ZIP Archives Using the native Haven OnDemand API, cURL can be used to issue a POST request to the OnDemand platform: curl -X POST --form \"file=@kdnuggets-test.zip\" --form \"extract_metadata=true\" --form \"extract_text=true\" --form \"extract_xmlattributes=false\" --form \"apikey=YOUR_API_KEY\" /1/api/sync/extracttext/v1\r This would result in the following (an excerpt): {\r \"document\": [\r {\r \"reference\": \"kdnuggets-test.zip\",\r \"doc_iod_reference\": \"3573e81cca7695b998cbefc4098b112f\",\r \"content_type\": [\r \"application/zip\"\r ],\r \"document_attributes\": [\r \"0\"\r ],\r \"file_size\": [\r 82375\r ]\r },\r {\r \"reference\": \"kdnuggets-test.zip:kdnuggets-test.docx\",\r \"parent_iod_reference\": \"3573e81cca7695b998cbefc4098b112f\",\r \"doc_iod_reference\": \"d636d9e2371bfd5ff370059ccae0619f\",\r \r . . .\r \r },\r {\r \"reference\": \"kdnuggets-test.zip:kdnuggets-test.pdf\",\r \"parent_iod_reference\": \"3573e81cca7695b998cbefc4098b112f\",\r \"doc_iod_reference\": \"1499d6bfd5621756de8965738b6cf5dc\",\r \r . . .\r \r }\r ],\r \"md5sum\": [\r \"6c2f26f89baf9a629c45aebc3e4aa5a0\"\r ]\r }\r This functionality is achievable via the Python API using the same code excerpt as in the PDF text extraction example above, substituting for the appropriate ZIP archive filename. An alternate approach to accessing files within compressed archives would be to first extract the contents of the ZIP file (or any other type of container) using the Expand Container API , which then stores the files for processing by other APIs. This native API call: curl -X POST --form \"file=@kdnuggets-test.zip\" --form \"apikey=YOUR_API_KEY\" /1/api/sync/expandcontainer/v1\r would produce the following result: {\r \"files\": [\r {\r \"name\": \"kdnuggets-test.docx\",\r \"reference\": \"f8af1448-4b9f-406d-b03f-9b035716cf7f-14e78989\",\r \"size\": 6267\r },\r {\r \"name\": \"kdnuggets-test.pdf\",\r \"reference\": \"76643f0f-de05-4bb0-9afc-979e96758f8c-14e78989\",\r \"size\": 78519\r }\r ]\r }\r These extracted files could then be processed in other APIs via their reference. HPE Haven OnDemand includes various connector APIs, which allow you to retrieve information from external systems and update it through the available APIs. Supported connector types include the local filesystem , web resources , SharePoint repositories , and Dropbox accounts . The connectors make it easy to incorporate data from across numerous systems into Haven OnDemand projects. Related: Build Your Own Audio/Video Analytics App With HPE Haven OnDemand \u2013 Part 1 Build Your Own Audio/Video Analytics App With HPE Haven OnDemand \u2013 Part 2 Machine Learning at your fingertips \u2013 60+ free APIs, from HPE Haven OnDemand Note: the article was commissioned by HPE, but written by an independent KDnuggets expert.", "title_html": "<h1 id=\"title\">HPE Haven OnDemand Text Extraction API Cheat Sheet for Developers</h1> ", "url": "https://www.kdnuggets.com/2016/06/hpe-haven-ondemand-text-extraction-cheat-sheet.html", "tfidf": {"tfidf": {"after": 1.02070207021, "matthew": 6.908616187989999, "touch": 5.45567010309, "web": 5.17133550489, "extern": 5.24133377352, "kdnuggetstestdocx": 6350.4, "documentpctprobabilitymismatch": 1587.6, "form": 23.678693181779998, "numapisyncocrdocumentvnum": 1587.6, "addit": 3.73904851626, "embed": 50.506892895, "number": 1.10142916609, "follow": 8.37121012392, "audio": 45.28237307475, "been": 1.0239277652399998, "timeout": 273.724137931, "specif": 3.7438981252199994, "function": 12.477208424999999, "client": 84.8227960818, "dog": 18.78816568047, "documentembeddedfontratio": 1587.6, "python": 450.3829787232, "numapisyncexpandcontainervnum": 1587.6, "work": 2.23040179826, "asynchon": 1587.6, "fox": 26.12258329904, "approach": 2.07556543339, "path": 4.6421052631599995, "url": 41.669291338600004, "onc": 1.4974533106999999, "transcript": 13.318791946300001, "their": 1.01547908405, "sheet": 43.04772234275, "fnumafnumbnumfnumdbnumfnumbnumcfnumfnumenum": 1587.6, "creat": 1.2492917847, "jumpednov": 1587.6, "how": 3.20500656102, "test": 2.65707112971, "commiss": 2.47212706322, "mnum": 14.086956521700001, "firstlessonmpnum": 3175.2, "ocrtestenpng": 3175.2, "expert": 5.36713995943, "found": 1.11387076405, "invok": 18.227324913900002, "word": 5.3896118592299995, "will": 2.44962197192, "overview": 25.3610223642, "accompish": 1587.6, "consid": 1.2397313759200002, "skiapdf": 1587.6, "incorpor": 2.62847682119, "updat": 5.56466876972, "below": 2.25607503197, "perform": 1.5313977042500002, "recognit": 13.200665188470001, "demonstr": 2.64997496244, "obtain": 2.68629441624, "metadata": 211.68, "point": 1.25990000794, "applic": 10.28016404058, "organ": 1.6387283237, "stori": 4.04793472718, "has": 1.0436497502, "have": 1.0148948411399998, "also": 7.10335570469, "pass": 8.09091835695, "would": 7.580110497259999, "azur": 113.4, "resourc": 2.9487369985100003, "numanumdbnumcnumbfdnumfnumf": 1587.6, "format": 5.0625, "concept": 2.65707112971, "applicationxmswordnum": 1587.6, "brown": 9.664772727270002, "numer": 3.66651270208, "numcnumfnumfnumbafnumanumcnumaebcnumenumaanumanum": 1587.6, "reason": 1.72340425532, "filesystem": 529.2, "print": 29.67476635512, "not": 1.01567398119, "numapiasyncrecognizespeechvnum": 1587.6, "processingerrordescript": 1587.6, "altern": 4.278092158440001, "regard": 1.78944995491, "quick": 6.615, "numfnumfnumanumanumbnumcnumcbnumc": 1587.6, "aggreg": 35.085082873000005, "shown": 2.76923076923, "handl": 3.9229058561900003, "asyncfals": 1587.6, "index": 6.9969149405, "separ": 1.6012102874399998, "extractmetadatatru": 4762.799999999999, "instal": 3.78721374046, "jump": 16.14234875444, "allow": 2.5432118542200004, "scienc": 2.31969608416, "kdnugget": 4762.799999999999, "audiovideo": 3175.2, "github": 1587.6, "numapisyncextracttextvnum": 4762.799999999999, "kdnuggetstestzip": 7938.0, "filenam": 992.25, "respons": 13.56021638037, "simpl": 3.3981164383599998, "regist": 3.9620663838300003, "develop": 2.3911439114400004, "such": 1.06151377374, "mdnumsum": 4762.799999999999, "sever": 1.07241286139, "via": 11.48936170215, "lot": 4.40877534018, "some": 1.04036697248, "collect": 1.64109985528, "add": 4.61243463103, "result": 16.045625180480002, "document": 30.491677336800002, "varieti": 2.2972073506, "produc": 1.36932896326, "repositori": 89.94900849860001, "languag": 4.58976582828, "media": 2.59369384088, "ani": 2.26767604628, "ondemand": 50803.2, "from": 21.01191151437, "account": 1.94463498285, "obamavictoryspeechmpnum": 1587.6, "applicationzip": 1587.6, "anywher": 10.1638924456, "detail": 2.26186066391, "num": 30.009451200300003, "necessari": 2.8421052631599997, "free": 3.43636363636, "left": 1.4398693996, "pdfs": 1587.6000000000001, "for": 10.003150400100001, "sentiment": 9.9225, "typesnof": 1587.6, "output": 7.676982591880001, "height": 4.1023255814, "simplifi": 12.109839816900001, "with": 13.015576716869997, "written": 1.9573418813999999, "easi": 5.2937645882, "dognjump": 1587.6, "are": 2.05981187156, "cleaner": 45.7521613833, "nativ": 24.05910210264, "month": 3.0159574468, "sent": 4.65367140554, "video": 13.18878504672, "extract": 123.24890829696001, "asynchron": 496.125, "documentpctembeddedfont": 1587.6, "then": 3.25973581548, "doe": 1.70581282905, "even": 1.16461267606, "could": 2.4087391898, "hodappsocrdocu": 1587.6, "avoid": 2.45986984816, "kdnuggetstestpdf": 7938.0, "preferenti": 45.6206896552, "type": 6.084312723570001, "note": 7.12247644685, "scientist": 4.69426374926, "machin": 12.073003802279999, "into": 2.03004922958, "through": 1.07074930869, "servic": 1.51300867245, "requir": 3.05689804564, "what": 1.25343439128, "textprocess": 1587.6, "local": 1.51720183486, "let": 6.97233201582, "particular": 1.3814827706200001, "thenlazi": 1587.6, "flexibl": 9.68639414277, "program": 6.06417112299, "denot": 10.1965317919, "languagespecif": 1587.6, "cover": 5.08140403287, "own": 2.35688836104, "relat": 1.23750876919, "can": 12.93887530562, "tool": 4.99716713881, "compress": 16.746835443, "files": 4762.799999999999, "post": 4.47652615254, "here": 2.42307692308, "microsoft": 74.5352112675, "paramet": 86.28260869550002, "font": 42.7924528302, "contain": 3.19629555064, "about": 2.12972030318, "problem": 1.76674827509, "job": 13.015781922519999, "simpli": 2.5192002538900002, "check": 32.53278688525, "connector": 187.5118110237, "across": 1.7318642958400001, "pagecount": 1587.6, "articl": 2.01805008262, "them": 1.09876115994, "insight": 23.6074349442, "request": 30.9051975861, "asset": 8.63295269168, "numfnumfdenumbbnumafcnumenumfnumcnumenum": 1587.6, "expand": 2.2260235558000003, "cheat": 158.4431137725, "support": 3.8056731921600004, "speech": 11.468336142540002, "numenumccanumbnumcbefcnumbnumf": 4762.799999999999, "the": 83.0, "processingerrorcod": 1587.6, "often": 1.29452054795, "build": 4.9025218734000005, "analysi": 6.95705521472, "documentattribut": 4762.799999999999, "provid": 6.07763570935, "unstructur": 214.54054054099998, "initi": 4.050000000000001, "team": 2.2748244734200003, "dnumdnumenumbfdnumffnumccaenumf": 1587.6, "same": 6.71147748888, "formatnth": 1587.6, "nodej": 1587.6, "interfac": 20.9169960474, "numjobresultyourjobid": 1587.6, "exampl": 3.00966824644, "appnam": 1587.6, "extracttexttru": 4762.799999999999, "dociodrefer": 7938.0, "previous": 2.85693719632, "now": 2.321561746, "synchron": 52.0524590164, "further": 5.447246526, "rmachinelearn": 3175.2, "name": 3.3063519611100003, "code": 11.64214128576, "interact": 8.8371834122, "desir": 3.00170164492, "basic": 2.7301805675, "haven": 342.64748201400005, "power": 1.3396337861799998, "substitut": 15.93176116408, "issu": 7.19608376395, "cloud": 10.6193979933, "specifi": 6.920662598080001, "methodbas": 1587.6, "accomplish": 15.519061583580001, "numjobstatusyourjobid": 1587.6, "over": 6.15150145302, "may": 2.10403551786, "mayo": 49.7680250784, "fingertip": 226.8, "want": 3.99396226416, "captur": 2.88026124819, "jobid": 6350.4, "system": 2.77479681902, "various": 1.3323262839899999, "cognit": 21.454054054100002, "archiv": 23.415929203519998, "which": 4.02076738, "width": 17.294117647100002, "other": 8.07938931296, "refer": 11.702211302250001, "one": 2.01254991444, "inform": 3.1506251240400003, "status": 14.782122905040001, "see": 3.81726376533, "andor": 690.260869565, "imag": 13.506891271050002, "get": 17.8562591385, "abov": 7.61530159492, "parentiodrefer": 3175.2, "file": 86.73349168640999, "part": 2.08661365578, "both": 5.26078600305, "independ": 3.17901481778, "applicationpdf": 1587.6, "thenocr": 1587.6, "yet": 2.1258703802900003, "numdnumbfdnumdenumbnumcfnumdc": 1587.6, "includ": 6.114384748679999, "structur": 2.0580762250499998, "textblock": 3175.2, "access": 1.8734953976900002, "this": 20.075872534200002, "api": 1435.5957446802001, "process": 8.4762413241, "lazi": 145.6513761468, "project": 1.7534791252500002, "differ": 2.4730898045, "dropbox": 1587.6, "but": 2.03264835798, "curl": 902.6488294321999, "analyt": 34.513043478200004, "return": 9.767270170489999, "dict": 5292.0, "all": 3.03440366973, "top": 5.516330785260001, "grow": 2.27287043665, "fnumbnumdanumcanumanumcnumcnumanuma": 1587.6, "outlin": 6.38102893891, "store": 3.44680851064, "android": 57.1079136691, "appropri": 8.62826086956, "case": 1.48498737256, "content": 28.3373493976, "that": 6.0239043825, "pair": 4.36873968079, "call": 17.0824478816, "more": 5.085853408499999, "and": 25.001574803249998, "while": 1.0441988950299999, "numdnumenumenumcdnum": 1587.6, "finish": 6.45759609518, "achiev": 3.74433962264, "these": 2.14830852504, "enclos": 14.8930581614, "gain": 1.84819557625, "extractxmlattributesfals": 4762.799999999999, "quicknbrown": 1587.6, "retriev": 2.16826003824, "submit": 5.770992366410001, "anytim": 114.215827338, "platform": 37.3992932862, "avail": 3.4576935642, "comput": 3.9277585353800006, "make": 3.2287980475800007, "way": 1.2190739461, "onli": 5.128238258300001, "havenondemandhodcli": 4762.799999999999, "transform": 3.42007755278, "size": 4.9877474081, "bring": 2.03616775683, "key": 2.28005170185, "param": 3342.3157894720002, "read": 2.3149606299200003, "data": 33.7643555934, "method": 2.5714285714300003, "excerpt": 62.8503562945, "inlin": 100.481012658, "apikeyyourapikey": 11113.199999999999, "text": 84.46344827589, "insid": 2.7396031061299997, "contenttyp": 4762.799999999999, "import": 8.041195340220002, "first": 2.01523229246, "app": 71.67494356659999, "use": 24.711330177119997, "score": 8.576985413300001, "rubi": 41.2363636364, "easili": 3.6938110749199997, "sharepoint": 1587.6, "within": 1.2369302688, "learn": 6.968251645950001, "when": 1.02076769755}, "logtfidf": {"after": 0.020490694648099998, "matthew": 1.9327693554900003, "touch": 1.6966554537399998, "web": 1.6431309733200001, "extern": 1.6565760028799998, "kdnuggetstestdocx": 29.479914883640003, "documentpctprobabilitymismatch": 7.369978720910001, "form": 2.521116868011, "numapisyncocrdocumentvnum": 7.369978720910001, "addit": 0.6606566489160001, "embed": 8.47049259381, "number": 0.0966085784186, "follow": 0.36285528875359996, "audio": 11.017399644900001, "been": 0.023645982368400004, "timeout": 5.61212080336, "specif": 1.253960335082, "function": 4.57232870797, "client": 15.892829154959998, "dog": 5.50384469364, "documentembeddedfontratio": 7.369978720910001, "python": 32.24525394368, "numapisyncexpandcontainervnum": 7.369978720910001, "work": 0.218069134546, "asynchon": 7.369978720910001, "fox": 7.506023358360001, "approach": 0.7302336145810001, "path": 1.5351679838499999, "url": 3.72976443878, "onc": 0.403765872355, "transcript": 2.58917596628, "their": 0.015360505122700001, "sheet": 10.76435704895, "fnumafnumbnumfnumdbnumfnumbnumcfnumfnumenum": 7.369978720910001, "creat": 0.222576818514, "jumpednov": 7.369978720910001, "how": 0.9431339138600001, "test": 0.977224437103, "commiss": 0.905078939253, "mnum": 2.6452492998599997, "firstlessonmpnum": 14.739957441820001, "ocrtestenpng": 14.739957441820001, "expert": 1.68029517063, "found": 0.107841124048, "invok": 2.9029218370499996, "word": 1.757583247155, "will": 0.40557306983, "overview": 5.08013252448, "accompish": 7.369978720910001, "consid": 0.214894723824, "skiapdf": 7.369978720910001, "incorpor": 0.9664045229739999, "updat": 1.7164374626899999, "below": 0.813626591936, "perform": 0.42618085058, "recognit": 4.444964798160001, "demonstr": 0.9745501918189999, "obtain": 0.988162703503, "metadata": 5.35507570037, "point": 0.23103235903299998, "applic": 3.6948117854699998, "organ": 0.49392052866999997, "stori": 1.410119253174, "has": 0.0427239448548, "have": 0.0147850023412, "also": 0.1026001046, "pass": 2.4065216487, "would": 0.5573233957529, "azur": 4.73092139129, "resourc": 1.08137694258, "numanumdbnumcnumbfdnumfnumf": 7.369978720910001, "format": 1.8574265037459998, "concept": 0.977224437103, "applicationxmswordnum": 7.369978720910001, "brown": 3.50962592607, "numer": 1.212187624692, "numcnumfnumfnumbafnumanumcnumaebcnumenumaanumanum": 7.369978720910001, "reason": 0.544301552962, "filesystem": 6.27136643224, "print": 10.73765240703, "not": 0.0155524130075, "numapiasyncrecognizespeechvnum": 7.369978720910001, "processingerrordescript": 7.369978720910001, "altern": 1.520719944564, "regard": 0.5819082848730001, "quick": 2.3721825266970002, "numfnumfnumanumanumbnumcnumcbnumc": 7.369978720910001, "aggreg": 5.7292577404, "shown": 1.01856958099, "handl": 1.36683266903, "asyncfals": 7.369978720910001, "index": 1.94546932912, "separ": 0.470759772949, "extractmetadatatru": 22.10993616273, "instal": 1.3316305879, "jump": 4.17659799102, "allow": 0.48056122237800003, "scienc": 0.841436178891, "kdnugget": 22.10993616273, "audiovideo": 14.739957441820001, "github": 7.369978720910001, "numapisyncextracttextvnum": 22.10993616273, "kdnuggetstestzip": 36.849893604550005, "filenam": 12.4136558222, "respons": 3.689240960727, "simpl": 1.2232212893899999, "regist": 1.3767657032700003, "develop": 0.357249389826, "such": 0.059695977806, "mdnumsum": 22.10993616273, "sever": 0.06991112039689999, "via": 4.15991812707, "lot": 1.4835969502500002, "some": 0.0395735090645, "collect": 0.49536666052, "add": 1.52875583713, "result": 1.909304717334, "document": 11.190565468595999, "varieti": 0.8316941898119999, "produc": 0.314320812003, "repositori": 7.612191513939999, "languag": 1.6613636488119998, "media": 0.9530830530519999, "ani": 0.251216716732, "ondemand": 235.83931906912002, "from": 0.011908137546185998, "account": 0.665074289973, "obamavictoryspeechmpnum": 7.369978720910001, "applicationzip": 7.369978720910001, "anywher": 2.3188414835, "detail": 0.816187777173, "num": 0.009449711861910001, "necessari": 1.0445450673999999, "free": 1.0825332985340002, "left": 0.364552414753, "pdfs": 18.81409929672, "for": 0.0031499039539700006, "sentiment": 2.29480490568, "typesnof": 7.369978720910001, "output": 2.03822657827, "height": 1.4115540278799998, "simplifi": 2.4940183301400003, "with": 0.01556739227407, "written": 0.671587369833, "easi": 1.6665296351499999, "dognjump": 7.369978720910001, "are": 0.0589349471654, "cleaner": 3.8232390339599998, "nativ": 8.80857479264, "month": 0.821540320676, "sent": 1.689018554176, "video": 4.77228995868, "extract": 32.66587572816, "asynchron": 15.324646867320002, "documentpctembeddedfont": 7.369978720910001, "then": 0.24910159569269996, "doe": 0.5340417297169999, "even": 0.152388564834, "could": 0.37191254458000006, "hodappsocrdocu": 7.369978720910001, "avoid": 0.900108441291, "kdnuggetstestpdf": 36.849893604550005, "preferenti": 3.8203613341300007, "type": 2.121304456161, "note": 1.7690878404150001, "scientist": 1.54634128444, "machin": 4.17707874186, "into": 0.0298257264574, "through": 0.0683586918849, "servic": 0.41410016674500005, "requir": 0.84850702135, "what": 0.225887296827, "textprocess": 7.369978720910001, "local": 0.416867740206, "let": 2.4976051345599997, "particular": 0.323157393804, "thenlazi": 7.369978720910001, "flexibl": 2.2707222351599996, "program": 2.111356736295, "denot": 2.3220476420700003, "languagespecif": 7.369978720910001, "cover": 1.5809259574680001, "own": 0.328390154842, "relat": 0.21310030165399999, "can": 1.7857520603339998, "tool": 1.60887117963, "compress": 2.81820931165, "files": 22.10993616273, "post": 1.6114003054019999, "here": 0.8850381883700001, "microsoft": 9.637978078589999, "paramet": 14.240950719299999, "font": 3.7563617513, "contain": 0.937690636472, "about": 0.1256869549492, "problem": 0.569140724273, "job": 4.719473016359999, "simpli": 0.923941491586, "check": 9.3640524781, "connector": 12.405688640640001, "across": 0.549198455941, "pagecount": 7.369978720910001, "articl": 0.702131739574, "them": 0.0941833269093, "insight": 4.93682904374, "request": 11.283392834399999, "asset": 2.1555865893, "numfnumfdenumbbnumafcnumenumfnumcnumenum": 7.369978720910001, "expand": 0.80021683492, "cheat": 17.2797885641, "support": 0.713641830111, "speech": 4.02293271081, "numenumccanumbnumcbefcnumbnumf": 22.10993616273, "the": 0.0, "processingerrorcod": 7.369978720910001, "often": 0.258140393351, "build": 1.4734123562730002, "analysi": 2.4932182058400003, "documentattribut": 22.10993616273, "provid": 0.9758892216250001, "unstructur": 5.3684987207, "initi": 0.90031377735, "team": 0.821902894886, "dnumdnumenumbfdnumffnumccaenumf": 7.369978720910001, "same": 0.672357897624, "formatnth": 7.369978720910001, "nodej": 7.369978720910001, "interfac": 3.0405620365099995, "numjobresultyourjobid": 7.369978720910001, "exampl": 0.8173653499979999, "appnam": 7.369978720910001, "extracttexttru": 22.10993616273, "dociodrefer": 36.849893604550005, "previous": 0.713205920126, "now": 0.298185890042, "synchron": 6.51820971348, "further": 1.235263581188, "rmachinelearn": 14.739957441820001, "name": 0.29169949915290005, "code": 4.06805728791, "interact": 2.9716420535799997, "desir": 1.0991793428399999, "basic": 1.00436774895, "haven": 68.60336319288, "power": 0.292396282715, "substitut": 4.15033498738, "issu": 1.82049521967, "cloud": 2.36268232808, "specifi": 1.93451151621, "methodbas": 7.369978720910001, "accomplish": 4.93037027784, "numjobstatusyourjobid": 7.369978720910001, "over": 0.1496203289742, "may": 0.10141999056880001, "mayo": 3.90737271112, "fingertip": 5.4240685718499995, "want": 1.3832732125099998, "captur": 1.0578810012100002, "jobid": 29.479914883640003, "system": 0.65486069117, "various": 0.28692650007, "cognit": 3.0659136276999996, "archiv": 8.45254463837, "which": 0.02071365538172, "width": 2.85036642328, "other": 0.07899798335808, "refer": 2.362979221182, "one": 0.012510703291, "inform": 0.908907409324, "status": 5.409954417636, "see": 0.722764756476, "andor": 6.5370695979699995, "imag": 4.96881053645, "get": 5.79769005782, "abov": 2.575460919264, "parentiodrefer": 14.739957441820001, "file": 30.52895540629, "part": 0.08479062196560001, "both": 0.2542126669465, "independ": 0.926848325006, "applicationpdf": 7.369978720910001, "thenocr": 7.369978720910001, "yet": 0.754181309241, "numdnumbfdnumdenumbnumcfnumdc": 7.369978720910001, "includ": 0.113308088343, "structur": 0.7217716751350001, "textblock": 14.739957441820001, "access": 0.627805882716, "this": 0.07572898105, "api": 75.41407146819, "process": 2.6391459951250003, "lazi": 11.64781092903, "project": 0.561601885907, "differ": 0.424642242624, "dropbox": 7.369978720910001, "but": 0.0323847441438, "curl": 67.52604408866999, "analyt": 5.696380287719999, "return": 2.331888080144, "dict": 28.75062865644, "all": 0.03420789629339999, "top": 1.8273019133640003, "grow": 0.821043542212, "fnumbnumdanumcanumanumcnumcnumanuma": 7.369978720910001, "outlin": 1.85332936004, "store": 1.2374487335200002, "android": 4.04494270021, "appropri": 2.9237915654799997, "case": 0.395406268889, "content": 10.11791327632, "that": 0.02385689027784, "pair": 1.47447456495, "call": 1.0474043911808, "more": 0.08512465799999999, "and": 0.00157475355159, "while": 0.04324998379380001, "numdnumenumenumcdnum": 7.369978720910001, "finish": 2.34421989298, "achiev": 1.2541961702339999, "these": 0.1430672388016, "enclos": 2.70089520918, "gain": 0.6142097989249999, "extractxmlattributesfals": 22.10993616273, "quicknbrown": 7.369978720910001, "retriev": 0.773925020223, "submit": 1.7528440529799998, "anytim": 4.73808988077, "platform": 10.97935403352, "avail": 1.094909172578, "comput": 1.36806891594, "make": 0.22049297346869998, "way": 0.19809150993500002, "onli": 0.12662134164549999, "havenondemandhodcli": 22.10993616273, "transform": 1.22966322707, "size": 1.8276744121219999, "bring": 0.7110694905930001, "key": 0.82419811896, "param": 26.91249933896, "read": 0.83939268088, "data": 12.168205848, "method": 0.944461608841, "excerpt": 12.65659345775, "inlin": 4.609968780880001, "apikeyyourapikey": 51.58985104637001, "text": 30.793014269729998, "insid": 1.00781305813, "contenttyp": 22.10993616273, "import": 1.756909662396, "first": 0.015174579624319999, "app": 7.15798808772, "use": 0.7009924735584, "score": 2.9118706415400006, "rubi": 3.7193204796199995, "easili": 1.3066587367, "sharepoint": 7.369978720910001, "within": 0.21263272059799998, "learn": 2.528256194235, "when": 0.0205549888584}, "logidf": {"after": 0.020490694648099998, "matthew": 1.9327693554900003, "touch": 1.6966554537399998, "web": 1.6431309733200001, "extern": 1.6565760028799998, "kdnuggetstestdocx": 7.369978720910001, "documentpctprobabilitymismatch": 7.369978720910001, "form": 0.120053184191, "numapisyncocrdocumentvnum": 7.369978720910001, "addit": 0.220218882972, "embed": 2.82349753127, "number": 0.0966085784186, "follow": 0.045356911094199995, "audio": 2.2034799289800002, "been": 0.023645982368400004, "timeout": 5.61212080336, "specif": 0.626980167541, "function": 0.914465741594, "client": 2.6488048591599997, "dog": 1.8346148978799999, "documentembeddedfontratio": 7.369978720910001, "python": 4.03065674296, "numapisyncexpandcontainervnum": 7.369978720910001, "work": 0.109034567273, "asynchon": 7.369978720910001, "fox": 1.8765058395900003, "approach": 0.7302336145810001, "path": 1.5351679838499999, "url": 3.72976443878, "onc": 0.403765872355, "transcript": 2.58917596628, "their": 0.015360505122700001, "sheet": 2.15287140979, "fnumafnumbnumfnumdbnumfnumbnumcfnumfnumenum": 7.369978720910001, "creat": 0.222576818514, "jumpednov": 7.369978720910001, "how": 0.47156695693000006, "test": 0.977224437103, "commiss": 0.905078939253, "mnum": 2.6452492998599997, "firstlessonmpnum": 7.369978720910001, "ocrtestenpng": 7.369978720910001, "expert": 1.68029517063, "found": 0.107841124048, "invok": 2.9029218370499996, "word": 0.585861082385, "will": 0.202786534915, "overview": 2.54006626224, "accompish": 7.369978720910001, "consid": 0.214894723824, "skiapdf": 7.369978720910001, "incorpor": 0.9664045229739999, "updat": 1.7164374626899999, "below": 0.813626591936, "perform": 0.42618085058, "recognit": 1.4816549327200002, "demonstr": 0.9745501918189999, "obtain": 0.988162703503, "metadata": 5.35507570037, "point": 0.23103235903299998, "applic": 1.23160392849, "organ": 0.49392052866999997, "stori": 0.705059626587, "has": 0.0427239448548, "have": 0.0147850023412, "also": 0.0146571578, "pass": 0.48130432974, "would": 0.0796176279647, "azur": 4.73092139129, "resourc": 1.08137694258, "numanumdbnumcnumbfdnumfnumf": 7.369978720910001, "format": 0.9287132518729999, "concept": 0.977224437103, "applicationxmswordnum": 7.369978720910001, "brown": 1.16987530869, "numer": 0.606093812346, "numcnumfnumfnumbafnumanumcnumaebcnumenumaanumanum": 7.369978720910001, "reason": 0.544301552962, "filesystem": 6.27136643224, "print": 1.19307248967, "not": 0.0155524130075, "numapiasyncrecognizespeechvnum": 7.369978720910001, "processingerrordescript": 7.369978720910001, "altern": 0.760359972282, "regard": 0.5819082848730001, "quick": 0.790727508899, "numfnumfnumanumanumbnumcnumcbnumc": 7.369978720910001, "aggreg": 2.8646288702, "shown": 1.01856958099, "handl": 1.36683266903, "asyncfals": 7.369978720910001, "index": 1.94546932912, "separ": 0.470759772949, "extractmetadatatru": 7.369978720910001, "instal": 1.3316305879, "jump": 2.08829899551, "allow": 0.24028061118900002, "scienc": 0.841436178891, "kdnugget": 7.369978720910001, "audiovideo": 7.369978720910001, "github": 7.369978720910001, "numapisyncextracttextvnum": 7.369978720910001, "kdnuggetstestzip": 7.369978720910001, "filenam": 6.2068279111, "respons": 0.40991566230300003, "simpl": 1.2232212893899999, "regist": 1.3767657032700003, "develop": 0.178624694913, "such": 0.059695977806, "mdnumsum": 7.369978720910001, "sever": 0.06991112039689999, "via": 0.831983625414, "lot": 1.4835969502500002, "some": 0.0395735090645, "collect": 0.49536666052, "add": 1.52875583713, "result": 0.136378908381, "document": 0.932547122383, "varieti": 0.8316941898119999, "produc": 0.314320812003, "repositori": 3.8060957569699996, "languag": 0.8306818244059999, "media": 0.9530830530519999, "ani": 0.125608358366, "ondemand": 7.369978720910001, "from": 0.000567054168866, "account": 0.665074289973, "obamavictoryspeechmpnum": 7.369978720910001, "applicationzip": 7.369978720910001, "anywher": 2.3188414835, "detail": 0.816187777173, "num": 0.00031499039539700004, "necessari": 1.0445450673999999, "free": 0.5412666492670001, "left": 0.364552414753, "pdfs": 6.27136643224, "for": 0.00031499039539700004, "sentiment": 2.29480490568, "typesnof": 7.369978720910001, "output": 2.03822657827, "height": 1.4115540278799998, "simplifi": 2.4940183301400003, "with": 0.00119749171339, "written": 0.671587369833, "easi": 1.6665296351499999, "dognjump": 7.369978720910001, "are": 0.0294674735827, "cleaner": 3.8232390339599998, "nativ": 1.10107184908, "month": 0.410770160338, "sent": 0.844509277088, "video": 1.19307248967, "extract": 2.04161723301, "asynchron": 5.10821562244, "documentpctembeddedfont": 7.369978720910001, "then": 0.08303386523089999, "doe": 0.5340417297169999, "even": 0.152388564834, "could": 0.18595627229000003, "hodappsocrdocu": 7.369978720910001, "avoid": 0.900108441291, "kdnuggetstestpdf": 7.369978720910001, "preferenti": 3.8203613341300007, "type": 0.707101485387, "note": 0.353817568083, "scientist": 1.54634128444, "machin": 1.39235958062, "into": 0.0149128632287, "through": 0.0683586918849, "servic": 0.41410016674500005, "requir": 0.424253510675, "what": 0.225887296827, "textprocess": 7.369978720910001, "local": 0.416867740206, "let": 1.2488025672799998, "particular": 0.323157393804, "thenlazi": 7.369978720910001, "flexibl": 2.2707222351599996, "program": 0.7037855787649999, "denot": 2.3220476420700003, "languagespecif": 7.369978720910001, "cover": 0.526975319156, "own": 0.164195077421, "relat": 0.21310030165399999, "can": 0.162341096394, "tool": 1.60887117963, "compress": 2.81820931165, "files": 7.369978720910001, "post": 0.8057001527009999, "here": 0.8850381883700001, "microsoft": 3.21265935953, "paramet": 2.8481901438599997, "font": 3.7563617513, "contain": 0.468845318236, "about": 0.0628434774746, "problem": 0.569140724273, "job": 1.1798682540899998, "simpli": 0.923941491586, "check": 1.87281049562, "connector": 4.135229546880001, "across": 0.549198455941, "pagecount": 7.369978720910001, "articl": 0.702131739574, "them": 0.0941833269093, "insight": 2.46841452187, "request": 1.12833928344, "asset": 2.1555865893, "numfnumfdenumbbnumafcnumenumfnumcnumenum": 7.369978720910001, "expand": 0.80021683492, "cheat": 3.4559577128199996, "support": 0.237880610037, "speech": 1.3409775702700002, "numenumccanumbnumcbefcnumbnumf": 7.369978720910001, "the": 0.0, "processingerrorcod": 7.369978720910001, "often": 0.258140393351, "build": 0.491137452091, "analysi": 1.2466091029200002, "documentattribut": 7.369978720910001, "provid": 0.19517784432500002, "unstructur": 5.3684987207, "initi": 0.30010459245, "team": 0.821902894886, "dnumdnumenumbfdnumffnumccaenumf": 7.369978720910001, "same": 0.112059649604, "formatnth": 7.369978720910001, "nodej": 7.369978720910001, "interfac": 3.0405620365099995, "numjobresultyourjobid": 7.369978720910001, "exampl": 0.40868267499899996, "appnam": 7.369978720910001, "extracttexttru": 7.369978720910001, "dociodrefer": 7.369978720910001, "previous": 0.356602960063, "now": 0.149092945021, "synchron": 3.25910485674, "further": 0.308815895297, "rmachinelearn": 7.369978720910001, "name": 0.09723316638430002, "code": 1.35601909597, "interact": 1.4858210267899998, "desir": 1.0991793428399999, "basic": 1.00436774895, "haven": 2.54086530344, "power": 0.292396282715, "substitut": 2.07516749369, "issu": 0.364099043934, "cloud": 2.36268232808, "specifi": 1.93451151621, "methodbas": 7.369978720910001, "accomplish": 1.64345675928, "numjobstatusyourjobid": 7.369978720910001, "over": 0.0249367214957, "may": 0.050709995284400004, "mayo": 3.90737271112, "fingertip": 5.4240685718499995, "want": 0.6916366062549999, "captur": 1.0578810012100002, "jobid": 7.369978720910001, "system": 0.327430345585, "various": 0.28692650007, "cognit": 3.0659136276999996, "archiv": 1.20750637691, "which": 0.00517841384543, "width": 2.85036642328, "other": 0.00987474791976, "refer": 0.262553246798, "one": 0.0062553516455, "inform": 0.454453704662, "status": 0.9016590696060001, "see": 0.240921585492, "andor": 6.5370695979699995, "imag": 0.99376210729, "get": 0.579769005782, "abov": 0.643865229816, "parentiodrefer": 7.369978720910001, "file": 1.32734588723, "part": 0.04239531098280001, "both": 0.050842533389300004, "independ": 0.463424162503, "applicationpdf": 7.369978720910001, "thenocr": 7.369978720910001, "yet": 0.754181309241, "numdnumbfdnumdenumbnumcfnumdc": 7.369978720910001, "includ": 0.0188846813905, "structur": 0.7217716751350001, "textblock": 7.369978720910001, "access": 0.627805882716, "this": 0.0037864490525, "api": 4.43612185107, "process": 0.527829199025, "lazi": 3.88260364301, "project": 0.561601885907, "differ": 0.212321121312, "dropbox": 7.369978720910001, "but": 0.0161923720719, "curl": 3.97212024051, "analyt": 2.8481901438599997, "return": 0.333126868592, "dict": 7.18765716411, "all": 0.011402632097799998, "top": 0.609100637788, "grow": 0.821043542212, "fnumbnumdanumcanumanumcnumcnumanuma": 7.369978720910001, "outlin": 1.85332936004, "store": 1.2374487335200002, "android": 4.04494270021, "appropri": 1.4618957827399999, "case": 0.395406268889, "content": 1.26473915954, "that": 0.00397614837964, "pair": 1.47447456495, "call": 0.0654627744488, "more": 0.017024931599999998, "and": 6.29901420636e-05, "while": 0.04324998379380001, "numdnumenumenumcdnum": 7.369978720910001, "finish": 1.17210994649, "achiev": 0.6270980851169999, "these": 0.0715336194008, "enclos": 2.70089520918, "gain": 0.6142097989249999, "extractxmlattributesfals": 7.369978720910001, "quicknbrown": 7.369978720910001, "retriev": 0.773925020223, "submit": 1.7528440529799998, "anytim": 4.73808988077, "platform": 1.8298923389200001, "avail": 0.547454586289, "comput": 1.36806891594, "make": 0.07349765782289999, "way": 0.19809150993500002, "onli": 0.025324268329099998, "havenondemandhodcli": 7.369978720910001, "transform": 1.22966322707, "size": 0.9138372060609999, "bring": 0.7110694905930001, "key": 0.82419811896, "param": 6.72812483474, "read": 0.83939268088, "data": 1.2168205848, "method": 0.944461608841, "excerpt": 2.53131869155, "inlin": 4.609968780880001, "apikeyyourapikey": 7.369978720910001, "text": 1.14048200999, "insid": 1.00781305813, "contenttyp": 7.369978720910001, "import": 0.292818277066, "first": 0.0075872898121599995, "app": 3.57899404386, "use": 0.0292080197316, "score": 1.4559353207700003, "rubi": 3.7193204796199995, "easili": 1.3066587367, "sharepoint": 7.369978720910001, "within": 0.21263272059799998, "learn": 0.842752064745, "when": 0.0205549888584}, "freq": {"after": 1, "matthew": 1, "touch": 1, "web": 1, "extern": 1, "kdnuggetstestdocx": 4, "documentpctprobabilitymismatch": 1, "form": 21, "numapisyncocrdocumentvnum": 1, "addit": 3, "embed": 3, "number": 1, "follow": 8, "audio": 5, "been": 1, "timeout": 1, "specif": 2, "function": 5, "client": 6, "dog": 3, "documentembeddedfontratio": 1, "python": 8, "numapisyncexpandcontainervnum": 1, "work": 2, "asynchon": 1, "fox": 4, "approach": 1, "path": 1, "url": 1, "onc": 1, "transcript": 1, "their": 1, "sheet": 5, "fnumafnumbnumfnumdbnumfnumbnumcfnumfnumenum": 1, "creat": 1, "jumpednov": 1, "how": 2, "test": 1, "commiss": 1, "mnum": 1, "firstlessonmpnum": 2, "ocrtestenpng": 2, "expert": 1, "found": 1, "invok": 1, "word": 3, "will": 2, "overview": 2, "accompish": 1, "consid": 1, "skiapdf": 1, "incorpor": 1, "updat": 1, "below": 1, "perform": 1, "recognit": 3, "demonstr": 1, "obtain": 1, "metadata": 1, "point": 1, "applic": 3, "organ": 1, "stori": 2, "has": 1, "have": 1, "also": 7, "pass": 5, "would": 7, "azur": 1, "resourc": 1, "numanumdbnumcnumbfdnumfnumf": 1, "format": 2, "concept": 1, "applicationxmswordnum": 1, "brown": 3, "numer": 2, "numcnumfnumfnumbafnumanumcnumaebcnumenumaanumanum": 1, "reason": 1, "filesystem": 1, "print": 9, "not": 1, "numapiasyncrecognizespeechvnum": 1, "processingerrordescript": 1, "altern": 2, "regard": 1, "quick": 3, "numfnumfnumanumanumbnumcnumcbnumc": 1, "aggreg": 2, "shown": 1, "handl": 1, "asyncfals": 1, "index": 1, "separ": 1, "extractmetadatatru": 3, "instal": 1, "jump": 2, "allow": 2, "scienc": 1, "kdnugget": 3, "audiovideo": 2, "github": 1, "numapisyncextracttextvnum": 3, "kdnuggetstestzip": 5, "filenam": 2, "respons": 9, "simpl": 1, "regist": 1, "develop": 2, "such": 1, "mdnumsum": 3, "sever": 1, "via": 5, "lot": 1, "some": 1, "collect": 1, "add": 1, "result": 14, "document": 12, "varieti": 1, "produc": 1, "repositori": 2, "languag": 2, "media": 1, "ani": 2, "ondemand": 32, "from": 21, "account": 1, "obamavictoryspeechmpnum": 1, "applicationzip": 1, "anywher": 1, "detail": 1, "num": 30, "necessari": 1, "free": 2, "left": 1, "pdfs": 3, "for": 10, "sentiment": 1, "typesnof": 1, "output": 1, "height": 1, "simplifi": 1, "with": 13, "written": 1, "easi": 1, "dognjump": 1, "are": 2, "cleaner": 1, "nativ": 8, "month": 2, "sent": 2, "video": 4, "extract": 16, "asynchron": 3, "documentpctembeddedfont": 1, "then": 3, "doe": 1, "even": 1, "could": 2, "hodappsocrdocu": 1, "avoid": 1, "kdnuggetstestpdf": 5, "preferenti": 1, "type": 3, "note": 5, "scientist": 1, "machin": 3, "into": 2, "through": 1, "servic": 1, "requir": 2, "what": 1, "textprocess": 1, "local": 1, "let": 2, "particular": 1, "thenlazi": 1, "flexibl": 1, "program": 3, "denot": 1, "languagespecif": 1, "cover": 3, "own": 2, "relat": 1, "can": 11, "tool": 1, "compress": 1, "files": 3, "post": 2, "here": 1, "microsoft": 3, "paramet": 5, "font": 1, "contain": 2, "about": 2, "problem": 1, "job": 4, "simpli": 1, "check": 5, "connector": 3, "across": 1, "pagecount": 1, "articl": 1, "them": 1, "insight": 2, "request": 10, "asset": 1, "numfnumfdenumbbnumafcnumenumfnumcnumenum": 1, "expand": 1, "cheat": 5, "support": 3, "speech": 3, "numenumccanumbnumcbefcnumbnumf": 3, "the": 83, "processingerrorcod": 1, "often": 1, "build": 3, "analysi": 2, "documentattribut": 3, "provid": 5, "unstructur": 1, "initi": 3, "team": 1, "dnumdnumenumbfdnumffnumccaenumf": 1, "same": 6, "formatnth": 1, "nodej": 1, "interfac": 1, "numjobresultyourjobid": 1, "exampl": 2, "appnam": 1, "extracttexttru": 3, "dociodrefer": 5, "previous": 2, "now": 2, "synchron": 2, "further": 4, "rmachinelearn": 2, "name": 3, "code": 3, "interact": 2, "desir": 1, "basic": 1, "haven": 27, "power": 1, "substitut": 2, "issu": 5, "cloud": 1, "specifi": 1, "methodbas": 1, "accomplish": 3, "numjobstatusyourjobid": 1, "over": 6, "may": 2, "mayo": 1, "fingertip": 1, "want": 2, "captur": 1, "jobid": 4, "system": 2, "various": 1, "cognit": 1, "archiv": 7, "which": 4, "width": 1, "other": 8, "refer": 9, "one": 2, "inform": 2, "status": 6, "see": 3, "andor": 1, "imag": 5, "get": 10, "abov": 4, "parentiodrefer": 2, "file": 23, "part": 2, "both": 5, "independ": 2, "applicationpdf": 1, "thenocr": 1, "yet": 1, "numdnumbfdnumdenumbnumcfnumdc": 1, "includ": 6, "structur": 1, "textblock": 2, "access": 1, "this": 20, "api": 17, "process": 5, "lazi": 3, "project": 1, "differ": 2, "dropbox": 1, "but": 2, "curl": 17, "analyt": 2, "return": 7, "dict": 4, "all": 3, "top": 3, "grow": 1, "fnumbnumdanumcanumanumcnumcnumanuma": 1, "outlin": 1, "store": 1, "android": 1, "appropri": 2, "case": 1, "content": 8, "that": 6, "pair": 1, "call": 16, "more": 5, "and": 25, "while": 1, "numdnumenumenumcdnum": 1, "finish": 2, "achiev": 2, "these": 2, "enclos": 1, "gain": 1, "extractxmlattributesfals": 3, "quicknbrown": 1, "retriev": 1, "submit": 1, "anytim": 1, "platform": 6, "avail": 2, "comput": 1, "make": 3, "way": 1, "onli": 5, "havenondemandhodcli": 3, "transform": 1, "size": 2, "bring": 1, "key": 1, "param": 4, "read": 1, "data": 10, "method": 1, "excerpt": 5, "inlin": 1, "apikeyyourapikey": 7, "text": 27, "insid": 1, "contenttyp": 3, "import": 6, "first": 2, "app": 2, "use": 24, "score": 2, "rubi": 1, "easili": 1, "sharepoint": 1, "within": 1, "learn": 3, "when": 1}, "idf": {"after": 1.02070207021, "matthew": 6.908616187989999, "touch": 5.45567010309, "web": 5.17133550489, "extern": 5.24133377352, "kdnuggetstestdocx": 1587.6, "documentpctprobabilitymismatch": 1587.6, "form": 1.12755681818, "numapisyncocrdocumentvnum": 1587.6, "addit": 1.24634950542, "embed": 16.835630965, "number": 1.10142916609, "follow": 1.04640126549, "audio": 9.05647461495, "been": 1.0239277652399998, "timeout": 273.724137931, "specif": 1.8719490626099997, "function": 2.495441685, "client": 14.1371326803, "dog": 6.26272189349, "documentembeddedfontratio": 1587.6, "python": 56.2978723404, "numapisyncexpandcontainervnum": 1587.6, "work": 1.11520089913, "asynchon": 1587.6, "fox": 6.53064582476, "approach": 2.07556543339, "path": 4.6421052631599995, "url": 41.669291338600004, "onc": 1.4974533106999999, "transcript": 13.318791946300001, "their": 1.01547908405, "sheet": 8.60954446855, "fnumafnumbnumfnumdbnumfnumbnumcfnumfnumenum": 1587.6, "creat": 1.2492917847, "jumpednov": 1587.6, "how": 1.60250328051, "test": 2.65707112971, "commiss": 2.47212706322, "mnum": 14.086956521700001, "firstlessonmpnum": 1587.6, "ocrtestenpng": 1587.6, "expert": 5.36713995943, "found": 1.11387076405, "invok": 18.227324913900002, "word": 1.7965372864099998, "will": 1.22481098596, "overview": 12.6805111821, "accompish": 1587.6, "consid": 1.2397313759200002, "skiapdf": 1587.6, "incorpor": 2.62847682119, "updat": 5.56466876972, "below": 2.25607503197, "perform": 1.5313977042500002, "recognit": 4.40022172949, "demonstr": 2.64997496244, "obtain": 2.68629441624, "metadata": 211.68, "point": 1.25990000794, "applic": 3.42672134686, "organ": 1.6387283237, "stori": 2.02396736359, "has": 1.0436497502, "have": 1.0148948411399998, "also": 1.01476510067, "pass": 1.61818367139, "would": 1.0828729281799998, "azur": 113.4, "resourc": 2.9487369985100003, "numanumdbnumcnumbfdnumfnumf": 1587.6, "format": 2.53125, "concept": 2.65707112971, "applicationxmswordnum": 1587.6, "brown": 3.2215909090900006, "numer": 1.83325635104, "numcnumfnumfnumbafnumanumcnumaebcnumenumaanumanum": 1587.6, "reason": 1.72340425532, "filesystem": 529.2, "print": 3.29719626168, "not": 1.01567398119, "numapiasyncrecognizespeechvnum": 1587.6, "processingerrordescript": 1587.6, "altern": 2.1390460792200003, "regard": 1.78944995491, "quick": 2.205, "numfnumfnumanumanumbnumcnumcbnumc": 1587.6, "aggreg": 17.542541436500002, "shown": 2.76923076923, "handl": 3.9229058561900003, "asyncfals": 1587.6, "index": 6.9969149405, "separ": 1.6012102874399998, "extractmetadatatru": 1587.6, "instal": 3.78721374046, "jump": 8.07117437722, "allow": 1.2716059271100002, "scienc": 2.31969608416, "kdnugget": 1587.6, "audiovideo": 1587.6, "github": 1587.6, "numapisyncextracttextvnum": 1587.6, "kdnuggetstestzip": 1587.6, "filenam": 496.125, "respons": 1.5066907089300001, "simpl": 3.3981164383599998, "regist": 3.9620663838300003, "develop": 1.1955719557200002, "such": 1.06151377374, "mdnumsum": 1587.6, "sever": 1.07241286139, "via": 2.2978723404299997, "lot": 4.40877534018, "some": 1.04036697248, "collect": 1.64109985528, "add": 4.61243463103, "result": 1.14611608432, "document": 2.5409731114, "varieti": 2.2972073506, "produc": 1.36932896326, "repositori": 44.974504249300004, "languag": 2.29488291414, "media": 2.59369384088, "ani": 1.13383802314, "ondemand": 1587.6, "from": 1.00056721497, "account": 1.94463498285, "obamavictoryspeechmpnum": 1587.6, "applicationzip": 1587.6, "anywher": 10.1638924456, "detail": 2.26186066391, "num": 1.00031504001, "necessari": 2.8421052631599997, "free": 1.71818181818, "left": 1.4398693996, "pdfs": 529.2, "for": 1.00031504001, "sentiment": 9.9225, "typesnof": 1587.6, "output": 7.676982591880001, "height": 4.1023255814, "simplifi": 12.109839816900001, "with": 1.0011982089899998, "written": 1.9573418813999999, "easi": 5.2937645882, "dognjump": 1587.6, "are": 1.02990593578, "cleaner": 45.7521613833, "nativ": 3.00738776283, "month": 1.5079787234, "sent": 2.32683570277, "video": 3.29719626168, "extract": 7.703056768560001, "asynchron": 165.375, "documentpctembeddedfont": 1587.6, "then": 1.08657860516, "doe": 1.70581282905, "even": 1.16461267606, "could": 1.2043695949, "hodappsocrdocu": 1587.6, "avoid": 2.45986984816, "kdnuggetstestpdf": 1587.6, "preferenti": 45.6206896552, "type": 2.0281042411900003, "note": 1.42449528937, "scientist": 4.69426374926, "machin": 4.02433460076, "into": 1.01502461479, "through": 1.07074930869, "servic": 1.51300867245, "requir": 1.52844902282, "what": 1.25343439128, "textprocess": 1587.6, "local": 1.51720183486, "let": 3.48616600791, "particular": 1.3814827706200001, "thenlazi": 1587.6, "flexibl": 9.68639414277, "program": 2.02139037433, "denot": 10.1965317919, "languagespecif": 1587.6, "cover": 1.69380134429, "own": 1.17844418052, "relat": 1.23750876919, "can": 1.17626139142, "tool": 4.99716713881, "compress": 16.746835443, "files": 1587.6, "post": 2.23826307627, "here": 2.42307692308, "microsoft": 24.8450704225, "paramet": 17.256521739100002, "font": 42.7924528302, "contain": 1.59814777532, "about": 1.06486015159, "problem": 1.76674827509, "job": 3.2539454806299997, "simpli": 2.5192002538900002, "check": 6.50655737705, "connector": 62.5039370079, "across": 1.7318642958400001, "pagecount": 1587.6, "articl": 2.01805008262, "them": 1.09876115994, "insight": 11.8037174721, "request": 3.09051975861, "asset": 8.63295269168, "numfnumfdenumbbnumafcnumenumfnumcnumenum": 1587.6, "expand": 2.2260235558000003, "cheat": 31.6886227545, "support": 1.2685577307200002, "speech": 3.8227787141800005, "numenumccanumbnumcbefcnumbnumf": 1587.6, "the": 1.0, "processingerrorcod": 1587.6, "often": 1.29452054795, "build": 1.6341739578, "analysi": 3.47852760736, "documentattribut": 1587.6, "provid": 1.21552714187, "unstructur": 214.54054054099998, "initi": 1.35, "team": 2.2748244734200003, "dnumdnumenumbfdnumffnumccaenumf": 1587.6, "same": 1.11857958148, "formatnth": 1587.6, "nodej": 1587.6, "interfac": 20.9169960474, "numjobresultyourjobid": 1587.6, "exampl": 1.50483412322, "appnam": 1587.6, "extracttexttru": 1587.6, "dociodrefer": 1587.6, "previous": 1.42846859816, "now": 1.160780873, "synchron": 26.0262295082, "further": 1.3618116315, "rmachinelearn": 1587.6, "name": 1.10211732037, "code": 3.8807137619199996, "interact": 4.4185917061, "desir": 3.00170164492, "basic": 2.7301805675, "haven": 12.690647482000001, "power": 1.3396337861799998, "substitut": 7.96588058204, "issu": 1.43921675279, "cloud": 10.6193979933, "specifi": 6.920662598080001, "methodbas": 1587.6, "accomplish": 5.17302052786, "numjobstatusyourjobid": 1587.6, "over": 1.02525024217, "may": 1.05201775893, "mayo": 49.7680250784, "fingertip": 226.8, "want": 1.99698113208, "captur": 2.88026124819, "jobid": 1587.6, "system": 1.38739840951, "various": 1.3323262839899999, "cognit": 21.454054054100002, "archiv": 3.3451327433599998, "which": 1.005191845, "width": 17.294117647100002, "other": 1.00992366412, "refer": 1.30024570025, "one": 1.00627495722, "inform": 1.5753125620200001, "status": 2.4636871508400002, "see": 1.27242125511, "andor": 690.260869565, "imag": 2.70137825421, "get": 1.78562591385, "abov": 1.90382539873, "parentiodrefer": 1587.6, "file": 3.7710213776699995, "part": 1.04330682789, "both": 1.05215720061, "independ": 1.58950740889, "applicationpdf": 1587.6, "thenocr": 1587.6, "yet": 2.1258703802900003, "numdnumbfdnumdenumbnumcfnumdc": 1587.6, "includ": 1.0190641247799999, "structur": 2.0580762250499998, "textblock": 1587.6, "access": 1.8734953976900002, "this": 1.00379362671, "api": 84.44680851060001, "process": 1.69524826482, "lazi": 48.5504587156, "project": 1.7534791252500002, "differ": 1.23654490225, "dropbox": 1587.6, "but": 1.01632417899, "curl": 53.0969899666, "analyt": 17.256521739100002, "return": 1.39532431007, "dict": 1323.0, "all": 1.01146788991, "top": 1.8387769284200002, "grow": 2.27287043665, "fnumbnumdanumcanumanumcnumcnumanuma": 1587.6, "outlin": 6.38102893891, "store": 3.44680851064, "android": 57.1079136691, "appropri": 4.31413043478, "case": 1.48498737256, "content": 3.5421686747, "that": 1.00398406375, "pair": 4.36873968079, "call": 1.0676529926, "more": 1.0171706817, "and": 1.00006299213, "while": 1.0441988950299999, "numdnumenumenumcdnum": 1587.6, "finish": 3.22879804759, "achiev": 1.87216981132, "these": 1.07415426252, "enclos": 14.8930581614, "gain": 1.84819557625, "extractxmlattributesfals": 1587.6, "quicknbrown": 1587.6, "retriev": 2.16826003824, "submit": 5.770992366410001, "anytim": 114.215827338, "platform": 6.2332155476999995, "avail": 1.7288467821, "comput": 3.9277585353800006, "make": 1.0762660158600001, "way": 1.2190739461, "onli": 1.0256476516600002, "havenondemandhodcli": 1587.6, "transform": 3.42007755278, "size": 2.49387370405, "bring": 2.03616775683, "key": 2.28005170185, "param": 835.5789473680001, "read": 2.3149606299200003, "data": 3.37643555934, "method": 2.5714285714300003, "excerpt": 12.5700712589, "inlin": 100.481012658, "apikeyyourapikey": 1587.6, "text": 3.12827586207, "insid": 2.7396031061299997, "contenttyp": 1587.6, "import": 1.3401992233700002, "first": 1.00761614623, "app": 35.837471783299996, "use": 1.0296387573799999, "score": 4.2884927066500005, "rubi": 41.2363636364, "easili": 3.6938110749199997, "sharepoint": 1587.6, "within": 1.2369302688, "learn": 2.32275054865, "when": 1.02076769755}}, "html": "<!DOCTYPE html>\n\n<html lang=\"en-US\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head profile=\"http://gmpg.org/xfn/11\">\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n<title>  HPE Haven OnDemand Text Extraction API Cheat Sheet for Developers</title>\n<link href=\"/wp-content/themes/kdn17/images/favicon.ico\" rel=\"shortcut icon\"/>\n<link href=\"/wp-content/themes/kdn17/style.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"/wp-content/themes/kdn17/js/jquery-1.9.1.min.js\" type=\"text/javascript\"></script>\n<script src=\"/aps/kda_all.js\" type=\"text/javascript\"></script>\n<link href=\"/feed/\" rel=\"alternate\" title=\"KDnuggets: Analytics, Big Data, Data Mining and Data Science Feed\" type=\"application/rss+xml\"/>\n<link href=\"//s.w.org\" rel=\"dns-prefetch\"/>\n<link href=\"https://www.kdnuggets.com/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/comments/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/2016/06/hpe-haven-ondemand-text-extraction-cheat-sheet.html/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb HPE Haven OnDemand Text Extraction API Cheat Sheet for Developers Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-json/\" rel=\"https://api.w.org/\"/>\n<link href=\"https://www.kdnuggets.com/xmlrpc.php?rsd\" rel=\"EditURI\" title=\"RSD\" type=\"application/rsd+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-includes/wlwmanifest.xml\" rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\"/>\n<link href=\"https://www.kdnuggets.com/2016/06/zementis-standards-based-deployment-predictive-analytics.html\" rel=\"prev\" title=\"Standards-based Deployment of Predictive Analytics\"/>\n<link href=\"https://www.kdnuggets.com/2016/06/review-deep-learning-models.html\" rel=\"next\" title=\"A Review of Popular Deep Learning Models\"/>\n<meta content=\"WordPress 4.9.10\" name=\"generator\">\n<link href=\"https://www.kdnuggets.com/2016/06/hpe-haven-ondemand-text-extraction-cheat-sheet.html\" rel=\"canonical\"/>\n<link href=\"https://www.kdnuggets.com/?p=51218\" rel=\"shortlink\"/>\n<link href=\"https://www.kdnuggets.com/2016/06/hpe-haven-ondemand-text-extraction-cheat-sheet.html\" rel=\"canonical\"/>\n<!-- BEGIN ExactMetrics v5.3.7 Universal Analytics - https://exactmetrics.com/ -->\n<script>\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-361129-1', 'auto');\n  ga('send', 'pageview');\n</script>\n<!-- END ExactMetrics Universal Analytics -->\n</meta></head>\n<body class=\"post-template-default single single-post postid-51218 single-format-standard\">\n<div class=\"main_wrapper\"><!-- publ: 21-Jun, 2016  -->\n<div id=\"wrapper\">\n<div id=\"header\">\n<div id=\"header_log\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<h1>KDnuggets</h1>\n<div class=\"text-container\">\n            \u00a0\u00a0<a href=\"/news/subscribe.html\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a> \u00a0|\n <a href=\"https://twitter.com/kdnuggets\" target=\"_blank\"><img alt=\"Twitter\" height=\"48\" src=\"/images/tw_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n <a href=\"https://www.facebook.com/kdnuggets\" target=\"_blank\"><img alt=\"Facebook\" height=\"48\" src=\"/images/fb_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n<a href=\"https://www.linkedin.com/groups/54257/\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"48\" src=\"/images/in_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \n\u00a0|\u00a0 <a href=\"/contact.html\"><b>Contact</b></a>\n</div>\n</div>\n<div class=\"search\">\n<form action=\"/\" id=\"searchform\" method=\"get\">\n<input id=\"s\" name=\"s\" placeholder=\"search KDnuggets\" type=\"text\" value=\"\"/>\n<input type=\"submit\" value=\"Search\"/></form>\n</div>\n<div href=\"#\" id=\"pull\">\n<img class=\"menu\" src=\"/images/menu-30.png\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<img class=\"search-icon\" src=\"/images/search-icon.png\">\n</img></img></div>\n<div id=\"pull-menu\">\n<div class=\"navigation\"><ul class=\"menu\" id=\"menu-menu\"><li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-1070\" id=\"menu-item-1070\"><a href=\"/software/index.html\" title=\"Data Science Software\">SOFTWARE</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13756\" id=\"menu-item-13756\"><a href=\"/news/index.html\" title=\"News\">News/Blog</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-46286\" id=\"menu-item-46286\"><a href=\"/news/top-stories.html\">Top stories</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-42152\" id=\"menu-item-42152\"><a href=\"https://www.kdnuggets.com/opinions/index.html\" title=\"Opinions\">Opinions</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-46415\" id=\"menu-item-46415\"><a href=\"https://www.kdnuggets.com/tutorials/index.html\">Tutorials</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13364\" id=\"menu-item-13364\"><a href=\"/jobs/index.html\" title=\"Jobs in Analytics, Data Science\">JOBS</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-63505\" id=\"menu-item-63505\"><a href=\"https://www.kdnuggets.com/companies/index.html\">Companies</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13366\" id=\"menu-item-13366\"><a href=\"/courses/index.html\">Courses</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-1499\" id=\"menu-item-1499\"><a href=\"https://www.kdnuggets.com/datasets/index.html\">Datasets</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-14286\" id=\"menu-item-14286\"><a href=\"https://www.kdnuggets.com/education/index.html\" title=\"Education in Analytics, Big Data, Data Science\">EDUCATION</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-51558\" id=\"menu-item-51558\"><a href=\"https://www.kdnuggets.com/education/analytics-data-mining-certificates.html\" title=\"Certificates in Analytics, Big Data, Data Science\">Certificates</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-14752\" id=\"menu-item-14752\"><a href=\"/meetings/index.html\">Meetings</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13721\" id=\"menu-item-13721\"><a href=\"/webcasts/index.html\" title=\"Webcasts and Webinars\">Webinars</a></li>\n</ul></div></div>\n</div> <!--#header end-->\n<div id=\"spacer\">\n         \u00a0\n      </div>\n<div id=\"content_wrapper\">\n<div id=\"ad_wrapper\">\n<script type=\"text/javascript\">\n\tjQuery(function() {\n   \t    var pull        = $('#pull');\n            menu        = $('#header .navigation ul');\n            menuImage = $('#header img.menu');\n            mobileMenu        = $('#pull-menu-mobile');\n            search = $('img.search-icon');\n            searchBar = $('div.search');\n            searchClick = false;\n            search.on('click', function() {\n                  searchBar.slideToggle();\n                  searchClick = true;\n            });  \n     \t    $(menuImage).on('click', function(e) {\n\t        //e.preventDefault();\n                if (!searchClick) {\n                  menu.slideToggle();\n                }\n                searchClick = false;\n\t    });\n           /* pullMobile.on('click', function(e) {\n              e.preventDefault();\n                if (!searchClick) {\n                  mobileMenu.slideToggle();\n                }\n                searchClick = false;\n\t    });*/\n            \n\t});\n\tkpath = '/'; kda_top(); kda_sid_init(); kda_sid_n=3;\n\t</script>\n</div> <div class=\"breadcumb\">\n<br/>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2016/index.html\">2016</a> \u00bb <a href=\"https://www.kdnuggets.com/2016/06/index.html\">Jun</a> \u00bb <a href=\"https://www.kdnuggets.com/2016/06/tutorials.html\">Tutorials, Overviews</a> \u00bb HPE Haven OnDemand Text Extraction API Cheat Sheet for Developers (\u00a0<a href=\"/2016/n22.html\">16:n22</a>\u00a0)    </div>\n<div class=\"single\" id=\"content\">\n<div id=\"post-header\">\n<h1 id=\"title\">HPE Haven OnDemand Text Extraction API Cheat Sheet for Developers</h1>\n<div class=\"pagi\">\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2016/06/zementis-standards-based-deployment-predictive-analytics.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"> <strong>Previous post</strong></img></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2016/06/review-deep-learning-models.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/>\u00a0<br/>\u00a0\n    <div class=\"addthis_native_toolbox\"></div>\n</div>\n<div class=\"tag-data\">Tags: <a href=\"https://www.kdnuggets.com/tag/api\" rel=\"tag\">API</a>, <a href=\"https://www.kdnuggets.com/tag/haven-ondemand\" rel=\"tag\">Haven OnDemand</a>, <a href=\"https://www.kdnuggets.com/tag/hpe\" rel=\"tag\">HPE</a>, <a href=\"https://www.kdnuggets.com/tag/python\" rel=\"tag\">Python</a>, <a href=\"https://www.kdnuggets.com/tag/text-analytics\" rel=\"tag\">Text Analytics</a></div>\n<br/>\n<p class=\"excerpt\">\n     HPE Haven OnDemand provides a native API based on cURL calls, as well as numerous language-specific APIs, providing maximum flexibility for developers. This cheat sheet will cover the native and Python text extraction APIs.\n  </p>\n</div>\n<div id=\"post-header-ad\">\n<script type=\"text/javascript\">kda_sid_write(1); kda_sid_n=2;</script>\n</div>\n<hr class=\"grey-line\"/><br/>\n<div class=\"post\" id=\"post-\">\n<p><b>By Matthew Mayo, KDnuggets</b>.</p>\n<p><img alt=\"haven-ondemand-cheat-sheet-header.jpg\" src=\"/wp-content/uploads/haven-ondemand-cheat-sheet.jpg\" width=\"99%\"/></p>\n<p><a name=\"overview\"></a> </p>\n<h3>Contents</h3>\n<ol class=\"three_ul\">\n<li><a href=\"#overview\">Overview</a>\n<li><a href=\"#images\">Getting Text From Images</a>\n<li><a href=\"#audio\">Getting Text From Audio and Video</a>\n<li><a href=\"#documents\">Getting Text From Documents, PDFs, and Archives</a>\n</li></li></li></li></ol>\n<hr>\n<h3>1. Overview</h3>\n<p>\u00a0<br>\nAs outlined in a pair of <a href=\"/2016/03/hpe-haven-ondemand-microsoft-azure-machine-learning.html\">previous</a> <a href=\"/2016/05/hpe-haven-ondemand-data-science-cognitive-computing.html\">posts</a>, <a href=\"https://www.havenondemand.com/\">HPE Haven OnDemand</a> is a cloud services platform which simplifies how you can interact with data, allowing it to be transformed into an asset anytime, anywhere. HPE Haven OnDemand provides a collection of over <a href=\"/2016/02/hpe-machine-learning-60-apis-haven-ondemand.html\">60 machine learning application programming interfaces</a> (APIs) for interacting with structured and unstructured data in a variety of ways.</br></p>\n<p>KDnuggets and HPE Haven OnDemand have teamed up to bring you a Text Extraction API Cheat Sheet, covering numerous methods for obtaining text from different media for your applications. \u00a0This cheat sheet specifically covers how to get text from:</p>\n<ul class=\"three_ul\">\n<li><a href=\"https://dev.havenondemand.com/apis/ocrdocument#overview\">Images</a>\n<li><a href=\"https://dev.havenondemand.com/apis/recognizespeech#overview\">Audio and video</a>\n<li><a href=\"https://dev.havenondemand.com/apis/extracttext#overview\">Documents, PDFs, and archives</a>\n</li></li></li></ul>\n<p>As further processing of text after it is extracted is often desired, the cheat sheet also touches on several additional text-processing APIs.</p>\n<p>The HPE Haven OnDemand native APIs are POST and GET method-based, and can easily be embedded in any programming language or invoked independently with cURL calls. \u00a0To make development even more flexible, Haven OnDemand also provides a number of <a href=\"https://github.com/HPE-Haven-OnDemand/\">programming language-specific APIs</a>, including Android, Go, Node.js, R, Ruby and more.</p>\n<p>This cheat sheet will consider both the native APIs, demonstrated by cURL calls, and the <a href=\"https://github.com/HPE-Haven-OnDemand/havenondemand-python\">Python API</a>. \u00a0Details regarding installation of all language specific APIs, including Python, can be found in the applicable Github repositories.</p>\n<p><a href=\"/wp-content/uploads/haven-ondemand-api-comparison.jpg\"><img alt=\"API comparison\" src=\"/wp-content/uploads/haven-ondemand-api-comparison.jpg\" width=\"99%\"/></a></p>\n<p>Note that using HPE Haven OnDemand requires that one register for a <a href=\"https://www.havenondemand.com/docs/api-overview.html\">free API key</a>. \u00a0Also note that HPE Haven OnDemand provides both synchronous and asynchronous API call functionality; some particular APIs support both call types, while others support only one or the other. \u00a0You may want to read more about <a href=\"https://dev.havenondemand.com/docs/AsynchronousAPI.htm\">asynchronous API calls</a>.<br>\n<a name=\"images\"></a><br>\nThe cheat sheet does not cover the basics of HPE Haven OnDemand APIs, so you may want to refer to the following previous posts for more information.</br></br></p>\n<ul>\n<li><a href=\"/2016/03/hpe-haven-ondemand-microsoft-azure-machine-learning.html\">HPE Haven OnDemand and Microsoft Azure Machine Learning: Power Tools for Developers and Data Scientists</a>\n<li><a href=\"/2016/05/hpe-haven-ondemand-data-science-cognitive-computing.html\">Data Science and Cognitive Computing with HPE Haven OnDemand: The Simple Path to Reason and Insight</a>\n</li></li></ul>\n<hr/>\n<h3>2. Getting Text From Images</h3>\n<p>\u00a0<br>\n<img alt=\"OCR document\" src=\"/wp-content/uploads/hpe-ocr-document.jpg\" width=\"99%\"/></br></p>\n<p>The <a href=\"https://dev.havenondemand.com/apis/ocrdocument#overview\">OCR Document API</a> extracts text from an image that you provide.</p>\n<p>Using the native Haven OnDemand API, cURL can be used to issue a POST request to the OnDemand platform:</p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\">curl -X POST --form \"file=@ocr-test-en.png\" --form \"YOUR_API_KEY\" https://api.havenondemand.com/1/api/sync/ocrdocument/v1\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>This would result in the following:</p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\">{\r\n  \"text_block\": [\r\n    {\r\n      \"text\": \"This is a lot of 12 point text to test the\\nocr code and see if it works on all types\\nof file format.\\nThe quick brown dog jumped over the\\nlazy fox. The quick brown dog jumped\\nover the lazy fox. The quick brown dog\\njumped over the lazy fox. The quick\\nbrown dog jumped over the lazy fox.\",\r\n      \"left\": 36,\r\n      \"top\": 92,\r\n      \"width\": 582,\r\n      \"height\": 269\r\n    }\r\n  ]\r\n}\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>To accomplish the same using the Python API:</p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\"><span style=\"color:#aeaeae;font-style:italic\"># Import Haven OnDemand APIs</span>\r\n<span style=\"color:#e28964\">from</span> havenondemand.hodclient <span style=\"color:#e28964\">import</span> <span style=\"color:#e28964\">*</span>\r\n\r\n<span style=\"color:#aeaeae;font-style:italic\"># Initiate Haven OnDemand client</span>\r\nclient <span style=\"color:#e28964\">=</span> HODClient(<span style=\"color:#65b042\">\"YOUR_API_KEY\"</span>, <span style=\"color:#3e87e3\">version</span><span style=\"color:#e28964\">=</span><span style=\"color:#65b042\">\"v1\"</span>)\r\n\r\n<span style=\"color:#aeaeae;font-style:italic\"># Parameters to pass with request</span>\r\nparams <span style=\"color:#e28964\">=</span> {<span style=\"color:#65b042\">'file'</span>: <span style=\"color:#65b042\">'ocr-test-en.png'</span>}\r\n\r\n<span style=\"color:#aeaeae;font-style:italic\"># Make the API call (POST request; works with both 'url' and 'file')</span>\r\n<span style=\"color:#aeaeae;font-style:italic\"># HODApps.OCR_DOCUMENT denotes the API to use</span>\r\n<span style=\"color:#aeaeae;font-style:italic\"># async=False specifies a synchronous API call</span>\r\nresponse <span style=\"color:#e28964\">=</span> client.post_request(params, HODApps.OCR_DOCUMENT, <span style=\"color:#3e87e3\">async</span><span style=\"color:#e28964\">=</span><span style=\"color:#3387cc\">False</span>)\r\n\r\n<span style=\"color:#aeaeae;font-style:italic\"># Print the returned text from image embedded in dict response</span>\r\n<span style=\"color:#aeaeae;font-style:italic\"># Also includes other useful data</span>\r\n<span style=\"color:#e28964\">print</span> response[<span style=\"color:#65b042\">'text_block'</span>][<span style=\"color:#3387cc\">0</span>][<span style=\"color:#65b042\">'text'</span>]\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Note above the use of the params dict to pass parameters to the request. The same could be accompished by building an inline dict inside of the API call, but as parameters grow, organizing them separately is cleaner.</p>\n<p>As with all responses, additional data is also available, enclosed in a returned dict. In this case we simply extracted the text.</p>\n<p>What about further processing of the results with the Python API? No problem!<br/>\n<a name=\"audio\"></a></p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\"><span style=\"color:#aeaeae;font-style:italic\"># Perform sentiment analysis on result</span>\r\nsent <span style=\"color:#e28964\">=</span> client.get_request({<span style=\"color:#65b042\">'text'</span>: response}, HODApps.ANALYZE_SENTIMENT, <span style=\"color:#3e87e3\">async</span><span style=\"color:#e28964\">=</span><span style=\"color:#3387cc\">False</span>)\r\n<span style=\"color:#e28964\">print</span> sent[<span style=\"color:#65b042\">'aggregate'</span>][<span style=\"color:#65b042\">'score'</span>]\r\n\r\n<span style=\"color:#aeaeae;font-style:italic\"># Returned aggregate score</span>\r\n<span style=\"color:#aeaeae;font-style:italic\"># ==&gt; -0.568579962053</span>\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<hr/>\n<h3>3. Getting Text From Audio and Video</h3>\n<p>\u00a0<br/>\n<img alt=\"Speech recognition\" src=\"/wp-content/uploads/hpe-speech-recognition.jpg\" width=\"99%\"/></p>\n<p>The <a href=\"https://dev.havenondemand.com/apis/speech-recognition#overview\">Speech Recognition API</a> creates a transcript of the text in an audio or video file. You can then use this output with other Haven OnDemand APIs, such as <a href=\"https://dev.havenondemand.com/apis/extractconcepts#overview\">Concept Extraction</a> or <a href=\"https://dev.havenondemand.com/apis/addtotextindex#overview\">Add to Text Index</a>, to gain further insight and analysis.</p>\n<p>Using the native Haven OnDemand API, cURL can be used to issue a POST request to the OnDemand platform:</p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\">curl -X POST --form \"file=@first-lesson.mp3\" --form \"apikey=YOUR_API_KEY\" https://api.havenondemand.com/1/api/async/recognizespeech/v1\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Here, an audio file named \"first-lesson.mp3\" has been passed to the <a href=\"https://dev.havenondemand.com/apis/speech-recognition#overview\">Speech Recognition API</a>.</p>\n<p>The <a href=\"https://dev.havenondemand.com/apis/speech-recognition#overview\">Speech Recognition API</a> is asynchronous only, and so additional API calls are required to check the status and/or get the results of the API call. \u00a0The first call, above, returns a job ID, as shown below:</p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\">{\r\n    \"jobID\": \"YOUR_JOB_ID\"\r\n}\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Checking the status of this job is accomplished via the following cURL call:</p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\">curl -X POST https://api.havenondemand.com/1/job/status/YOUR_JOB_ID?apikey=YOUR_API_KEY\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Getting the results of this job, once finished, is accomplished via the following cURL call:</p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\">curl -X POST https://api.havenondemand.com/1/job/result/YOUR_JOB_ID?apikey=YOUR_API_KEY\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Both of these return data in JSON format, which can be be captured of further processed as necessary.</p>\n<p>Now, let's see this same functionality using the Python API:<br/>\n<a name=\"documents\"></a></p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\"><span style=\"color:#aeaeae;font-style:italic\"># Import Haven OnDemand APIs</span>\r\n<span style=\"color:#e28964\">from</span> havenondemand.hodclient <span style=\"color:#e28964\">import</span> <span style=\"color:#e28964\">*</span>\r\n\r\n<span style=\"color:#aeaeae;font-style:italic\"># Initiate Haven OnDemand client</span>\r\nclient <span style=\"color:#e28964\">=</span> HODClient(<span style=\"color:#65b042\">\"YOUR_API_KEY\"</span>, <span style=\"color:#3e87e3\">version</span><span style=\"color:#e28964\">=</span><span style=\"color:#65b042\">\"v1\"</span>)\r\n\r\n<span style=\"color:#aeaeae;font-style:italic\"># Parameters to pass with request</span>\r\nparams <span style=\"color:#e28964\">=</span> {<span style=\"color:#65b042\">'file'</span>: <span style=\"color:#65b042\">'obama-victory-speech.mp4'</span>}\r\n\r\n<span style=\"color:#aeaeae;font-style:italic\"># API call (this API is ASYNC only)</span>\r\nresponse <span style=\"color:#e28964\">=</span> client.post_request(params, HODApps.RECOGNIZE_SPEECH, <span style=\"color:#3e87e3\">async</span><span style=\"color:#e28964\">=</span><span style=\"color:#3387cc\">True</span>)\r\n\r\n<span style=\"color:#aeaeae;font-style:italic\"># Get the job ID for checking asynchonously...</span>\r\n<span style=\"color:#e28964\">print</span> response[<span style=\"color:#65b042\">'jobID'</span>]\r\njobID <span style=\"color:#e28964\">=</span> response[<span style=\"color:#65b042\">'jobID'</span>]\r\n\r\n<span style=\"color:#aeaeae;font-style:italic\"># Check status (also returns result when finished)</span>\r\n<span style=\"color:#aeaeae;font-style:italic\"># Preferential to use status over result API to avoid timeout</span>\r\nstatus <span style=\"color:#e28964\">=</span> client.get_job_status(jobID)\r\n<span style=\"color:#e28964\">print</span> status\r\n\r\n<span style=\"color:#aeaeae;font-style:italic\"># Alternatively, check result</span>\r\nresult <span style=\"color:#e28964\">=</span> client.get_job_status(jobID)\r\n<span style=\"color:#e28964\">print</span> result\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<hr/>\n<h3>4. Getting Text From Documents, PDFs, and Archives</h3>\n<p>\u00a0<br/>\n<img alt=\"File formats\" src=\"/wp-content/uploads/hpe-file-formats.jpg\" width=\"99%\"/></p>\n<p>The <a href=\"https://dev.havenondemand.com/apis/extracttext#overview\">Text Extraction API</a> extracts metadata and text content from a file that you provide. The API can handle over 500 different file formats. We will use the Text Extract API to extract text from a PDF document, a Microsoft Word document, and a ZIP archive.</p>\n<p><b>Extracting Text From PDF Files</b></p>\n<p>Using the native Haven OnDemand API, cURL can be used to issue a POST request to the OnDemand platform:</p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\">curl -X POST --form \"file=@kdnuggets-test.pdf\" --form \"extract_metadata=true\" --form \"extract_text=true\" --form \"extract_xmlattributes=false\" --form \"apikey=YOUR_API_KEY\" https://api.havenondemand.com/1/api/sync/extracttext/v1\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>This would result in the following (an excerpt):</p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\">{\r\n  \"document\": [\r\n    {\r\n      \"reference\": \"kdnuggets-test.pdf\",\r\n      \"doc_iod_reference\": \"4733178f00148f4a2a1b573c6cb2674c\",\r\n      \"app_name\": [\r\n        \"Skia/PDF m53\"\r\n      ],\r\n      \"content_type\": [\r\n        \"application/pdf\"\r\n      ],\r\n      \"document_attributes\": [\r\n        \"0\"\r\n      ],\r\n      \"document_embedded_font_ratio\": [\r\n        \"0\"\r\n      ],\r\n      \"document_pct_embedded_font\": [\r\n        \"0\"\r\n      ],\r\n      \"document_pct_probability_mismatch\": [\r\n        \"0\"\r\n      ],\r\n      \"file_size\": [\r\n        78519\r\n      ],\r\n      \"page_count\": [\r\n        \"2\"\r\n      ],\r\n      \"processing_error_code\": [\r\n        \"1\"\r\n      ],\r\n      \"processing_error_description\": [\r\n        \"Document: Embedded Font\"\r\n      ],\r\n      \"content\": \"Top /r/MachineLearning stories this month:\r\n\r\n           . . .\r\n\r\n           }\r\n    ],\r\n    \"md5sum\": [\r\n        \"f1b75da0ca2341a57316c9c0a375697a\"\r\n    ]\r\n}\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Now, let's see this same functionality using the Python API (note that this would only print the content of the file, yet more data is returned):</p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\"><span style=\"color:#aeaeae;font-style:italic\"># Import Haven OnDemand APIs </span>\r\n<span style=\"color:#e28964\">from</span> havenondemand.hodclient <span style=\"color:#e28964\">import</span> <span style=\"color:#e28964\">*</span>\r\n\r\n<span style=\"color:#aeaeae;font-style:italic\"># Initiate Haven OnDemand client</span>\r\nclient <span style=\"color:#e28964\">=</span> HODClient(<span style=\"color:#65b042\">\"YOUR_API_KEY\"</span>, <span style=\"color:#3e87e3\">version</span><span style=\"color:#e28964\">=</span><span style=\"color:#65b042\">\"v1\"</span>)\r\n\r\n<span style=\"color:#aeaeae;font-style:italic\"># Parameters to pass with request</span>\r\nparams <span style=\"color:#e28964\">=</span> {<span style=\"color:#65b042\">'file'</span>: <span style=\"color:#65b042\">'kdnuggets-test.pdf'</span>}\r\n\r\n<span style=\"color:#aeaeae;font-style:italic\"># API call</span>\r\nresponse <span style=\"color:#e28964\">=</span> client.post_request(params, HODApps.EXTRACT_TEXT, <span style=\"color:#3e87e3\">async</span><span style=\"color:#e28964\">=</span><span style=\"color:#3387cc\">False</span>)\r\n\r\n<span style=\"color:#aeaeae;font-style:italic\"># Print only the content of the submitted file</span>\r\n<span style=\"color:#aeaeae;font-style:italic\"># Also includes other useful data</span>\r\n<span style=\"color:#e28964\">print</span> response[<span style=\"color:#65b042\">'document'</span>][<span style=\"color:#3387cc\">0</span>][<span style=\"color:#65b042\">'content'</span>]\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><b>Extracting Text From Word Documents</b></p>\n<p>Using the native Haven OnDemand API, cURL can be used to issue a POST request to the OnDemand platform:</p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\">curl -X POST --form \"file=@kdnuggets-test.docx\" --form \"extract_metadata=true\" --form \"extract_text=true\" --form \"extract_xmlattributes=false\" --form \"apikey=YOUR_API_KEY\" https://api.havenondemand.com/1/api/sync/extracttext/v1\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>This would result in the following (an excerpt):</p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\">{\r\n  \"document\": [\r\n    {\r\n      \"reference\": \"kdnuggets-test.docx\",\r\n      \"doc_iod_reference\": \"2d761859357918e41912e19cd4818165\",\r\n      \"content_type\": [\r\n        \"application/x-ms-word07\"\r\n      ],\r\n      \"document_attributes\": [\r\n        \"0\"\r\n      ],\r\n      \"file_size\": [\r\n        6267\r\n      ],\r\n      \"content\": \"Top /r/MachineLearning stories this month:\r\n\r\n            . . .\r\n\r\n            }\r\n    ],\r\n    \"md5sum\": [\r\n        \"050a4db634241c7057bfd7539f09366f\"\r\n    ]\r\n}\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>This functionality is achievable via the Python API using the same code excerpt as in the PDF text extraction example above, substituting for the appropriate Microsoft Word filename.</p>\n<p><b>Extracting Text From ZIP Archives</b></p>\n<p>Using the native Haven OnDemand API, cURL can be used to issue a POST request to the OnDemand platform:</p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\">curl -X POST --form \"file=@kdnuggets-test.zip\" --form \"extract_metadata=true\" --form \"extract_text=true\" --form \"extract_xmlattributes=false\" --form \"apikey=YOUR_API_KEY\" https://api.havenondemand.com/1/api/sync/extracttext/v1\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>This would result in the following (an excerpt):</p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\">{\r\n  \"document\": [\r\n    {\r\n      \"reference\": \"kdnuggets-test.zip\",\r\n      \"doc_iod_reference\": \"3573e81cca7695b998cbefc4098b112f\",\r\n      \"content_type\": [\r\n        \"application/zip\"\r\n      ],\r\n      \"document_attributes\": [\r\n        \"0\"\r\n      ],\r\n      \"file_size\": [\r\n        82375\r\n      ]\r\n    },\r\n    {\r\n      \"reference\": \"kdnuggets-test.zip:kdnuggets-test.docx\",\r\n      \"parent_iod_reference\": \"3573e81cca7695b998cbefc4098b112f\",\r\n      \"doc_iod_reference\": \"d636d9e2371bfd5ff370059ccae0619f\",\r\n\r\n      . . .\r\n\r\n    },\r\n    {\r\n      \"reference\": \"kdnuggets-test.zip:kdnuggets-test.pdf\",\r\n      \"parent_iod_reference\": \"3573e81cca7695b998cbefc4098b112f\",\r\n      \"doc_iod_reference\": \"1499d6bfd5621756de8965738b6cf5dc\",\r\n\r\n      . . .\r\n\r\n    }\r\n  ],\r\n  \"md5sum\": [\r\n    \"6c2f26f89baf9a629c45aebc3e4aa5a0\"\r\n  ]\r\n}\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>This functionality is achievable via the Python API using the same code excerpt as in the PDF text extraction example above, substituting for the appropriate ZIP archive filename.</p>\n<p>An alternate approach to accessing files within compressed archives would be to first extract the contents of the ZIP file (or any other type of container) using the <a href=\"https://dev.havenondemand.com/apis/expandcontainer#overview\">Expand Container API</a>, which then stores the files for processing by other APIs.</p>\n<p>This native API call:</p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\">curl -X POST --form \"file=@kdnuggets-test.zip\" --form \"apikey=YOUR_API_KEY\" https://api.havenondemand.com/1/api/sync/expandcontainer/v1\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>would produce the following result:</p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\">{\r\n  \"files\": [\r\n    {\r\n      \"name\": \"kdnuggets-test.docx\",\r\n      \"reference\": \"f8af1448-4b9f-406d-b03f-9b035716cf7f-14e78989\",\r\n      \"size\": 6267\r\n    },\r\n    {\r\n      \"name\": \"kdnuggets-test.pdf\",\r\n      \"reference\": \"76643f0f-de05-4bb0-9afc-979e96758f8c-14e78989\",\r\n      \"size\": 78519\r\n    }\r\n  ]\r\n}\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>These extracted files could then be processed in other APIs via their reference.</p>\n<p>HPE Haven OnDemand includes various connector APIs, which allow you to retrieve information from external systems and update it through the available APIs. Supported connector types include the <a href=\"https://dev.havenondemand.com/developer/docs/Connectors_Filesystem.html\">local filesystem</a>, <a href=\"https://dev.havenondemand.com/docs/Connectors_Web.html\">web resources</a>, <a href=\"https://dev.havenondemand.com/developer/docs/Connectors_Sharepoint.html\">SharePoint repositories</a>, and <a href=\"https://dev.havenondemand.com/docs/Connectors_Dropbox.html\">Dropbox accounts</a>. The connectors make it easy to incorporate data from across numerous systems into Haven OnDemand projects.</p>\n<p><img alt=\"Cheat sheet footer\" src=\"/wp-content/uploads/haven-ondemand-cheat-sheet-footer.jpg\" width=\"99%\"/></p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2016/06/build-your-own-audio-video-analytics-hpe-haven-ondemand-part-1.html\">Build Your Own Audio/Video Analytics App With HPE Haven OnDemand \u2013 Part 1</a>\n<li><a href=\"/2016/06/build-your-own-audio-video-analytics-hpe-haven-ondemand-part-2.html\">Build Your Own Audio/Video Analytics App With HPE Haven OnDemand \u2013 Part 2</a>\n<li><a href=\"/2016/02/hpe-machine-learning-60-apis-haven-ondemand.html\">Machine Learning at your fingertips \u2013 60+ free APIs, from HPE Haven OnDemand</a>\n</li></li></li></ul>\n<p><em>Note: the article was commissioned by HPE, but written by an independent KDnuggets expert.</em></p>\n</hr></div>\n<div class=\"page-link\"></div>\n<div class=\"pagi\">\n<hr class=\"grey-line\"/>\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2016/06/zementis-standards-based-deployment-predictive-analytics.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"/> <strong>Previous post</strong></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2016/06/review-deep-learning-models.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/><br/>\n<div>\n<hr class=\"grey-line\"/><br/>\n<h2>Top Stories Past 30 Days</h2>\n<table align=\"center\" cellpadding=\"3\" cellspacing=\"10\" class=\"latn\" width=\"100%\">\n<tr>\n<td valign=\"top\" width=\"50%\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Popular</b></th></tr>\n<tr><td>\n<ol class=\"three_ol\"><li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-1-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-2-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n<li> <a href=\"/2018/05/simplilearn-9-must-have-skills-data-scientist.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-3-simplilearn');\"><b>9 Must-have skills you need to become a Data Scientist, updated</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-4-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/03/another-10-free-must-read-books-for-machine-learning-and-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-5-another-10-books');\"><b>Another 10 Free Must-Read Books for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-6-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/best-data-visualization-techniques.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-7-best-data-viz');\"><b>Best Data Visualization Techniques for small and large data</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td> <td valign=\"top\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Shared</b></th></tr>\n<tr><td><ol class=\"three_ol\">\n<li> <a href=\"/2019/04/another-10-free-must-see-courses-machine-learning-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-1-another-10-courses');\"><b>Another 10 Free Must-See Courses for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-2-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/03/r-vs-python-data-visualization.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-3-r-py-viz');\"><b>R vs Python for Data Visualization</b></a>\n<li> <a href=\"/2019/03/deep-learning-toolset-overview.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-4-dl-toolset');\"><b>The Deep Learning Toolset \u2014 An Overview</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-5-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-6-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-7-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<!--#content end--></div>\n<div id=\"sidebar\">\n<div class=\"latn\">\n<h3><b><a href=\"/news/index.html\">Latest News</a></b></h3>\n<ul style=\"font-size:14px; margin-top:5px\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/datarobot-delivering-trusted-ai-microsoft.html\">Delivering Trusted AI with DataRobot and Microsoft</a><li> <a href=\"https://www.kdnuggets.com/2019/04/formulated-ai-data-production-landscape.html\">AI and the data production landscape</a><li> <a href=\"https://www.kdnuggets.com/2019/04/most-desired-skill-data-science.html\">The most desired skill in data science</a><li> <a href=\"https://www.kdnuggets.com/2019/04/projects-include-data-science-portfolio.html\">Projects to Include in a Data Science Portfolio</a><li> <a href=\"https://www.kdnuggets.com/2019/04/rework-meet-worlds-leading-ai-deep-learning-experts.html\">Meet the World\u2019s Leading AI &amp; Deep Learning ...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/problem-data-science-job-postings.html\">The problem with data science job postings</a></li></li></li></li></li></li></ul>\n</div>\n<div>\n<script type=\"text/javascript\">kda_sid_write(kda_sid_n);</script>\n</div>\n<br/><script src=\"/aps/sbm.js\" type=\"text/javascript\"></script>\n<div class=\"latn\" style=\"margin-top: 15px;\">\n<h3><b>More Recent Stories</b></h3>\n<ul class=\"next-posts\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/problem-data-science-job-postings.html\">The problem with data science job postings</a><li> <a href=\"https://www.kdnuggets.com/2019/04/graduating-gans-understanding-generative-adversarial-networks.html\">Graduating in GANs: Going From Understanding Generative Advers...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/datax-join-new-generation-ai-technologists.html\">Join the new generation of AI technologists</a><li> <a href=\"https://www.kdnuggets.com/2019/04/top-tweets-apr17-apr23.html\">Top tweets, Apr 17\u201323: The History of Artificial #NeuralN...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/activestate-top-10-python-use-cases.html\">Top 10 Python Use Cases</a><li> <a href=\"https://www.kdnuggets.com/2019/04/future-generative-adversarial-networks.html\">Generative Adversarial Networks \u2013 Key Milestones and Sta...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/attention-craving-rnn-building-transformer-networks.html\">Attention Craving RNNS: Building Up To Transformer Networks</a><li> <a href=\"https://www.kdnuggets.com/jobs/19/04-24-fors-marsh-group-lead-data-scientist.html\">Fors Marsh Group: Lead Data Scientist [Arlington, VA]</a><li> <a href=\"https://www.kdnuggets.com/2019/n16.html\">KDnuggets 19:n16, Apr 24: Data Visualization in Python with...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/paw-mega-paw-las-vegas-lower-rates-end-friday.html\">Lower Rates End Friday for Mega-PAW Vegas \u2013 the Largest Pred...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/top-news-week-0415-0421.html\">Top Stories, Apr 15-21: Data Visualization in Python: Matplotl...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/wharton-customer-analytics-initiative-conference.html\">Wharton Customer Analytics Initiative Annual Conference in Phi...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/machine-learning-graph-analytics.html\">Machine Learning and Deep Link Graph Analytics: A Powerful Com...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/best-masters-data-science-analytics-online.html\">2019 Best Masters in Data Science and Analytics \u2013 Online</a><li> <a href=\"https://www.kdnuggets.com/2019/04/worth-studying-data-science-masters.html\">Was it Worth Studying a Data Science Masters?</a><li> <a href=\"https://www.kdnuggets.com/2019/04/approach-pre-trained-deep-learning-models-caution.html\">Approach pre-trained deep learning models with caution</a><li> <a href=\"https://www.kdnuggets.com/2019/04/coursera-earn-deep-learning-certificate.html\">Earn a Deep Learning Certificate</a><li> <a href=\"https://www.kdnuggets.com/2019/04/octoparse-scrape-data-website.html\">Easy Way to Scrape Data from Website By Yourself</a><li> <a href=\"https://www.kdnuggets.com/2019/04/ai-environment.html\">AI Supporting The Earth</a><li> <a href=\"https://www.kdnuggets.com/2019/04/mueller-report-word-cloud-brief-tutorial-r.html\">The Mueller Report Word Cloud: A brief tutorial in R</a></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></ul>\n</div>\n</div><div class=\"breadcrumbs_bottom\">\n<div class=\"breadcumb\">\n<br>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2016/index.html\">2016</a> \u00bb <a href=\"https://www.kdnuggets.com/2016/06/index.html\">Jun</a> \u00bb <a href=\"https://www.kdnuggets.com/2016/06/tutorials.html\">Tutorials, Overviews</a> \u00bb HPE Haven OnDemand Text Extraction API Cheat Sheet for Developers (\u00a0<a href=\"/2016/n22.html\">16:n22</a>\u00a0)    </br></div>\n</div>\n<!--#content_wrapper end--></div>\n<br>\n<div id=\"footer\">\n<br/>\u00a9 2019 KDnuggets. <a href=\"/about/index.html\">About KDnuggets</a>. \u00a0<a href=\"/news/privacy-policy.html\">Privacy policy</a>. <a href=\"/terms-of-service.html\">Terms of Service</a><br/>\u00a0\n<div class=\"kd_bottom\">\n<div class=\"footer-container\">\n<div class=\"footer-news\">\n<a href=\"/news/subscribe.html\" onclick=\"_gaq.push(['_trackPageview','/x/bot/sub']);\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a>\n</div>\n<div class=\"footer-sm\">\n<a href=\"https://twitter.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/twt']);\" target=\"_blank\"><img height=\"32\" src=\"/images/tw_c48.png\" width=\"32\"/></a>\n<a href=\"https://facebook.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/fb']);\" target=\"_blank\"><img alt=\"Facebook\" height=\"32\" src=\"/images/fb_c48.png\" width=\"32\"/></a>\n<a href=\"https://www.linkedin.com/groups/54257\" onclick=\"_gaq.push(['_trackPageview','/x/bot/in']);\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"32\" src=\"/images/in_c48.png\" width=\"32\"/></a>\n</div>\n</div>\n<div class=\"close-footer\">X</div>\n</div>\n<script type=\"text/javascript\">\n  jQuery('.close-footer').click(\n      function(){       \n         jQuery('.kd_bottom').hide();\n      }\n   );\n</script> </div>\n<div class=\"clear\"><!--blank--></div>\n</br></div>\n<div style=\"display: none;\"><div id=\"boxzilla-box-82996-content\"><script type=\"text/javascript\">(function() {\n\tif (!window.mc4wp) {\n\t\twindow.mc4wp = {\n\t\t\tlisteners: [],\n\t\t\tforms    : {\n\t\t\t\ton: function (event, callback) {\n\t\t\t\t\twindow.mc4wp.listeners.push({\n\t\t\t\t\t\tevent   : event,\n\t\t\t\t\t\tcallback: callback\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})();\n</script><!-- MailChimp for WordPress v4.1.14 - https://wordpress.org/plugins/mailchimp-for-wp/ --><form class=\"mc4wp-form mc4wp-form-77281\" data-id=\"77281\" data-name=\"Subscribe to KDnuggets News\" id=\"mc4wp-form-1\" method=\"post\"><div class=\"mc4wp-form-fields\"><div class=\"header-container\">\n<img align=\"left\" src=\"/wp-content/uploads/envelope.png\"><a href=\"/news/subscribe.html\">Get KDnuggets, a leading newsletter on AI, \r\n  Data Science, and Machine Learning</a>\n</img></div>\n<div class=\"form-fields\">\n<div class=\"field-container\"><label>Email:</label><input maxlength=\"60\" name=\"EMAIL\" placeholder=\"Your email\" required=\"\" size=\"30\" type=\"email\"/></div>\n<div class=\"field-container submit-container\"><div class=\"form-button\" onclick=\"document.getElementById('mc4wp-form-1').submit()\">Sign Up</div></div>\n</div>\n<label style=\"display: none !important;\">Leave this field empty if you're human: <input autocomplete=\"off\" name=\"_mc4wp_honeypot\" tabindex=\"-1\" type=\"text\" value=\"\"/></label><input name=\"_mc4wp_timestamp\" type=\"hidden\" value=\"1556363485\"/><input name=\"_mc4wp_form_id\" type=\"hidden\" value=\"77281\"/><input name=\"_mc4wp_form_element_id\" type=\"hidden\" value=\"mc4wp-form-1\"/></div><div class=\"mc4wp-response\"></div></form><!-- / MailChimp for WordPress Plugin -->\n</div></div><script type=\"text/javascript\">(function() {function addEventListener(element,event,handler) {\n\tif(element.addEventListener) {\n\t\telement.addEventListener(event,handler, false);\n\t} else if(element.attachEvent){\n\t\telement.attachEvent('on'+event,handler);\n\t}\n}function maybePrefixUrlField() {\n\tif(this.value.trim() !== '' && this.value.indexOf('http') !== 0) {\n\t\tthis.value = \"http://\" + this.value;\n\t}\n}\n\nvar urlFields = document.querySelectorAll('.mc4wp-form input[type=\"url\"]');\nif( urlFields && urlFields.length > 0 ) {\n\tfor( var j=0; j < urlFields.length; j++ ) {\n\t\taddEventListener(urlFields[j],'blur',maybePrefixUrlField);\n\t}\n}/* test if browser supports date fields */\nvar testInput = document.createElement('input');\ntestInput.setAttribute('type', 'date');\nif( testInput.type !== 'date') {\n\n\t/* add placeholder & pattern to all date fields */\n\tvar dateFields = document.querySelectorAll('.mc4wp-form input[type=\"date\"]');\n\tfor(var i=0; i<dateFields.length; i++) {\n\t\tif(!dateFields[i].placeholder) {\n\t\t\tdateFields[i].placeholder = 'YYYY-MM-DD';\n\t\t}\n\t\tif(!dateFields[i].pattern) {\n\t\t\tdateFields[i].pattern = '[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])';\n\t\t}\n\t}\n}\n\n})();</script><script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_options = {\"testMode\":\"\",\"boxes\":[{\"id\":82996,\"icon\":\"&times;\",\"content\":\"\",\"css\":{\"background_color\":\"#eeee22\",\"width\":600,\"border_width\":2,\"border_style\":\"double\",\"position\":\"center\"},\"trigger\":{\"method\":\"time_on_page\",\"value\":\"3\"},\"animation\":\"fade\",\"cookie\":{\"triggered\":0,\"dismissed\":336},\"rehide\":true,\"position\":\"center\",\"screenWidthCondition\":{\"condition\":\"larger\",\"value\":500},\"closable\":true,\"post\":{\"id\":82996,\"title\":\"Subscribe to KDnuggets\",\"slug\":\"subscribe-to-kdnuggets\"}}]};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla/assets/js/script.min.js?ver=3.2.5\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_stats_config = {\"ajaxurl\":\"https:\\/\\/www.kdnuggets.com\\/wp-admin\\/admin-ajax.php?action=boxzilla_stats_track\"};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla-stats/assets/js/tracking.min.js?ver=1.0.4\" type=\"text/javascript\"></script>\n<script src=\"https://www.kdnuggets.com/wp-includes/js/wp-embed.min.js?ver=4.9.10\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar mc4wp_forms_config = [];\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/forms-api.min.js?ver=4.1.14\" type=\"text/javascript\"></script>\n<!--[if lte IE 9]>\n<script type='text/javascript' src='https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/third-party/placeholders.min.js?ver=4.1.14'></script>\n<![endif]-->\n<!--/.main_wrapper--></div>\n<script src=\"https://s7.addthis.com/js/300/addthis_widget.js#pubid=gpsaddthis\" type=\"text/javascript\"></script>\n</body>\n</html>\n<!-- Dynamic page generated in 0.727 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2019-04-27 07:11:25 -->\n<!-- Compression = gzip -->", "content_tokenized": ["matthew", "mayo", "kdnugget", "content", "overview", "get", "text", "from", "imag", "get", "text", "from", "audio", "and", "video", "get", "text", "from", "document", "pdfs", "and", "archiv", "num", "overview", "outlin", "pair", "previous", "post", "haven", "ondemand", "cloud", "servic", "platform", "which", "simplifi", "how", "can", "interact", "with", "data", "allow", "transform", "into", "asset", "anytim", "anywher", "haven", "ondemand", "provid", "collect", "over", "num", "machin", "learn", "applic", "program", "interfac", "api", "for", "interact", "with", "structur", "and", "unstructur", "data", "varieti", "way", "kdnugget", "and", "haven", "ondemand", "have", "team", "bring", "text", "extract", "cheat", "sheet", "cover", "numer", "method", "for", "obtain", "text", "from", "differ", "media", "for", "applic", "this", "cheat", "sheet", "specif", "cover", "how", "get", "text", "from", "imag", "audio", "and", "video", "document", "pdfs", "and", "archiv", "further", "process", "text", "after", "extract", "often", "desir", "the", "cheat", "sheet", "also", "touch", "sever", "addit", "textprocess", "api", "the", "haven", "ondemand", "nativ", "api", "are", "and", "methodbas", "and", "can", "easili", "embed", "ani", "program", "languag", "invok", "independ", "with", "curl", "call", "make", "develop", "even", "more", "flexibl", "haven", "ondemand", "also", "provid", "number", "program", "languagespecif", "api", "includ", "android", "nodej", "rubi", "and", "more", "this", "cheat", "sheet", "will", "consid", "both", "the", "nativ", "api", "demonstr", "curl", "call", "and", "the", "python", "detail", "regard", "instal", "all", "languag", "specif", "api", "includ", "python", "can", "found", "the", "applic", "github", "repositori", "note", "that", "use", "haven", "ondemand", "requir", "that", "one", "regist", "for", "free", "key", "also", "note", "that", "haven", "ondemand", "provid", "both", "synchron", "and", "asynchron", "call", "function", "some", "particular", "api", "support", "both", "call", "type", "while", "other", "support", "onli", "one", "the", "other", "may", "want", "read", "more", "about", "asynchron", "call", "the", "cheat", "sheet", "doe", "not", "cover", "the", "basic", "haven", "ondemand", "api", "may", "want", "refer", "the", "follow", "previous", "post", "for", "more", "inform", "haven", "ondemand", "and", "microsoft", "azur", "machin", "learn", "power", "tool", "for", "develop", "and", "data", "scientist", "data", "scienc", "and", "cognit", "comput", "with", "haven", "ondemand", "the", "simpl", "path", "reason", "and", "insight", "num", "get", "text", "from", "imag", "the", "document", "extract", "text", "from", "imag", "that", "provid", "use", "the", "nativ", "haven", "ondemand", "curl", "can", "use", "issu", "request", "the", "ondemand", "platform", "curl", "form", "file", "ocrtestenpng", "form", "numapisyncocrdocumentvnum", "this", "would", "result", "the", "follow", "textblock", "text", "this", "lot", "num", "point", "text", "test", "thenocr", "code", "and", "see", "work", "all", "typesnof", "file", "formatnth", "quick", "brown", "dog", "jump", "over", "thenlazi", "fox", "the", "quick", "brown", "dog", "jumpednov", "the", "lazi", "fox", "the", "quick", "brown", "dognjump", "over", "the", "lazi", "fox", "the", "quicknbrown", "dog", "jump", "over", "the", "lazi", "fox", "left", "num", "top", "num", "width", "num", "height", "num", "accomplish", "the", "same", "use", "the", "python", "import", "haven", "ondemand", "api", "from", "havenondemandhodcli", "import", "initi", "haven", "ondemand", "client", "client", "paramet", "pass", "with", "request", "param", "file", "ocrtestenpng", "make", "the", "call", "request", "work", "with", "both", "url", "and", "file", "hodappsocrdocu", "denot", "the", "use", "asyncfals", "specifi", "synchron", "call", "respons", "print", "the", "return", "text", "from", "imag", "embed", "dict", "respons", "also", "includ", "other", "use", "data", "print", "respons", "textblock", "num", "text", "note", "abov", "the", "use", "the", "param", "dict", "pass", "paramet", "the", "request", "the", "same", "could", "accompish", "build", "inlin", "dict", "insid", "the", "call", "but", "paramet", "grow", "organ", "them", "separ", "cleaner", "with", "all", "respons", "addit", "data", "also", "avail", "enclos", "return", "dict", "this", "case", "simpli", "extract", "the", "text", "what", "about", "further", "process", "the", "result", "with", "the", "python", "problem", "perform", "sentiment", "analysi", "result", "sent", "print", "sent", "aggreg", "score", "return", "aggreg", "score", "num", "num", "get", "text", "from", "audio", "and", "video", "the", "speech", "recognit", "creat", "transcript", "the", "text", "audio", "video", "file", "can", "then", "use", "this", "output", "with", "other", "haven", "ondemand", "api", "such", "concept", "extract", "add", "text", "index", "gain", "further", "insight", "and", "analysi", "use", "the", "nativ", "haven", "ondemand", "curl", "can", "use", "issu", "request", "the", "ondemand", "platform", "curl", "form", "file", "firstlessonmpnum", "form", "apikeyyourapikey", "numapiasyncrecognizespeechvnum", "here", "audio", "file", "name", "firstlessonmpnum", "has", "been", "pass", "the", "speech", "recognit", "the", "speech", "recognit", "asynchron", "onli", "and", "addit", "call", "are", "requir", "check", "the", "status", "andor", "get", "the", "result", "the", "call", "the", "first", "call", "abov", "return", "job", "shown", "below", "jobid", "check", "the", "status", "this", "job", "accomplish", "via", "the", "follow", "curl", "call", "curl", "numjobstatusyourjobid", "apikeyyourapikey", "get", "the", "result", "this", "job", "onc", "finish", "accomplish", "via", "the", "follow", "curl", "call", "curl", "numjobresultyourjobid", "apikeyyourapikey", "both", "these", "return", "data", "format", "which", "can", "captur", "further", "process", "necessari", "now", "let", "see", "this", "same", "function", "use", "the", "python", "import", "haven", "ondemand", "api", "from", "havenondemandhodcli", "import", "initi", "haven", "ondemand", "client", "client", "paramet", "pass", "with", "request", "param", "file", "obamavictoryspeechmpnum", "call", "this", "onli", "respons", "get", "the", "job", "for", "check", "asynchon", "print", "respons", "jobid", "jobid", "respons", "jobid", "check", "status", "also", "return", "result", "when", "finish", "preferenti", "use", "status", "over", "result", "avoid", "timeout", "status", "print", "status", "altern", "check", "result", "result", "print", "result", "num", "get", "text", "from", "document", "pdfs", "and", "archiv", "the", "text", "extract", "extract", "metadata", "and", "text", "content", "from", "file", "that", "provid", "the", "can", "handl", "over", "num", "differ", "file", "format", "will", "use", "the", "text", "extract", "extract", "text", "from", "document", "microsoft", "word", "document", "and", "archiv", "extract", "text", "from", "file", "use", "the", "nativ", "haven", "ondemand", "curl", "can", "use", "issu", "request", "the", "ondemand", "platform", "curl", "form", "file", "kdnuggetstestpdf", "form", "extractmetadatatru", "form", "extracttexttru", "form", "extractxmlattributesfals", "form", "apikeyyourapikey", "numapisyncextracttextvnum", "this", "would", "result", "the", "follow", "excerpt", "document", "refer", "kdnuggetstestpdf", "dociodrefer", "numfnumfnumanumanumbnumcnumcbnumc", "appnam", "skiapdf", "mnum", "contenttyp", "applicationpdf", "documentattribut", "num", "documentembeddedfontratio", "num", "documentpctembeddedfont", "num", "documentpctprobabilitymismatch", "num", "files", "num", "pagecount", "num", "processingerrorcod", "num", "processingerrordescript", "document", "embed", "font", "content", "top", "rmachinelearn", "stori", "this", "month", "mdnumsum", "fnumbnumdanumcanumanumcnumcnumanuma", "now", "let", "see", "this", "same", "function", "use", "the", "python", "note", "that", "this", "would", "onli", "print", "the", "content", "the", "file", "yet", "more", "data", "return", "import", "haven", "ondemand", "api", "from", "havenondemandhodcli", "import", "initi", "haven", "ondemand", "client", "client", "paramet", "pass", "with", "request", "param", "file", "kdnuggetstestpdf", "call", "respons", "print", "onli", "the", "content", "the", "submit", "file", "also", "includ", "other", "use", "data", "print", "respons", "document", "num", "content", "extract", "text", "from", "word", "document", "use", "the", "nativ", "haven", "ondemand", "curl", "can", "use", "issu", "request", "the", "ondemand", "platform", "curl", "form", "file", "kdnuggetstestdocx", "form", "extractmetadatatru", "form", "extracttexttru", "form", "extractxmlattributesfals", "form", "apikeyyourapikey", "numapisyncextracttextvnum", "this", "would", "result", "the", "follow", "excerpt", "document", "refer", "kdnuggetstestdocx", "dociodrefer", "numdnumenumenumcdnum", "contenttyp", "applicationxmswordnum", "documentattribut", "num", "files", "num", "content", "top", "rmachinelearn", "stori", "this", "month", "mdnumsum", "numanumdbnumcnumbfdnumfnumf", "this", "function", "achiev", "via", "the", "python", "use", "the", "same", "code", "excerpt", "the", "text", "extract", "exampl", "abov", "substitut", "for", "the", "appropri", "microsoft", "word", "filenam", "extract", "text", "from", "archiv", "use", "the", "nativ", "haven", "ondemand", "curl", "can", "use", "issu", "request", "the", "ondemand", "platform", "curl", "form", "file", "kdnuggetstestzip", "form", "extractmetadatatru", "form", "extracttexttru", "form", "extractxmlattributesfals", "form", "apikeyyourapikey", "numapisyncextracttextvnum", "this", "would", "result", "the", "follow", "excerpt", "document", "refer", "kdnuggetstestzip", "dociodrefer", "numenumccanumbnumcbefcnumbnumf", "contenttyp", "applicationzip", "documentattribut", "num", "files", "num", "refer", "kdnuggetstestzip", "kdnuggetstestdocx", "parentiodrefer", "numenumccanumbnumcbefcnumbnumf", "dociodrefer", "dnumdnumenumbfdnumffnumccaenumf", "refer", "kdnuggetstestzip", "kdnuggetstestpdf", "parentiodrefer", "numenumccanumbnumcbefcnumbnumf", "dociodrefer", "numdnumbfdnumdenumbnumcfnumdc", "mdnumsum", "numcnumfnumfnumbafnumanumcnumaebcnumenumaanumanum", "this", "function", "achiev", "via", "the", "python", "use", "the", "same", "code", "excerpt", "the", "text", "extract", "exampl", "abov", "substitut", "for", "the", "appropri", "archiv", "filenam", "altern", "approach", "access", "file", "within", "compress", "archiv", "would", "first", "extract", "the", "content", "the", "file", "ani", "other", "type", "contain", "use", "the", "expand", "contain", "which", "then", "store", "the", "file", "for", "process", "other", "api", "this", "nativ", "call", "curl", "form", "file", "kdnuggetstestzip", "form", "apikeyyourapikey", "numapisyncexpandcontainervnum", "would", "produc", "the", "follow", "result", "file", "name", "kdnuggetstestdocx", "refer", "fnumafnumbnumfnumdbnumfnumbnumcfnumfnumenum", "size", "num", "name", "kdnuggetstestpdf", "refer", "numfnumfdenumbbnumafcnumenumfnumcnumenum", "size", "num", "these", "extract", "file", "could", "then", "process", "other", "api", "via", "their", "refer", "haven", "ondemand", "includ", "various", "connector", "api", "which", "allow", "retriev", "inform", "from", "extern", "system", "and", "updat", "through", "the", "avail", "api", "support", "connector", "type", "includ", "the", "local", "filesystem", "web", "resourc", "sharepoint", "repositori", "and", "dropbox", "account", "the", "connector", "make", "easi", "incorpor", "data", "from", "across", "numer", "system", "into", "haven", "ondemand", "project", "relat", "build", "own", "audiovideo", "analyt", "app", "with", "haven", "ondemand", "part", "num", "build", "own", "audiovideo", "analyt", "app", "with", "haven", "ondemand", "part", "num", "machin", "learn", "fingertip", "num", "free", "api", "from", "haven", "ondemand", "note", "the", "articl", "commiss", "but", "written", "independ", "kdnugget", "expert"], "timestamp_scraper": 1556363486.003368, "title": "HPE Haven OnDemand Text Extraction API Cheat Sheet for Developers", "read_time": 509.09999999999997, "content_html": "<div class=\"post\" id=\"post-\">\n<p><b>By Matthew Mayo, KDnuggets</b>.</p>\n<p><img alt=\"haven-ondemand-cheat-sheet-header.jpg\" src=\"/wp-content/uploads/haven-ondemand-cheat-sheet.jpg\" width=\"99%\"/></p>\n<p><a name=\"overview\"></a> </p>\n<h3>Contents</h3>\n<ol class=\"three_ul\">\n<li><a href=\"#overview\">Overview</a>\n<li><a href=\"#images\">Getting Text From Images</a>\n<li><a href=\"#audio\">Getting Text From Audio and Video</a>\n<li><a href=\"#documents\">Getting Text From Documents, PDFs, and Archives</a>\n</li></li></li></li></ol>\n<hr>\n<h3>1. Overview</h3>\n<p>\u00a0<br>\nAs outlined in a pair of <a href=\"/2016/03/hpe-haven-ondemand-microsoft-azure-machine-learning.html\">previous</a> <a href=\"/2016/05/hpe-haven-ondemand-data-science-cognitive-computing.html\">posts</a>, <a href=\"https://www.havenondemand.com/\">HPE Haven OnDemand</a> is a cloud services platform which simplifies how you can interact with data, allowing it to be transformed into an asset anytime, anywhere. HPE Haven OnDemand provides a collection of over <a href=\"/2016/02/hpe-machine-learning-60-apis-haven-ondemand.html\">60 machine learning application programming interfaces</a> (APIs) for interacting with structured and unstructured data in a variety of ways.</br></p>\n<p>KDnuggets and HPE Haven OnDemand have teamed up to bring you a Text Extraction API Cheat Sheet, covering numerous methods for obtaining text from different media for your applications. \u00a0This cheat sheet specifically covers how to get text from:</p>\n<ul class=\"three_ul\">\n<li><a href=\"https://dev.havenondemand.com/apis/ocrdocument#overview\">Images</a>\n<li><a href=\"https://dev.havenondemand.com/apis/recognizespeech#overview\">Audio and video</a>\n<li><a href=\"https://dev.havenondemand.com/apis/extracttext#overview\">Documents, PDFs, and archives</a>\n</li></li></li></ul>\n<p>As further processing of text after it is extracted is often desired, the cheat sheet also touches on several additional text-processing APIs.</p>\n<p>The HPE Haven OnDemand native APIs are POST and GET method-based, and can easily be embedded in any programming language or invoked independently with cURL calls. \u00a0To make development even more flexible, Haven OnDemand also provides a number of <a href=\"https://github.com/HPE-Haven-OnDemand/\">programming language-specific APIs</a>, including Android, Go, Node.js, R, Ruby and more.</p>\n<p>This cheat sheet will consider both the native APIs, demonstrated by cURL calls, and the <a href=\"https://github.com/HPE-Haven-OnDemand/havenondemand-python\">Python API</a>. \u00a0Details regarding installation of all language specific APIs, including Python, can be found in the applicable Github repositories.</p>\n<p><a href=\"/wp-content/uploads/haven-ondemand-api-comparison.jpg\"><img alt=\"API comparison\" src=\"/wp-content/uploads/haven-ondemand-api-comparison.jpg\" width=\"99%\"/></a></p>\n<p>Note that using HPE Haven OnDemand requires that one register for a <a href=\"https://www.havenondemand.com/docs/api-overview.html\">free API key</a>. \u00a0Also note that HPE Haven OnDemand provides both synchronous and asynchronous API call functionality; some particular APIs support both call types, while others support only one or the other. \u00a0You may want to read more about <a href=\"https://dev.havenondemand.com/docs/AsynchronousAPI.htm\">asynchronous API calls</a>.<br>\n<a name=\"images\"></a><br>\nThe cheat sheet does not cover the basics of HPE Haven OnDemand APIs, so you may want to refer to the following previous posts for more information.</br></br></p>\n<ul>\n<li><a href=\"/2016/03/hpe-haven-ondemand-microsoft-azure-machine-learning.html\">HPE Haven OnDemand and Microsoft Azure Machine Learning: Power Tools for Developers and Data Scientists</a>\n<li><a href=\"/2016/05/hpe-haven-ondemand-data-science-cognitive-computing.html\">Data Science and Cognitive Computing with HPE Haven OnDemand: The Simple Path to Reason and Insight</a>\n</li></li></ul>\n<hr/>\n<h3>2. Getting Text From Images</h3>\n<p>\u00a0<br>\n<img alt=\"OCR document\" src=\"/wp-content/uploads/hpe-ocr-document.jpg\" width=\"99%\"/></br></p>\n<p>The <a href=\"https://dev.havenondemand.com/apis/ocrdocument#overview\">OCR Document API</a> extracts text from an image that you provide.</p>\n<p>Using the native Haven OnDemand API, cURL can be used to issue a POST request to the OnDemand platform:</p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\">curl -X POST --form \"file=@ocr-test-en.png\" --form \"YOUR_API_KEY\" https://api.havenondemand.com/1/api/sync/ocrdocument/v1\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>This would result in the following:</p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\">{\r\n  \"text_block\": [\r\n    {\r\n      \"text\": \"This is a lot of 12 point text to test the\\nocr code and see if it works on all types\\nof file format.\\nThe quick brown dog jumped over the\\nlazy fox. The quick brown dog jumped\\nover the lazy fox. The quick brown dog\\njumped over the lazy fox. The quick\\nbrown dog jumped over the lazy fox.\",\r\n      \"left\": 36,\r\n      \"top\": 92,\r\n      \"width\": 582,\r\n      \"height\": 269\r\n    }\r\n  ]\r\n}\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>To accomplish the same using the Python API:</p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\"><span style=\"color:#aeaeae;font-style:italic\"># Import Haven OnDemand APIs</span>\r\n<span style=\"color:#e28964\">from</span> havenondemand.hodclient <span style=\"color:#e28964\">import</span> <span style=\"color:#e28964\">*</span>\r\n\r\n<span style=\"color:#aeaeae;font-style:italic\"># Initiate Haven OnDemand client</span>\r\nclient <span style=\"color:#e28964\">=</span> HODClient(<span style=\"color:#65b042\">\"YOUR_API_KEY\"</span>, <span style=\"color:#3e87e3\">version</span><span style=\"color:#e28964\">=</span><span style=\"color:#65b042\">\"v1\"</span>)\r\n\r\n<span style=\"color:#aeaeae;font-style:italic\"># Parameters to pass with request</span>\r\nparams <span style=\"color:#e28964\">=</span> {<span style=\"color:#65b042\">'file'</span>: <span style=\"color:#65b042\">'ocr-test-en.png'</span>}\r\n\r\n<span style=\"color:#aeaeae;font-style:italic\"># Make the API call (POST request; works with both 'url' and 'file')</span>\r\n<span style=\"color:#aeaeae;font-style:italic\"># HODApps.OCR_DOCUMENT denotes the API to use</span>\r\n<span style=\"color:#aeaeae;font-style:italic\"># async=False specifies a synchronous API call</span>\r\nresponse <span style=\"color:#e28964\">=</span> client.post_request(params, HODApps.OCR_DOCUMENT, <span style=\"color:#3e87e3\">async</span><span style=\"color:#e28964\">=</span><span style=\"color:#3387cc\">False</span>)\r\n\r\n<span style=\"color:#aeaeae;font-style:italic\"># Print the returned text from image embedded in dict response</span>\r\n<span style=\"color:#aeaeae;font-style:italic\"># Also includes other useful data</span>\r\n<span style=\"color:#e28964\">print</span> response[<span style=\"color:#65b042\">'text_block'</span>][<span style=\"color:#3387cc\">0</span>][<span style=\"color:#65b042\">'text'</span>]\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Note above the use of the params dict to pass parameters to the request. The same could be accompished by building an inline dict inside of the API call, but as parameters grow, organizing them separately is cleaner.</p>\n<p>As with all responses, additional data is also available, enclosed in a returned dict. In this case we simply extracted the text.</p>\n<p>What about further processing of the results with the Python API? No problem!<br/>\n<a name=\"audio\"></a></p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\"><span style=\"color:#aeaeae;font-style:italic\"># Perform sentiment analysis on result</span>\r\nsent <span style=\"color:#e28964\">=</span> client.get_request({<span style=\"color:#65b042\">'text'</span>: response}, HODApps.ANALYZE_SENTIMENT, <span style=\"color:#3e87e3\">async</span><span style=\"color:#e28964\">=</span><span style=\"color:#3387cc\">False</span>)\r\n<span style=\"color:#e28964\">print</span> sent[<span style=\"color:#65b042\">'aggregate'</span>][<span style=\"color:#65b042\">'score'</span>]\r\n\r\n<span style=\"color:#aeaeae;font-style:italic\"># Returned aggregate score</span>\r\n<span style=\"color:#aeaeae;font-style:italic\"># ==&gt; -0.568579962053</span>\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<hr/>\n<h3>3. Getting Text From Audio and Video</h3>\n<p>\u00a0<br/>\n<img alt=\"Speech recognition\" src=\"/wp-content/uploads/hpe-speech-recognition.jpg\" width=\"99%\"/></p>\n<p>The <a href=\"https://dev.havenondemand.com/apis/speech-recognition#overview\">Speech Recognition API</a> creates a transcript of the text in an audio or video file. You can then use this output with other Haven OnDemand APIs, such as <a href=\"https://dev.havenondemand.com/apis/extractconcepts#overview\">Concept Extraction</a> or <a href=\"https://dev.havenondemand.com/apis/addtotextindex#overview\">Add to Text Index</a>, to gain further insight and analysis.</p>\n<p>Using the native Haven OnDemand API, cURL can be used to issue a POST request to the OnDemand platform:</p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\">curl -X POST --form \"file=@first-lesson.mp3\" --form \"apikey=YOUR_API_KEY\" https://api.havenondemand.com/1/api/async/recognizespeech/v1\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Here, an audio file named \"first-lesson.mp3\" has been passed to the <a href=\"https://dev.havenondemand.com/apis/speech-recognition#overview\">Speech Recognition API</a>.</p>\n<p>The <a href=\"https://dev.havenondemand.com/apis/speech-recognition#overview\">Speech Recognition API</a> is asynchronous only, and so additional API calls are required to check the status and/or get the results of the API call. \u00a0The first call, above, returns a job ID, as shown below:</p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\">{\r\n    \"jobID\": \"YOUR_JOB_ID\"\r\n}\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Checking the status of this job is accomplished via the following cURL call:</p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\">curl -X POST https://api.havenondemand.com/1/job/status/YOUR_JOB_ID?apikey=YOUR_API_KEY\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Getting the results of this job, once finished, is accomplished via the following cURL call:</p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\">curl -X POST https://api.havenondemand.com/1/job/result/YOUR_JOB_ID?apikey=YOUR_API_KEY\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Both of these return data in JSON format, which can be be captured of further processed as necessary.</p>\n<p>Now, let's see this same functionality using the Python API:<br/>\n<a name=\"documents\"></a></p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\"><span style=\"color:#aeaeae;font-style:italic\"># Import Haven OnDemand APIs</span>\r\n<span style=\"color:#e28964\">from</span> havenondemand.hodclient <span style=\"color:#e28964\">import</span> <span style=\"color:#e28964\">*</span>\r\n\r\n<span style=\"color:#aeaeae;font-style:italic\"># Initiate Haven OnDemand client</span>\r\nclient <span style=\"color:#e28964\">=</span> HODClient(<span style=\"color:#65b042\">\"YOUR_API_KEY\"</span>, <span style=\"color:#3e87e3\">version</span><span style=\"color:#e28964\">=</span><span style=\"color:#65b042\">\"v1\"</span>)\r\n\r\n<span style=\"color:#aeaeae;font-style:italic\"># Parameters to pass with request</span>\r\nparams <span style=\"color:#e28964\">=</span> {<span style=\"color:#65b042\">'file'</span>: <span style=\"color:#65b042\">'obama-victory-speech.mp4'</span>}\r\n\r\n<span style=\"color:#aeaeae;font-style:italic\"># API call (this API is ASYNC only)</span>\r\nresponse <span style=\"color:#e28964\">=</span> client.post_request(params, HODApps.RECOGNIZE_SPEECH, <span style=\"color:#3e87e3\">async</span><span style=\"color:#e28964\">=</span><span style=\"color:#3387cc\">True</span>)\r\n\r\n<span style=\"color:#aeaeae;font-style:italic\"># Get the job ID for checking asynchonously...</span>\r\n<span style=\"color:#e28964\">print</span> response[<span style=\"color:#65b042\">'jobID'</span>]\r\njobID <span style=\"color:#e28964\">=</span> response[<span style=\"color:#65b042\">'jobID'</span>]\r\n\r\n<span style=\"color:#aeaeae;font-style:italic\"># Check status (also returns result when finished)</span>\r\n<span style=\"color:#aeaeae;font-style:italic\"># Preferential to use status over result API to avoid timeout</span>\r\nstatus <span style=\"color:#e28964\">=</span> client.get_job_status(jobID)\r\n<span style=\"color:#e28964\">print</span> status\r\n\r\n<span style=\"color:#aeaeae;font-style:italic\"># Alternatively, check result</span>\r\nresult <span style=\"color:#e28964\">=</span> client.get_job_status(jobID)\r\n<span style=\"color:#e28964\">print</span> result\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<hr/>\n<h3>4. Getting Text From Documents, PDFs, and Archives</h3>\n<p>\u00a0<br/>\n<img alt=\"File formats\" src=\"/wp-content/uploads/hpe-file-formats.jpg\" width=\"99%\"/></p>\n<p>The <a href=\"https://dev.havenondemand.com/apis/extracttext#overview\">Text Extraction API</a> extracts metadata and text content from a file that you provide. The API can handle over 500 different file formats. We will use the Text Extract API to extract text from a PDF document, a Microsoft Word document, and a ZIP archive.</p>\n<p><b>Extracting Text From PDF Files</b></p>\n<p>Using the native Haven OnDemand API, cURL can be used to issue a POST request to the OnDemand platform:</p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\">curl -X POST --form \"file=@kdnuggets-test.pdf\" --form \"extract_metadata=true\" --form \"extract_text=true\" --form \"extract_xmlattributes=false\" --form \"apikey=YOUR_API_KEY\" https://api.havenondemand.com/1/api/sync/extracttext/v1\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>This would result in the following (an excerpt):</p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\">{\r\n  \"document\": [\r\n    {\r\n      \"reference\": \"kdnuggets-test.pdf\",\r\n      \"doc_iod_reference\": \"4733178f00148f4a2a1b573c6cb2674c\",\r\n      \"app_name\": [\r\n        \"Skia/PDF m53\"\r\n      ],\r\n      \"content_type\": [\r\n        \"application/pdf\"\r\n      ],\r\n      \"document_attributes\": [\r\n        \"0\"\r\n      ],\r\n      \"document_embedded_font_ratio\": [\r\n        \"0\"\r\n      ],\r\n      \"document_pct_embedded_font\": [\r\n        \"0\"\r\n      ],\r\n      \"document_pct_probability_mismatch\": [\r\n        \"0\"\r\n      ],\r\n      \"file_size\": [\r\n        78519\r\n      ],\r\n      \"page_count\": [\r\n        \"2\"\r\n      ],\r\n      \"processing_error_code\": [\r\n        \"1\"\r\n      ],\r\n      \"processing_error_description\": [\r\n        \"Document: Embedded Font\"\r\n      ],\r\n      \"content\": \"Top /r/MachineLearning stories this month:\r\n\r\n           . . .\r\n\r\n           }\r\n    ],\r\n    \"md5sum\": [\r\n        \"f1b75da0ca2341a57316c9c0a375697a\"\r\n    ]\r\n}\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Now, let's see this same functionality using the Python API (note that this would only print the content of the file, yet more data is returned):</p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\"><span style=\"color:#aeaeae;font-style:italic\"># Import Haven OnDemand APIs </span>\r\n<span style=\"color:#e28964\">from</span> havenondemand.hodclient <span style=\"color:#e28964\">import</span> <span style=\"color:#e28964\">*</span>\r\n\r\n<span style=\"color:#aeaeae;font-style:italic\"># Initiate Haven OnDemand client</span>\r\nclient <span style=\"color:#e28964\">=</span> HODClient(<span style=\"color:#65b042\">\"YOUR_API_KEY\"</span>, <span style=\"color:#3e87e3\">version</span><span style=\"color:#e28964\">=</span><span style=\"color:#65b042\">\"v1\"</span>)\r\n\r\n<span style=\"color:#aeaeae;font-style:italic\"># Parameters to pass with request</span>\r\nparams <span style=\"color:#e28964\">=</span> {<span style=\"color:#65b042\">'file'</span>: <span style=\"color:#65b042\">'kdnuggets-test.pdf'</span>}\r\n\r\n<span style=\"color:#aeaeae;font-style:italic\"># API call</span>\r\nresponse <span style=\"color:#e28964\">=</span> client.post_request(params, HODApps.EXTRACT_TEXT, <span style=\"color:#3e87e3\">async</span><span style=\"color:#e28964\">=</span><span style=\"color:#3387cc\">False</span>)\r\n\r\n<span style=\"color:#aeaeae;font-style:italic\"># Print only the content of the submitted file</span>\r\n<span style=\"color:#aeaeae;font-style:italic\"># Also includes other useful data</span>\r\n<span style=\"color:#e28964\">print</span> response[<span style=\"color:#65b042\">'document'</span>][<span style=\"color:#3387cc\">0</span>][<span style=\"color:#65b042\">'content'</span>]\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><b>Extracting Text From Word Documents</b></p>\n<p>Using the native Haven OnDemand API, cURL can be used to issue a POST request to the OnDemand platform:</p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\">curl -X POST --form \"file=@kdnuggets-test.docx\" --form \"extract_metadata=true\" --form \"extract_text=true\" --form \"extract_xmlattributes=false\" --form \"apikey=YOUR_API_KEY\" https://api.havenondemand.com/1/api/sync/extracttext/v1\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>This would result in the following (an excerpt):</p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\">{\r\n  \"document\": [\r\n    {\r\n      \"reference\": \"kdnuggets-test.docx\",\r\n      \"doc_iod_reference\": \"2d761859357918e41912e19cd4818165\",\r\n      \"content_type\": [\r\n        \"application/x-ms-word07\"\r\n      ],\r\n      \"document_attributes\": [\r\n        \"0\"\r\n      ],\r\n      \"file_size\": [\r\n        6267\r\n      ],\r\n      \"content\": \"Top /r/MachineLearning stories this month:\r\n\r\n            . . .\r\n\r\n            }\r\n    ],\r\n    \"md5sum\": [\r\n        \"050a4db634241c7057bfd7539f09366f\"\r\n    ]\r\n}\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>This functionality is achievable via the Python API using the same code excerpt as in the PDF text extraction example above, substituting for the appropriate Microsoft Word filename.</p>\n<p><b>Extracting Text From ZIP Archives</b></p>\n<p>Using the native Haven OnDemand API, cURL can be used to issue a POST request to the OnDemand platform:</p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\">curl -X POST --form \"file=@kdnuggets-test.zip\" --form \"extract_metadata=true\" --form \"extract_text=true\" --form \"extract_xmlattributes=false\" --form \"apikey=YOUR_API_KEY\" https://api.havenondemand.com/1/api/sync/extracttext/v1\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>This would result in the following (an excerpt):</p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\">{\r\n  \"document\": [\r\n    {\r\n      \"reference\": \"kdnuggets-test.zip\",\r\n      \"doc_iod_reference\": \"3573e81cca7695b998cbefc4098b112f\",\r\n      \"content_type\": [\r\n        \"application/zip\"\r\n      ],\r\n      \"document_attributes\": [\r\n        \"0\"\r\n      ],\r\n      \"file_size\": [\r\n        82375\r\n      ]\r\n    },\r\n    {\r\n      \"reference\": \"kdnuggets-test.zip:kdnuggets-test.docx\",\r\n      \"parent_iod_reference\": \"3573e81cca7695b998cbefc4098b112f\",\r\n      \"doc_iod_reference\": \"d636d9e2371bfd5ff370059ccae0619f\",\r\n\r\n      . . .\r\n\r\n    },\r\n    {\r\n      \"reference\": \"kdnuggets-test.zip:kdnuggets-test.pdf\",\r\n      \"parent_iod_reference\": \"3573e81cca7695b998cbefc4098b112f\",\r\n      \"doc_iod_reference\": \"1499d6bfd5621756de8965738b6cf5dc\",\r\n\r\n      . . .\r\n\r\n    }\r\n  ],\r\n  \"md5sum\": [\r\n    \"6c2f26f89baf9a629c45aebc3e4aa5a0\"\r\n  ]\r\n}\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>This functionality is achievable via the Python API using the same code excerpt as in the PDF text extraction example above, substituting for the appropriate ZIP archive filename.</p>\n<p>An alternate approach to accessing files within compressed archives would be to first extract the contents of the ZIP file (or any other type of container) using the <a href=\"https://dev.havenondemand.com/apis/expandcontainer#overview\">Expand Container API</a>, which then stores the files for processing by other APIs.</p>\n<p>This native API call:</p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\">curl -X POST --form \"file=@kdnuggets-test.zip\" --form \"apikey=YOUR_API_KEY\" https://api.havenondemand.com/1/api/sync/expandcontainer/v1\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>would produce the following result:</p>\n<div style=\"background:#000;width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"background:#000;color:#f8f8f8\">{\r\n  \"files\": [\r\n    {\r\n      \"name\": \"kdnuggets-test.docx\",\r\n      \"reference\": \"f8af1448-4b9f-406d-b03f-9b035716cf7f-14e78989\",\r\n      \"size\": 6267\r\n    },\r\n    {\r\n      \"name\": \"kdnuggets-test.pdf\",\r\n      \"reference\": \"76643f0f-de05-4bb0-9afc-979e96758f8c-14e78989\",\r\n      \"size\": 78519\r\n    }\r\n  ]\r\n}\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>These extracted files could then be processed in other APIs via their reference.</p>\n<p>HPE Haven OnDemand includes various connector APIs, which allow you to retrieve information from external systems and update it through the available APIs. Supported connector types include the <a href=\"https://dev.havenondemand.com/developer/docs/Connectors_Filesystem.html\">local filesystem</a>, <a href=\"https://dev.havenondemand.com/docs/Connectors_Web.html\">web resources</a>, <a href=\"https://dev.havenondemand.com/developer/docs/Connectors_Sharepoint.html\">SharePoint repositories</a>, and <a href=\"https://dev.havenondemand.com/docs/Connectors_Dropbox.html\">Dropbox accounts</a>. The connectors make it easy to incorporate data from across numerous systems into Haven OnDemand projects.</p>\n<p><img alt=\"Cheat sheet footer\" src=\"/wp-content/uploads/haven-ondemand-cheat-sheet-footer.jpg\" width=\"99%\"/></p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2016/06/build-your-own-audio-video-analytics-hpe-haven-ondemand-part-1.html\">Build Your Own Audio/Video Analytics App With HPE Haven OnDemand \u2013 Part 1</a>\n<li><a href=\"/2016/06/build-your-own-audio-video-analytics-hpe-haven-ondemand-part-2.html\">Build Your Own Audio/Video Analytics App With HPE Haven OnDemand \u2013 Part 2</a>\n<li><a href=\"/2016/02/hpe-machine-learning-60-apis-haven-ondemand.html\">Machine Learning at your fingertips \u2013 60+ free APIs, from HPE Haven OnDemand</a>\n</li></li></li></ul>\n<p><em>Note: the article was commissioned by HPE, but written by an independent KDnuggets expert.</em></p>\n</hr></div> ", "website": "kdnuggets"}