{"content": "comments By Firdaouss Doukkali , Machine Learning Engineer k-means demonstration from Wikipedia This article explains K-means algorithm in an easy way. I\u2019d like to start with an example to understand the objective of this powerful technique in machine learning before getting into the algorithm, which is quite simple. So imagine you have a set of numerical data of cancer tumors in 4 different stages from 1 to 4, and you need to study all the tumors in each stage. However, you have no idea how to identify the tumors that are at the same stage because nobody had the time to label the entire set of features (most data in the world are unlabeled).\u00a0In this case, you need K-means algorithm because it works on unlabeled numerical data and it will automatically and quickly group them together into 4 clusters. For this example, we chose k=4 because, we already know, we have 4 tumors\u2019 stages, but if we want to cluster them based on their structure, growth speed, or growth type, then maybe k will be different than 4. If you don\u2019t know how many groups you want, it\u2019s problematical, because K-means needs a specific number k of clusters in order to use it. So, the first lesson, whenever, you have to optimize and solve a problem, you should know your data and on what basis you want to group them. Then, you will be able to determine the number of clusters you need. But, most of the time, we really have no idea what the right number of clusters is, so no worries, there is a solution for it, that we will discuss it later in this post. \u00a0 k-means Algorithm \u00a0 Let\u2019s start with a visualization of a k-means algorithm (k=4). from\u00a0 K-means clustering , credit to Andrey A.\u00a0Shabalin As, you can see, k-means algorithm is composed of 3 steps: \u00a0 Step 1: Initialization The first thing k-means does, is\u00a0 randomly \u00a0choose K examples (data points) from the dataset (the 4 green points) as initial centroids and that\u2019s simply because it does not know yet where the center of each cluster is. (a centroid is the center of a cluster). \u00a0 Step 2: Cluster Assignment Then, all the data points that are the closest (similar) to a centroid will create a cluster. If we\u2019re using the Euclidean distance between data points and every centroid, a straight line is drawn between two centroids, then a perpendicular bisector (boundary line) divides this line into two clusters. from\u00a0 Introduction to Clustering and K-means Algorithm \u00a0 Step 3: Move the\u00a0centroid Now, we have new clusters, that need centers. A centroid\u2019s new value is going to be the mean of all the examples in a cluster. We\u2019ll keep repeating step 2 and 3 until the centroids stop moving, in other words, K-means algorithm is converged. Here is the k-means algorithm: from MIT 6.0002 lecture\u00a012 K-means is a fast and efficient method, because the complexity of one iteration is k*n*d where k (number of clusters), n (number of examples), and d (time of computing the Euclidian distance between 2 points). \u00a0 Then, how do we choose the number of clusters\u00a0k? In case, it is not clear, we try different values of k, we evaluate them and we choose the best k value. from MIT 6.0002 lecture\u00a012  \u00a0is the sum of all the variabilities of k clusters Variability \u00a0is the sum of all Euclidean distances between the centroid and each example in the cluster. Or you can take a small subset of your data, apply\u00a0 hierarchical clustering \u00a0on it (it\u2019s a slow clustering algorithm) to get an understanding of the data structure before choosing k by hand. Unlucky centroids: The blue and red stars are unlucky centroids\u00a0:(\u00a0. From MIT 6.0002 lecture\u00a012 Choosing poorly the random initial centroids will take longer to converge or get stuck on local optima which may result in bad clustering. in the picture above, the blue and red stars are unlucky centroids. There are two solutions: Distribute them over the space. Try different sets of random centroids, and choose the best set. References and readings: Lecture Slides and Files | Introduction to Computational Thinking and Data Science | Electrical\u2026 This section includes lecture notes for the class, including associated files. K-Means Algorithm - Stanford University | Coursera Machine learning is the science of getting computers to act without being explicitly programmed. In the past decade\u2026 \u00a0 Bio: Firdaouss Doukkali is a Machine Learning Engineer and Chief Unicorn Scientist. Global Shaper at World Economic Forum. English, French, German, Arabic, and Japanese speaker. Original . Reposted with permission. Related: The 5 Clustering Algorithms Data Scientists Need to Know Machine Learning Workflows in Python from Scratch Part 2: k-means Clustering Toward Increased k-means Clustering Efficiency with the Naive Sharding Centroid Initialization Method", "title_html": "<h1 id=\"title\">Clustering Using K-means Algorithm</h1> ", "url": "https://www.kdnuggets.com/2018/07/clustering-using-k-means-algorithm.html", "tfidf": {"tfidf": {"hand": 1.6152202665600002, "base": 1.14628158845, "relat": 1.23750876919, "label": 4.47715736041, "sum": 13.363636363639998, "pictur": 3.4953764861300005, "univers": 1.24889867841, "permiss": 6.280063291139999, "post": 2.23826307627, "here": 2.42307692308, "basi": 2.42122922068, "red": 4.44456886898, "visual": 5.22752716497, "new": 2.0357761108, "assign": 3.83663605607, "space": 2.39818731118, "what": 2.50686878256, "number": 6.60857499654, "boundari": 4.85801713586, "evalu": 6.9509632224199995, "than": 1.03278688525, "the": 46.0, "dataset": 193.609756098, "wikipedia": 40.5, "problem": 1.76674827509, "class": 2.11651779763, "arab": 6.39130434783, "python": 56.2978723404, "entir": 1.59365589239, "french": 2.11962616822, "bisector": 992.25, "nobodi": 15.5647058824, "each": 3.56924460432, "type": 2.0281042411900003, "toward": 1.6303142329, "know": 12.96635086575, "idea": 4.1861568886, "should": 1.6643254009900001, "automat": 6.787516032490001, "chose": 4.42105263158, "where": 2.13430127042, "chief": 2.41827875095, "complex": 2.34021226415, "andrey": 108.0, "creat": 1.2492917847, "drawn": 4.6030733546, "start": 2.53347163488, "whenev": 11.622254758399999, "shabalin": 992.25, "stage": 8.332764729039999, "articl": 2.01805008262, "how": 4.80750984153, "stanford": 12.6, "repost": 933.882352941, "them": 5.4938057997000005, "simpl": 3.3981164383599998, "keep": 2.04245465071, "bad": 3.3944836433599996, "increas": 1.32024948025, "explain": 2.60049140049, "initi": 5.4, "distribut": 2.7396031061299997, "converg": 30.5895953758, "mayb": 21.0557029178, "word": 1.7965372864099998, "stuck": 18.945107398599998, "abl": 1.8208510150200001, "refer": 1.30024570025, "had": 1.0475750577399998, "coursera": 992.25, "associ": 1.3263157894700002, "over": 1.02525024217, "scratch": 25.8146341463, "knum": 147.0, "similar": 1.37514075357, "but": 2.03264835798, "demonstr": 2.64997496244, "speed": 3.8703071672400005, "need": 8.62357414446, "togeth": 1.58095996813, "there": 2.08182533438, "electrical\u2026": 992.25, "scienc": 4.63939216832, "object": 2.3488681757700003, "point": 6.2995000397, "num": 22.00693088022, "best": 3.1657028913200005, "origin": 1.13724928367, "right": 1.4054532577899999, "have": 6.089369046839999, "star": 4.890189434780001, "take": 2.27923336444, "lesson": 8.66593886463, "now": 1.160780873, "tri": 3.7089125102199993, "green": 2.63065451533, "shaper": 882.0, "see": 1.27242125511, "quit": 2.8849718335500003, "slow": 4.04793472718, "realli": 4.7476076555, "power": 1.3396337861799998, "numer": 3.66651270208, "optim": 11.5377906977, "mani": 1.04426757877, "global": 3.30612244898, "mean": 1.44906900329, "unlabel": 1984.5, "not": 2.03134796238, "will": 7.34886591576, "growth": 6.30125024806, "kmean": 15876.0, "may": 1.05201775893, "solut": 9.4556283502, "past": 2.01702452039, "specif": 1.8719490626099997, "quick": 2.205, "easi": 5.2937645882, "compos": 2.5060773480700003, "want": 5.99094339624, "english": 1.7432744043000001, "line": 4.254779346089999, "centroid": 11907.0, "act": 1.4318181818200002, "blue": 6.14039837556, "howev": 1.0945191313299998, "cancer": 8.01009081736, "choos": 25.073966833380002, "determin": 2.1658935879900003, "optima": 690.260869565, "section": 2.1284354471099998, "which": 2.01038369, "like": 1.14918566775, "featur": 1.52712581762, "problemat": 16.503118503099998, "alreadi": 1.9551724137900002, "other": 1.00992366412, "appli": 2.2972073506, "techniqu": 3.7293868921800004, "algorithm": 335.4084507048, "one": 1.00627495722, "until": 1.14852058164, "valu": 6.833285509320001, "order": 1.24625166811, "perpendicular": 44.7211267606, "becaus": 6.897110998499999, "explicit": 5.819648093840001, "closest": 8.73747936159, "get": 7.1425036554, "random": 21.5706521739, "without": 1.29547123623, "fast": 4.8729281768, "small": 1.3594793629, "imagin": 6.598503740650001, "file": 7.542042755339999, "firdaouss": 1984.5, "part": 1.04330682789, "subset": 27.3253012048, "yet": 2.1258703802900003, "euclidean": 220.5, "structur": 4.1161524500999995, "understand": 5.93717277486, "repeat": 2.8771293947099994, "shard": 122.123076923, "set": 4.74831763124, "simpli": 2.5192002538900002, "two": 3.04137931035, "divid": 2.3169877408099997, "time": 3.03382381044, "from": 9.00510493473, "engin": 4.94271481942, "worri": 10.302401038300001, "work": 1.11520089913, "differ": 4.946179609, "variabl": 17.494214876039997, "same": 1.11857958148, "most": 2.04192926046, "between": 4.13814674832, "studi": 1.53184098804, "everi": 1.47917637194, "for": 3.00094512003, "slide": 15.1056137012, "credit": 3.04312823462, "all": 5.05733944955, "world": 2.22680412372, "with": 4.004792835959999, "econom": 2.26735218509, "unlucki": 535.146067416, "are": 6.17943561468, "includ": 2.0381282495599997, "poor": 2.42196796339, "solv": 7.26923076923, "case": 2.96997474512, "distanc": 10.426444833629999, "result": 1.14611608432, "lectur": 32.924097884700004, "cluster": 300.0188976384, "and": 21.001322834729997, "euclidian": 992.25, "discuss": 2.19676214197, "forum": 8.27737226277, "think": 2.90715986083, "center": 5.22695346795, "doukkali": 1984.5, "later": 1.08650424309, "befor": 2.20072082062, "comment": 3.05954904606, "iter": 37.4433962264, "then": 5.432893025799999, "group": 3.62990625714, "doe": 3.4116256581, "can": 2.35252278284, "straight": 6.203985932, "comput": 11.783275606140002, "way": 1.2190739461, "naiv": 50.2405063291, "introduct": 5.561744613759999, "their": 1.01547908405, "german": 2.22914911542, "unicorn": 117.6, "this": 7.02655538697, "thing": 2.4065484311099996, "step": 14.139650872799997, "longer": 2.02319357716, "read": 2.3149606299200003, "move": 2.58251321676, "effici": 10.18671799808, "data": 37.14079115274, "note": 1.42449528937, "method": 5.1428571428600005, "scientist": 9.38852749852, "machin": 20.121673003799998, "into": 3.04507384437, "bio": 42.336000000000006, "exampl": 9.02900473932, "that": 5.01992031875, "abov": 1.90382539873, "identifi": 2.30187037843, "speaker": 6.35294117647, "tumor": 230.9236363636, "first": 2.01523229246, "knd": 992.25, "local": 1.51720183486, "let": 3.48616600791, "use": 2.0592775147599998, "workflow": 369.209302326, "program": 2.02139037433, "clear": 1.85423966363, "japanes": 4.28155339806, "learn": 11.61375274325, "decade\u2026": 992.25, "stop": 2.1783754116400003, "hierarch": 30.24}, "logtfidf": {"hand": 0.479471335336, "base": 0.13652330228700002, "relat": 0.21310030165399999, "label": 1.49898832727, "sum": 3.79878026684, "pictur": 1.25144109124, "univers": 0.222262105686, "permiss": 1.8373800586400002, "post": 0.8057001527009999, "here": 0.8850381883700001, "basi": 0.884275353639, "red": 1.597071382694, "visual": 1.6539383488600001, "new": 0.0354598937022, "assign": 1.3445959556, "space": 0.874713164972, "what": 0.451774593654, "number": 0.5796514705116, "boundari": 1.58063035792, "evalu": 1.9388802431299998, "than": 0.0322608622182, "the": 0.0, "dataset": 5.26584456664, "wikipedia": 3.70130197411, "problem": 0.569140724273, "class": 0.7497721899330001, "arab": 1.85493837085, "python": 4.03065674296, "entir": 0.46603068026999994, "french": 0.751239737392, "bisector": 6.89997509166, "nobodi": 2.7450059076200004, "each": 0.521225067912, "type": 0.707101485387, "toward": 0.48877277716000006, "know": 4.764598471989999, "idea": 1.47727184424, "should": 0.509419876758, "automat": 1.9150850473199998, "chose": 1.48637781968, "where": 0.1299842774914, "chief": 0.883056027166, "complex": 0.8502416364309999, "andrey": 4.682131227119999, "creat": 0.222576818514, "drawn": 1.52672420097, "start": 0.472886738582, "whenev": 2.45292177377, "shabalin": 6.89997509166, "stage": 2.935603760948, "articl": 0.702131739574, "how": 1.4147008707900002, "stanford": 2.53369681396, "repost": 6.83935046985, "them": 0.47091663454649996, "simpl": 1.2232212893899999, "keep": 0.7141523446729999, "bad": 1.2221516561799999, "increas": 0.277820718929, "explain": 0.955700427358, "initi": 1.2004183698, "distribut": 1.00781305813, "converg": 5.455025500360001, "mayb": 3.0471714458899997, "word": 0.585861082385, "stuck": 2.94154571342, "abl": 0.599303982475, "refer": 0.262553246798, "had": 0.0464780244111, "coursera": 6.89997509166, "associ": 0.28240501535100004, "over": 0.0249367214957, "scratch": 3.2509415461, "knum": 8.594570812439999, "similar": 0.318556092114, "but": 0.0323847441438, "demonstr": 0.9745501918189999, "speed": 1.3533338752700002, "need": 2.176440980652, "togeth": 0.458032237308, "there": 0.080195785851, "electrical\u2026": 6.89997509166, "scienc": 1.682872357782, "object": 0.853933584803, "point": 1.155161795165, "num": 0.006929788698734001, "best": 0.918455865894, "origin": 0.128612437587, "right": 0.34035985417, "have": 0.0887100140472, "star": 1.7881677227880002, "take": 0.261383924394, "lesson": 2.1594002686700002, "now": 0.149092945021, "tri": 1.23518305832, "green": 0.9672326803710001, "shaper": 6.7821920560099995, "see": 0.240921585492, "quit": 1.05951513684, "slow": 1.39820680715, "realli": 1.5576408397, "power": 0.292396282715, "numer": 1.212187624692, "optim": 2.4456277954099996, "mani": 0.0433157581221, "global": 1.1957760371200001, "mean": 0.37092128352, "unlabel": 13.79995018332, "not": 0.031104826015, "will": 1.2167192094900001, "growth": 2.2952017704400003, "kmean": 110.39960146656, "may": 0.050709995284400004, "solut": 3.10692595254, "past": 0.7016234157610001, "specif": 0.626980167541, "quick": 0.790727508899, "easi": 1.6665296351499999, "compos": 0.918718721148, "want": 2.0749098187649997, "english": 0.555765186335, "line": 1.048291843356, "centroid": 100.15247310525, "act": 0.358945092473, "blue": 2.2434848830200003, "howev": 0.0903151173475, "cancer": 2.08070209901, "choos": 8.58042396432, "determin": 0.772833019022, "optima": 6.5370695979699995, "section": 0.755387177948, "which": 0.01035682769086, "like": 0.139053576545, "featur": 0.423387418142, "problemat": 2.80354936324, "alreadi": 0.670478380747, "other": 0.00987474791976, "appli": 0.8316941898119999, "techniqu": 1.31624384807, "algorithm": 39.96530874216, "one": 0.0062553516455, "until": 0.138474663439, "valu": 2.469579930444, "order": 0.22014038079300002, "perpendicular": 3.8004460244300002, "becaus": 0.83605895295, "explicit": 1.7612397949400003, "closest": 2.16762174551, "get": 2.319076023128, "random": 5.9181642195299995, "without": 0.258874517941, "fast": 1.5836950247400001, "small": 0.307101805059, "imagin": 1.88684291737, "file": 2.65469177446, "firdaouss": 13.79995018332, "part": 0.04239531098280001, "subset": 3.3078130570499997, "yet": 0.754181309241, "euclidean": 9.40550102866, "structur": 1.4435433502700001, "understand": 2.1761717513599996, "repeat": 1.0567930591299999, "shard": 4.80502936345, "set": 0.685984045156, "simpli": 0.923941491586, "two": 0.041096533074600004, "divid": 0.8402679544589999, "time": 0.0336345565878, "from": 0.005103487519794, "engin": 1.809535116552, "worri": 2.3323769785799997, "work": 0.109034567273, "differ": 0.849284485248, "variabl": 4.3374461344, "same": 0.112059649604, "most": 0.041495792591199995, "between": 0.13581472466119998, "studi": 0.426470272221, "everi": 0.391485427421, "for": 0.0009449711861910001, "slide": 2.7150664430299996, "credit": 1.11288601088, "all": 0.057013160488999994, "world": 0.214840497242, "with": 0.00478996685356, "econom": 0.818612712388, "unlucki": 15.551782332510001, "are": 0.17680484149620002, "includ": 0.037769362781, "poor": 0.8845804177050001, "solv": 1.9836504770400003, "case": 0.790812537778, "distanc": 3.73719918771, "result": 0.136378908381, "lectur": 9.423834678599999, "cluster": 60.6189992268, "and": 0.0013227929833356, "euclidian": 6.89997509166, "discuss": 0.78698452262, "forum": 2.1135255584599997, "think": 1.06717661175, "center": 1.665648926328, "doukkali": 13.79995018332, "later": 0.0829654259878, "befor": 0.191275543759, "comment": 1.11826753454, "iter": 3.62283035867, "then": 0.4151693261545, "group": 0.5717836043910001, "doe": 1.0680834594339998, "can": 0.324682192788, "straight": 1.82519197774, "comput": 4.104206747819999, "way": 0.19809150993500002, "naiv": 3.9168216003199996, "introduct": 2.04552931588, "their": 0.015360505122700001, "german": 0.8016199500650001, "unicorn": 4.76728903546, "this": 0.026505143367499998, "thing": 0.8781935346799999, "step": 5.1977252849, "longer": 0.7046772417749999, "read": 0.83939268088, "move": 0.511231718506, "effici": 3.25587506828, "data": 13.3850264328, "note": 0.353817568083, "method": 1.888923217682, "scientist": 3.09268256888, "machin": 6.9617979031, "into": 0.0447385896861, "bio": 3.7456377879300002, "exampl": 2.4520960499939997, "that": 0.019880741898199997, "abov": 0.643865229816, "identifi": 0.833722000472, "speaker": 1.8489178830700002, "tumor": 16.22317086496, "first": 0.015174579624319999, "knd": 6.89997509166, "local": 0.416867740206, "let": 1.2488025672799998, "use": 0.0584160394632, "workflow": 5.91136369821, "program": 0.7037855787649999, "clear": 0.617474727198, "japanes": 1.45431588722, "learn": 4.213760323724999, "decade\u2026": 6.89997509166, "stop": 0.778579374963, "hierarch": 3.4091655513099997}, "logidf": {"hand": 0.479471335336, "base": 0.13652330228700002, "relat": 0.21310030165399999, "label": 1.49898832727, "sum": 1.89939013342, "pictur": 1.25144109124, "univers": 0.222262105686, "permiss": 1.8373800586400002, "post": 0.8057001527009999, "here": 0.8850381883700001, "basi": 0.884275353639, "red": 0.798535691347, "visual": 1.6539383488600001, "new": 0.0177299468511, "assign": 1.3445959556, "space": 0.874713164972, "what": 0.225887296827, "number": 0.0966085784186, "boundari": 1.58063035792, "evalu": 1.9388802431299998, "than": 0.0322608622182, "the": 0.0, "dataset": 5.26584456664, "wikipedia": 3.70130197411, "problem": 0.569140724273, "class": 0.7497721899330001, "arab": 1.85493837085, "python": 4.03065674296, "entir": 0.46603068026999994, "french": 0.751239737392, "bisector": 6.89997509166, "nobodi": 2.7450059076200004, "each": 0.173741689304, "type": 0.707101485387, "toward": 0.48877277716000006, "know": 0.952919694398, "idea": 0.73863592212, "should": 0.509419876758, "automat": 1.9150850473199998, "chose": 1.48637781968, "where": 0.0649921387457, "chief": 0.883056027166, "complex": 0.8502416364309999, "andrey": 4.682131227119999, "creat": 0.222576818514, "drawn": 1.52672420097, "start": 0.236443369291, "whenev": 2.45292177377, "shabalin": 6.89997509166, "stage": 0.733900940237, "articl": 0.702131739574, "how": 0.47156695693000006, "stanford": 2.53369681396, "repost": 6.83935046985, "them": 0.0941833269093, "simpl": 1.2232212893899999, "keep": 0.7141523446729999, "bad": 1.2221516561799999, "increas": 0.277820718929, "explain": 0.955700427358, "initi": 0.30010459245, "distribut": 1.00781305813, "converg": 2.7275127501800003, "mayb": 3.0471714458899997, "word": 0.585861082385, "stuck": 2.94154571342, "abl": 0.599303982475, "refer": 0.262553246798, "had": 0.0464780244111, "coursera": 6.89997509166, "associ": 0.28240501535100004, "over": 0.0249367214957, "scratch": 3.2509415461, "knum": 4.297285406219999, "similar": 0.318556092114, "but": 0.0161923720719, "demonstr": 0.9745501918189999, "speed": 1.3533338752700002, "need": 0.362740163442, "togeth": 0.458032237308, "there": 0.0400978929255, "electrical\u2026": 6.89997509166, "scienc": 0.841436178891, "object": 0.853933584803, "point": 0.23103235903299998, "num": 0.00031499039539700004, "best": 0.459227932947, "origin": 0.128612437587, "right": 0.34035985417, "have": 0.0147850023412, "star": 0.8940838613940001, "take": 0.130691962197, "lesson": 2.1594002686700002, "now": 0.149092945021, "tri": 0.61759152916, "green": 0.9672326803710001, "shaper": 6.7821920560099995, "see": 0.240921585492, "quit": 1.05951513684, "slow": 1.39820680715, "realli": 1.5576408397, "power": 0.292396282715, "numer": 0.606093812346, "optim": 2.4456277954099996, "mani": 0.0433157581221, "global": 1.1957760371200001, "mean": 0.37092128352, "unlabel": 6.89997509166, "not": 0.0155524130075, "will": 0.202786534915, "growth": 1.1476008852200001, "kmean": 6.89997509166, "may": 0.050709995284400004, "solut": 1.55346297627, "past": 0.7016234157610001, "specif": 0.626980167541, "quick": 0.790727508899, "easi": 1.6665296351499999, "compos": 0.918718721148, "want": 0.6916366062549999, "english": 0.555765186335, "line": 0.349430614452, "centroid": 6.676831540349999, "act": 0.358945092473, "blue": 1.1217424415100001, "howev": 0.0903151173475, "cancer": 2.08070209901, "choos": 1.43007066072, "determin": 0.772833019022, "optima": 6.5370695979699995, "section": 0.755387177948, "which": 0.00517841384543, "like": 0.139053576545, "featur": 0.423387418142, "problemat": 2.80354936324, "alreadi": 0.670478380747, "other": 0.00987474791976, "appli": 0.8316941898119999, "techniqu": 1.31624384807, "algorithm": 3.33044239518, "one": 0.0062553516455, "until": 0.138474663439, "valu": 0.823193310148, "order": 0.22014038079300002, "perpendicular": 3.8004460244300002, "becaus": 0.139343158825, "explicit": 1.7612397949400003, "closest": 2.16762174551, "get": 0.579769005782, "random": 1.9727214065099998, "without": 0.258874517941, "fast": 1.5836950247400001, "small": 0.307101805059, "imagin": 1.88684291737, "file": 1.32734588723, "firdaouss": 6.89997509166, "part": 0.04239531098280001, "subset": 3.3078130570499997, "yet": 0.754181309241, "euclidean": 4.70275051433, "structur": 0.7217716751350001, "understand": 1.0880858756799998, "repeat": 1.0567930591299999, "shard": 4.80502936345, "set": 0.171496011289, "simpli": 0.923941491586, "two": 0.0136988443582, "divid": 0.8402679544589999, "time": 0.0112115188626, "from": 0.000567054168866, "engin": 0.904767558276, "worri": 2.3323769785799997, "work": 0.109034567273, "differ": 0.212321121312, "variabl": 2.1687230672, "same": 0.112059649604, "most": 0.020747896295599998, "between": 0.033953681165299995, "studi": 0.426470272221, "everi": 0.391485427421, "for": 0.00031499039539700004, "slide": 2.7150664430299996, "credit": 1.11288601088, "all": 0.011402632097799998, "world": 0.107420248621, "with": 0.00119749171339, "econom": 0.818612712388, "unlucki": 5.18392744417, "are": 0.0294674735827, "includ": 0.0188846813905, "poor": 0.8845804177050001, "solv": 1.9836504770400003, "case": 0.395406268889, "distanc": 1.24573306257, "result": 0.136378908381, "lectur": 1.8847669357199999, "cluster": 2.52579163445, "and": 6.29901420636e-05, "euclidian": 6.89997509166, "discuss": 0.78698452262, "forum": 2.1135255584599997, "think": 1.06717661175, "center": 0.555216308776, "doukkali": 6.89997509166, "later": 0.0829654259878, "befor": 0.0956377718795, "comment": 1.11826753454, "iter": 3.62283035867, "then": 0.08303386523089999, "group": 0.190594534797, "doe": 0.5340417297169999, "can": 0.162341096394, "straight": 1.82519197774, "comput": 1.36806891594, "way": 0.19809150993500002, "naiv": 3.9168216003199996, "introduct": 1.02276465794, "their": 0.015360505122700001, "german": 0.8016199500650001, "unicorn": 4.76728903546, "this": 0.0037864490525, "thing": 0.8781935346799999, "step": 1.03954505698, "longer": 0.7046772417749999, "read": 0.83939268088, "move": 0.255615859253, "effici": 1.62793753414, "data": 1.2168205848, "note": 0.353817568083, "method": 0.944461608841, "scientist": 1.54634128444, "machin": 1.39235958062, "into": 0.0149128632287, "bio": 3.7456377879300002, "exampl": 0.40868267499899996, "that": 0.00397614837964, "abov": 0.643865229816, "identifi": 0.833722000472, "speaker": 1.8489178830700002, "tumor": 4.05579271624, "first": 0.0075872898121599995, "knd": 6.89997509166, "local": 0.416867740206, "let": 1.2488025672799998, "use": 0.0292080197316, "workflow": 5.91136369821, "program": 0.7037855787649999, "clear": 0.617474727198, "japanes": 1.45431588722, "learn": 0.842752064745, "decade\u2026": 6.89997509166, "stop": 0.778579374963, "hierarch": 3.4091655513099997}, "freq": {"hand": 1, "base": 1, "relat": 1, "label": 1, "sum": 2, "pictur": 1, "univers": 1, "permiss": 1, "post": 1, "here": 1, "basi": 1, "red": 2, "visual": 1, "new": 2, "assign": 1, "space": 1, "what": 2, "number": 6, "boundari": 1, "evalu": 1, "than": 1, "the": 46, "dataset": 1, "wikipedia": 1, "problem": 1, "class": 1, "arab": 1, "python": 1, "entir": 1, "french": 1, "bisector": 1, "nobodi": 1, "each": 3, "type": 1, "toward": 1, "know": 5, "idea": 2, "should": 1, "automat": 1, "chose": 1, "where": 2, "chief": 1, "complex": 1, "andrey": 1, "creat": 1, "drawn": 1, "start": 2, "whenev": 1, "shabalin": 1, "stage": 4, "articl": 1, "how": 3, "stanford": 1, "repost": 1, "them": 5, "simpl": 1, "keep": 1, "bad": 1, "increas": 1, "explain": 1, "initi": 4, "distribut": 1, "converg": 2, "mayb": 1, "word": 1, "stuck": 1, "abl": 1, "refer": 1, "had": 1, "coursera": 1, "associ": 1, "over": 1, "scratch": 1, "knum": 2, "similar": 1, "but": 2, "demonstr": 1, "speed": 1, "need": 6, "togeth": 1, "there": 2, "electrical\u2026": 1, "scienc": 2, "object": 1, "point": 5, "num": 22, "best": 2, "origin": 1, "right": 1, "have": 6, "star": 2, "take": 2, "lesson": 1, "now": 1, "tri": 2, "green": 1, "shaper": 1, "see": 1, "quit": 1, "slow": 1, "realli": 1, "power": 1, "numer": 2, "optim": 1, "mani": 1, "global": 1, "mean": 1, "unlabel": 2, "not": 2, "will": 6, "growth": 2, "kmean": 16, "may": 1, "solut": 2, "past": 1, "specif": 1, "quick": 1, "easi": 1, "compos": 1, "want": 3, "english": 1, "line": 3, "centroid": 15, "act": 1, "blue": 2, "howev": 1, "cancer": 1, "choos": 6, "determin": 1, "optima": 1, "section": 1, "which": 2, "like": 1, "featur": 1, "problemat": 1, "alreadi": 1, "other": 1, "appli": 1, "techniqu": 1, "algorithm": 12, "one": 1, "until": 1, "valu": 3, "order": 1, "perpendicular": 1, "becaus": 6, "explicit": 1, "closest": 1, "get": 4, "random": 3, "without": 1, "fast": 1, "small": 1, "imagin": 1, "file": 2, "firdaouss": 2, "part": 1, "subset": 1, "yet": 1, "euclidean": 2, "structur": 2, "understand": 2, "repeat": 1, "shard": 1, "set": 4, "simpli": 1, "two": 3, "divid": 1, "time": 3, "from": 9, "engin": 2, "worri": 1, "work": 1, "differ": 4, "variabl": 2, "same": 1, "most": 2, "between": 4, "studi": 1, "everi": 1, "for": 3, "slide": 1, "credit": 1, "all": 5, "world": 2, "with": 4, "econom": 1, "unlucki": 3, "are": 6, "includ": 2, "poor": 1, "solv": 1, "case": 2, "distanc": 3, "result": 1, "lectur": 5, "cluster": 24, "and": 21, "euclidian": 1, "discuss": 1, "forum": 1, "think": 1, "center": 3, "doukkali": 2, "later": 1, "befor": 2, "comment": 1, "iter": 1, "then": 5, "group": 3, "doe": 2, "can": 2, "straight": 1, "comput": 3, "way": 1, "naiv": 1, "introduct": 2, "their": 1, "german": 1, "unicorn": 1, "this": 7, "thing": 1, "step": 5, "longer": 1, "read": 1, "move": 2, "effici": 2, "data": 11, "note": 1, "method": 2, "scientist": 2, "machin": 5, "into": 3, "bio": 1, "exampl": 6, "that": 5, "abov": 1, "identifi": 1, "speaker": 1, "tumor": 4, "first": 2, "knd": 1, "local": 1, "let": 1, "use": 2, "workflow": 1, "program": 1, "clear": 1, "japanes": 1, "learn": 5, "decade\u2026": 1, "stop": 1, "hierarch": 1}, "idf": {"hand": 1.6152202665600002, "base": 1.14628158845, "relat": 1.23750876919, "label": 4.47715736041, "sum": 6.681818181819999, "pictur": 3.4953764861300005, "univers": 1.24889867841, "permiss": 6.280063291139999, "post": 2.23826307627, "here": 2.42307692308, "basi": 2.42122922068, "red": 2.22228443449, "visual": 5.22752716497, "new": 1.0178880554, "assign": 3.83663605607, "space": 2.39818731118, "what": 1.25343439128, "number": 1.10142916609, "boundari": 4.85801713586, "evalu": 6.9509632224199995, "than": 1.03278688525, "the": 1.0, "dataset": 193.609756098, "wikipedia": 40.5, "problem": 1.76674827509, "class": 2.11651779763, "arab": 6.39130434783, "python": 56.2978723404, "entir": 1.59365589239, "french": 2.11962616822, "bisector": 992.25, "nobodi": 15.5647058824, "each": 1.18974820144, "type": 2.0281042411900003, "toward": 1.6303142329, "know": 2.59327017315, "idea": 2.0930784443, "should": 1.6643254009900001, "automat": 6.787516032490001, "chose": 4.42105263158, "where": 1.06715063521, "chief": 2.41827875095, "complex": 2.34021226415, "andrey": 108.0, "creat": 1.2492917847, "drawn": 4.6030733546, "start": 1.26673581744, "whenev": 11.622254758399999, "shabalin": 992.25, "stage": 2.0831911822599998, "articl": 2.01805008262, "how": 1.60250328051, "stanford": 12.6, "repost": 933.882352941, "them": 1.09876115994, "simpl": 3.3981164383599998, "keep": 2.04245465071, "bad": 3.3944836433599996, "increas": 1.32024948025, "explain": 2.60049140049, "initi": 1.35, "distribut": 2.7396031061299997, "converg": 15.2947976879, "mayb": 21.0557029178, "word": 1.7965372864099998, "stuck": 18.945107398599998, "abl": 1.8208510150200001, "refer": 1.30024570025, "had": 1.0475750577399998, "coursera": 992.25, "associ": 1.3263157894700002, "over": 1.02525024217, "scratch": 25.8146341463, "knum": 73.5, "similar": 1.37514075357, "but": 1.01632417899, "demonstr": 2.64997496244, "speed": 3.8703071672400005, "need": 1.4372623574099999, "togeth": 1.58095996813, "there": 1.04091266719, "electrical\u2026": 992.25, "scienc": 2.31969608416, "object": 2.3488681757700003, "point": 1.25990000794, "num": 1.00031504001, "best": 1.5828514456600002, "origin": 1.13724928367, "right": 1.4054532577899999, "have": 1.0148948411399998, "star": 2.4450947173900004, "take": 1.13961668222, "lesson": 8.66593886463, "now": 1.160780873, "tri": 1.8544562551099997, "green": 2.63065451533, "shaper": 882.0, "see": 1.27242125511, "quit": 2.8849718335500003, "slow": 4.04793472718, "realli": 4.7476076555, "power": 1.3396337861799998, "numer": 1.83325635104, "optim": 11.5377906977, "mani": 1.04426757877, "global": 3.30612244898, "mean": 1.44906900329, "unlabel": 992.25, "not": 1.01567398119, "will": 1.22481098596, "growth": 3.15062512403, "kmean": 992.25, "may": 1.05201775893, "solut": 4.7278141751, "past": 2.01702452039, "specif": 1.8719490626099997, "quick": 2.205, "easi": 5.2937645882, "compos": 2.5060773480700003, "want": 1.99698113208, "english": 1.7432744043000001, "line": 1.4182597820299998, "centroid": 793.8, "act": 1.4318181818200002, "blue": 3.07019918778, "howev": 1.0945191313299998, "cancer": 8.01009081736, "choos": 4.17899447223, "determin": 2.1658935879900003, "optima": 690.260869565, "section": 2.1284354471099998, "which": 1.005191845, "like": 1.14918566775, "featur": 1.52712581762, "problemat": 16.503118503099998, "alreadi": 1.9551724137900002, "other": 1.00992366412, "appli": 2.2972073506, "techniqu": 3.7293868921800004, "algorithm": 27.9507042254, "one": 1.00627495722, "until": 1.14852058164, "valu": 2.2777618364400003, "order": 1.24625166811, "perpendicular": 44.7211267606, "becaus": 1.1495184997499999, "explicit": 5.819648093840001, "closest": 8.73747936159, "get": 1.78562591385, "random": 7.1902173913, "without": 1.29547123623, "fast": 4.8729281768, "small": 1.3594793629, "imagin": 6.598503740650001, "file": 3.7710213776699995, "firdaouss": 992.25, "part": 1.04330682789, "subset": 27.3253012048, "yet": 2.1258703802900003, "euclidean": 110.25, "structur": 2.0580762250499998, "understand": 2.96858638743, "repeat": 2.8771293947099994, "shard": 122.123076923, "set": 1.18707940781, "simpli": 2.5192002538900002, "two": 1.01379310345, "divid": 2.3169877408099997, "time": 1.01127460348, "from": 1.00056721497, "engin": 2.47135740971, "worri": 10.302401038300001, "work": 1.11520089913, "differ": 1.23654490225, "variabl": 8.747107438019999, "same": 1.11857958148, "most": 1.02096463023, "between": 1.03453668708, "studi": 1.53184098804, "everi": 1.47917637194, "for": 1.00031504001, "slide": 15.1056137012, "credit": 3.04312823462, "all": 1.01146788991, "world": 1.11340206186, "with": 1.0011982089899998, "econom": 2.26735218509, "unlucki": 178.38202247200002, "are": 1.02990593578, "includ": 1.0190641247799999, "poor": 2.42196796339, "solv": 7.26923076923, "case": 1.48498737256, "distanc": 3.4754816112099998, "result": 1.14611608432, "lectur": 6.58481957694, "cluster": 12.5007874016, "and": 1.00006299213, "euclidian": 992.25, "discuss": 2.19676214197, "forum": 8.27737226277, "think": 2.90715986083, "center": 1.7423178226499998, "doukkali": 992.25, "later": 1.08650424309, "befor": 1.10036041031, "comment": 3.05954904606, "iter": 37.4433962264, "then": 1.08657860516, "group": 1.20996875238, "doe": 1.70581282905, "can": 1.17626139142, "straight": 6.203985932, "comput": 3.9277585353800006, "way": 1.2190739461, "naiv": 50.2405063291, "introduct": 2.7808723068799996, "their": 1.01547908405, "german": 2.22914911542, "unicorn": 117.6, "this": 1.00379362671, "thing": 2.4065484311099996, "step": 2.8279301745599996, "longer": 2.02319357716, "read": 2.3149606299200003, "move": 1.29125660838, "effici": 5.09335899904, "data": 3.37643555934, "note": 1.42449528937, "method": 2.5714285714300003, "scientist": 4.69426374926, "machin": 4.02433460076, "into": 1.01502461479, "bio": 42.336000000000006, "exampl": 1.50483412322, "that": 1.00398406375, "abov": 1.90382539873, "identifi": 2.30187037843, "speaker": 6.35294117647, "tumor": 57.7309090909, "first": 1.00761614623, "knd": 992.25, "local": 1.51720183486, "let": 3.48616600791, "use": 1.0296387573799999, "workflow": 369.209302326, "program": 2.02139037433, "clear": 1.85423966363, "japanes": 4.28155339806, "learn": 2.32275054865, "decade\u2026": 992.25, "stop": 2.1783754116400003, "hierarch": 30.24}}, "html": "<!DOCTYPE html>\n\n<html lang=\"en-US\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head profile=\"http://gmpg.org/xfn/11\">\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n<title>  Clustering Using K-means Algorithm</title>\n<link href=\"/wp-content/themes/kdn17/images/favicon.ico\" rel=\"shortcut icon\"/>\n<link href=\"/wp-content/themes/kdn17/style.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"/wp-content/themes/kdn17/js/jquery-1.9.1.min.js\" type=\"text/javascript\"></script>\n<script src=\"/aps/kda_all.js\" type=\"text/javascript\"></script>\n<link href=\"/feed/\" rel=\"alternate\" title=\"KDnuggets: Analytics, Big Data, Data Mining and Data Science Feed\" type=\"application/rss+xml\"/>\n<link href=\"//s.w.org\" rel=\"dns-prefetch\"/>\n<link href=\"https://www.kdnuggets.com/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/comments/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/2018/07/clustering-using-k-means-algorithm.html/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Clustering Using K-means Algorithm Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-json/\" rel=\"https://api.w.org/\"/>\n<link href=\"https://www.kdnuggets.com/xmlrpc.php?rsd\" rel=\"EditURI\" title=\"RSD\" type=\"application/rsd+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-includes/wlwmanifest.xml\" rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\"/>\n<link href=\"https://www.kdnuggets.com/jobs/18/07-18-charles-river-analytics-software-engineer-intelligent-systems.html\" rel=\"prev\" title=\"Charles River Analytics: Software Engineer I \u2013 Intelligent Systems\"/>\n<link href=\"https://www.kdnuggets.com/2018/07/5-quick-easy-data-visualizations-python-code.html\" rel=\"next\" title=\"5 Quick and Easy Data Visualizations in Python with Code\"/>\n<meta content=\"WordPress 4.9.10\" name=\"generator\">\n<link href=\"https://www.kdnuggets.com/2018/07/clustering-using-k-means-algorithm.html\" rel=\"canonical\"/>\n<link href=\"https://www.kdnuggets.com/?p=82594\" rel=\"shortlink\"/>\n<link href=\"https://www.kdnuggets.com/2018/07/clustering-using-k-means-algorithm.html\" rel=\"canonical\"/>\n<!-- BEGIN ExactMetrics v5.3.7 Universal Analytics - https://exactmetrics.com/ -->\n<script>\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-361129-1', 'auto');\n  ga('send', 'pageview');\n</script>\n<!-- END ExactMetrics Universal Analytics -->\n</meta></head>\n<body class=\"post-template-default single single-post postid-82594 single-format-standard\">\n<div class=\"main_wrapper\"><!-- publ: 18-Jul, 2018  -->\n<div id=\"wrapper\">\n<div id=\"header\">\n<div id=\"header_log\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<h1>KDnuggets</h1>\n<div class=\"text-container\">\n            \u00a0\u00a0<a href=\"/news/subscribe.html\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a> \u00a0|\n <a href=\"https://twitter.com/kdnuggets\" target=\"_blank\"><img alt=\"Twitter\" height=\"48\" src=\"/images/tw_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n <a href=\"https://www.facebook.com/kdnuggets\" target=\"_blank\"><img alt=\"Facebook\" height=\"48\" src=\"/images/fb_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n<a href=\"https://www.linkedin.com/groups/54257/\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"48\" src=\"/images/in_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \n\u00a0|\u00a0 <a href=\"/contact.html\"><b>Contact</b></a>\n</div>\n</div>\n<div class=\"search\">\n<form action=\"/\" id=\"searchform\" method=\"get\">\n<input id=\"s\" name=\"s\" placeholder=\"search KDnuggets\" type=\"text\" value=\"\"/>\n<input type=\"submit\" value=\"Search\"/></form>\n</div>\n<div href=\"#\" id=\"pull\">\n<img class=\"menu\" src=\"/images/menu-30.png\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<img class=\"search-icon\" src=\"/images/search-icon.png\">\n</img></img></div>\n<div id=\"pull-menu\">\n<div class=\"navigation\"><ul class=\"menu\" id=\"menu-menu\"><li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-1070\" id=\"menu-item-1070\"><a href=\"/software/index.html\" title=\"Data Science Software\">SOFTWARE</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13756\" id=\"menu-item-13756\"><a href=\"/news/index.html\" title=\"News\">News/Blog</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-46286\" id=\"menu-item-46286\"><a href=\"/news/top-stories.html\">Top stories</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-42152\" id=\"menu-item-42152\"><a href=\"https://www.kdnuggets.com/opinions/index.html\" title=\"Opinions\">Opinions</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-46415\" id=\"menu-item-46415\"><a href=\"https://www.kdnuggets.com/tutorials/index.html\">Tutorials</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13364\" id=\"menu-item-13364\"><a href=\"/jobs/index.html\" title=\"Jobs in Analytics, Data Science\">JOBS</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-63505\" id=\"menu-item-63505\"><a href=\"https://www.kdnuggets.com/companies/index.html\">Companies</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13366\" id=\"menu-item-13366\"><a href=\"/courses/index.html\">Courses</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-1499\" id=\"menu-item-1499\"><a href=\"https://www.kdnuggets.com/datasets/index.html\">Datasets</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-14286\" id=\"menu-item-14286\"><a href=\"https://www.kdnuggets.com/education/index.html\" title=\"Education in Analytics, Big Data, Data Science\">EDUCATION</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-51558\" id=\"menu-item-51558\"><a href=\"https://www.kdnuggets.com/education/analytics-data-mining-certificates.html\" title=\"Certificates in Analytics, Big Data, Data Science\">Certificates</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-14752\" id=\"menu-item-14752\"><a href=\"/meetings/index.html\">Meetings</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13721\" id=\"menu-item-13721\"><a href=\"/webcasts/index.html\" title=\"Webcasts and Webinars\">Webinars</a></li>\n</ul></div></div>\n</div> <!--#header end-->\n<div id=\"spacer\">\n         \u00a0\n      </div>\n<div id=\"content_wrapper\">\n<div id=\"ad_wrapper\">\n<script type=\"text/javascript\">\n\tjQuery(function() {\n   \t    var pull        = $('#pull');\n            menu        = $('#header .navigation ul');\n            menuImage = $('#header img.menu');\n            mobileMenu        = $('#pull-menu-mobile');\n            search = $('img.search-icon');\n            searchBar = $('div.search');\n            searchClick = false;\n            search.on('click', function() {\n                  searchBar.slideToggle();\n                  searchClick = true;\n            });  \n     \t    $(menuImage).on('click', function(e) {\n\t        //e.preventDefault();\n                if (!searchClick) {\n                  menu.slideToggle();\n                }\n                searchClick = false;\n\t    });\n           /* pullMobile.on('click', function(e) {\n              e.preventDefault();\n                if (!searchClick) {\n                  mobileMenu.slideToggle();\n                }\n                searchClick = false;\n\t    });*/\n            \n\t});\n\tkpath = '/'; kda_top(); kda_sid_init(); kda_sid_n=3;\n\t</script>\n</div> <div class=\"breadcumb\">\n<br/>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2018/index.html\">2018</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/07/index.html\">Jul</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/07/tutorials.html\">Tutorials, Overviews</a> \u00bb Clustering Using K-means Algorithm (\u00a0<a href=\"/2018/n28.html\">18:n28</a>\u00a0)    </div>\n<div class=\"single\" id=\"content\">\n<div id=\"post-header\">\n<h1 id=\"title\">Clustering Using K-means Algorithm</h1>\n<div class=\"pagi\">\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/jobs/18/07-18-charles-river-analytics-software-engineer-intelligent-systems.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"> <strong>Previous post</strong></img></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2018/07/5-quick-easy-data-visualizations-python-code.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/>\u00a0<br/>\u00a0\n    <div class=\"addthis_native_toolbox\"></div>\n</div>\n<div class=\"tag-data\">Tags: <a href=\"https://www.kdnuggets.com/tag/algorithms\" rel=\"tag\">Algorithms</a>, <a href=\"https://www.kdnuggets.com/tag/clustering\" rel=\"tag\">Clustering</a>, <a href=\"https://www.kdnuggets.com/tag/k-means\" rel=\"tag\">K-means</a></div>\n<br/>\n<p class=\"excerpt\">\n     This article explains K-means algorithm in an easy way. I\u2019d like to start with an example to understand the objective of this powerful technique in machine learning before getting into the algorithm, which is quite simple.\n  </p>\n</div>\n<div id=\"post-header-ad\">\n<script type=\"text/javascript\">kda_sid_write(1); kda_sid_n=2;</script>\n</div>\n<hr class=\"grey-line\"/><br/>\n<div class=\"post\" id=\"post-\">\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p><b>By <a href=\"https://twitter.com/phidaouss\" rel=\"noopener noreferrer\" target=\"_blank\">Firdaouss Doukkali</a>, Machine Learning Engineer</b></p>\n<p><center><img alt=\"Header image\" src=\"https://cdn-images-1.medium.com/max/800/1*2LtFrxlJsjjPMh7W5Q6kDg.png\" width=\"99%\"><br>\n<font size=\"-1\">k-means demonstration from <a href=\"https://en.wikipedia.org/wiki/K-means_clustering\" rel=\"noopener\" target=\"_blank\">Wikipedia</a></font></br></img></center></p>\n<p>This article explains K-means algorithm in an easy way. I\u2019d like to start with an example to understand the objective of this powerful technique in machine learning before getting into the algorithm, which is quite simple.</p>\n<p>So imagine you have a set of numerical data of cancer tumors in 4 different stages from 1 to 4, and you need to study all the tumors in each stage. However, you have no idea how to identify the tumors that are at the same stage because nobody had the time to label the entire set of features (most data in the world are unlabeled).\u00a0In this case, you need K-means algorithm because it works on unlabeled numerical data and it will automatically and quickly group them together into 4 clusters.</p>\n<p>For this example, we chose k=4 because, we already know, we have 4 tumors\u2019 stages, but if we want to cluster them based on their structure, growth speed, or growth type, then maybe k will be different than 4.</p>\n<p>If you don\u2019t know how many groups you want, it\u2019s problematical, because K-means needs a specific number k of clusters in order to use it. So, the first lesson, whenever, you have to optimize and solve a problem, you should know your data and on what basis you want to group them. Then, you will be able to determine the number of clusters you need.</p>\n<p>But, most of the time, we really have no idea what the right number of clusters is, so no worries, there is a solution for it, that we will discuss it later in this post.</p>\n<p>\u00a0</p>\n<h3><b>k-means Algorithm</b></h3>\n<p>\u00a0<br>\nLet\u2019s start with a visualization of a k-means algorithm (k=4).</br></p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*4LOxZL6bFl3rXlr2uCiKlQ.gif\" width=\"99%\"/><br>\n<font size=\"-1\">from\u00a0<a href=\"http://shabal.in/visuals/kmeans/6.html\" rel=\"noopener noreferrer\" target=\"_blank\">K-means clustering</a>, credit to Andrey A.\u00a0Shabalin</font></br></center></p>\n<p>As, you can see, k-means algorithm is composed of 3 steps:</p>\n<p>\u00a0<br>\n<b>Step 1: Initialization</b></br></p>\n<p>The first thing k-means does, is\u00a0<strong>randomly</strong>\u00a0choose K examples (data points) from the dataset (the 4 green points) as initial centroids and that\u2019s simply because it does not know yet where the center of each cluster is. (a centroid is the center of a cluster).</p>\n<p>\u00a0<br/>\n<b>Step 2: Cluster Assignment</b></p>\n<p>Then, all the data points that are the closest (similar) to a centroid will create a cluster. If we\u2019re using the Euclidean distance between data points and every centroid, a straight line is drawn between two centroids, then a perpendicular bisector (boundary line) divides this line into two clusters.</p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*BONiWKk4T5LTDZWpjRo0BQ.png\" width=\"60%\"/><br/>\n<font size=\"-1\">from\u00a0<a href=\"https://www.youtube.com/watch?v=7Qv0cmJ6FsI\" rel=\"noopener noreferrer\" target=\"_blank\">Introduction to Clustering and K-means Algorithm</a></font></center></p>\n<p>\u00a0<br/>\n<b>Step 3: Move the\u00a0centroid</b></p>\n<p>Now, we have new clusters, that need centers. A centroid\u2019s new value is going to be the mean of all the examples in a cluster.</p>\n<p>We\u2019ll keep repeating step 2 and 3 until the centroids stop moving, in other words, K-means algorithm is converged.</p>\n<p><b>Here is the k-means algorithm:</b></p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*6EOTS1IE2ULWC9SKgf7mYw.png\" width=\"99%\"/><br/>\n<font size=\"-1\">from MIT 6.0002 lecture\u00a012</font></center></p>\n<p>K-means is a fast and efficient method, because the complexity of one iteration is k*n*d where k (number of clusters), n (number of examples), and d (time of computing the Euclidian distance between 2 points).</p>\n<p>\u00a0<br/>\n<b><strong>Then, how do we choose the number of clusters\u00a0k?</strong></b></p>\n<p>In case, it is not clear, we try different values of k, we evaluate them and we choose the best k value.</p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*2Eeb0Qe2yyUuobAt6AznjA.png\" width=\"99%\"/><br/>\n<font size=\"-1\">from MIT 6.0002 lecture\u00a012</font></center></p>\n<p><strong>Dissimilarity(C)</strong>\u00a0is the sum of all the variabilities of k clusters</p>\n<p><strong>Variability</strong>\u00a0is the sum of all Euclidean distances between the centroid and each example in the cluster.</p>\n<p>Or you can take a small subset of your data, apply\u00a0<a href=\"https://en.wikipedia.org/wiki/Hierarchical_clustering\" rel=\"noopener noreferrer\" target=\"_blank\">hierarchical clustering</a>\u00a0on it (it\u2019s a slow clustering algorithm) to get an understanding of the data structure before choosing k by hand.</p>\n<p><b>Unlucky centroids:</b></p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*-0jNOekbwc2NIEpf1CSw0A.png\" width=\"60%\"/><br/>\n<font size=\"-1\">The blue and red stars are unlucky centroids\u00a0:(\u00a0. From MIT 6.0002 lecture\u00a012</font></center></p>\n<p>Choosing poorly the random initial centroids will take longer to converge or get stuck on local optima which may result in bad clustering. in the picture above, the blue and red stars are unlucky centroids.</p>\n<p>There are two solutions:</p>\n<ul>\n<li>Distribute them over the space.\n<li>Try different sets of random centroids, and choose the best set.\n</li></li></ul>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/1000/1*PRC6tdXpTekQ6X7qdUDehg.jpeg\" width=\"99%\"/></p>\n<p><b>References and readings:</b></p>\n<p><a href=\"https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-0002-introduction-to-computational-thinking-and-data-science-fall-2016/lecture-slides-and-files/\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>Lecture Slides and Files | Introduction to Computational Thinking and Data Science | Electrical\u2026</strong><br/>\n<em>This section includes lecture notes for the class, including associated files.</em></a></p>\n<p><a href=\"https://www.coursera.org/learn/machine-learning/lecture/93VPG/k-means-algorithm\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>K-Means Algorithm - Stanford University | Coursera</strong><br/>\n<em>Machine learning is the science of getting computers to act without being explicitly programmed. In the past decade\u2026</em></a></p>\n<p>\u00a0<br/>\n<b>Bio: <a href=\"https://twitter.com/phidaouss\" rel=\"noopener noreferrer\" target=\"_blank\">Firdaouss Doukkali</a></b> is a Machine Learning Engineer and Chief Unicorn Scientist. Global Shaper at World Economic Forum. English, French, German, Arabic, and Japanese speaker.</p>\n<p><a href=\"https://towardsdatascience.com/clustering-using-k-means-algorithm-81da00f156f6\" rel=\"noopener noreferrer\" target=\"_blank\">Original</a>. Reposted with permission.</p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2018/06/5-clustering-algorithms-data-scientists-need-know.html\">The 5 Clustering Algorithms Data Scientists Need to Know</a>\n<li><a href=\"/2017/06/machine-learning-workflows-python-scratch-part-2.html\">Machine Learning Workflows in Python from Scratch Part 2: k-means Clustering</a>\n<li><a href=\"/2017/03/naive-sharding-centroid-initialization-method.html\">Toward Increased k-means Clustering Efficiency with the Naive Sharding Centroid Initialization Method</a>\n</li></li></li></ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p> <script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets';\n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div>\n<div class=\"page-link\"></div>\n<div class=\"pagi\">\n<hr class=\"grey-line\"/>\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/jobs/18/07-18-charles-river-analytics-software-engineer-intelligent-systems.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"/> <strong>Previous post</strong></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2018/07/5-quick-easy-data-visualizations-python-code.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/><br/>\n<div>\n<hr class=\"grey-line\"/><br/>\n<h2>Top Stories Past 30 Days</h2>\n<table align=\"center\" cellpadding=\"3\" cellspacing=\"10\" class=\"latn\" width=\"100%\">\n<tr>\n<td valign=\"top\" width=\"50%\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Popular</b></th></tr>\n<tr><td>\n<ol class=\"three_ol\"><li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-1-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-2-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n<li> <a href=\"/2018/05/simplilearn-9-must-have-skills-data-scientist.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-3-simplilearn');\"><b>9 Must-have skills you need to become a Data Scientist, updated</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-4-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/03/another-10-free-must-read-books-for-machine-learning-and-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-5-another-10-books');\"><b>Another 10 Free Must-Read Books for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-6-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/best-data-visualization-techniques.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-7-best-data-viz');\"><b>Best Data Visualization Techniques for small and large data</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td> <td valign=\"top\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Shared</b></th></tr>\n<tr><td><ol class=\"three_ol\">\n<li> <a href=\"/2019/04/another-10-free-must-see-courses-machine-learning-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-1-another-10-courses');\"><b>Another 10 Free Must-See Courses for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-2-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/03/r-vs-python-data-visualization.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-3-r-py-viz');\"><b>R vs Python for Data Visualization</b></a>\n<li> <a href=\"/2019/03/deep-learning-toolset-overview.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-4-dl-toolset');\"><b>The Deep Learning Toolset \u2014 An Overview</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-5-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-6-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-7-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<!--#content end--></div>\n<div id=\"sidebar\">\n<div class=\"latn\">\n<h3><b><a href=\"/news/index.html\">Latest News</a></b></h3>\n<ul style=\"font-size:14px; margin-top:5px\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/datarobot-delivering-trusted-ai-microsoft.html\">Delivering Trusted AI with DataRobot and Microsoft</a><li> <a href=\"https://www.kdnuggets.com/2019/04/formulated-ai-data-production-landscape.html\">AI and the data production landscape</a><li> <a href=\"https://www.kdnuggets.com/2019/04/most-desired-skill-data-science.html\">The most desired skill in data science</a><li> <a href=\"https://www.kdnuggets.com/2019/04/projects-include-data-science-portfolio.html\">Projects to Include in a Data Science Portfolio</a><li> <a href=\"https://www.kdnuggets.com/2019/04/rework-meet-worlds-leading-ai-deep-learning-experts.html\">Meet the World\u2019s Leading AI &amp; Deep Learning ...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/problem-data-science-job-postings.html\">The problem with data science job postings</a></li></li></li></li></li></li></ul>\n</div>\n<div>\n<script type=\"text/javascript\">kda_sid_write(kda_sid_n);</script>\n</div>\n<br/><script src=\"/aps/sbm.js\" type=\"text/javascript\"></script>\n</div>\n</div><div class=\"breadcrumbs_bottom\">\n<div class=\"breadcumb\">\n<br>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2018/index.html\">2018</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/07/index.html\">Jul</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/07/tutorials.html\">Tutorials, Overviews</a> \u00bb Clustering Using K-means Algorithm (\u00a0<a href=\"/2018/n28.html\">18:n28</a>\u00a0)    </br></div>\n</div>\n<!--#content_wrapper end--></div>\n<br>\n<div id=\"footer\">\n<br/>\u00a9 2019 KDnuggets. <a href=\"/about/index.html\">About KDnuggets</a>. \u00a0<a href=\"/news/privacy-policy.html\">Privacy policy</a>. <a href=\"/terms-of-service.html\">Terms of Service</a><br/>\u00a0\n<div class=\"kd_bottom\">\n<div class=\"footer-container\">\n<div class=\"footer-news\">\n<a href=\"/news/subscribe.html\" onclick=\"_gaq.push(['_trackPageview','/x/bot/sub']);\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a>\n</div>\n<div class=\"footer-sm\">\n<a href=\"https://twitter.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/twt']);\" target=\"_blank\"><img height=\"32\" src=\"/images/tw_c48.png\" width=\"32\"/></a>\n<a href=\"https://facebook.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/fb']);\" target=\"_blank\"><img alt=\"Facebook\" height=\"32\" src=\"/images/fb_c48.png\" width=\"32\"/></a>\n<a href=\"https://www.linkedin.com/groups/54257\" onclick=\"_gaq.push(['_trackPageview','/x/bot/in']);\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"32\" src=\"/images/in_c48.png\" width=\"32\"/></a>\n</div>\n</div>\n<div class=\"close-footer\">X</div>\n</div>\n<script type=\"text/javascript\">\n  jQuery('.close-footer').click(\n      function(){       \n         jQuery('.kd_bottom').hide();\n      }\n   );\n</script> </div>\n<div class=\"clear\"><!--blank--></div>\n</br></div>\n<div style=\"display: none;\"><div id=\"boxzilla-box-82996-content\"><script type=\"text/javascript\">(function() {\n\tif (!window.mc4wp) {\n\t\twindow.mc4wp = {\n\t\t\tlisteners: [],\n\t\t\tforms    : {\n\t\t\t\ton: function (event, callback) {\n\t\t\t\t\twindow.mc4wp.listeners.push({\n\t\t\t\t\t\tevent   : event,\n\t\t\t\t\t\tcallback: callback\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})();\n</script><!-- MailChimp for WordPress v4.1.14 - https://wordpress.org/plugins/mailchimp-for-wp/ --><form class=\"mc4wp-form mc4wp-form-77281\" data-id=\"77281\" data-name=\"Subscribe to KDnuggets News\" id=\"mc4wp-form-1\" method=\"post\"><div class=\"mc4wp-form-fields\"><div class=\"header-container\">\n<img align=\"left\" src=\"/wp-content/uploads/envelope.png\"><a href=\"/news/subscribe.html\">Get KDnuggets, a leading newsletter on AI, \r\n  Data Science, and Machine Learning</a>\n</img></div>\n<div class=\"form-fields\">\n<div class=\"field-container\"><label>Email:</label><input maxlength=\"60\" name=\"EMAIL\" placeholder=\"Your email\" required=\"\" size=\"30\" type=\"email\"/></div>\n<div class=\"field-container submit-container\"><div class=\"form-button\" onclick=\"document.getElementById('mc4wp-form-1').submit()\">Sign Up</div></div>\n</div>\n<label style=\"display: none !important;\">Leave this field empty if you're human: <input autocomplete=\"off\" name=\"_mc4wp_honeypot\" tabindex=\"-1\" type=\"text\" value=\"\"/></label><input name=\"_mc4wp_timestamp\" type=\"hidden\" value=\"1556326583\"/><input name=\"_mc4wp_form_id\" type=\"hidden\" value=\"77281\"/><input name=\"_mc4wp_form_element_id\" type=\"hidden\" value=\"mc4wp-form-1\"/></div><div class=\"mc4wp-response\"></div></form><!-- / MailChimp for WordPress Plugin -->\n</div></div><script type=\"text/javascript\">(function() {function addEventListener(element,event,handler) {\n\tif(element.addEventListener) {\n\t\telement.addEventListener(event,handler, false);\n\t} else if(element.attachEvent){\n\t\telement.attachEvent('on'+event,handler);\n\t}\n}function maybePrefixUrlField() {\n\tif(this.value.trim() !== '' && this.value.indexOf('http') !== 0) {\n\t\tthis.value = \"http://\" + this.value;\n\t}\n}\n\nvar urlFields = document.querySelectorAll('.mc4wp-form input[type=\"url\"]');\nif( urlFields && urlFields.length > 0 ) {\n\tfor( var j=0; j < urlFields.length; j++ ) {\n\t\taddEventListener(urlFields[j],'blur',maybePrefixUrlField);\n\t}\n}/* test if browser supports date fields */\nvar testInput = document.createElement('input');\ntestInput.setAttribute('type', 'date');\nif( testInput.type !== 'date') {\n\n\t/* add placeholder & pattern to all date fields */\n\tvar dateFields = document.querySelectorAll('.mc4wp-form input[type=\"date\"]');\n\tfor(var i=0; i<dateFields.length; i++) {\n\t\tif(!dateFields[i].placeholder) {\n\t\t\tdateFields[i].placeholder = 'YYYY-MM-DD';\n\t\t}\n\t\tif(!dateFields[i].pattern) {\n\t\t\tdateFields[i].pattern = '[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])';\n\t\t}\n\t}\n}\n\n})();</script><script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_options = {\"testMode\":\"\",\"boxes\":[{\"id\":82996,\"icon\":\"&times;\",\"content\":\"\",\"css\":{\"background_color\":\"#eeee22\",\"width\":600,\"border_width\":2,\"border_style\":\"double\",\"position\":\"center\"},\"trigger\":{\"method\":\"time_on_page\",\"value\":\"3\"},\"animation\":\"fade\",\"cookie\":{\"triggered\":0,\"dismissed\":336},\"rehide\":true,\"position\":\"center\",\"screenWidthCondition\":{\"condition\":\"larger\",\"value\":500},\"closable\":true,\"post\":{\"id\":82996,\"title\":\"Subscribe to KDnuggets\",\"slug\":\"subscribe-to-kdnuggets\"}}]};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla/assets/js/script.min.js?ver=3.2.5\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_stats_config = {\"ajaxurl\":\"https:\\/\\/www.kdnuggets.com\\/wp-admin\\/admin-ajax.php?action=boxzilla_stats_track\"};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla-stats/assets/js/tracking.min.js?ver=1.0.4\" type=\"text/javascript\"></script>\n<script src=\"https://www.kdnuggets.com/wp-includes/js/wp-embed.min.js?ver=4.9.10\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar mc4wp_forms_config = [];\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/forms-api.min.js?ver=4.1.14\" type=\"text/javascript\"></script>\n<!--[if lte IE 9]>\n<script type='text/javascript' src='https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/third-party/placeholders.min.js?ver=4.1.14'></script>\n<![endif]-->\n<!--/.main_wrapper--></body></html>\n<script src=\"https://s7.addthis.com/js/300/addthis_widget.js#pubid=gpsaddthis\" type=\"text/javascript\"></script>\n\n\n<!-- Dynamic page generated in 0.618 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2019-04-26 20:56:23 -->\n<!-- Compression = gzip -->", "content_tokenized": ["comment", "firdaouss", "doukkali", "machin", "learn", "engin", "kmean", "demonstr", "from", "wikipedia", "this", "articl", "explain", "kmean", "algorithm", "easi", "way", "like", "start", "with", "exampl", "understand", "the", "object", "this", "power", "techniqu", "machin", "learn", "befor", "get", "into", "the", "algorithm", "which", "quit", "simpl", "imagin", "have", "set", "numer", "data", "cancer", "tumor", "num", "differ", "stage", "from", "num", "num", "and", "need", "studi", "all", "the", "tumor", "each", "stage", "howev", "have", "idea", "how", "identifi", "the", "tumor", "that", "are", "the", "same", "stage", "becaus", "nobodi", "had", "the", "time", "label", "the", "entir", "set", "featur", "most", "data", "the", "world", "are", "unlabel", "this", "case", "need", "kmean", "algorithm", "becaus", "work", "unlabel", "numer", "data", "and", "will", "automat", "and", "quick", "group", "them", "togeth", "into", "num", "cluster", "for", "this", "exampl", "chose", "knum", "becaus", "alreadi", "know", "have", "num", "tumor", "stage", "but", "want", "cluster", "them", "base", "their", "structur", "growth", "speed", "growth", "type", "then", "mayb", "will", "differ", "than", "num", "know", "how", "mani", "group", "want", "problemat", "becaus", "kmean", "need", "specif", "number", "cluster", "order", "use", "the", "first", "lesson", "whenev", "have", "optim", "and", "solv", "problem", "should", "know", "data", "and", "what", "basi", "want", "group", "them", "then", "will", "abl", "determin", "the", "number", "cluster", "need", "but", "most", "the", "time", "realli", "have", "idea", "what", "the", "right", "number", "cluster", "worri", "there", "solut", "for", "that", "will", "discuss", "later", "this", "post", "kmean", "algorithm", "let", "start", "with", "visual", "kmean", "algorithm", "knum", "from", "kmean", "cluster", "credit", "andrey", "shabalin", "can", "see", "kmean", "algorithm", "compos", "num", "step", "step", "num", "initi", "the", "first", "thing", "kmean", "doe", "random", "choos", "exampl", "data", "point", "from", "the", "dataset", "the", "num", "green", "point", "initi", "centroid", "and", "that", "simpli", "becaus", "doe", "not", "know", "yet", "where", "the", "center", "each", "cluster", "centroid", "the", "center", "cluster", "step", "num", "cluster", "assign", "then", "all", "the", "data", "point", "that", "are", "the", "closest", "similar", "centroid", "will", "creat", "cluster", "use", "the", "euclidean", "distanc", "between", "data", "point", "and", "everi", "centroid", "straight", "line", "drawn", "between", "two", "centroid", "then", "perpendicular", "bisector", "boundari", "line", "divid", "this", "line", "into", "two", "cluster", "from", "introduct", "cluster", "and", "kmean", "algorithm", "step", "num", "move", "the", "centroid", "now", "have", "new", "cluster", "that", "need", "center", "centroid", "new", "valu", "the", "mean", "all", "the", "exampl", "cluster", "keep", "repeat", "step", "num", "and", "num", "until", "the", "centroid", "stop", "move", "other", "word", "kmean", "algorithm", "converg", "here", "the", "kmean", "algorithm", "from", "num", "lectur", "num", "kmean", "fast", "and", "effici", "method", "becaus", "the", "complex", "one", "iter", "knd", "where", "number", "cluster", "number", "exampl", "and", "time", "comput", "the", "euclidian", "distanc", "between", "num", "point", "then", "how", "choos", "the", "number", "cluster", "case", "not", "clear", "tri", "differ", "valu", "evalu", "them", "and", "choos", "the", "best", "valu", "from", "num", "lectur", "num", "the", "sum", "all", "the", "variabl", "cluster", "variabl", "the", "sum", "all", "euclidean", "distanc", "between", "the", "centroid", "and", "each", "exampl", "the", "cluster", "can", "take", "small", "subset", "data", "appli", "hierarch", "cluster", "slow", "cluster", "algorithm", "get", "understand", "the", "data", "structur", "befor", "choos", "hand", "unlucki", "centroid", "the", "blue", "and", "red", "star", "are", "unlucki", "centroid", "from", "num", "lectur", "num", "choos", "poor", "the", "random", "initi", "centroid", "will", "take", "longer", "converg", "get", "stuck", "local", "optima", "which", "may", "result", "bad", "cluster", "the", "pictur", "abov", "the", "blue", "and", "red", "star", "are", "unlucki", "centroid", "there", "are", "two", "solut", "distribut", "them", "over", "the", "space", "tri", "differ", "set", "random", "centroid", "and", "choos", "the", "best", "set", "refer", "and", "read", "lectur", "slide", "and", "file", "introduct", "comput", "think", "and", "data", "scienc", "electrical\u2026", "this", "section", "includ", "lectur", "note", "for", "the", "class", "includ", "associ", "file", "kmean", "algorithm", "stanford", "univers", "coursera", "machin", "learn", "the", "scienc", "get", "comput", "act", "without", "explicit", "program", "the", "past", "decade\u2026", "bio", "firdaouss", "doukkali", "machin", "learn", "engin", "and", "chief", "unicorn", "scientist", "global", "shaper", "world", "econom", "forum", "english", "french", "german", "arab", "and", "japanes", "speaker", "origin", "repost", "with", "permiss", "relat", "the", "num", "cluster", "algorithm", "data", "scientist", "need", "know", "machin", "learn", "workflow", "python", "from", "scratch", "part", "num", "kmean", "cluster", "toward", "increas", "kmean", "cluster", "effici", "with", "the", "naiv", "shard", "centroid", "initi", "method"], "timestamp_scraper": 1556367916.012949, "title": "Clustering Using K-means Algorithm", "read_time": 239.39999999999998, "content_html": "<div class=\"post\" id=\"post-\">\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p><b>By <a href=\"https://twitter.com/phidaouss\" rel=\"noopener noreferrer\" target=\"_blank\">Firdaouss Doukkali</a>, Machine Learning Engineer</b></p>\n<p><center><img alt=\"Header image\" src=\"https://cdn-images-1.medium.com/max/800/1*2LtFrxlJsjjPMh7W5Q6kDg.png\" width=\"99%\"><br>\n<font size=\"-1\">k-means demonstration from <a href=\"https://en.wikipedia.org/wiki/K-means_clustering\" rel=\"noopener\" target=\"_blank\">Wikipedia</a></font></br></img></center></p>\n<p>This article explains K-means algorithm in an easy way. I\u2019d like to start with an example to understand the objective of this powerful technique in machine learning before getting into the algorithm, which is quite simple.</p>\n<p>So imagine you have a set of numerical data of cancer tumors in 4 different stages from 1 to 4, and you need to study all the tumors in each stage. However, you have no idea how to identify the tumors that are at the same stage because nobody had the time to label the entire set of features (most data in the world are unlabeled).\u00a0In this case, you need K-means algorithm because it works on unlabeled numerical data and it will automatically and quickly group them together into 4 clusters.</p>\n<p>For this example, we chose k=4 because, we already know, we have 4 tumors\u2019 stages, but if we want to cluster them based on their structure, growth speed, or growth type, then maybe k will be different than 4.</p>\n<p>If you don\u2019t know how many groups you want, it\u2019s problematical, because K-means needs a specific number k of clusters in order to use it. So, the first lesson, whenever, you have to optimize and solve a problem, you should know your data and on what basis you want to group them. Then, you will be able to determine the number of clusters you need.</p>\n<p>But, most of the time, we really have no idea what the right number of clusters is, so no worries, there is a solution for it, that we will discuss it later in this post.</p>\n<p>\u00a0</p>\n<h3><b>k-means Algorithm</b></h3>\n<p>\u00a0<br>\nLet\u2019s start with a visualization of a k-means algorithm (k=4).</br></p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*4LOxZL6bFl3rXlr2uCiKlQ.gif\" width=\"99%\"/><br>\n<font size=\"-1\">from\u00a0<a href=\"http://shabal.in/visuals/kmeans/6.html\" rel=\"noopener noreferrer\" target=\"_blank\">K-means clustering</a>, credit to Andrey A.\u00a0Shabalin</font></br></center></p>\n<p>As, you can see, k-means algorithm is composed of 3 steps:</p>\n<p>\u00a0<br>\n<b>Step 1: Initialization</b></br></p>\n<p>The first thing k-means does, is\u00a0<strong>randomly</strong>\u00a0choose K examples (data points) from the dataset (the 4 green points) as initial centroids and that\u2019s simply because it does not know yet where the center of each cluster is. (a centroid is the center of a cluster).</p>\n<p>\u00a0<br/>\n<b>Step 2: Cluster Assignment</b></p>\n<p>Then, all the data points that are the closest (similar) to a centroid will create a cluster. If we\u2019re using the Euclidean distance between data points and every centroid, a straight line is drawn between two centroids, then a perpendicular bisector (boundary line) divides this line into two clusters.</p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*BONiWKk4T5LTDZWpjRo0BQ.png\" width=\"60%\"/><br/>\n<font size=\"-1\">from\u00a0<a href=\"https://www.youtube.com/watch?v=7Qv0cmJ6FsI\" rel=\"noopener noreferrer\" target=\"_blank\">Introduction to Clustering and K-means Algorithm</a></font></center></p>\n<p>\u00a0<br/>\n<b>Step 3: Move the\u00a0centroid</b></p>\n<p>Now, we have new clusters, that need centers. A centroid\u2019s new value is going to be the mean of all the examples in a cluster.</p>\n<p>We\u2019ll keep repeating step 2 and 3 until the centroids stop moving, in other words, K-means algorithm is converged.</p>\n<p><b>Here is the k-means algorithm:</b></p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*6EOTS1IE2ULWC9SKgf7mYw.png\" width=\"99%\"/><br/>\n<font size=\"-1\">from MIT 6.0002 lecture\u00a012</font></center></p>\n<p>K-means is a fast and efficient method, because the complexity of one iteration is k*n*d where k (number of clusters), n (number of examples), and d (time of computing the Euclidian distance between 2 points).</p>\n<p>\u00a0<br/>\n<b><strong>Then, how do we choose the number of clusters\u00a0k?</strong></b></p>\n<p>In case, it is not clear, we try different values of k, we evaluate them and we choose the best k value.</p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*2Eeb0Qe2yyUuobAt6AznjA.png\" width=\"99%\"/><br/>\n<font size=\"-1\">from MIT 6.0002 lecture\u00a012</font></center></p>\n<p><strong>Dissimilarity(C)</strong>\u00a0is the sum of all the variabilities of k clusters</p>\n<p><strong>Variability</strong>\u00a0is the sum of all Euclidean distances between the centroid and each example in the cluster.</p>\n<p>Or you can take a small subset of your data, apply\u00a0<a href=\"https://en.wikipedia.org/wiki/Hierarchical_clustering\" rel=\"noopener noreferrer\" target=\"_blank\">hierarchical clustering</a>\u00a0on it (it\u2019s a slow clustering algorithm) to get an understanding of the data structure before choosing k by hand.</p>\n<p><b>Unlucky centroids:</b></p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*-0jNOekbwc2NIEpf1CSw0A.png\" width=\"60%\"/><br/>\n<font size=\"-1\">The blue and red stars are unlucky centroids\u00a0:(\u00a0. From MIT 6.0002 lecture\u00a012</font></center></p>\n<p>Choosing poorly the random initial centroids will take longer to converge or get stuck on local optima which may result in bad clustering. in the picture above, the blue and red stars are unlucky centroids.</p>\n<p>There are two solutions:</p>\n<ul>\n<li>Distribute them over the space.\n<li>Try different sets of random centroids, and choose the best set.\n</li></li></ul>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/1000/1*PRC6tdXpTekQ6X7qdUDehg.jpeg\" width=\"99%\"/></p>\n<p><b>References and readings:</b></p>\n<p><a href=\"https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-0002-introduction-to-computational-thinking-and-data-science-fall-2016/lecture-slides-and-files/\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>Lecture Slides and Files | Introduction to Computational Thinking and Data Science | Electrical\u2026</strong><br/>\n<em>This section includes lecture notes for the class, including associated files.</em></a></p>\n<p><a href=\"https://www.coursera.org/learn/machine-learning/lecture/93VPG/k-means-algorithm\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>K-Means Algorithm - Stanford University | Coursera</strong><br/>\n<em>Machine learning is the science of getting computers to act without being explicitly programmed. In the past decade\u2026</em></a></p>\n<p>\u00a0<br/>\n<b>Bio: <a href=\"https://twitter.com/phidaouss\" rel=\"noopener noreferrer\" target=\"_blank\">Firdaouss Doukkali</a></b> is a Machine Learning Engineer and Chief Unicorn Scientist. Global Shaper at World Economic Forum. English, French, German, Arabic, and Japanese speaker.</p>\n<p><a href=\"https://towardsdatascience.com/clustering-using-k-means-algorithm-81da00f156f6\" rel=\"noopener noreferrer\" target=\"_blank\">Original</a>. Reposted with permission.</p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2018/06/5-clustering-algorithms-data-scientists-need-know.html\">The 5 Clustering Algorithms Data Scientists Need to Know</a>\n<li><a href=\"/2017/06/machine-learning-workflows-python-scratch-part-2.html\">Machine Learning Workflows in Python from Scratch Part 2: k-means Clustering</a>\n<li><a href=\"/2017/03/naive-sharding-centroid-initialization-method.html\">Toward Increased k-means Clustering Efficiency with the Naive Sharding Centroid Initialization Method</a>\n</li></li></li></ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p> <script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets';\n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div> ", "website": "kdnuggets"}