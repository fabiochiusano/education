{"content": "comments By\u00a0 Amine Baatout , ContentSquare. Machine Learning in Production From trained models to prediction servers In this article, we will discuss how to go from the research phase to the production phase for ML projects and what are the different options to do so. 2-in-1 approach If you try to have your training and server code in the same repository you would probably end up with a big mess that is hard to maintain. Training models and serving real-time prediction are extremely different tasks and hence should be handled by separate components. Last but not least, there is a proverb that says \u201cDon\u2019t s**t where you eat\u201d , so there\u2019s that too. Thus, a better approach would be to separate the training from the server. This way, you can do all the data science stuff on your local machine, and once you have your awesome model, you can transfer it to the server to make live predictions. Model as a config Our reference example will be a logistic regression on the classic Pima Indians Diabetes Dataset which has 8 numeric features and a binary label. The following Python code gives us a training set and a test set. Python Code: train_test_split.py Model coefficients transfer approach After we split the data we can train our LogReg and save its coefficients in a json file. Once we have our coefficients in a safe place, we can reproduce our model in any language or framework we like. Concretely we can write these coefficients in the server configuration files. This way, when the server starts, it will initialize the logreg model with the proper weights from the config. Python Code: save_model_coefficients.py The big advantage here is that the training and the server parts are totally independent regarding the programming language and the library requirements. However, one issue that is often neglected is the feature engineering\u200a\u2014\u200aor more accurately: the dark side of machine learning . In general you rarely train a model directly on raw data, there is always some preprocessing that should be done beforehand. It could be anything from standardisation or PCA to all sorts of exotic transformations. So if you choose to code the preprocessing part in the server side too, note that every little change you make in the training should be duplicated in the server\u200a\u2014\u200ameaning a new release for both sides. So if you\u2019re always trying to improve the score by tweaking the feature engineering part, be prepared for the double load of work and plenty of redundancy. (cf figure 2) Figure 2. The 387301st release of a prediction server (yes, I\u2019m exaggerating) due to a simple change in the feature engineering which doesn\u2019t impact how the server works. Not good. PMML approach Another solution is to use PMML which provides a way to describe predictive models along with data transformation. However, it supports few ML models and lacks the support of many custom transformations . But then again if you choose to stick with the standard models and transformations, PMML would be the option to go for. Custom DSL/Framework approach If you want more than PMML could offer, you could build your own DSL or framework that lets you translate what you did in the training side to the server side. However this can be a time consuming task that not everyone can afford. Model as black box Now, I want to bring your attention to one thing in common between the previously discussed methods: They all treat the predictive model as a \u201cconfiguration\u201d . Instead we could consider it as a \u201cstandalone program\u201d or a black box that has everything it needs to run and that is easily transferable. (cf figure 3) Figure 3. Top: Model description transfer approach. The server loads the config and uses it to create the model. Bottom: Black box transfer approach. The server loads the standalone model itself. The black box approach In order to transfer your trained model along with its preprocessing steps as an encapsulated entity to your server, you will need serialization . You should be able to put anything you want in this black box and end up with an object that accepts raw input and outputs the prediction. (cf figure 4) Figure 4. Standalone trained model ready to be integrated transparently in the server side. Let\u2019s try to build this black box using Pipeline from Scikit-learn and Dill library for serialisation. We will use a custom transformation `is_adult` that wouldn\u2019t be supported by PMML. Python Code:\u00a0 pickle_export.py Ok now let\u2019s load it in the server side. To better simulate the server environment, try running the pipeline somewhere the training modules are not accessible. Make sure that whatever libraries you used to build the model, you must have them installed in your server environment as well. Python Code: run_pickle.py In practice, custom transformations can be a lot more complex than our example, but the idea is the same. Ok, so the main challenge in this approach, is that pickling is often tricky. That is why I want to share with you some good practices that I learned from my few experiences: Avoid using imports from other python scripts as much as possible (imports from libraries are ok of course). Example: Say that in the previous example is_adult is imported from a different file: ` from other_script import is_adult`. This won\u2019t be serialisable by any serialisation lib like Pickle, Dill, Joblib or Cloudpickle because they do not serialise imports by default. The solution is to have everything used by the pipeline in the same script that creates the pipeline. However if you have a strong reason against putting everything in the same file, you could always replace the ` import other_script` by `` to make it work. Avoid using lambdas because generally they are not easy to serialize. While Dill is able to serialize lambdas, the standard Pickle lib cannot. You could say that you can use Dill then. This is true, but beware! Some components in Scikit-learn use the standard Pickle for parallelisation like GridSearchCV. So what you want to parallelise should be not only \u201cdillable\u201d but also \u201cpicklable\u201d. Here is an example of how to avoid using lambdas: Say that instead of `is_adult` you have ` def is_bigger_than (x, threshold): return x > threshold`. In the DatafameMapper you want to apply x ->  to the column \u201cage\u201d. So, instead of doing: `))` you could write ``. Voil\u00e0 ! When you are stuck don\u2019t hesitate to try different pickling libraries, and remember, everything has a solution. However, when you are really stuck, ping-pong or foosball could really help. Finally, with the black box approach, not only you can embark all the weird stuff that you do in feature engineering, but also you can put your own custom ML model! The demo For the demo I will try to write a clean version of the above scripts. We will use Sklearn and Pandas for the training part and Flask for the server part. We will also use a parallelised GridSearchCV for our pipeline. Note that in real life it\u2019s more complicated than this demo code, since you will probably need an orchestration mechanism to handle model releases and transfer . Last but not least, if you have any comments or critics, please don\u2019t hesitate to share them below. I would be very happy to discuss them with you. Original . Reposted with permission. Bio:\u00a0 Amine Baatout is a data scientist at ContentSquare , focusing on machine learning engineering, algorithms and software design. Related: Accelerating Your Algorithms in Production with Python and Intel MKL, Sep 21 What is hardcore data science \u2013 in practice? Data Science & Machine Learning Platforms for the Enterprise", "title_html": "<h1 id=\"title\"><img align=\"right\" alt=\"Silver Blog, Sep 2017\" src=\"/images/top-kdnuggets-blog-2017-sep-silver.png\" width=\"94\"/>Putting Machine Learning in Production</h1> ", "url": "https://www.kdnuggets.com/2017/09/putting-machine-learning-production.html", "tfidf": {"tfidf": {"after": 1.02070207021, "real": 2.28103448276, "onc": 2.9949066213999997, "too": 3.6317053643, "relat": 1.23750876919, "lambda": 273.72413793090004, "panda": 111.802816901, "encapsul": 68.72727272729999, "orchestr": 15.2214765101, "dataset": 193.609756098, "happi": 6.125, "hardcor": 58.1538461538, "python": 394.0851063828, "sep": 42.223404255300004, "well": 1.0655748708, "product": 4.86794766966, "done": 2.3302509907499998, "creat": 2.4985835694, "approach": 20.7556543339, "dillabl": 1587.6, "weird": 41.2363636364, "won": 2.31732593782, "translat": 2.85745140389, "instead": 4.78384893531, "least": 3.2330719886000003, "flask": 240.545454545, "thing": 2.4065484311099996, "test": 2.65707112971, "repost": 933.882352941, "json": 1587.6, "maintain": 1.77306231852, "initi": 1.35, "due": 1.23789473684, "end": 2.21360847742, "will": 11.02329887364, "true": 2.55569864778, "consid": 1.2397313759200002, "standalon": 212.625, "somewher": 15.5647058824, "datafamemapp": 1587.6, "new": 1.0178880554, "below": 2.25607503197, "but": 7.11426925293, "need": 4.31178707223, "our": 14.14553014554, "otherscript": 3175.2, "top": 1.8387769284200002, "integr": 2.8254137746900003, "has": 3.1309492505999996, "have": 8.119158729119999, "replac": 1.5602948402899999, "advantag": 3.32412060302, "would": 4.331491712719999, "experi": 1.87062566278, "default": 21.1398135819, "isbiggerthan": 1587.6, "model": 43.9025546484, "treat": 3.59023066486, "good": 3.03963239518, "alway": 6.2023701002700005, "lib": 240.54545454599997, "pingpong": 1587.6, "exagger": 14.8651685393, "cours": 2.15092805853, "numer": 1.83325635104, "voil\u00e0": 1587.6, "program": 4.04278074866, "when": 3.0623030926499997, "not": 10.1567398119, "compon": 8.18983750322, "logist": 14.0994671403, "pleas": 9.12938470385, "easi": 5.2937645882, "tweak": 113.4, "handl": 7.845811712380001, "stuff": 46.6255506608, "then": 2.17315721032, "complic": 5.6478121664900005, "separ": 3.2024205748799996, "they": 3.09051975861, "design": 1.45825296225, "anoth": 1.13643521832, "instal": 3.78721374046, "last": 2.4234468020200004, "let": 10.45849802373, "scienc": 6.959088252479999, "featur": 7.6356290881, "diabet": 39.297029703, "practic": 5.11304347827, "lack": 1.9271667880599999, "simpl": 3.3981164383599998, "stuck": 37.890214797199995, "itself": 1.74557449148, "provid": 1.21552714187, "offer": 1.53896859248, "softwar": 10.2624434389, "order": 1.24625166811, "lot": 4.40877534018, "some": 3.1211009174399997, "runpicklepi": 1587.6, "should": 8.32162700495, "traintestsplitpi": 1587.6, "version": 2.0083491461099996, "classic": 2.4087391898, "repositori": 44.974504249300004, "platform": 6.2332155476999995, "set": 2.37415881562, "ani": 3.40151406942, "improv": 2.04376930999, "from": 11.00623936467, "train": 27.1119785314, "awesom": 108.0, "exot": 21.483085250300004, "work": 3.34560269739, "num": 8.00252032008, "idea": 2.0930784443, "environ": 6.87123999134, "safe": 5.02723242559, "tricki": 115.883211679, "serialis": 747.105882352, "for": 11.00346544011, "predict": 36.293925538850004, "output": 7.676982591880001, "releas": 5.5131380946899995, "with": 11.013180298889997, "pima": 283.5, "much": 1.1942229577299999, "are": 8.23924748624, "solut": 14.183442525299998, "split": 3.4709226060300002, "better": 4.0131445905000005, "intel": 54.5567010309, "preprocess": 3663.6923076900002, "option": 8.09793420046, "veri": 1.25880114177, "bottom": 6.27261951798, "pickl": 405.0, "object": 2.3488681757700003, "isadult": 6350.4, "focus": 2.01012914662, "column": 7.078020508250001, "again": 1.50883862384, "contentsquar": 3175.2, "littl": 1.5499365420299998, "give": 1.3653250774, "proper": 3.3388012618299996, "side": 11.1926679424, "place": 1.1004366812200002, "simul": 11.4793926247, "avoid": 7.379609544479999, "step": 2.8279301745599996, "total": 1.5460122699399999, "framework": 16.400826446279996, "mess": 34.588235294099995, "stick": 11.5377906977, "big": 5.480151881259999, "librari": 13.41331530925, "eat": 7.50638297872, "note": 2.84899057874, "accept": 1.7377408056, "probabl": 5.29111814698, "scientist": 4.69426374926, "machin": 20.121673003799998, "reproduc": 12.6805111821, "readi": 5.15789473684, "foosbal": 1587.6, "yes": 14.1876675603, "abov": 1.90382539873, "requir": 1.52844902282, "figur": 12.2060481804, "descript": 4.00504540868, "coeffici": 145.9862068964, "what": 5.01373756512, "rememb": 4.88793103448, "local": 1.51720183486, "choos": 8.35798894446, "hesit": 37.3552941176, "against": 1.2902072328299998, "help": 1.39962972759, "main": 1.25303867403, "demo": 86.1265822785, "picklabl": 1587.6, "doubl": 2.9713644020200003, "own": 2.35688836104, "baatout": 3175.2, "label": 4.47715736041, "plenti": 17.4078947368, "permiss": 6.280063291139999, "here": 4.84615384616, "proverb": 73.8418604651, "embark": 10.5488372093, "black": 13.644198895039999, "attent": 2.81040892193, "clean": 6.86975335353, "script": 24.897020386830004, "config": 4762.799999999999, "henc": 5.390831918509999, "entiti": 6.89361702128, "articl": 2.01805008262, "scikitlearn": 3175.2, "how": 4.80750984153, "sure": 7.453521126760001, "duplic": 19.7955112219, "standard": 5.674728940770001, "can": 14.11513669704, "where": 1.06715063521, "live": 1.30591428806, "save": 2.8178913737999998, "complex": 2.34021226415, "standardis": 45.884393063599994, "start": 1.26673581744, "run": 3.11385701676, "them": 3.29628347982, "load": 27.21988855552, "whi": 3.2566153846200003, "independ": 1.58950740889, "anyth": 9.17687861272, "savemodelcoefficientspi": 1587.6, "other": 1.00992366412, "support": 3.8056731921600004, "abl": 3.6417020300400003, "critic": 1.67010309278, "appli": 2.2972073506, "the": 75.0, "age": 1.48623853211, "often": 2.5890410959, "build": 4.9025218734000005, "neglect": 11.4298056156, "parallelis": 4762.799999999999, "algorithm": 55.9014084508, "redund": 29.7861163227, "dslframework": 1587.6, "consum": 4.93043478261, "same": 4.47431832592, "sklearn": 1587.6, "there": 3.12273800157, "extrem": 2.36602086438, "logreg": 3175.2, "possibl": 1.4173734488, "say": 7.0177920212, "phase": 8.602546735299999, "exampl": 7.5241706161, "follow": 1.04640126549, "now": 2.321561746, "tri": 11.126737530659998, "configur": 23.008695652199997, "code": 31.045710095359997, "hard": 2.73253012048, "than": 3.0983606557499996, "regress": 51.2129032258, "realli": 9.495215311, "issu": 1.43921675279, "also": 3.04429530201, "mani": 1.04426757877, "everyth": 19.2786885246, "mean": 1.44906900329, "acceler": 8.15408320493, "task": 7.77282741738, "research": 1.9420183486200002, "afford": 7.0875, "challeng": 2.55816951337, "want": 11.98188679248, "concret": 10.0100882724, "threshold": 46.01739130439999, "howev": 5.4725956566499985, "share": 3.7132499123000002, "def": 81.83505154640001, "dark": 3.98594024605, "regard": 1.78944995491, "numst": 2.6297830047999997, "which": 3.015575535, "bewar": 131.20661157, "thus": 1.6463756092500001, "mechan": 3.41492794149, "raw": 21.2957746478, "refer": 1.30024570025, "one": 2.01254991444, "impact": 2.97526236882, "custom": 18.1730769231, "box": 28.887964647780002, "becaus": 2.2990369994999997, "like": 3.44755700325, "pickleexportpi": 1587.6, "file": 15.084085510679998, "part": 5.216534139449999, "both": 1.05215720061, "transform": 20.52046531668, "put": 4.97420365536, "access": 1.8734953976900002, "this": 10.037936267100001, "transfer": 19.07845493561, "time": 1.01127460348, "engin": 12.35678704855, "chang": 2.3617970842, "project": 1.7534791252500002, "differ": 4.946179609, "gridsearchcv": 3175.2, "previous": 2.85693719632, "amin": 122.5945945946, "binari": 32.4, "indian": 3.5046357615900003, "between": 1.03453668708, "return": 1.39532431007, "everi": 1.47917637194, "beforehand": 43.8563535912, "along": 2.5947536160799998, "all": 4.04587155964, "everyon": 6.3964544722, "reason": 1.72340425532, "strong": 1.6439888163999998, "whatev": 7.6473988439300005, "that": 23.09163346625, "sort": 5.188235294119999, "weight": 4.878918254459999, "final": 1.34008609775, "more": 4.0686827268, "and": 24.001511811119997, "while": 1.0441988950299999, "discuss": 6.59028642591, "these": 1.07415426252, "prepar": 2.43012398592, "life": 1.37051104972, "general": 2.2436404748400003, "could": 9.6349567592, "realtim": 429.081081081, "comment": 6.11909809212, "numinnum": 1587.6, "cloudpickl": 1587.6, "serv": 1.4668760972, "languag": 4.58976582828, "describ": 1.47027227264, "make": 4.305064063440001, "few": 2.63458347162, "way": 3.6572218383, "write": 6.172628304810001, "onli": 2.0512953033200003, "bring": 2.03616775683, "serial": 34.0930565496, "accur": 5.768895348840001, "common": 1.4025974025999999, "enterpris": 6.414545454550001, "data": 23.63504891538, "method": 2.5714285714300003, "transpar": 15.876, "sinc": 1.08368600683, "bio": 42.336000000000006, "must": 1.9220338983099996, "origin": 1.13724928367, "modul": 16.9434364995, "direct": 1.22226499346, "import": 8.041195340220002, "server": 761.43884892, "input": 12.2029208301, "dill": 747.105882352, "joblib": 1587.6, "use": 13.385303845939998, "score": 4.2884927066500005, "easili": 3.6938110749199997, "rare": 2.7259615384599996, "learn": 11.61375274325, "pipelin": 160.6882591095}, "logtfidf": {"after": 0.020490694648099998, "real": 0.824629060574, "onc": 0.80753174471, "too": 1.1931103094439999, "relat": 0.21310030165399999, "lambda": 13.540525544070002, "panda": 4.7167367562999996, "encapsul": 4.230146103380001, "orchestr": 2.7227073588999997, "dataset": 5.26584456664, "happi": 1.81237875643, "hardcor": 4.06309201872, "python": 28.21459720072, "sep": 3.74297467051, "well": 0.0635144383156, "product": 1.452180409608, "done": 0.845975983129, "creat": 0.445153637028, "approach": 7.302336145810001, "dillabl": 7.369978720910001, "weird": 3.7193204796199995, "won": 0.8404139079, "translat": 1.0499301100299998, "instead": 1.399899451245, "least": 0.96057116949, "flask": 5.482909071880001, "thing": 0.8781935346799999, "test": 0.977224437103, "repost": 6.83935046985, "json": 7.369978720910001, "maintain": 0.572708175102, "initi": 0.30010459245, "due": 0.21341214386399998, "end": 0.202953597236, "will": 1.825078814235, "true": 0.938325629634, "consid": 0.214894723824, "standalon": 12.782753286150001, "somewher": 2.7450059076200004, "datafamemapp": 7.369978720910001, "new": 0.0177299468511, "below": 0.813626591936, "but": 0.1133466045033, "need": 1.088220490326, "our": 5.145835285092001, "otherscript": 14.739957441820001, "top": 0.609100637788, "integr": 1.03865482279, "has": 0.1281718345644, "have": 0.1182800187296, "replac": 0.444874803592, "advantag": 1.20120515883, "would": 0.3184705118588, "experi": 0.626272953933, "default": 3.0511581621399997, "isbiggerthan": 7.369978720910001, "model": 15.486451535331001, "treat": 1.27821645249, "good": 0.837178809814, "alway": 2.1789576137160003, "lib": 9.579523782639999, "pingpong": 7.369978720910001, "exagger": 2.6990207943799995, "cours": 0.765899404133, "numer": 0.606093812346, "voil\u00e0": 7.369978720910001, "program": 1.4075711575299998, "when": 0.0616649665752, "not": 0.155524130075, "compon": 2.81949375246, "logist": 2.6461370052, "pleas": 2.21149829955, "easi": 1.6665296351499999, "tweak": 4.73092139129, "handl": 2.73366533806, "stuff": 6.298003015499999, "then": 0.16606773046179998, "complic": 1.7312682430000002, "separ": 0.941519545898, "they": 0.0891809843028, "design": 0.377239118022, "anoth": 0.127896361652, "instal": 1.3316305879, "last": 0.38408728922200003, "let": 3.7464077018399995, "scienc": 2.524308536673, "featur": 2.11693709071, "diabet": 3.6711489359400002, "practic": 1.5995475926009999, "lack": 0.656050938907, "simpl": 1.2232212893899999, "stuck": 5.88309142684, "itself": 0.5570837229510001, "provid": 0.19517784432500002, "offer": 0.431112446902, "softwar": 2.32849096333, "order": 0.22014038079300002, "lot": 1.4835969502500002, "some": 0.11872052719350001, "runpicklepi": 7.369978720910001, "should": 2.54709938379, "traintestsplitpi": 7.369978720910001, "version": 0.697313064259, "classic": 0.8791034528499999, "repositori": 3.8060957569699996, "platform": 1.8298923389200001, "set": 0.342992022578, "ani": 0.376825075098, "improv": 0.7147958039319999, "from": 0.006237595857525999, "train": 9.252856379746001, "awesom": 4.682131227119999, "exot": 3.06726589295, "work": 0.327103701819, "num": 0.0025199231631760004, "idea": 0.73863592212, "environ": 2.4683948060599996, "safe": 1.61486961909, "tricki": 4.75258288807, "serialis": 20.91965022964, "for": 0.0034648943493670007, "predict": 11.52018166383, "output": 2.03822657827, "releas": 1.825565098632, "with": 0.01317240884729, "pima": 5.647212123169999, "much": 0.17749572930100002, "are": 0.2357397886616, "solut": 4.660388928810001, "split": 1.24442043932, "better": 1.3928558812, "intel": 3.9992405467300003, "preprocess": 21.322843369319997, "option": 2.79692362322, "veri": 0.230159793238, "bottom": 1.8361940533599999, "pickl": 21.972245773349997, "object": 0.853933584803, "isadult": 29.479914883640003, "focus": 0.6981989720559999, "column": 1.95699427938, "again": 0.411340231612, "contentsquar": 14.739957441820001, "littl": 0.438213989466, "give": 0.311392552224, "proper": 1.2056118389200001, "side": 3.2854413680829997, "place": 0.0957070839572, "simul": 2.44055348224, "avoid": 2.700325323873, "step": 1.03954505698, "total": 0.43567888670500005, "framework": 4.20836909214, "mess": 3.54351360384, "stick": 2.4456277954099996, "big": 2.01597127114, "librari": 4.934049904715, "eat": 2.01575372242, "note": 0.707635136166, "accept": 0.552585882007, "probabl": 1.945764825826, "scientist": 1.54634128444, "machin": 6.9617979031, "reproduc": 2.54006626224, "readi": 1.6405284994999998, "foosbal": 7.369978720910001, "yes": 2.65237310559, "abov": 0.643865229816, "requir": 0.424253510675, "figur": 4.261032672960001, "descript": 1.38755491845, "coeffici": 14.388871131239998, "what": 0.903549187308, "rememb": 1.5867691126199999, "local": 0.416867740206, "choos": 2.86014132144, "hesit": 5.8546549288400005, "against": 0.254802851078, "help": 0.336207721344, "main": 0.225571540588, "demo": 10.071617437139999, "picklabl": 7.369978720910001, "doubl": 1.0890212419499998, "own": 0.328390154842, "baatout": 14.739957441820001, "label": 1.49898832727, "plenti": 2.8569238238300003, "permiss": 1.8373800586400002, "here": 1.7700763767400003, "proverb": 4.30192578578, "embark": 2.35601563672, "black": 4.6718300500689995, "attent": 1.03332999658, "clean": 1.9271282036300001, "script": 6.348407533379999, "config": 22.10993616273, "henc": 1.68469971782, "entiti": 1.93059591408, "articl": 0.702131739574, "scikitlearn": 14.739957441820001, "how": 1.4147008707900002, "sure": 2.0086865552, "duplic": 2.98545520604, "standard": 1.91223152946, "can": 1.948093156728, "where": 0.0649921387457, "live": 0.266903399347, "save": 1.03598886547, "complex": 0.8502416364309999, "standardis": 3.82612503885, "start": 0.236443369291, "run": 0.885429951078, "them": 0.2825499807279, "load": 7.67061416752, "whi": 1.18068843047, "independ": 0.463424162503, "anyth": 3.0470798917, "savemodelcoefficientspi": 7.369978720910001, "other": 0.00987474791976, "support": 0.713641830111, "abl": 1.19860796495, "critic": 0.512885356729, "appli": 0.8316941898119999, "the": 0.0, "age": 0.39624845300300005, "often": 0.516280786702, "build": 1.4734123562730002, "neglect": 2.43622447115, "parallelis": 22.10993616273, "algorithm": 6.66088479036, "redund": 3.3940423897400005, "dslframework": 7.369978720910001, "consum": 1.5954271753600002, "same": 0.448238598416, "sklearn": 7.369978720910001, "there": 0.12029367877649999, "extrem": 0.8612095839370001, "logreg": 14.739957441820001, "possibl": 0.348805474891, "say": 2.248617122208, "phase": 2.9178222217400003, "exampl": 2.0434133749949996, "follow": 0.045356911094199995, "now": 0.298185890042, "tri": 3.7055491749600002, "configur": 4.885450071499999, "code": 10.84815276776, "hard": 1.00522796406, "than": 0.0967825866546, "regress": 3.9359915164199997, "realli": 3.1152816794, "issu": 0.364099043934, "also": 0.0439714734, "mani": 0.0433157581221, "everyth": 6.29082361268, "mean": 0.37092128352, "acceler": 2.0985188085299997, "task": 2.71497361322, "research": 0.663727818138, "afford": 1.95833266905, "challeng": 0.9392919688950001, "want": 4.149819637529999, "concret": 2.3035934117099996, "threshold": 6.271744432619999, "howev": 0.4515755867375, "share": 1.237520599494, "def": 4.40470565484, "dark": 1.38277323072, "regard": 0.5819082848730001, "numst": 0.966901335107, "which": 0.01553524153629, "bewar": 4.87677326831, "thus": 0.49857627139300004, "mechan": 1.22815639221, "raw": 4.73072299828, "refer": 0.262553246798, "one": 0.012510703291, "impact": 1.09033222631, "custom": 6.452516482399999, "box": 9.92260437805, "becaus": 0.27868631765, "like": 0.417160729635, "pickleexportpi": 7.369978720910001, "file": 5.30938354892, "part": 0.21197655491400003, "both": 0.050842533389300004, "transform": 7.3779793624200005, "put": 1.516958999562, "access": 0.627805882716, "this": 0.037864490525, "transfer": 7.01854674829, "time": 0.0112115188626, "engin": 4.52383779138, "chang": 0.332551250116, "project": 0.561601885907, "differ": 0.849284485248, "gridsearchcv": 14.739957441820001, "previous": 0.713205920126, "amin": 8.2314715044, "binari": 3.4781584227999995, "indian": 1.25408659543, "between": 0.033953681165299995, "return": 0.333126868592, "everi": 0.391485427421, "beforehand": 3.78091960208, "along": 0.520688771834, "all": 0.04561052839119999, "everyon": 1.8557438481400002, "reason": 0.544301552962, "strong": 0.49712549393600003, "whatev": 2.0343655696200003, "that": 0.09145141273171999, "sort": 1.64639361896, "weight": 1.58492352612, "final": 0.292733863948, "more": 0.06809972639999999, "and": 0.0015117634095264, "while": 0.04324998379380001, "discuss": 2.3609535678599998, "these": 0.0715336194008, "prepar": 0.8879422790620001, "life": 0.315183699277, "general": 0.229905156126, "could": 1.4876501783200002, "realtim": 6.0616459012599995, "comment": 2.23653506908, "numinnum": 7.369978720910001, "cloudpickl": 7.369978720910001, "serv": 0.383135035608, "languag": 1.6613636488119998, "describ": 0.385447603125, "make": 0.29399063129159997, "few": 0.551155827306, "way": 0.5942745298050001, "write": 2.164537319631, "onli": 0.050648536658199995, "bring": 0.7110694905930001, "serial": 7.291444363950001, "accur": 1.75248061485, "common": 0.338325805271, "enterpris": 1.8585681389, "data": 8.5177440936, "method": 0.944461608841, "transpar": 2.76480853492, "sinc": 0.0803681994577, "bio": 3.7456377879300002, "must": 0.653383947388, "origin": 0.128612437587, "modul": 2.82988053166, "direct": 0.200705689496, "import": 1.756909662396, "server": 72.789551842, "input": 2.50167533539, "dill": 20.91965022964, "joblib": 7.369978720910001, "use": 0.37970425651080003, "score": 1.4559353207700003, "easili": 1.3066587367, "rare": 1.00282122403, "learn": 4.213760323724999, "pipelin": 17.350141483599998}, "logidf": {"after": 0.020490694648099998, "real": 0.824629060574, "onc": 0.403765872355, "too": 0.5965551547219999, "relat": 0.21310030165399999, "lambda": 4.513508514690001, "panda": 4.7167367562999996, "encapsul": 4.230146103380001, "orchestr": 2.7227073588999997, "dataset": 5.26584456664, "happi": 1.81237875643, "hardcor": 4.06309201872, "python": 4.03065674296, "sep": 3.74297467051, "well": 0.0635144383156, "product": 0.484060136536, "done": 0.845975983129, "creat": 0.222576818514, "approach": 0.7302336145810001, "dillabl": 7.369978720910001, "weird": 3.7193204796199995, "won": 0.8404139079, "translat": 1.0499301100299998, "instead": 0.46663315041500003, "least": 0.480285584745, "flask": 5.482909071880001, "thing": 0.8781935346799999, "test": 0.977224437103, "repost": 6.83935046985, "json": 7.369978720910001, "maintain": 0.572708175102, "initi": 0.30010459245, "due": 0.21341214386399998, "end": 0.101476798618, "will": 0.202786534915, "true": 0.938325629634, "consid": 0.214894723824, "standalon": 4.26091776205, "somewher": 2.7450059076200004, "datafamemapp": 7.369978720910001, "new": 0.0177299468511, "below": 0.813626591936, "but": 0.0161923720719, "need": 0.362740163442, "our": 0.8576392141820001, "otherscript": 7.369978720910001, "top": 0.609100637788, "integr": 1.03865482279, "has": 0.0427239448548, "have": 0.0147850023412, "replac": 0.444874803592, "advantag": 1.20120515883, "would": 0.0796176279647, "experi": 0.626272953933, "default": 3.0511581621399997, "isbiggerthan": 7.369978720910001, "model": 0.7374500731110001, "treat": 1.27821645249, "good": 0.418589404907, "alway": 0.726319204572, "lib": 4.7897618913199995, "pingpong": 7.369978720910001, "exagger": 2.6990207943799995, "cours": 0.765899404133, "numer": 0.606093812346, "voil\u00e0": 7.369978720910001, "program": 0.7037855787649999, "when": 0.0205549888584, "not": 0.0155524130075, "compon": 1.40974687623, "logist": 2.6461370052, "pleas": 2.21149829955, "easi": 1.6665296351499999, "tweak": 4.73092139129, "handl": 1.36683266903, "stuff": 3.1490015077499995, "then": 0.08303386523089999, "complic": 1.7312682430000002, "separ": 0.470759772949, "they": 0.0297269947676, "design": 0.377239118022, "anoth": 0.127896361652, "instal": 1.3316305879, "last": 0.19204364461100001, "let": 1.2488025672799998, "scienc": 0.841436178891, "featur": 0.423387418142, "diabet": 3.6711489359400002, "practic": 0.533182530867, "lack": 0.656050938907, "simpl": 1.2232212893899999, "stuck": 2.94154571342, "itself": 0.5570837229510001, "provid": 0.19517784432500002, "offer": 0.431112446902, "softwar": 2.32849096333, "order": 0.22014038079300002, "lot": 1.4835969502500002, "some": 0.0395735090645, "runpicklepi": 7.369978720910001, "should": 0.509419876758, "traintestsplitpi": 7.369978720910001, "version": 0.697313064259, "classic": 0.8791034528499999, "repositori": 3.8060957569699996, "platform": 1.8298923389200001, "set": 0.171496011289, "ani": 0.125608358366, "improv": 0.7147958039319999, "from": 0.000567054168866, "train": 0.660918312839, "awesom": 4.682131227119999, "exot": 3.06726589295, "work": 0.109034567273, "num": 0.00031499039539700004, "idea": 0.73863592212, "environ": 1.2341974030299998, "safe": 1.61486961909, "tricki": 4.75258288807, "serialis": 5.22991255741, "for": 0.00031499039539700004, "predict": 1.6457402376899999, "output": 2.03822657827, "releas": 0.608521699544, "with": 0.00119749171339, "pima": 5.647212123169999, "much": 0.17749572930100002, "are": 0.0294674735827, "solut": 1.55346297627, "split": 1.24442043932, "better": 0.6964279406, "intel": 3.9992405467300003, "preprocess": 7.1076144564399995, "option": 1.39846181161, "veri": 0.230159793238, "bottom": 1.8361940533599999, "pickl": 4.394449154669999, "object": 0.853933584803, "isadult": 7.369978720910001, "focus": 0.6981989720559999, "column": 1.95699427938, "again": 0.411340231612, "contentsquar": 7.369978720910001, "littl": 0.438213989466, "give": 0.311392552224, "proper": 1.2056118389200001, "side": 0.46934876686899996, "place": 0.0957070839572, "simul": 2.44055348224, "avoid": 0.900108441291, "step": 1.03954505698, "total": 0.43567888670500005, "framework": 2.10418454607, "mess": 3.54351360384, "stick": 2.4456277954099996, "big": 1.00798563557, "librari": 0.986809980943, "eat": 2.01575372242, "note": 0.353817568083, "accept": 0.552585882007, "probabl": 0.972882412913, "scientist": 1.54634128444, "machin": 1.39235958062, "reproduc": 2.54006626224, "readi": 1.6405284994999998, "foosbal": 7.369978720910001, "yes": 2.65237310559, "abov": 0.643865229816, "requir": 0.424253510675, "figur": 0.7101721121600001, "descript": 1.38755491845, "coeffici": 3.5972177828099996, "what": 0.225887296827, "rememb": 1.5867691126199999, "local": 0.416867740206, "choos": 1.43007066072, "hesit": 2.9273274644200002, "against": 0.254802851078, "help": 0.336207721344, "main": 0.225571540588, "demo": 3.3572058123799997, "picklabl": 7.369978720910001, "doubl": 1.0890212419499998, "own": 0.164195077421, "baatout": 7.369978720910001, "label": 1.49898832727, "plenti": 2.8569238238300003, "permiss": 1.8373800586400002, "here": 0.8850381883700001, "proverb": 4.30192578578, "embark": 2.35601563672, "black": 0.667404292867, "attent": 1.03332999658, "clean": 1.9271282036300001, "script": 2.1161358444599996, "config": 7.369978720910001, "henc": 1.68469971782, "entiti": 1.93059591408, "articl": 0.702131739574, "scikitlearn": 7.369978720910001, "how": 0.47156695693000006, "sure": 2.0086865552, "duplic": 2.98545520604, "standard": 0.63741050982, "can": 0.162341096394, "where": 0.0649921387457, "live": 0.266903399347, "save": 1.03598886547, "complex": 0.8502416364309999, "standardis": 3.82612503885, "start": 0.236443369291, "run": 0.442714975539, "them": 0.0941833269093, "load": 1.91765354188, "whi": 1.18068843047, "independ": 0.463424162503, "anyth": 1.52353994585, "savemodelcoefficientspi": 7.369978720910001, "other": 0.00987474791976, "support": 0.237880610037, "abl": 0.599303982475, "critic": 0.512885356729, "appli": 0.8316941898119999, "the": 0.0, "age": 0.39624845300300005, "often": 0.258140393351, "build": 0.491137452091, "neglect": 2.43622447115, "parallelis": 7.369978720910001, "algorithm": 3.33044239518, "redund": 3.3940423897400005, "dslframework": 7.369978720910001, "consum": 1.5954271753600002, "same": 0.112059649604, "sklearn": 7.369978720910001, "there": 0.0400978929255, "extrem": 0.8612095839370001, "logreg": 7.369978720910001, "possibl": 0.348805474891, "say": 0.562154280552, "phase": 1.4589111108700001, "exampl": 0.40868267499899996, "follow": 0.045356911094199995, "now": 0.149092945021, "tri": 0.61759152916, "configur": 2.4427250357499997, "code": 1.35601909597, "hard": 1.00522796406, "than": 0.0322608622182, "regress": 3.9359915164199997, "realli": 1.5576408397, "issu": 0.364099043934, "also": 0.0146571578, "mani": 0.0433157581221, "everyth": 1.57270590317, "mean": 0.37092128352, "acceler": 2.0985188085299997, "task": 1.35748680661, "research": 0.663727818138, "afford": 1.95833266905, "challeng": 0.9392919688950001, "want": 0.6916366062549999, "concret": 2.3035934117099996, "threshold": 3.1358722163099997, "howev": 0.0903151173475, "share": 0.618760299747, "def": 4.40470565484, "dark": 1.38277323072, "regard": 0.5819082848730001, "numst": 0.966901335107, "which": 0.00517841384543, "bewar": 4.87677326831, "thus": 0.49857627139300004, "mechan": 1.22815639221, "raw": 2.36536149914, "refer": 0.262553246798, "one": 0.0062553516455, "impact": 1.09033222631, "custom": 1.2905032964799998, "box": 1.41751491115, "becaus": 0.139343158825, "like": 0.139053576545, "pickleexportpi": 7.369978720910001, "file": 1.32734588723, "part": 0.04239531098280001, "both": 0.050842533389300004, "transform": 1.22966322707, "put": 0.505652999854, "access": 0.627805882716, "this": 0.0037864490525, "transfer": 1.00264953547, "time": 0.0112115188626, "engin": 0.904767558276, "chang": 0.166275625058, "project": 0.561601885907, "differ": 0.212321121312, "gridsearchcv": 7.369978720910001, "previous": 0.356602960063, "amin": 4.1157357522, "binari": 3.4781584227999995, "indian": 1.25408659543, "between": 0.033953681165299995, "return": 0.333126868592, "everi": 0.391485427421, "beforehand": 3.78091960208, "along": 0.260344385917, "all": 0.011402632097799998, "everyon": 1.8557438481400002, "reason": 0.544301552962, "strong": 0.49712549393600003, "whatev": 2.0343655696200003, "that": 0.00397614837964, "sort": 1.64639361896, "weight": 1.58492352612, "final": 0.292733863948, "more": 0.017024931599999998, "and": 6.29901420636e-05, "while": 0.04324998379380001, "discuss": 0.78698452262, "these": 0.0715336194008, "prepar": 0.8879422790620001, "life": 0.315183699277, "general": 0.114952578063, "could": 0.18595627229000003, "realtim": 6.0616459012599995, "comment": 1.11826753454, "numinnum": 7.369978720910001, "cloudpickl": 7.369978720910001, "serv": 0.383135035608, "languag": 0.8306818244059999, "describ": 0.385447603125, "make": 0.07349765782289999, "few": 0.275577913653, "way": 0.19809150993500002, "write": 0.721512439877, "onli": 0.025324268329099998, "bring": 0.7110694905930001, "serial": 2.43048145465, "accur": 1.75248061485, "common": 0.338325805271, "enterpris": 1.8585681389, "data": 1.2168205848, "method": 0.944461608841, "transpar": 2.76480853492, "sinc": 0.0803681994577, "bio": 3.7456377879300002, "must": 0.653383947388, "origin": 0.128612437587, "modul": 2.82988053166, "direct": 0.200705689496, "import": 0.292818277066, "server": 3.6394775921, "input": 2.50167533539, "dill": 5.22991255741, "joblib": 7.369978720910001, "use": 0.0292080197316, "score": 1.4559353207700003, "easili": 1.3066587367, "rare": 1.00282122403, "learn": 0.842752064745, "pipelin": 3.47002829672}, "freq": {"after": 1, "real": 1, "onc": 2, "too": 2, "relat": 1, "lambda": 3, "panda": 1, "encapsul": 1, "orchestr": 1, "dataset": 1, "happi": 1, "hardcor": 1, "python": 7, "sep": 1, "well": 1, "product": 3, "done": 1, "creat": 2, "approach": 10, "dillabl": 1, "weird": 1, "won": 1, "translat": 1, "instead": 3, "least": 2, "flask": 1, "thing": 1, "test": 1, "repost": 1, "json": 1, "maintain": 1, "initi": 1, "due": 1, "end": 2, "will": 9, "true": 1, "consid": 1, "standalon": 3, "somewher": 1, "datafamemapp": 1, "new": 1, "below": 1, "but": 7, "need": 3, "our": 6, "otherscript": 2, "top": 1, "integr": 1, "has": 3, "have": 8, "replac": 1, "advantag": 1, "would": 4, "experi": 1, "default": 1, "isbiggerthan": 1, "model": 21, "treat": 1, "good": 2, "alway": 3, "lib": 2, "pingpong": 1, "exagger": 1, "cours": 1, "numer": 1, "voil\u00e0": 1, "program": 2, "when": 3, "not": 10, "compon": 2, "logist": 1, "pleas": 1, "easi": 1, "tweak": 1, "handl": 2, "stuff": 2, "then": 2, "complic": 1, "separ": 2, "they": 3, "design": 1, "anoth": 1, "instal": 1, "last": 2, "let": 3, "scienc": 3, "featur": 5, "diabet": 1, "practic": 3, "lack": 1, "simpl": 1, "stuck": 2, "itself": 1, "provid": 1, "offer": 1, "softwar": 1, "order": 1, "lot": 1, "some": 3, "runpicklepi": 1, "should": 5, "traintestsplitpi": 1, "version": 1, "classic": 1, "repositori": 1, "platform": 1, "set": 2, "ani": 3, "improv": 1, "from": 11, "train": 14, "awesom": 1, "exot": 1, "work": 3, "num": 8, "idea": 1, "environ": 2, "safe": 1, "tricki": 1, "serialis": 4, "for": 11, "predict": 7, "output": 1, "releas": 3, "with": 11, "pima": 1, "much": 1, "are": 8, "solut": 3, "split": 1, "better": 2, "intel": 1, "preprocess": 3, "option": 2, "veri": 1, "bottom": 1, "pickl": 5, "object": 1, "isadult": 4, "focus": 1, "column": 1, "again": 1, "contentsquar": 2, "littl": 1, "give": 1, "proper": 1, "side": 7, "place": 1, "simul": 1, "avoid": 3, "step": 1, "total": 1, "framework": 2, "mess": 1, "stick": 1, "big": 2, "librari": 5, "eat": 1, "note": 2, "accept": 1, "probabl": 2, "scientist": 1, "machin": 5, "reproduc": 1, "readi": 1, "foosbal": 1, "yes": 1, "abov": 1, "requir": 1, "figur": 6, "descript": 1, "coeffici": 4, "what": 4, "rememb": 1, "local": 1, "choos": 2, "hesit": 2, "against": 1, "help": 1, "main": 1, "demo": 3, "picklabl": 1, "doubl": 1, "own": 2, "baatout": 2, "label": 1, "plenti": 1, "permiss": 1, "here": 2, "proverb": 1, "embark": 1, "black": 7, "attent": 1, "clean": 1, "script": 3, "config": 3, "henc": 1, "entiti": 1, "articl": 1, "scikitlearn": 2, "how": 3, "sure": 1, "duplic": 1, "standard": 3, "can": 12, "where": 1, "live": 1, "save": 1, "complex": 1, "standardis": 1, "start": 1, "run": 2, "them": 3, "load": 4, "whi": 1, "independ": 1, "anyth": 2, "savemodelcoefficientspi": 1, "other": 1, "support": 3, "abl": 2, "critic": 1, "appli": 1, "the": 75, "age": 1, "often": 2, "build": 3, "neglect": 1, "parallelis": 3, "algorithm": 2, "redund": 1, "dslframework": 1, "consum": 1, "same": 4, "sklearn": 1, "there": 3, "extrem": 1, "logreg": 2, "possibl": 1, "say": 4, "phase": 2, "exampl": 5, "follow": 1, "now": 2, "tri": 6, "configur": 2, "code": 8, "hard": 1, "than": 3, "regress": 1, "realli": 2, "issu": 1, "also": 3, "mani": 1, "everyth": 4, "mean": 1, "acceler": 1, "task": 2, "research": 1, "afford": 1, "challeng": 1, "want": 6, "concret": 1, "threshold": 2, "howev": 5, "share": 2, "def": 1, "dark": 1, "regard": 1, "numst": 1, "which": 3, "bewar": 1, "thus": 1, "mechan": 1, "raw": 2, "refer": 1, "one": 2, "impact": 1, "custom": 5, "box": 7, "becaus": 2, "like": 3, "pickleexportpi": 1, "file": 4, "part": 5, "both": 1, "transform": 6, "put": 3, "access": 1, "this": 10, "transfer": 7, "time": 1, "engin": 5, "chang": 2, "project": 1, "differ": 4, "gridsearchcv": 2, "previous": 2, "amin": 2, "binari": 1, "indian": 1, "between": 1, "return": 1, "everi": 1, "beforehand": 1, "along": 2, "all": 4, "everyon": 1, "reason": 1, "strong": 1, "whatev": 1, "that": 23, "sort": 1, "weight": 1, "final": 1, "more": 4, "and": 24, "while": 1, "discuss": 3, "these": 1, "prepar": 1, "life": 1, "general": 2, "could": 8, "realtim": 1, "comment": 2, "numinnum": 1, "cloudpickl": 1, "serv": 1, "languag": 2, "describ": 1, "make": 4, "few": 2, "way": 3, "write": 3, "onli": 2, "bring": 1, "serial": 3, "accur": 1, "common": 1, "enterpris": 1, "data": 7, "method": 1, "transpar": 1, "sinc": 1, "bio": 1, "must": 1, "origin": 1, "modul": 1, "direct": 1, "import": 6, "server": 20, "input": 1, "dill": 4, "joblib": 1, "use": 13, "score": 1, "easili": 1, "rare": 1, "learn": 5, "pipelin": 5}, "idf": {"after": 1.02070207021, "real": 2.28103448276, "onc": 1.4974533106999999, "too": 1.81585268215, "relat": 1.23750876919, "lambda": 91.2413793103, "panda": 111.802816901, "encapsul": 68.72727272729999, "orchestr": 15.2214765101, "dataset": 193.609756098, "happi": 6.125, "hardcor": 58.1538461538, "python": 56.2978723404, "sep": 42.223404255300004, "well": 1.0655748708, "product": 1.62264922322, "done": 2.3302509907499998, "creat": 1.2492917847, "approach": 2.07556543339, "dillabl": 1587.6, "weird": 41.2363636364, "won": 2.31732593782, "translat": 2.85745140389, "instead": 1.59461631177, "least": 1.6165359943000002, "flask": 240.545454545, "thing": 2.4065484311099996, "test": 2.65707112971, "repost": 933.882352941, "json": 1587.6, "maintain": 1.77306231852, "initi": 1.35, "due": 1.23789473684, "end": 1.10680423871, "will": 1.22481098596, "true": 2.55569864778, "consid": 1.2397313759200002, "standalon": 70.875, "somewher": 15.5647058824, "datafamemapp": 1587.6, "new": 1.0178880554, "below": 2.25607503197, "but": 1.01632417899, "need": 1.4372623574099999, "our": 2.35758835759, "otherscript": 1587.6, "top": 1.8387769284200002, "integr": 2.8254137746900003, "has": 1.0436497502, "have": 1.0148948411399998, "replac": 1.5602948402899999, "advantag": 3.32412060302, "would": 1.0828729281799998, "experi": 1.87062566278, "default": 21.1398135819, "isbiggerthan": 1587.6, "model": 2.0905978404, "treat": 3.59023066486, "good": 1.51981619759, "alway": 2.06745670009, "lib": 120.27272727299999, "pingpong": 1587.6, "exagger": 14.8651685393, "cours": 2.15092805853, "numer": 1.83325635104, "voil\u00e0": 1587.6, "program": 2.02139037433, "when": 1.02076769755, "not": 1.01567398119, "compon": 4.09491875161, "logist": 14.0994671403, "pleas": 9.12938470385, "easi": 5.2937645882, "tweak": 113.4, "handl": 3.9229058561900003, "stuff": 23.3127753304, "then": 1.08657860516, "complic": 5.6478121664900005, "separ": 1.6012102874399998, "they": 1.03017325287, "design": 1.45825296225, "anoth": 1.13643521832, "instal": 3.78721374046, "last": 1.2117234010100002, "let": 3.48616600791, "scienc": 2.31969608416, "featur": 1.52712581762, "diabet": 39.297029703, "practic": 1.70434782609, "lack": 1.9271667880599999, "simpl": 3.3981164383599998, "stuck": 18.945107398599998, "itself": 1.74557449148, "provid": 1.21552714187, "offer": 1.53896859248, "softwar": 10.2624434389, "order": 1.24625166811, "lot": 4.40877534018, "some": 1.04036697248, "runpicklepi": 1587.6, "should": 1.6643254009900001, "traintestsplitpi": 1587.6, "version": 2.0083491461099996, "classic": 2.4087391898, "repositori": 44.974504249300004, "platform": 6.2332155476999995, "set": 1.18707940781, "ani": 1.13383802314, "improv": 2.04376930999, "from": 1.00056721497, "train": 1.9365698950999999, "awesom": 108.0, "exot": 21.483085250300004, "work": 1.11520089913, "num": 1.00031504001, "idea": 2.0930784443, "environ": 3.43561999567, "safe": 5.02723242559, "tricki": 115.883211679, "serialis": 186.776470588, "for": 1.00031504001, "predict": 5.18484650555, "output": 7.676982591880001, "releas": 1.8377126982299998, "with": 1.0011982089899998, "pima": 283.5, "much": 1.1942229577299999, "are": 1.02990593578, "solut": 4.7278141751, "split": 3.4709226060300002, "better": 2.0065722952500002, "intel": 54.5567010309, "preprocess": 1221.23076923, "option": 4.04896710023, "veri": 1.25880114177, "bottom": 6.27261951798, "pickl": 81.0, "object": 2.3488681757700003, "isadult": 1587.6, "focus": 2.01012914662, "column": 7.078020508250001, "again": 1.50883862384, "contentsquar": 1587.6, "littl": 1.5499365420299998, "give": 1.3653250774, "proper": 3.3388012618299996, "side": 1.5989525632, "place": 1.1004366812200002, "simul": 11.4793926247, "avoid": 2.45986984816, "step": 2.8279301745599996, "total": 1.5460122699399999, "framework": 8.200413223139998, "mess": 34.588235294099995, "stick": 11.5377906977, "big": 2.7400759406299997, "librari": 2.68266306185, "eat": 7.50638297872, "note": 1.42449528937, "accept": 1.7377408056, "probabl": 2.64555907349, "scientist": 4.69426374926, "machin": 4.02433460076, "reproduc": 12.6805111821, "readi": 5.15789473684, "foosbal": 1587.6, "yes": 14.1876675603, "abov": 1.90382539873, "requir": 1.52844902282, "figur": 2.0343413634, "descript": 4.00504540868, "coeffici": 36.4965517241, "what": 1.25343439128, "rememb": 4.88793103448, "local": 1.51720183486, "choos": 4.17899447223, "hesit": 18.6776470588, "against": 1.2902072328299998, "help": 1.39962972759, "main": 1.25303867403, "demo": 28.7088607595, "picklabl": 1587.6, "doubl": 2.9713644020200003, "own": 1.17844418052, "baatout": 1587.6, "label": 4.47715736041, "plenti": 17.4078947368, "permiss": 6.280063291139999, "here": 2.42307692308, "proverb": 73.8418604651, "embark": 10.5488372093, "black": 1.94917127072, "attent": 2.81040892193, "clean": 6.86975335353, "script": 8.299006795610001, "config": 1587.6, "henc": 5.390831918509999, "entiti": 6.89361702128, "articl": 2.01805008262, "scikitlearn": 1587.6, "how": 1.60250328051, "sure": 7.453521126760001, "duplic": 19.7955112219, "standard": 1.8915763135900003, "can": 1.17626139142, "where": 1.06715063521, "live": 1.30591428806, "save": 2.8178913737999998, "complex": 2.34021226415, "standardis": 45.884393063599994, "start": 1.26673581744, "run": 1.55692850838, "them": 1.09876115994, "load": 6.80497213888, "whi": 3.2566153846200003, "independ": 1.58950740889, "anyth": 4.58843930636, "savemodelcoefficientspi": 1587.6, "other": 1.00992366412, "support": 1.2685577307200002, "abl": 1.8208510150200001, "critic": 1.67010309278, "appli": 2.2972073506, "the": 1.0, "age": 1.48623853211, "often": 1.29452054795, "build": 1.6341739578, "neglect": 11.4298056156, "parallelis": 1587.6, "algorithm": 27.9507042254, "redund": 29.7861163227, "dslframework": 1587.6, "consum": 4.93043478261, "same": 1.11857958148, "sklearn": 1587.6, "there": 1.04091266719, "extrem": 2.36602086438, "logreg": 1587.6, "possibl": 1.4173734488, "say": 1.7544480053, "phase": 4.3012733676499995, "exampl": 1.50483412322, "follow": 1.04640126549, "now": 1.160780873, "tri": 1.8544562551099997, "configur": 11.504347826099998, "code": 3.8807137619199996, "hard": 2.73253012048, "than": 1.03278688525, "regress": 51.2129032258, "realli": 4.7476076555, "issu": 1.43921675279, "also": 1.01476510067, "mani": 1.04426757877, "everyth": 4.81967213115, "mean": 1.44906900329, "acceler": 8.15408320493, "task": 3.88641370869, "research": 1.9420183486200002, "afford": 7.0875, "challeng": 2.55816951337, "want": 1.99698113208, "concret": 10.0100882724, "threshold": 23.008695652199997, "howev": 1.0945191313299998, "share": 1.8566249561500001, "def": 81.83505154640001, "dark": 3.98594024605, "regard": 1.78944995491, "numst": 2.6297830047999997, "which": 1.005191845, "bewar": 131.20661157, "thus": 1.6463756092500001, "mechan": 3.41492794149, "raw": 10.6478873239, "refer": 1.30024570025, "one": 1.00627495722, "impact": 2.97526236882, "custom": 3.6346153846199996, "box": 4.12685209254, "becaus": 1.1495184997499999, "like": 1.14918566775, "pickleexportpi": 1587.6, "file": 3.7710213776699995, "part": 1.04330682789, "both": 1.05215720061, "transform": 3.42007755278, "put": 1.65806788512, "access": 1.8734953976900002, "this": 1.00379362671, "transfer": 2.72549356223, "time": 1.01127460348, "engin": 2.47135740971, "chang": 1.1808985421, "project": 1.7534791252500002, "differ": 1.23654490225, "gridsearchcv": 1587.6, "previous": 1.42846859816, "amin": 61.2972972973, "binari": 32.4, "indian": 3.5046357615900003, "between": 1.03453668708, "return": 1.39532431007, "everi": 1.47917637194, "beforehand": 43.8563535912, "along": 1.2973768080399999, "all": 1.01146788991, "everyon": 6.3964544722, "reason": 1.72340425532, "strong": 1.6439888163999998, "whatev": 7.6473988439300005, "that": 1.00398406375, "sort": 5.188235294119999, "weight": 4.878918254459999, "final": 1.34008609775, "more": 1.0171706817, "and": 1.00006299213, "while": 1.0441988950299999, "discuss": 2.19676214197, "these": 1.07415426252, "prepar": 2.43012398592, "life": 1.37051104972, "general": 1.1218202374200001, "could": 1.2043695949, "realtim": 429.081081081, "comment": 3.05954904606, "numinnum": 1587.6, "cloudpickl": 1587.6, "serv": 1.4668760972, "languag": 2.29488291414, "describ": 1.47027227264, "make": 1.0762660158600001, "few": 1.31729173581, "way": 1.2190739461, "write": 2.0575427682700003, "onli": 1.0256476516600002, "bring": 2.03616775683, "serial": 11.3643521832, "accur": 5.768895348840001, "common": 1.4025974025999999, "enterpris": 6.414545454550001, "data": 3.37643555934, "method": 2.5714285714300003, "transpar": 15.876, "sinc": 1.08368600683, "bio": 42.336000000000006, "must": 1.9220338983099996, "origin": 1.13724928367, "modul": 16.9434364995, "direct": 1.22226499346, "import": 1.3401992233700002, "server": 38.071942446, "input": 12.2029208301, "dill": 186.776470588, "joblib": 1587.6, "use": 1.0296387573799999, "score": 4.2884927066500005, "easili": 3.6938110749199997, "rare": 2.7259615384599996, "learn": 2.32275054865, "pipelin": 32.1376518219}}, "html": "<!DOCTYPE html>\n\n<html lang=\"en-US\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head profile=\"http://gmpg.org/xfn/11\">\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n<title>  Putting Machine Learning in Production</title>\n<link href=\"/wp-content/themes/kdn17/images/favicon.ico\" rel=\"shortcut icon\"/>\n<link href=\"/wp-content/themes/kdn17/style.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"/wp-content/themes/kdn17/js/jquery-1.9.1.min.js\" type=\"text/javascript\"></script>\n<script src=\"/aps/kda_all.js\" type=\"text/javascript\"></script>\n<link href=\"/feed/\" rel=\"alternate\" title=\"KDnuggets: Analytics, Big Data, Data Mining and Data Science Feed\" type=\"application/rss+xml\"/>\n<link href=\"//s.w.org\" rel=\"dns-prefetch\"/>\n<link href=\"https://www.kdnuggets.com/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/comments/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/2017/09/putting-machine-learning-production.html/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Putting Machine Learning in Production Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-json/\" rel=\"https://api.w.org/\"/>\n<link href=\"https://www.kdnuggets.com/xmlrpc.php?rsd\" rel=\"EditURI\" title=\"RSD\" type=\"application/rsd+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-includes/wlwmanifest.xml\" rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\"/>\n<link href=\"https://www.kdnuggets.com/2017/09/ensemble-learning-improve-machine-learning-results.html\" rel=\"prev\" title=\"Ensemble Learning to Improve Machine Learning Results\"/>\n<link href=\"https://www.kdnuggets.com/2017/09/cazena-easy-button-r-python-spark.html\" rel=\"next\" title=\"The Easy Button for R &amp; Python on Spark, Webinar Oct 18\"/>\n<meta content=\"WordPress 4.9.10\" name=\"generator\">\n<link href=\"https://www.kdnuggets.com/2017/09/putting-machine-learning-production.html\" rel=\"canonical\"/>\n<link href=\"https://www.kdnuggets.com/?p=71875\" rel=\"shortlink\"/>\n<link href=\"https://www.kdnuggets.com/2017/09/putting-machine-learning-production.html\" rel=\"canonical\"/>\n<!-- BEGIN ExactMetrics v5.3.7 Universal Analytics - https://exactmetrics.com/ -->\n<script>\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-361129-1', 'auto');\n  ga('send', 'pageview');\n</script>\n<!-- END ExactMetrics Universal Analytics -->\n</meta></head>\n<body class=\"post-template-default single single-post postid-71875 single-format-standard\">\n<div class=\"main_wrapper\"><!-- publ: 22-Sep, 2017  -->\n<div id=\"wrapper\">\n<div id=\"header\">\n<div id=\"header_log\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<h1>KDnuggets</h1>\n<div class=\"text-container\">\n            \u00a0\u00a0<a href=\"/news/subscribe.html\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a> \u00a0|\n <a href=\"https://twitter.com/kdnuggets\" target=\"_blank\"><img alt=\"Twitter\" height=\"48\" src=\"/images/tw_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n <a href=\"https://www.facebook.com/kdnuggets\" target=\"_blank\"><img alt=\"Facebook\" height=\"48\" src=\"/images/fb_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n<a href=\"https://www.linkedin.com/groups/54257/\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"48\" src=\"/images/in_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \n\u00a0|\u00a0 <a href=\"/contact.html\"><b>Contact</b></a>\n</div>\n</div>\n<div class=\"search\">\n<form action=\"/\" id=\"searchform\" method=\"get\">\n<input id=\"s\" name=\"s\" placeholder=\"search KDnuggets\" type=\"text\" value=\"\"/>\n<input type=\"submit\" value=\"Search\"/></form>\n</div>\n<div href=\"#\" id=\"pull\">\n<img class=\"menu\" src=\"/images/menu-30.png\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<img class=\"search-icon\" src=\"/images/search-icon.png\">\n</img></img></div>\n<div id=\"pull-menu\">\n<div class=\"navigation\"><ul class=\"menu\" id=\"menu-menu\"><li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-1070\" id=\"menu-item-1070\"><a href=\"/software/index.html\" title=\"Data Science Software\">SOFTWARE</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13756\" id=\"menu-item-13756\"><a href=\"/news/index.html\" title=\"News\">News/Blog</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-46286\" id=\"menu-item-46286\"><a href=\"/news/top-stories.html\">Top stories</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-42152\" id=\"menu-item-42152\"><a href=\"https://www.kdnuggets.com/opinions/index.html\" title=\"Opinions\">Opinions</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-46415\" id=\"menu-item-46415\"><a href=\"https://www.kdnuggets.com/tutorials/index.html\">Tutorials</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13364\" id=\"menu-item-13364\"><a href=\"/jobs/index.html\" title=\"Jobs in Analytics, Data Science\">JOBS</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-63505\" id=\"menu-item-63505\"><a href=\"https://www.kdnuggets.com/companies/index.html\">Companies</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13366\" id=\"menu-item-13366\"><a href=\"/courses/index.html\">Courses</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-1499\" id=\"menu-item-1499\"><a href=\"https://www.kdnuggets.com/datasets/index.html\">Datasets</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-14286\" id=\"menu-item-14286\"><a href=\"https://www.kdnuggets.com/education/index.html\" title=\"Education in Analytics, Big Data, Data Science\">EDUCATION</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-51558\" id=\"menu-item-51558\"><a href=\"https://www.kdnuggets.com/education/analytics-data-mining-certificates.html\" title=\"Certificates in Analytics, Big Data, Data Science\">Certificates</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-14752\" id=\"menu-item-14752\"><a href=\"/meetings/index.html\">Meetings</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13721\" id=\"menu-item-13721\"><a href=\"/webcasts/index.html\" title=\"Webcasts and Webinars\">Webinars</a></li>\n</ul></div></div>\n</div> <!--#header end-->\n<div id=\"spacer\">\n         \u00a0\n      </div>\n<div id=\"content_wrapper\">\n<div id=\"ad_wrapper\">\n<script type=\"text/javascript\">\n\tjQuery(function() {\n   \t    var pull        = $('#pull');\n            menu        = $('#header .navigation ul');\n            menuImage = $('#header img.menu');\n            mobileMenu        = $('#pull-menu-mobile');\n            search = $('img.search-icon');\n            searchBar = $('div.search');\n            searchClick = false;\n            search.on('click', function() {\n                  searchBar.slideToggle();\n                  searchClick = true;\n            });  \n     \t    $(menuImage).on('click', function(e) {\n\t        //e.preventDefault();\n                if (!searchClick) {\n                  menu.slideToggle();\n                }\n                searchClick = false;\n\t    });\n           /* pullMobile.on('click', function(e) {\n              e.preventDefault();\n                if (!searchClick) {\n                  mobileMenu.slideToggle();\n                }\n                searchClick = false;\n\t    });*/\n            \n\t});\n\tkpath = '/'; kda_top(); kda_sid_init(); kda_sid_n=3;\n\t</script>\n</div> <div class=\"breadcumb\">\n<br/>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2017/index.html\">2017</a> \u00bb <a href=\"https://www.kdnuggets.com/2017/09/index.html\">Sep</a> \u00bb <a href=\"https://www.kdnuggets.com/2017/09/tutorials.html\">Tutorials, Overviews</a> \u00bb Putting Machine Learning in Production (\u00a0<a href=\"/2017/n37.html\">17:n37</a>\u00a0)    </div>\n<div class=\"single\" id=\"content\">\n<div id=\"post-header\">\n<h1 id=\"title\"><img align=\"right\" alt=\"Silver Blog, Sep 2017\" src=\"/images/top-kdnuggets-blog-2017-sep-silver.png\" width=\"94\"/>Putting Machine Learning in Production</h1>\n<div class=\"pagi\">\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2017/09/ensemble-learning-improve-machine-learning-results.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"> <strong>Previous post</strong></img></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2017/09/cazena-easy-button-r-python-spark.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/>\u00a0<br/>\u00a0\n    <span class=\"http-likes\" style=\"float: left; font-size:14px\">http likes 123</span> <div class=\"addthis_native_toolbox\"></div>\n</div>\n<div class=\"tag-data\">Tags: <a href=\"https://www.kdnuggets.com/tag/data-science\" rel=\"tag\">Data Science</a>, <a href=\"https://www.kdnuggets.com/tag/data-science-platform\" rel=\"tag\">Data Science Platform</a>, <a href=\"https://www.kdnuggets.com/tag/machine-learning\" rel=\"tag\">Machine Learning</a>, <a href=\"https://www.kdnuggets.com/tag/production\" rel=\"tag\">Production</a>, <a href=\"https://www.kdnuggets.com/tag/python\" rel=\"tag\">Python</a>, <a href=\"https://www.kdnuggets.com/tag/skills\" rel=\"tag\">Skills</a></div>\n<br/>\n<p class=\"excerpt\">\n     In machine learning, going from research to production environment requires a well designed architecture. This blog shows how to transfer a trained model to a prediction server.\n  </p>\n</div>\n<div id=\"post-header-ad\">\n<script type=\"text/javascript\">kda_sid_write(1); kda_sid_n=2;</script>\n</div>\n<hr class=\"grey-line\"/><br/>\n<div class=\"post\" id=\"post-\">\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p><strong>By\u00a0<a href=\"https://medium.com/@amine.btt\">Amine Baatout</a>, ContentSquare.</strong></p>\n<h3><strong>Machine Learning in Production</strong></h3>\n<h4>From trained models to prediction servers</h4>\n<p>In this article, we will discuss how to go from the research phase to the production phase for ML projects and what are the different options to do so.</p>\n<p><img alt=\"\" class=\"size-full wp-image-71882 aligncenter\" sizes=\"(max-width: 573px) 100vw, 573px\" src=\"/wp-content/uploads/machine-learning-in-production.png\" srcset=\"https://www.kdnuggets.com/wp-content/uploads/machine-learning-in-production.png 573w, https://www.kdnuggets.com/wp-content/uploads/machine-learning-in-production-300x204.png 300w\" width=\"70%\"/></p>\n<h3><strong>2-in-1 approach</strong></h3>\n<p>If you try to have your training and server code in the same repository you would probably end up with a big mess that is hard to maintain. Training models and serving real-time prediction are extremely different tasks and hence should be handled by separate components. Last but not least, there is a proverb that says <em>\u201cDon\u2019t s**t where you eat\u201d</em>, so there\u2019s that too.</p>\n<p>Thus, a better approach would be to separate the training from the server. This way, you can do all the data science stuff on your local machine, and once you have your awesome model, you can transfer it to the server to make live predictions.</p>\n<h3><strong>Model as a config</strong></h3>\n<p>Our reference example will be a logistic regression on the classic <a href=\"https://archive.ics.uci.edu/ml/datasets/pima+indians+diabetes\" rel=\"noopener noreferrer\" target=\"_blank\">Pima Indians Diabetes Dataset</a> which has 8 numeric features and a binary label. The following Python code gives us a training set and a test set.</p>\n<p>Python Code: <a href=\"https://gist.github.com/baatout/5c71b7b74a06d3dac0360f4b6f47a52f#file-train_test_split-py\" rel=\"noopener noreferrer\" target=\"_blank\">train_test_split.py</a></p>\n<h4><strong>Model coefficients transfer approach</strong></h4>\n<p>After we split the data we can train our LogReg and save its coefficients in a json file.</p>\n<p>Once we have our coefficients in a safe place, we can reproduce our model in any language or framework we like. Concretely we can write these coefficients in the server configuration files. This way, when the server starts, it will initialize the logreg model with the proper weights from the config.</p>\n<p>Python Code: <a href=\"https://gist.github.com/baatout/3b4835948d8a22603122d7c8daa2c614#file-save_model_coefficients-py\" rel=\"noopener noreferrer\" target=\"_blank\">save_model_coefficients.py</a></p>\n<p>The big advantage here is that the training and the server parts are totally independent regarding the programming language and the library requirements.</p>\n<p>However, one issue that is often neglected is the feature engineering\u200a\u2014\u200aor more accurately:<strong> the dark side of machine learning</strong>. In general you rarely train a model directly on raw data, there is always some preprocessing that should be done beforehand. It could be anything from standardisation or PCA to all sorts of exotic transformations.</p>\n<p>So if you choose to code the preprocessing part in the server side too, note that every little change you make in the training should be duplicated in the server\u200a\u2014\u200ameaning a new release for both sides. So if you\u2019re always trying to improve the score by tweaking the feature engineering part, be prepared for the double load of work and plenty of redundancy. (cf figure 2)</p>\n<p><img alt=\"\" class=\"aligncenter size-full wp-image-71884\" sizes=\"(max-width: 940px) 100vw, 940px\" src=\"/wp-content/uploads/release-prediction-server.png\" srcset=\"https://www.kdnuggets.com/wp-content/uploads/release-prediction-server.png 940w, https://www.kdnuggets.com/wp-content/uploads/release-prediction-server-300x106.png 300w, https://www.kdnuggets.com/wp-content/uploads/release-prediction-server-768x270.png 768w\" width=\"80%\"/></p>\n<p style=\"text-align: center;\"><strong>Figure 2. The 387301st release of a prediction server (yes, I\u2019m exaggerating) due to a simple change in the feature engineering which doesn\u2019t impact how the server works. Not good.</strong></p>\n<h4><strong>PMML approach</strong></h4>\n<p>Another solution is to use PMML which provides a way to describe predictive models along with data transformation. However, it supports few ML models and <strong>lacks the support of many custom transformations</strong>. But then again if you choose to stick with the standard models and transformations, PMML would be the option to go for.</p>\n<h4><strong>Custom DSL/Framework approach</strong></h4>\n<p>If you want more than PMML could offer, you could build your own DSL or framework that lets you translate what you did in the training side to the server side. However this can be a time consuming task that not everyone can afford.</p>\n<h3><strong>Model as black box</strong></h3>\n<p>Now, I want to bring your attention to one thing in common between the previously discussed methods: They all treat the predictive model as a <strong>\u201cconfiguration\u201d</strong>. Instead we could consider it as a <strong>\u201cstandalone program\u201d</strong> or a black box that has everything it needs to run and that is easily transferable. (cf figure 3)</p>\n<p><img alt=\"\" class=\"aligncenter size-full wp-image-71885\" sizes=\"(max-width: 400px) 100vw, 400px\" src=\"/wp-content/uploads/model-as-black-box.jpg\" srcset=\"https://www.kdnuggets.com/wp-content/uploads/model-as-black-box.jpg 400w, https://www.kdnuggets.com/wp-content/uploads/model-as-black-box-300x240.jpg 300w\" width=\"75%\"/></p>\n<p style=\"text-align: center;\"><strong>Figure 3. Top: Model description transfer approach. The server loads the config and uses it to create the model. Bottom: Black box transfer approach. The server loads the standalone model itself.</strong></p>\n<h4><strong>The black box approach</strong></h4>\n<p>In order to transfer your <strong>trained</strong> model along with its <strong>preprocessing</strong> steps as an encapsulated entity to your server, you will need <a href=\"https://en.wikipedia.org/wiki/Serialization\"><strong>serialization</strong></a>. You should be able to put anything you want in this black box and end up with an object that accepts raw input and outputs the prediction. (cf figure 4)</p>\n<p><img alt=\"\" class=\"aligncenter size-full wp-image-71886\" sizes=\"(max-width: 940px) 100vw, 940px\" src=\"/wp-content/uploads/black-box-prediction.png\" srcset=\"https://www.kdnuggets.com/wp-content/uploads/black-box-prediction.png 940w, https://www.kdnuggets.com/wp-content/uploads/black-box-prediction-300x86.png 300w, https://www.kdnuggets.com/wp-content/uploads/black-box-prediction-768x220.png 768w\" width=\"75%\"/></p>\n<p style=\"text-align: center;\"><strong>Figure 4. Standalone trained model ready to be integrated transparently in the server side.</strong></p>\n<p>Let\u2019s try to build this black box using Pipeline from Scikit-learn and Dill library for serialisation. We will use a custom transformation `is_adult` that wouldn\u2019t be supported by PMML.</p>\n<p>Python Code:\u00a0<a href=\"https://gist.github.com/baatout/efcedab27cc3bbc630a5159958988731#file-pickle_export-py\">pickle_export.py</a></p>\n<p>Ok now let\u2019s load it in the server side.</p>\n<p>To better simulate the server environment, try running the pipeline somewhere the training modules are not accessible. Make sure that whatever libraries you used to build the model, you must have them installed in your server environment as well.</p>\n<p>Python Code: <a href=\"https://gist.github.com/baatout/8f3d9f7ac6531b1285439d0699bebd9a#file-run_pickle-py\" rel=\"noopener noreferrer\" target=\"_blank\">run_pickle.py</a></p>\n<p>In practice, custom transformations can be a lot more complex than our example, but the idea is the same.</p>\n<p>Ok, so the main challenge in this approach, is that pickling is often tricky. That is why I want to share with you some good practices that I learned from my few experiences:</p>\n<ol class=\"three_ol\">\n<li>Avoid using imports from other python scripts as much as possible (imports from libraries are ok of course). Example: Say that in the previous example is_adult is imported from a different file: `<strong>from</strong> other_script <strong>import</strong> is_adult`. This won\u2019t be serialisable by any serialisation lib like Pickle, Dill, Joblib or Cloudpickle because they do not serialise imports by default. The solution is to have everything used by the pipeline in the same script that creates the pipeline. However if you have a strong reason against putting everything in the same file, you could always replace the `<strong>import</strong> other_script` by `execfile(\u201cother_script\u201d)` to make it work.</li>\n<li>Avoid using lambdas because generally they are not easy to serialize. While Dill is able to serialize lambdas, the standard Pickle lib cannot. You could say that you can use Dill then. This is true, but beware! Some components in Scikit-learn use the standard Pickle for parallelisation like GridSearchCV. So what you want to parallelise should be not only \u201cdillable\u201d but also \u201cpicklable\u201d. Here is an example of how to avoid using lambdas: Say that instead of `is_adult` you have `<strong>def is_bigger_than</strong>(x, threshold): <strong>return </strong>x &gt; threshold`. In the DatafameMapper you want to apply <em>x -&gt; is_bigger_than(x, 18)</em> to the column \u201cage\u201d. So, instead of doing: `FunctionTransformer(<strong>lambda </strong>x: is_bigger_than(x, 18)))` you could write `FunctionTransformer(partial(is_bigger_than, threshold=18)`. Voil\u00e0 !</li>\n<li>When you are stuck don\u2019t hesitate to try different pickling libraries, and remember, everything has a solution. However, when you are really stuck, <strong>ping-pong</strong> or <strong>foosball</strong> could really help.</li>\n</ol>\n<p>Finally, with the black box approach, not only you can embark all the weird stuff that you do in feature engineering, but also you can put your own custom ML model!</p>\n<h4><strong>The demo</strong></h4>\n<p>For the <a href=\"https://github.com/ContentSquare/ml-in-prod\" rel=\"noopener noreferrer\" target=\"_blank\">demo</a> I will try to write a clean version of the above scripts. We will use Sklearn and Pandas for the training part and Flask for the server part. We will also use a parallelised GridSearchCV for our pipeline.</p>\n<p>Note that in real life it\u2019s more complicated than this demo code, since you will probably need an <strong>orchestration mechanism to handle model releases and transfer</strong>.</p>\n<p>Last but not least, if you have any comments or critics, please don\u2019t hesitate to share them below. I would be very happy to discuss them with you.</p>\n<p><a href=\"https://medium.com/contentsquare-engineering-blog/machine-learning-in-production-c53b43283ab1\" rel=\"noopener noreferrer\" target=\"_blank\">Original</a>. Reposted with permission.</p>\n<p><strong>Bio:\u00a0<a href=\"https://medium.com/@amine.btt\" rel=\"noopener noreferrer\" target=\"_blank\">Amine Baatout</a></strong> is a data scientist at <a href=\"https://www.contentsquare.com/\" rel=\"noopener noreferrer\" target=\"_blank\">ContentSquare</a>, focusing on machine learning engineering, algorithms and software design.</p>\n<p><strong>Related:</strong></p>\n<ul>\n<li><a href=\"/2017/09/activestate-accelerating-algorithms-python-intel-mkl.html\" rel=\"noopener noreferrer\" target=\"_blank\">Accelerating Your Algorithms in Production with Python and Intel MKL, Sep 21</a></li>\n<li><a href=\"/2017/08/oreilly-hardcore-data-science-practice.html\">What is hardcore data science \u2013 in practice?</a></li>\n<li><a href=\"/2017/05/data-science-machine-learning-platforms-enterprise.html\" rel=\"noopener noreferrer\" target=\"_blank\">Data Science &amp; Machine Learning Platforms for the Enterprise</a></li>\n</ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p> <script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets'; \n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div>\n<div class=\"page-link\"></div>\n<div class=\"pagi\">\n<hr class=\"grey-line\"/>\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2017/09/ensemble-learning-improve-machine-learning-results.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"/> <strong>Previous post</strong></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2017/09/cazena-easy-button-r-python-spark.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/><br/>\n<div>\n<hr class=\"grey-line\"/><br/>\n<h2>Top Stories Past 30 Days</h2>\n<table align=\"center\" cellpadding=\"3\" cellspacing=\"10\" class=\"latn\" width=\"100%\">\n<tr>\n<td valign=\"top\" width=\"50%\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Popular</b></th></tr>\n<tr><td>\n<ol class=\"three_ol\"><li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-1-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-2-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n<li> <a href=\"/2018/05/simplilearn-9-must-have-skills-data-scientist.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-3-simplilearn');\"><b>9 Must-have skills you need to become a Data Scientist, updated</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-4-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/03/another-10-free-must-read-books-for-machine-learning-and-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-5-another-10-books');\"><b>Another 10 Free Must-Read Books for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-6-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/best-data-visualization-techniques.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-7-best-data-viz');\"><b>Best Data Visualization Techniques for small and large data</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td> <td valign=\"top\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Shared</b></th></tr>\n<tr><td><ol class=\"three_ol\">\n<li> <a href=\"/2019/04/another-10-free-must-see-courses-machine-learning-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-1-another-10-courses');\"><b>Another 10 Free Must-See Courses for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-2-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/03/r-vs-python-data-visualization.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-3-r-py-viz');\"><b>R vs Python for Data Visualization</b></a>\n<li> <a href=\"/2019/03/deep-learning-toolset-overview.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-4-dl-toolset');\"><b>The Deep Learning Toolset \u2014 An Overview</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-5-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-6-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-7-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<!--#content end--></div>\n<div id=\"sidebar\">\n<div class=\"latn\">\n<h3><b><a href=\"/news/index.html\">Latest News</a></b></h3>\n<ul style=\"font-size:14px; margin-top:5px\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/datarobot-delivering-trusted-ai-microsoft.html\">Delivering Trusted AI with DataRobot and Microsoft</a><li> <a href=\"https://www.kdnuggets.com/2019/04/formulated-ai-data-production-landscape.html\">AI and the data production landscape</a><li> <a href=\"https://www.kdnuggets.com/2019/04/most-desired-skill-data-science.html\">The most desired skill in data science</a><li> <a href=\"https://www.kdnuggets.com/2019/04/projects-include-data-science-portfolio.html\">Projects to Include in a Data Science Portfolio</a><li> <a href=\"https://www.kdnuggets.com/2019/04/rework-meet-worlds-leading-ai-deep-learning-experts.html\">Meet the World\u2019s Leading AI &amp; Deep Learning ...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/problem-data-science-job-postings.html\">The problem with data science job postings</a></li></li></li></li></li></li></ul>\n</div>\n<div>\n<script type=\"text/javascript\">kda_sid_write(kda_sid_n);</script>\n</div>\n<br/><script src=\"/aps/sbm.js\" type=\"text/javascript\"></script>\n</div>\n</div><div class=\"breadcrumbs_bottom\">\n<div class=\"breadcumb\">\n<br>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2017/index.html\">2017</a> \u00bb <a href=\"https://www.kdnuggets.com/2017/09/index.html\">Sep</a> \u00bb <a href=\"https://www.kdnuggets.com/2017/09/tutorials.html\">Tutorials, Overviews</a> \u00bb Putting Machine Learning in Production (\u00a0<a href=\"/2017/n37.html\">17:n37</a>\u00a0)    </br></div>\n</div>\n<!--#content_wrapper end--></div>\n<br>\n<div id=\"footer\">\n<br/>\u00a9 2019 KDnuggets. <a href=\"/about/index.html\">About KDnuggets</a>. \u00a0<a href=\"/news/privacy-policy.html\">Privacy policy</a>. <a href=\"/terms-of-service.html\">Terms of Service</a><br/>\u00a0\n<div class=\"kd_bottom\">\n<div class=\"footer-container\">\n<div class=\"footer-news\">\n<a href=\"/news/subscribe.html\" onclick=\"_gaq.push(['_trackPageview','/x/bot/sub']);\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a>\n</div>\n<div class=\"footer-sm\">\n<a href=\"https://twitter.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/twt']);\" target=\"_blank\"><img height=\"32\" src=\"/images/tw_c48.png\" width=\"32\"/></a>\n<a href=\"https://facebook.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/fb']);\" target=\"_blank\"><img alt=\"Facebook\" height=\"32\" src=\"/images/fb_c48.png\" width=\"32\"/></a>\n<a href=\"https://www.linkedin.com/groups/54257\" onclick=\"_gaq.push(['_trackPageview','/x/bot/in']);\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"32\" src=\"/images/in_c48.png\" width=\"32\"/></a>\n</div>\n</div>\n<div class=\"close-footer\">X</div>\n</div>\n<script type=\"text/javascript\">\n  jQuery('.close-footer').click(\n      function(){       \n         jQuery('.kd_bottom').hide();\n      }\n   );\n</script> </div>\n<div class=\"clear\"><!--blank--></div>\n</br></div>\n<div style=\"display: none;\"><div id=\"boxzilla-box-82996-content\"><script type=\"text/javascript\">(function() {\n\tif (!window.mc4wp) {\n\t\twindow.mc4wp = {\n\t\t\tlisteners: [],\n\t\t\tforms    : {\n\t\t\t\ton: function (event, callback) {\n\t\t\t\t\twindow.mc4wp.listeners.push({\n\t\t\t\t\t\tevent   : event,\n\t\t\t\t\t\tcallback: callback\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})();\n</script><!-- MailChimp for WordPress v4.1.14 - https://wordpress.org/plugins/mailchimp-for-wp/ --><form class=\"mc4wp-form mc4wp-form-77281\" data-id=\"77281\" data-name=\"Subscribe to KDnuggets News\" id=\"mc4wp-form-1\" method=\"post\"><div class=\"mc4wp-form-fields\"><div class=\"header-container\">\n<img align=\"left\" src=\"/wp-content/uploads/envelope.png\"><a href=\"/news/subscribe.html\">Get KDnuggets, a leading newsletter on AI, \r\n  Data Science, and Machine Learning</a>\n</img></div>\n<div class=\"form-fields\">\n<div class=\"field-container\"><label>Email:</label><input maxlength=\"60\" name=\"EMAIL\" placeholder=\"Your email\" required=\"\" size=\"30\" type=\"email\"/></div>\n<div class=\"field-container submit-container\"><div class=\"form-button\" onclick=\"document.getElementById('mc4wp-form-1').submit()\">Sign Up</div></div>\n</div>\n<label style=\"display: none !important;\">Leave this field empty if you're human: <input autocomplete=\"off\" name=\"_mc4wp_honeypot\" tabindex=\"-1\" type=\"text\" value=\"\"/></label><input name=\"_mc4wp_timestamp\" type=\"hidden\" value=\"1556374100\"/><input name=\"_mc4wp_form_id\" type=\"hidden\" value=\"77281\"/><input name=\"_mc4wp_form_element_id\" type=\"hidden\" value=\"mc4wp-form-1\"/></div><div class=\"mc4wp-response\"></div></form><!-- / MailChimp for WordPress Plugin -->\n</div></div><script type=\"text/javascript\">(function() {function addEventListener(element,event,handler) {\n\tif(element.addEventListener) {\n\t\telement.addEventListener(event,handler, false);\n\t} else if(element.attachEvent){\n\t\telement.attachEvent('on'+event,handler);\n\t}\n}function maybePrefixUrlField() {\n\tif(this.value.trim() !== '' && this.value.indexOf('http') !== 0) {\n\t\tthis.value = \"http://\" + this.value;\n\t}\n}\n\nvar urlFields = document.querySelectorAll('.mc4wp-form input[type=\"url\"]');\nif( urlFields && urlFields.length > 0 ) {\n\tfor( var j=0; j < urlFields.length; j++ ) {\n\t\taddEventListener(urlFields[j],'blur',maybePrefixUrlField);\n\t}\n}/* test if browser supports date fields */\nvar testInput = document.createElement('input');\ntestInput.setAttribute('type', 'date');\nif( testInput.type !== 'date') {\n\n\t/* add placeholder & pattern to all date fields */\n\tvar dateFields = document.querySelectorAll('.mc4wp-form input[type=\"date\"]');\n\tfor(var i=0; i<dateFields.length; i++) {\n\t\tif(!dateFields[i].placeholder) {\n\t\t\tdateFields[i].placeholder = 'YYYY-MM-DD';\n\t\t}\n\t\tif(!dateFields[i].pattern) {\n\t\t\tdateFields[i].pattern = '[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])';\n\t\t}\n\t}\n}\n\n})();</script><script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_options = {\"testMode\":\"\",\"boxes\":[{\"id\":82996,\"icon\":\"&times;\",\"content\":\"\",\"css\":{\"background_color\":\"#eeee22\",\"width\":600,\"border_width\":2,\"border_style\":\"double\",\"position\":\"center\"},\"trigger\":{\"method\":\"time_on_page\",\"value\":\"3\"},\"animation\":\"fade\",\"cookie\":{\"triggered\":0,\"dismissed\":336},\"rehide\":true,\"position\":\"center\",\"screenWidthCondition\":{\"condition\":\"larger\",\"value\":500},\"closable\":true,\"post\":{\"id\":82996,\"title\":\"Subscribe to KDnuggets\",\"slug\":\"subscribe-to-kdnuggets\"}}]};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla/assets/js/script.min.js?ver=3.2.5\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_stats_config = {\"ajaxurl\":\"https:\\/\\/www.kdnuggets.com\\/wp-admin\\/admin-ajax.php?action=boxzilla_stats_track\"};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla-stats/assets/js/tracking.min.js?ver=1.0.4\" type=\"text/javascript\"></script>\n<script src=\"https://www.kdnuggets.com/wp-includes/js/wp-embed.min.js?ver=4.9.10\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar mc4wp_forms_config = [];\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/forms-api.min.js?ver=4.1.14\" type=\"text/javascript\"></script>\n<!--[if lte IE 9]>\n<script type='text/javascript' src='https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/third-party/placeholders.min.js?ver=4.1.14'></script>\n<![endif]-->\n<!--/.main_wrapper--></body></html>\n<script src=\"https://s7.addthis.com/js/300/addthis_widget.js#pubid=gpsaddthis\" type=\"text/javascript\"></script>\n\n\n<!-- Dynamic page generated in 0.633 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2019-04-27 10:08:20 -->\n<!-- Compression = gzip -->", "content_tokenized": ["comment", "amin", "baatout", "contentsquar", "machin", "learn", "product", "from", "train", "model", "predict", "server", "this", "articl", "will", "discuss", "how", "from", "the", "research", "phase", "the", "product", "phase", "for", "project", "and", "what", "are", "the", "differ", "option", "numinnum", "approach", "tri", "have", "train", "and", "server", "code", "the", "same", "repositori", "would", "probabl", "end", "with", "big", "mess", "that", "hard", "maintain", "train", "model", "and", "serv", "realtim", "predict", "are", "extrem", "differ", "task", "and", "henc", "should", "handl", "separ", "compon", "last", "but", "not", "least", "there", "proverb", "that", "say", "where", "eat", "there", "that", "too", "thus", "better", "approach", "would", "separ", "the", "train", "from", "the", "server", "this", "way", "can", "all", "the", "data", "scienc", "stuff", "local", "machin", "and", "onc", "have", "awesom", "model", "can", "transfer", "the", "server", "make", "live", "predict", "model", "config", "our", "refer", "exampl", "will", "logist", "regress", "the", "classic", "pima", "indian", "diabet", "dataset", "which", "has", "num", "numer", "featur", "and", "binari", "label", "the", "follow", "python", "code", "give", "train", "set", "and", "test", "set", "python", "code", "traintestsplitpi", "model", "coeffici", "transfer", "approach", "after", "split", "the", "data", "can", "train", "our", "logreg", "and", "save", "coeffici", "json", "file", "onc", "have", "our", "coeffici", "safe", "place", "can", "reproduc", "our", "model", "ani", "languag", "framework", "like", "concret", "can", "write", "these", "coeffici", "the", "server", "configur", "file", "this", "way", "when", "the", "server", "start", "will", "initi", "the", "logreg", "model", "with", "the", "proper", "weight", "from", "the", "config", "python", "code", "savemodelcoefficientspi", "the", "big", "advantag", "here", "that", "the", "train", "and", "the", "server", "part", "are", "total", "independ", "regard", "the", "program", "languag", "and", "the", "librari", "requir", "howev", "one", "issu", "that", "often", "neglect", "the", "featur", "engin", "more", "accur", "the", "dark", "side", "machin", "learn", "general", "rare", "train", "model", "direct", "raw", "data", "there", "alway", "some", "preprocess", "that", "should", "done", "beforehand", "could", "anyth", "from", "standardis", "all", "sort", "exot", "transform", "choos", "code", "the", "preprocess", "part", "the", "server", "side", "too", "note", "that", "everi", "littl", "chang", "make", "the", "train", "should", "duplic", "the", "server", "mean", "new", "releas", "for", "both", "side", "alway", "tri", "improv", "the", "score", "tweak", "the", "featur", "engin", "part", "prepar", "for", "the", "doubl", "load", "work", "and", "plenti", "redund", "figur", "num", "figur", "num", "the", "numst", "releas", "predict", "server", "yes", "exagger", "due", "simpl", "chang", "the", "featur", "engin", "which", "impact", "how", "the", "server", "work", "not", "good", "approach", "anoth", "solut", "use", "which", "provid", "way", "describ", "predict", "model", "along", "with", "data", "transform", "howev", "support", "few", "model", "and", "lack", "the", "support", "mani", "custom", "transform", "but", "then", "again", "choos", "stick", "with", "the", "standard", "model", "and", "transform", "would", "the", "option", "for", "custom", "dslframework", "approach", "want", "more", "than", "could", "offer", "could", "build", "own", "framework", "that", "let", "translat", "what", "the", "train", "side", "the", "server", "side", "howev", "this", "can", "time", "consum", "task", "that", "not", "everyon", "can", "afford", "model", "black", "box", "now", "want", "bring", "attent", "one", "thing", "common", "between", "the", "previous", "discuss", "method", "they", "all", "treat", "the", "predict", "model", "configur", "instead", "could", "consid", "standalon", "program", "black", "box", "that", "has", "everyth", "need", "run", "and", "that", "easili", "transfer", "figur", "num", "figur", "num", "top", "model", "descript", "transfer", "approach", "the", "server", "load", "the", "config", "and", "use", "creat", "the", "model", "bottom", "black", "box", "transfer", "approach", "the", "server", "load", "the", "standalon", "model", "itself", "the", "black", "box", "approach", "order", "transfer", "train", "model", "along", "with", "preprocess", "step", "encapsul", "entiti", "server", "will", "need", "serial", "should", "abl", "put", "anyth", "want", "this", "black", "box", "and", "end", "with", "object", "that", "accept", "raw", "input", "and", "output", "the", "predict", "figur", "num", "figur", "num", "standalon", "train", "model", "readi", "integr", "transpar", "the", "server", "side", "let", "tri", "build", "this", "black", "box", "use", "pipelin", "from", "scikitlearn", "and", "dill", "librari", "for", "serialis", "will", "use", "custom", "transform", "isadult", "that", "support", "python", "code", "pickleexportpi", "now", "let", "load", "the", "server", "side", "better", "simul", "the", "server", "environ", "tri", "run", "the", "pipelin", "somewher", "the", "train", "modul", "are", "not", "access", "make", "sure", "that", "whatev", "librari", "use", "build", "the", "model", "must", "have", "them", "instal", "server", "environ", "well", "python", "code", "runpicklepi", "practic", "custom", "transform", "can", "lot", "more", "complex", "than", "our", "exampl", "but", "the", "idea", "the", "same", "the", "main", "challeng", "this", "approach", "that", "pickl", "often", "tricki", "that", "whi", "want", "share", "with", "some", "good", "practic", "that", "learn", "from", "few", "experi", "avoid", "use", "import", "from", "other", "python", "script", "much", "possibl", "import", "from", "librari", "are", "cours", "exampl", "say", "that", "the", "previous", "exampl", "isadult", "import", "from", "differ", "file", "from", "otherscript", "import", "isadult", "this", "won", "serialis", "ani", "serialis", "lib", "like", "pickl", "dill", "joblib", "cloudpickl", "becaus", "they", "not", "serialis", "import", "default", "the", "solut", "have", "everyth", "use", "the", "pipelin", "the", "same", "script", "that", "creat", "the", "pipelin", "howev", "have", "strong", "reason", "against", "put", "everyth", "the", "same", "file", "could", "alway", "replac", "the", "import", "otherscript", "make", "work", "avoid", "use", "lambda", "becaus", "general", "they", "are", "not", "easi", "serial", "while", "dill", "abl", "serial", "lambda", "the", "standard", "pickl", "lib", "can", "not", "could", "say", "that", "can", "use", "dill", "then", "this", "true", "but", "bewar", "some", "compon", "scikitlearn", "use", "the", "standard", "pickl", "for", "parallelis", "like", "gridsearchcv", "what", "want", "parallelis", "should", "not", "onli", "dillabl", "but", "also", "picklabl", "here", "exampl", "how", "avoid", "use", "lambda", "say", "that", "instead", "isadult", "have", "def", "isbiggerthan", "threshold", "return", "threshold", "the", "datafamemapp", "want", "appli", "the", "column", "age", "instead", "could", "write", "voil\u00e0", "when", "are", "stuck", "hesit", "tri", "differ", "pickl", "librari", "and", "rememb", "everyth", "has", "solut", "howev", "when", "are", "realli", "stuck", "pingpong", "foosbal", "could", "realli", "help", "final", "with", "the", "black", "box", "approach", "not", "onli", "can", "embark", "all", "the", "weird", "stuff", "that", "featur", "engin", "but", "also", "can", "put", "own", "custom", "model", "the", "demo", "for", "the", "demo", "will", "tri", "write", "clean", "version", "the", "abov", "script", "will", "use", "sklearn", "and", "panda", "for", "the", "train", "part", "and", "flask", "for", "the", "server", "part", "will", "also", "use", "parallelis", "gridsearchcv", "for", "our", "pipelin", "note", "that", "real", "life", "more", "complic", "than", "this", "demo", "code", "sinc", "will", "probabl", "need", "orchestr", "mechan", "handl", "model", "releas", "and", "transfer", "last", "but", "not", "least", "have", "ani", "comment", "critic", "pleas", "hesit", "share", "them", "below", "would", "veri", "happi", "discuss", "them", "with", "origin", "repost", "with", "permiss", "bio", "amin", "baatout", "data", "scientist", "contentsquar", "focus", "machin", "learn", "engin", "algorithm", "and", "softwar", "design", "relat", "acceler", "algorithm", "product", "with", "python", "and", "intel", "sep", "num", "what", "hardcor", "data", "scienc", "practic", "data", "scienc", "machin", "learn", "platform", "for", "the", "enterpris"], "timestamp_scraper": 1556374100.852718, "title": "Putting Machine Learning in Production", "read_time": 385.2, "content_html": "<div class=\"post\" id=\"post-\">\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p><strong>By\u00a0<a href=\"https://medium.com/@amine.btt\">Amine Baatout</a>, ContentSquare.</strong></p>\n<h3><strong>Machine Learning in Production</strong></h3>\n<h4>From trained models to prediction servers</h4>\n<p>In this article, we will discuss how to go from the research phase to the production phase for ML projects and what are the different options to do so.</p>\n<p><img alt=\"\" class=\"size-full wp-image-71882 aligncenter\" sizes=\"(max-width: 573px) 100vw, 573px\" src=\"/wp-content/uploads/machine-learning-in-production.png\" srcset=\"https://www.kdnuggets.com/wp-content/uploads/machine-learning-in-production.png 573w, https://www.kdnuggets.com/wp-content/uploads/machine-learning-in-production-300x204.png 300w\" width=\"70%\"/></p>\n<h3><strong>2-in-1 approach</strong></h3>\n<p>If you try to have your training and server code in the same repository you would probably end up with a big mess that is hard to maintain. Training models and serving real-time prediction are extremely different tasks and hence should be handled by separate components. Last but not least, there is a proverb that says <em>\u201cDon\u2019t s**t where you eat\u201d</em>, so there\u2019s that too.</p>\n<p>Thus, a better approach would be to separate the training from the server. This way, you can do all the data science stuff on your local machine, and once you have your awesome model, you can transfer it to the server to make live predictions.</p>\n<h3><strong>Model as a config</strong></h3>\n<p>Our reference example will be a logistic regression on the classic <a href=\"https://archive.ics.uci.edu/ml/datasets/pima+indians+diabetes\" rel=\"noopener noreferrer\" target=\"_blank\">Pima Indians Diabetes Dataset</a> which has 8 numeric features and a binary label. The following Python code gives us a training set and a test set.</p>\n<p>Python Code: <a href=\"https://gist.github.com/baatout/5c71b7b74a06d3dac0360f4b6f47a52f#file-train_test_split-py\" rel=\"noopener noreferrer\" target=\"_blank\">train_test_split.py</a></p>\n<h4><strong>Model coefficients transfer approach</strong></h4>\n<p>After we split the data we can train our LogReg and save its coefficients in a json file.</p>\n<p>Once we have our coefficients in a safe place, we can reproduce our model in any language or framework we like. Concretely we can write these coefficients in the server configuration files. This way, when the server starts, it will initialize the logreg model with the proper weights from the config.</p>\n<p>Python Code: <a href=\"https://gist.github.com/baatout/3b4835948d8a22603122d7c8daa2c614#file-save_model_coefficients-py\" rel=\"noopener noreferrer\" target=\"_blank\">save_model_coefficients.py</a></p>\n<p>The big advantage here is that the training and the server parts are totally independent regarding the programming language and the library requirements.</p>\n<p>However, one issue that is often neglected is the feature engineering\u200a\u2014\u200aor more accurately:<strong> the dark side of machine learning</strong>. In general you rarely train a model directly on raw data, there is always some preprocessing that should be done beforehand. It could be anything from standardisation or PCA to all sorts of exotic transformations.</p>\n<p>So if you choose to code the preprocessing part in the server side too, note that every little change you make in the training should be duplicated in the server\u200a\u2014\u200ameaning a new release for both sides. So if you\u2019re always trying to improve the score by tweaking the feature engineering part, be prepared for the double load of work and plenty of redundancy. (cf figure 2)</p>\n<p><img alt=\"\" class=\"aligncenter size-full wp-image-71884\" sizes=\"(max-width: 940px) 100vw, 940px\" src=\"/wp-content/uploads/release-prediction-server.png\" srcset=\"https://www.kdnuggets.com/wp-content/uploads/release-prediction-server.png 940w, https://www.kdnuggets.com/wp-content/uploads/release-prediction-server-300x106.png 300w, https://www.kdnuggets.com/wp-content/uploads/release-prediction-server-768x270.png 768w\" width=\"80%\"/></p>\n<p style=\"text-align: center;\"><strong>Figure 2. The 387301st release of a prediction server (yes, I\u2019m exaggerating) due to a simple change in the feature engineering which doesn\u2019t impact how the server works. Not good.</strong></p>\n<h4><strong>PMML approach</strong></h4>\n<p>Another solution is to use PMML which provides a way to describe predictive models along with data transformation. However, it supports few ML models and <strong>lacks the support of many custom transformations</strong>. But then again if you choose to stick with the standard models and transformations, PMML would be the option to go for.</p>\n<h4><strong>Custom DSL/Framework approach</strong></h4>\n<p>If you want more than PMML could offer, you could build your own DSL or framework that lets you translate what you did in the training side to the server side. However this can be a time consuming task that not everyone can afford.</p>\n<h3><strong>Model as black box</strong></h3>\n<p>Now, I want to bring your attention to one thing in common between the previously discussed methods: They all treat the predictive model as a <strong>\u201cconfiguration\u201d</strong>. Instead we could consider it as a <strong>\u201cstandalone program\u201d</strong> or a black box that has everything it needs to run and that is easily transferable. (cf figure 3)</p>\n<p><img alt=\"\" class=\"aligncenter size-full wp-image-71885\" sizes=\"(max-width: 400px) 100vw, 400px\" src=\"/wp-content/uploads/model-as-black-box.jpg\" srcset=\"https://www.kdnuggets.com/wp-content/uploads/model-as-black-box.jpg 400w, https://www.kdnuggets.com/wp-content/uploads/model-as-black-box-300x240.jpg 300w\" width=\"75%\"/></p>\n<p style=\"text-align: center;\"><strong>Figure 3. Top: Model description transfer approach. The server loads the config and uses it to create the model. Bottom: Black box transfer approach. The server loads the standalone model itself.</strong></p>\n<h4><strong>The black box approach</strong></h4>\n<p>In order to transfer your <strong>trained</strong> model along with its <strong>preprocessing</strong> steps as an encapsulated entity to your server, you will need <a href=\"https://en.wikipedia.org/wiki/Serialization\"><strong>serialization</strong></a>. You should be able to put anything you want in this black box and end up with an object that accepts raw input and outputs the prediction. (cf figure 4)</p>\n<p><img alt=\"\" class=\"aligncenter size-full wp-image-71886\" sizes=\"(max-width: 940px) 100vw, 940px\" src=\"/wp-content/uploads/black-box-prediction.png\" srcset=\"https://www.kdnuggets.com/wp-content/uploads/black-box-prediction.png 940w, https://www.kdnuggets.com/wp-content/uploads/black-box-prediction-300x86.png 300w, https://www.kdnuggets.com/wp-content/uploads/black-box-prediction-768x220.png 768w\" width=\"75%\"/></p>\n<p style=\"text-align: center;\"><strong>Figure 4. Standalone trained model ready to be integrated transparently in the server side.</strong></p>\n<p>Let\u2019s try to build this black box using Pipeline from Scikit-learn and Dill library for serialisation. We will use a custom transformation `is_adult` that wouldn\u2019t be supported by PMML.</p>\n<p>Python Code:\u00a0<a href=\"https://gist.github.com/baatout/efcedab27cc3bbc630a5159958988731#file-pickle_export-py\">pickle_export.py</a></p>\n<p>Ok now let\u2019s load it in the server side.</p>\n<p>To better simulate the server environment, try running the pipeline somewhere the training modules are not accessible. Make sure that whatever libraries you used to build the model, you must have them installed in your server environment as well.</p>\n<p>Python Code: <a href=\"https://gist.github.com/baatout/8f3d9f7ac6531b1285439d0699bebd9a#file-run_pickle-py\" rel=\"noopener noreferrer\" target=\"_blank\">run_pickle.py</a></p>\n<p>In practice, custom transformations can be a lot more complex than our example, but the idea is the same.</p>\n<p>Ok, so the main challenge in this approach, is that pickling is often tricky. That is why I want to share with you some good practices that I learned from my few experiences:</p>\n<ol class=\"three_ol\">\n<li>Avoid using imports from other python scripts as much as possible (imports from libraries are ok of course). Example: Say that in the previous example is_adult is imported from a different file: `<strong>from</strong> other_script <strong>import</strong> is_adult`. This won\u2019t be serialisable by any serialisation lib like Pickle, Dill, Joblib or Cloudpickle because they do not serialise imports by default. The solution is to have everything used by the pipeline in the same script that creates the pipeline. However if you have a strong reason against putting everything in the same file, you could always replace the `<strong>import</strong> other_script` by `execfile(\u201cother_script\u201d)` to make it work.</li>\n<li>Avoid using lambdas because generally they are not easy to serialize. While Dill is able to serialize lambdas, the standard Pickle lib cannot. You could say that you can use Dill then. This is true, but beware! Some components in Scikit-learn use the standard Pickle for parallelisation like GridSearchCV. So what you want to parallelise should be not only \u201cdillable\u201d but also \u201cpicklable\u201d. Here is an example of how to avoid using lambdas: Say that instead of `is_adult` you have `<strong>def is_bigger_than</strong>(x, threshold): <strong>return </strong>x &gt; threshold`. In the DatafameMapper you want to apply <em>x -&gt; is_bigger_than(x, 18)</em> to the column \u201cage\u201d. So, instead of doing: `FunctionTransformer(<strong>lambda </strong>x: is_bigger_than(x, 18)))` you could write `FunctionTransformer(partial(is_bigger_than, threshold=18)`. Voil\u00e0 !</li>\n<li>When you are stuck don\u2019t hesitate to try different pickling libraries, and remember, everything has a solution. However, when you are really stuck, <strong>ping-pong</strong> or <strong>foosball</strong> could really help.</li>\n</ol>\n<p>Finally, with the black box approach, not only you can embark all the weird stuff that you do in feature engineering, but also you can put your own custom ML model!</p>\n<h4><strong>The demo</strong></h4>\n<p>For the <a href=\"https://github.com/ContentSquare/ml-in-prod\" rel=\"noopener noreferrer\" target=\"_blank\">demo</a> I will try to write a clean version of the above scripts. We will use Sklearn and Pandas for the training part and Flask for the server part. We will also use a parallelised GridSearchCV for our pipeline.</p>\n<p>Note that in real life it\u2019s more complicated than this demo code, since you will probably need an <strong>orchestration mechanism to handle model releases and transfer</strong>.</p>\n<p>Last but not least, if you have any comments or critics, please don\u2019t hesitate to share them below. I would be very happy to discuss them with you.</p>\n<p><a href=\"https://medium.com/contentsquare-engineering-blog/machine-learning-in-production-c53b43283ab1\" rel=\"noopener noreferrer\" target=\"_blank\">Original</a>. Reposted with permission.</p>\n<p><strong>Bio:\u00a0<a href=\"https://medium.com/@amine.btt\" rel=\"noopener noreferrer\" target=\"_blank\">Amine Baatout</a></strong> is a data scientist at <a href=\"https://www.contentsquare.com/\" rel=\"noopener noreferrer\" target=\"_blank\">ContentSquare</a>, focusing on machine learning engineering, algorithms and software design.</p>\n<p><strong>Related:</strong></p>\n<ul>\n<li><a href=\"/2017/09/activestate-accelerating-algorithms-python-intel-mkl.html\" rel=\"noopener noreferrer\" target=\"_blank\">Accelerating Your Algorithms in Production with Python and Intel MKL, Sep 21</a></li>\n<li><a href=\"/2017/08/oreilly-hardcore-data-science-practice.html\">What is hardcore data science \u2013 in practice?</a></li>\n<li><a href=\"/2017/05/data-science-machine-learning-platforms-enterprise.html\" rel=\"noopener noreferrer\" target=\"_blank\">Data Science &amp; Machine Learning Platforms for the Enterprise</a></li>\n</ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p> <script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets'; \n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div> ", "website": "kdnuggets"}