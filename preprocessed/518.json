{"content": "comments By Sabber Ahamed , Computational Geophysicist and Machine Learning Enthusiast \u00a0 Introduction \u00a0 Financial institutions/companies have been using predictive analytics for quite a long time. Recently, due to the availability of computational resources and tremendous research in machine learning made it possible to better data analysis hence better prediction. In the series of articles, I explain how to create a predictive loan model that identifies a bad applicant who is more likely to be charged off. In step by step processes, I show how to process raw data, clean unnecessary part of it, select relevant features, perform exploratory data analysis, and finally build a model. As an example, I use Lending club loan data dataset. Lending Club is the world\u2019s largest online marketplace connecting borrowers and investors. An inevitable outcome of lending is default by borrowers. The idea of this tutorial is to create a predictive model that identifies applicants who are relatively risky for a loan. In order to accomplish this, I organized the whole series into four parts as follows: Data processing-1 : In this first part I show how to clean and remove unnecessary features. Data processing is very time-consuming, but better data would produce a better model. Therefore, careful and very detail examination is required to prepare better data. I show how to identify constant features, duplicate feature, duplicate rows, and features with a high number of missing values. Data processing-2 : In this part, I manually go through each and every features selected from part -1. This is the most time-consuming part, but worth it for a better model. EDA : In in this part, I do some exploratory data analysis (EDA) on the features selected in part-1 and 2. A good EDA is required to get a better knowledge of the domain. We need to spend some quality time to find out the relations between the features. Create a model : Finally, In this last but not the last part, I create models. Creating a model is also not an easy task. It\u2019s also an iterative process. I show how to start with a with a simple model, then slowly add complexity for better performance. Alright, let\u2019s get started with the part-1: data processing, cleaning and feature selections. \u00a0 Data processing-1 \u00a0 import numpy as np\r import pandas as pd\r import matplotlib.pyplot as plt\r import seaborn as sns\r import warnings\r  In this project, I used three years of datasets (2014, 2015 and ) and stored in five separate CSV files. Lets read the files first: df1 = \r df2 = \r df3 = \r df4 = \r df5 =  Since data are stored in separate files, we have to make sure that we have the same number of features in each file. We can check using the following code snippet: columns = , , , , ))\r coldf =  The above code is self-explanatory, we first extract the column names the stack them together using Numpy \u2018dstack\u2019 object. If you look at the Jupyter-notebook on Github, you would see they are same. Which is good for us. We can move on to the next step. It\u2019s time to check the shape of the data: df = \r df.shape (981665, 151) We see that there are approximately one million examples and each of the examples has 151 features including target variable. Let\u2019s look at the feature name to get familiar with the data. It\u2019s imperative to get to know the domain, especially the details of the features relationship with the target variable. It\u2019s not easy to learn overnight, that\u2019s why need to spend some days or maybe a week to get familiar with the data before jumping into further detail analysis. Let\u2019s see the feature names: ) ['id', 'member_id', 'loan_amnt', 'funded_amnt', 'funded_amnt_inv', 'term', 'int_rate', 'installment', 'grade', 'sub_grade', 'emp_title', 'emp_length', 'home_ownership', 'annual_inc', 'verification_status', 'issue_d', 'loan_status', 'pymnt_plan', 'url', 'desc', 'purpose', 'title', 'zip_code', 'addr_state', 'dti', 'delinq_2yrs', 'earliest_cr_line', 'fico_range_low', 'fico_range_high', 'inq_last_6mths', 'mths_since_last_delinq', 'mths_since_last_record', 'open_acc', 'pub_rec', 'revol_bal', 'revol_util', 'total_acc', 'initial_list_status', 'out_prncp', 'out_prncp_inv', 'total_pymnt', 'total_pymnt_inv', 'total_rec_prncp', 'total_rec_int', 'total_rec_late_fee', 'recoveries', 'collection_recovery_fee', 'last_pymnt_d', 'last_pymnt_amnt', 'next_pymnt_d', 'last_credit_pull_d', 'last_fico_range_high', 'last_fico_range_low', 'collections_12_mths_ex_med', 'mths_since_last_major_derog', 'policy_code', 'application_type', 'annual_inc_joint', 'dti_joint', 'verification_status_joint', 'acc_now_delinq', 'tot_coll_amt', 'tot_cur_bal', 'open_acc_6m', 'open_act_il', 'open_il_12m', 'open_il_24m', 'mths_since_rcnt_il', 'total_bal_il', 'il_util', 'open_rv_12m', 'open_rv_24m', 'max_bal_bc', 'all_util', 'total_rev_hi_lim', 'inq_fi', 'total_cu_tl', 'inq_last_12m', 'acc_open_past_24mths', 'avg_cur_bal', 'bc_open_to_buy', 'bc_util', 'chargeoff_within_12_mths', 'delinq_amnt', 'mo_sin_old_il_acct', 'mo_sin_old_rev_tl_op', 'mo_sin_rcnt_rev_tl_op', 'mo_sin_rcnt_tl', 'mort_acc', 'mths_since_recent_bc', 'mths_since_recent_bc_dlq', 'mths_since_recent_inq', 'mths_since_recent_revol_delinq', 'num_accts_ever_120_pd', 'num_actv_bc_tl', 'num_actv_rev_tl', 'num_bc_sats', 'num_bc_tl', 'num_il_tl', 'num_op_rev_tl', 'num_rev_accts', 'num_rev_tl_bal_gt_0', 'num_sats', 'num_tl_120dpd_2m', 'num_tl_30dpd', 'num_tl_90g_dpd_24m', 'num_tl_op_past_12m', 'pct_tl_nvr_dlq', 'percent_bc_gt_75', 'pub_rec_bankruptcies', 'tax_liens', 'tot_hi_cred_lim', 'total_bal_ex_mort', 'total_bc_limit', 'total_il_high_credit_limit', 'revol_bal_joint', 'sec_app_fico_range_low', 'sec_app_fico_range_high', 'sec_app_earliest_cr_line', 'sec_app_inq_last_6mths', 'sec_app_mort_acc', 'sec_app_open_acc', 'sec_app_revol_util', 'sec_app_open_act_il', 'sec_app_num_rev_accts', 'sec_app_chargeoff_within_12_mths', 'sec_app_collections_12_mths_ex_med', 'sec_app_mths_since_last_major_derog', 'hardship_flag', 'hardship_type', 'hardship_reason', 'hardship_status', 'deferral_term', 'hardship_amount', 'hardship_start_date', 'hardship_end_date', 'payment_plan_start_date', 'hardship_length', 'hardship_dpd', 'hardship_loan_status', 'orig_projected_additional_accrued_interest', 'hardship_payoff_balance_amount', 'hardship_last_payment_amount', 'disbursement_method', 'debt_settlement_flag', 'debt_settlement_flag_date', 'settlement_status', 'settlement_date', 'settlement_amount', 'settlement_percentage', 'settlement_term'] Looking at the above features, it may seem scary first. But we will get through every feature and then select the relevant features. Let's start with the target feature \u201cloan_status\u201d  Current 500937\r Fully Paid 358629\r Charged Off 99099\r Late (31-120 days) 13203\r In Grace Period 6337\r Late (16-30 days) 3414\r Default 36\r Name: loan_status, dtype: int64 We see that there are seven types of loan status. However, in this tutorial, we are interested in two classes: 1) Fully paid: those who paid the loan with interests and 2) Charged off: those who could not pay and finally charged off. Therefore, we select the data sets for these two classes: df = df.loc[(df['loan_status'].)] df.shape\r (457728, 151) Looking at the shape, we see that we now have half of the data point than original data and the same number of features. Before processing and cleaning manually, let\u2019s do some general data processing steps first: Remove features associated with >85% missing values Remove constant features Remove duplicates features Remove duplicate rows Remove highly collinear features (In part 3 EDA) Alright, let\u2019s get started with the typical data processing: 1. Remove features associated with 90% missing values: \u00a0In the code below I first use pandas\u2019 built-in method \u2018\u2019 to find the rows associated with missing values. Then I sum them up to get the count for each feature. Finally, I sort the features according to the number of missing values and create a data frame for further analysis. In the above result, we see that there are 53 features which have 400000 missing values. I use the pandas\u2019 drop method to remove these 53 features. Notice that in this function I set the \u201cinplace\u201d option to True\u201d, which removes these features from original data frame\u00a0 df \u00a0without returning anything. 2. Remove constant features:\u00a0 At this step, we remove features that have a single unique value. A feature associated with one unique value does not help the model to generalize well since it\u2019s variance is zero. A tree-based model cannot take advantage of these type of features since the model can not split these features. To identify features with a single unique value is relatively straightforward: In the above code, I create a function \u201cfind_constant_features\u201d to identify constant features. The function goes through each feature and sees if it has less than two unique values. If so, the features are added to the constant feature list. We can also find out constant feature looking at the variance or standard deviation. If the feature has zero variance or standard deviation, we are sure that the feature has single unique value. The print statement shows that five features have single unique value. So we remove them using \u201cinplace\u201d option true. 3. Remove duplicate features: \u00a0Duplicate features are those have the same value in multiple features with the same/different name. To find out the duplicate features I borrowed the following code from this\u00a0 stack overflow link : We see only one feature which seems to be duplicated. I am not going to remove the feature yet rather wait until we do EDA in the next part. 4. Remove duplicate rows:\u00a0 In this step, we remove all the duplicate rows. I use pandas built-in \u201c\u201d method to perform this action:  The above four processings are basic which we need to do for any data science project. Let's see the shape of the data after all of these steps: df.shape\r \r (457728, 93) We see that we have 93 features after performing the above steps. In the\u00a0 next part \u00a0of this tutorial, I will go through each feature, then perform cleaning and remove it if necessary. In the meantime, if you have any question regarding this part, please feel free to write your comment below. You can reach out to me: Email: sabbers@gmail.com\r LinkedIn: /in/sabber-ahamed/ \r Github: /msahamed \r Medium: /@sabber/ \u00a0 Bio: Sabber Ahamed is the Founder of xoolooloo.com . Computational Geophysicist and Machine Learning Enthusiast. Original . Reposted with permission. Related: Text Mining on the Command Line Three techniques to improve machine learning model performance with imbalanced datasets Text Classification & Embeddings Visualization Using LSTMs, CNNs, and Pre-trained Word Vectors", "title_html": "<h1 id=\"title\">Financial Data Analysis \u2013 Data Processing 1: Loan Eligibility Prediction</h1> ", "url": "https://www.kdnuggets.com/financial.html", "tfidf": {"tfidf": {"after": 2.04140414042, "hardshipamount": 1587.6, "sum": 6.681818181819999, "totalbclimit": 1587.6, "true": 5.11139729556, "take": 1.13961668222, "secappmortacc": 1587.6, "five": 2.75481520042, "hardshipdpd": 1587.6, "overnight": 20.0962025316, "organ": 1.6387283237, "earliestcrlin": 1587.6, "number": 4.40571666436, "timeconsum": 3175.2, "chargeoffwithinnummth": 1587.6, "been": 1.0239277652399998, "who": 4.25117150892, "dataset": 580.829268294, "function": 7.486325055, "class": 4.23303559526, "verificationstatusjoint": 1587.6, "annualincjoint": 1587.6, "bcutil": 1587.6, "hardshiplastpaymentamount": 1587.6, "mortacc": 1587.6, "valu": 29.610903873720005, "secappopenacc": 1587.6, "totalacc": 1587.6, "recoveri": 7.997984886649999, "mosinoldrevtlop": 1587.6, "slowli": 6.080428954419999, "applicationtyp": 1587.6, "medium": 7.00617828773, "jupyternotebook": 1587.6, "mosinrcnttl": 1587.6, "stack": 39.297029703, "institutionscompani": 1587.6, "secapprevolutil": 1587.6, "creat": 8.7450424929, "multipl": 2.74813917258, "vector": 25.898858075, "how": 8.01251640255, "pcttlnvrdlq": 1587.6, "repost": 933.882352941, "million": 1.7279059643, "quit": 2.8849718335500003, "especi": 1.66712170534, "would": 2.1657458563599996, "due": 1.23789473684, "frame": 12.560126582279999, "totalcutl": 1587.6, "settlementstatus": 1587.6, "interest": 3.20662492426, "totalrecint": 1587.6, "will": 2.44962197192, "associ": 5.305263157880001, "partnum": 2442.46153846, "totalbalexmort": 1587.6, "numrevtlbalgtnum": 1587.6, "inqlastnummth": 1587.6, "hardshipflag": 1587.6, "dstack": 1587.6, "inqfi": 1587.6, "next": 4.485168094920001, "below": 4.51215006394, "perform": 9.1883862255, "but": 4.06529671596, "need": 4.31178707223, "classif": 8.067073170730001, "final": 5.360344391, "feel": 3.1356903021900004, "mosinrcntrevtlop": 1587.6, "point": 1.25990000794, "openrvnumm": 3175.2, "applic": 6.85344269372, "has": 4.1745990008, "founder": 4.033536585369999, "numtlnumdpd": 1587.6, "plt": 1587.6, "advantag": 3.32412060302, "panda": 447.211267604, "mosinoldilacct": 1587.6, "default": 42.2796271638, "resourc": 2.9487369985100003, "imper": 32.9377593361, "out": 4.24066777964, "model": 27.177771925200002, "delinqamnt": 1587.6, "good": 3.03963239518, "sure": 14.907042253520002, "numrevacct": 1587.6, "mthssincelastdelinq": 1587.6, "accopenpastnummth": 1587.6, "revolutil": 1587.6, "count": 3.48157894737, "annualinc": 1587.6, "disbursementmethod": 1587.6, "fundedamnt": 1587.6, "print": 3.29719626168, "not": 8.12539184952, "numtlnumgdpdnumm": 1587.6, "mthssincelastmajorderog": 1587.6, "origprojectedadditionalaccruedinterest": 1587.6, "secappficorangelow": 1587.6, "fundedamntinv": 1587.6, "are": 11.32896529358, "whole": 2.29488291414, "less": 1.46904783936, "msaham": 1587.6, "pymntplan": 1587.6, "regard": 1.78944995491, "four": 2.41901569404, "grade": 6.536023054759999, "coldf": 1587.6, "pleas": 9.12938470385, "easi": 10.5875291764, "meantim": 22.3921015515, "notic": 4.36994219653, "emptitl": 1587.6, "than": 2.0655737705, "then": 4.34631442064, "separ": 3.2024205748799996, "they": 1.03017325287, "geophysicist": 599.094339622, "instal": 3.78721374046, "jump": 8.07117437722, "last": 2.4234468020200004, "let": 27.88932806328, "world": 1.11340206186, "scienc": 2.31969608416, "bcopentobuy": 1587.6, "imbalanc": 567.0, "initialliststatus": 1587.6, "github": 3175.2, "featur": 77.88341669862, "processingnum": 4762.799999999999, "dtype": 1587.6, "simpl": 3.3981164383599998, "that": 13.05179282875, "mine": 4.875921375919999, "until": 1.14852058164, "sort": 5.188235294119999, "two": 3.04137931035, "accord": 1.27589809531, "typic": 2.2541530597799997, "financi": 2.60860992442, "pubrec": 1587.6, "accnowdelinq": 1587.6, "addrstat": 1587.6, "three": 2.13243787778, "ficorangehigh": 1587.6, "drop": 2.4594887684, "add": 4.61243463103, "result": 1.14611608432, "off": 6.048576054880001, "outprncpinv": 1587.6, "produc": 1.36932896326, "use": 10.296387573799999, "well": 1.0655748708, "miss": 21.2198707953, "set": 2.37415881562, "wait": 4.55421686747, "ani": 2.26767604628, "question": 2.20408163265, "improv": 2.04376930999, "from": 3.00170164491, "detail": 6.78558199173, "num": 33.01039632033, "know": 2.59327017315, "numiltl": 1587.6, "mthssincerecentbcdlq": 1587.6, "free": 1.71818181818, "mthssincerecentrevoldelinq": 1587.6, "for": 9.00283536009, "predict": 20.7393860222, "numtloppastnumm": 1587.6, "builtin": 3175.2, "policycod": 1587.6, "fulli": 5.58031634446, "with": 18.021567761819995, "samediffer": 1587.6, "late": 2.63480209112, "outprncp": 1587.6, "split": 3.4709226060300002, "better": 16.052578362000002, "insabberaham": 1587.6, "totalbalil": 1587.6, "current": 1.5325803649, "revolb": 1587.6, "settlementd": 1587.6, "look": 9.543159413299998, "alright": 291.302752294, "option": 8.09793420046, "exploratori": 136.8620689656, "varianc": 154.13592233010002, "numpi": 3175.2, "url": 41.669291338600004, "veri": 2.51760228354, "extract": 7.703056768560001, "totalrecprncp": 1587.6, "task": 3.88641370869, "numbcsat": 1587.6, "revolbaljoint": 1587.6, "hardshiplength": 1587.6, "column": 14.156041016500001, "familiar": 13.72762645914, "iter": 37.4433962264, "enthusiast": 18.78816568048, "remov": 34.098799747280005, "ilutil": 1587.6, "doe": 1.70581282905, "mthssincelastrecord": 1587.6, "selfexplanatori": 1587.6, "allutil": 1587.6, "totalpymntinv": 1587.6, "hardshiploanstatus": 1587.6, "secappopenactil": 1587.6, "dti": 992.25, "help": 1.39962972759, "constant": 21.953445494340002, "collinear": 835.5789473680001, "matplotlibpyplot": 1587.6, "deviat": 38.3015681544, "step": 22.623441396479997, "inqlastnumm": 1587.6, "move": 1.29125660838, "type": 4.056208482380001, "investor": 13.817232376, "period": 1.3430335843, "machin": 16.09733840304, "hardshipstatus": 1587.6, "secappficorangehigh": 1587.6, "relev": 13.877622377620002, "secappearliestcrlin": 1587.6, "idea": 2.0930784443, "mthssincerecentinq": 1587.6, "abov": 11.422952392380001, "lstms": 1587.6, "requir": 3.05689804564, "secappmthssincelastmajorderog": 1587.6, "techniqu": 3.7293868921800004, "relationship": 2.39132399458, "openacc": 1587.6, "settlementpercentag": 1587.6, "find": 6.917647058839999, "borrow": 24.06670035372, "outcom": 7.48867924528, "tremend": 16.0363636364, "approxim": 2.2132998745299997, "relat": 4.95003507676, "deferralterm": 1587.6, "taxlien": 1587.6, "collectionsnummthsexm": 1587.6, "xoolooloocom": 1587.6, "permiss": 6.280063291139999, "email": 33.4936708861, "paid": 9.93491864832, "hardshipendd": 1587.6, "findconstantfeatur": 1587.6, "clean": 34.34876676765, "long": 1.2657259028899999, "onlin": 2.6051854282900004, "scari": 107.27027027, "grace": 8.73267326733, "togeth": 1.58095996813, "henc": 5.390831918509999, "care": 2.49426551453, "dfloc": 1587.6, "which": 5.025959224999999, "maxbalbc": 1587.6, "through": 4.28299723476, "duplic": 197.955112219, "ficorangelow": 1587.6, "debtsettlementflagd": 1587.6, "text": 6.25655172414, "standard": 3.7831526271800007, "statement": 3.42228928648, "them": 3.29628347982, "check": 13.0131147541, "totalrevhilim": 1587.6, "complex": 2.34021226415, "therefor": 4.66803881212, "start": 5.06694326976, "reach": 1.49801849406, "articl": 2.01805008262, "openactil": 1587.6, "singl": 6.43795620436, "inplac": 3175.2, "numactvrevtl": 1587.6, "numactvbctl": 1587.6, "word": 1.7965372864099998, "seri": 2.93023255814, "whi": 3.2566153846200003, "collectionrecoveryfe": 1587.6, "aham": 2442.46153846, "explain": 2.60049140049, "dtijoint": 1587.6, "anyth": 4.58843930636, "percentbcgtnum": 1587.6, "bad": 3.3944836433599996, "uniqu": 18.09574468086, "openaccnumm": 1587.6, "overflow": 49.9245283019, "build": 1.6341739578, "analysi": 17.3926380368, "lastficorangehigh": 1587.6, "intrat": 1587.6, "seem": 4.58247943426, "settlementterm": 1587.6, "pretrain": 1587.6, "select": 12.14070864132, "secappnumrevacct": 1587.6, "loanstatus": 6350.4, "order": 1.24625166811, "largest": 2.0511627907, "link": 2.15151104486, "there": 3.12273800157, "command": 2.66689064337, "connect": 1.8843916913900003, "titl": 1.87261146497, "possibl": 1.4173734488, "mayb": 21.0557029178, "exampl": 4.51450236966, "spend": 8.31857479696, "tothicredlim": 1587.6, "totalilhighcreditlimit": 1587.6, "knowledg": 3.3981164383599998, "linkedin": 610.615384615, "visual": 5.22752716497, "totcollamt": 1587.6, "follow": 3.1392037964699995, "now": 1.160780873, "further": 2.723623263, "name": 5.510586601850001, "code": 19.4035688096, "high": 2.2955465587, "basic": 2.7301805675, "secappinqlastnummth": 1587.6, "goe": 4.251740760580001, "cnns": 1587.6, "issu": 1.43921675279, "tutori": 178.3820224719, "also": 3.04429530201, "hardshiptyp": 1587.6, "secappchargeoffwithinnummth": 1587.6, "target": 9.656934306570001, "warn": 4.334152334150001, "riski": 36.5806451613, "lastcreditpulld": 1587.6, "row": 27.745543516250002, "straightforward": 27.7552447552, "research": 1.9420183486200002, "accomplish": 5.17302052786, "sabber": 6350.4, "the": 73.0, "may": 1.05201775893, "subgrad": 1587.6, "nextpymntd": 1587.6, "paymentplanstartd": 1587.6, "those": 3.58644578313, "charg": 9.461263408839999, "into": 2.03004922958, "emplength": 1587.6, "howev": 1.0945191313299998, "variabl": 17.494214876039997, "manual": 15.45861733204, "week": 1.80532181033, "hardshippayoffbalanceamount": 1587.6, "snippet": 135.692307692, "secappcollectionsnummthsexm": 1587.6, "seaborn": 140.495575221, "term": 1.39520168732, "raw": 10.6478873239, "introduct": 2.7808723068799996, "without": 1.29547123623, "one": 3.01882487166, "show": 6.335195530749999, "purpos": 2.23416830847, "numtlnumdpdnumm": 1587.6, "status": 2.4636871508400002, "see": 12.7242125511, "some": 4.16146788992, "mthssincercntil": 1587.6, "marketplac": 34.9691629956, "unnecessari": 34.9691629956, "pubrecbankruptci": 1587.6, "worth": 5.210370856580001, "get": 14.2850073108, "delinqnumyr": 1587.6, "like": 1.14918566775, "examin": 3.8505942275, "file": 15.084085510679998, "dfnum": 7938.0, "part": 12.51968193468, "analyt": 17.256521739100002, "club": 5.84751381216, "yet": 2.1258703802900003, "includ": 1.0190641247799999, "recent": 1.54405757635, "loan": 41.300728407899996, "zero": 17.50385887542, "this": 16.06069802736, "time": 3.03382381044, "process": 15.25723438338, "avgcurb": 1587.6, "project": 3.5069582505000003, "embed": 16.835630965, "numacctsevernumpd": 1587.6, "most": 1.02096463023, "between": 1.03453668708, "return": 1.39532431007, "hardshipreason": 1587.6, "domain": 18.78816568048, "shape": 9.61016949153, "seven": 1.93940874664, "numsat": 1587.6, "all": 2.02293577982, "openilnumm": 3175.2, "action": 1.81855670103, "store": 6.89361702128, "numoprevtl": 1587.6, "have": 10.1489484114, "totcurb": 1587.6, "day": 3.55114822548, "intnum": 1587.6, "homeownership": 933.882352941, "numbctl": 1587.6, "lend": 47.6756756757, "object": 2.3488681757700003, "more": 1.0171706817, "and": 23.00144881899, "list": 1.36321483771, "hardshipstartd": 1587.6, "these": 6.44492557512, "prepar": 2.43012398592, "lastpymntamnt": 1587.6, "general": 2.2436404748400003, "made": 1.07038834951, "desc": 610.615384615, "settlementamount": 1587.6, "befor": 2.20072082062, "comment": 6.11909809212, "debtsettlementflag": 1587.6, "can": 7.05756834852, "avail": 1.7288467821, "comput": 11.783275606140002, "make": 1.0762660158600001, "onli": 1.0256476516600002, "each": 7.13848920864, "gmailcom": 1587.6, "necessari": 2.8421052631599997, "totalpymnt": 1587.6, "read": 2.3149606299200003, "mthssincerecentbc": 1587.6, "memberid": 1587.6, "zipcod": 1587.6, "inevit": 11.0634146341, "data": 84.4108889835, "totalreclatefe": 1587.6, "qualiti": 2.9329392204, "lastpymntd": 1587.6, "method": 7.714285714290001, "loanamnt": 1587.6, "rather": 1.55692850838, "sinc": 3.2510580204900004, "bio": 42.336000000000006, "origin": 3.4117478510100003, "dfshape": 4762.799999999999, "pay": 2.80148226575, "line": 1.4182597820299998, "identifi": 11.509351892149999, "treebas": 1587.6, "import": 6.700996116850001, "first": 6.045696877379999, "everi": 2.95835274388, "could": 1.2043695949, "sns": 1323.0, "lastficorangelow": 1587.6, "verificationstatus": 1587.6, "year": 1.0485436893200002, "write": 2.0575427682700003, "half": 1.75813953488, "learn": 11.61375274325, "same": 4.47431832592}, "logtfidf": {"after": 0.040981389296199995, "hardshipamount": 7.369978720910001, "sum": 1.89939013342, "totalbclimit": 7.369978720910001, "true": 1.876651259268, "take": 0.130691962197, "secappmortacc": 7.369978720910001, "five": 0.640406363812, "hardshipdpd": 7.369978720910001, "overnight": 3.0005308684400003, "organ": 0.49392052866999997, "earliestcrlin": 7.369978720910001, "number": 0.3864343136744, "timeconsum": 14.739957441820001, "chargeoffwithinnummth": 7.369978720910001, "been": 0.023645982368400004, "who": 0.2436009319436, "dataset": 15.79753369992, "function": 2.743397224782, "class": 1.4995443798660002, "verificationstatusjoint": 7.369978720910001, "annualincjoint": 7.369978720910001, "bcutil": 7.369978720910001, "hardshiplastpaymentamount": 7.369978720910001, "mortacc": 7.369978720910001, "valu": 10.701513031924, "secappopenacc": 7.369978720910001, "totalacc": 7.369978720910001, "recoveri": 2.07918962078, "mosinoldrevtlop": 7.369978720910001, "slowli": 1.8050752452, "applicationtyp": 7.369978720910001, "medium": 1.94679237232, "jupyternotebook": 7.369978720910001, "mosinrcnttl": 7.369978720910001, "stack": 5.95600351076, "institutionscompani": 7.369978720910001, "secapprevolutil": 7.369978720910001, "creat": 1.558037729598, "multipl": 1.01092401812, "vector": 3.25419887797, "how": 2.3578347846500005, "pcttlnvrdlq": 7.369978720910001, "repost": 6.83935046985, "million": 0.5469102500940001, "quit": 1.05951513684, "especi": 0.511098609709, "would": 0.1592352559294, "due": 0.21341214386399998, "frame": 3.6747601172800004, "totalcutl": 7.369978720910001, "settlementstatus": 7.369978720910001, "interest": 0.9441435559639999, "totalrecint": 7.369978720910001, "will": 0.40557306983, "associ": 1.1296200614040002, "partnum": 14.215228912879999, "totalbalexmort": 7.369978720910001, "numrevtlbalgtnum": 7.369978720910001, "inqlastnummth": 7.369978720910001, "hardshipflag": 7.369978720910001, "dstack": 7.369978720910001, "inqfi": 7.369978720910001, "next": 1.206491056497, "below": 1.627253183872, "perform": 2.55708510348, "but": 0.0647694882876, "need": 1.088220490326, "classif": 2.08779073629, "final": 1.170935455792, "feel": 1.1428493419299999, "mosinrcntrevtlop": 7.369978720910001, "point": 0.23103235903299998, "openrvnumm": 14.739957441820001, "applic": 2.46320785698, "has": 0.1708957794192, "founder": 1.3946435557299999, "numtlnumdpd": 7.369978720910001, "plt": 7.369978720910001, "advantag": 1.20120515883, "panda": 18.866947025199998, "mosinoldilacct": 7.369978720910001, "default": 6.102316324279999, "resourc": 1.08137694258, "imper": 3.4946196998500003, "out": 0.2337055636772, "model": 9.586850950443, "delinqamnt": 7.369978720910001, "good": 0.837178809814, "sure": 4.0173731104, "numrevacct": 7.369978720910001, "mthssincelastdelinq": 7.369978720910001, "accopenpastnummth": 7.369978720910001, "revolutil": 7.369978720910001, "count": 1.24748591139, "annualinc": 7.369978720910001, "disbursementmethod": 7.369978720910001, "fundedamnt": 7.369978720910001, "print": 1.19307248967, "not": 0.12441930406, "numtlnumgdpdnumm": 7.369978720910001, "mthssincelastmajorderog": 7.369978720910001, "origprojectedadditionalaccruedinterest": 7.369978720910001, "secappficorangelow": 7.369978720910001, "fundedamntinv": 7.369978720910001, "are": 0.3241422094097, "whole": 0.8306818244059999, "less": 0.3846144626, "msaham": 7.369978720910001, "pymntplan": 7.369978720910001, "regard": 0.5819082848730001, "four": 0.380427077738, "grade": 1.8773288849, "coldf": 7.369978720910001, "pleas": 2.21149829955, "easi": 3.3330592702999997, "meantim": 3.10870828737, "notic": 1.47474978168, "emptitl": 7.369978720910001, "than": 0.0645217244364, "then": 0.33213546092359997, "separ": 0.941519545898, "they": 0.0297269947676, "geophysicist": 11.404543800699999, "instal": 1.3316305879, "jump": 2.08829899551, "last": 0.38408728922200003, "let": 9.990420538239999, "world": 0.107420248621, "scienc": 0.841436178891, "bcopentobuy": 7.369978720910001, "imbalanc": 6.340359303730001, "initialliststatus": 7.369978720910001, "github": 14.739957441820001, "featur": 21.592758325242, "processingnum": 22.10993616273, "dtype": 7.369978720910001, "simpl": 1.2232212893899999, "that": 0.05168992893532, "mine": 1.58430908678, "until": 0.138474663439, "sort": 1.64639361896, "two": 0.041096533074600004, "accord": 0.243650319127, "typic": 0.812774319158, "financi": 0.958817483446, "pubrec": 7.369978720910001, "accnowdelinq": 7.369978720910001, "addrstat": 7.369978720910001, "three": 0.12823737644980002, "ficorangehigh": 7.369978720910001, "drop": 0.8999535106219999, "add": 1.52875583713, "result": 0.136378908381, "off": 1.6541140815520001, "outprncpinv": 7.369978720910001, "produc": 0.314320812003, "use": 0.292080197316, "well": 0.0635144383156, "miss": 7.579071450720001, "set": 0.342992022578, "wait": 1.51605358782, "ani": 0.251216716732, "question": 0.790310929014, "improv": 0.7147958039319999, "from": 0.0017011625065979999, "detail": 2.448563331519, "num": 0.010394683048101, "know": 0.952919694398, "numiltl": 7.369978720910001, "mthssincerecentbcdlq": 7.369978720910001, "free": 0.5412666492670001, "mthssincerecentrevoldelinq": 7.369978720910001, "for": 0.0028349135585730005, "predict": 6.5829609507599995, "numtloppastnumm": 7.369978720910001, "builtin": 14.739957441820001, "policycod": 7.369978720910001, "fulli": 2.05219657356, "with": 0.02155485084102, "samediffer": 7.369978720910001, "late": 0.551321781752, "outprncp": 7.369978720910001, "split": 1.24442043932, "better": 5.5714235248, "insabberaham": 7.369978720910001, "totalbalil": 7.369978720910001, "current": 0.42695282784500005, "revolb": 7.369978720910001, "settlementd": 7.369978720910001, "look": 3.2319334680000003, "alright": 9.962431863339999, "option": 2.79692362322, "exploratori": 8.451652884480001, "varianc": 11.817667611029998, "numpi": 14.739957441820001, "url": 3.72976443878, "veri": 0.460319586476, "extract": 2.04161723301, "totalrecprncp": 7.369978720910001, "task": 1.35748680661, "numbcsat": 7.369978720910001, "revolbaljoint": 7.369978720910001, "hardshiplength": 7.369978720910001, "column": 3.91398855876, "familiar": 3.85252630334, "iter": 3.62283035867, "enthusiast": 4.48016001198, "remov": 11.832830306996001, "ilutil": 7.369978720910001, "doe": 0.5340417297169999, "mthssincelastrecord": 7.369978720910001, "selfexplanatori": 7.369978720910001, "allutil": 7.369978720910001, "totalpymntinv": 7.369978720910001, "hardshiploanstatus": 7.369978720910001, "secappopenactil": 7.369978720910001, "dti": 6.89997509166, "help": 0.336207721344, "constant": 7.7829877686, "collinear": 6.72812483474, "matplotlibpyplot": 7.369978720910001, "deviat": 5.9046873175400005, "step": 8.31636045584, "inqlastnumm": 7.369978720910001, "move": 0.255615859253, "type": 1.414202970774, "investor": 2.62591653605, "period": 0.294930924153, "machin": 5.56943832248, "hardshipstatus": 7.369978720910001, "secappficorangehigh": 7.369978720910001, "relev": 3.8742609227999996, "secappearliestcrlin": 7.369978720910001, "idea": 0.73863592212, "mthssincerecentinq": 7.369978720910001, "abov": 3.8631913788960004, "lstms": 7.369978720910001, "requir": 0.84850702135, "secappmthssincelastmajorderog": 7.369978720910001, "techniqu": 1.31624384807, "relationship": 0.871847185184, "openacc": 7.369978720910001, "settlementpercentag": 7.369978720910001, "find": 2.191125321152, "borrow": 6.246650604900001, "outcom": 2.01339244624, "tremend": 2.77485887077, "approxim": 0.7944845577770001, "relat": 0.8524012066159999, "deferralterm": 7.369978720910001, "taxlien": 7.369978720910001, "collectionsnummthsexm": 7.369978720910001, "xoolooloocom": 7.369978720910001, "permiss": 1.8373800586400002, "email": 3.5113564922099996, "paid": 3.59233019673, "hardshipendd": 7.369978720910001, "findconstantfeatur": 7.369978720910001, "clean": 9.63564101815, "long": 0.235645793878, "onlin": 0.957503854357, "scari": 4.67535154014, "grace": 2.16707153917, "togeth": 0.458032237308, "henc": 1.68469971782, "care": 0.9139943029109999, "dfloc": 7.369978720910001, "which": 0.02589206922715, "maxbalbc": 7.369978720910001, "through": 0.2734347675396, "duplic": 29.854552060400003, "ficorangelow": 7.369978720910001, "debtsettlementflagd": 7.369978720910001, "text": 2.28096401998, "standard": 1.27482101964, "statement": 1.2303097091500002, "them": 0.2825499807279, "check": 3.74562099124, "totalrevhilim": 7.369978720910001, "complex": 0.8502416364309999, "therefor": 1.695183696672, "start": 0.945773477164, "reach": 0.40414323085000003, "articl": 0.702131739574, "openactil": 7.369978720910001, "singl": 1.903667076236, "inplac": 14.739957441820001, "numactvrevtl": 7.369978720910001, "numactvbctl": 7.369978720910001, "word": 0.585861082385, "seri": 0.7638692213959999, "whi": 1.18068843047, "collectionrecoveryfe": 7.369978720910001, "aham": 14.215228912879999, "explain": 0.955700427358, "dtijoint": 7.369978720910001, "anyth": 1.52353994585, "percentbcgtnum": 7.369978720910001, "bad": 1.2221516561799999, "uniqu": 6.623504045400001, "openaccnumm": 7.369978720910001, "overflow": 3.91051243112, "build": 0.491137452091, "analysi": 6.233045514600001, "lastficorangehigh": 7.369978720910001, "intrat": 7.369978720910001, "seem": 1.658186064552, "settlementterm": 7.369978720910001, "pretrain": 7.369978720910001, "select": 4.228828122798, "secappnumrevacct": 7.369978720910001, "loanstatus": 29.479914883640003, "order": 0.22014038079300002, "largest": 0.7184068473190001, "link": 0.7661704068449999, "there": 0.12029367877649999, "command": 0.9809132407500001, "connect": 0.633605058682, "titl": 0.6273339619899999, "possibl": 0.348805474891, "mayb": 3.0471714458899997, "exampl": 1.2260480249969998, "spend": 2.85068752232, "tothicredlim": 7.369978720910001, "totalilhighcreditlimit": 7.369978720910001, "knowledg": 1.2232212893899999, "linkedin": 6.414467275880001, "visual": 1.6539383488600001, "totcollamt": 7.369978720910001, "follow": 0.1360707332826, "now": 0.149092945021, "further": 0.617631790594, "name": 0.4861658319215001, "code": 6.78009547985, "high": 0.27564757308000004, "basic": 1.00436774895, "secappinqlastnummth": 7.369978720910001, "goe": 1.4473284897999998, "cnns": 7.369978720910001, "issu": 0.364099043934, "tutori": 12.2559454665, "also": 0.0439714734, "hardshiptyp": 7.369978720910001, "secappchargeoffwithinnummth": 7.369978720910001, "target": 3.5071918488600007, "warn": 1.4665260511200002, "riski": 3.5995192798, "lastcreditpulld": 7.369978720910001, "row": 8.56818660425, "straightforward": 3.3234248225200003, "research": 0.663727818138, "accomplish": 1.64345675928, "sabber": 29.479914883640003, "the": 0.0, "may": 0.050709995284400004, "subgrad": 7.369978720910001, "nextpymntd": 7.369978720910001, "paymentplanstartd": 7.369978720910001, "those": 0.5356481726189999, "charg": 3.443646263024, "into": 0.0298257264574, "emplength": 7.369978720910001, "howev": 0.0903151173475, "variabl": 4.3374461344, "manual": 4.09003884682, "week": 0.5907388641619999, "hardshippayoffbalanceamount": 7.369978720910001, "snippet": 4.91038987911, "secappcollectionsnummthsexm": 7.369978720910001, "seaborn": 4.94517599519, "term": 0.33303898354600003, "raw": 2.36536149914, "introduct": 1.02276465794, "without": 0.258874517941, "one": 0.0187660549365, "show": 1.1834138300650001, "purpos": 0.803869037322, "numtlnumdpdnumm": 7.369978720910001, "status": 0.9016590696060001, "see": 2.40921585492, "some": 0.158294036258, "mthssincercntil": 7.369978720910001, "marketplac": 3.5544666158599996, "unnecessari": 5.722638870599999, "pubrecbankruptci": 7.369978720910001, "worth": 1.65065103492, "get": 4.638152046256, "delinqnumyr": 7.369978720910001, "like": 0.139053576545, "examin": 1.3482274812000001, "file": 5.30938354892, "dfnum": 36.849893604550005, "part": 0.5087437317936001, "analyt": 2.8481901438599997, "club": 2.14573880194, "yet": 0.754181309241, "includ": 0.0188846813905, "recent": 0.434413741288, "loan": 10.55721112185, "zero": 4.3385483664599995, "this": 0.06058318484, "time": 0.0336345565878, "process": 4.750462791225, "avgcurb": 7.369978720910001, "project": 1.123203771814, "embed": 2.82349753127, "numacctsevernumpd": 7.369978720910001, "most": 0.020747896295599998, "between": 0.033953681165299995, "return": 0.333126868592, "hardshipreason": 7.369978720910001, "domain": 4.48016001198, "shape": 3.4926287134500003, "seven": 0.662383156851, "numsat": 7.369978720910001, "all": 0.022805264195599997, "openilnumm": 14.739957441820001, "action": 0.598043165069, "store": 2.4748974670400004, "numoprevtl": 7.369978720910001, "have": 0.14785002341200001, "totcurb": 7.369978720910001, "day": 0.5059761189510001, "intnum": 7.369978720910001, "homeownership": 6.83935046985, "numbctl": 7.369978720910001, "lend": 8.29742710575, "object": 0.853933584803, "more": 0.017024931599999998, "and": 0.0014487732674628, "list": 0.309845761506, "hardshipstartd": 7.369978720910001, "these": 0.4292017164048, "prepar": 0.8879422790620001, "lastpymntamnt": 7.369978720910001, "general": 0.229905156126, "made": 0.0680215260973, "desc": 6.414467275880001, "settlementamount": 7.369978720910001, "befor": 0.191275543759, "comment": 2.23653506908, "debtsettlementflag": 7.369978720910001, "can": 0.974046578364, "avail": 0.547454586289, "comput": 4.104206747819999, "make": 0.07349765782289999, "onli": 0.025324268329099998, "each": 1.042450135824, "gmailcom": 7.369978720910001, "necessari": 1.0445450673999999, "totalpymnt": 7.369978720910001, "read": 0.83939268088, "mthssincerecentbc": 7.369978720910001, "memberid": 7.369978720910001, "zipcod": 7.369978720910001, "inevit": 2.4036436857099996, "data": 30.42051462, "totalreclatefe": 7.369978720910001, "qualiti": 1.07600506711, "lastpymntd": 7.369978720910001, "method": 2.833384826523, "loanamnt": 7.369978720910001, "rather": 0.442714975539, "sinc": 0.2411045983731, "bio": 3.7456377879300002, "origin": 0.385837312761, "dfshape": 22.10993616273, "pay": 1.0301486577299999, "line": 0.349430614452, "identifi": 4.1686100023599995, "treebas": 7.369978720910001, "import": 1.46409138533, "first": 0.04552373887296, "everi": 0.782970854842, "could": 0.18595627229000003, "sns": 7.18765716411, "lastficorangelow": 7.369978720910001, "verificationstatus": 7.369978720910001, "year": 0.047402238894600005, "write": 0.721512439877, "half": 0.564256167492, "learn": 4.213760323724999, "same": 0.448238598416}, "logidf": {"after": 0.020490694648099998, "hardshipamount": 7.369978720910001, "sum": 1.89939013342, "totalbclimit": 7.369978720910001, "true": 0.938325629634, "take": 0.130691962197, "secappmortacc": 7.369978720910001, "five": 0.320203181906, "hardshipdpd": 7.369978720910001, "overnight": 3.0005308684400003, "organ": 0.49392052866999997, "earliestcrlin": 7.369978720910001, "number": 0.0966085784186, "timeconsum": 7.369978720910001, "chargeoffwithinnummth": 7.369978720910001, "been": 0.023645982368400004, "who": 0.0609002329859, "dataset": 5.26584456664, "function": 0.914465741594, "class": 0.7497721899330001, "verificationstatusjoint": 7.369978720910001, "annualincjoint": 7.369978720910001, "bcutil": 7.369978720910001, "hardshiplastpaymentamount": 7.369978720910001, "mortacc": 7.369978720910001, "valu": 0.823193310148, "secappopenacc": 7.369978720910001, "totalacc": 7.369978720910001, "recoveri": 2.07918962078, "mosinoldrevtlop": 7.369978720910001, "slowli": 1.8050752452, "applicationtyp": 7.369978720910001, "medium": 1.94679237232, "jupyternotebook": 7.369978720910001, "mosinrcnttl": 7.369978720910001, "stack": 2.97800175538, "institutionscompani": 7.369978720910001, "secapprevolutil": 7.369978720910001, "creat": 0.222576818514, "multipl": 1.01092401812, "vector": 3.25419887797, "how": 0.47156695693000006, "pcttlnvrdlq": 7.369978720910001, "repost": 6.83935046985, "million": 0.5469102500940001, "quit": 1.05951513684, "especi": 0.511098609709, "would": 0.0796176279647, "due": 0.21341214386399998, "frame": 1.8373800586400002, "totalcutl": 7.369978720910001, "settlementstatus": 7.369978720910001, "interest": 0.47207177798199995, "totalrecint": 7.369978720910001, "will": 0.202786534915, "associ": 0.28240501535100004, "partnum": 7.1076144564399995, "totalbalexmort": 7.369978720910001, "numrevtlbalgtnum": 7.369978720910001, "inqlastnummth": 7.369978720910001, "hardshipflag": 7.369978720910001, "dstack": 7.369978720910001, "inqfi": 7.369978720910001, "next": 0.402163685499, "below": 0.813626591936, "perform": 0.42618085058, "but": 0.0161923720719, "need": 0.362740163442, "classif": 2.08779073629, "final": 0.292733863948, "feel": 1.1428493419299999, "mosinrcntrevtlop": 7.369978720910001, "point": 0.23103235903299998, "openrvnumm": 7.369978720910001, "applic": 1.23160392849, "has": 0.0427239448548, "founder": 1.3946435557299999, "numtlnumdpd": 7.369978720910001, "plt": 7.369978720910001, "advantag": 1.20120515883, "panda": 4.7167367562999996, "mosinoldilacct": 7.369978720910001, "default": 3.0511581621399997, "resourc": 1.08137694258, "imper": 3.4946196998500003, "out": 0.0584263909193, "model": 0.7374500731110001, "delinqamnt": 7.369978720910001, "good": 0.418589404907, "sure": 2.0086865552, "numrevacct": 7.369978720910001, "mthssincelastdelinq": 7.369978720910001, "accopenpastnummth": 7.369978720910001, "revolutil": 7.369978720910001, "count": 1.24748591139, "annualinc": 7.369978720910001, "disbursementmethod": 7.369978720910001, "fundedamnt": 7.369978720910001, "print": 1.19307248967, "not": 0.0155524130075, "numtlnumgdpdnumm": 7.369978720910001, "mthssincelastmajorderog": 7.369978720910001, "origprojectedadditionalaccruedinterest": 7.369978720910001, "secappficorangelow": 7.369978720910001, "fundedamntinv": 7.369978720910001, "are": 0.0294674735827, "whole": 0.8306818244059999, "less": 0.3846144626, "msaham": 7.369978720910001, "pymntplan": 7.369978720910001, "regard": 0.5819082848730001, "four": 0.190213538869, "grade": 1.8773288849, "coldf": 7.369978720910001, "pleas": 2.21149829955, "easi": 1.6665296351499999, "meantim": 3.10870828737, "notic": 1.47474978168, "emptitl": 7.369978720910001, "than": 0.0322608622182, "then": 0.08303386523089999, "separ": 0.470759772949, "they": 0.0297269947676, "geophysicist": 5.7022719003499995, "instal": 1.3316305879, "jump": 2.08829899551, "last": 0.19204364461100001, "let": 1.2488025672799998, "world": 0.107420248621, "scienc": 0.841436178891, "bcopentobuy": 7.369978720910001, "imbalanc": 6.340359303730001, "initialliststatus": 7.369978720910001, "github": 7.369978720910001, "featur": 0.423387418142, "processingnum": 7.369978720910001, "dtype": 7.369978720910001, "simpl": 1.2232212893899999, "that": 0.00397614837964, "mine": 1.58430908678, "until": 0.138474663439, "sort": 1.64639361896, "two": 0.0136988443582, "accord": 0.243650319127, "typic": 0.812774319158, "financi": 0.958817483446, "pubrec": 7.369978720910001, "accnowdelinq": 7.369978720910001, "addrstat": 7.369978720910001, "three": 0.06411868822490001, "ficorangehigh": 7.369978720910001, "drop": 0.8999535106219999, "add": 1.52875583713, "result": 0.136378908381, "off": 0.41352852038800003, "outprncpinv": 7.369978720910001, "produc": 0.314320812003, "use": 0.0292080197316, "well": 0.0635144383156, "miss": 1.2631785751200002, "set": 0.171496011289, "wait": 1.51605358782, "ani": 0.125608358366, "question": 0.790310929014, "improv": 0.7147958039319999, "from": 0.000567054168866, "detail": 0.816187777173, "num": 0.00031499039539700004, "know": 0.952919694398, "numiltl": 7.369978720910001, "mthssincerecentbcdlq": 7.369978720910001, "free": 0.5412666492670001, "mthssincerecentrevoldelinq": 7.369978720910001, "for": 0.00031499039539700004, "predict": 1.6457402376899999, "numtloppastnumm": 7.369978720910001, "builtin": 7.369978720910001, "policycod": 7.369978720910001, "fulli": 1.02609828678, "with": 0.00119749171339, "samediffer": 7.369978720910001, "late": 0.275660890876, "outprncp": 7.369978720910001, "split": 1.24442043932, "better": 0.6964279406, "insabberaham": 7.369978720910001, "totalbalil": 7.369978720910001, "current": 0.42695282784500005, "revolb": 7.369978720910001, "settlementd": 7.369978720910001, "look": 0.6463866936, "alright": 4.9812159316699995, "option": 1.39846181161, "exploratori": 4.225826442240001, "varianc": 3.9392225370099996, "numpi": 7.369978720910001, "url": 3.72976443878, "veri": 0.230159793238, "extract": 2.04161723301, "totalrecprncp": 7.369978720910001, "task": 1.35748680661, "numbcsat": 7.369978720910001, "revolbaljoint": 7.369978720910001, "hardshiplength": 7.369978720910001, "column": 1.95699427938, "familiar": 1.92626315167, "iter": 3.62283035867, "enthusiast": 2.24008000599, "remov": 0.6960488415880001, "ilutil": 7.369978720910001, "doe": 0.5340417297169999, "mthssincelastrecord": 7.369978720910001, "selfexplanatori": 7.369978720910001, "allutil": 7.369978720910001, "totalpymntinv": 7.369978720910001, "hardshiploanstatus": 7.369978720910001, "secappopenactil": 7.369978720910001, "dti": 6.89997509166, "help": 0.336207721344, "constant": 1.2971646281, "collinear": 6.72812483474, "matplotlibpyplot": 7.369978720910001, "deviat": 2.9523436587700003, "step": 1.03954505698, "inqlastnumm": 7.369978720910001, "move": 0.255615859253, "type": 0.707101485387, "investor": 2.62591653605, "period": 0.294930924153, "machin": 1.39235958062, "hardshipstatus": 7.369978720910001, "secappficorangehigh": 7.369978720910001, "relev": 1.9371304613999998, "secappearliestcrlin": 7.369978720910001, "idea": 0.73863592212, "mthssincerecentinq": 7.369978720910001, "abov": 0.643865229816, "lstms": 7.369978720910001, "requir": 0.424253510675, "secappmthssincelastmajorderog": 7.369978720910001, "techniqu": 1.31624384807, "relationship": 0.871847185184, "openacc": 7.369978720910001, "settlementpercentag": 7.369978720910001, "find": 0.547781330288, "borrow": 2.0822168683, "outcom": 2.01339244624, "tremend": 2.77485887077, "approxim": 0.7944845577770001, "relat": 0.21310030165399999, "deferralterm": 7.369978720910001, "taxlien": 7.369978720910001, "collectionsnummthsexm": 7.369978720910001, "xoolooloocom": 7.369978720910001, "permiss": 1.8373800586400002, "email": 3.5113564922099996, "paid": 1.19744339891, "hardshipendd": 7.369978720910001, "findconstantfeatur": 7.369978720910001, "clean": 1.9271282036300001, "long": 0.235645793878, "onlin": 0.957503854357, "scari": 4.67535154014, "grace": 2.16707153917, "togeth": 0.458032237308, "henc": 1.68469971782, "care": 0.9139943029109999, "dfloc": 7.369978720910001, "which": 0.00517841384543, "maxbalbc": 7.369978720910001, "through": 0.0683586918849, "duplic": 2.98545520604, "ficorangelow": 7.369978720910001, "debtsettlementflagd": 7.369978720910001, "text": 1.14048200999, "standard": 0.63741050982, "statement": 1.2303097091500002, "them": 0.0941833269093, "check": 1.87281049562, "totalrevhilim": 7.369978720910001, "complex": 0.8502416364309999, "therefor": 0.847591848336, "start": 0.236443369291, "reach": 0.40414323085000003, "articl": 0.702131739574, "openactil": 7.369978720910001, "singl": 0.475916769059, "inplac": 7.369978720910001, "numactvrevtl": 7.369978720910001, "numactvbctl": 7.369978720910001, "word": 0.585861082385, "seri": 0.38193461069799994, "whi": 1.18068843047, "collectionrecoveryfe": 7.369978720910001, "aham": 7.1076144564399995, "explain": 0.955700427358, "dtijoint": 7.369978720910001, "anyth": 1.52353994585, "percentbcgtnum": 7.369978720910001, "bad": 1.2221516561799999, "uniqu": 1.1039173409, "openaccnumm": 7.369978720910001, "overflow": 3.91051243112, "build": 0.491137452091, "analysi": 1.2466091029200002, "lastficorangehigh": 7.369978720910001, "intrat": 7.369978720910001, "seem": 0.829093032276, "settlementterm": 7.369978720910001, "pretrain": 7.369978720910001, "select": 0.704804687133, "secappnumrevacct": 7.369978720910001, "loanstatus": 7.369978720910001, "order": 0.22014038079300002, "largest": 0.7184068473190001, "link": 0.7661704068449999, "there": 0.0400978929255, "command": 0.9809132407500001, "connect": 0.633605058682, "titl": 0.6273339619899999, "possibl": 0.348805474891, "mayb": 3.0471714458899997, "exampl": 0.40868267499899996, "spend": 1.42534376116, "tothicredlim": 7.369978720910001, "totalilhighcreditlimit": 7.369978720910001, "knowledg": 1.2232212893899999, "linkedin": 6.414467275880001, "visual": 1.6539383488600001, "totcollamt": 7.369978720910001, "follow": 0.045356911094199995, "now": 0.149092945021, "further": 0.308815895297, "name": 0.09723316638430002, "code": 1.35601909597, "high": 0.13782378654000002, "basic": 1.00436774895, "secappinqlastnummth": 7.369978720910001, "goe": 1.4473284897999998, "cnns": 7.369978720910001, "issu": 0.364099043934, "tutori": 4.0853151555, "also": 0.0146571578, "hardshiptyp": 7.369978720910001, "secappchargeoffwithinnummth": 7.369978720910001, "target": 1.1690639496200002, "warn": 1.4665260511200002, "riski": 3.5995192798, "lastcreditpulld": 7.369978720910001, "row": 1.71363732085, "straightforward": 3.3234248225200003, "research": 0.663727818138, "accomplish": 1.64345675928, "sabber": 7.369978720910001, "the": 0.0, "may": 0.050709995284400004, "subgrad": 7.369978720910001, "nextpymntd": 7.369978720910001, "paymentplanstartd": 7.369978720910001, "those": 0.17854939087299998, "charg": 0.860911565756, "into": 0.0149128632287, "emplength": 7.369978720910001, "howev": 0.0903151173475, "variabl": 2.1687230672, "manual": 2.04501942341, "week": 0.5907388641619999, "hardshippayoffbalanceamount": 7.369978720910001, "snippet": 4.91038987911, "secappcollectionsnummthsexm": 7.369978720910001, "seaborn": 4.94517599519, "term": 0.33303898354600003, "raw": 2.36536149914, "introduct": 1.02276465794, "without": 0.258874517941, "one": 0.0062553516455, "show": 0.236682766013, "purpos": 0.803869037322, "numtlnumdpdnumm": 7.369978720910001, "status": 0.9016590696060001, "see": 0.240921585492, "some": 0.0395735090645, "mthssincercntil": 7.369978720910001, "marketplac": 3.5544666158599996, "unnecessari": 2.8613194352999995, "pubrecbankruptci": 7.369978720910001, "worth": 1.65065103492, "get": 0.579769005782, "delinqnumyr": 7.369978720910001, "like": 0.139053576545, "examin": 1.3482274812000001, "file": 1.32734588723, "dfnum": 7.369978720910001, "part": 0.04239531098280001, "analyt": 2.8481901438599997, "club": 1.07286940097, "yet": 0.754181309241, "includ": 0.0188846813905, "recent": 0.434413741288, "loan": 2.11144222437, "zero": 2.1692741832299998, "this": 0.0037864490525, "time": 0.0112115188626, "process": 0.527829199025, "avgcurb": 7.369978720910001, "project": 0.561601885907, "embed": 2.82349753127, "numacctsevernumpd": 7.369978720910001, "most": 0.020747896295599998, "between": 0.033953681165299995, "return": 0.333126868592, "hardshipreason": 7.369978720910001, "domain": 2.24008000599, "shape": 1.16420957115, "seven": 0.662383156851, "numsat": 7.369978720910001, "all": 0.011402632097799998, "openilnumm": 7.369978720910001, "action": 0.598043165069, "store": 1.2374487335200002, "numoprevtl": 7.369978720910001, "have": 0.0147850023412, "totcurb": 7.369978720910001, "day": 0.16865870631700003, "intnum": 7.369978720910001, "homeownership": 6.83935046985, "numbctl": 7.369978720910001, "lend": 2.7658090352499998, "object": 0.853933584803, "more": 0.017024931599999998, "and": 6.29901420636e-05, "list": 0.309845761506, "hardshipstartd": 7.369978720910001, "these": 0.0715336194008, "prepar": 0.8879422790620001, "lastpymntamnt": 7.369978720910001, "general": 0.114952578063, "made": 0.0680215260973, "desc": 6.414467275880001, "settlementamount": 7.369978720910001, "befor": 0.0956377718795, "comment": 1.11826753454, "debtsettlementflag": 7.369978720910001, "can": 0.162341096394, "avail": 0.547454586289, "comput": 1.36806891594, "make": 0.07349765782289999, "onli": 0.025324268329099998, "each": 0.173741689304, "gmailcom": 7.369978720910001, "necessari": 1.0445450673999999, "totalpymnt": 7.369978720910001, "read": 0.83939268088, "mthssincerecentbc": 7.369978720910001, "memberid": 7.369978720910001, "zipcod": 7.369978720910001, "inevit": 2.4036436857099996, "data": 1.2168205848, "totalreclatefe": 7.369978720910001, "qualiti": 1.07600506711, "lastpymntd": 7.369978720910001, "method": 0.944461608841, "loanamnt": 7.369978720910001, "rather": 0.442714975539, "sinc": 0.0803681994577, "bio": 3.7456377879300002, "origin": 0.128612437587, "dfshape": 7.369978720910001, "pay": 1.0301486577299999, "line": 0.349430614452, "identifi": 0.833722000472, "treebas": 7.369978720910001, "import": 0.292818277066, "first": 0.0075872898121599995, "everi": 0.391485427421, "could": 0.18595627229000003, "sns": 7.18765716411, "lastficorangelow": 7.369978720910001, "verificationstatus": 7.369978720910001, "year": 0.047402238894600005, "write": 0.721512439877, "half": 0.564256167492, "learn": 0.842752064745, "same": 0.112059649604}, "freq": {"after": 2, "hardshipamount": 1, "sum": 1, "totalbclimit": 1, "true": 2, "take": 1, "secappmortacc": 1, "five": 2, "hardshipdpd": 1, "overnight": 1, "organ": 1, "earliestcrlin": 1, "number": 4, "timeconsum": 2, "chargeoffwithinnummth": 1, "been": 1, "who": 4, "dataset": 3, "function": 3, "class": 2, "verificationstatusjoint": 1, "annualincjoint": 1, "bcutil": 1, "hardshiplastpaymentamount": 1, "mortacc": 1, "valu": 13, "secappopenacc": 1, "totalacc": 1, "recoveri": 1, "mosinoldrevtlop": 1, "slowli": 1, "applicationtyp": 1, "medium": 1, "jupyternotebook": 1, "mosinrcnttl": 1, "stack": 2, "institutionscompani": 1, "secapprevolutil": 1, "creat": 7, "multipl": 1, "vector": 1, "how": 5, "pcttlnvrdlq": 1, "repost": 1, "million": 1, "quit": 1, "especi": 1, "would": 2, "due": 1, "frame": 2, "totalcutl": 1, "settlementstatus": 1, "interest": 2, "totalrecint": 1, "will": 2, "associ": 4, "partnum": 2, "totalbalexmort": 1, "numrevtlbalgtnum": 1, "inqlastnummth": 1, "hardshipflag": 1, "dstack": 1, "inqfi": 1, "next": 3, "below": 2, "perform": 6, "but": 4, "need": 3, "classif": 1, "final": 4, "feel": 1, "mosinrcntrevtlop": 1, "point": 1, "openrvnumm": 2, "applic": 2, "has": 4, "founder": 1, "numtlnumdpd": 1, "plt": 1, "advantag": 1, "panda": 4, "mosinoldilacct": 1, "default": 2, "resourc": 1, "imper": 1, "out": 4, "model": 13, "delinqamnt": 1, "good": 2, "sure": 2, "numrevacct": 1, "mthssincelastdelinq": 1, "accopenpastnummth": 1, "revolutil": 1, "count": 1, "annualinc": 1, "disbursementmethod": 1, "fundedamnt": 1, "print": 1, "not": 8, "numtlnumgdpdnumm": 1, "mthssincelastmajorderog": 1, "origprojectedadditionalaccruedinterest": 1, "secappficorangelow": 1, "fundedamntinv": 1, "are": 11, "whole": 1, "less": 1, "msaham": 1, "pymntplan": 1, "regard": 1, "four": 2, "grade": 1, "coldf": 1, "pleas": 1, "easi": 2, "meantim": 1, "notic": 1, "emptitl": 1, "than": 2, "then": 4, "separ": 2, "they": 1, "geophysicist": 2, "instal": 1, "jump": 1, "last": 2, "let": 8, "world": 1, "scienc": 1, "bcopentobuy": 1, "imbalanc": 1, "initialliststatus": 1, "github": 2, "featur": 51, "processingnum": 3, "dtype": 1, "simpl": 1, "that": 13, "mine": 1, "until": 1, "sort": 1, "two": 3, "accord": 1, "typic": 1, "financi": 1, "pubrec": 1, "accnowdelinq": 1, "addrstat": 1, "three": 2, "ficorangehigh": 1, "drop": 1, "add": 1, "result": 1, "off": 4, "outprncpinv": 1, "produc": 1, "use": 10, "well": 1, "miss": 6, "set": 2, "wait": 1, "ani": 2, "question": 1, "improv": 1, "from": 3, "detail": 3, "num": 33, "know": 1, "numiltl": 1, "mthssincerecentbcdlq": 1, "free": 1, "mthssincerecentrevoldelinq": 1, "for": 9, "predict": 4, "numtloppastnumm": 1, "builtin": 2, "policycod": 1, "fulli": 2, "with": 18, "samediffer": 1, "late": 2, "outprncp": 1, "split": 1, "better": 8, "insabberaham": 1, "totalbalil": 1, "current": 1, "revolb": 1, "settlementd": 1, "look": 5, "alright": 2, "option": 2, "exploratori": 2, "varianc": 3, "numpi": 2, "url": 1, "veri": 2, "extract": 1, "totalrecprncp": 1, "task": 1, "numbcsat": 1, "revolbaljoint": 1, "hardshiplength": 1, "column": 2, "familiar": 2, "iter": 1, "enthusiast": 2, "remov": 17, "ilutil": 1, "doe": 1, "mthssincelastrecord": 1, "selfexplanatori": 1, "allutil": 1, "totalpymntinv": 1, "hardshiploanstatus": 1, "secappopenactil": 1, "dti": 1, "help": 1, "constant": 6, "collinear": 1, "matplotlibpyplot": 1, "deviat": 2, "step": 8, "inqlastnumm": 1, "move": 1, "type": 2, "investor": 1, "period": 1, "machin": 4, "hardshipstatus": 1, "secappficorangehigh": 1, "relev": 2, "secappearliestcrlin": 1, "idea": 1, "mthssincerecentinq": 1, "abov": 6, "lstms": 1, "requir": 2, "secappmthssincelastmajorderog": 1, "techniqu": 1, "relationship": 1, "openacc": 1, "settlementpercentag": 1, "find": 4, "borrow": 3, "outcom": 1, "tremend": 1, "approxim": 1, "relat": 4, "deferralterm": 1, "taxlien": 1, "collectionsnummthsexm": 1, "xoolooloocom": 1, "permiss": 1, "email": 1, "paid": 3, "hardshipendd": 1, "findconstantfeatur": 1, "clean": 5, "long": 1, "onlin": 1, "scari": 1, "grace": 1, "togeth": 1, "henc": 1, "care": 1, "dfloc": 1, "which": 5, "maxbalbc": 1, "through": 4, "duplic": 10, "ficorangelow": 1, "debtsettlementflagd": 1, "text": 2, "standard": 2, "statement": 1, "them": 3, "check": 2, "totalrevhilim": 1, "complex": 1, "therefor": 2, "start": 4, "reach": 1, "articl": 1, "openactil": 1, "singl": 4, "inplac": 2, "numactvrevtl": 1, "numactvbctl": 1, "word": 1, "seri": 2, "whi": 1, "collectionrecoveryfe": 1, "aham": 2, "explain": 1, "dtijoint": 1, "anyth": 1, "percentbcgtnum": 1, "bad": 1, "uniqu": 6, "openaccnumm": 1, "overflow": 1, "build": 1, "analysi": 5, "lastficorangehigh": 1, "intrat": 1, "seem": 2, "settlementterm": 1, "pretrain": 1, "select": 6, "secappnumrevacct": 1, "loanstatus": 4, "order": 1, "largest": 1, "link": 1, "there": 3, "command": 1, "connect": 1, "titl": 1, "possibl": 1, "mayb": 1, "exampl": 3, "spend": 2, "tothicredlim": 1, "totalilhighcreditlimit": 1, "knowledg": 1, "linkedin": 1, "visual": 1, "totcollamt": 1, "follow": 3, "now": 1, "further": 2, "name": 5, "code": 5, "high": 2, "basic": 1, "secappinqlastnummth": 1, "goe": 1, "cnns": 1, "issu": 1, "tutori": 3, "also": 3, "hardshiptyp": 1, "secappchargeoffwithinnummth": 1, "target": 3, "warn": 1, "riski": 1, "lastcreditpulld": 1, "row": 5, "straightforward": 1, "research": 1, "accomplish": 1, "sabber": 4, "the": 73, "may": 1, "subgrad": 1, "nextpymntd": 1, "paymentplanstartd": 1, "those": 3, "charg": 4, "into": 2, "emplength": 1, "howev": 1, "variabl": 2, "manual": 2, "week": 1, "hardshippayoffbalanceamount": 1, "snippet": 1, "secappcollectionsnummthsexm": 1, "seaborn": 1, "term": 1, "raw": 1, "introduct": 1, "without": 1, "one": 3, "show": 5, "purpos": 1, "numtlnumdpdnumm": 1, "status": 1, "see": 10, "some": 4, "mthssincercntil": 1, "marketplac": 1, "unnecessari": 2, "pubrecbankruptci": 1, "worth": 1, "get": 8, "delinqnumyr": 1, "like": 1, "examin": 1, "file": 4, "dfnum": 5, "part": 12, "analyt": 1, "club": 2, "yet": 1, "includ": 1, "recent": 1, "loan": 5, "zero": 2, "this": 16, "time": 3, "process": 9, "avgcurb": 1, "project": 2, "embed": 1, "numacctsevernumpd": 1, "most": 1, "between": 1, "return": 1, "hardshipreason": 1, "domain": 2, "shape": 3, "seven": 1, "numsat": 1, "all": 2, "openilnumm": 2, "action": 1, "store": 2, "numoprevtl": 1, "have": 10, "totcurb": 1, "day": 3, "intnum": 1, "homeownership": 1, "numbctl": 1, "lend": 3, "object": 1, "more": 1, "and": 23, "list": 1, "hardshipstartd": 1, "these": 6, "prepar": 1, "lastpymntamnt": 1, "general": 2, "made": 1, "desc": 1, "settlementamount": 1, "befor": 2, "comment": 2, "debtsettlementflag": 1, "can": 6, "avail": 1, "comput": 3, "make": 1, "onli": 1, "each": 6, "gmailcom": 1, "necessari": 1, "totalpymnt": 1, "read": 1, "mthssincerecentbc": 1, "memberid": 1, "zipcod": 1, "inevit": 1, "data": 25, "totalreclatefe": 1, "qualiti": 1, "lastpymntd": 1, "method": 3, "loanamnt": 1, "rather": 1, "sinc": 3, "bio": 1, "origin": 3, "dfshape": 3, "pay": 1, "line": 1, "identifi": 5, "treebas": 1, "import": 5, "first": 6, "everi": 2, "could": 1, "sns": 1, "lastficorangelow": 1, "verificationstatus": 1, "year": 1, "write": 1, "half": 1, "learn": 5, "same": 4}, "idf": {"after": 1.02070207021, "hardshipamount": 1587.6, "sum": 6.681818181819999, "totalbclimit": 1587.6, "true": 2.55569864778, "take": 1.13961668222, "secappmortacc": 1587.6, "five": 1.37740760021, "hardshipdpd": 1587.6, "overnight": 20.0962025316, "organ": 1.6387283237, "earliestcrlin": 1587.6, "number": 1.10142916609, "timeconsum": 1587.6, "chargeoffwithinnummth": 1587.6, "been": 1.0239277652399998, "who": 1.06279287723, "dataset": 193.609756098, "function": 2.495441685, "class": 2.11651779763, "verificationstatusjoint": 1587.6, "annualincjoint": 1587.6, "bcutil": 1587.6, "hardshiplastpaymentamount": 1587.6, "mortacc": 1587.6, "valu": 2.2777618364400003, "secappopenacc": 1587.6, "totalacc": 1587.6, "recoveri": 7.997984886649999, "mosinoldrevtlop": 1587.6, "slowli": 6.080428954419999, "applicationtyp": 1587.6, "medium": 7.00617828773, "jupyternotebook": 1587.6, "mosinrcnttl": 1587.6, "stack": 19.6485148515, "institutionscompani": 1587.6, "secapprevolutil": 1587.6, "creat": 1.2492917847, "multipl": 2.74813917258, "vector": 25.898858075, "how": 1.60250328051, "pcttlnvrdlq": 1587.6, "repost": 933.882352941, "million": 1.7279059643, "quit": 2.8849718335500003, "especi": 1.66712170534, "would": 1.0828729281799998, "due": 1.23789473684, "frame": 6.280063291139999, "totalcutl": 1587.6, "settlementstatus": 1587.6, "interest": 1.60331246213, "totalrecint": 1587.6, "will": 1.22481098596, "associ": 1.3263157894700002, "partnum": 1221.23076923, "totalbalexmort": 1587.6, "numrevtlbalgtnum": 1587.6, "inqlastnummth": 1587.6, "hardshipflag": 1587.6, "dstack": 1587.6, "inqfi": 1587.6, "next": 1.4950560316400001, "below": 2.25607503197, "perform": 1.5313977042500002, "but": 1.01632417899, "need": 1.4372623574099999, "classif": 8.067073170730001, "final": 1.34008609775, "feel": 3.1356903021900004, "mosinrcntrevtlop": 1587.6, "point": 1.25990000794, "openrvnumm": 1587.6, "applic": 3.42672134686, "has": 1.0436497502, "founder": 4.033536585369999, "numtlnumdpd": 1587.6, "plt": 1587.6, "advantag": 3.32412060302, "panda": 111.802816901, "mosinoldilacct": 1587.6, "default": 21.1398135819, "resourc": 2.9487369985100003, "imper": 32.9377593361, "out": 1.06016694491, "model": 2.0905978404, "delinqamnt": 1587.6, "good": 1.51981619759, "sure": 7.453521126760001, "numrevacct": 1587.6, "mthssincelastdelinq": 1587.6, "accopenpastnummth": 1587.6, "revolutil": 1587.6, "count": 3.48157894737, "annualinc": 1587.6, "disbursementmethod": 1587.6, "fundedamnt": 1587.6, "print": 3.29719626168, "not": 1.01567398119, "numtlnumgdpdnumm": 1587.6, "mthssincelastmajorderog": 1587.6, "origprojectedadditionalaccruedinterest": 1587.6, "secappficorangelow": 1587.6, "fundedamntinv": 1587.6, "are": 1.02990593578, "whole": 2.29488291414, "less": 1.46904783936, "msaham": 1587.6, "pymntplan": 1587.6, "regard": 1.78944995491, "four": 1.20950784702, "grade": 6.536023054759999, "coldf": 1587.6, "pleas": 9.12938470385, "easi": 5.2937645882, "meantim": 22.3921015515, "notic": 4.36994219653, "emptitl": 1587.6, "than": 1.03278688525, "then": 1.08657860516, "separ": 1.6012102874399998, "they": 1.03017325287, "geophysicist": 299.547169811, "instal": 3.78721374046, "jump": 8.07117437722, "last": 1.2117234010100002, "let": 3.48616600791, "world": 1.11340206186, "scienc": 2.31969608416, "bcopentobuy": 1587.6, "imbalanc": 567.0, "initialliststatus": 1587.6, "github": 1587.6, "featur": 1.52712581762, "processingnum": 1587.6, "dtype": 1587.6, "simpl": 3.3981164383599998, "that": 1.00398406375, "mine": 4.875921375919999, "until": 1.14852058164, "sort": 5.188235294119999, "two": 1.01379310345, "accord": 1.27589809531, "typic": 2.2541530597799997, "financi": 2.60860992442, "pubrec": 1587.6, "accnowdelinq": 1587.6, "addrstat": 1587.6, "three": 1.06621893889, "ficorangehigh": 1587.6, "drop": 2.4594887684, "add": 4.61243463103, "result": 1.14611608432, "off": 1.5121440137200002, "outprncpinv": 1587.6, "produc": 1.36932896326, "use": 1.0296387573799999, "well": 1.0655748708, "miss": 3.53664513255, "set": 1.18707940781, "wait": 4.55421686747, "ani": 1.13383802314, "question": 2.20408163265, "improv": 2.04376930999, "from": 1.00056721497, "detail": 2.26186066391, "num": 1.00031504001, "know": 2.59327017315, "numiltl": 1587.6, "mthssincerecentbcdlq": 1587.6, "free": 1.71818181818, "mthssincerecentrevoldelinq": 1587.6, "for": 1.00031504001, "predict": 5.18484650555, "numtloppastnumm": 1587.6, "builtin": 1587.6, "policycod": 1587.6, "fulli": 2.79015817223, "with": 1.0011982089899998, "samediffer": 1587.6, "late": 1.31740104556, "outprncp": 1587.6, "split": 3.4709226060300002, "better": 2.0065722952500002, "insabberaham": 1587.6, "totalbalil": 1587.6, "current": 1.5325803649, "revolb": 1587.6, "settlementd": 1587.6, "look": 1.9086318826599997, "alright": 145.651376147, "option": 4.04896710023, "exploratori": 68.4310344828, "varianc": 51.3786407767, "numpi": 1587.6, "url": 41.669291338600004, "veri": 1.25880114177, "extract": 7.703056768560001, "totalrecprncp": 1587.6, "task": 3.88641370869, "numbcsat": 1587.6, "revolbaljoint": 1587.6, "hardshiplength": 1587.6, "column": 7.078020508250001, "familiar": 6.86381322957, "iter": 37.4433962264, "enthusiast": 9.39408284024, "remov": 2.0058117498400003, "ilutil": 1587.6, "doe": 1.70581282905, "mthssincelastrecord": 1587.6, "selfexplanatori": 1587.6, "allutil": 1587.6, "totalpymntinv": 1587.6, "hardshiploanstatus": 1587.6, "secappopenactil": 1587.6, "dti": 992.25, "help": 1.39962972759, "constant": 3.6589075823900004, "collinear": 835.5789473680001, "matplotlibpyplot": 1587.6, "deviat": 19.1507840772, "step": 2.8279301745599996, "inqlastnumm": 1587.6, "move": 1.29125660838, "type": 2.0281042411900003, "investor": 13.817232376, "period": 1.3430335843, "machin": 4.02433460076, "hardshipstatus": 1587.6, "secappficorangehigh": 1587.6, "relev": 6.938811188810001, "secappearliestcrlin": 1587.6, "idea": 2.0930784443, "mthssincerecentinq": 1587.6, "abov": 1.90382539873, "lstms": 1587.6, "requir": 1.52844902282, "secappmthssincelastmajorderog": 1587.6, "techniqu": 3.7293868921800004, "relationship": 2.39132399458, "openacc": 1587.6, "settlementpercentag": 1587.6, "find": 1.7294117647099998, "borrow": 8.02223345124, "outcom": 7.48867924528, "tremend": 16.0363636364, "approxim": 2.2132998745299997, "relat": 1.23750876919, "deferralterm": 1587.6, "taxlien": 1587.6, "collectionsnummthsexm": 1587.6, "xoolooloocom": 1587.6, "permiss": 6.280063291139999, "email": 33.4936708861, "paid": 3.31163954944, "hardshipendd": 1587.6, "findconstantfeatur": 1587.6, "clean": 6.86975335353, "long": 1.2657259028899999, "onlin": 2.6051854282900004, "scari": 107.27027027, "grace": 8.73267326733, "togeth": 1.58095996813, "henc": 5.390831918509999, "care": 2.49426551453, "dfloc": 1587.6, "which": 1.005191845, "maxbalbc": 1587.6, "through": 1.07074930869, "duplic": 19.7955112219, "ficorangelow": 1587.6, "debtsettlementflagd": 1587.6, "text": 3.12827586207, "standard": 1.8915763135900003, "statement": 3.42228928648, "them": 1.09876115994, "check": 6.50655737705, "totalrevhilim": 1587.6, "complex": 2.34021226415, "therefor": 2.33401940606, "start": 1.26673581744, "reach": 1.49801849406, "articl": 2.01805008262, "openactil": 1587.6, "singl": 1.60948905109, "inplac": 1587.6, "numactvrevtl": 1587.6, "numactvbctl": 1587.6, "word": 1.7965372864099998, "seri": 1.46511627907, "whi": 3.2566153846200003, "collectionrecoveryfe": 1587.6, "aham": 1221.23076923, "explain": 2.60049140049, "dtijoint": 1587.6, "anyth": 4.58843930636, "percentbcgtnum": 1587.6, "bad": 3.3944836433599996, "uniqu": 3.01595744681, "openaccnumm": 1587.6, "overflow": 49.9245283019, "build": 1.6341739578, "analysi": 3.47852760736, "lastficorangehigh": 1587.6, "intrat": 1587.6, "seem": 2.29123971713, "settlementterm": 1587.6, "pretrain": 1587.6, "select": 2.02345144022, "secappnumrevacct": 1587.6, "loanstatus": 1587.6, "order": 1.24625166811, "largest": 2.0511627907, "link": 2.15151104486, "there": 1.04091266719, "command": 2.66689064337, "connect": 1.8843916913900003, "titl": 1.87261146497, "possibl": 1.4173734488, "mayb": 21.0557029178, "exampl": 1.50483412322, "spend": 4.15928739848, "tothicredlim": 1587.6, "totalilhighcreditlimit": 1587.6, "knowledg": 3.3981164383599998, "linkedin": 610.615384615, "visual": 5.22752716497, "totcollamt": 1587.6, "follow": 1.04640126549, "now": 1.160780873, "further": 1.3618116315, "name": 1.10211732037, "code": 3.8807137619199996, "high": 1.14777327935, "basic": 2.7301805675, "secappinqlastnummth": 1587.6, "goe": 4.251740760580001, "cnns": 1587.6, "issu": 1.43921675279, "tutori": 59.4606741573, "also": 1.01476510067, "hardshiptyp": 1587.6, "secappchargeoffwithinnummth": 1587.6, "target": 3.2189781021900004, "warn": 4.334152334150001, "riski": 36.5806451613, "lastcreditpulld": 1587.6, "row": 5.549108703250001, "straightforward": 27.7552447552, "research": 1.9420183486200002, "accomplish": 5.17302052786, "sabber": 1587.6, "the": 1.0, "may": 1.05201775893, "subgrad": 1587.6, "nextpymntd": 1587.6, "paymentplanstartd": 1587.6, "those": 1.19548192771, "charg": 2.3653158522099997, "into": 1.01502461479, "emplength": 1587.6, "howev": 1.0945191313299998, "variabl": 8.747107438019999, "manual": 7.72930866602, "week": 1.80532181033, "hardshippayoffbalanceamount": 1587.6, "snippet": 135.692307692, "secappcollectionsnummthsexm": 1587.6, "seaborn": 140.495575221, "term": 1.39520168732, "raw": 10.6478873239, "introduct": 2.7808723068799996, "without": 1.29547123623, "one": 1.00627495722, "show": 1.26703910615, "purpos": 2.23416830847, "numtlnumdpdnumm": 1587.6, "status": 2.4636871508400002, "see": 1.27242125511, "some": 1.04036697248, "mthssincercntil": 1587.6, "marketplac": 34.9691629956, "unnecessari": 17.4845814978, "pubrecbankruptci": 1587.6, "worth": 5.210370856580001, "get": 1.78562591385, "delinqnumyr": 1587.6, "like": 1.14918566775, "examin": 3.8505942275, "file": 3.7710213776699995, "dfnum": 1587.6, "part": 1.04330682789, "analyt": 17.256521739100002, "club": 2.92375690608, "yet": 2.1258703802900003, "includ": 1.0190641247799999, "recent": 1.54405757635, "loan": 8.26014568158, "zero": 8.75192943771, "this": 1.00379362671, "time": 1.01127460348, "process": 1.69524826482, "avgcurb": 1587.6, "project": 1.7534791252500002, "embed": 16.835630965, "numacctsevernumpd": 1587.6, "most": 1.02096463023, "between": 1.03453668708, "return": 1.39532431007, "hardshipreason": 1587.6, "domain": 9.39408284024, "shape": 3.20338983051, "seven": 1.93940874664, "numsat": 1587.6, "all": 1.01146788991, "openilnumm": 1587.6, "action": 1.81855670103, "store": 3.44680851064, "numoprevtl": 1587.6, "have": 1.0148948411399998, "totcurb": 1587.6, "day": 1.18371607516, "intnum": 1587.6, "homeownership": 933.882352941, "numbctl": 1587.6, "lend": 15.8918918919, "object": 2.3488681757700003, "more": 1.0171706817, "and": 1.00006299213, "list": 1.36321483771, "hardshipstartd": 1587.6, "these": 1.07415426252, "prepar": 2.43012398592, "lastpymntamnt": 1587.6, "general": 1.1218202374200001, "made": 1.07038834951, "desc": 610.615384615, "settlementamount": 1587.6, "befor": 1.10036041031, "comment": 3.05954904606, "debtsettlementflag": 1587.6, "can": 1.17626139142, "avail": 1.7288467821, "comput": 3.9277585353800006, "make": 1.0762660158600001, "onli": 1.0256476516600002, "each": 1.18974820144, "gmailcom": 1587.6, "necessari": 2.8421052631599997, "totalpymnt": 1587.6, "read": 2.3149606299200003, "mthssincerecentbc": 1587.6, "memberid": 1587.6, "zipcod": 1587.6, "inevit": 11.0634146341, "data": 3.37643555934, "totalreclatefe": 1587.6, "qualiti": 2.9329392204, "lastpymntd": 1587.6, "method": 2.5714285714300003, "loanamnt": 1587.6, "rather": 1.55692850838, "sinc": 1.08368600683, "bio": 42.336000000000006, "origin": 1.13724928367, "dfshape": 1587.6, "pay": 2.80148226575, "line": 1.4182597820299998, "identifi": 2.30187037843, "treebas": 1587.6, "import": 1.3401992233700002, "first": 1.00761614623, "everi": 1.47917637194, "could": 1.2043695949, "sns": 1323.0, "lastficorangelow": 1587.6, "verificationstatus": 1587.6, "year": 1.0485436893200002, "write": 2.0575427682700003, "half": 1.75813953488, "learn": 2.32275054865, "same": 1.11857958148}}, "html": "<!DOCTYPE html>\n\n<html lang=\"en-US\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head profile=\"http://gmpg.org/xfn/11\">\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n<title>  Financial Data Analysis \u2013 Data Processing 1: Loan Eligibility Prediction</title>\n<link href=\"/wp-content/themes/kdn17/images/favicon.ico\" rel=\"shortcut icon\"/>\n<link href=\"/wp-content/themes/kdn17/style.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"/wp-content/themes/kdn17/js/jquery-1.9.1.min.js\" type=\"text/javascript\"></script>\n<script src=\"/aps/kda_all.js\" type=\"text/javascript\"></script>\n<link href=\"/feed/\" rel=\"alternate\" title=\"KDnuggets: Analytics, Big Data, Data Mining and Data Science Feed\" type=\"application/rss+xml\"/>\n<link href=\"//s.w.org\" rel=\"dns-prefetch\"/>\n<link href=\"https://www.kdnuggets.com/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/comments/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/2018/09/financial-data-analysis-loan-eligibility-prediction.html/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Financial Data Analysis \u2013 Data Processing 1: Loan Eligibility Prediction Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-json/\" rel=\"https://api.w.org/\"/>\n<link href=\"https://www.kdnuggets.com/xmlrpc.php?rsd\" rel=\"EditURI\" title=\"RSD\" type=\"application/rsd+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-includes/wlwmanifest.xml\" rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\"/>\n<link href=\"https://www.kdnuggets.com/2018/09/paw-highlight-sessions-alibaba-uber-wapo.html\" rel=\"prev\" title=\"Predictive Analytics World \u2013 Highlight Sessions from Alibaba, Uber, The Washington Post\"/>\n<link href=\"https://www.kdnuggets.com/2018/09/5-resources-inspire-data-science-project.html\" rel=\"next\" title=\"5 Resources to Inspire Your Next Data Science Project\"/>\n<meta content=\"WordPress 4.9.10\" name=\"generator\">\n<link href=\"https://www.kdnuggets.com/2018/09/financial-data-analysis-loan-eligibility-prediction.html\" rel=\"canonical\"/>\n<link href=\"https://www.kdnuggets.com/?p=84677\" rel=\"shortlink\"/>\n<link href=\"https://www.kdnuggets.com/2018/09/financial-data-analysis-loan-eligibility-prediction.html\" rel=\"canonical\"/>\n<!-- BEGIN ExactMetrics v5.3.7 Universal Analytics - https://exactmetrics.com/ -->\n<script>\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-361129-1', 'auto');\n  ga('send', 'pageview');\n</script>\n<!-- END ExactMetrics Universal Analytics -->\n</meta></head>\n<body class=\"post-template-default single single-post postid-84677 single-format-standard\">\n<div class=\"main_wrapper\"><!-- publ: 4-Sep, 2018  -->\n<div id=\"wrapper\">\n<div id=\"header\">\n<div id=\"header_log\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<h1>KDnuggets</h1>\n<div class=\"text-container\">\n            \u00a0\u00a0<a href=\"/news/subscribe.html\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a> \u00a0|\n <a href=\"https://twitter.com/kdnuggets\" target=\"_blank\"><img alt=\"Twitter\" height=\"48\" src=\"/images/tw_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n <a href=\"https://www.facebook.com/kdnuggets\" target=\"_blank\"><img alt=\"Facebook\" height=\"48\" src=\"/images/fb_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n<a href=\"https://www.linkedin.com/groups/54257/\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"48\" src=\"/images/in_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \n\u00a0|\u00a0 <a href=\"/contact.html\"><b>Contact</b></a>\n</div>\n</div>\n<div class=\"search\">\n<form action=\"/\" id=\"searchform\" method=\"get\">\n<input id=\"s\" name=\"s\" placeholder=\"search KDnuggets\" type=\"text\" value=\"\"/>\n<input type=\"submit\" value=\"Search\"/></form>\n</div>\n<div href=\"#\" id=\"pull\">\n<img class=\"menu\" src=\"/images/menu-30.png\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<img class=\"search-icon\" src=\"/images/search-icon.png\">\n</img></img></div>\n<div id=\"pull-menu\">\n<div class=\"navigation\"><ul class=\"menu\" id=\"menu-menu\"><li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-1070\" id=\"menu-item-1070\"><a href=\"/software/index.html\" title=\"Data Science Software\">SOFTWARE</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13756\" id=\"menu-item-13756\"><a href=\"/news/index.html\" title=\"News\">News/Blog</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-46286\" id=\"menu-item-46286\"><a href=\"/news/top-stories.html\">Top stories</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-42152\" id=\"menu-item-42152\"><a href=\"https://www.kdnuggets.com/opinions/index.html\" title=\"Opinions\">Opinions</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-46415\" id=\"menu-item-46415\"><a href=\"https://www.kdnuggets.com/tutorials/index.html\">Tutorials</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13364\" id=\"menu-item-13364\"><a href=\"/jobs/index.html\" title=\"Jobs in Analytics, Data Science\">JOBS</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-63505\" id=\"menu-item-63505\"><a href=\"https://www.kdnuggets.com/companies/index.html\">Companies</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13366\" id=\"menu-item-13366\"><a href=\"/courses/index.html\">Courses</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-1499\" id=\"menu-item-1499\"><a href=\"https://www.kdnuggets.com/datasets/index.html\">Datasets</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-14286\" id=\"menu-item-14286\"><a href=\"https://www.kdnuggets.com/education/index.html\" title=\"Education in Analytics, Big Data, Data Science\">EDUCATION</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-51558\" id=\"menu-item-51558\"><a href=\"https://www.kdnuggets.com/education/analytics-data-mining-certificates.html\" title=\"Certificates in Analytics, Big Data, Data Science\">Certificates</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-14752\" id=\"menu-item-14752\"><a href=\"/meetings/index.html\">Meetings</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13721\" id=\"menu-item-13721\"><a href=\"/webcasts/index.html\" title=\"Webcasts and Webinars\">Webinars</a></li>\n</ul></div></div>\n</div> <!--#header end-->\n<div id=\"spacer\">\n         \u00a0\n      </div>\n<div id=\"content_wrapper\">\n<div id=\"ad_wrapper\">\n<script type=\"text/javascript\">\n\tjQuery(function() {\n   \t    var pull        = $('#pull');\n            menu        = $('#header .navigation ul');\n            menuImage = $('#header img.menu');\n            mobileMenu        = $('#pull-menu-mobile');\n            search = $('img.search-icon');\n            searchBar = $('div.search');\n            searchClick = false;\n            search.on('click', function() {\n                  searchBar.slideToggle();\n                  searchClick = true;\n            });  \n     \t    $(menuImage).on('click', function(e) {\n\t        //e.preventDefault();\n                if (!searchClick) {\n                  menu.slideToggle();\n                }\n                searchClick = false;\n\t    });\n           /* pullMobile.on('click', function(e) {\n              e.preventDefault();\n                if (!searchClick) {\n                  mobileMenu.slideToggle();\n                }\n                searchClick = false;\n\t    });*/\n            \n\t});\n\tkpath = '/'; kda_top(); kda_sid_init(); kda_sid_n=3;\n\t</script>\n</div> <div class=\"breadcumb\">\n<br/>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2018/index.html\">2018</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/09/index.html\">Sep</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/09/tutorials.html\">Tutorials, Overviews</a> \u00bb Financial Data Analysis \u2013 Data Processing 1: Loan Eligibility Prediction (\u00a0<a href=\"/2018/n33.html\">18:n33</a>\u00a0)    </div>\n<div class=\"single\" id=\"content\">\n<div id=\"post-header\">\n<h1 id=\"title\">Financial Data Analysis \u2013 Data Processing 1: Loan Eligibility Prediction</h1>\n<div class=\"pagi\">\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2018/09/paw-highlight-sessions-alibaba-uber-wapo.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"> <strong>Previous post</strong></img></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2018/09/5-resources-inspire-data-science-project.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/>\u00a0<br/>\u00a0\n    <div class=\"addthis_native_toolbox\"></div>\n</div>\n<div class=\"tag-data\">Tags: <a href=\"https://www.kdnuggets.com/tag/data-preprocessing\" rel=\"tag\">Data Preprocessing</a>, <a href=\"https://www.kdnuggets.com/tag/data-processing\" rel=\"tag\">Data Processing</a>, <a href=\"https://www.kdnuggets.com/tag/finance\" rel=\"tag\">Finance</a>, <a href=\"https://www.kdnuggets.com/tag/python\" rel=\"tag\">Python</a></div>\n<br/>\n<p class=\"excerpt\">\n     In this first part I show how to clean and remove unnecessary features. Data processing is very time-consuming, but better data would produce a better model.\n  </p>\n</div>\n<div id=\"post-header-ad\">\n<script type=\"text/javascript\">kda_sid_write(1); kda_sid_n=2;</script>\n</div>\n<hr class=\"grey-line\"/><br/>\n<div class=\"post\" id=\"post-\">\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p><b>By <a href=\"https://www.linkedin.com/in/sabber-ahamed/\" rel=\"noopener noreferrer\" target=\"_blank\">Sabber Ahamed</a>, Computational Geophysicist and Machine Learning Enthusiast</b></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/720/1*icDC8PUuu71tQCuDzl6zQg.png\" width=\"99%\"/></p>\n<p>\u00a0</p>\n<h3>Introduction</h3>\n<p>\u00a0<br>\nFinancial institutions/companies have been using predictive analytics for quite a long time. Recently, due to the availability of computational resources and tremendous research in machine learning made it possible to better data analysis hence better prediction. In the series of articles, I explain how to create a predictive loan model that identifies a bad applicant who is more likely to be charged off. In step by step processes, I show how to process raw data, clean unnecessary part of it, select relevant features, perform exploratory data analysis, and finally build a model.</br></p>\n<p>As an example, I use Lending club loan data dataset. Lending Club is the world\u2019s largest online marketplace connecting borrowers and investors. An inevitable outcome of lending is default by borrowers. The idea of this tutorial is to create a predictive model that identifies applicants who are relatively risky for a loan. In order to accomplish this, I organized the whole series into four parts as follows:</p>\n<ul>\n<li><a href=\"https://medium.com/@sabber/financial-data-analysis-80ba39149126\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>Data processing-1</strong></a>: In this first part I show how to clean and remove unnecessary features. Data processing is very time-consuming, but better data would produce a better model. Therefore, careful and very detail examination is required to prepare better data. I show how to identify constant features, duplicate feature, duplicate rows, and features with a high number of missing values.\n<li><a href=\"https://medium.com/@sabber/financial-data-analysis-bf4b5e78c45c\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>Data processing-2</strong></a>: In this part, I manually go through each and every features selected from part -1. This is the most time-consuming part, but worth it for a better model.\n<li><a href=\"https://medium.com/@sabber/financial-data-analysis-2f86b1341e6e\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>EDA</strong></a>: In in this part, I do some exploratory data analysis (EDA) on the features selected in part-1 and 2. A good EDA is required to get a better knowledge of the domain. We need to spend some quality time to find out the relations between the features.\n<li><a href=\"https://medium.com/@sabber/financial-data-analysis-51e7275d0ae\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>Create a model</strong></a>: Finally, In this last but not the last part, I create models. Creating a model is also not an easy task. It\u2019s also an iterative process. I show how to start with a with a simple model, then slowly add complexity for better performance.\n</li></li></li></li></ul>\n<p>Alright, let\u2019s get started with the part-1: data processing, cleaning and feature selections.</p>\n<p>\u00a0</p>\n<h3><strong>Data processing-1</strong></h3>\n<p>\u00a0</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>import numpy as np\r\nimport pandas as pd\r\nimport matplotlib.pyplot as plt\r\nimport seaborn as sns\r\nimport warnings\r\nwarnings.filterwarnings(\"ignore\")</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>In this project, I used three years of datasets (2014, 2015 and 2017(first-thrid quarter)) and stored in five separate CSV files. Lets read the files first:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>df1 = pd.read_csv(\u2018./data/2017Q1.csv\u2019, skiprows=[0])\r\ndf2 = pd.read_csv(\u2018./data/2017Q2.csv\u2019, skiprows=[0])\r\ndf3 = pd.read_csv(\u2018./data/2017Q3.csv\u2019, skiprows=[0])\r\ndf4 = pd.read_csv(\u2018./data/2014.csv\u2019, skiprows=[0])\r\ndf5 = pd.read_csv(\u2018./data/2015.csv\u2019, skiprows=[0])</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Since data are stored in separate files, we have to make sure that we have the same number of features in each file. We can check using the following code snippet:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>columns = np.dstack((list(df1.columns), list(df2.columns), list(df3.columns), list(df4.columns), list(df5.columns)))\r\ncoldf = pd.DataFrame(columns[0])</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>The above code is self-explanatory, we first extract the column names the stack them together using Numpy \u2018dstack\u2019 object. If you look at the Jupyter-notebook on Github, you would see they are same. Which is good for us. We can move on to the next step. It\u2019s time to check the shape of the data:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>df = pd.concat([df1, df2, df3, df4, df5])\r\ndf.shape</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>(981665, 151)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>We see that there are approximately one million examples and each of the examples has 151 features including target variable. Let\u2019s look at the feature name to get familiar with the data. It\u2019s imperative to get to know the domain, especially the details of the features relationship with the target variable. It\u2019s not easy to learn overnight, that\u2019s why need to spend some days or maybe a week to get familiar with the data before jumping into further detail analysis. Let\u2019s see the feature names:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre><strong>print(list(df.columns))</strong></pre>\n</div>\n<p><br class=\"blank\"/></p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>['id', 'member_id', 'loan_amnt', 'funded_amnt', 'funded_amnt_inv', 'term', 'int_rate', 'installment', 'grade', 'sub_grade', 'emp_title', 'emp_length', 'home_ownership', 'annual_inc', 'verification_status', 'issue_d', 'loan_status', 'pymnt_plan', 'url', 'desc', 'purpose', 'title', 'zip_code', 'addr_state', 'dti', 'delinq_2yrs', 'earliest_cr_line', 'fico_range_low', 'fico_range_high', 'inq_last_6mths', 'mths_since_last_delinq', 'mths_since_last_record', 'open_acc', 'pub_rec', 'revol_bal', 'revol_util', 'total_acc', 'initial_list_status', 'out_prncp', 'out_prncp_inv', 'total_pymnt', 'total_pymnt_inv', 'total_rec_prncp', 'total_rec_int', 'total_rec_late_fee', 'recoveries', 'collection_recovery_fee', 'last_pymnt_d', 'last_pymnt_amnt', 'next_pymnt_d', 'last_credit_pull_d', 'last_fico_range_high', 'last_fico_range_low', 'collections_12_mths_ex_med', 'mths_since_last_major_derog', 'policy_code', 'application_type', 'annual_inc_joint', 'dti_joint', 'verification_status_joint', 'acc_now_delinq', 'tot_coll_amt', 'tot_cur_bal', 'open_acc_6m', 'open_act_il', 'open_il_12m', 'open_il_24m', 'mths_since_rcnt_il', 'total_bal_il', 'il_util', 'open_rv_12m', 'open_rv_24m', 'max_bal_bc', 'all_util', 'total_rev_hi_lim', 'inq_fi', 'total_cu_tl', 'inq_last_12m', 'acc_open_past_24mths', 'avg_cur_bal', 'bc_open_to_buy', 'bc_util', 'chargeoff_within_12_mths', 'delinq_amnt', 'mo_sin_old_il_acct', 'mo_sin_old_rev_tl_op', 'mo_sin_rcnt_rev_tl_op', 'mo_sin_rcnt_tl', 'mort_acc', 'mths_since_recent_bc', 'mths_since_recent_bc_dlq', 'mths_since_recent_inq', 'mths_since_recent_revol_delinq', 'num_accts_ever_120_pd', 'num_actv_bc_tl', 'num_actv_rev_tl', 'num_bc_sats', 'num_bc_tl', 'num_il_tl', 'num_op_rev_tl', 'num_rev_accts', 'num_rev_tl_bal_gt_0', 'num_sats', 'num_tl_120dpd_2m', 'num_tl_30dpd', 'num_tl_90g_dpd_24m', 'num_tl_op_past_12m', 'pct_tl_nvr_dlq', 'percent_bc_gt_75', 'pub_rec_bankruptcies', 'tax_liens', 'tot_hi_cred_lim', 'total_bal_ex_mort', 'total_bc_limit', 'total_il_high_credit_limit', 'revol_bal_joint', 'sec_app_fico_range_low', 'sec_app_fico_range_high', 'sec_app_earliest_cr_line', 'sec_app_inq_last_6mths', 'sec_app_mort_acc', 'sec_app_open_acc', 'sec_app_revol_util', 'sec_app_open_act_il', 'sec_app_num_rev_accts', 'sec_app_chargeoff_within_12_mths', 'sec_app_collections_12_mths_ex_med', 'sec_app_mths_since_last_major_derog', 'hardship_flag', 'hardship_type', 'hardship_reason', 'hardship_status', 'deferral_term', 'hardship_amount', 'hardship_start_date', 'hardship_end_date', 'payment_plan_start_date', 'hardship_length', 'hardship_dpd', 'hardship_loan_status', 'orig_projected_additional_accrued_interest', 'hardship_payoff_balance_amount', 'hardship_last_payment_amount', 'disbursement_method', 'debt_settlement_flag', 'debt_settlement_flag_date', 'settlement_status', 'settlement_date', 'settlement_amount', 'settlement_percentage', 'settlement_term']</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Looking at the above features, it may seem scary first. But we will get through every feature and then select the relevant features. Let's start with the target feature \u201cloan_status\u201d</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>df.loan_status.value_counts()</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>Current               500937\r\nFully Paid            358629\r\nCharged Off            99099\r\nLate (31-120 days)     13203\r\nIn Grace Period         6337\r\nLate (16-30 days)       3414\r\nDefault                   36\r\nName: loan_status, dtype: int64</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>We see that there are seven types of loan status. However, in this tutorial, we are interested in two classes: 1) Fully paid: those who paid the loan with interests and 2) Charged off: those who could not pay and finally charged off. Therefore, we select the data sets for these two classes:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>df = df.loc[(df['loan_status'].isin(['Fully Paid', 'Charged Off']))]</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>df.shape\r\n(457728, 151)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Looking at the shape, we see that we now have half of the data point than original data and the same number of features. Before processing and cleaning manually, let\u2019s do some general data processing steps first:</p>\n<ul>\n<li>Remove features associated with &gt;85% missing values\n<li>Remove constant features\n<li>Remove duplicates features\n<li>Remove duplicate rows\n<li>Remove highly collinear features (In part 3 EDA)\n</li></li></li></li></li></ul>\n<p>Alright, let\u2019s get started with the typical data processing:</p>\n<p><strong>1. Remove features associated with 90% missing values:</strong>\u00a0In the code below I first use pandas\u2019 built-in method \u2018isnull()\u2019 to find the rows associated with missing values. Then I sum them up to get the count for each feature. Finally, I sort the features according to the number of missing values and create a data frame for further analysis.</p>\n<p><script src=\"https://gist.github.com/msahamed/369e38d6ae58f81ff8b3b36ed2059d82.js\"></script></p>\n<p>In the above result, we see that there are 53 features which have 400000 missing values. I use the pandas\u2019 drop method to remove these 53 features. Notice that in this function I set the \u201cinplace\u201d option to True\u201d, which removes these features from original data frame\u00a0<strong>df</strong>\u00a0without returning anything.</p>\n<p><strong>2. Remove constant features:\u00a0</strong>At this step, we remove features that have a single unique value. A feature associated with one unique value does not help the model to generalize well since it\u2019s variance is zero. A tree-based model cannot take advantage of these type of features since the model can not split these features. To identify features with a single unique value is relatively straightforward:</p>\n<p><script src=\"https://gist.github.com/msahamed/6cbd720008004cd0dde79afa69976b16.js\"></script></p>\n<p>In the above code, I create a function \u201cfind_constant_features\u201d to identify constant features. The function goes through each feature and sees if it has less than two unique values. If so, the features are added to the constant feature list. We can also find out constant feature looking at the variance or standard deviation. If the feature has zero variance or standard deviation, we are sure that the feature has single unique value. The print statement shows that five features have single unique value. So we remove them using \u201cinplace\u201d option true.</p>\n<p><strong>3. Remove duplicate features:</strong>\u00a0Duplicate features are those have the same value in multiple features with the same/different name. To find out the duplicate features I borrowed the following code from this\u00a0<a href=\"https://stackoverflow.com/questions/14984119/python-pandas-remove-duplicate-columns\" rel=\"noopener noreferrer\" target=\"_blank\">stack overflow link</a>:</p>\n<p><script src=\"https://gist.github.com/msahamed/7d62d7b208dc5b2036234ded42f1bb04.js\"></script></p>\n<p>We see only one feature which seems to be duplicated. I am not going to remove the feature yet rather wait until we do EDA in the next part.</p>\n<p><strong>4. Remove duplicate rows:\u00a0</strong>In this step, we remove all the duplicate rows. I use pandas built-in \u201cdrop_duplicates(inplace= True)\u201d method to perform this action:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>df.drop_duplicates(inplace= True)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>The above four processings are basic which we need to do for any data science project. Let's see the shape of the data after all of these steps:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>df.shape\r\n\r\n(457728, 93)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>We see that we have 93 features after performing the above steps.</p>\n<p>In the\u00a0<a href=\"https://medium.com/@sabber/financial-data-analysis-bf4b5e78c45c\" rel=\"noopener noreferrer\" target=\"_blank\">next part</a>\u00a0of this tutorial, I will go through each feature, then perform cleaning and remove it if necessary. In the meantime, if you have any question regarding this part, please feel free to write your comment below. You can reach out to me:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>Email: sabbers@gmail.com\r\nLinkedIn: <a href=\"https://www.linkedin.com/in/sabber-ahamed/\" rel=\"noopener noreferrer\" target=\"_blank\">https://www.linkedin.com/in/sabber-ahamed/</a>\r\nGithub: <a href=\"https://github.com/msahamed\" rel=\"noopener noreferrer\" target=\"_blank\">https://github.com/msahamed</a>\r\nMedium: <a href=\"https://medium.com/@sabber/\" rel=\"noopener noreferrer\" target=\"_blank\">https://medium.com/@sabber/</a></pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>\u00a0<br/>\n<b>Bio: <a href=\"https://www.linkedin.com/in/sabber-ahamed/\" rel=\"noopener noreferrer\" target=\"_blank\">Sabber Ahamed</a></b> is the Founder of <a href=\"https://www.xoolooloo.com/\" rel=\"noopener\" target=\"_blank\">xoolooloo.com</a>. Computational Geophysicist and Machine Learning Enthusiast.</p>\n<p><a href=\"https://medium.com/@sabber/financial-data-analysis-80ba39149126\" rel=\"noopener noreferrer\" target=\"_blank\">Original</a>. Reposted with permission.</p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2018/07/text-mining-command-line.html\">Text Mining on the Command Line</a>\n<li><a href=\"/2018/06/three-techniques-improve-machine-learning-model-performance-imbalanced-datasets.html\">Three techniques to improve machine learning model performance with imbalanced datasets</a>\n<li><a href=\"/2018/07/text-classification-lstm-cnn-pre-trained-word-vectors.html\">Text Classification &amp; Embeddings Visualization Using LSTMs, CNNs, and Pre-trained Word Vectors</a>\n</li></li></li></ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p> <script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets';\n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div>\n<div class=\"page-link\"></div>\n<div class=\"pagi\">\n<hr class=\"grey-line\"/>\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2018/09/paw-highlight-sessions-alibaba-uber-wapo.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"/> <strong>Previous post</strong></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2018/09/5-resources-inspire-data-science-project.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/><br/>\n<div>\n<hr class=\"grey-line\"/><br/>\n<h2>Top Stories Past 30 Days</h2>\n<table align=\"center\" cellpadding=\"3\" cellspacing=\"10\" class=\"latn\" width=\"100%\">\n<tr>\n<td valign=\"top\" width=\"50%\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Popular</b></th></tr>\n<tr><td>\n<ol class=\"three_ol\"><li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-1-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-2-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n<li> <a href=\"/2018/05/simplilearn-9-must-have-skills-data-scientist.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-3-simplilearn');\"><b>9 Must-have skills you need to become a Data Scientist, updated</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-4-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/03/another-10-free-must-read-books-for-machine-learning-and-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-5-another-10-books');\"><b>Another 10 Free Must-Read Books for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-6-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/best-data-visualization-techniques.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-7-best-data-viz');\"><b>Best Data Visualization Techniques for small and large data</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td> <td valign=\"top\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Shared</b></th></tr>\n<tr><td><ol class=\"three_ol\">\n<li> <a href=\"/2019/04/another-10-free-must-see-courses-machine-learning-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-1-another-10-courses');\"><b>Another 10 Free Must-See Courses for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-2-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/03/r-vs-python-data-visualization.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-3-r-py-viz');\"><b>R vs Python for Data Visualization</b></a>\n<li> <a href=\"/2019/03/deep-learning-toolset-overview.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-4-dl-toolset');\"><b>The Deep Learning Toolset \u2014 An Overview</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-5-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-6-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-7-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<!--#content end--></div>\n<div id=\"sidebar\">\n<div class=\"latn\">\n<h3><b><a href=\"/news/index.html\">Latest News</a></b></h3>\n<ul style=\"font-size:14px; margin-top:5px\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/datarobot-delivering-trusted-ai-microsoft.html\">Delivering Trusted AI with DataRobot and Microsoft</a><li> <a href=\"https://www.kdnuggets.com/2019/04/formulated-ai-data-production-landscape.html\">AI and the data production landscape</a><li> <a href=\"https://www.kdnuggets.com/2019/04/most-desired-skill-data-science.html\">The most desired skill in data science</a><li> <a href=\"https://www.kdnuggets.com/2019/04/projects-include-data-science-portfolio.html\">Projects to Include in a Data Science Portfolio</a><li> <a href=\"https://www.kdnuggets.com/2019/04/rework-meet-worlds-leading-ai-deep-learning-experts.html\">Meet the World\u2019s Leading AI &amp; Deep Learning ...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/problem-data-science-job-postings.html\">The problem with data science job postings</a></li></li></li></li></li></li></ul>\n</div>\n<div>\n<script type=\"text/javascript\">kda_sid_write(kda_sid_n);</script>\n</div>\n<br/><script src=\"/aps/sbm.js\" type=\"text/javascript\"></script>\n<div class=\"latn\" style=\"margin-top: 15px;\">\n<h3><b>More Recent Stories</b></h3>\n<ul class=\"next-posts\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/problem-data-science-job-postings.html\">The problem with data science job postings</a><li> <a href=\"https://www.kdnuggets.com/2019/04/graduating-gans-understanding-generative-adversarial-networks.html\">Graduating in GANs: Going From Understanding Generative Advers...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/datax-join-new-generation-ai-technologists.html\">Join the new generation of AI technologists</a><li> <a href=\"https://www.kdnuggets.com/2019/04/top-tweets-apr17-apr23.html\">Top tweets, Apr 17\u201323: The History of Artificial #NeuralN...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/activestate-top-10-python-use-cases.html\">Top 10 Python Use Cases</a><li> <a href=\"https://www.kdnuggets.com/2019/04/future-generative-adversarial-networks.html\">Generative Adversarial Networks \u2013 Key Milestones and Sta...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/attention-craving-rnn-building-transformer-networks.html\">Attention Craving RNNS: Building Up To Transformer Networks</a><li> <a href=\"https://www.kdnuggets.com/jobs/19/04-24-fors-marsh-group-lead-data-scientist.html\">Fors Marsh Group: Lead Data Scientist [Arlington, VA]</a><li> <a href=\"https://www.kdnuggets.com/2019/n16.html\">KDnuggets 19:n16, Apr 24: Data Visualization in Python with...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/paw-mega-paw-las-vegas-lower-rates-end-friday.html\">Lower Rates End Friday for Mega-PAW Vegas \u2013 the Largest Pred...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/top-news-week-0415-0421.html\">Top Stories, Apr 15-21: Data Visualization in Python: Matplotl...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/wharton-customer-analytics-initiative-conference.html\">Wharton Customer Analytics Initiative Annual Conference in Phi...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/machine-learning-graph-analytics.html\">Machine Learning and Deep Link Graph Analytics: A Powerful Com...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/best-masters-data-science-analytics-online.html\">2019 Best Masters in Data Science and Analytics \u2013 Online</a><li> <a href=\"https://www.kdnuggets.com/2019/04/worth-studying-data-science-masters.html\">Was it Worth Studying a Data Science Masters?</a><li> <a href=\"https://www.kdnuggets.com/2019/04/approach-pre-trained-deep-learning-models-caution.html\">Approach pre-trained deep learning models with caution</a><li> <a href=\"https://www.kdnuggets.com/2019/04/coursera-earn-deep-learning-certificate.html\">Earn a Deep Learning Certificate</a><li> <a href=\"https://www.kdnuggets.com/2019/04/octoparse-scrape-data-website.html\">Easy Way to Scrape Data from Website By Yourself</a><li> <a href=\"https://www.kdnuggets.com/2019/04/ai-environment.html\">AI Supporting The Earth</a><li> <a href=\"https://www.kdnuggets.com/2019/04/mueller-report-word-cloud-brief-tutorial-r.html\">The Mueller Report Word Cloud: A brief tutorial in R</a></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></ul>\n</div>\n</div><div class=\"breadcrumbs_bottom\">\n<div class=\"breadcumb\">\n<br>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2018/index.html\">2018</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/09/index.html\">Sep</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/09/tutorials.html\">Tutorials, Overviews</a> \u00bb Financial Data Analysis \u2013 Data Processing 1: Loan Eligibility Prediction (\u00a0<a href=\"/2018/n33.html\">18:n33</a>\u00a0)    </br></div>\n</div>\n<!--#content_wrapper end--></div>\n<br>\n<div id=\"footer\">\n<br/>\u00a9 2019 KDnuggets. <a href=\"/about/index.html\">About KDnuggets</a>. \u00a0<a href=\"/news/privacy-policy.html\">Privacy policy</a>. <a href=\"/terms-of-service.html\">Terms of Service</a><br/>\u00a0\n<div class=\"kd_bottom\">\n<div class=\"footer-container\">\n<div class=\"footer-news\">\n<a href=\"/news/subscribe.html\" onclick=\"_gaq.push(['_trackPageview','/x/bot/sub']);\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a>\n</div>\n<div class=\"footer-sm\">\n<a href=\"https://twitter.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/twt']);\" target=\"_blank\"><img height=\"32\" src=\"/images/tw_c48.png\" width=\"32\"/></a>\n<a href=\"https://facebook.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/fb']);\" target=\"_blank\"><img alt=\"Facebook\" height=\"32\" src=\"/images/fb_c48.png\" width=\"32\"/></a>\n<a href=\"https://www.linkedin.com/groups/54257\" onclick=\"_gaq.push(['_trackPageview','/x/bot/in']);\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"32\" src=\"/images/in_c48.png\" width=\"32\"/></a>\n</div>\n</div>\n<div class=\"close-footer\">X</div>\n</div>\n<script type=\"text/javascript\">\n  jQuery('.close-footer').click(\n      function(){       \n         jQuery('.kd_bottom').hide();\n      }\n   );\n</script> </div>\n<div class=\"clear\"><!--blank--></div>\n</br></div>\n<div style=\"display: none;\"><div id=\"boxzilla-box-82996-content\"><script type=\"text/javascript\">(function() {\n\tif (!window.mc4wp) {\n\t\twindow.mc4wp = {\n\t\t\tlisteners: [],\n\t\t\tforms    : {\n\t\t\t\ton: function (event, callback) {\n\t\t\t\t\twindow.mc4wp.listeners.push({\n\t\t\t\t\t\tevent   : event,\n\t\t\t\t\t\tcallback: callback\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})();\n</script><!-- MailChimp for WordPress v4.1.14 - https://wordpress.org/plugins/mailchimp-for-wp/ --><form class=\"mc4wp-form mc4wp-form-77281\" data-id=\"77281\" data-name=\"Subscribe to KDnuggets News\" id=\"mc4wp-form-1\" method=\"post\"><div class=\"mc4wp-form-fields\"><div class=\"header-container\">\n<img align=\"left\" src=\"/wp-content/uploads/envelope.png\"><a href=\"/news/subscribe.html\">Get KDnuggets, a leading newsletter on AI, \r\n  Data Science, and Machine Learning</a>\n</img></div>\n<div class=\"form-fields\">\n<div class=\"field-container\"><label>Email:</label><input maxlength=\"60\" name=\"EMAIL\" placeholder=\"Your email\" required=\"\" size=\"30\" type=\"email\"/></div>\n<div class=\"field-container submit-container\"><div class=\"form-button\" onclick=\"document.getElementById('mc4wp-form-1').submit()\">Sign Up</div></div>\n</div>\n<label style=\"display: none !important;\">Leave this field empty if you're human: <input autocomplete=\"off\" name=\"_mc4wp_honeypot\" tabindex=\"-1\" type=\"text\" value=\"\"/></label><input name=\"_mc4wp_timestamp\" type=\"hidden\" value=\"1556327507\"/><input name=\"_mc4wp_form_id\" type=\"hidden\" value=\"77281\"/><input name=\"_mc4wp_form_element_id\" type=\"hidden\" value=\"mc4wp-form-1\"/></div><div class=\"mc4wp-response\"></div></form><!-- / MailChimp for WordPress Plugin -->\n</div></div><script type=\"text/javascript\">(function() {function addEventListener(element,event,handler) {\n\tif(element.addEventListener) {\n\t\telement.addEventListener(event,handler, false);\n\t} else if(element.attachEvent){\n\t\telement.attachEvent('on'+event,handler);\n\t}\n}function maybePrefixUrlField() {\n\tif(this.value.trim() !== '' && this.value.indexOf('http') !== 0) {\n\t\tthis.value = \"http://\" + this.value;\n\t}\n}\n\nvar urlFields = document.querySelectorAll('.mc4wp-form input[type=\"url\"]');\nif( urlFields && urlFields.length > 0 ) {\n\tfor( var j=0; j < urlFields.length; j++ ) {\n\t\taddEventListener(urlFields[j],'blur',maybePrefixUrlField);\n\t}\n}/* test if browser supports date fields */\nvar testInput = document.createElement('input');\ntestInput.setAttribute('type', 'date');\nif( testInput.type !== 'date') {\n\n\t/* add placeholder & pattern to all date fields */\n\tvar dateFields = document.querySelectorAll('.mc4wp-form input[type=\"date\"]');\n\tfor(var i=0; i<dateFields.length; i++) {\n\t\tif(!dateFields[i].placeholder) {\n\t\t\tdateFields[i].placeholder = 'YYYY-MM-DD';\n\t\t}\n\t\tif(!dateFields[i].pattern) {\n\t\t\tdateFields[i].pattern = '[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])';\n\t\t}\n\t}\n}\n\n})();</script><script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_options = {\"testMode\":\"\",\"boxes\":[{\"id\":82996,\"icon\":\"&times;\",\"content\":\"\",\"css\":{\"background_color\":\"#eeee22\",\"width\":600,\"border_width\":2,\"border_style\":\"double\",\"position\":\"center\"},\"trigger\":{\"method\":\"time_on_page\",\"value\":\"3\"},\"animation\":\"fade\",\"cookie\":{\"triggered\":0,\"dismissed\":336},\"rehide\":true,\"position\":\"center\",\"screenWidthCondition\":{\"condition\":\"larger\",\"value\":500},\"closable\":true,\"post\":{\"id\":82996,\"title\":\"Subscribe to KDnuggets\",\"slug\":\"subscribe-to-kdnuggets\"}}]};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla/assets/js/script.min.js?ver=3.2.5\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_stats_config = {\"ajaxurl\":\"https:\\/\\/www.kdnuggets.com\\/wp-admin\\/admin-ajax.php?action=boxzilla_stats_track\"};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla-stats/assets/js/tracking.min.js?ver=1.0.4\" type=\"text/javascript\"></script>\n<script src=\"https://www.kdnuggets.com/wp-includes/js/wp-embed.min.js?ver=4.9.10\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar mc4wp_forms_config = [];\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/forms-api.min.js?ver=4.1.14\" type=\"text/javascript\"></script>\n<!--[if lte IE 9]>\n<script type='text/javascript' src='https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/third-party/placeholders.min.js?ver=4.1.14'></script>\n<![endif]-->\n<!--/.main_wrapper--></div>\n<script src=\"https://s7.addthis.com/js/300/addthis_widget.js#pubid=gpsaddthis\" type=\"text/javascript\"></script>\n</body>\n</html>\n<!-- Dynamic page generated in 0.711 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2019-04-26 21:11:47 -->\n<!-- Compression = gzip -->", "content_tokenized": ["comment", "sabber", "aham", "comput", "geophysicist", "and", "machin", "learn", "enthusiast", "introduct", "financi", "institutionscompani", "have", "been", "use", "predict", "analyt", "for", "quit", "long", "time", "recent", "due", "the", "avail", "comput", "resourc", "and", "tremend", "research", "machin", "learn", "made", "possibl", "better", "data", "analysi", "henc", "better", "predict", "the", "seri", "articl", "explain", "how", "creat", "predict", "loan", "model", "that", "identifi", "bad", "applic", "who", "more", "like", "charg", "off", "step", "step", "process", "show", "how", "process", "raw", "data", "clean", "unnecessari", "part", "select", "relev", "featur", "perform", "exploratori", "data", "analysi", "and", "final", "build", "model", "exampl", "use", "lend", "club", "loan", "data", "dataset", "lend", "club", "the", "world", "largest", "onlin", "marketplac", "connect", "borrow", "and", "investor", "inevit", "outcom", "lend", "default", "borrow", "the", "idea", "this", "tutori", "creat", "predict", "model", "that", "identifi", "applic", "who", "are", "relat", "riski", "for", "loan", "order", "accomplish", "this", "organ", "the", "whole", "seri", "into", "four", "part", "follow", "data", "processingnum", "this", "first", "part", "show", "how", "clean", "and", "remov", "unnecessari", "featur", "data", "process", "veri", "timeconsum", "but", "better", "data", "would", "produc", "better", "model", "therefor", "care", "and", "veri", "detail", "examin", "requir", "prepar", "better", "data", "show", "how", "identifi", "constant", "featur", "duplic", "featur", "duplic", "row", "and", "featur", "with", "high", "number", "miss", "valu", "data", "processingnum", "this", "part", "manual", "through", "each", "and", "everi", "featur", "select", "from", "part", "num", "this", "the", "most", "timeconsum", "part", "but", "worth", "for", "better", "model", "this", "part", "some", "exploratori", "data", "analysi", "the", "featur", "select", "partnum", "and", "num", "good", "requir", "get", "better", "knowledg", "the", "domain", "need", "spend", "some", "qualiti", "time", "find", "out", "the", "relat", "between", "the", "featur", "creat", "model", "final", "this", "last", "but", "not", "the", "last", "part", "creat", "model", "creat", "model", "also", "not", "easi", "task", "also", "iter", "process", "show", "how", "start", "with", "with", "simpl", "model", "then", "slowli", "add", "complex", "for", "better", "perform", "alright", "let", "get", "start", "with", "the", "partnum", "data", "process", "clean", "and", "featur", "select", "data", "processingnum", "import", "numpi", "import", "panda", "import", "matplotlibpyplot", "plt", "import", "seaborn", "sns", "import", "warn", "this", "project", "use", "three", "year", "dataset", "num", "num", "and", "and", "store", "five", "separ", "file", "let", "read", "the", "file", "first", "dfnum", "dfnum", "dfnum", "dfnum", "dfnum", "sinc", "data", "are", "store", "separ", "file", "have", "make", "sure", "that", "have", "the", "same", "number", "featur", "each", "file", "can", "check", "use", "the", "follow", "code", "snippet", "column", "coldf", "the", "abov", "code", "selfexplanatori", "first", "extract", "the", "column", "name", "the", "stack", "them", "togeth", "use", "numpi", "dstack", "object", "look", "the", "jupyternotebook", "github", "would", "see", "they", "are", "same", "which", "good", "for", "can", "move", "the", "next", "step", "time", "check", "the", "shape", "the", "data", "dfshape", "num", "num", "see", "that", "there", "are", "approxim", "one", "million", "exampl", "and", "each", "the", "exampl", "has", "num", "featur", "includ", "target", "variabl", "let", "look", "the", "featur", "name", "get", "familiar", "with", "the", "data", "imper", "get", "know", "the", "domain", "especi", "the", "detail", "the", "featur", "relationship", "with", "the", "target", "variabl", "not", "easi", "learn", "overnight", "that", "whi", "need", "spend", "some", "day", "mayb", "week", "get", "familiar", "with", "the", "data", "befor", "jump", "into", "further", "detail", "analysi", "let", "see", "the", "featur", "name", "memberid", "loanamnt", "fundedamnt", "fundedamntinv", "term", "intrat", "instal", "grade", "subgrad", "emptitl", "emplength", "homeownership", "annualinc", "verificationstatus", "issu", "loanstatus", "pymntplan", "url", "desc", "purpos", "titl", "zipcod", "addrstat", "dti", "delinqnumyr", "earliestcrlin", "ficorangelow", "ficorangehigh", "inqlastnummth", "mthssincelastdelinq", "mthssincelastrecord", "openacc", "pubrec", "revolb", "revolutil", "totalacc", "initialliststatus", "outprncp", "outprncpinv", "totalpymnt", "totalpymntinv", "totalrecprncp", "totalrecint", "totalreclatefe", "recoveri", "collectionrecoveryfe", "lastpymntd", "lastpymntamnt", "nextpymntd", "lastcreditpulld", "lastficorangehigh", "lastficorangelow", "collectionsnummthsexm", "mthssincelastmajorderog", "policycod", "applicationtyp", "annualincjoint", "dtijoint", "verificationstatusjoint", "accnowdelinq", "totcollamt", "totcurb", "openaccnumm", "openactil", "openilnumm", "openilnumm", "mthssincercntil", "totalbalil", "ilutil", "openrvnumm", "openrvnumm", "maxbalbc", "allutil", "totalrevhilim", "inqfi", "totalcutl", "inqlastnumm", "accopenpastnummth", "avgcurb", "bcopentobuy", "bcutil", "chargeoffwithinnummth", "delinqamnt", "mosinoldilacct", "mosinoldrevtlop", "mosinrcntrevtlop", "mosinrcnttl", "mortacc", "mthssincerecentbc", "mthssincerecentbcdlq", "mthssincerecentinq", "mthssincerecentrevoldelinq", "numacctsevernumpd", "numactvbctl", "numactvrevtl", "numbcsat", "numbctl", "numiltl", "numoprevtl", "numrevacct", "numrevtlbalgtnum", "numsat", "numtlnumdpdnumm", "numtlnumdpd", "numtlnumgdpdnumm", "numtloppastnumm", "pcttlnvrdlq", "percentbcgtnum", "pubrecbankruptci", "taxlien", "tothicredlim", "totalbalexmort", "totalbclimit", "totalilhighcreditlimit", "revolbaljoint", "secappficorangelow", "secappficorangehigh", "secappearliestcrlin", "secappinqlastnummth", "secappmortacc", "secappopenacc", "secapprevolutil", "secappopenactil", "secappnumrevacct", "secappchargeoffwithinnummth", "secappcollectionsnummthsexm", "secappmthssincelastmajorderog", "hardshipflag", "hardshiptyp", "hardshipreason", "hardshipstatus", "deferralterm", "hardshipamount", "hardshipstartd", "hardshipendd", "paymentplanstartd", "hardshiplength", "hardshipdpd", "hardshiploanstatus", "origprojectedadditionalaccruedinterest", "hardshippayoffbalanceamount", "hardshiplastpaymentamount", "disbursementmethod", "debtsettlementflag", "debtsettlementflagd", "settlementstatus", "settlementd", "settlementamount", "settlementpercentag", "settlementterm", "look", "the", "abov", "featur", "may", "seem", "scari", "first", "but", "will", "get", "through", "everi", "featur", "and", "then", "select", "the", "relev", "featur", "let", "start", "with", "the", "target", "featur", "loanstatus", "current", "num", "fulli", "paid", "num", "charg", "off", "num", "late", "num", "day", "num", "grace", "period", "num", "late", "num", "day", "num", "default", "num", "name", "loanstatus", "dtype", "intnum", "see", "that", "there", "are", "seven", "type", "loan", "status", "howev", "this", "tutori", "are", "interest", "two", "class", "num", "fulli", "paid", "those", "who", "paid", "the", "loan", "with", "interest", "and", "num", "charg", "off", "those", "who", "could", "not", "pay", "and", "final", "charg", "off", "therefor", "select", "the", "data", "set", "for", "these", "two", "class", "dfloc", "loanstatus", "dfshape", "num", "num", "look", "the", "shape", "see", "that", "now", "have", "half", "the", "data", "point", "than", "origin", "data", "and", "the", "same", "number", "featur", "befor", "process", "and", "clean", "manual", "let", "some", "general", "data", "process", "step", "first", "remov", "featur", "associ", "with", "num", "miss", "valu", "remov", "constant", "featur", "remov", "duplic", "featur", "remov", "duplic", "row", "remov", "high", "collinear", "featur", "part", "num", "alright", "let", "get", "start", "with", "the", "typic", "data", "process", "num", "remov", "featur", "associ", "with", "num", "miss", "valu", "the", "code", "below", "first", "use", "panda", "builtin", "method", "find", "the", "row", "associ", "with", "miss", "valu", "then", "sum", "them", "get", "the", "count", "for", "each", "featur", "final", "sort", "the", "featur", "accord", "the", "number", "miss", "valu", "and", "creat", "data", "frame", "for", "further", "analysi", "the", "abov", "result", "see", "that", "there", "are", "num", "featur", "which", "have", "num", "miss", "valu", "use", "the", "panda", "drop", "method", "remov", "these", "num", "featur", "notic", "that", "this", "function", "set", "the", "inplac", "option", "true", "which", "remov", "these", "featur", "from", "origin", "data", "frame", "without", "return", "anyth", "num", "remov", "constant", "featur", "this", "step", "remov", "featur", "that", "have", "singl", "uniqu", "valu", "featur", "associ", "with", "one", "uniqu", "valu", "doe", "not", "help", "the", "model", "general", "well", "sinc", "varianc", "zero", "treebas", "model", "can", "not", "take", "advantag", "these", "type", "featur", "sinc", "the", "model", "can", "not", "split", "these", "featur", "identifi", "featur", "with", "singl", "uniqu", "valu", "relat", "straightforward", "the", "abov", "code", "creat", "function", "findconstantfeatur", "identifi", "constant", "featur", "the", "function", "goe", "through", "each", "featur", "and", "see", "has", "less", "than", "two", "uniqu", "valu", "the", "featur", "are", "the", "constant", "featur", "list", "can", "also", "find", "out", "constant", "featur", "look", "the", "varianc", "standard", "deviat", "the", "featur", "has", "zero", "varianc", "standard", "deviat", "are", "sure", "that", "the", "featur", "has", "singl", "uniqu", "valu", "the", "print", "statement", "show", "that", "five", "featur", "have", "singl", "uniqu", "valu", "remov", "them", "use", "inplac", "option", "true", "num", "remov", "duplic", "featur", "duplic", "featur", "are", "those", "have", "the", "same", "valu", "multipl", "featur", "with", "the", "samediffer", "name", "find", "out", "the", "duplic", "featur", "borrow", "the", "follow", "code", "from", "this", "stack", "overflow", "link", "see", "onli", "one", "featur", "which", "seem", "duplic", "not", "remov", "the", "featur", "yet", "rather", "wait", "until", "the", "next", "part", "num", "remov", "duplic", "row", "this", "step", "remov", "all", "the", "duplic", "row", "use", "panda", "builtin", "method", "perform", "this", "action", "the", "abov", "four", "process", "are", "basic", "which", "need", "for", "ani", "data", "scienc", "project", "let", "see", "the", "shape", "the", "data", "after", "all", "these", "step", "dfshape", "num", "num", "see", "that", "have", "num", "featur", "after", "perform", "the", "abov", "step", "the", "next", "part", "this", "tutori", "will", "through", "each", "featur", "then", "perform", "clean", "and", "remov", "necessari", "the", "meantim", "have", "ani", "question", "regard", "this", "part", "pleas", "feel", "free", "write", "comment", "below", "can", "reach", "out", "email", "sabber", "gmailcom", "linkedin", "insabberaham", "github", "msaham", "medium", "sabber", "bio", "sabber", "aham", "the", "founder", "xoolooloocom", "comput", "geophysicist", "and", "machin", "learn", "enthusiast", "origin", "repost", "with", "permiss", "relat", "text", "mine", "the", "command", "line", "three", "techniqu", "improv", "machin", "learn", "model", "perform", "with", "imbalanc", "dataset", "text", "classif", "embed", "visual", "use", "lstms", "cnns", "and", "pretrain", "word", "vector"], "timestamp_scraper": 1556383794.19394, "title": "Financial Data Analysis \u2013 Data Processing 1: Loan Eligibility Prediction", "read_time": 441.29999999999995, "content_html": "<div class=\"post\" id=\"post-\">\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p><b>By <a href=\"https://www.linkedin.com/in/sabber-ahamed/\" rel=\"noopener noreferrer\" target=\"_blank\">Sabber Ahamed</a>, Computational Geophysicist and Machine Learning Enthusiast</b></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/720/1*icDC8PUuu71tQCuDzl6zQg.png\" width=\"99%\"/></p>\n<p>\u00a0</p>\n<h3>Introduction</h3>\n<p>\u00a0<br>\nFinancial institutions/companies have been using predictive analytics for quite a long time. Recently, due to the availability of computational resources and tremendous research in machine learning made it possible to better data analysis hence better prediction. In the series of articles, I explain how to create a predictive loan model that identifies a bad applicant who is more likely to be charged off. In step by step processes, I show how to process raw data, clean unnecessary part of it, select relevant features, perform exploratory data analysis, and finally build a model.</br></p>\n<p>As an example, I use Lending club loan data dataset. Lending Club is the world\u2019s largest online marketplace connecting borrowers and investors. An inevitable outcome of lending is default by borrowers. The idea of this tutorial is to create a predictive model that identifies applicants who are relatively risky for a loan. In order to accomplish this, I organized the whole series into four parts as follows:</p>\n<ul>\n<li><a href=\"https://medium.com/@sabber/financial-data-analysis-80ba39149126\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>Data processing-1</strong></a>: In this first part I show how to clean and remove unnecessary features. Data processing is very time-consuming, but better data would produce a better model. Therefore, careful and very detail examination is required to prepare better data. I show how to identify constant features, duplicate feature, duplicate rows, and features with a high number of missing values.\n<li><a href=\"https://medium.com/@sabber/financial-data-analysis-bf4b5e78c45c\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>Data processing-2</strong></a>: In this part, I manually go through each and every features selected from part -1. This is the most time-consuming part, but worth it for a better model.\n<li><a href=\"https://medium.com/@sabber/financial-data-analysis-2f86b1341e6e\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>EDA</strong></a>: In in this part, I do some exploratory data analysis (EDA) on the features selected in part-1 and 2. A good EDA is required to get a better knowledge of the domain. We need to spend some quality time to find out the relations between the features.\n<li><a href=\"https://medium.com/@sabber/financial-data-analysis-51e7275d0ae\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>Create a model</strong></a>: Finally, In this last but not the last part, I create models. Creating a model is also not an easy task. It\u2019s also an iterative process. I show how to start with a with a simple model, then slowly add complexity for better performance.\n</li></li></li></li></ul>\n<p>Alright, let\u2019s get started with the part-1: data processing, cleaning and feature selections.</p>\n<p>\u00a0</p>\n<h3><strong>Data processing-1</strong></h3>\n<p>\u00a0</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>import numpy as np\r\nimport pandas as pd\r\nimport matplotlib.pyplot as plt\r\nimport seaborn as sns\r\nimport warnings\r\nwarnings.filterwarnings(\"ignore\")</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>In this project, I used three years of datasets (2014, 2015 and 2017(first-thrid quarter)) and stored in five separate CSV files. Lets read the files first:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>df1 = pd.read_csv(\u2018./data/2017Q1.csv\u2019, skiprows=[0])\r\ndf2 = pd.read_csv(\u2018./data/2017Q2.csv\u2019, skiprows=[0])\r\ndf3 = pd.read_csv(\u2018./data/2017Q3.csv\u2019, skiprows=[0])\r\ndf4 = pd.read_csv(\u2018./data/2014.csv\u2019, skiprows=[0])\r\ndf5 = pd.read_csv(\u2018./data/2015.csv\u2019, skiprows=[0])</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Since data are stored in separate files, we have to make sure that we have the same number of features in each file. We can check using the following code snippet:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>columns = np.dstack((list(df1.columns), list(df2.columns), list(df3.columns), list(df4.columns), list(df5.columns)))\r\ncoldf = pd.DataFrame(columns[0])</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>The above code is self-explanatory, we first extract the column names the stack them together using Numpy \u2018dstack\u2019 object. If you look at the Jupyter-notebook on Github, you would see they are same. Which is good for us. We can move on to the next step. It\u2019s time to check the shape of the data:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>df = pd.concat([df1, df2, df3, df4, df5])\r\ndf.shape</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>(981665, 151)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>We see that there are approximately one million examples and each of the examples has 151 features including target variable. Let\u2019s look at the feature name to get familiar with the data. It\u2019s imperative to get to know the domain, especially the details of the features relationship with the target variable. It\u2019s not easy to learn overnight, that\u2019s why need to spend some days or maybe a week to get familiar with the data before jumping into further detail analysis. Let\u2019s see the feature names:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre><strong>print(list(df.columns))</strong></pre>\n</div>\n<p><br class=\"blank\"/></p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>['id', 'member_id', 'loan_amnt', 'funded_amnt', 'funded_amnt_inv', 'term', 'int_rate', 'installment', 'grade', 'sub_grade', 'emp_title', 'emp_length', 'home_ownership', 'annual_inc', 'verification_status', 'issue_d', 'loan_status', 'pymnt_plan', 'url', 'desc', 'purpose', 'title', 'zip_code', 'addr_state', 'dti', 'delinq_2yrs', 'earliest_cr_line', 'fico_range_low', 'fico_range_high', 'inq_last_6mths', 'mths_since_last_delinq', 'mths_since_last_record', 'open_acc', 'pub_rec', 'revol_bal', 'revol_util', 'total_acc', 'initial_list_status', 'out_prncp', 'out_prncp_inv', 'total_pymnt', 'total_pymnt_inv', 'total_rec_prncp', 'total_rec_int', 'total_rec_late_fee', 'recoveries', 'collection_recovery_fee', 'last_pymnt_d', 'last_pymnt_amnt', 'next_pymnt_d', 'last_credit_pull_d', 'last_fico_range_high', 'last_fico_range_low', 'collections_12_mths_ex_med', 'mths_since_last_major_derog', 'policy_code', 'application_type', 'annual_inc_joint', 'dti_joint', 'verification_status_joint', 'acc_now_delinq', 'tot_coll_amt', 'tot_cur_bal', 'open_acc_6m', 'open_act_il', 'open_il_12m', 'open_il_24m', 'mths_since_rcnt_il', 'total_bal_il', 'il_util', 'open_rv_12m', 'open_rv_24m', 'max_bal_bc', 'all_util', 'total_rev_hi_lim', 'inq_fi', 'total_cu_tl', 'inq_last_12m', 'acc_open_past_24mths', 'avg_cur_bal', 'bc_open_to_buy', 'bc_util', 'chargeoff_within_12_mths', 'delinq_amnt', 'mo_sin_old_il_acct', 'mo_sin_old_rev_tl_op', 'mo_sin_rcnt_rev_tl_op', 'mo_sin_rcnt_tl', 'mort_acc', 'mths_since_recent_bc', 'mths_since_recent_bc_dlq', 'mths_since_recent_inq', 'mths_since_recent_revol_delinq', 'num_accts_ever_120_pd', 'num_actv_bc_tl', 'num_actv_rev_tl', 'num_bc_sats', 'num_bc_tl', 'num_il_tl', 'num_op_rev_tl', 'num_rev_accts', 'num_rev_tl_bal_gt_0', 'num_sats', 'num_tl_120dpd_2m', 'num_tl_30dpd', 'num_tl_90g_dpd_24m', 'num_tl_op_past_12m', 'pct_tl_nvr_dlq', 'percent_bc_gt_75', 'pub_rec_bankruptcies', 'tax_liens', 'tot_hi_cred_lim', 'total_bal_ex_mort', 'total_bc_limit', 'total_il_high_credit_limit', 'revol_bal_joint', 'sec_app_fico_range_low', 'sec_app_fico_range_high', 'sec_app_earliest_cr_line', 'sec_app_inq_last_6mths', 'sec_app_mort_acc', 'sec_app_open_acc', 'sec_app_revol_util', 'sec_app_open_act_il', 'sec_app_num_rev_accts', 'sec_app_chargeoff_within_12_mths', 'sec_app_collections_12_mths_ex_med', 'sec_app_mths_since_last_major_derog', 'hardship_flag', 'hardship_type', 'hardship_reason', 'hardship_status', 'deferral_term', 'hardship_amount', 'hardship_start_date', 'hardship_end_date', 'payment_plan_start_date', 'hardship_length', 'hardship_dpd', 'hardship_loan_status', 'orig_projected_additional_accrued_interest', 'hardship_payoff_balance_amount', 'hardship_last_payment_amount', 'disbursement_method', 'debt_settlement_flag', 'debt_settlement_flag_date', 'settlement_status', 'settlement_date', 'settlement_amount', 'settlement_percentage', 'settlement_term']</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Looking at the above features, it may seem scary first. But we will get through every feature and then select the relevant features. Let's start with the target feature \u201cloan_status\u201d</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>df.loan_status.value_counts()</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>Current               500937\r\nFully Paid            358629\r\nCharged Off            99099\r\nLate (31-120 days)     13203\r\nIn Grace Period         6337\r\nLate (16-30 days)       3414\r\nDefault                   36\r\nName: loan_status, dtype: int64</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>We see that there are seven types of loan status. However, in this tutorial, we are interested in two classes: 1) Fully paid: those who paid the loan with interests and 2) Charged off: those who could not pay and finally charged off. Therefore, we select the data sets for these two classes:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>df = df.loc[(df['loan_status'].isin(['Fully Paid', 'Charged Off']))]</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>df.shape\r\n(457728, 151)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Looking at the shape, we see that we now have half of the data point than original data and the same number of features. Before processing and cleaning manually, let\u2019s do some general data processing steps first:</p>\n<ul>\n<li>Remove features associated with &gt;85% missing values\n<li>Remove constant features\n<li>Remove duplicates features\n<li>Remove duplicate rows\n<li>Remove highly collinear features (In part 3 EDA)\n</li></li></li></li></li></ul>\n<p>Alright, let\u2019s get started with the typical data processing:</p>\n<p><strong>1. Remove features associated with 90% missing values:</strong>\u00a0In the code below I first use pandas\u2019 built-in method \u2018isnull()\u2019 to find the rows associated with missing values. Then I sum them up to get the count for each feature. Finally, I sort the features according to the number of missing values and create a data frame for further analysis.</p>\n<p><script src=\"https://gist.github.com/msahamed/369e38d6ae58f81ff8b3b36ed2059d82.js\"></script></p>\n<p>In the above result, we see that there are 53 features which have 400000 missing values. I use the pandas\u2019 drop method to remove these 53 features. Notice that in this function I set the \u201cinplace\u201d option to True\u201d, which removes these features from original data frame\u00a0<strong>df</strong>\u00a0without returning anything.</p>\n<p><strong>2. Remove constant features:\u00a0</strong>At this step, we remove features that have a single unique value. A feature associated with one unique value does not help the model to generalize well since it\u2019s variance is zero. A tree-based model cannot take advantage of these type of features since the model can not split these features. To identify features with a single unique value is relatively straightforward:</p>\n<p><script src=\"https://gist.github.com/msahamed/6cbd720008004cd0dde79afa69976b16.js\"></script></p>\n<p>In the above code, I create a function \u201cfind_constant_features\u201d to identify constant features. The function goes through each feature and sees if it has less than two unique values. If so, the features are added to the constant feature list. We can also find out constant feature looking at the variance or standard deviation. If the feature has zero variance or standard deviation, we are sure that the feature has single unique value. The print statement shows that five features have single unique value. So we remove them using \u201cinplace\u201d option true.</p>\n<p><strong>3. Remove duplicate features:</strong>\u00a0Duplicate features are those have the same value in multiple features with the same/different name. To find out the duplicate features I borrowed the following code from this\u00a0<a href=\"https://stackoverflow.com/questions/14984119/python-pandas-remove-duplicate-columns\" rel=\"noopener noreferrer\" target=\"_blank\">stack overflow link</a>:</p>\n<p><script src=\"https://gist.github.com/msahamed/7d62d7b208dc5b2036234ded42f1bb04.js\"></script></p>\n<p>We see only one feature which seems to be duplicated. I am not going to remove the feature yet rather wait until we do EDA in the next part.</p>\n<p><strong>4. Remove duplicate rows:\u00a0</strong>In this step, we remove all the duplicate rows. I use pandas built-in \u201cdrop_duplicates(inplace= True)\u201d method to perform this action:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>df.drop_duplicates(inplace= True)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>The above four processings are basic which we need to do for any data science project. Let's see the shape of the data after all of these steps:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>df.shape\r\n\r\n(457728, 93)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>We see that we have 93 features after performing the above steps.</p>\n<p>In the\u00a0<a href=\"https://medium.com/@sabber/financial-data-analysis-bf4b5e78c45c\" rel=\"noopener noreferrer\" target=\"_blank\">next part</a>\u00a0of this tutorial, I will go through each feature, then perform cleaning and remove it if necessary. In the meantime, if you have any question regarding this part, please feel free to write your comment below. You can reach out to me:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>Email: sabbers@gmail.com\r\nLinkedIn: <a href=\"https://www.linkedin.com/in/sabber-ahamed/\" rel=\"noopener noreferrer\" target=\"_blank\">https://www.linkedin.com/in/sabber-ahamed/</a>\r\nGithub: <a href=\"https://github.com/msahamed\" rel=\"noopener noreferrer\" target=\"_blank\">https://github.com/msahamed</a>\r\nMedium: <a href=\"https://medium.com/@sabber/\" rel=\"noopener noreferrer\" target=\"_blank\">https://medium.com/@sabber/</a></pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>\u00a0<br/>\n<b>Bio: <a href=\"https://www.linkedin.com/in/sabber-ahamed/\" rel=\"noopener noreferrer\" target=\"_blank\">Sabber Ahamed</a></b> is the Founder of <a href=\"https://www.xoolooloo.com/\" rel=\"noopener\" target=\"_blank\">xoolooloo.com</a>. Computational Geophysicist and Machine Learning Enthusiast.</p>\n<p><a href=\"https://medium.com/@sabber/financial-data-analysis-80ba39149126\" rel=\"noopener noreferrer\" target=\"_blank\">Original</a>. Reposted with permission.</p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2018/07/text-mining-command-line.html\">Text Mining on the Command Line</a>\n<li><a href=\"/2018/06/three-techniques-improve-machine-learning-model-performance-imbalanced-datasets.html\">Three techniques to improve machine learning model performance with imbalanced datasets</a>\n<li><a href=\"/2018/07/text-classification-lstm-cnn-pre-trained-word-vectors.html\">Text Classification &amp; Embeddings Visualization Using LSTMs, CNNs, and Pre-trained Word Vectors</a>\n</li></li></li></ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p> <script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets';\n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div> ", "website": "kdnuggets"}