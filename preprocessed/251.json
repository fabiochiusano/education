{"content": "comments By Derrick Mwiti , Data Analyst Editor\u2019s note: This tutorial illustrates how to get started forecasting time series with LSTM models. Stock market data is a great choice for this because it\u2019s quite regular and widely available to everyone. Please don\u2019t take this as financial advice or use it to make any trades of your own. In this tutorial, we\u2019ll build a Python deep learning model that will predict the future behavior of stock prices. We assume that the reader is familiar with the concepts of deep learning in Python, especially\u00a0 Long Short-Term Memory. While predicting the actual price of a stock is an uphill climb, we can build a model that will predict whether the price will go up or down. The data and notebook used for this tutorial can be found\u00a0 here . It\u2019s important to note that there are always other factors that affect the prices of stocks, such as the political atmosphere and the\u00a0market. However, we won\u2019t focus on those factors for this tutorial. \u00a0 Introduction \u00a0 LSTMs \u00a0are very powerful in sequence prediction problems because they\u2019re able to store past information. This is important in our case because the previous price of a stock is crucial in predicting its future price. We\u2019ll kick of by importing\u00a0 NumPy \u00a0for scientific computation,\u00a0 Matplotlib \u00a0for plotting graphs, and\u00a0 Pandas \u00a0to aide in loading and manipulating our datasets. \u00a0 Loading the\u00a0Dataset \u00a0 The next step is to load in our training dataset and select the\u00a0 Open \u00a0and\u00a0 High columns that we\u2019ll use in our modeling. We check the head of our dataset to give us a glimpse into the kind of dataset we\u2019re working with. The\u00a0 Open \u00a0column is the starting price while the\u00a0 Close \u00a0column is the final price of a stock on a particular trading day. The\u00a0 High \u00a0and\u00a0 Low \u00a0columns represent the highest and lowest prices for a certain day. \u00a0 Feature Scaling \u00a0 From previous experience with deep learning models,\u00a0 we know that we have to scale our data for optimal performance . In our case, we\u2019ll use\u00a0 Scikit- Learn\u2019s \u00a0 MinMaxScaler \u00a0and scale our dataset to numbers between zero and one. \u00a0 Creating Data with Timesteps \u00a0 LSTMs expect our data to be in a specific format, usually a 3D array. We start by creating data in 60 timesteps and converting it into an array using NumPy. Next, we convert the data into a 3D dimension array with\u00a0 X_train \u00a0 samples, 60 timestamps, and one feature at each step. \u00a0 Building the\u00a0LSTM \u00a0 In order to build the LSTM, we need to import a couple of modules from\u00a0 Keras : Sequential \u00a0for initializing the neural network Dense \u00a0for adding a densely connected neural network layer LSTM \u00a0for adding the Long Short-Term Memory layer Dropout \u00a0for adding dropout layers that prevent overfitting We add the LSTM layer and later add a few\u00a0 Dropout \u00a0layers to prevent overfitting. We add the LSTM layer with the following arguments: 50 units \u00a0which is the dimensionality of the output space return_sequences=True \u00a0 which determines whether to return the last output in the output sequence, or the full sequence input_shape \u00a0as the shape of our training set. When defining the\u00a0 Dropout \u00a0layers, we specify 0.2, meaning that 20% of the layers will be dropped. Thereafter, we add the\u00a0 Dense \u00a0layer that specifies the output of 1 unit. After this, we compile our model using the popular adam optimizer and set the loss as the\u00a0 mean_squarred_error . This will compute the mean of the squared errors. Next, we fit the model to run on 100 epochs with a batch size of 32. Keep in mind that, depending on the specs of your computer, this might take a few minutes to finish running. \u00a0 Predicting Future Stock using the Test\u00a0Set \u00a0 First we need to import the test set that we\u2019ll use to make our predictions on. In order to predict future stock prices we need to do a couple of things after loading in the test set: Merge the training set and the test set on the 0 axis. Set the time step as 60 (as seen previously) Use\u00a0 MinMaxScaler \u00a0to transform the new dataset Reshape the dataset as done previously After making the predictions we use\u00a0 inverse_transform \u00a0to get back the stock prices in normal readable format. \u00a0 Plotting the\u00a0Results \u00a0 Finally, we use Matplotlib to visualize the result of the predicted stock price and the real stock price. From the plot we can see that the real stock price went up while our model also predicted that the price of the stock will go up. This clearly shows how powerful LSTMs are for analyzing time series and sequential data. \u00a0 Conclusion \u00a0 There are a couple of other techniques of predicting stock prices such as\u00a0 moving averages ,\u00a0 linear regression ,\u00a0 K-Nearest Neighbours ,\u00a0 ARIMA \u00a0and\u00a0 Prophet . These are techniques that one can test on their own and compare their performance with the Keras LSTM. If you wish to learn more about Keras and deep learning you can find my articles on that\u00a0 here \u00a0and\u00a0 here . Discuss this post on\u00a0 Reddit \u00a0and\u00a0 Hacker News . \u00a0 Bio: Derrick Mwiti is a data analyst, a writer, and a mentor. He is driven by delivering great results in every task, and is a mentor at Lapid Leaders Africa. Original . Reposted with permission. Related: Introduction to Deep Learning with Keras Introduction to PyTorch for Deep Learning The Keras 4 Step Workflow", "title_html": "<h1 id=\"title\">Using a Keras Long Short-Term Memory (LSTM) Model to Predict Stock Prices</h1> ", "url": "https://www.kdnuggets.com/2018/11/keras-long-short-term-memory-lstm-model-predict-stock-prices.html", "tfidf": {"tfidf": {"after": 3.06210621063, "real": 4.56206896552, "xtrain": 933.882352941, "inversetransform": 933.882352941, "squar": 3.26666666667, "permiss": 6.280063291139999, "this": 12.04552352052, "pytorch": 933.882352941, "analyst": 29.6747663552, "here": 7.26923076924, "factor": 5.78255326898, "wide": 1.5598349381, "kind": 2.5806241872599998, "stock": 70.22559241712, "averag": 2.60390355913, "comput": 11.783275606140002, "long": 2.5314518057799997, "panda": 111.802816901, "layer": 73.27384615385999, "follow": 1.04640126549, "repres": 1.46972782818, "dataset": 1548.878048784, "about": 1.06486015159, "problem": 1.76674827509, "run": 3.11385701676, "epoch": 38.347826087, "sequenc": 18.21338432121, "neural": 118.9213483146, "derrick": 186.7764705882, "mind": 3.5918552036199998, "python": 112.5957446808, "adam": 4.43092380687, "timestamp": 529.2, "done": 2.3302509907499998, "spec": 91.2413793103, "reshap": 51.2129032258, "price": 55.741935483839995, "previous": 5.71387439264, "wish": 3.67755385685, "repost": 933.882352941, "reddit": 529.2, "know": 2.59327017315, "defin": 2.72830383227, "minmaxscal": 1867.764705882, "between": 1.03453668708, "won": 2.31732593782, "particular": 1.3814827706200001, "shortterm": 1867.764705882, "fit": 3.37070063694, "their": 2.0309581681, "few": 2.63458347162, "plot": 16.150559511690002, "articl": 2.01805008262, "how": 3.20500656102, "test": 13.285355648549999, "load": 27.21988855552, "news": 2.08182533438, "atmospher": 6.96315789474, "mwiti": 1867.764705882, "seri": 2.93023255814, "meansquarrederror": 933.882352941, "keep": 2.04245465071, "quit": 2.8849718335500003, "especi": 1.66712170534, "initi": 1.35, "order": 2.49250333622, "alway": 2.06745670009, "found": 1.11387076405, "other": 2.01984732824, "usual": 1.72508964468, "abl": 1.8208510150200001, "deep": 21.76782449724, "will": 7.34886591576, "the": 67.0, "regress": 51.2129032258, "open": 2.49113447356, "predict": 62.218158066600004, "build": 6.5366958312, "veri": 1.25880114177, "see": 1.27242125511, "power": 2.6792675723599997, "linear": 13.8776223776, "next": 4.485168094920001, "perform": 3.0627954085000004, "certain": 1.8077886586200003, "need": 4.31178707223, "our": 30.64864864867, "there": 2.08182533438, "final": 2.6801721955, "inform": 1.5753125620200001, "expect": 2.20011086475, "went": 1.8098495212, "prevent": 4.32235230058, "origin": 1.13724928367, "trade": 4.75044883304, "have": 1.0148948411399998, "illustr": 3.6614391143900002, "take": 2.27923336444, "visual": 5.22752716497, "use": 11.32602633118, "experi": 1.87062566278, "sequenti": 79.1820448878, "reader": 6.437956204380001, "model": 16.7247827232, "mentor": 29.6747663552, "format": 5.0625, "high": 2.2955465587, "hacker": 83.1204188482, "driven": 5.601976005650001, "concept": 2.65707112971, "unit": 2.30789358918, "number": 1.10142916609, "tutori": 237.8426966292, "also": 1.01476510067, "optim": 23.0755813954, "coupl": 9.771850636020002, "specifi": 13.841325196160001, "mean": 2.89813800658, "loss": 2.42529789184, "writer": 2.75816539263, "task": 3.88641370869, "batch": 35.6764044944, "africa": 3.7908309455599998, "climb": 9.284210526319999, "determin": 2.1658935879900003, "lowest": 6.549504950499999, "past": 2.01702452039, "specif": 1.8719490626099997, "more": 1.0171706817, "zero": 8.75192943771, "polit": 1.76851954996, "convert": 6.5481542586199994, "argument": 5.09335899904, "timestep": 1867.764705882, "scientif": 4.15275961287, "howev": 1.0945191313299998, "last": 1.2117234010100002, "techniqu": 7.458773784360001, "actual": 1.87482286254, "work": 1.11520089913, "crucial": 7.7443902439, "minut": 3.11233091551, "that": 16.06374502, "inputshap": 933.882352941, "which": 2.01038369, "featur": 3.05425163524, "day": 2.36743215032, "introduct": 8.34261692064, "whether": 4.41367806506, "one": 3.01882487166, "graph": 37.7102137767, "array": 30.4332268371, "full": 1.66729678639, "financi": 2.60860992442, "compil": 5.696447793330001, "such": 2.12302754748, "becaus": 3.4485554992499994, "those": 1.19548192771, "get": 3.5712518277, "network": 5.18738768176, "select": 2.02345144022, "drop": 2.4594887684, "add": 18.44973852412, "result": 3.43834825296, "knearest": 933.882352941, "transform": 3.42007755278, "dimension": 54.1843003413, "memori": 5.14785992218, "kera": 4177.89473684, "glimps": 38.8166259169, "scikit": 933.882352941, "set": 9.49663526248, "numpi": 1867.764705882, "ani": 1.13383802314, "choic": 3.1319786940200003, "sampl": 7.23280182232, "time": 3.03382381044, "from": 3.00170164491, "back": 1.26070038911, "relat": 1.23750876919, "behavior": 5.52978056426, "returnsequencestru": 933.882352941, "num": 11.00346544011, "editor": 4.33060556465, "market": 4.73204172876, "lapid": 721.636363636, "advic": 7.08117752007, "low": 2.13072070863, "return": 1.39532431007, "kick": 13.099009900999999, "start": 3.8002074523200005, "for": 13.00409552013, "depend": 2.2411067193700003, "manipul": 9.145161290319999, "regular": 2.09418282548, "discuss": 2.19676214197, "output": 30.707930367520003, "everyon": 6.3964544722, "pleas": 9.12938470385, "seen": 1.61079545455, "with": 11.013180298889997, "store": 3.44680851064, "assum": 2.9575260804799997, "merg": 5.28319467554, "case": 2.96997474512, "normal": 2.61075481006, "popular": 1.50769230769, "dropout": 668.463157896, "connect": 1.8843916913900003, "futur": 7.430844839680001, "and": 25.001574803249998, "new": 1.0178880554, "finish": 3.22879804759, "these": 1.07415426252, "prophet": 15.2800769971, "deliv": 3.4039451114899997, "post": 2.23826307627, "while": 3.1325966850899993, "later": 1.08650424309, "neighbour": 8.12903225806, "column": 28.312082033000003, "comment": 3.05954904606, "compar": 1.8662278123900002, "close": 1.2848818387799998, "size": 2.49387370405, "can": 5.8813069571, "avail": 1.7288467821, "give": 1.3653250774, "make": 3.2287980475800007, "aid": 2.65618203112, "each": 1.18974820144, "check": 6.50655737705, "train": 5.8097096853, "great": 2.53185551392, "focus": 2.01012914662, "are": 5.1495296789000005, "thing": 2.4065484311099996, "step": 11.311720698239998, "error": 6.04109589041, "move": 1.29125660838, "familiar": 6.86381322957, "data": 33.7643555934, "thereaft": 6.498567335240001, "note": 2.84899057874, "shape": 3.20338983051, "scale": 11.240972386109998, "analyz": 9.68639414277, "notebook": 40.1924050633, "into": 3.04507384437, "space": 2.39818731118, "bio": 42.336000000000006, "down": 1.35889754344, "matplotlib": 1867.764705882, "might": 2.1561863370900003, "dimens": 8.25585023401, "leader": 2.0994445913799997, "lstms": 2801.647058823, "modul": 16.9434364995, "import": 6.700996116850001, "first": 1.00761614623, "everi": 1.47917637194, "highest": 2.50212765957, "readabl": 74.8867924528, "when": 1.02076769755, "axi": 12.109839816900001, "uphil": 125.007874016, "head": 1.57781753131, "overfit": 1867.764705882, "show": 1.26703910615, "workflow": 369.209302326, "they": 1.03017325287, "affect": 2.4794627518400003, "clear": 1.85423966363, "find": 1.7294117647099998, "forecast": 21.897931034499997, "learn": 18.5820043892, "own": 2.35688836104, "conclus": 4.84615384615, "dens": 31.2519685038, "creat": 2.4985835694}, "logtfidf": {"after": 0.061472083944299996, "real": 1.649258121148, "xtrain": 6.83935046985, "inversetransform": 6.83935046985, "squar": 1.18377009701, "permiss": 1.8373800586400002, "this": 0.04543738863, "pytorch": 6.83935046985, "analyst": 5.394299772899999, "here": 2.6551145651100003, "factor": 2.12339629324, "wide": 0.44458000675399995, "kind": 0.948031302717, "stock": 22.57717671048, "averag": 0.957011687995, "comput": 4.104206747819999, "long": 0.471291587756, "panda": 4.7167367562999996, "layer": 18.87281246115, "follow": 0.045356911094199995, "repres": 0.38507723275, "dataset": 42.12675653312, "about": 0.0628434774746, "problem": 0.569140724273, "run": 0.885429951078, "epoch": 3.6466978400800003, "sequenc": 5.4106333122, "neural": 8.170630311, "derrick": 9.0735307537, "mind": 1.2786688388299998, "python": 8.06131348592, "adam": 1.4886080966, "timestamp": 6.27136643224, "done": 0.845975983129, "spec": 4.513508514690001, "reshap": 3.9359915164199997, "price": 19.97030436224, "previous": 1.426411840252, "wish": 1.30224781835, "repost": 6.83935046985, "reddit": 6.27136643224, "know": 0.952919694398, "defin": 1.00368010925, "minmaxscal": 13.6787009397, "between": 0.033953681165299995, "won": 0.8404139079, "particular": 0.323157393804, "shortterm": 13.6787009397, "fit": 1.2151206268899999, "their": 0.030721010245400002, "few": 0.551155827306, "plot": 5.05002721527, "articl": 0.702131739574, "how": 0.9431339138600001, "test": 4.886122185515, "load": 7.67061416752, "news": 0.733245073485, "atmospher": 1.9406330919499999, "mwiti": 13.6787009397, "seri": 0.7638692213959999, "meansquarrederror": 6.83935046985, "keep": 0.7141523446729999, "quit": 1.05951513684, "especi": 0.511098609709, "initi": 0.30010459245, "order": 0.44028076158600005, "alway": 0.726319204572, "found": 0.107841124048, "other": 0.01974949583952, "usual": 0.545279017064, "abl": 0.599303982475, "deep": 7.7320408188, "will": 1.2167192094900001, "the": 0.0, "regress": 3.9359915164199997, "open": 0.439182076058, "predict": 19.748882852279998, "build": 1.964549808364, "veri": 0.230159793238, "see": 0.240921585492, "power": 0.58479256543, "linear": 2.63027764196, "next": 1.206491056497, "perform": 0.85236170116, "certain": 0.592104362781, "need": 1.088220490326, "our": 11.149309784366, "there": 0.080195785851, "final": 0.585467727896, "inform": 0.454453704662, "expect": 0.78850775216, "went": 0.593243704365, "prevent": 1.5413051750459998, "origin": 0.128612437587, "trade": 1.730183848376, "have": 0.0147850023412, "illustr": 1.2978562707799999, "take": 0.261383924394, "visual": 1.6539383488600001, "use": 0.3212882170476, "experi": 0.626272953933, "sequenti": 7.3572047732, "reader": 1.8622111301800002, "model": 5.899600584888001, "mentor": 5.394299772899999, "format": 1.8574265037459998, "high": 0.27564757308000004, "hacker": 4.42029038586, "driven": 1.72311939365, "concept": 0.977224437103, "unit": 0.286376123634, "number": 0.0966085784186, "tutori": 16.341260622, "also": 0.0146571578, "optim": 4.891255590819999, "coupl": 3.5426807391599997, "specifi": 3.86902303242, "mean": 0.74184256704, "loss": 0.885954358842, "writer": 1.0145657459, "task": 1.35748680661, "batch": 3.5744895317400003, "africa": 1.33258524191, "climb": 2.2283151644099997, "determin": 0.772833019022, "lowest": 1.8793894667099997, "past": 0.7016234157610001, "specif": 0.626980167541, "more": 0.017024931599999998, "zero": 2.1692741832299998, "polit": 0.570142784146, "convert": 2.3720720736, "argument": 1.62793753414, "timestep": 13.6787009397, "scientif": 1.42377308021, "howev": 0.0903151173475, "last": 0.19204364461100001, "techniqu": 2.63248769614, "actual": 0.628514181648, "work": 0.109034567273, "crucial": 2.04696874177, "minut": 1.1353719359799999, "that": 0.06361837407424, "inputshap": 6.83935046985, "which": 0.01035682769086, "featur": 0.846774836284, "day": 0.33731741263400006, "introduct": 3.0682939738200004, "whether": 1.583122379294, "one": 0.0187660549365, "graph": 3.6299309802199997, "array": 6.95076813279, "full": 0.511203624148, "financi": 0.958817483446, "compil": 1.7398427864200001, "such": 0.119391955612, "becaus": 0.418029476475, "those": 0.17854939087299998, "get": 1.159538011564, "network": 1.9061661061039998, "select": 0.704804687133, "drop": 0.8999535106219999, "add": 6.11502334852, "result": 0.40913672514300004, "knearest": 6.83935046985, "transform": 1.22966322707, "dimension": 3.99239120489, "memori": 1.8908677973199999, "kera": 33.6406241737, "glimps": 3.65884865786, "scikit": 6.83935046985, "set": 1.371968090312, "numpi": 13.6787009397, "ani": 0.125608358366, "choic": 1.14166497543, "sampl": 1.9786264883900002, "time": 0.0336345565878, "from": 0.0017011625065979999, "back": 0.23166743089699998, "relat": 0.21310030165399999, "behavior": 1.71014813378, "returnsequencestru": 6.83935046985, "num": 0.0034648943493670007, "editor": 1.4657073855, "market": 1.7224191678740002, "lapid": 6.58152136054, "advic": 1.9574402102700001, "low": 0.7564602833490001, "return": 0.333126868592, "kick": 2.57253664727, "start": 0.709330107873, "for": 0.004094875140161, "depend": 0.806969815, "manipul": 2.21322491868, "regular": 0.739163417847, "discuss": 0.78698452262, "output": 8.15290631308, "everyon": 1.8557438481400002, "pleas": 2.21149829955, "seen": 0.47672812813, "with": 0.01317240884729, "store": 1.2374487335200002, "assum": 1.08435313525, "merg": 1.66453096693, "case": 0.790812537778, "normal": 0.959639378783, "popular": 0.41058020877499996, "dropout": 20.4747476892, "connect": 0.633605058682, "futur": 2.477380790796, "and": 0.00157475355159, "new": 0.0177299468511, "finish": 1.17210994649, "these": 0.0715336194008, "prophet": 2.7265498227999996, "deliv": 1.22493508587, "post": 0.8057001527009999, "while": 0.12974995138140002, "later": 0.0829654259878, "neighbour": 2.09544188303, "column": 7.82797711752, "comment": 1.11826753454, "compar": 0.6239191809269999, "close": 0.250666759864, "size": 0.9138372060609999, "can": 0.8117054819699999, "avail": 0.547454586289, "give": 0.311392552224, "make": 0.22049297346869998, "aid": 0.976889765079, "each": 0.173741689304, "check": 1.87281049562, "train": 1.982754938517, "great": 0.471610516158, "focus": 0.6981989720559999, "are": 0.1473373679135, "thing": 0.8781935346799999, "step": 4.15818022792, "error": 1.7985854343, "move": 0.255615859253, "familiar": 1.92626315167, "data": 12.168205848, "thereaft": 1.8715817426499999, "note": 0.707635136166, "shape": 1.16420957115, "scale": 3.9628591898399996, "analyz": 2.2707222351599996, "notebook": 3.693678049, "into": 0.0447385896861, "space": 0.874713164972, "bio": 3.7456377879300002, "down": 0.306673741186, "matplotlib": 13.6787009397, "might": 0.7683410765340001, "dimens": 2.11092206831, "leader": 0.741672829452, "lstms": 20.51805140955, "modul": 2.82988053166, "import": 1.46409138533, "first": 0.0075872898121599995, "everi": 0.391485427421, "highest": 0.917141433754, "readabl": 4.31597753923, "when": 0.0205549888584, "axi": 2.4940183301400003, "uphil": 4.82837672744, "head": 0.456042582852, "overfit": 13.6787009397, "show": 0.236682766013, "workflow": 5.91136369821, "they": 0.0297269947676, "affect": 0.908041904384, "clear": 0.617474727198, "find": 0.547781330288, "forecast": 3.08639215905, "learn": 6.74201651796, "own": 0.328390154842, "conclus": 1.57818536893, "dens": 7.03041023298, "creat": 0.445153637028}, "logidf": {"after": 0.020490694648099998, "real": 0.824629060574, "xtrain": 6.83935046985, "inversetransform": 6.83935046985, "squar": 1.18377009701, "permiss": 1.8373800586400002, "this": 0.0037864490525, "pytorch": 6.83935046985, "analyst": 2.6971498864499996, "here": 0.8850381883700001, "factor": 1.06169814662, "wide": 0.44458000675399995, "kind": 0.948031302717, "stock": 1.61265547932, "averag": 0.957011687995, "comput": 1.36806891594, "long": 0.235645793878, "panda": 4.7167367562999996, "layer": 2.0969791623500003, "follow": 0.045356911094199995, "repres": 0.38507723275, "dataset": 5.26584456664, "about": 0.0628434774746, "problem": 0.569140724273, "run": 0.442714975539, "epoch": 3.6466978400800003, "sequenc": 1.8035444374, "neural": 4.0853151555, "derrick": 4.53676537685, "mind": 1.2786688388299998, "python": 4.03065674296, "adam": 1.4886080966, "timestamp": 6.27136643224, "done": 0.845975983129, "spec": 4.513508514690001, "reshap": 3.9359915164199997, "price": 1.24814402264, "previous": 0.356602960063, "wish": 1.30224781835, "repost": 6.83935046985, "reddit": 6.27136643224, "know": 0.952919694398, "defin": 1.00368010925, "minmaxscal": 6.83935046985, "between": 0.033953681165299995, "won": 0.8404139079, "particular": 0.323157393804, "shortterm": 6.83935046985, "fit": 1.2151206268899999, "their": 0.015360505122700001, "few": 0.275577913653, "plot": 1.68334240509, "articl": 0.702131739574, "how": 0.47156695693000006, "test": 0.977224437103, "load": 1.91765354188, "news": 0.733245073485, "atmospher": 1.9406330919499999, "mwiti": 6.83935046985, "seri": 0.38193461069799994, "meansquarrederror": 6.83935046985, "keep": 0.7141523446729999, "quit": 1.05951513684, "especi": 0.511098609709, "initi": 0.30010459245, "order": 0.22014038079300002, "alway": 0.726319204572, "found": 0.107841124048, "other": 0.00987474791976, "usual": 0.545279017064, "abl": 0.599303982475, "deep": 1.2886734698, "will": 0.202786534915, "the": 0.0, "regress": 3.9359915164199997, "open": 0.219591038029, "predict": 1.6457402376899999, "build": 0.491137452091, "veri": 0.230159793238, "see": 0.240921585492, "power": 0.292396282715, "linear": 2.63027764196, "next": 0.402163685499, "perform": 0.42618085058, "certain": 0.592104362781, "need": 0.362740163442, "our": 0.8576392141820001, "there": 0.0400978929255, "final": 0.292733863948, "inform": 0.454453704662, "expect": 0.78850775216, "went": 0.593243704365, "prevent": 0.7706525875229999, "origin": 0.128612437587, "trade": 0.865091924188, "have": 0.0147850023412, "illustr": 1.2978562707799999, "take": 0.130691962197, "visual": 1.6539383488600001, "use": 0.0292080197316, "experi": 0.626272953933, "sequenti": 3.6786023866, "reader": 1.8622111301800002, "model": 0.7374500731110001, "mentor": 2.6971498864499996, "format": 0.9287132518729999, "high": 0.13782378654000002, "hacker": 4.42029038586, "driven": 1.72311939365, "concept": 0.977224437103, "unit": 0.143188061817, "number": 0.0966085784186, "tutori": 4.0853151555, "also": 0.0146571578, "optim": 2.4456277954099996, "coupl": 1.18089357972, "specifi": 1.93451151621, "mean": 0.37092128352, "loss": 0.885954358842, "writer": 1.0145657459, "task": 1.35748680661, "batch": 3.5744895317400003, "africa": 1.33258524191, "climb": 2.2283151644099997, "determin": 0.772833019022, "lowest": 1.8793894667099997, "past": 0.7016234157610001, "specif": 0.626980167541, "more": 0.017024931599999998, "zero": 2.1692741832299998, "polit": 0.570142784146, "convert": 1.1860360368, "argument": 1.62793753414, "timestep": 6.83935046985, "scientif": 1.42377308021, "howev": 0.0903151173475, "last": 0.19204364461100001, "techniqu": 1.31624384807, "actual": 0.628514181648, "work": 0.109034567273, "crucial": 2.04696874177, "minut": 1.1353719359799999, "that": 0.00397614837964, "inputshap": 6.83935046985, "which": 0.00517841384543, "featur": 0.423387418142, "day": 0.16865870631700003, "introduct": 1.02276465794, "whether": 0.791561189647, "one": 0.0062553516455, "graph": 3.6299309802199997, "array": 2.31692271093, "full": 0.511203624148, "financi": 0.958817483446, "compil": 1.7398427864200001, "such": 0.059695977806, "becaus": 0.139343158825, "those": 0.17854939087299998, "get": 0.579769005782, "network": 0.9530830530519999, "select": 0.704804687133, "drop": 0.8999535106219999, "add": 1.52875583713, "result": 0.136378908381, "knearest": 6.83935046985, "transform": 1.22966322707, "dimension": 3.99239120489, "memori": 0.9454338986599999, "kera": 6.72812483474, "glimps": 3.65884865786, "scikit": 6.83935046985, "set": 0.171496011289, "numpi": 6.83935046985, "ani": 0.125608358366, "choic": 1.14166497543, "sampl": 1.9786264883900002, "time": 0.0112115188626, "from": 0.000567054168866, "back": 0.23166743089699998, "relat": 0.21310030165399999, "behavior": 1.71014813378, "returnsequencestru": 6.83935046985, "num": 0.00031499039539700004, "editor": 1.4657073855, "market": 0.8612095839370001, "lapid": 6.58152136054, "advic": 1.9574402102700001, "low": 0.7564602833490001, "return": 0.333126868592, "kick": 2.57253664727, "start": 0.236443369291, "for": 0.00031499039539700004, "depend": 0.806969815, "manipul": 2.21322491868, "regular": 0.739163417847, "discuss": 0.78698452262, "output": 2.03822657827, "everyon": 1.8557438481400002, "pleas": 2.21149829955, "seen": 0.47672812813, "with": 0.00119749171339, "store": 1.2374487335200002, "assum": 1.08435313525, "merg": 1.66453096693, "case": 0.395406268889, "normal": 0.959639378783, "popular": 0.41058020877499996, "dropout": 5.1186869223, "connect": 0.633605058682, "futur": 0.619345197699, "and": 6.29901420636e-05, "new": 0.0177299468511, "finish": 1.17210994649, "these": 0.0715336194008, "prophet": 2.7265498227999996, "deliv": 1.22493508587, "post": 0.8057001527009999, "while": 0.04324998379380001, "later": 0.0829654259878, "neighbour": 2.09544188303, "column": 1.95699427938, "comment": 1.11826753454, "compar": 0.6239191809269999, "close": 0.250666759864, "size": 0.9138372060609999, "can": 0.162341096394, "avail": 0.547454586289, "give": 0.311392552224, "make": 0.07349765782289999, "aid": 0.976889765079, "each": 0.173741689304, "check": 1.87281049562, "train": 0.660918312839, "great": 0.235805258079, "focus": 0.6981989720559999, "are": 0.0294674735827, "thing": 0.8781935346799999, "step": 1.03954505698, "error": 1.7985854343, "move": 0.255615859253, "familiar": 1.92626315167, "data": 1.2168205848, "thereaft": 1.8715817426499999, "note": 0.353817568083, "shape": 1.16420957115, "scale": 1.32095306328, "analyz": 2.2707222351599996, "notebook": 3.693678049, "into": 0.0149128632287, "space": 0.874713164972, "bio": 3.7456377879300002, "down": 0.306673741186, "matplotlib": 6.83935046985, "might": 0.7683410765340001, "dimens": 2.11092206831, "leader": 0.741672829452, "lstms": 6.83935046985, "modul": 2.82988053166, "import": 0.292818277066, "first": 0.0075872898121599995, "everi": 0.391485427421, "highest": 0.917141433754, "readabl": 4.31597753923, "when": 0.0205549888584, "axi": 2.4940183301400003, "uphil": 4.82837672744, "head": 0.456042582852, "overfit": 6.83935046985, "show": 0.236682766013, "workflow": 5.91136369821, "they": 0.0297269947676, "affect": 0.908041904384, "clear": 0.617474727198, "find": 0.547781330288, "forecast": 3.08639215905, "learn": 0.842752064745, "own": 0.164195077421, "conclus": 1.57818536893, "dens": 2.3434700776599997, "creat": 0.222576818514}, "freq": {"after": 3, "real": 2, "xtrain": 1, "inversetransform": 1, "squar": 1, "permiss": 1, "this": 12, "pytorch": 1, "analyst": 2, "here": 3, "factor": 2, "wide": 1, "kind": 1, "stock": 14, "averag": 1, "comput": 3, "long": 2, "panda": 1, "layer": 9, "follow": 1, "repres": 1, "dataset": 8, "about": 1, "problem": 1, "run": 2, "epoch": 1, "sequenc": 3, "neural": 2, "derrick": 2, "mind": 1, "python": 2, "adam": 1, "timestamp": 1, "done": 1, "spec": 1, "reshap": 1, "price": 16, "previous": 4, "wish": 1, "repost": 1, "reddit": 1, "know": 1, "defin": 1, "minmaxscal": 2, "between": 1, "won": 1, "particular": 1, "shortterm": 2, "fit": 1, "their": 2, "few": 2, "plot": 3, "articl": 1, "how": 2, "test": 5, "load": 4, "news": 1, "atmospher": 1, "mwiti": 2, "seri": 2, "meansquarrederror": 1, "keep": 1, "quit": 1, "especi": 1, "initi": 1, "order": 2, "alway": 1, "found": 1, "other": 2, "usual": 1, "abl": 1, "deep": 6, "will": 6, "the": 67, "regress": 1, "open": 2, "predict": 12, "build": 4, "veri": 1, "see": 1, "power": 2, "linear": 1, "next": 3, "perform": 2, "certain": 1, "need": 3, "our": 13, "there": 2, "final": 2, "inform": 1, "expect": 1, "went": 1, "prevent": 2, "origin": 1, "trade": 2, "have": 1, "illustr": 1, "take": 2, "visual": 1, "use": 11, "experi": 1, "sequenti": 2, "reader": 1, "model": 8, "mentor": 2, "format": 2, "high": 2, "hacker": 1, "driven": 1, "concept": 1, "unit": 2, "number": 1, "tutori": 4, "also": 1, "optim": 2, "coupl": 3, "specifi": 2, "mean": 2, "loss": 1, "writer": 1, "task": 1, "batch": 1, "africa": 1, "climb": 1, "determin": 1, "lowest": 1, "past": 1, "specif": 1, "more": 1, "zero": 1, "polit": 1, "convert": 2, "argument": 1, "timestep": 2, "scientif": 1, "howev": 1, "last": 1, "techniqu": 2, "actual": 1, "work": 1, "crucial": 1, "minut": 1, "that": 16, "inputshap": 1, "which": 2, "featur": 2, "day": 2, "introduct": 3, "whether": 2, "one": 3, "graph": 1, "array": 3, "full": 1, "financi": 1, "compil": 1, "such": 2, "becaus": 3, "those": 1, "get": 2, "network": 2, "select": 1, "drop": 1, "add": 4, "result": 3, "knearest": 1, "transform": 1, "dimension": 1, "memori": 2, "kera": 5, "glimps": 1, "scikit": 1, "set": 8, "numpi": 2, "ani": 1, "choic": 1, "sampl": 1, "time": 3, "from": 3, "back": 1, "relat": 1, "behavior": 1, "returnsequencestru": 1, "num": 11, "editor": 1, "market": 2, "lapid": 1, "advic": 1, "low": 1, "return": 1, "kick": 1, "start": 3, "for": 13, "depend": 1, "manipul": 1, "regular": 1, "discuss": 1, "output": 4, "everyon": 1, "pleas": 1, "seen": 1, "with": 11, "store": 1, "assum": 1, "merg": 1, "case": 2, "normal": 1, "popular": 1, "dropout": 4, "connect": 1, "futur": 4, "and": 25, "new": 1, "finish": 1, "these": 1, "prophet": 1, "deliv": 1, "post": 1, "while": 3, "later": 1, "neighbour": 1, "column": 4, "comment": 1, "compar": 1, "close": 1, "size": 1, "can": 5, "avail": 1, "give": 1, "make": 3, "aid": 1, "each": 1, "check": 1, "train": 3, "great": 2, "focus": 1, "are": 5, "thing": 1, "step": 4, "error": 1, "move": 1, "familiar": 1, "data": 10, "thereaft": 1, "note": 2, "shape": 1, "scale": 3, "analyz": 1, "notebook": 1, "into": 3, "space": 1, "bio": 1, "down": 1, "matplotlib": 2, "might": 1, "dimens": 1, "leader": 1, "lstms": 3, "modul": 1, "import": 5, "first": 1, "everi": 1, "highest": 1, "readabl": 1, "when": 1, "axi": 1, "uphil": 1, "head": 1, "overfit": 2, "show": 1, "workflow": 1, "they": 1, "affect": 1, "clear": 1, "find": 1, "forecast": 1, "learn": 8, "own": 2, "conclus": 1, "dens": 3, "creat": 2}, "idf": {"after": 1.02070207021, "real": 2.28103448276, "xtrain": 933.882352941, "inversetransform": 933.882352941, "squar": 3.26666666667, "permiss": 6.280063291139999, "this": 1.00379362671, "pytorch": 933.882352941, "analyst": 14.8373831776, "here": 2.42307692308, "factor": 2.89127663449, "wide": 1.5598349381, "kind": 2.5806241872599998, "stock": 5.01611374408, "averag": 2.60390355913, "comput": 3.9277585353800006, "long": 1.2657259028899999, "panda": 111.802816901, "layer": 8.14153846154, "follow": 1.04640126549, "repres": 1.46972782818, "dataset": 193.609756098, "about": 1.06486015159, "problem": 1.76674827509, "run": 1.55692850838, "epoch": 38.347826087, "sequenc": 6.07112810707, "neural": 59.4606741573, "derrick": 93.3882352941, "mind": 3.5918552036199998, "python": 56.2978723404, "adam": 4.43092380687, "timestamp": 529.2, "done": 2.3302509907499998, "spec": 91.2413793103, "reshap": 51.2129032258, "price": 3.4838709677399997, "previous": 1.42846859816, "wish": 3.67755385685, "repost": 933.882352941, "reddit": 529.2, "know": 2.59327017315, "defin": 2.72830383227, "minmaxscal": 933.882352941, "between": 1.03453668708, "won": 2.31732593782, "particular": 1.3814827706200001, "shortterm": 933.882352941, "fit": 3.37070063694, "their": 1.01547908405, "few": 1.31729173581, "plot": 5.383519837230001, "articl": 2.01805008262, "how": 1.60250328051, "test": 2.65707112971, "load": 6.80497213888, "news": 2.08182533438, "atmospher": 6.96315789474, "mwiti": 933.882352941, "seri": 1.46511627907, "meansquarrederror": 933.882352941, "keep": 2.04245465071, "quit": 2.8849718335500003, "especi": 1.66712170534, "initi": 1.35, "order": 1.24625166811, "alway": 2.06745670009, "found": 1.11387076405, "other": 1.00992366412, "usual": 1.72508964468, "abl": 1.8208510150200001, "deep": 3.6279707495399998, "will": 1.22481098596, "the": 1.0, "regress": 51.2129032258, "open": 1.24556723678, "predict": 5.18484650555, "build": 1.6341739578, "veri": 1.25880114177, "see": 1.27242125511, "power": 1.3396337861799998, "linear": 13.8776223776, "next": 1.4950560316400001, "perform": 1.5313977042500002, "certain": 1.8077886586200003, "need": 1.4372623574099999, "our": 2.35758835759, "there": 1.04091266719, "final": 1.34008609775, "inform": 1.5753125620200001, "expect": 2.20011086475, "went": 1.8098495212, "prevent": 2.16117615029, "origin": 1.13724928367, "trade": 2.37522441652, "have": 1.0148948411399998, "illustr": 3.6614391143900002, "take": 1.13961668222, "visual": 5.22752716497, "use": 1.0296387573799999, "experi": 1.87062566278, "sequenti": 39.5910224439, "reader": 6.437956204380001, "model": 2.0905978404, "mentor": 14.8373831776, "format": 2.53125, "high": 1.14777327935, "hacker": 83.1204188482, "driven": 5.601976005650001, "concept": 2.65707112971, "unit": 1.15394679459, "number": 1.10142916609, "tutori": 59.4606741573, "also": 1.01476510067, "optim": 11.5377906977, "coupl": 3.2572835453400004, "specifi": 6.920662598080001, "mean": 1.44906900329, "loss": 2.42529789184, "writer": 2.75816539263, "task": 3.88641370869, "batch": 35.6764044944, "africa": 3.7908309455599998, "climb": 9.284210526319999, "determin": 2.1658935879900003, "lowest": 6.549504950499999, "past": 2.01702452039, "specif": 1.8719490626099997, "more": 1.0171706817, "zero": 8.75192943771, "polit": 1.76851954996, "convert": 3.2740771293099997, "argument": 5.09335899904, "timestep": 933.882352941, "scientif": 4.15275961287, "howev": 1.0945191313299998, "last": 1.2117234010100002, "techniqu": 3.7293868921800004, "actual": 1.87482286254, "work": 1.11520089913, "crucial": 7.7443902439, "minut": 3.11233091551, "that": 1.00398406375, "inputshap": 933.882352941, "which": 1.005191845, "featur": 1.52712581762, "day": 1.18371607516, "introduct": 2.7808723068799996, "whether": 2.20683903253, "one": 1.00627495722, "graph": 37.7102137767, "array": 10.1444089457, "full": 1.66729678639, "financi": 2.60860992442, "compil": 5.696447793330001, "such": 1.06151377374, "becaus": 1.1495184997499999, "those": 1.19548192771, "get": 1.78562591385, "network": 2.59369384088, "select": 2.02345144022, "drop": 2.4594887684, "add": 4.61243463103, "result": 1.14611608432, "knearest": 933.882352941, "transform": 3.42007755278, "dimension": 54.1843003413, "memori": 2.57392996109, "kera": 835.5789473680001, "glimps": 38.8166259169, "scikit": 933.882352941, "set": 1.18707940781, "numpi": 933.882352941, "ani": 1.13383802314, "choic": 3.1319786940200003, "sampl": 7.23280182232, "time": 1.01127460348, "from": 1.00056721497, "back": 1.26070038911, "relat": 1.23750876919, "behavior": 5.52978056426, "returnsequencestru": 933.882352941, "num": 1.00031504001, "editor": 4.33060556465, "market": 2.36602086438, "lapid": 721.636363636, "advic": 7.08117752007, "low": 2.13072070863, "return": 1.39532431007, "kick": 13.099009900999999, "start": 1.26673581744, "for": 1.00031504001, "depend": 2.2411067193700003, "manipul": 9.145161290319999, "regular": 2.09418282548, "discuss": 2.19676214197, "output": 7.676982591880001, "everyon": 6.3964544722, "pleas": 9.12938470385, "seen": 1.61079545455, "with": 1.0011982089899998, "store": 3.44680851064, "assum": 2.9575260804799997, "merg": 5.28319467554, "case": 1.48498737256, "normal": 2.61075481006, "popular": 1.50769230769, "dropout": 167.115789474, "connect": 1.8843916913900003, "futur": 1.8577112099200002, "and": 1.00006299213, "new": 1.0178880554, "finish": 3.22879804759, "these": 1.07415426252, "prophet": 15.2800769971, "deliv": 3.4039451114899997, "post": 2.23826307627, "while": 1.0441988950299999, "later": 1.08650424309, "neighbour": 8.12903225806, "column": 7.078020508250001, "comment": 3.05954904606, "compar": 1.8662278123900002, "close": 1.2848818387799998, "size": 2.49387370405, "can": 1.17626139142, "avail": 1.7288467821, "give": 1.3653250774, "make": 1.0762660158600001, "aid": 2.65618203112, "each": 1.18974820144, "check": 6.50655737705, "train": 1.9365698950999999, "great": 1.26592775696, "focus": 2.01012914662, "are": 1.02990593578, "thing": 2.4065484311099996, "step": 2.8279301745599996, "error": 6.04109589041, "move": 1.29125660838, "familiar": 6.86381322957, "data": 3.37643555934, "thereaft": 6.498567335240001, "note": 1.42449528937, "shape": 3.20338983051, "scale": 3.7469907953699995, "analyz": 9.68639414277, "notebook": 40.1924050633, "into": 1.01502461479, "space": 2.39818731118, "bio": 42.336000000000006, "down": 1.35889754344, "matplotlib": 933.882352941, "might": 2.1561863370900003, "dimens": 8.25585023401, "leader": 2.0994445913799997, "lstms": 933.882352941, "modul": 16.9434364995, "import": 1.3401992233700002, "first": 1.00761614623, "everi": 1.47917637194, "highest": 2.50212765957, "readabl": 74.8867924528, "when": 1.02076769755, "axi": 12.109839816900001, "uphil": 125.007874016, "head": 1.57781753131, "overfit": 933.882352941, "show": 1.26703910615, "workflow": 369.209302326, "they": 1.03017325287, "affect": 2.4794627518400003, "clear": 1.85423966363, "find": 1.7294117647099998, "forecast": 21.897931034499997, "learn": 2.32275054865, "own": 1.17844418052, "conclus": 4.84615384615, "dens": 10.4173228346, "creat": 1.2492917847}}, "html": "<!DOCTYPE html>\n\n<html lang=\"en-US\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head profile=\"http://gmpg.org/xfn/11\">\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n<title>  Using a Keras Long Short-Term Memory (LSTM) Model to Predict Stock Prices</title>\n<link href=\"/wp-content/themes/kdn17/images/favicon.ico\" rel=\"shortcut icon\"/>\n<link href=\"/wp-content/themes/kdn17/style.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"/wp-content/themes/kdn17/js/jquery-1.9.1.min.js\" type=\"text/javascript\"></script>\n<script src=\"/aps/kda_all.js\" type=\"text/javascript\"></script>\n<link href=\"/feed/\" rel=\"alternate\" title=\"KDnuggets: Analytics, Big Data, Data Mining and Data Science Feed\" type=\"application/rss+xml\"/>\n<link href=\"//s.w.org\" rel=\"dns-prefetch\"/>\n<link href=\"https://www.kdnuggets.com/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/comments/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/2018/11/keras-long-short-term-memory-lstm-model-predict-stock-prices.html/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Using a Keras Long Short-Term Memory (LSTM) Model to Predict Stock Prices Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-json/\" rel=\"https://api.w.org/\"/>\n<link href=\"https://www.kdnuggets.com/xmlrpc.php?rsd\" rel=\"EditURI\" title=\"RSD\" type=\"application/rsd+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-includes/wlwmanifest.xml\" rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\"/>\n<link href=\"https://www.kdnuggets.com/2018/11/autonomy-have-choice.html\" rel=\"prev\" title=\"Autonomy \u2013 Do we have the choice?\"/>\n<link href=\"https://www.kdnuggets.com/jobs/18/11-21-wpi-post-doctoral-fellow.html\" rel=\"next\" title=\"WPI: Post-Doctoral Fellow [Worcester, MA]\"/>\n<meta content=\"WordPress 4.9.10\" name=\"generator\">\n<link href=\"https://www.kdnuggets.com/2018/11/keras-long-short-term-memory-lstm-model-predict-stock-prices.html\" rel=\"canonical\"/>\n<link href=\"https://www.kdnuggets.com/?p=87634\" rel=\"shortlink\"/>\n<link href=\"https://www.kdnuggets.com/2018/11/keras-long-short-term-memory-lstm-model-predict-stock-prices.html\" rel=\"canonical\"/>\n<!-- BEGIN ExactMetrics v5.3.7 Universal Analytics - https://exactmetrics.com/ -->\n<script>\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-361129-1', 'auto');\n  ga('send', 'pageview');\n</script>\n<!-- END ExactMetrics Universal Analytics -->\n</meta></head>\n<body class=\"post-template-default single single-post postid-87634 single-format-standard\">\n<div class=\"main_wrapper\"><!-- publ: 21-Nov, 2018  -->\n<div id=\"wrapper\">\n<div id=\"header\">\n<div id=\"header_log\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<h1>KDnuggets</h1>\n<div class=\"text-container\">\n            \u00a0\u00a0<a href=\"/news/subscribe.html\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a> \u00a0|\n <a href=\"https://twitter.com/kdnuggets\" target=\"_blank\"><img alt=\"Twitter\" height=\"48\" src=\"/images/tw_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n <a href=\"https://www.facebook.com/kdnuggets\" target=\"_blank\"><img alt=\"Facebook\" height=\"48\" src=\"/images/fb_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n<a href=\"https://www.linkedin.com/groups/54257/\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"48\" src=\"/images/in_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \n\u00a0|\u00a0 <a href=\"/contact.html\"><b>Contact</b></a>\n</div>\n</div>\n<div class=\"search\">\n<form action=\"/\" id=\"searchform\" method=\"get\">\n<input id=\"s\" name=\"s\" placeholder=\"search KDnuggets\" type=\"text\" value=\"\"/>\n<input type=\"submit\" value=\"Search\"/></form>\n</div>\n<div href=\"#\" id=\"pull\">\n<img class=\"menu\" src=\"/images/menu-30.png\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<img class=\"search-icon\" src=\"/images/search-icon.png\">\n</img></img></div>\n<div id=\"pull-menu\">\n<div class=\"navigation\"><ul class=\"menu\" id=\"menu-menu\"><li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-1070\" id=\"menu-item-1070\"><a href=\"/software/index.html\" title=\"Data Science Software\">SOFTWARE</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13756\" id=\"menu-item-13756\"><a href=\"/news/index.html\" title=\"News\">News/Blog</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-46286\" id=\"menu-item-46286\"><a href=\"/news/top-stories.html\">Top stories</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-42152\" id=\"menu-item-42152\"><a href=\"https://www.kdnuggets.com/opinions/index.html\" title=\"Opinions\">Opinions</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-46415\" id=\"menu-item-46415\"><a href=\"https://www.kdnuggets.com/tutorials/index.html\">Tutorials</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13364\" id=\"menu-item-13364\"><a href=\"/jobs/index.html\" title=\"Jobs in Analytics, Data Science\">JOBS</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-63505\" id=\"menu-item-63505\"><a href=\"https://www.kdnuggets.com/companies/index.html\">Companies</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13366\" id=\"menu-item-13366\"><a href=\"/courses/index.html\">Courses</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-1499\" id=\"menu-item-1499\"><a href=\"https://www.kdnuggets.com/datasets/index.html\">Datasets</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-14286\" id=\"menu-item-14286\"><a href=\"https://www.kdnuggets.com/education/index.html\" title=\"Education in Analytics, Big Data, Data Science\">EDUCATION</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-51558\" id=\"menu-item-51558\"><a href=\"https://www.kdnuggets.com/education/analytics-data-mining-certificates.html\" title=\"Certificates in Analytics, Big Data, Data Science\">Certificates</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-14752\" id=\"menu-item-14752\"><a href=\"/meetings/index.html\">Meetings</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13721\" id=\"menu-item-13721\"><a href=\"/webcasts/index.html\" title=\"Webcasts and Webinars\">Webinars</a></li>\n</ul></div></div>\n</div> <!--#header end-->\n<div id=\"spacer\">\n         \u00a0\n      </div>\n<div id=\"content_wrapper\">\n<div id=\"ad_wrapper\">\n<script type=\"text/javascript\">\n\tjQuery(function() {\n   \t    var pull        = $('#pull');\n            menu        = $('#header .navigation ul');\n            menuImage = $('#header img.menu');\n            mobileMenu        = $('#pull-menu-mobile');\n            search = $('img.search-icon');\n            searchBar = $('div.search');\n            searchClick = false;\n            search.on('click', function() {\n                  searchBar.slideToggle();\n                  searchClick = true;\n            });  \n     \t    $(menuImage).on('click', function(e) {\n\t        //e.preventDefault();\n                if (!searchClick) {\n                  menu.slideToggle();\n                }\n                searchClick = false;\n\t    });\n           /* pullMobile.on('click', function(e) {\n              e.preventDefault();\n                if (!searchClick) {\n                  mobileMenu.slideToggle();\n                }\n                searchClick = false;\n\t    });*/\n            \n\t});\n\tkpath = '/'; kda_top(); kda_sid_init(); kda_sid_n=3;\n\t</script>\n</div> <div class=\"breadcumb\">\n<br/>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2018/index.html\">2018</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/11/index.html\">Nov</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/11/tutorials.html\">Tutorials, Overviews</a> \u00bb Using a Keras Long Short-Term Memory (LSTM) Model to Predict Stock Prices (\u00a0<a href=\"/2018/n45.html\">18:n45</a>\u00a0)    </div>\n<div class=\"single\" id=\"content\">\n<div id=\"post-header\">\n<h1 id=\"title\">Using a Keras Long Short-Term Memory (LSTM) Model to Predict Stock Prices</h1>\n<div class=\"pagi\">\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2018/11/autonomy-have-choice.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"> <strong>Previous post</strong></img></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/jobs/18/11-21-wpi-post-doctoral-fellow.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/>\u00a0<br/>\u00a0\n    <div class=\"addthis_native_toolbox\"></div>\n</div>\n<div class=\"tag-data\">Tags: <a href=\"https://www.kdnuggets.com/tag/finance\" rel=\"tag\">Finance</a>, <a href=\"https://www.kdnuggets.com/tag/keras\" rel=\"tag\">Keras</a>, <a href=\"https://www.kdnuggets.com/tag/lstm\" rel=\"tag\">LSTM</a>, <a href=\"https://www.kdnuggets.com/tag/neural-networks\" rel=\"tag\">Neural Networks</a>, <a href=\"https://www.kdnuggets.com/tag/stocks\" rel=\"tag\">Stocks</a></div>\n<br/>\n<p class=\"excerpt\">\n     LSTMs are very powerful in sequence prediction problems because they\u2019re able to store past information. This is important in our case because the previous price of a stock is crucial in predicting its future price.\n  </p>\n</div>\n<div id=\"post-header-ad\">\n<script type=\"text/javascript\">kda_sid_write(1); kda_sid_n=2;</script>\n</div>\n<hr class=\"grey-line\"/><br/>\n<div class=\"post\" id=\"post-\">\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p><b>By <a href=\"https://www.derrickmwiti.com\" rel=\"noopener noreferrer\" target=\"_blank\">Derrick Mwiti</a>, Data Analyst</b></p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/2000/1*1tDxGyGI4hnUf50a4LX5hQ.png\" width=\"99%\"/></p>\n<p><em>Editor\u2019s note: This tutorial illustrates how to get started forecasting time series with LSTM models. Stock market data is a great choice for this because it\u2019s quite regular and widely available to everyone. Please don\u2019t take this as financial advice or use it to make any trades of your own.</em></p>\n<p>In this tutorial, we\u2019ll build a Python deep learning model that will predict the future behavior of stock prices. We assume that the reader is familiar with the concepts of deep learning in Python, especially\u00a0<a href=\"/2018/11/introduction-pytorch-deep-learning.html\" rel=\"noopener noreferrer\" target=\"_blank\">Long Short-Term Memory.</a></p>\n<p>While predicting the actual price of a stock is an uphill climb, we can build a model that will predict whether the price will go up or down. The data and notebook used for this tutorial can be found\u00a0<a href=\"https://github.com/mwitiderrick/stockprice\" rel=\"noopener noreferrer\" target=\"_blank\">here</a>. It\u2019s important to note that there are always other factors that affect the prices of stocks, such as the political atmosphere and the\u00a0market. However, we won\u2019t focus on those factors for this tutorial.</p>\n<p>\u00a0</p>\n<h3><strong>Introduction</strong></h3>\n<p>\u00a0<br>\n<a href=\"https://heartbeat.fritz.ai/a-beginners-guide-to-implementing-long-short-term-memory-networks-lstm-eb7a2ff09a27\" rel=\"noopener noreferrer\" target=\"_blank\">LSTMs</a>\u00a0are very powerful in sequence prediction problems because they\u2019re able to store past information. This is important in our case because the previous price of a stock is crucial in predicting its future price.</br></p>\n<p>We\u2019ll kick of by importing\u00a0<a href=\"http://www.numpy.org/\" rel=\"noopener noreferrer\" target=\"_blank\">NumPy</a>\u00a0for scientific computation,\u00a0<a href=\"http://matplotlib.org/\" rel=\"noopener noreferrer\" target=\"_blank\">Matplotlib</a>\u00a0for plotting graphs, and\u00a0<a href=\"https://pandas.pydata.org/\" rel=\"noopener noreferrer\" target=\"_blank\">Pandas</a>\u00a0to aide in loading and manipulating our datasets.</p>\n<p><script src=\"https://gist.github.com/mwitiderrick/7d9e6ad05304919bf0e96446f7b09d84.js\"></script></p>\n<p>\u00a0</p>\n<h3><strong>Loading the\u00a0Dataset</strong></h3>\n<p>\u00a0<br>\nThe next step is to load in our training dataset and select the\u00a0<code>Open</code>\u00a0and\u00a0<code>High</code>columns that we\u2019ll use in our modeling.</br></p>\n<p><script src=\"https://gist.github.com/mwitiderrick/6f83b0b80161c89032e448cee4c3a775.js\"></script></p>\n<p>We check the head of our dataset to give us a glimpse into the kind of dataset we\u2019re working with.</p>\n<p><script src=\"https://gist.github.com/mwitiderrick/9342ad1d667f7b775816ff8c0d7085de.js\"></script></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/1600/1*-DN2G8VJsEvcFDsHuj17iw.png\" width=\"99%\"/></p>\n<p>The\u00a0<code>Open</code>\u00a0column is the starting price while the\u00a0<code>Close</code>\u00a0column is the final price of a stock on a particular trading day. The\u00a0<code>High</code>\u00a0and\u00a0<code>Low</code>\u00a0columns represent the highest and lowest prices for a certain day.</p>\n<p>\u00a0</p>\n<h3><strong>Feature Scaling</strong></h3>\n<p>\u00a0<br>\nFrom previous experience with deep learning models,\u00a0<strong>we know that we have to scale our data for optimal performance</strong>. In our case, we\u2019ll use\u00a0<a href=\"https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.MinMaxScaler.html\" rel=\"noopener noreferrer\" target=\"_blank\">Scikit- Learn\u2019s</a>\u00a0<code>MinMaxScaler</code>\u00a0and scale our dataset to numbers between zero and one.</br></p>\n<p><script src=\"https://gist.github.com/mwitiderrick/1b6e8e7cd5e2e201ac52ae8e469def1e.js\"></script></p>\n<p>\u00a0</p>\n<h3>Creating Data with Timesteps</h3>\n<p>\u00a0<br>\nLSTMs expect our data to be in a specific format, usually a 3D array. We start by creating data in 60 timesteps and converting it into an array using NumPy. Next, we convert the data into a 3D dimension array with\u00a0<code>X_train</code><em>\u00a0</em>samples, 60 timestamps, and one feature at each step.</br></p>\n<p><script src=\"https://gist.github.com/mwitiderrick/8da6324f29e33bf71a4c1125f647cffd.js\"></script></p>\n<p>\u00a0</p>\n<h3>Building the\u00a0LSTM</h3>\n<p>\u00a0<br/>\nIn order to build the LSTM, we need to import a couple of modules from\u00a0<a href=\"https://heartbeat.fritz.ai/introduction-to-deep-learning-with-keras-c7c3d14e1527\" rel=\"noopener noreferrer\" target=\"_blank\">Keras</a>:</p>\n<ol>\n<li><code>Sequential</code>\u00a0for initializing the neural network\n<li><code>Dense</code>\u00a0for adding a densely connected neural network layer\n<li><code>LSTM</code>\u00a0for adding the Long Short-Term Memory layer\n<li><code>Dropout</code>\u00a0for adding dropout layers that prevent overfitting\n</li></li></li></li></ol>\n<p><script src=\"https://gist.github.com/mwitiderrick/c67e9e6f534778b62101ce47a7fd144f.js\"></script></p>\n<p>We add the LSTM layer and later add a few\u00a0<code>Dropout</code>\u00a0layers to prevent overfitting. We add the LSTM layer with the following arguments:</p>\n<ol>\n<li><em>50 units</em>\u00a0which is the dimensionality of the output space\n<li><code>return_sequences=True</code><em>\u00a0</em>which determines whether to return the last output in the output sequence, or the full sequence\n<li><code>input_shape</code>\u00a0as the shape of our training set.\n</li></li></li></ol>\n<p>When defining the\u00a0<code>Dropout</code>\u00a0layers, we specify 0.2, meaning that 20% of the layers will be dropped. Thereafter, we add the\u00a0<code>Dense</code>\u00a0layer that specifies the output of 1 unit. After this, we compile our model using the popular adam optimizer and set the loss as the\u00a0<code>mean_squarred_error</code>. This will compute the mean of the squared errors. Next, we fit the model to run on 100 epochs with a batch size of 32. Keep in mind that, depending on the specs of your computer, this might take a few minutes to finish running.</p>\n<p><script src=\"https://gist.github.com/mwitiderrick/e9bb8249e7ff8b60ac6f419786ab8852.js\"></script></p>\n<p>\u00a0</p>\n<h3>Predicting Future Stock using the Test\u00a0Set</h3>\n<p>\u00a0<br/>\nFirst we need to import the test set that we\u2019ll use to make our predictions on.</p>\n<p><script src=\"https://gist.github.com/mwitiderrick/bdeb43af10c0dc6f160a2620f0e86a4a.js\"></script></p>\n<p>In order to predict future stock prices we need to do a couple of things after loading in the test set:</p>\n<ol>\n<li>Merge the training set and the test set on the 0 axis.\n<li>Set the time step as 60 (as seen previously)\n<li>Use\u00a0<code>MinMaxScaler</code>\u00a0to transform the new dataset\n<li>Reshape the dataset as done previously\n</li></li></li></li></ol>\n<p>After making the predictions we use\u00a0<code>inverse_transform</code>\u00a0to get back the stock prices in normal readable format.</p>\n<p><script src=\"https://gist.github.com/mwitiderrick/f702fe42ef144263efd68e9cbc6c2c3e.js\"></script></p>\n<p>\u00a0</p>\n<h3>Plotting the\u00a0Results</h3>\n<p>\u00a0<br/>\nFinally, we use Matplotlib to visualize the result of the predicted stock price and the real stock price.</p>\n<p><script src=\"https://gist.github.com/mwitiderrick/c2464fd91ceeecf69dac19a699f2f832.js\"></script></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/1600/1*VyYy57QmOUUZtZD2BplzEw.png\" width=\"99%\"/></p>\n<p>From the plot we can see that the real stock price went up while our model also predicted that the price of the stock will go up. This clearly shows how powerful LSTMs are for analyzing time series and sequential data.</p>\n<p>\u00a0</p>\n<h3>Conclusion</h3>\n<p>\u00a0<br/>\nThere are a couple of other techniques of predicting stock prices such as\u00a0<a href=\"https://www.investopedia.com/articles/active-trading/052014/how-use-moving-average-buy-stocks.asp\" rel=\"noopener noreferrer\" target=\"_blank\">moving averages</a>,\u00a0<a href=\"https://en.wikipedia.org/wiki/Linear_regression\" rel=\"noopener noreferrer\" target=\"_blank\">linear regression</a>,\u00a0<a href=\"https://heartbeat.fritz.ai/guide-to-implementing-k-nearest-neighbors-in-your-machine-learning-model-3b8420f16d93\" rel=\"noopener noreferrer\" target=\"_blank\">K-Nearest Neighbours</a>,\u00a0<a href=\"https://machinelearningmastery.com/arima-for-time-series-forecasting-with-python/\" rel=\"noopener noreferrer\" target=\"_blank\">ARIMA</a>\u00a0and\u00a0<a href=\"http://intelligentonlinetools.com/blog/2017/12/26/prediction-data-stock-price-prophet-report/\" rel=\"noopener noreferrer\" target=\"_blank\">Prophet</a>. These are techniques that one can test on their own and compare their performance with the Keras LSTM. If you wish to learn more about Keras and deep learning you can find my articles on that\u00a0<a href=\"https://heartbeat.fritz.ai/a-beginners-guide-to-convolutional-neural-networks-cnn-cf26c5ee17ed\" rel=\"noopener noreferrer\" target=\"_blank\">here</a>\u00a0and\u00a0<a href=\"https://heartbeat.fritz.ai/introduction-to-deep-learning-with-keras-c7c3d14e1527\" rel=\"noopener noreferrer\" target=\"_blank\">here</a>.</p>\n<p><strong>Discuss this post on\u00a0</strong><a href=\"https://www.reddit.com/r/MachinesLearn/comments/9vl927/using_a_keras_long_shortterm_memory_lstm_model_to/\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>Reddit</strong></a><strong>\u00a0and\u00a0</strong><a href=\"https://news.ycombinator.com/item?id=18415336\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>Hacker News</strong></a><strong>.</strong></p>\n<p>\u00a0<br/>\n<b>Bio: <a href=\"https://derrickmwiti.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Derrick Mwiti</a></b> is a data analyst, a writer, and a mentor. He is driven by delivering great results in every task, and is a mentor at Lapid Leaders Africa.</p>\n<p><a href=\"https://heartbeat.fritz.ai/using-a-keras-long-shortterm-memory-lstm-model-to-predict-stock-prices-a08c9f69aa74\" rel=\"noopener noreferrer\" target=\"_blank\">Original</a>. Reposted with permission.</p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2018/10/introduction-deep-learning-keras.html\">Introduction to Deep Learning with Keras</a>\n<li><a href=\"/2018/11/introduction-pytorch-deep-learning.html\">Introduction to PyTorch for Deep Learning</a>\n<li><a href=\"/2018/06/keras-4-step-workflow.html\">The Keras 4 Step Workflow</a>\n</li></li></li></ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p> <script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets';\n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div>\n<div class=\"page-link\"></div>\n<div class=\"pagi\">\n<hr class=\"grey-line\"/>\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2018/11/autonomy-have-choice.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"/> <strong>Previous post</strong></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/jobs/18/11-21-wpi-post-doctoral-fellow.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/><br/>\n<div>\n<hr class=\"grey-line\"/><br/>\n<h2>Top Stories Past 30 Days</h2>\n<table align=\"center\" cellpadding=\"3\" cellspacing=\"10\" class=\"latn\" width=\"100%\">\n<tr>\n<td valign=\"top\" width=\"50%\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Popular</b></th></tr>\n<tr><td>\n<ol class=\"three_ol\"><li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-1-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-2-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n<li> <a href=\"/2018/05/simplilearn-9-must-have-skills-data-scientist.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-3-simplilearn');\"><b>9 Must-have skills you need to become a Data Scientist, updated</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-4-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/03/another-10-free-must-read-books-for-machine-learning-and-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-5-another-10-books');\"><b>Another 10 Free Must-Read Books for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-6-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/best-data-visualization-techniques.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-7-best-data-viz');\"><b>Best Data Visualization Techniques for small and large data</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td> <td valign=\"top\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Shared</b></th></tr>\n<tr><td><ol class=\"three_ol\">\n<li> <a href=\"/2019/04/another-10-free-must-see-courses-machine-learning-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-1-another-10-courses');\"><b>Another 10 Free Must-See Courses for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-2-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/03/r-vs-python-data-visualization.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-3-r-py-viz');\"><b>R vs Python for Data Visualization</b></a>\n<li> <a href=\"/2019/03/deep-learning-toolset-overview.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-4-dl-toolset');\"><b>The Deep Learning Toolset \u2014 An Overview</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-5-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-6-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-7-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<!--#content end--></div>\n<div id=\"sidebar\">\n<div class=\"latn\">\n<h3><b><a href=\"/news/index.html\">Latest News</a></b></h3>\n<ul style=\"font-size:14px; margin-top:5px\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/datarobot-delivering-trusted-ai-microsoft.html\">Delivering Trusted AI with DataRobot and Microsoft</a><li> <a href=\"https://www.kdnuggets.com/2019/04/formulated-ai-data-production-landscape.html\">AI and the data production landscape</a><li> <a href=\"https://www.kdnuggets.com/2019/04/most-desired-skill-data-science.html\">The most desired skill in data science</a><li> <a href=\"https://www.kdnuggets.com/2019/04/projects-include-data-science-portfolio.html\">Projects to Include in a Data Science Portfolio</a><li> <a href=\"https://www.kdnuggets.com/2019/04/rework-meet-worlds-leading-ai-deep-learning-experts.html\">Meet the World\u2019s Leading AI &amp; Deep Learning ...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/problem-data-science-job-postings.html\">The problem with data science job postings</a></li></li></li></li></li></li></ul>\n</div>\n<div>\n<script type=\"text/javascript\">kda_sid_write(kda_sid_n);</script>\n</div>\n<br/><script src=\"/aps/sbm.js\" type=\"text/javascript\"></script>\n</div>\n</div><div class=\"breadcrumbs_bottom\">\n<div class=\"breadcumb\">\n<br>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2018/index.html\">2018</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/11/index.html\">Nov</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/11/tutorials.html\">Tutorials, Overviews</a> \u00bb Using a Keras Long Short-Term Memory (LSTM) Model to Predict Stock Prices (\u00a0<a href=\"/2018/n45.html\">18:n45</a>\u00a0)    </br></div>\n</div>\n<!--#content_wrapper end--></div>\n<br>\n<div id=\"footer\">\n<br/>\u00a9 2019 KDnuggets. <a href=\"/about/index.html\">About KDnuggets</a>. \u00a0<a href=\"/news/privacy-policy.html\">Privacy policy</a>. <a href=\"/terms-of-service.html\">Terms of Service</a><br/>\u00a0\n<div class=\"kd_bottom\">\n<div class=\"footer-container\">\n<div class=\"footer-news\">\n<a href=\"/news/subscribe.html\" onclick=\"_gaq.push(['_trackPageview','/x/bot/sub']);\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a>\n</div>\n<div class=\"footer-sm\">\n<a href=\"https://twitter.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/twt']);\" target=\"_blank\"><img height=\"32\" src=\"/images/tw_c48.png\" width=\"32\"/></a>\n<a href=\"https://facebook.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/fb']);\" target=\"_blank\"><img alt=\"Facebook\" height=\"32\" src=\"/images/fb_c48.png\" width=\"32\"/></a>\n<a href=\"https://www.linkedin.com/groups/54257\" onclick=\"_gaq.push(['_trackPageview','/x/bot/in']);\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"32\" src=\"/images/in_c48.png\" width=\"32\"/></a>\n</div>\n</div>\n<div class=\"close-footer\">X</div>\n</div>\n<script type=\"text/javascript\">\n  jQuery('.close-footer').click(\n      function(){       \n         jQuery('.kd_bottom').hide();\n      }\n   );\n</script> </div>\n<div class=\"clear\"><!--blank--></div>\n</br></div>\n<div style=\"display: none;\"><div id=\"boxzilla-box-82996-content\"><script type=\"text/javascript\">(function() {\n\tif (!window.mc4wp) {\n\t\twindow.mc4wp = {\n\t\t\tlisteners: [],\n\t\t\tforms    : {\n\t\t\t\ton: function (event, callback) {\n\t\t\t\t\twindow.mc4wp.listeners.push({\n\t\t\t\t\t\tevent   : event,\n\t\t\t\t\t\tcallback: callback\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})();\n</script><!-- MailChimp for WordPress v4.1.14 - https://wordpress.org/plugins/mailchimp-for-wp/ --><form class=\"mc4wp-form mc4wp-form-77281\" data-id=\"77281\" data-name=\"Subscribe to KDnuggets News\" id=\"mc4wp-form-1\" method=\"post\"><div class=\"mc4wp-form-fields\"><div class=\"header-container\">\n<img align=\"left\" src=\"/wp-content/uploads/envelope.png\"><a href=\"/news/subscribe.html\">Get KDnuggets, a leading newsletter on AI, \r\n  Data Science, and Machine Learning</a>\n</img></div>\n<div class=\"form-fields\">\n<div class=\"field-container\"><label>Email:</label><input maxlength=\"60\" name=\"EMAIL\" placeholder=\"Your email\" required=\"\" size=\"30\" type=\"email\"/></div>\n<div class=\"field-container submit-container\"><div class=\"form-button\" onclick=\"document.getElementById('mc4wp-form-1').submit()\">Sign Up</div></div>\n</div>\n<label style=\"display: none !important;\">Leave this field empty if you're human: <input autocomplete=\"off\" name=\"_mc4wp_honeypot\" tabindex=\"-1\" type=\"text\" value=\"\"/></label><input name=\"_mc4wp_timestamp\" type=\"hidden\" value=\"1556323826\"/><input name=\"_mc4wp_form_id\" type=\"hidden\" value=\"77281\"/><input name=\"_mc4wp_form_element_id\" type=\"hidden\" value=\"mc4wp-form-1\"/></div><div class=\"mc4wp-response\"></div></form><!-- / MailChimp for WordPress Plugin -->\n</div></div><script type=\"text/javascript\">(function() {function addEventListener(element,event,handler) {\n\tif(element.addEventListener) {\n\t\telement.addEventListener(event,handler, false);\n\t} else if(element.attachEvent){\n\t\telement.attachEvent('on'+event,handler);\n\t}\n}function maybePrefixUrlField() {\n\tif(this.value.trim() !== '' && this.value.indexOf('http') !== 0) {\n\t\tthis.value = \"http://\" + this.value;\n\t}\n}\n\nvar urlFields = document.querySelectorAll('.mc4wp-form input[type=\"url\"]');\nif( urlFields && urlFields.length > 0 ) {\n\tfor( var j=0; j < urlFields.length; j++ ) {\n\t\taddEventListener(urlFields[j],'blur',maybePrefixUrlField);\n\t}\n}/* test if browser supports date fields */\nvar testInput = document.createElement('input');\ntestInput.setAttribute('type', 'date');\nif( testInput.type !== 'date') {\n\n\t/* add placeholder & pattern to all date fields */\n\tvar dateFields = document.querySelectorAll('.mc4wp-form input[type=\"date\"]');\n\tfor(var i=0; i<dateFields.length; i++) {\n\t\tif(!dateFields[i].placeholder) {\n\t\t\tdateFields[i].placeholder = 'YYYY-MM-DD';\n\t\t}\n\t\tif(!dateFields[i].pattern) {\n\t\t\tdateFields[i].pattern = '[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])';\n\t\t}\n\t}\n}\n\n})();</script><script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_options = {\"testMode\":\"\",\"boxes\":[{\"id\":82996,\"icon\":\"&times;\",\"content\":\"\",\"css\":{\"background_color\":\"#eeee22\",\"width\":600,\"border_width\":2,\"border_style\":\"double\",\"position\":\"center\"},\"trigger\":{\"method\":\"time_on_page\",\"value\":\"3\"},\"animation\":\"fade\",\"cookie\":{\"triggered\":0,\"dismissed\":336},\"rehide\":true,\"position\":\"center\",\"screenWidthCondition\":{\"condition\":\"larger\",\"value\":500},\"closable\":true,\"post\":{\"id\":82996,\"title\":\"Subscribe to KDnuggets\",\"slug\":\"subscribe-to-kdnuggets\"}}]};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla/assets/js/script.min.js?ver=3.2.5\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_stats_config = {\"ajaxurl\":\"https:\\/\\/www.kdnuggets.com\\/wp-admin\\/admin-ajax.php?action=boxzilla_stats_track\"};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla-stats/assets/js/tracking.min.js?ver=1.0.4\" type=\"text/javascript\"></script>\n<script src=\"https://www.kdnuggets.com/wp-includes/js/wp-embed.min.js?ver=4.9.10\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar mc4wp_forms_config = [];\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/forms-api.min.js?ver=4.1.14\" type=\"text/javascript\"></script>\n<!--[if lte IE 9]>\n<script type='text/javascript' src='https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/third-party/placeholders.min.js?ver=4.1.14'></script>\n<![endif]-->\n<!--/.main_wrapper--></body></html>\n<script src=\"https://s7.addthis.com/js/300/addthis_widget.js#pubid=gpsaddthis\" type=\"text/javascript\"></script>\n\n\n<!-- Dynamic page generated in 0.614 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2019-04-26 20:10:26 -->\n<!-- Compression = gzip -->", "content_tokenized": ["comment", "derrick", "mwiti", "data", "analyst", "editor", "note", "this", "tutori", "illustr", "how", "get", "start", "forecast", "time", "seri", "with", "model", "stock", "market", "data", "great", "choic", "for", "this", "becaus", "quit", "regular", "and", "wide", "avail", "everyon", "pleas", "take", "this", "financi", "advic", "use", "make", "ani", "trade", "own", "this", "tutori", "build", "python", "deep", "learn", "model", "that", "will", "predict", "the", "futur", "behavior", "stock", "price", "assum", "that", "the", "reader", "familiar", "with", "the", "concept", "deep", "learn", "python", "especi", "long", "shortterm", "memori", "while", "predict", "the", "actual", "price", "stock", "uphil", "climb", "can", "build", "model", "that", "will", "predict", "whether", "the", "price", "will", "down", "the", "data", "and", "notebook", "use", "for", "this", "tutori", "can", "found", "here", "import", "note", "that", "there", "are", "alway", "other", "factor", "that", "affect", "the", "price", "stock", "such", "the", "polit", "atmospher", "and", "the", "market", "howev", "won", "focus", "those", "factor", "for", "this", "tutori", "introduct", "lstms", "are", "veri", "power", "sequenc", "predict", "problem", "becaus", "they", "abl", "store", "past", "inform", "this", "import", "our", "case", "becaus", "the", "previous", "price", "stock", "crucial", "predict", "futur", "price", "kick", "import", "numpi", "for", "scientif", "comput", "matplotlib", "for", "plot", "graph", "and", "panda", "aid", "load", "and", "manipul", "our", "dataset", "load", "the", "dataset", "the", "next", "step", "load", "our", "train", "dataset", "and", "select", "the", "open", "and", "high", "column", "that", "use", "our", "model", "check", "the", "head", "our", "dataset", "give", "glimps", "into", "the", "kind", "dataset", "work", "with", "the", "open", "column", "the", "start", "price", "while", "the", "close", "column", "the", "final", "price", "stock", "particular", "trade", "day", "the", "high", "and", "low", "column", "repres", "the", "highest", "and", "lowest", "price", "for", "certain", "day", "featur", "scale", "from", "previous", "experi", "with", "deep", "learn", "model", "know", "that", "have", "scale", "our", "data", "for", "optim", "perform", "our", "case", "use", "scikit", "learn", "minmaxscal", "and", "scale", "our", "dataset", "number", "between", "zero", "and", "one", "creat", "data", "with", "timestep", "lstms", "expect", "our", "data", "specif", "format", "usual", "array", "start", "creat", "data", "num", "timestep", "and", "convert", "into", "array", "use", "numpi", "next", "convert", "the", "data", "into", "dimens", "array", "with", "xtrain", "sampl", "num", "timestamp", "and", "one", "featur", "each", "step", "build", "the", "order", "build", "the", "need", "import", "coupl", "modul", "from", "kera", "sequenti", "for", "initi", "the", "neural", "network", "dens", "for", "dens", "connect", "neural", "network", "layer", "for", "the", "long", "shortterm", "memori", "layer", "dropout", "for", "dropout", "layer", "that", "prevent", "overfit", "add", "the", "layer", "and", "later", "add", "few", "dropout", "layer", "prevent", "overfit", "add", "the", "layer", "with", "the", "follow", "argument", "num", "unit", "which", "the", "dimension", "the", "output", "space", "returnsequencestru", "which", "determin", "whether", "return", "the", "last", "output", "the", "output", "sequenc", "the", "full", "sequenc", "inputshap", "the", "shape", "our", "train", "set", "when", "defin", "the", "dropout", "layer", "specifi", "num", "mean", "that", "num", "the", "layer", "will", "drop", "thereaft", "add", "the", "dens", "layer", "that", "specifi", "the", "output", "num", "unit", "after", "this", "compil", "our", "model", "use", "the", "popular", "adam", "optim", "and", "set", "the", "loss", "the", "meansquarrederror", "this", "will", "comput", "the", "mean", "the", "squar", "error", "next", "fit", "the", "model", "run", "num", "epoch", "with", "batch", "size", "num", "keep", "mind", "that", "depend", "the", "spec", "comput", "this", "might", "take", "few", "minut", "finish", "run", "predict", "futur", "stock", "use", "the", "test", "set", "first", "need", "import", "the", "test", "set", "that", "use", "make", "our", "predict", "order", "predict", "futur", "stock", "price", "need", "coupl", "thing", "after", "load", "the", "test", "set", "merg", "the", "train", "set", "and", "the", "test", "set", "the", "num", "axi", "set", "the", "time", "step", "num", "seen", "previous", "use", "minmaxscal", "transform", "the", "new", "dataset", "reshap", "the", "dataset", "done", "previous", "after", "make", "the", "predict", "use", "inversetransform", "get", "back", "the", "stock", "price", "normal", "readabl", "format", "plot", "the", "result", "final", "use", "matplotlib", "visual", "the", "result", "the", "predict", "stock", "price", "and", "the", "real", "stock", "price", "from", "the", "plot", "can", "see", "that", "the", "real", "stock", "price", "went", "while", "our", "model", "also", "predict", "that", "the", "price", "the", "stock", "will", "this", "clear", "show", "how", "power", "lstms", "are", "for", "analyz", "time", "seri", "and", "sequenti", "data", "conclus", "there", "are", "coupl", "other", "techniqu", "predict", "stock", "price", "such", "move", "averag", "linear", "regress", "knearest", "neighbour", "and", "prophet", "these", "are", "techniqu", "that", "one", "can", "test", "their", "own", "and", "compar", "their", "perform", "with", "the", "kera", "wish", "learn", "more", "about", "kera", "and", "deep", "learn", "can", "find", "articl", "that", "here", "and", "here", "discuss", "this", "post", "reddit", "and", "hacker", "news", "bio", "derrick", "mwiti", "data", "analyst", "writer", "and", "mentor", "driven", "deliv", "great", "result", "everi", "task", "and", "mentor", "lapid", "leader", "africa", "origin", "repost", "with", "permiss", "relat", "introduct", "deep", "learn", "with", "kera", "introduct", "pytorch", "for", "deep", "learn", "the", "kera", "num", "step", "workflow"], "timestamp_scraper": 1556368243.216848, "title": "Using a Keras Long Short-Term Memory (LSTM) Model to Predict Stock Prices", "read_time": 273.9, "content_html": "<div class=\"post\" id=\"post-\">\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p><b>By <a href=\"https://www.derrickmwiti.com\" rel=\"noopener noreferrer\" target=\"_blank\">Derrick Mwiti</a>, Data Analyst</b></p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/2000/1*1tDxGyGI4hnUf50a4LX5hQ.png\" width=\"99%\"/></p>\n<p><em>Editor\u2019s note: This tutorial illustrates how to get started forecasting time series with LSTM models. Stock market data is a great choice for this because it\u2019s quite regular and widely available to everyone. Please don\u2019t take this as financial advice or use it to make any trades of your own.</em></p>\n<p>In this tutorial, we\u2019ll build a Python deep learning model that will predict the future behavior of stock prices. We assume that the reader is familiar with the concepts of deep learning in Python, especially\u00a0<a href=\"/2018/11/introduction-pytorch-deep-learning.html\" rel=\"noopener noreferrer\" target=\"_blank\">Long Short-Term Memory.</a></p>\n<p>While predicting the actual price of a stock is an uphill climb, we can build a model that will predict whether the price will go up or down. The data and notebook used for this tutorial can be found\u00a0<a href=\"https://github.com/mwitiderrick/stockprice\" rel=\"noopener noreferrer\" target=\"_blank\">here</a>. It\u2019s important to note that there are always other factors that affect the prices of stocks, such as the political atmosphere and the\u00a0market. However, we won\u2019t focus on those factors for this tutorial.</p>\n<p>\u00a0</p>\n<h3><strong>Introduction</strong></h3>\n<p>\u00a0<br>\n<a href=\"https://heartbeat.fritz.ai/a-beginners-guide-to-implementing-long-short-term-memory-networks-lstm-eb7a2ff09a27\" rel=\"noopener noreferrer\" target=\"_blank\">LSTMs</a>\u00a0are very powerful in sequence prediction problems because they\u2019re able to store past information. This is important in our case because the previous price of a stock is crucial in predicting its future price.</br></p>\n<p>We\u2019ll kick of by importing\u00a0<a href=\"http://www.numpy.org/\" rel=\"noopener noreferrer\" target=\"_blank\">NumPy</a>\u00a0for scientific computation,\u00a0<a href=\"http://matplotlib.org/\" rel=\"noopener noreferrer\" target=\"_blank\">Matplotlib</a>\u00a0for plotting graphs, and\u00a0<a href=\"https://pandas.pydata.org/\" rel=\"noopener noreferrer\" target=\"_blank\">Pandas</a>\u00a0to aide in loading and manipulating our datasets.</p>\n<p><script src=\"https://gist.github.com/mwitiderrick/7d9e6ad05304919bf0e96446f7b09d84.js\"></script></p>\n<p>\u00a0</p>\n<h3><strong>Loading the\u00a0Dataset</strong></h3>\n<p>\u00a0<br>\nThe next step is to load in our training dataset and select the\u00a0<code>Open</code>\u00a0and\u00a0<code>High</code>columns that we\u2019ll use in our modeling.</br></p>\n<p><script src=\"https://gist.github.com/mwitiderrick/6f83b0b80161c89032e448cee4c3a775.js\"></script></p>\n<p>We check the head of our dataset to give us a glimpse into the kind of dataset we\u2019re working with.</p>\n<p><script src=\"https://gist.github.com/mwitiderrick/9342ad1d667f7b775816ff8c0d7085de.js\"></script></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/1600/1*-DN2G8VJsEvcFDsHuj17iw.png\" width=\"99%\"/></p>\n<p>The\u00a0<code>Open</code>\u00a0column is the starting price while the\u00a0<code>Close</code>\u00a0column is the final price of a stock on a particular trading day. The\u00a0<code>High</code>\u00a0and\u00a0<code>Low</code>\u00a0columns represent the highest and lowest prices for a certain day.</p>\n<p>\u00a0</p>\n<h3><strong>Feature Scaling</strong></h3>\n<p>\u00a0<br>\nFrom previous experience with deep learning models,\u00a0<strong>we know that we have to scale our data for optimal performance</strong>. In our case, we\u2019ll use\u00a0<a href=\"https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.MinMaxScaler.html\" rel=\"noopener noreferrer\" target=\"_blank\">Scikit- Learn\u2019s</a>\u00a0<code>MinMaxScaler</code>\u00a0and scale our dataset to numbers between zero and one.</br></p>\n<p><script src=\"https://gist.github.com/mwitiderrick/1b6e8e7cd5e2e201ac52ae8e469def1e.js\"></script></p>\n<p>\u00a0</p>\n<h3>Creating Data with Timesteps</h3>\n<p>\u00a0<br>\nLSTMs expect our data to be in a specific format, usually a 3D array. We start by creating data in 60 timesteps and converting it into an array using NumPy. Next, we convert the data into a 3D dimension array with\u00a0<code>X_train</code><em>\u00a0</em>samples, 60 timestamps, and one feature at each step.</br></p>\n<p><script src=\"https://gist.github.com/mwitiderrick/8da6324f29e33bf71a4c1125f647cffd.js\"></script></p>\n<p>\u00a0</p>\n<h3>Building the\u00a0LSTM</h3>\n<p>\u00a0<br/>\nIn order to build the LSTM, we need to import a couple of modules from\u00a0<a href=\"https://heartbeat.fritz.ai/introduction-to-deep-learning-with-keras-c7c3d14e1527\" rel=\"noopener noreferrer\" target=\"_blank\">Keras</a>:</p>\n<ol>\n<li><code>Sequential</code>\u00a0for initializing the neural network\n<li><code>Dense</code>\u00a0for adding a densely connected neural network layer\n<li><code>LSTM</code>\u00a0for adding the Long Short-Term Memory layer\n<li><code>Dropout</code>\u00a0for adding dropout layers that prevent overfitting\n</li></li></li></li></ol>\n<p><script src=\"https://gist.github.com/mwitiderrick/c67e9e6f534778b62101ce47a7fd144f.js\"></script></p>\n<p>We add the LSTM layer and later add a few\u00a0<code>Dropout</code>\u00a0layers to prevent overfitting. We add the LSTM layer with the following arguments:</p>\n<ol>\n<li><em>50 units</em>\u00a0which is the dimensionality of the output space\n<li><code>return_sequences=True</code><em>\u00a0</em>which determines whether to return the last output in the output sequence, or the full sequence\n<li><code>input_shape</code>\u00a0as the shape of our training set.\n</li></li></li></ol>\n<p>When defining the\u00a0<code>Dropout</code>\u00a0layers, we specify 0.2, meaning that 20% of the layers will be dropped. Thereafter, we add the\u00a0<code>Dense</code>\u00a0layer that specifies the output of 1 unit. After this, we compile our model using the popular adam optimizer and set the loss as the\u00a0<code>mean_squarred_error</code>. This will compute the mean of the squared errors. Next, we fit the model to run on 100 epochs with a batch size of 32. Keep in mind that, depending on the specs of your computer, this might take a few minutes to finish running.</p>\n<p><script src=\"https://gist.github.com/mwitiderrick/e9bb8249e7ff8b60ac6f419786ab8852.js\"></script></p>\n<p>\u00a0</p>\n<h3>Predicting Future Stock using the Test\u00a0Set</h3>\n<p>\u00a0<br/>\nFirst we need to import the test set that we\u2019ll use to make our predictions on.</p>\n<p><script src=\"https://gist.github.com/mwitiderrick/bdeb43af10c0dc6f160a2620f0e86a4a.js\"></script></p>\n<p>In order to predict future stock prices we need to do a couple of things after loading in the test set:</p>\n<ol>\n<li>Merge the training set and the test set on the 0 axis.\n<li>Set the time step as 60 (as seen previously)\n<li>Use\u00a0<code>MinMaxScaler</code>\u00a0to transform the new dataset\n<li>Reshape the dataset as done previously\n</li></li></li></li></ol>\n<p>After making the predictions we use\u00a0<code>inverse_transform</code>\u00a0to get back the stock prices in normal readable format.</p>\n<p><script src=\"https://gist.github.com/mwitiderrick/f702fe42ef144263efd68e9cbc6c2c3e.js\"></script></p>\n<p>\u00a0</p>\n<h3>Plotting the\u00a0Results</h3>\n<p>\u00a0<br/>\nFinally, we use Matplotlib to visualize the result of the predicted stock price and the real stock price.</p>\n<p><script src=\"https://gist.github.com/mwitiderrick/c2464fd91ceeecf69dac19a699f2f832.js\"></script></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/1600/1*VyYy57QmOUUZtZD2BplzEw.png\" width=\"99%\"/></p>\n<p>From the plot we can see that the real stock price went up while our model also predicted that the price of the stock will go up. This clearly shows how powerful LSTMs are for analyzing time series and sequential data.</p>\n<p>\u00a0</p>\n<h3>Conclusion</h3>\n<p>\u00a0<br/>\nThere are a couple of other techniques of predicting stock prices such as\u00a0<a href=\"https://www.investopedia.com/articles/active-trading/052014/how-use-moving-average-buy-stocks.asp\" rel=\"noopener noreferrer\" target=\"_blank\">moving averages</a>,\u00a0<a href=\"https://en.wikipedia.org/wiki/Linear_regression\" rel=\"noopener noreferrer\" target=\"_blank\">linear regression</a>,\u00a0<a href=\"https://heartbeat.fritz.ai/guide-to-implementing-k-nearest-neighbors-in-your-machine-learning-model-3b8420f16d93\" rel=\"noopener noreferrer\" target=\"_blank\">K-Nearest Neighbours</a>,\u00a0<a href=\"https://machinelearningmastery.com/arima-for-time-series-forecasting-with-python/\" rel=\"noopener noreferrer\" target=\"_blank\">ARIMA</a>\u00a0and\u00a0<a href=\"http://intelligentonlinetools.com/blog/2017/12/26/prediction-data-stock-price-prophet-report/\" rel=\"noopener noreferrer\" target=\"_blank\">Prophet</a>. These are techniques that one can test on their own and compare their performance with the Keras LSTM. If you wish to learn more about Keras and deep learning you can find my articles on that\u00a0<a href=\"https://heartbeat.fritz.ai/a-beginners-guide-to-convolutional-neural-networks-cnn-cf26c5ee17ed\" rel=\"noopener noreferrer\" target=\"_blank\">here</a>\u00a0and\u00a0<a href=\"https://heartbeat.fritz.ai/introduction-to-deep-learning-with-keras-c7c3d14e1527\" rel=\"noopener noreferrer\" target=\"_blank\">here</a>.</p>\n<p><strong>Discuss this post on\u00a0</strong><a href=\"https://www.reddit.com/r/MachinesLearn/comments/9vl927/using_a_keras_long_shortterm_memory_lstm_model_to/\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>Reddit</strong></a><strong>\u00a0and\u00a0</strong><a href=\"https://news.ycombinator.com/item?id=18415336\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>Hacker News</strong></a><strong>.</strong></p>\n<p>\u00a0<br/>\n<b>Bio: <a href=\"https://derrickmwiti.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Derrick Mwiti</a></b> is a data analyst, a writer, and a mentor. He is driven by delivering great results in every task, and is a mentor at Lapid Leaders Africa.</p>\n<p><a href=\"https://heartbeat.fritz.ai/using-a-keras-long-shortterm-memory-lstm-model-to-predict-stock-prices-a08c9f69aa74\" rel=\"noopener noreferrer\" target=\"_blank\">Original</a>. Reposted with permission.</p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2018/10/introduction-deep-learning-keras.html\">Introduction to Deep Learning with Keras</a>\n<li><a href=\"/2018/11/introduction-pytorch-deep-learning.html\">Introduction to PyTorch for Deep Learning</a>\n<li><a href=\"/2018/06/keras-4-step-workflow.html\">The Keras 4 Step Workflow</a>\n</li></li></li></ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p> <script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets';\n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div> ", "website": "kdnuggets"}