{"content": "By Matthew Mayo , KDnuggets. comments Francois Chollet, in his book \" Deep Learning with Python ,\" outlines early on an overview for developing neural networks with Keras. Generalizing from a simple MNIST example earlier in the book, Chollet simplifies the network building process, as relates directly to Keras, to 4 main steps. This is not a machine learning workflow, nor is it a complete framework for approaching a problem to solve with deep learning. These 4 steps pertain solely to the portion of your overall neural network machine learning workflow where Keras comes into play. These steps are as follows: Define the training data Define a neural network model Configure the learning process Train the model \u00a0 \u00a0 While Chollet then spends the rest of his book sufficiently filling in the necessary details to utilize it, let's take a preliminary look at the workflow by way of an example. \u00a0 1. Define the training data This first step is straightforward: you must define your input and target tensors. The more difficult data-related aspect -- which falls outside of the Keras-specific workflow -- is actually finding or curating, and then cleaning and otherwise preprocessing some data, which is a concern for any machine learning task. This is the one step of the model which does not generally concern tuning model hyperparameters. While our contrived example randomly generates some data to use, it captures the singular aspect of this step: define your input (X_train) and target (y_train) tensors. HTML generated using hilite.me # Define the training data \r import numpy as np \r \r X_train = np . random . )\r y_train = np . random . )\r \u00a0 \u00a0 2. Define a neural network model Keras has 2 ways to define a neural network: the Sequential model class and the Functional API. Both share the goal of defining a neural network, but take different approach. The Sequential class is used to define a linear stack of network layers which then, collectively, constitute a model. In our example below, we will use the Sequential constructor to create a model, which will then have layers added to it using the  method. The alternative manner for creating a model is via the Functional API . As opposed to the Sequential model's limitation of defining a network solely constructed of layers in a linear stack, the Functional API provides the flexibility required for more complex models. This complexity is best exemplified in the use cases of multi-input models, multi-output models, and the definition of graph-like models. The code in our example uses the Sequential class. It first calls the constructor, after which calls are made to the  method to add layers to the model. The first such call adds a layer of type Dense (\"Just your regular densely-connected NN layer\"). The Dense layer has an output of size 16, and an input of size INPUT_DIM, which is 32 in our case (check the above code snippet to confirm). Note that only the first layer of the model requires the input dimension to be explicitly stated; the following layers are able to infer from the previous linear stacked layer. Following standard practice, the rectified linear unit activation function is used for this layer. The next line of code defines the next Dense layer of our model. Note that the input size is not specified here. The output size of 5 is specified, however, which matches our number of presumed classes in our toy multi-class classification problem (check the above code snippet, again, to confirm). Since it is a multi-class classification problem we are solving with our network, the activation function for this layer is set to softmax. HTML generated using hilite.me # Define the neural network model \r from keras import models\r from keras import layers\r \r INPUT_DIM = X_train . shape[ 1 ]\r \r model = models . \r model . )\r model . )\r \u00a0 With those few lines, our Keras model is defined. The Sequential class'  method provides the following insight into our model: \u00a0 3. Configure the learning process With both the training data defined and model defined, it's time configure the learning process. This is accomplished with a call to the  method of the Sequential model class. Compilation requires 3 arguments: an optimizer , a loss function , and a list of metrics . In our example, set up as a multi-class classification problem, we will use the Adam optimizer, the categorical crossentropy loss function, and include solely the accuracy metric. HTML generated using hilite.me # Configure the learning process \r from keras import optimizers\r from keras import metrics\r \r model . \r \u00a0 The with the call made to  with these arguments, our model now has its learning process configured. \u00a0 4. Train the model At this point we have training data and a fully configured neural network to train with said data. All that is left is to pass the data to the model for the training process to commence, a process which is completed by iterating on the training data. Training begins by calling the  method. At minimum,  requires 2 arguments: input and target tensors. If nothing more is provided, a single iteration of the training data is performed, which generally won't do you any good. Therefore, it would be more conventional to, at a practical minimum, define a pair of additional arguments: batch_size and epochs. Our example includes these 4 total arguments. HTML generated using hilite.me # Train the model \r model . \r \u00a0 \u00a0 Note that the epoch accuracies are not particularly admirable, which makes sense given the random data which was used. Hopefully this has shed some light on the manner in which Keras can be used to solve plain old classification problems by using a straightforward 4 step process prescribed by the library's author and outlined herein. \u00a0 Related: Frameworks for Approaching the Machine Learning Process 7 Steps to Mastering Deep Learning with Keras Using Genetic Algorithm for Optimizing Recurrent Neural Networks", "title_html": "<h1 id=\"title\"><img align=\"right\" alt=\"Silver Blog\" src=\"/images/tkb-1806-s.png\" width=\"94\"/>The Keras 4 Step Workflow</h1> ", "url": "https://www.kdnuggets.com/2018/06/keras-4-step-workflow.html", "tfidf": {"tfidf": {"after": 1.02070207021, "relat": 2.47501753838, "matthew": 6.908616187989999, "fall": 1.6945244956799999, "then": 4.34631442064, "here": 2.42307692308, "multioutput": 1221.23076923, "differ": 1.23654490225, "contriv": 64.8, "xtrain": 3663.6923076900002, "clean": 6.86975335353, "addit": 1.24634950542, "would": 1.0828729281799998, "layer": 113.98153846155999, "previous": 1.42846859816, "preliminari": 12.6501992032, "function": 17.468091795, "class": 12.69910678578, "epoch": 76.695652174, "neural": 535.1460674157, "presum": 8.187725631769998, "python": 56.2978723404, "manner": 7.8632986627, "adam": 4.43092380687, "complet": 2.48043121632, "approach": 6.2266963001699995, "type": 2.0281042411900003, "toy": 15.383720930199999, "defin": 46.38116514859, "sole": 12.12525458247, "size": 9.9754948162, "spend": 4.15928739848, "rest": 1.9573418813999999, "particular": 1.3814827706200001, "complex": 4.6804245283, "creat": 2.4985835694, "noth": 3.46410648047, "singl": 1.60948905109, "insight": 11.8037174721, "light": 1.9102394417, "multiclass": 3663.6923076900002, "can": 1.17626139142, "given": 1.35426085473, "abl": 1.8208510150200001, "deep": 10.88391224862, "target": 9.656934306570001, "will": 3.67443295788, "overview": 12.6805111821, "step": 22.623441396479997, "constructor": 236.95522388, "task": 3.88641370869, "snippet": 271.384615384, "provid": 3.64658142561, "herein": 217.479452055, "otherwis": 3.72151898734, "linear": 55.5104895104, "portion": 3.3019966722099996, "next": 2.9901120632800002, "below": 2.25607503197, "earli": 1.12468121281, "perform": 1.5313977042500002, "but": 1.01632417899, "definit": 3.24, "our": 30.64864864867, "classif": 32.268292682920006, "output": 15.353965183760002, "confirm": 6.165436893200001, "where": 1.06715063521, "overal": 3.0442953020099996, "point": 1.25990000794, "tensor": 457.961538462, "graphlik": 1221.23076923, "best": 1.5828514456600002, "exampl": 10.53383886254, "has": 4.1745990008, "generat": 10.2637703646, "take": 2.27923336444, "pass": 1.61818367139, "use": 16.474220118079998, "follow": 4.18560506196, "now": 1.160780873, "sequenti": 277.1371571073, "configur": 69.02608695659998, "code": 15.522855047679998, "model": 68.9897287332, "good": 1.51981619759, "batchsiz": 1221.23076923, "play": 1.46390041494, "unit": 1.15394679459, "number": 1.10142916609, "hyperparamet": 1221.23076923, "optim": 46.1511627908, "time": 1.01127460348, "specifi": 13.841325196160001, "loss": 4.85059578368, "softmax": 1221.23076923, "not": 4.06269592476, "admir": 4.77043269231, "method": 12.857142857150002, "straightforward": 55.5104895104, "accomplish": 5.17302052786, "therefor": 2.33401940606, "the": 76.0, "exemplifi": 18.4604651163, "mayo": 49.7680250784, "chollet": 3663.6923076900002, "via": 2.2978723404299997, "metric": 66.7058823528, "categor": 15.0198675497, "captur": 2.88026124819, "util": 4.65981802172, "problem": 8.83374137545, "into": 2.03004922958, "argument": 25.4667949952, "build": 1.6341739578, "workflow": 1476.837209304, "recurr": 35.5964125561, "howev": 1.0945191313299998, "let": 3.48616600791, "crossentropi": 1221.23076923, "minimum": 12.05924800608, "kdnugget": 1221.23076923, "construct": 1.9320920043799998, "which": 13.067493984999999, "hilitem": 4884.92307692, "suffici": 4.3117870722400005, "activ": 2.92807082258, "practic": 3.40869565218, "simpl": 3.3981164383599998, "sens": 2.8365195640499996, "algorithm": 27.9507042254, "one": 1.00627495722, "preprocess": 1221.23076923, "hope": 2.50884955752, "begin": 1.3305397251100002, "dimens": 8.25585023401, "develop": 1.1955719557200002, "compil": 5.696447793330001, "such": 1.06151377374, "accuraci": 25.5241157556, "explicit": 5.819648093840001, "those": 1.19548192771, "with": 11.013180298889997, "network": 33.71801993144, "random": 28.7608695652, "commenc": 7.23280182232, "convent": 2.64159733777, "abov": 3.80765079746, "some": 3.1211009174399997, "outsid": 1.67450690855, "collect": 1.64109985528, "both": 2.10431440122, "pertain": 20.9722589168, "add": 9.22486926206, "that": 4.015936255, "outlin": 12.76205787782, "includ": 2.0381282495599997, "kera": 9191.368421048, "altern": 2.1390460792200003, "set": 2.37415881562, "numpi": 1221.23076923, "ani": 2.26767604628, "denselyconnect": 1221.23076923, "prescrib": 16.3333333333, "from": 6.00340328982, "process": 16.9524826482, "limit": 1.5186531471200002, "concern": 3.7705735660800004, "detail": 2.26186066391, "num": 16.00504064016, "left": 1.4398693996, "for": 10.003150400100001, "difficult": 2.48957189901, "regular": 2.09418282548, "all": 1.01146788991, "match": 3.5676404494400002, "kerasspecif": 1221.23076923, "fulli": 2.79015817223, "simplifi": 12.109839816900001, "book": 4.30243902438, "constitut": 2.79802608389, "ytrain": 2442.46153846, "are": 5.1495296789000005, "shed": 16.835630965, "solv": 21.80769230769, "case": 2.96997474512, "rectifi": 54.3698630137, "datarel": 1221.23076923, "author": 1.4229631621399998, "pair": 4.36873968079, "look": 1.9086318826599997, "standard": 1.8915763135900003, "call": 6.4059179556, "dens": 31.2519685038, "more": 4.0686827268, "and": 14.000881889819999, "list": 1.36321483771, "shape": 3.20338983051, "these": 4.29661705008, "said": 1.54751925139, "general": 3.3654607122600004, "made": 2.14077669902, "tune": 10.4173228346, "master": 3.15125049623, "librari": 2.68266306185, "iter": 74.8867924528, "state": 1.0477133240899998, "curat": 28.0991150442, "singular": 16.8, "doe": 1.70581282905, "fill": 3.33809924306, "old": 1.52844902282, "infer": 21.1398135819, "make": 1.0762660158600001, "way": 2.4381478922, "onli": 1.0256476516600002, "check": 13.0131147541, "train": 25.1754086363, "few": 1.31729173581, "this": 10.037936267100001, "necessari": 2.8421052631599997, "goal": 3.28152128979, "genet": 10.2558139535, "total": 1.5460122699399999, "framework": 16.400826446279996, "multiinput": 1221.23076923, "his": 2.1887364720400004, "comment": 3.05954904606, "data": 40.51722671208, "note": 4.27348586811, "oppos": 2.51282051282, "just": 1.33580143037, "machin": 16.09733840304, "again": 1.50883862384, "come": 1.32831325301, "must": 1.9220338983099996, "aspect": 6.1786339754799995, "line": 2.8365195640599996, "sinc": 1.08368600683, "requir": 6.11379609128, "stack": 58.9455445545, "direct": 1.22226499346, "import": 6.700996116850001, "first": 4.03046458492, "earlier": 1.86776470588, "input": 73.2175249806, "share": 1.8566249561500001, "have": 2.0297896822799997, "while": 2.0883977900599997, "plain": 5.49913404919, "flexibl": 9.68639414277, "main": 1.25303867403, "find": 1.7294117647099998, "learn": 27.873006583800002, "actual": 1.87482286254, "francoi": 96.80487804879999, "nor": 3.3479544496}, "logtfidf": {"after": 0.020490694648099998, "relat": 0.42620060330799997, "matthew": 1.9327693554900003, "fall": 0.527402167952, "then": 0.33213546092359997, "here": 0.8850381883700001, "multioutput": 7.1076144564399995, "differ": 0.212321121312, "contriv": 4.17130560336, "xtrain": 21.322843369319997, "clean": 1.9271282036300001, "addit": 0.220218882972, "would": 0.0796176279647, "layer": 29.357708272900005, "previous": 0.356602960063, "preliminari": 2.5376729623400003, "function": 6.401260191157999, "class": 4.498633139598001, "epoch": 7.293395680160001, "neural": 36.7678363995, "presum": 2.1026361586599998, "python": 4.03065674296, "manner": 2.73811803006, "adam": 1.4886080966, "complet": 0.430570484094, "approach": 2.1907008437430004, "type": 0.707101485387, "toy": 2.73330986786, "defin": 17.06256185725, "sole": 4.190034433289999, "size": 3.6553488242439998, "spend": 1.42534376116, "rest": 0.671587369833, "particular": 0.323157393804, "complex": 1.7004832728619999, "creat": 0.445153637028, "noth": 1.24245472939, "singl": 0.475916769059, "insight": 2.46841452187, "light": 0.64722859635, "multiclass": 21.322843369319997, "can": 0.162341096394, "given": 0.303255810831, "abl": 0.599303982475, "deep": 3.8660204094, "target": 3.5071918488600007, "will": 0.6083596047450001, "overview": 2.54006626224, "step": 8.31636045584, "constructor": 9.5494480279, "task": 1.35748680661, "snippet": 9.82077975822, "provid": 0.585533532975, "herein": 5.38210437275, "otherwis": 1.3141319148700001, "linear": 10.52111056784, "portion": 1.1945273376899999, "next": 0.804327370998, "below": 0.813626591936, "earli": 0.117499629108, "perform": 0.42618085058, "but": 0.0161923720719, "definit": 1.1755733298, "our": 11.149309784366, "classif": 8.35116294516, "output": 4.07645315654, "confirm": 2.2516236405, "where": 0.0649921387457, "overal": 1.1132694464700001, "point": 0.23103235903299998, "tensor": 15.08451874428, "graphlik": 7.1076144564399995, "best": 0.459227932947, "exampl": 2.8607787249929997, "has": 0.1708957794192, "generat": 3.59591170868, "take": 0.261383924394, "pass": 0.48130432974, "use": 0.4673283157056, "follow": 0.18142764437679998, "now": 0.149092945021, "sequenti": 25.7502167062, "configur": 14.656350214499998, "code": 5.42407638388, "model": 24.335852412663, "good": 0.418589404907, "batchsiz": 7.1076144564399995, "play": 0.38110439064199997, "unit": 0.143188061817, "number": 0.0966085784186, "hyperparamet": 7.1076144564399995, "optim": 9.782511181639999, "time": 0.0112115188626, "specifi": 3.86902303242, "loss": 1.771908717684, "softmax": 7.1076144564399995, "not": 0.06220965203, "admir": 1.5624370119600002, "method": 4.7223080442050005, "straightforward": 6.6468496450400005, "accomplish": 1.64345675928, "therefor": 0.847591848336, "the": 0.0, "exemplifi": 2.9156314246599995, "mayo": 3.90737271112, "chollet": 21.322843369319997, "via": 0.831983625414, "metric": 9.305042554679998, "categor": 2.70937382803, "captur": 1.0578810012100002, "util": 1.5389763962399998, "problem": 2.8457036213649998, "into": 0.0298257264574, "argument": 8.139687670699999, "build": 0.491137452091, "workflow": 23.64545479284, "recurr": 3.5722448618800002, "howev": 0.0903151173475, "let": 1.2488025672799998, "crossentropi": 7.1076144564399995, "minimum": 3.59336930882, "kdnugget": 7.1076144564399995, "construct": 0.658603355972, "which": 0.06731937999059, "hilitem": 28.430457825759998, "suffici": 1.4613524521099999, "activ": 0.762393206568, "practic": 1.066365061734, "simpl": 1.2232212893899999, "sens": 1.04257779501, "algorithm": 3.33044239518, "one": 0.0062553516455, "preprocess": 7.1076144564399995, "hope": 0.919824304455, "begin": 0.285584668268, "dimens": 2.11092206831, "develop": 0.178624694913, "compil": 1.7398427864200001, "such": 0.059695977806, "accuraci": 5.0929530812, "explicit": 1.7612397949400003, "those": 0.17854939087299998, "with": 0.01317240884729, "network": 12.390079689675998, "random": 7.890885626039999, "commenc": 1.9786264883900002, "convent": 0.971383786374, "abov": 1.287730459632, "some": 0.11872052719350001, "outsid": 0.515518738985, "collect": 0.49536666052, "both": 0.10168506677860001, "pertain": 3.04320056047, "add": 3.05751167426, "that": 0.01590459351856, "outlin": 3.70665872008, "includ": 0.037769362781, "kera": 74.00937318214, "altern": 0.760359972282, "set": 0.342992022578, "numpi": 7.1076144564399995, "ani": 0.251216716732, "denselyconnect": 7.1076144564399995, "prescrib": 2.7932080094400003, "from": 0.0034023250131959997, "process": 5.2782919902500005, "limit": 0.41782385463, "concern": 1.268159897746, "detail": 0.816187777173, "num": 0.005039846326352001, "left": 0.364552414753, "for": 0.0031499039539700006, "difficult": 0.912110767588, "regular": 0.739163417847, "all": 0.011402632097799998, "match": 1.27190443874, "kerasspecif": 7.1076144564399995, "fulli": 1.02609828678, "simplifi": 2.4940183301400003, "book": 1.0817093646, "constitut": 1.0289141985299999, "ytrain": 14.215228912879999, "are": 0.1473373679135, "shed": 2.82349753127, "solv": 5.950951431120001, "case": 0.790812537778, "rectifi": 3.9958100116300006, "datarel": 7.1076144564399995, "author": 0.35274143130999996, "pair": 1.47447456495, "look": 0.6463866936, "standard": 0.63741050982, "call": 0.3927766466928, "dens": 7.03041023298, "more": 0.06809972639999999, "and": 0.0008818619888904, "list": 0.309845761506, "shape": 1.16420957115, "these": 0.2861344776032, "said": 0.436653165815, "general": 0.344857734189, "made": 0.1360430521946, "tune": 2.3434700776599997, "master": 1.14779935699, "librari": 0.986809980943, "iter": 7.24566071734, "state": 0.0466100027668, "curat": 3.33573808276, "singular": 2.82137888641, "doe": 0.5340417297169999, "fill": 1.20540155609, "old": 0.424253510675, "infer": 3.0511581621399997, "make": 0.07349765782289999, "way": 0.39618301987000004, "onli": 0.025324268329099998, "check": 3.74562099124, "train": 8.591938066907, "few": 0.275577913653, "this": 0.037864490525, "necessari": 1.0445450673999999, "goal": 1.18830712273, "genet": 2.32784475975, "total": 0.43567888670500005, "framework": 4.20836909214, "multiinput": 7.1076144564399995, "his": 0.1803544867282, "comment": 1.11826753454, "data": 14.6018470176, "note": 1.061452704249, "oppos": 0.921405832541, "just": 0.289531434109, "machin": 5.56943832248, "again": 0.411340231612, "come": 0.28390990653000003, "must": 0.653383947388, "aspect": 2.25590005382, "line": 0.698861228904, "sinc": 0.0803681994577, "requir": 1.6970140427, "stack": 8.93400526614, "direct": 0.200705689496, "import": 1.46409138533, "first": 0.030349159248639998, "earlier": 0.624742371425, "input": 15.01005201234, "share": 0.618760299747, "have": 0.0295700046824, "while": 0.08649996758760002, "plain": 1.70459063424, "flexibl": 2.2707222351599996, "main": 0.225571540588, "find": 0.547781330288, "learn": 10.11302477694, "actual": 0.628514181648, "francoi": 4.572697386080001, "nor": 1.2083495472799999}, "logidf": {"after": 0.020490694648099998, "relat": 0.21310030165399999, "matthew": 1.9327693554900003, "fall": 0.527402167952, "then": 0.08303386523089999, "here": 0.8850381883700001, "multioutput": 7.1076144564399995, "differ": 0.212321121312, "contriv": 4.17130560336, "xtrain": 7.1076144564399995, "clean": 1.9271282036300001, "addit": 0.220218882972, "would": 0.0796176279647, "layer": 2.0969791623500003, "previous": 0.356602960063, "preliminari": 2.5376729623400003, "function": 0.914465741594, "class": 0.7497721899330001, "epoch": 3.6466978400800003, "neural": 4.0853151555, "presum": 2.1026361586599998, "python": 4.03065674296, "manner": 1.36905901503, "adam": 1.4886080966, "complet": 0.215285242047, "approach": 0.7302336145810001, "type": 0.707101485387, "toy": 2.73330986786, "defin": 1.00368010925, "sole": 1.3966781444299998, "size": 0.9138372060609999, "spend": 1.42534376116, "rest": 0.671587369833, "particular": 0.323157393804, "complex": 0.8502416364309999, "creat": 0.222576818514, "noth": 1.24245472939, "singl": 0.475916769059, "insight": 2.46841452187, "light": 0.64722859635, "multiclass": 7.1076144564399995, "can": 0.162341096394, "given": 0.303255810831, "abl": 0.599303982475, "deep": 1.2886734698, "target": 1.1690639496200002, "will": 0.202786534915, "overview": 2.54006626224, "step": 1.03954505698, "constructor": 4.77472401395, "task": 1.35748680661, "snippet": 4.91038987911, "provid": 0.19517784432500002, "herein": 5.38210437275, "otherwis": 1.3141319148700001, "linear": 2.63027764196, "portion": 1.1945273376899999, "next": 0.402163685499, "below": 0.813626591936, "earli": 0.117499629108, "perform": 0.42618085058, "but": 0.0161923720719, "definit": 1.1755733298, "our": 0.8576392141820001, "classif": 2.08779073629, "output": 2.03822657827, "confirm": 1.12581182025, "where": 0.0649921387457, "overal": 1.1132694464700001, "point": 0.23103235903299998, "tensor": 5.02817291476, "graphlik": 7.1076144564399995, "best": 0.459227932947, "exampl": 0.40868267499899996, "has": 0.0427239448548, "generat": 0.719182341736, "take": 0.130691962197, "pass": 0.48130432974, "use": 0.0292080197316, "follow": 0.045356911094199995, "now": 0.149092945021, "sequenti": 3.6786023866, "configur": 2.4427250357499997, "code": 1.35601909597, "model": 0.7374500731110001, "good": 0.418589404907, "batchsiz": 7.1076144564399995, "play": 0.38110439064199997, "unit": 0.143188061817, "number": 0.0966085784186, "hyperparamet": 7.1076144564399995, "optim": 2.4456277954099996, "time": 0.0112115188626, "specifi": 1.93451151621, "loss": 0.885954358842, "softmax": 7.1076144564399995, "not": 0.0155524130075, "admir": 1.5624370119600002, "method": 0.944461608841, "straightforward": 3.3234248225200003, "accomplish": 1.64345675928, "therefor": 0.847591848336, "the": 0.0, "exemplifi": 2.9156314246599995, "mayo": 3.90737271112, "chollet": 7.1076144564399995, "via": 0.831983625414, "metric": 3.1016808515599994, "categor": 2.70937382803, "captur": 1.0578810012100002, "util": 1.5389763962399998, "problem": 0.569140724273, "into": 0.0149128632287, "argument": 1.62793753414, "build": 0.491137452091, "workflow": 5.91136369821, "recurr": 3.5722448618800002, "howev": 0.0903151173475, "let": 1.2488025672799998, "crossentropi": 7.1076144564399995, "minimum": 1.79668465441, "kdnugget": 7.1076144564399995, "construct": 0.658603355972, "which": 0.00517841384543, "hilitem": 7.1076144564399995, "suffici": 1.4613524521099999, "activ": 0.381196603284, "practic": 0.533182530867, "simpl": 1.2232212893899999, "sens": 1.04257779501, "algorithm": 3.33044239518, "one": 0.0062553516455, "preprocess": 7.1076144564399995, "hope": 0.919824304455, "begin": 0.285584668268, "dimens": 2.11092206831, "develop": 0.178624694913, "compil": 1.7398427864200001, "such": 0.059695977806, "accuraci": 2.5464765406, "explicit": 1.7612397949400003, "those": 0.17854939087299998, "with": 0.00119749171339, "network": 0.9530830530519999, "random": 1.9727214065099998, "commenc": 1.9786264883900002, "convent": 0.971383786374, "abov": 0.643865229816, "some": 0.0395735090645, "outsid": 0.515518738985, "collect": 0.49536666052, "both": 0.050842533389300004, "pertain": 3.04320056047, "add": 1.52875583713, "that": 0.00397614837964, "outlin": 1.85332936004, "includ": 0.0188846813905, "kera": 6.72812483474, "altern": 0.760359972282, "set": 0.171496011289, "numpi": 7.1076144564399995, "ani": 0.125608358366, "denselyconnect": 7.1076144564399995, "prescrib": 2.7932080094400003, "from": 0.000567054168866, "process": 0.527829199025, "limit": 0.41782385463, "concern": 0.634079948873, "detail": 0.816187777173, "num": 0.00031499039539700004, "left": 0.364552414753, "for": 0.00031499039539700004, "difficult": 0.912110767588, "regular": 0.739163417847, "all": 0.011402632097799998, "match": 1.27190443874, "kerasspecif": 7.1076144564399995, "fulli": 1.02609828678, "simplifi": 2.4940183301400003, "book": 0.3605697882, "constitut": 1.0289141985299999, "ytrain": 7.1076144564399995, "are": 0.0294674735827, "shed": 2.82349753127, "solv": 1.9836504770400003, "case": 0.395406268889, "rectifi": 3.9958100116300006, "datarel": 7.1076144564399995, "author": 0.35274143130999996, "pair": 1.47447456495, "look": 0.6463866936, "standard": 0.63741050982, "call": 0.0654627744488, "dens": 2.3434700776599997, "more": 0.017024931599999998, "and": 6.29901420636e-05, "list": 0.309845761506, "shape": 1.16420957115, "these": 0.0715336194008, "said": 0.436653165815, "general": 0.114952578063, "made": 0.0680215260973, "tune": 2.3434700776599997, "master": 1.14779935699, "librari": 0.986809980943, "iter": 3.62283035867, "state": 0.0466100027668, "curat": 3.33573808276, "singular": 2.82137888641, "doe": 0.5340417297169999, "fill": 1.20540155609, "old": 0.424253510675, "infer": 3.0511581621399997, "make": 0.07349765782289999, "way": 0.19809150993500002, "onli": 0.025324268329099998, "check": 1.87281049562, "train": 0.660918312839, "few": 0.275577913653, "this": 0.0037864490525, "necessari": 1.0445450673999999, "goal": 1.18830712273, "genet": 2.32784475975, "total": 0.43567888670500005, "framework": 2.10418454607, "multiinput": 7.1076144564399995, "his": 0.0901772433641, "comment": 1.11826753454, "data": 1.2168205848, "note": 0.353817568083, "oppos": 0.921405832541, "just": 0.289531434109, "machin": 1.39235958062, "again": 0.411340231612, "come": 0.28390990653000003, "must": 0.653383947388, "aspect": 1.12795002691, "line": 0.349430614452, "sinc": 0.0803681994577, "requir": 0.424253510675, "stack": 2.97800175538, "direct": 0.200705689496, "import": 0.292818277066, "first": 0.0075872898121599995, "earlier": 0.624742371425, "input": 2.50167533539, "share": 0.618760299747, "have": 0.0147850023412, "while": 0.04324998379380001, "plain": 1.70459063424, "flexibl": 2.2707222351599996, "main": 0.225571540588, "find": 0.547781330288, "learn": 0.842752064745, "actual": 0.628514181648, "francoi": 4.572697386080001, "nor": 1.2083495472799999}, "freq": {"after": 1, "relat": 2, "matthew": 1, "fall": 1, "then": 4, "here": 1, "multioutput": 1, "differ": 1, "contriv": 1, "xtrain": 3, "clean": 1, "addit": 1, "would": 1, "layer": 14, "previous": 1, "preliminari": 1, "function": 7, "class": 6, "epoch": 2, "neural": 9, "presum": 1, "python": 1, "manner": 2, "adam": 1, "complet": 2, "approach": 3, "type": 1, "toy": 1, "defin": 17, "sole": 3, "size": 4, "spend": 1, "rest": 1, "particular": 1, "complex": 2, "creat": 2, "noth": 1, "singl": 1, "insight": 1, "light": 1, "multiclass": 3, "can": 1, "given": 1, "abl": 1, "deep": 3, "target": 3, "will": 3, "overview": 1, "step": 8, "constructor": 2, "task": 1, "snippet": 2, "provid": 3, "herein": 1, "otherwis": 1, "linear": 4, "portion": 1, "next": 2, "below": 1, "earli": 1, "perform": 1, "but": 1, "definit": 1, "our": 13, "classif": 4, "output": 2, "confirm": 2, "where": 1, "overal": 1, "point": 1, "tensor": 3, "graphlik": 1, "best": 1, "exampl": 7, "has": 4, "generat": 5, "take": 2, "pass": 1, "use": 16, "follow": 4, "now": 1, "sequenti": 7, "configur": 6, "code": 4, "model": 33, "good": 1, "batchsiz": 1, "play": 1, "unit": 1, "number": 1, "hyperparamet": 1, "optim": 4, "time": 1, "specifi": 2, "loss": 2, "softmax": 1, "not": 4, "admir": 1, "method": 5, "straightforward": 2, "accomplish": 1, "therefor": 1, "the": 76, "exemplifi": 1, "mayo": 1, "chollet": 3, "via": 1, "metric": 3, "categor": 1, "captur": 1, "util": 1, "problem": 5, "into": 2, "argument": 5, "build": 1, "workflow": 4, "recurr": 1, "howev": 1, "let": 1, "crossentropi": 1, "minimum": 2, "kdnugget": 1, "construct": 1, "which": 13, "hilitem": 4, "suffici": 1, "activ": 2, "practic": 2, "simpl": 1, "sens": 1, "algorithm": 1, "one": 1, "preprocess": 1, "hope": 1, "begin": 1, "dimens": 1, "develop": 1, "compil": 1, "such": 1, "accuraci": 2, "explicit": 1, "those": 1, "with": 11, "network": 13, "random": 4, "commenc": 1, "convent": 1, "abov": 2, "some": 3, "outsid": 1, "collect": 1, "both": 2, "pertain": 1, "add": 2, "that": 4, "outlin": 2, "includ": 2, "kera": 11, "altern": 1, "set": 2, "numpi": 1, "ani": 2, "denselyconnect": 1, "prescrib": 1, "from": 6, "process": 10, "limit": 1, "concern": 2, "detail": 1, "num": 16, "left": 1, "for": 10, "difficult": 1, "regular": 1, "all": 1, "match": 1, "kerasspecif": 1, "fulli": 1, "simplifi": 1, "book": 3, "constitut": 1, "ytrain": 2, "are": 5, "shed": 1, "solv": 3, "case": 2, "rectifi": 1, "datarel": 1, "author": 1, "pair": 1, "look": 1, "standard": 1, "call": 6, "dens": 3, "more": 4, "and": 14, "list": 1, "shape": 1, "these": 4, "said": 1, "general": 3, "made": 2, "tune": 1, "master": 1, "librari": 1, "iter": 2, "state": 1, "curat": 1, "singular": 1, "doe": 1, "fill": 1, "old": 1, "infer": 1, "make": 1, "way": 2, "onli": 1, "check": 2, "train": 13, "few": 1, "this": 10, "necessari": 1, "goal": 1, "genet": 1, "total": 1, "framework": 2, "multiinput": 1, "his": 2, "comment": 1, "data": 12, "note": 3, "oppos": 1, "just": 1, "machin": 4, "again": 1, "come": 1, "must": 1, "aspect": 2, "line": 2, "sinc": 1, "requir": 4, "stack": 3, "direct": 1, "import": 5, "first": 4, "earlier": 1, "input": 6, "share": 1, "have": 2, "while": 2, "plain": 1, "flexibl": 1, "main": 1, "find": 1, "learn": 12, "actual": 1, "francoi": 1, "nor": 1}, "idf": {"after": 1.02070207021, "relat": 1.23750876919, "matthew": 6.908616187989999, "fall": 1.6945244956799999, "then": 1.08657860516, "here": 2.42307692308, "multioutput": 1221.23076923, "differ": 1.23654490225, "contriv": 64.8, "xtrain": 1221.23076923, "clean": 6.86975335353, "addit": 1.24634950542, "would": 1.0828729281799998, "layer": 8.14153846154, "previous": 1.42846859816, "preliminari": 12.6501992032, "function": 2.495441685, "class": 2.11651779763, "epoch": 38.347826087, "neural": 59.4606741573, "presum": 8.187725631769998, "python": 56.2978723404, "manner": 3.93164933135, "adam": 4.43092380687, "complet": 1.24021560816, "approach": 2.07556543339, "type": 2.0281042411900003, "toy": 15.383720930199999, "defin": 2.72830383227, "sole": 4.04175152749, "size": 2.49387370405, "spend": 4.15928739848, "rest": 1.9573418813999999, "particular": 1.3814827706200001, "complex": 2.34021226415, "creat": 1.2492917847, "noth": 3.46410648047, "singl": 1.60948905109, "insight": 11.8037174721, "light": 1.9102394417, "multiclass": 1221.23076923, "can": 1.17626139142, "given": 1.35426085473, "abl": 1.8208510150200001, "deep": 3.6279707495399998, "target": 3.2189781021900004, "will": 1.22481098596, "overview": 12.6805111821, "step": 2.8279301745599996, "constructor": 118.47761194, "task": 3.88641370869, "snippet": 135.692307692, "provid": 1.21552714187, "herein": 217.479452055, "otherwis": 3.72151898734, "linear": 13.8776223776, "portion": 3.3019966722099996, "next": 1.4950560316400001, "below": 2.25607503197, "earli": 1.12468121281, "perform": 1.5313977042500002, "but": 1.01632417899, "definit": 3.24, "our": 2.35758835759, "classif": 8.067073170730001, "output": 7.676982591880001, "confirm": 3.0827184466000004, "where": 1.06715063521, "overal": 3.0442953020099996, "point": 1.25990000794, "tensor": 152.653846154, "graphlik": 1221.23076923, "best": 1.5828514456600002, "exampl": 1.50483412322, "has": 1.0436497502, "generat": 2.05275407292, "take": 1.13961668222, "pass": 1.61818367139, "use": 1.0296387573799999, "follow": 1.04640126549, "now": 1.160780873, "sequenti": 39.5910224439, "configur": 11.504347826099998, "code": 3.8807137619199996, "model": 2.0905978404, "good": 1.51981619759, "batchsiz": 1221.23076923, "play": 1.46390041494, "unit": 1.15394679459, "number": 1.10142916609, "hyperparamet": 1221.23076923, "optim": 11.5377906977, "time": 1.01127460348, "specifi": 6.920662598080001, "loss": 2.42529789184, "softmax": 1221.23076923, "not": 1.01567398119, "admir": 4.77043269231, "method": 2.5714285714300003, "straightforward": 27.7552447552, "accomplish": 5.17302052786, "therefor": 2.33401940606, "the": 1.0, "exemplifi": 18.4604651163, "mayo": 49.7680250784, "chollet": 1221.23076923, "via": 2.2978723404299997, "metric": 22.235294117600002, "categor": 15.0198675497, "captur": 2.88026124819, "util": 4.65981802172, "problem": 1.76674827509, "into": 1.01502461479, "argument": 5.09335899904, "build": 1.6341739578, "workflow": 369.209302326, "recurr": 35.5964125561, "howev": 1.0945191313299998, "let": 3.48616600791, "crossentropi": 1221.23076923, "minimum": 6.02962400304, "kdnugget": 1221.23076923, "construct": 1.9320920043799998, "which": 1.005191845, "hilitem": 1221.23076923, "suffici": 4.3117870722400005, "activ": 1.46403541129, "practic": 1.70434782609, "simpl": 3.3981164383599998, "sens": 2.8365195640499996, "algorithm": 27.9507042254, "one": 1.00627495722, "preprocess": 1221.23076923, "hope": 2.50884955752, "begin": 1.3305397251100002, "dimens": 8.25585023401, "develop": 1.1955719557200002, "compil": 5.696447793330001, "such": 1.06151377374, "accuraci": 12.7620578778, "explicit": 5.819648093840001, "those": 1.19548192771, "with": 1.0011982089899998, "network": 2.59369384088, "random": 7.1902173913, "commenc": 7.23280182232, "convent": 2.64159733777, "abov": 1.90382539873, "some": 1.04036697248, "outsid": 1.67450690855, "collect": 1.64109985528, "both": 1.05215720061, "pertain": 20.9722589168, "add": 4.61243463103, "that": 1.00398406375, "outlin": 6.38102893891, "includ": 1.0190641247799999, "kera": 835.5789473680001, "altern": 2.1390460792200003, "set": 1.18707940781, "numpi": 1221.23076923, "ani": 1.13383802314, "denselyconnect": 1221.23076923, "prescrib": 16.3333333333, "from": 1.00056721497, "process": 1.69524826482, "limit": 1.5186531471200002, "concern": 1.8852867830400002, "detail": 2.26186066391, "num": 1.00031504001, "left": 1.4398693996, "for": 1.00031504001, "difficult": 2.48957189901, "regular": 2.09418282548, "all": 1.01146788991, "match": 3.5676404494400002, "kerasspecif": 1221.23076923, "fulli": 2.79015817223, "simplifi": 12.109839816900001, "book": 1.43414634146, "constitut": 2.79802608389, "ytrain": 1221.23076923, "are": 1.02990593578, "shed": 16.835630965, "solv": 7.26923076923, "case": 1.48498737256, "rectifi": 54.3698630137, "datarel": 1221.23076923, "author": 1.4229631621399998, "pair": 4.36873968079, "look": 1.9086318826599997, "standard": 1.8915763135900003, "call": 1.0676529926, "dens": 10.4173228346, "more": 1.0171706817, "and": 1.00006299213, "list": 1.36321483771, "shape": 3.20338983051, "these": 1.07415426252, "said": 1.54751925139, "general": 1.1218202374200001, "made": 1.07038834951, "tune": 10.4173228346, "master": 3.15125049623, "librari": 2.68266306185, "iter": 37.4433962264, "state": 1.0477133240899998, "curat": 28.0991150442, "singular": 16.8, "doe": 1.70581282905, "fill": 3.33809924306, "old": 1.52844902282, "infer": 21.1398135819, "make": 1.0762660158600001, "way": 1.2190739461, "onli": 1.0256476516600002, "check": 6.50655737705, "train": 1.9365698950999999, "few": 1.31729173581, "this": 1.00379362671, "necessari": 2.8421052631599997, "goal": 3.28152128979, "genet": 10.2558139535, "total": 1.5460122699399999, "framework": 8.200413223139998, "multiinput": 1221.23076923, "his": 1.0943682360200002, "comment": 3.05954904606, "data": 3.37643555934, "note": 1.42449528937, "oppos": 2.51282051282, "just": 1.33580143037, "machin": 4.02433460076, "again": 1.50883862384, "come": 1.32831325301, "must": 1.9220338983099996, "aspect": 3.0893169877399997, "line": 1.4182597820299998, "sinc": 1.08368600683, "requir": 1.52844902282, "stack": 19.6485148515, "direct": 1.22226499346, "import": 1.3401992233700002, "first": 1.00761614623, "earlier": 1.86776470588, "input": 12.2029208301, "share": 1.8566249561500001, "have": 1.0148948411399998, "while": 1.0441988950299999, "plain": 5.49913404919, "flexibl": 9.68639414277, "main": 1.25303867403, "find": 1.7294117647099998, "learn": 2.32275054865, "actual": 1.87482286254, "francoi": 96.80487804879999, "nor": 3.3479544496}}, "html": "<!DOCTYPE html>\n\n<html lang=\"en-US\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head profile=\"http://gmpg.org/xfn/11\">\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n<title>  The Keras 4 Step Workflow</title>\n<link href=\"/wp-content/themes/kdn17/images/favicon.ico\" rel=\"shortcut icon\"/>\n<link href=\"/wp-content/themes/kdn17/style.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"/wp-content/themes/kdn17/js/jquery-1.9.1.min.js\" type=\"text/javascript\"></script>\n<script src=\"/aps/kda_all.js\" type=\"text/javascript\"></script>\n<link href=\"/feed/\" rel=\"alternate\" title=\"KDnuggets: Analytics, Big Data, Data Mining and Data Science Feed\" type=\"application/rss+xml\"/>\n<link href=\"//s.w.org\" rel=\"dns-prefetch\"/>\n<link href=\"https://www.kdnuggets.com/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/comments/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/2018/06/keras-4-step-workflow.html/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb The Keras 4 Step Workflow Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-json/\" rel=\"https://api.w.org/\"/>\n<link href=\"https://www.kdnuggets.com/xmlrpc.php?rsd\" rel=\"EditURI\" title=\"RSD\" type=\"application/rsd+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-includes/wlwmanifest.xml\" rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\"/>\n<link href=\"https://www.kdnuggets.com/2018/06/top-news-week-0528-0603.html\" rel=\"prev\" title=\"Top Stories, May 28 \u2013 Jun 3: 10 More Free Must-Read Books for Machine Learning and Data Science; A Beginners Guide to the Data Science Pipeline\"/>\n<link href=\"https://www.kdnuggets.com/2018/06/resources-women-data-science-machine-learning.html\" rel=\"next\" title=\"Resources For Women In Data Science and Machine Learning\"/>\n<meta content=\"WordPress 4.9.10\" name=\"generator\">\n<link href=\"https://www.kdnuggets.com/2018/06/keras-4-step-workflow.html\" rel=\"canonical\"/>\n<link href=\"https://www.kdnuggets.com/?p=81621\" rel=\"shortlink\"/>\n<link href=\"https://www.kdnuggets.com/2018/06/keras-4-step-workflow.html\" rel=\"canonical\"/>\n<!-- BEGIN ExactMetrics v5.3.7 Universal Analytics - https://exactmetrics.com/ -->\n<script>\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-361129-1', 'auto');\n  ga('send', 'pageview');\n</script>\n<!-- END ExactMetrics Universal Analytics -->\n</meta></head>\n<body class=\"post-template-default single single-post postid-81621 single-format-standard\">\n<div class=\"main_wrapper\"><!-- publ: 4-Jun, 2018  -->\n<div id=\"wrapper\">\n<div id=\"header\">\n<div id=\"header_log\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<h1>KDnuggets</h1>\n<div class=\"text-container\">\n            \u00a0\u00a0<a href=\"/news/subscribe.html\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a> \u00a0|\n <a href=\"https://twitter.com/kdnuggets\" target=\"_blank\"><img alt=\"Twitter\" height=\"48\" src=\"/images/tw_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n <a href=\"https://www.facebook.com/kdnuggets\" target=\"_blank\"><img alt=\"Facebook\" height=\"48\" src=\"/images/fb_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n<a href=\"https://www.linkedin.com/groups/54257/\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"48\" src=\"/images/in_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \n\u00a0|\u00a0 <a href=\"/contact.html\"><b>Contact</b></a>\n</div>\n</div>\n<div class=\"search\">\n<form action=\"/\" id=\"searchform\" method=\"get\">\n<input id=\"s\" name=\"s\" placeholder=\"search KDnuggets\" type=\"text\" value=\"\"/>\n<input type=\"submit\" value=\"Search\"/></form>\n</div>\n<div href=\"#\" id=\"pull\">\n<img class=\"menu\" src=\"/images/menu-30.png\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<img class=\"search-icon\" src=\"/images/search-icon.png\">\n</img></img></div>\n<div id=\"pull-menu\">\n<div class=\"navigation\"><ul class=\"menu\" id=\"menu-menu\"><li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-1070\" id=\"menu-item-1070\"><a href=\"/software/index.html\" title=\"Data Science Software\">SOFTWARE</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13756\" id=\"menu-item-13756\"><a href=\"/news/index.html\" title=\"News\">News/Blog</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-46286\" id=\"menu-item-46286\"><a href=\"/news/top-stories.html\">Top stories</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-42152\" id=\"menu-item-42152\"><a href=\"https://www.kdnuggets.com/opinions/index.html\" title=\"Opinions\">Opinions</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-46415\" id=\"menu-item-46415\"><a href=\"https://www.kdnuggets.com/tutorials/index.html\">Tutorials</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13364\" id=\"menu-item-13364\"><a href=\"/jobs/index.html\" title=\"Jobs in Analytics, Data Science\">JOBS</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-63505\" id=\"menu-item-63505\"><a href=\"https://www.kdnuggets.com/companies/index.html\">Companies</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13366\" id=\"menu-item-13366\"><a href=\"/courses/index.html\">Courses</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-1499\" id=\"menu-item-1499\"><a href=\"https://www.kdnuggets.com/datasets/index.html\">Datasets</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-14286\" id=\"menu-item-14286\"><a href=\"https://www.kdnuggets.com/education/index.html\" title=\"Education in Analytics, Big Data, Data Science\">EDUCATION</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-51558\" id=\"menu-item-51558\"><a href=\"https://www.kdnuggets.com/education/analytics-data-mining-certificates.html\" title=\"Certificates in Analytics, Big Data, Data Science\">Certificates</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-14752\" id=\"menu-item-14752\"><a href=\"/meetings/index.html\">Meetings</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13721\" id=\"menu-item-13721\"><a href=\"/webcasts/index.html\" title=\"Webcasts and Webinars\">Webinars</a></li>\n</ul></div></div>\n</div> <!--#header end-->\n<div id=\"spacer\">\n         \u00a0\n      </div>\n<div id=\"content_wrapper\">\n<div id=\"ad_wrapper\">\n<script type=\"text/javascript\">\n\tjQuery(function() {\n   \t    var pull        = $('#pull');\n            menu        = $('#header .navigation ul');\n            menuImage = $('#header img.menu');\n            mobileMenu        = $('#pull-menu-mobile');\n            search = $('img.search-icon');\n            searchBar = $('div.search');\n            searchClick = false;\n            search.on('click', function() {\n                  searchBar.slideToggle();\n                  searchClick = true;\n            });  \n     \t    $(menuImage).on('click', function(e) {\n\t        //e.preventDefault();\n                if (!searchClick) {\n                  menu.slideToggle();\n                }\n                searchClick = false;\n\t    });\n           /* pullMobile.on('click', function(e) {\n              e.preventDefault();\n                if (!searchClick) {\n                  mobileMenu.slideToggle();\n                }\n                searchClick = false;\n\t    });*/\n            \n\t});\n\tkpath = '/'; kda_top(); kda_sid_init(); kda_sid_n=3;\n\t</script>\n</div> <div class=\"breadcumb\">\n<br/>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2018/index.html\">2018</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/06/index.html\">Jun</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/06/tutorials.html\">Tutorials, Overviews</a> \u00bb The Keras 4 Step Workflow (\u00a0<a href=\"/2018/n22.html\">18:n22</a>\u00a0)    </div>\n<div class=\"single\" id=\"content\">\n<div id=\"post-header\">\n<h1 id=\"title\"><img align=\"right\" alt=\"Silver Blog\" src=\"/images/tkb-1806-s.png\" width=\"94\"/>The Keras 4 Step Workflow</h1>\n<div class=\"pagi\">\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2018/06/top-news-week-0528-0603.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"> <strong>Previous post</strong></img></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2018/06/resources-women-data-science-machine-learning.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/>\u00a0<br/>\u00a0\n    <div class=\"addthis_native_toolbox\"></div>\n</div>\n<div class=\"tag-data\">Tags: <a href=\"https://www.kdnuggets.com/tag/keras\" rel=\"tag\">Keras</a>, <a href=\"https://www.kdnuggets.com/tag/neural-networks\" rel=\"tag\">Neural Networks</a>, <a href=\"https://www.kdnuggets.com/tag/python\" rel=\"tag\">Python</a>, <a href=\"https://www.kdnuggets.com/tag/workflow\" rel=\"tag\">Workflow</a></div>\n<br/>\n<p class=\"excerpt\">\n     In his book \"Deep Learning with Python,\" Francois Chollet outlines a process for developing neural networks with Keras in 4 steps. Let's take a look at this process with a simple example.\n  </p>\n</div>\n<div id=\"post-header-ad\">\n<script type=\"text/javascript\">kda_sid_write(1); kda_sid_n=2;</script>\n</div>\n<hr class=\"grey-line\"/><br/>\n<div class=\"post\" id=\"post-\">\n<div class=\"author-link\"><b>By <a href=\"https://www.kdnuggets.com/author/matt-mayo\" rel=\"author\" title=\"Posts by Matthew Mayo\">Matthew Mayo</a>, KDnuggets.</b></div>\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p>Francois Chollet, in his book \"<a href=\"https://www.amazon.com/Deep-Learning-Python-Francois-Chollet/dp/1617294438\" rel=\"noopener\" target=\"_blank\">Deep Learning with Python</a>,\" outlines early on an overview for developing neural networks with Keras. Generalizing from a simple MNIST example earlier in the book, Chollet simplifies the network building process, as relates directly to Keras, to 4 main steps.</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/gYk1Vy/keras_4_steps_header.jpg\" width=\"99%\"/></p>\n<p>This is not a machine learning workflow, nor is it a complete framework for approaching a problem to solve with deep learning. These 4 steps pertain solely to the portion of your overall neural network machine learning workflow where Keras comes into play. These steps are as follows:</p>\n<ol>\n<li>Define the training data\n<li>Define a neural network model\n<li>Configure the learning process\n<li>Train the model\n</li></li></li></li></ol>\n<p>\u00a0<br>\n<a href=\"https://www.kdnuggets.com/wp-content/uploads/keras-4-step-workflow.png\" rel=\"noopener noreferrer\" target=\"_blank\"><img alt=\"Image\" class=\"aligncenter\" src=\"/wp-content/uploads/keras-4-step-workflow.png\" width=\"99%\"/></a><br>\n\u00a0</br></br></p>\n<p>While Chollet then spends the rest of his book sufficiently filling in the necessary details to utilize it, let's take a preliminary look at the workflow by way of an example.</p>\n<p>\u00a0<br>\n<b>1. Define the training data</b></br></p>\n<p>This first step is straightforward: you must define your input and target tensors. The more difficult data-related aspect -- which falls outside of the Keras-specific workflow -- is actually finding or curating, and then cleaning and otherwise preprocessing some data, which is a concern for <b>any</b> machine learning task. This is the one step of the model which does not generally concern tuning model hyperparameters.</p>\n<p>While our contrived example randomly generates some data to use, it captures the singular aspect of this step: define your input (X_train) and target (y_train) tensors.</p>\n<p><!-- HTML generated using hilite.me --></p>\n<div style=\"background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .2em;padding:.8em .6em;\">\n<pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #0099FF; font-style: italic\"># Define the training data</span>\r\n<span style=\"color: #006699; font-weight: bold\">import</span> <span style=\"color: #00CCFF; font-weight: bold\">numpy</span> <span style=\"color: #006699; font-weight: bold\">as</span> <span style=\"color: #00CCFF; font-weight: bold\">np</span>\r\n\r\nX_train <span style=\"color: #555555\">=</span> np<span style=\"color: #555555\">.</span>random<span style=\"color: #555555\">.</span>random((<span style=\"color: #FF6600\">5000</span>, <span style=\"color: #FF6600\">32</span>))\r\ny_train <span style=\"color: #555555\">=</span> np<span style=\"color: #555555\">.</span>random<span style=\"color: #555555\">.</span>random((<span style=\"color: #FF6600\">5000</span>, <span style=\"color: #FF6600\">5</span>))\r\n</pre>\n</div>\n<p>\u00a0</p>\n<p>\u00a0<br>\n<b>2. Define a neural network model</b></br></p>\n<p>Keras has 2 ways to define a neural network: the Sequential model class and the Functional API. Both share the goal of defining a neural network, but take different approach.</p>\n<p>The <a href=\"https://keras.io/getting-started/sequential-model-guide/\" rel=\"noopener\" target=\"_blank\">Sequential class</a> is used to define a linear stack of network layers which then, collectively, constitute a model. In our example below, we will use the Sequential constructor to create a model, which will then have layers added to it using the <code>add()</code> method.</p>\n<p>The alternative manner for creating a model is via the <a href=\"https://keras.io/getting-started/functional-api-guide/\" rel=\"noopener\" target=\"_blank\">Functional API</a>. As opposed to the Sequential model's limitation of defining a network solely constructed of layers in a linear stack, the Functional API provides the flexibility required for more complex models. This complexity is best exemplified in the use cases of multi-input models, multi-output models, and the definition of graph-like models.</p>\n<p>The code in our example uses the Sequential class. It first calls the constructor, after which calls are made to the <code>add()</code> method to add layers to the model. The first such call adds a layer of type <a href=\"https://keras.io/layers/core/#dense\" rel=\"noopener\" target=\"_blank\">Dense</a> (\"Just your regular densely-connected NN layer\"). The Dense layer has an output of size 16, and an input of size INPUT_DIM, which is 32 in our case (check the above code snippet to confirm). Note that only the first layer of the model requires the input dimension to be explicitly stated; the following layers are able to infer from the previous linear stacked layer. Following standard practice, the rectified linear unit activation function is used for this layer.</p>\n<p>The next line of code defines the next Dense layer of our model. Note that the input size is not specified here. The output size of 5 is specified, however, which matches our number of presumed classes in our toy multi-class classification problem (check the above code snippet, again, to confirm). Since it is a multi-class classification problem we are solving with our network, the activation function for this layer is set to softmax.</p>\n<p><!-- HTML generated using hilite.me --></p>\n<div style=\"background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .2em;padding:.8em .6em;\">\n<pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #0099FF; font-style: italic\"># Define the neural network model</span>\r\n<span style=\"color: #006699; font-weight: bold\">from</span> <span style=\"color: #00CCFF; font-weight: bold\">keras</span> <span style=\"color: #006699; font-weight: bold\">import</span> models\r\n<span style=\"color: #006699; font-weight: bold\">from</span> <span style=\"color: #00CCFF; font-weight: bold\">keras</span> <span style=\"color: #006699; font-weight: bold\">import</span> layers\r\n\r\nINPUT_DIM <span style=\"color: #555555\">=</span> X_train<span style=\"color: #555555\">.</span>shape[<span style=\"color: #FF6600\">1</span>]\r\n\r\nmodel <span style=\"color: #555555\">=</span> models<span style=\"color: #555555\">.</span>Sequential()\r\nmodel<span style=\"color: #555555\">.</span>add(layers<span style=\"color: #555555\">.</span>Dense(<span style=\"color: #FF6600\">16</span>, activation<span style=\"color: #555555\">=</span><span style=\"color: #CC3300\">'relu'</span>, input_dim<span style=\"color: #555555\">=</span>INPUT_DIM))\r\nmodel<span style=\"color: #555555\">.</span>add(layers<span style=\"color: #555555\">.</span>Dense(<span style=\"color: #FF6600\">5</span>, activation<span style=\"color: #555555\">=</span><span style=\"color: #CC3300\">'softmax'</span>))\r\n</pre>\n</div>\n<p>\u00a0</p>\n<p>With those few lines, our Keras model is defined. The Sequential class' <code>summary()</code> method provides the following insight into our model:</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://www.kdnuggets.com/wp-content/uploads/keras-4-step-model-summary.jpg\" width=\"70%\"/></p>\n<p>\u00a0<br/>\n<b>3. Configure the learning process</b></p>\n<p>With both the training data defined and model defined, it's time configure the learning process. This is accomplished with a call to the <code><a href=\"https://keras.io/getting-started/sequential-model-guide/#compilation\" rel=\"noopener\" target=\"_blank\">compile()</a></code> method of the Sequential model class. Compilation requires 3 arguments: an <a href=\"https://keras.io/optimizers/\" rel=\"noopener\" target=\"_blank\">optimizer</a>, a <a href=\"https://keras.io/losses/\" rel=\"noopener\" target=\"_blank\">loss function</a>, and a list of <a href=\"https://keras.io/metrics/\" rel=\"noopener\" target=\"_blank\">metrics</a>.</p>\n<p>In our example, set up as a multi-class classification problem, we will use the Adam optimizer, the categorical crossentropy loss function, and include solely the accuracy metric.</p>\n<p><!-- HTML generated using hilite.me --></p>\n<div style=\"background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #0099FF; font-style: italic\"># Configure the learning process</span>\r\n<span style=\"color: #006699; font-weight: bold\">from</span> <span style=\"color: #00CCFF; font-weight: bold\">keras</span> <span style=\"color: #006699; font-weight: bold\">import</span> optimizers\r\n<span style=\"color: #006699; font-weight: bold\">from</span> <span style=\"color: #00CCFF; font-weight: bold\">keras</span> <span style=\"color: #006699; font-weight: bold\">import</span> metrics\r\n\r\nmodel<span style=\"color: #555555\">.</span>compile(optimizer<span style=\"color: #555555\">=</span><span style=\"color: #CC3300\">'adam'</span>, \r\n              loss<span style=\"color: #555555\">=</span><span style=\"color: #CC3300\">'categorical_crossentropy'</span>, \r\n              metrics<span style=\"color: #555555\">=</span>[<span style=\"color: #CC3300\">'accuracy'</span>])\r\n</pre>\n</div>\n<p>\u00a0</p>\n<p>The with the call made to <code>compile()</code> with these arguments, our model now has its learning process configured.</p>\n<p>\u00a0<br/>\n<b>4. Train the model</b></p>\n<p>At this point we have training data and a fully configured neural network to train with said data. All that is left is to pass the data to the model for the training process to commence, a process which is completed by iterating on the training data. Training begins by calling the <code>fit()</code> method.</p>\n<p>At minimum, <code>fit()</code> requires 2 arguments: input and target tensors. If nothing more is provided, a single iteration of the training data is performed, which generally won't do you any good. Therefore, it would be more conventional to, at a practical minimum, define a pair of additional arguments: batch_size and epochs. Our example includes these 4 total arguments.</p>\n<p><!-- HTML generated using hilite.me --></p>\n<div style=\"background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #0099FF; font-style: italic\"># Train the model</span>\r\nmodel<span style=\"color: #555555\">.</span>fit(X_train, y_train, \r\n          batch_size<span style=\"color: #555555\">=</span><span style=\"color: #FF6600\">128</span>, \r\n          epochs<span style=\"color: #555555\">=</span><span style=\"color: #FF6600\">10</span>)\r\n</pre>\n</div>\n<p>\u00a0</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"/wp-content/uploads/keras-4-steps-epochs.jpg\" width=\"99%\"/><br/>\n\u00a0</p>\n<p>Note that the epoch accuracies are not particularly admirable, which makes sense given the random data which was used.</p>\n<p>Hopefully this has shed some light on the manner in which Keras can be used to solve plain old classification problems by using a straightforward 4 step process prescribed by the library's author and outlined herein.</p>\n<p>\u00a0<br/>\n<b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2018/05/general-approaches-machine-learning-process.html\">Frameworks for Approaching the Machine Learning Process</a>\n<li><a href=\"/2017/10/seven-steps-deep-learning-keras.html\">7 Steps to Mastering Deep Learning with Keras</a>\n<li><a href=\"/2018/01/genetic-algorithm-optimizing-recurrent-neural-network.html\">Using Genetic Algorithm for Optimizing Recurrent Neural Networks</a>\n</li></li></li></ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p> <script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets';\n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div>\n<div class=\"page-link\"></div>\n<div class=\"pagi\">\n<hr class=\"grey-line\"/>\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2018/06/top-news-week-0528-0603.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"/> <strong>Previous post</strong></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2018/06/resources-women-data-science-machine-learning.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/><br/>\n<div>\n<hr class=\"grey-line\"/><br/>\n<h2>Top Stories Past 30 Days</h2>\n<table align=\"center\" cellpadding=\"3\" cellspacing=\"10\" class=\"latn\" width=\"100%\">\n<tr>\n<td valign=\"top\" width=\"50%\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Popular</b></th></tr>\n<tr><td>\n<ol class=\"three_ol\"><li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-1-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-2-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n<li> <a href=\"/2018/05/simplilearn-9-must-have-skills-data-scientist.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-3-simplilearn');\"><b>9 Must-have skills you need to become a Data Scientist, updated</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-4-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/03/another-10-free-must-read-books-for-machine-learning-and-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-5-another-10-books');\"><b>Another 10 Free Must-Read Books for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-6-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/best-data-visualization-techniques.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-7-best-data-viz');\"><b>Best Data Visualization Techniques for small and large data</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td> <td valign=\"top\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Shared</b></th></tr>\n<tr><td><ol class=\"three_ol\">\n<li> <a href=\"/2019/04/another-10-free-must-see-courses-machine-learning-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-1-another-10-courses');\"><b>Another 10 Free Must-See Courses for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-2-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/03/r-vs-python-data-visualization.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-3-r-py-viz');\"><b>R vs Python for Data Visualization</b></a>\n<li> <a href=\"/2019/03/deep-learning-toolset-overview.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-4-dl-toolset');\"><b>The Deep Learning Toolset \u2014 An Overview</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-5-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-6-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-7-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<!--#content end--></div>\n<div id=\"sidebar\">\n<div class=\"latn\">\n<h3><b><a href=\"/news/index.html\">Latest News</a></b></h3>\n<ul style=\"font-size:14px; margin-top:5px\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/datarobot-delivering-trusted-ai-microsoft.html\">Delivering Trusted AI with DataRobot and Microsoft</a><li> <a href=\"https://www.kdnuggets.com/2019/04/formulated-ai-data-production-landscape.html\">AI and the data production landscape</a><li> <a href=\"https://www.kdnuggets.com/2019/04/most-desired-skill-data-science.html\">The most desired skill in data science</a><li> <a href=\"https://www.kdnuggets.com/2019/04/projects-include-data-science-portfolio.html\">Projects to Include in a Data Science Portfolio</a><li> <a href=\"https://www.kdnuggets.com/2019/04/rework-meet-worlds-leading-ai-deep-learning-experts.html\">Meet the World\u2019s Leading AI &amp; Deep Learning ...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/problem-data-science-job-postings.html\">The problem with data science job postings</a></li></li></li></li></li></li></ul>\n</div>\n<div>\n<script type=\"text/javascript\">kda_sid_write(kda_sid_n);</script>\n</div>\n<br/><script src=\"/aps/sbm.js\" type=\"text/javascript\"></script>\n</div>\n</div><div class=\"breadcrumbs_bottom\">\n<div class=\"breadcumb\">\n<br>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2018/index.html\">2018</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/06/index.html\">Jun</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/06/tutorials.html\">Tutorials, Overviews</a> \u00bb The Keras 4 Step Workflow (\u00a0<a href=\"/2018/n22.html\">18:n22</a>\u00a0)    </br></div>\n</div>\n<!--#content_wrapper end--></div>\n<br>\n<div id=\"footer\">\n<br/>\u00a9 2019 KDnuggets. <a href=\"/about/index.html\">About KDnuggets</a>. \u00a0<a href=\"/news/privacy-policy.html\">Privacy policy</a>. <a href=\"/terms-of-service.html\">Terms of Service</a><br/>\u00a0\n<div class=\"kd_bottom\">\n<div class=\"footer-container\">\n<div class=\"footer-news\">\n<a href=\"/news/subscribe.html\" onclick=\"_gaq.push(['_trackPageview','/x/bot/sub']);\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a>\n</div>\n<div class=\"footer-sm\">\n<a href=\"https://twitter.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/twt']);\" target=\"_blank\"><img height=\"32\" src=\"/images/tw_c48.png\" width=\"32\"/></a>\n<a href=\"https://facebook.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/fb']);\" target=\"_blank\"><img alt=\"Facebook\" height=\"32\" src=\"/images/fb_c48.png\" width=\"32\"/></a>\n<a href=\"https://www.linkedin.com/groups/54257\" onclick=\"_gaq.push(['_trackPageview','/x/bot/in']);\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"32\" src=\"/images/in_c48.png\" width=\"32\"/></a>\n</div>\n</div>\n<div class=\"close-footer\">X</div>\n</div>\n<script type=\"text/javascript\">\n  jQuery('.close-footer').click(\n      function(){       \n         jQuery('.kd_bottom').hide();\n      }\n   );\n</script> </div>\n<div class=\"clear\"><!--blank--></div>\n</br></div>\n<div style=\"display: none;\"><div id=\"boxzilla-box-82996-content\"><script type=\"text/javascript\">(function() {\n\tif (!window.mc4wp) {\n\t\twindow.mc4wp = {\n\t\t\tlisteners: [],\n\t\t\tforms    : {\n\t\t\t\ton: function (event, callback) {\n\t\t\t\t\twindow.mc4wp.listeners.push({\n\t\t\t\t\t\tevent   : event,\n\t\t\t\t\t\tcallback: callback\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})();\n</script><!-- MailChimp for WordPress v4.1.14 - https://wordpress.org/plugins/mailchimp-for-wp/ --><form class=\"mc4wp-form mc4wp-form-77281\" data-id=\"77281\" data-name=\"Subscribe to KDnuggets News\" id=\"mc4wp-form-1\" method=\"post\"><div class=\"mc4wp-form-fields\"><div class=\"header-container\">\n<img align=\"left\" src=\"/wp-content/uploads/envelope.png\"><a href=\"/news/subscribe.html\">Get KDnuggets, a leading newsletter on AI, \r\n  Data Science, and Machine Learning</a>\n</img></div>\n<div class=\"form-fields\">\n<div class=\"field-container\"><label>Email:</label><input maxlength=\"60\" name=\"EMAIL\" placeholder=\"Your email\" required=\"\" size=\"30\" type=\"email\"/></div>\n<div class=\"field-container submit-container\"><div class=\"form-button\" onclick=\"document.getElementById('mc4wp-form-1').submit()\">Sign Up</div></div>\n</div>\n<label style=\"display: none !important;\">Leave this field empty if you're human: <input autocomplete=\"off\" name=\"_mc4wp_honeypot\" tabindex=\"-1\" type=\"text\" value=\"\"/></label><input name=\"_mc4wp_timestamp\" type=\"hidden\" value=\"1556334159\"/><input name=\"_mc4wp_form_id\" type=\"hidden\" value=\"77281\"/><input name=\"_mc4wp_form_element_id\" type=\"hidden\" value=\"mc4wp-form-1\"/></div><div class=\"mc4wp-response\"></div></form><!-- / MailChimp for WordPress Plugin -->\n</div></div><script type=\"text/javascript\">(function() {function addEventListener(element,event,handler) {\n\tif(element.addEventListener) {\n\t\telement.addEventListener(event,handler, false);\n\t} else if(element.attachEvent){\n\t\telement.attachEvent('on'+event,handler);\n\t}\n}function maybePrefixUrlField() {\n\tif(this.value.trim() !== '' && this.value.indexOf('http') !== 0) {\n\t\tthis.value = \"http://\" + this.value;\n\t}\n}\n\nvar urlFields = document.querySelectorAll('.mc4wp-form input[type=\"url\"]');\nif( urlFields && urlFields.length > 0 ) {\n\tfor( var j=0; j < urlFields.length; j++ ) {\n\t\taddEventListener(urlFields[j],'blur',maybePrefixUrlField);\n\t}\n}/* test if browser supports date fields */\nvar testInput = document.createElement('input');\ntestInput.setAttribute('type', 'date');\nif( testInput.type !== 'date') {\n\n\t/* add placeholder & pattern to all date fields */\n\tvar dateFields = document.querySelectorAll('.mc4wp-form input[type=\"date\"]');\n\tfor(var i=0; i<dateFields.length; i++) {\n\t\tif(!dateFields[i].placeholder) {\n\t\t\tdateFields[i].placeholder = 'YYYY-MM-DD';\n\t\t}\n\t\tif(!dateFields[i].pattern) {\n\t\t\tdateFields[i].pattern = '[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])';\n\t\t}\n\t}\n}\n\n})();</script><script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_options = {\"testMode\":\"\",\"boxes\":[{\"id\":82996,\"icon\":\"&times;\",\"content\":\"\",\"css\":{\"background_color\":\"#eeee22\",\"width\":600,\"border_width\":2,\"border_style\":\"double\",\"position\":\"center\"},\"trigger\":{\"method\":\"time_on_page\",\"value\":\"3\"},\"animation\":\"fade\",\"cookie\":{\"triggered\":0,\"dismissed\":336},\"rehide\":true,\"position\":\"center\",\"screenWidthCondition\":{\"condition\":\"larger\",\"value\":500},\"closable\":true,\"post\":{\"id\":82996,\"title\":\"Subscribe to KDnuggets\",\"slug\":\"subscribe-to-kdnuggets\"}}]};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla/assets/js/script.min.js?ver=3.2.5\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_stats_config = {\"ajaxurl\":\"https:\\/\\/www.kdnuggets.com\\/wp-admin\\/admin-ajax.php?action=boxzilla_stats_track\"};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla-stats/assets/js/tracking.min.js?ver=1.0.4\" type=\"text/javascript\"></script>\n<script src=\"https://www.kdnuggets.com/wp-includes/js/wp-embed.min.js?ver=4.9.10\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar mc4wp_forms_config = [];\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/forms-api.min.js?ver=4.1.14\" type=\"text/javascript\"></script>\n<!--[if lte IE 9]>\n<script type='text/javascript' src='https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/third-party/placeholders.min.js?ver=4.1.14'></script>\n<![endif]-->\n<!--/.main_wrapper--></body></html>\n<script src=\"https://s7.addthis.com/js/300/addthis_widget.js#pubid=gpsaddthis\" type=\"text/javascript\"></script>\n\n\n<!-- Dynamic page generated in 0.629 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2019-04-26 23:02:39 -->\n<!-- Compression = gzip -->", "content_tokenized": ["matthew", "mayo", "kdnugget", "comment", "francoi", "chollet", "his", "book", "deep", "learn", "with", "python", "outlin", "earli", "overview", "for", "develop", "neural", "network", "with", "kera", "general", "from", "simpl", "exampl", "earlier", "the", "book", "chollet", "simplifi", "the", "network", "build", "process", "relat", "direct", "kera", "num", "main", "step", "this", "not", "machin", "learn", "workflow", "nor", "complet", "framework", "for", "approach", "problem", "solv", "with", "deep", "learn", "these", "num", "step", "pertain", "sole", "the", "portion", "overal", "neural", "network", "machin", "learn", "workflow", "where", "kera", "come", "into", "play", "these", "step", "are", "follow", "defin", "the", "train", "data", "defin", "neural", "network", "model", "configur", "the", "learn", "process", "train", "the", "model", "while", "chollet", "then", "spend", "the", "rest", "his", "book", "suffici", "fill", "the", "necessari", "detail", "util", "let", "take", "preliminari", "look", "the", "workflow", "way", "exampl", "num", "defin", "the", "train", "data", "this", "first", "step", "straightforward", "must", "defin", "input", "and", "target", "tensor", "the", "more", "difficult", "datarel", "aspect", "which", "fall", "outsid", "the", "kerasspecif", "workflow", "actual", "find", "curat", "and", "then", "clean", "and", "otherwis", "preprocess", "some", "data", "which", "concern", "for", "ani", "machin", "learn", "task", "this", "the", "one", "step", "the", "model", "which", "doe", "not", "general", "concern", "tune", "model", "hyperparamet", "while", "our", "contriv", "exampl", "random", "generat", "some", "data", "use", "captur", "the", "singular", "aspect", "this", "step", "defin", "input", "xtrain", "and", "target", "ytrain", "tensor", "generat", "use", "hilitem", "defin", "the", "train", "data", "import", "numpi", "xtrain", "random", "ytrain", "random", "num", "defin", "neural", "network", "model", "kera", "has", "num", "way", "defin", "neural", "network", "the", "sequenti", "model", "class", "and", "the", "function", "both", "share", "the", "goal", "defin", "neural", "network", "but", "take", "differ", "approach", "the", "sequenti", "class", "use", "defin", "linear", "stack", "network", "layer", "which", "then", "collect", "constitut", "model", "our", "exampl", "below", "will", "use", "the", "sequenti", "constructor", "creat", "model", "which", "will", "then", "have", "layer", "use", "the", "method", "the", "altern", "manner", "for", "creat", "model", "via", "the", "function", "oppos", "the", "sequenti", "model", "limit", "defin", "network", "sole", "construct", "layer", "linear", "stack", "the", "function", "provid", "the", "flexibl", "requir", "for", "more", "complex", "model", "this", "complex", "best", "exemplifi", "the", "use", "case", "multiinput", "model", "multioutput", "model", "and", "the", "definit", "graphlik", "model", "the", "code", "our", "exampl", "use", "the", "sequenti", "class", "first", "call", "the", "constructor", "after", "which", "call", "are", "made", "the", "method", "add", "layer", "the", "model", "the", "first", "such", "call", "add", "layer", "type", "dens", "just", "regular", "denselyconnect", "layer", "the", "dens", "layer", "has", "output", "size", "num", "and", "input", "size", "which", "num", "our", "case", "check", "the", "abov", "code", "snippet", "confirm", "note", "that", "onli", "the", "first", "layer", "the", "model", "requir", "the", "input", "dimens", "explicit", "state", "the", "follow", "layer", "are", "abl", "infer", "from", "the", "previous", "linear", "stack", "layer", "follow", "standard", "practic", "the", "rectifi", "linear", "unit", "activ", "function", "use", "for", "this", "layer", "the", "next", "line", "code", "defin", "the", "next", "dens", "layer", "our", "model", "note", "that", "the", "input", "size", "not", "specifi", "here", "the", "output", "size", "num", "specifi", "howev", "which", "match", "our", "number", "presum", "class", "our", "toy", "multiclass", "classif", "problem", "check", "the", "abov", "code", "snippet", "again", "confirm", "sinc", "multiclass", "classif", "problem", "are", "solv", "with", "our", "network", "the", "activ", "function", "for", "this", "layer", "set", "softmax", "generat", "use", "hilitem", "defin", "the", "neural", "network", "model", "from", "kera", "import", "model", "from", "kera", "import", "layer", "xtrain", "shape", "num", "model", "model", "model", "model", "with", "those", "few", "line", "our", "kera", "model", "defin", "the", "sequenti", "class", "method", "provid", "the", "follow", "insight", "into", "our", "model", "num", "configur", "the", "learn", "process", "with", "both", "the", "train", "data", "defin", "and", "model", "defin", "time", "configur", "the", "learn", "process", "this", "accomplish", "with", "call", "the", "method", "the", "sequenti", "model", "class", "compil", "requir", "num", "argument", "optim", "loss", "function", "and", "list", "metric", "our", "exampl", "set", "multiclass", "classif", "problem", "will", "use", "the", "adam", "optim", "the", "categor", "crossentropi", "loss", "function", "and", "includ", "sole", "the", "accuraci", "metric", "generat", "use", "hilitem", "configur", "the", "learn", "process", "from", "kera", "import", "optim", "from", "kera", "import", "metric", "model", "the", "with", "the", "call", "made", "with", "these", "argument", "our", "model", "now", "has", "learn", "process", "configur", "num", "train", "the", "model", "this", "point", "have", "train", "data", "and", "fulli", "configur", "neural", "network", "train", "with", "said", "data", "all", "that", "left", "pass", "the", "data", "the", "model", "for", "the", "train", "process", "commenc", "process", "which", "complet", "iter", "the", "train", "data", "train", "begin", "call", "the", "method", "minimum", "requir", "num", "argument", "input", "and", "target", "tensor", "noth", "more", "provid", "singl", "iter", "the", "train", "data", "perform", "which", "general", "ani", "good", "therefor", "would", "more", "convent", "practic", "minimum", "defin", "pair", "addit", "argument", "batchsiz", "and", "epoch", "our", "exampl", "includ", "these", "num", "total", "argument", "generat", "use", "hilitem", "train", "the", "model", "model", "note", "that", "the", "epoch", "accuraci", "are", "not", "particular", "admir", "which", "make", "sens", "given", "the", "random", "data", "which", "use", "hope", "this", "has", "shed", "some", "light", "the", "manner", "which", "kera", "can", "use", "solv", "plain", "old", "classif", "problem", "use", "straightforward", "num", "step", "process", "prescrib", "the", "librari", "author", "and", "outlin", "herein", "relat", "framework", "for", "approach", "the", "machin", "learn", "process", "num", "step", "master", "deep", "learn", "with", "kera", "use", "genet", "algorithm", "for", "optim", "recurr", "neural", "network"], "timestamp_scraper": 1556368273.165034, "title": "The Keras 4 Step Workflow", "read_time": 302.09999999999997, "content_html": "<div class=\"post\" id=\"post-\">\n<div class=\"author-link\"><b>By <a href=\"https://www.kdnuggets.com/author/matt-mayo\" rel=\"author\" title=\"Posts by Matthew Mayo\">Matthew Mayo</a>, KDnuggets.</b></div>\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p>Francois Chollet, in his book \"<a href=\"https://www.amazon.com/Deep-Learning-Python-Francois-Chollet/dp/1617294438\" rel=\"noopener\" target=\"_blank\">Deep Learning with Python</a>,\" outlines early on an overview for developing neural networks with Keras. Generalizing from a simple MNIST example earlier in the book, Chollet simplifies the network building process, as relates directly to Keras, to 4 main steps.</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://image.ibb.co/gYk1Vy/keras_4_steps_header.jpg\" width=\"99%\"/></p>\n<p>This is not a machine learning workflow, nor is it a complete framework for approaching a problem to solve with deep learning. These 4 steps pertain solely to the portion of your overall neural network machine learning workflow where Keras comes into play. These steps are as follows:</p>\n<ol>\n<li>Define the training data\n<li>Define a neural network model\n<li>Configure the learning process\n<li>Train the model\n</li></li></li></li></ol>\n<p>\u00a0<br>\n<a href=\"https://www.kdnuggets.com/wp-content/uploads/keras-4-step-workflow.png\" rel=\"noopener noreferrer\" target=\"_blank\"><img alt=\"Image\" class=\"aligncenter\" src=\"/wp-content/uploads/keras-4-step-workflow.png\" width=\"99%\"/></a><br>\n\u00a0</br></br></p>\n<p>While Chollet then spends the rest of his book sufficiently filling in the necessary details to utilize it, let's take a preliminary look at the workflow by way of an example.</p>\n<p>\u00a0<br>\n<b>1. Define the training data</b></br></p>\n<p>This first step is straightforward: you must define your input and target tensors. The more difficult data-related aspect -- which falls outside of the Keras-specific workflow -- is actually finding or curating, and then cleaning and otherwise preprocessing some data, which is a concern for <b>any</b> machine learning task. This is the one step of the model which does not generally concern tuning model hyperparameters.</p>\n<p>While our contrived example randomly generates some data to use, it captures the singular aspect of this step: define your input (X_train) and target (y_train) tensors.</p>\n<p><!-- HTML generated using hilite.me --></p>\n<div style=\"background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .2em;padding:.8em .6em;\">\n<pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #0099FF; font-style: italic\"># Define the training data</span>\r\n<span style=\"color: #006699; font-weight: bold\">import</span> <span style=\"color: #00CCFF; font-weight: bold\">numpy</span> <span style=\"color: #006699; font-weight: bold\">as</span> <span style=\"color: #00CCFF; font-weight: bold\">np</span>\r\n\r\nX_train <span style=\"color: #555555\">=</span> np<span style=\"color: #555555\">.</span>random<span style=\"color: #555555\">.</span>random((<span style=\"color: #FF6600\">5000</span>, <span style=\"color: #FF6600\">32</span>))\r\ny_train <span style=\"color: #555555\">=</span> np<span style=\"color: #555555\">.</span>random<span style=\"color: #555555\">.</span>random((<span style=\"color: #FF6600\">5000</span>, <span style=\"color: #FF6600\">5</span>))\r\n</pre>\n</div>\n<p>\u00a0</p>\n<p>\u00a0<br>\n<b>2. Define a neural network model</b></br></p>\n<p>Keras has 2 ways to define a neural network: the Sequential model class and the Functional API. Both share the goal of defining a neural network, but take different approach.</p>\n<p>The <a href=\"https://keras.io/getting-started/sequential-model-guide/\" rel=\"noopener\" target=\"_blank\">Sequential class</a> is used to define a linear stack of network layers which then, collectively, constitute a model. In our example below, we will use the Sequential constructor to create a model, which will then have layers added to it using the <code>add()</code> method.</p>\n<p>The alternative manner for creating a model is via the <a href=\"https://keras.io/getting-started/functional-api-guide/\" rel=\"noopener\" target=\"_blank\">Functional API</a>. As opposed to the Sequential model's limitation of defining a network solely constructed of layers in a linear stack, the Functional API provides the flexibility required for more complex models. This complexity is best exemplified in the use cases of multi-input models, multi-output models, and the definition of graph-like models.</p>\n<p>The code in our example uses the Sequential class. It first calls the constructor, after which calls are made to the <code>add()</code> method to add layers to the model. The first such call adds a layer of type <a href=\"https://keras.io/layers/core/#dense\" rel=\"noopener\" target=\"_blank\">Dense</a> (\"Just your regular densely-connected NN layer\"). The Dense layer has an output of size 16, and an input of size INPUT_DIM, which is 32 in our case (check the above code snippet to confirm). Note that only the first layer of the model requires the input dimension to be explicitly stated; the following layers are able to infer from the previous linear stacked layer. Following standard practice, the rectified linear unit activation function is used for this layer.</p>\n<p>The next line of code defines the next Dense layer of our model. Note that the input size is not specified here. The output size of 5 is specified, however, which matches our number of presumed classes in our toy multi-class classification problem (check the above code snippet, again, to confirm). Since it is a multi-class classification problem we are solving with our network, the activation function for this layer is set to softmax.</p>\n<p><!-- HTML generated using hilite.me --></p>\n<div style=\"background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .2em;padding:.8em .6em;\">\n<pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #0099FF; font-style: italic\"># Define the neural network model</span>\r\n<span style=\"color: #006699; font-weight: bold\">from</span> <span style=\"color: #00CCFF; font-weight: bold\">keras</span> <span style=\"color: #006699; font-weight: bold\">import</span> models\r\n<span style=\"color: #006699; font-weight: bold\">from</span> <span style=\"color: #00CCFF; font-weight: bold\">keras</span> <span style=\"color: #006699; font-weight: bold\">import</span> layers\r\n\r\nINPUT_DIM <span style=\"color: #555555\">=</span> X_train<span style=\"color: #555555\">.</span>shape[<span style=\"color: #FF6600\">1</span>]\r\n\r\nmodel <span style=\"color: #555555\">=</span> models<span style=\"color: #555555\">.</span>Sequential()\r\nmodel<span style=\"color: #555555\">.</span>add(layers<span style=\"color: #555555\">.</span>Dense(<span style=\"color: #FF6600\">16</span>, activation<span style=\"color: #555555\">=</span><span style=\"color: #CC3300\">'relu'</span>, input_dim<span style=\"color: #555555\">=</span>INPUT_DIM))\r\nmodel<span style=\"color: #555555\">.</span>add(layers<span style=\"color: #555555\">.</span>Dense(<span style=\"color: #FF6600\">5</span>, activation<span style=\"color: #555555\">=</span><span style=\"color: #CC3300\">'softmax'</span>))\r\n</pre>\n</div>\n<p>\u00a0</p>\n<p>With those few lines, our Keras model is defined. The Sequential class' <code>summary()</code> method provides the following insight into our model:</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://www.kdnuggets.com/wp-content/uploads/keras-4-step-model-summary.jpg\" width=\"70%\"/></p>\n<p>\u00a0<br/>\n<b>3. Configure the learning process</b></p>\n<p>With both the training data defined and model defined, it's time configure the learning process. This is accomplished with a call to the <code><a href=\"https://keras.io/getting-started/sequential-model-guide/#compilation\" rel=\"noopener\" target=\"_blank\">compile()</a></code> method of the Sequential model class. Compilation requires 3 arguments: an <a href=\"https://keras.io/optimizers/\" rel=\"noopener\" target=\"_blank\">optimizer</a>, a <a href=\"https://keras.io/losses/\" rel=\"noopener\" target=\"_blank\">loss function</a>, and a list of <a href=\"https://keras.io/metrics/\" rel=\"noopener\" target=\"_blank\">metrics</a>.</p>\n<p>In our example, set up as a multi-class classification problem, we will use the Adam optimizer, the categorical crossentropy loss function, and include solely the accuracy metric.</p>\n<p><!-- HTML generated using hilite.me --></p>\n<div style=\"background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #0099FF; font-style: italic\"># Configure the learning process</span>\r\n<span style=\"color: #006699; font-weight: bold\">from</span> <span style=\"color: #00CCFF; font-weight: bold\">keras</span> <span style=\"color: #006699; font-weight: bold\">import</span> optimizers\r\n<span style=\"color: #006699; font-weight: bold\">from</span> <span style=\"color: #00CCFF; font-weight: bold\">keras</span> <span style=\"color: #006699; font-weight: bold\">import</span> metrics\r\n\r\nmodel<span style=\"color: #555555\">.</span>compile(optimizer<span style=\"color: #555555\">=</span><span style=\"color: #CC3300\">'adam'</span>, \r\n              loss<span style=\"color: #555555\">=</span><span style=\"color: #CC3300\">'categorical_crossentropy'</span>, \r\n              metrics<span style=\"color: #555555\">=</span>[<span style=\"color: #CC3300\">'accuracy'</span>])\r\n</pre>\n</div>\n<p>\u00a0</p>\n<p>The with the call made to <code>compile()</code> with these arguments, our model now has its learning process configured.</p>\n<p>\u00a0<br/>\n<b>4. Train the model</b></p>\n<p>At this point we have training data and a fully configured neural network to train with said data. All that is left is to pass the data to the model for the training process to commence, a process which is completed by iterating on the training data. Training begins by calling the <code>fit()</code> method.</p>\n<p>At minimum, <code>fit()</code> requires 2 arguments: input and target tensors. If nothing more is provided, a single iteration of the training data is performed, which generally won't do you any good. Therefore, it would be more conventional to, at a practical minimum, define a pair of additional arguments: batch_size and epochs. Our example includes these 4 total arguments.</p>\n<p><!-- HTML generated using hilite.me --></p>\n<div style=\"background: #f0f3f3; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #0099FF; font-style: italic\"># Train the model</span>\r\nmodel<span style=\"color: #555555\">.</span>fit(X_train, y_train, \r\n          batch_size<span style=\"color: #555555\">=</span><span style=\"color: #FF6600\">128</span>, \r\n          epochs<span style=\"color: #555555\">=</span><span style=\"color: #FF6600\">10</span>)\r\n</pre>\n</div>\n<p>\u00a0</p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"/wp-content/uploads/keras-4-steps-epochs.jpg\" width=\"99%\"/><br/>\n\u00a0</p>\n<p>Note that the epoch accuracies are not particularly admirable, which makes sense given the random data which was used.</p>\n<p>Hopefully this has shed some light on the manner in which Keras can be used to solve plain old classification problems by using a straightforward 4 step process prescribed by the library's author and outlined herein.</p>\n<p>\u00a0<br/>\n<b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2018/05/general-approaches-machine-learning-process.html\">Frameworks for Approaching the Machine Learning Process</a>\n<li><a href=\"/2017/10/seven-steps-deep-learning-keras.html\">7 Steps to Mastering Deep Learning with Keras</a>\n<li><a href=\"/2018/01/genetic-algorithm-optimizing-recurrent-neural-network.html\">Using Genetic Algorithm for Optimizing Recurrent Neural Networks</a>\n</li></li></li></ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p> <script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets';\n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div> ", "website": "kdnuggets"}