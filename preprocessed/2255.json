{"title": "Data Structures - Dynamic Programming", "tfidf": {"tfidf": {"cheaper": 17.2190889371, "achiev": 3.74433962264, "examin": 3.8505942275, "but": 1.01632417899, "time": 1.01127460348, "alreadi": 1.9551724137900002, "smaller": 10.37477536352, "comput": 3.9277585353800006, "divid": 9.267950963239999, "recomput": 1134.0, "address": 2.86157173756, "program": 8.08556149732, "bottomup": 1134.0, "algorithm": 195.6549295778, "refer": 1.30024570025, "down": 1.35889754344, "both": 1.05215720061, "greedi": 77.82352941180001, "than": 1.03278688525, "befor": 1.10036041031, "which": 1.005191845, "say": 1.7544480053, "solut": 23.6390708755, "rememb": 9.77586206896, "memoiz": 1134.0, "tri": 3.7089125102199993, "local": 1.51720183486, "independ": 1.58950740889, "can": 5.8813069571, "into": 2.03004922958, "the": 12.0, "possibl": 1.4173734488, "cours": 2.15092805853, "and": 8.00050393704, "problem": 7.06699310036, "result": 3.43834825296, "their": 1.01547908405, "will": 1.22481098596, "overal": 6.088590604019999, "then": 1.08657860516, "where": 3.20145190563, "contrast": 5.7667998547, "output": 23.03094777564, "dynam": 52.20221948216, "reus": 29.7861163227, "inhand": 1134.0, "approach": 4.15113086678, "optim": 46.1511627908, "term": 1.39520168732, "break": 2.42863698944, "previous": 2.85693719632, "cycl": 5.40919931857, "these": 3.22246278756, "use": 7.207471301659999, "yet": 2.1258703802900003, "subproblem": 12474.0, "manner": 3.93164933135, "are": 6.17943561468, "have": 1.0148948411399998, "rather": 1.55692850838, "similar": 4.12542226071, "most": 2.04192926046, "that": 2.0079681275, "follow": 1.04640126549, "order": 1.24625166811, "overlap": 12.0913937548, "combin": 3.39520958084, "not": 1.01567398119, "bigger": 13.23, "for": 3.00094512003, "solv": 36.34615384615, "motiv": 5.01611374408, "topdown": 1134.0, "best": 1.5828514456600002, "conquer": 24.15212981745, "unlik": 2.42529789184}, "idf": {"cheaper": 17.2190889371, "achiev": 1.87216981132, "examin": 3.8505942275, "but": 1.01632417899, "time": 1.01127460348, "alreadi": 1.9551724137900002, "smaller": 2.59369384088, "comput": 3.9277585353800006, "divid": 2.3169877408099997, "recomput": 1134.0, "address": 2.86157173756, "program": 2.02139037433, "bottomup": 1134.0, "algorithm": 27.9507042254, "refer": 1.30024570025, "down": 1.35889754344, "both": 1.05215720061, "greedi": 77.82352941180001, "than": 1.03278688525, "befor": 1.10036041031, "which": 1.005191845, "say": 1.7544480053, "solut": 4.7278141751, "rememb": 4.88793103448, "memoiz": 1134.0, "tri": 1.8544562551099997, "local": 1.51720183486, "independ": 1.58950740889, "can": 1.17626139142, "into": 1.01502461479, "the": 1.0, "possibl": 1.4173734488, "cours": 2.15092805853, "and": 1.00006299213, "problem": 1.76674827509, "result": 1.14611608432, "their": 1.01547908405, "will": 1.22481098596, "overal": 3.0442953020099996, "then": 1.08657860516, "where": 1.06715063521, "contrast": 2.88339992735, "output": 7.676982591880001, "dynam": 6.52527743527, "reus": 29.7861163227, "inhand": 1134.0, "approach": 2.07556543339, "optim": 11.5377906977, "term": 1.39520168732, "break": 2.42863698944, "previous": 1.42846859816, "cycl": 5.40919931857, "these": 1.07415426252, "use": 1.0296387573799999, "yet": 2.1258703802900003, "subproblem": 1134.0, "manner": 3.93164933135, "are": 1.02990593578, "have": 1.0148948411399998, "rather": 1.55692850838, "similar": 1.37514075357, "most": 1.02096463023, "that": 1.00398406375, "follow": 1.04640126549, "order": 1.24625166811, "overlap": 12.0913937548, "combin": 1.69760479042, "not": 1.01567398119, "bigger": 13.23, "for": 1.00031504001, "solv": 7.26923076923, "motiv": 5.01611374408, "topdown": 1134.0, "best": 1.5828514456600002, "conquer": 8.05070993915, "unlik": 2.42529789184}, "logidf": {"cheaper": 2.8460185903500004, "achiev": 0.6270980851169999, "examin": 1.3482274812000001, "but": 0.0161923720719, "time": 0.0112115188626, "alreadi": 0.670478380747, "smaller": 0.9530830530519999, "comput": 1.36806891594, "divid": 0.8402679544589999, "recomput": 7.033506484289999, "address": 1.05137103247, "program": 0.7037855787649999, "bottomup": 7.033506484289999, "algorithm": 3.33044239518, "refer": 0.262553246798, "down": 0.306673741186, "both": 0.050842533389300004, "greedi": 4.35444382006, "than": 0.0322608622182, "befor": 0.0956377718795, "which": 0.00517841384543, "say": 0.562154280552, "solut": 1.55346297627, "rememb": 1.5867691126199999, "memoiz": 7.033506484289999, "tri": 0.61759152916, "local": 0.416867740206, "independ": 0.463424162503, "can": 0.162341096394, "into": 0.0149128632287, "the": 0.0, "possibl": 0.348805474891, "cours": 0.765899404133, "and": 6.29901420636e-05, "problem": 0.569140724273, "result": 0.136378908381, "their": 0.015360505122700001, "will": 0.202786534915, "overal": 1.1132694464700001, "then": 0.08303386523089999, "where": 0.0649921387457, "contrast": 1.0589701282, "output": 2.03822657827, "dynam": 1.8756834711200001, "reus": 3.3940423897400005, "inhand": 7.033506484289999, "approach": 0.7302336145810001, "optim": 2.4456277954099996, "term": 0.33303898354600003, "break": 0.88733019029, "previous": 0.356602960063, "cycl": 1.68810108164, "these": 0.0715336194008, "use": 0.0292080197316, "yet": 0.754181309241, "subproblem": 7.033506484289999, "manner": 1.36905901503, "are": 0.0294674735827, "have": 0.0147850023412, "rather": 0.442714975539, "similar": 0.318556092114, "most": 0.020747896295599998, "that": 0.00397614837964, "follow": 0.045356911094199995, "order": 0.22014038079300002, "overlap": 2.4924939396, "combin": 0.529218310751, "not": 0.0155524130075, "bigger": 2.58248697813, "for": 0.00031499039539700004, "solv": 1.9836504770400003, "motiv": 1.61265547932, "topdown": 7.033506484289999, "best": 0.459227932947, "conquer": 2.08576027874, "unlik": 0.885954358842}, "freq": {"cheaper": 1, "achiev": 2, "examin": 1, "but": 1, "time": 1, "alreadi": 1, "smaller": 4, "comput": 1, "divid": 4, "recomput": 1, "address": 1, "program": 4, "bottomup": 1, "algorithm": 7, "refer": 1, "down": 1, "both": 1, "greedi": 1, "than": 1, "befor": 1, "which": 1, "say": 1, "solut": 5, "rememb": 2, "memoiz": 1, "tri": 2, "local": 1, "independ": 1, "can": 5, "into": 2, "the": 12, "possibl": 1, "cours": 1, "and": 8, "problem": 4, "result": 3, "their": 1, "will": 1, "overal": 2, "then": 1, "where": 3, "contrast": 2, "output": 3, "dynam": 8, "reus": 1, "inhand": 1, "approach": 2, "optim": 4, "term": 1, "break": 1, "previous": 2, "cycl": 1, "these": 3, "use": 7, "yet": 1, "subproblem": 11, "manner": 1, "are": 6, "have": 1, "rather": 1, "similar": 3, "most": 2, "that": 2, "follow": 1, "order": 1, "overlap": 1, "combin": 2, "not": 1, "bigger": 1, "for": 3, "solv": 5, "motiv": 1, "topdown": 1, "best": 1, "conquer": 3, "unlik": 1}, "logtfidf": {"cheaper": 2.8460185903500004, "achiev": 1.2541961702339999, "examin": 1.3482274812000001, "but": 0.0161923720719, "time": 0.0112115188626, "alreadi": 0.670478380747, "smaller": 3.8123322122079997, "comput": 1.36806891594, "divid": 3.3610718178359997, "recomput": 7.033506484289999, "address": 1.05137103247, "program": 2.8151423150599997, "bottomup": 7.033506484289999, "algorithm": 23.31309676626, "refer": 0.262553246798, "down": 0.306673741186, "both": 0.050842533389300004, "greedi": 4.35444382006, "than": 0.0322608622182, "befor": 0.0956377718795, "which": 0.00517841384543, "say": 0.562154280552, "solut": 7.76731488135, "rememb": 3.1735382252399997, "memoiz": 7.033506484289999, "tri": 1.23518305832, "local": 0.416867740206, "independ": 0.463424162503, "can": 0.8117054819699999, "into": 0.0298257264574, "the": 0.0, "possibl": 0.348805474891, "cours": 0.765899404133, "and": 0.0005039211365088, "problem": 2.276562897092, "result": 0.40913672514300004, "their": 0.015360505122700001, "will": 0.202786534915, "overal": 2.2265388929400003, "then": 0.08303386523089999, "where": 0.19497641623710002, "contrast": 2.1179402564, "output": 6.11467973481, "dynam": 15.005467768960001, "reus": 3.3940423897400005, "inhand": 7.033506484289999, "approach": 1.4604672291620002, "optim": 9.782511181639999, "term": 0.33303898354600003, "break": 0.88733019029, "previous": 0.713205920126, "cycl": 1.68810108164, "these": 0.2146008582024, "use": 0.2044561381212, "yet": 0.754181309241, "subproblem": 77.36857132719, "manner": 1.36905901503, "are": 0.17680484149620002, "have": 0.0147850023412, "rather": 0.442714975539, "similar": 0.9556682763419999, "most": 0.041495792591199995, "that": 0.00795229675928, "follow": 0.045356911094199995, "order": 0.22014038079300002, "overlap": 2.4924939396, "combin": 1.058436621502, "not": 0.0155524130075, "bigger": 2.58248697813, "for": 0.0009449711861910001, "solv": 9.918252385200002, "motiv": 1.61265547932, "topdown": 7.033506484289999, "best": 0.459227932947, "conquer": 6.25728083622, "unlik": 0.885954358842}}, "html": "<!DOCTYPE html>\n\n<!--[if IE 8]><html class=\"ie ie8\"> <![endif]-->\n<!--[if IE 9]><html class=\"ie ie9\"> <![endif]-->\n<!--[if gt IE 9]><!--> <html> <!--<![endif]-->\n<head>\n<meta charset=\"utf-8\"/>\n<title>Data Structures Dynamic Programming</title>\n<meta content=\"Data Structures Dynamic Programming - Learn Data Structures and Algorithm using c, C++ and Java in simple and easy steps starting from basic to advanced concepts with examples including Overview, Environment Setup, Algorithm, Asymptotic Analysis, Greedy Algorithms, Divide and Conquer, Dynamic Programming, Data Structures, Array, Linked List, Doubly Linked List, Circular List, Stack, Parsing Expression, Queue, Priority queue, Linear, Binary, Interpolation Search, Tree, Tree Traversal, Binary Search Tree, B+, AVL, Spanning, Tower of Hanoi, Hash Table, Heap, Graph, Depth, Breadth First Traversal, Search techniques, Sorting techniques, Sorting Algorithm, Bubble, Merge Sort Algorithm, Insertion, Selection, Shell, Quick Sort, Recursion, Fibonacci Series.\" name=\"Description\">\n<meta content=\"Overview, Environment Setup, Algorithm, Asymptotic Analysis, Greedy Algorithms, Divide and Conquer, Dynamic Programming, Data Structures, Array, Linked List, Doubly Linked List, Circular List, Stack, Parsing Expression, Queue, Priority queue, Linear, Binary, Interpolation Search, Tree, Tree Traversal, Binary Search Tree, B+, AVL, Spanning, Tower of Hanoi, Hash Table, Heap, Graph, Depth, Breadth First Traversal, Search techniques, Sorting techniques, Sorting Algorithm, Bubble, Merge Sort Algorithm, Insertion, Selection, Shell, Quick Sort, Recursion, Fibonacci Series.\" name=\"Keywords\"/>\n<base href=\"https://www.tutorialspoint.com/\"/>\n<link href=\"/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"/>\n<meta content=\"width=device-width,initial-scale=1.0,user-scalable=yes\" name=\"viewport\"/>\n<meta content=\"en_US\" property=\"og:locale\">\n<meta content=\"website\" property=\"og:type\"/>\n<meta content=\"471319149685276\" property=\"fb:app_id\"/>\n<meta content=\"www.tutorialspoint.com\" property=\"og:site_name\"/>\n<meta content=\"yes\" name=\"apple-mobile-web-app-capable\"/>\n<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"/>\n<meta content=\"tutorialspoint.com\" name=\"author\"/>\n<script src=\"https://www.tutorialspoint.com/theme/js/script-min-v4.js?v=2\" type=\"text/javascript\"></script>\n<link href=\"https://www.tutorialspoint.com/theme/css/style-min.css?v=3.1\" rel=\"stylesheet\"/>\n<script>\r\nfunction openNav() {\t\r\n  document.getElementById(\"mySidenav\").style.width = \"250px\";\r\n  document.getElementById(\"right_obs\").style.display = \"block\";\r\n}\r\nfunction closeNav() {\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\nfunction close_obs_sidenav(){\r\n  document.getElementById(\"mySidenav\").style.width = \"0\";\r\n  document.getElementById(\"right_obs\").style.display = \"none\";\r\n}\r\n</script>\n<!-- Head Libs -->\n<!--[if IE 8]>\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/theme/css/ie8.css\">\r\n<![endif]-->\n<style>\r\n#privacy-banner {\r\n    position: fixed;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    max-width: 100%;\r\n    padding: 1rem .5rem;\r\n    background: #fff;\r\n    z-index: 1030;\r\n    color: #000;\r\n    font-size: 14px;\r\n    margin: 0;\r\n    display: none;\r\n    border-top: 2px solid rgb(130, 130, 130);\r\n  }\r\n  #privacy-banner p {\r\n    margin: 0;\r\n    color: #000;\r\n    text-align: center;\r\n  }\r\n  #privacy-banner a {\r\n    text-decoration: none;\r\n    margin: 20px auto 0 auto;\r\n    display: block;\r\n    max-width: 150px;\r\n  }\r\n  #privacy-banner a:hover {\r\n    text-decoration: underline;\r\n  }\r\n  #banner-learn {\r\n    color: #000;\r\n  }\r\n  #banner-accept {\r\n    padding: 7px 15px;\r\n    color: #fff;\r\n    border-radius: 5px;\r\n    background:#737373 !important;\r\n  }\r\n  @media (min-width: 768px) {\r\n    #privacy-banner {\r\n      padding: 1.5rem .5rem;\r\n    }\r\n    #privacy-banner a {\r\n      display: inline-block;\r\n      margin: 0 10px;\r\n    }\r\n}\r\nselect{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }\r\n.btnsbmt{ background: #cd3300 !important;}\r\nul.nav-list.primary>li a.videolink{    background: none; margin: 0px; padding: 0px; border: 1px solid #d6d6d6;}\r\ndiv.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #cd3300 url(/images/pattern.png) repeat center center !important;}\r\n.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #cd3300 !important;}\r\n.submenu-item{ border-bottom: 2px solid #cd3300 !important; border-top: 2px solid #cd3300 !important }\r\n.ace_scroller{overflow: auto!important;}\r\na.demo{font-family: \"Open Sans\",Arial,sans-serif; background:#cd3300; color:#fff; font-size:13px; padding:3px 10px; border:1px solid #d6d6d6; position:absolute; right:5px; margin:-6px 17px 0px 0px;}\r\na.demo:hover{opacity:.8}\r\n</style>\n<script>\r\n$(document).ready(function() {\r\n  $('input[name=\"q\"]').keydown(function(event){\r\n    if(event.keyCode == 13) {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n  });\r\n});\r\n</script>\n</meta></meta></head>\n<body onload=\"prettyPrint()\">\n<div class=\"wrapLoader\">\n<div class=\"imgLoader\">\n<img alt=\"\" height=\"70\" src=\"/images/loading-cg.gif\" width=\"70\"/>\n</div>\n</div>\n<div class=\"display-none\" id=\"right_obs\" onclick=\"close_obs_sidenav()\"></div>\n<header>\n<div class=\"container\">\n<h1 class=\"logo\">\n<a href=\"index.htm\" title=\"tutorialspoint\">\n<img alt=\"tutorialspoint\" src=\"/data_structures_algorithms/images/logo.png\"/>\n</a>\n</h1>\n<ul class=\"tp-inline-block pull-right\" id=\"tp-head-icons\">\n<li>\n<div class=\"tp-second-nav tp-display-none tp-pointer\" onclick=\"openNav()\">\n<i class=\"fa fa-th-large fa-lg\"></i>\n</div>\n</li>\n</ul>\n<button class=\"btn btn-responsive-nav btn-inverse\" data-target=\".nav-main-collapse\" data-toggle=\"collapse\" id=\"pull\" style=\"top: 24px!important\"> <i class=\"icon icon-bars\"></i> </button>\n<nav>\n<ul class=\"nav nav-pills nav-top\">\n<li><a href=\"/about/about_careers.htm\" style=\"background: #fffb09; font-weight: bold;\"><i class=\"icon icon-suitcase\"></i> Jobs</a></li>\n<li> <a href=\"/programming_examples/\" target=\"_blank\"><i class=\"fa fa-cubes\"></i> \u00a0Examples</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/whiteboard.htm\"><img alt=\"Whiteboard\" src=\"theme/css/icons/image-editor.png\" title=\"Whiteboard\"/> \u00a0Whiteboard</a> </li>\n<li> <a href=\"https://www.tutorialspoint.com/netmeeting.php\"><i class=\"fa-camera\"></i> \u00a0Net Meeting</a> </li>\n<li> <a href=\"/online_dev_tools.htm\"> <i class=\"dev-tools-menu\" style=\"opacity:.5\"></i> Tools </a> </li>\n<li> <a href=\"/articles/index.php\"><i class=\"icon icon-file-text-o\"></i> \u00a0Articles</a> </li>\n<li class=\"top-icons\">\n<ul class=\"social-icons\">\n<li class=\"facebook\"><a data-placement=\"bottom\" href=\"https://www.facebook.com/tutorialspointindia\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Facebook\">Facebook</a></li>\n<li class=\"googleplus\"><a data-placement=\"bottom\" href=\"https://plus.google.com/u/0/116678774017490391259/posts\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Google+\">Google+</a></li>\n<li class=\"twitter\"><a data-placement=\"bottom\" href=\"https://www.twitter.com/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Twitter\">Twitter</a></li>\n<li class=\"linkedin\"><a data-placement=\"bottom\" href=\"https://www.linkedin.com/company/tutorialspoint\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint @ Linkedin\">Linkedin</a></li>\n<li class=\"youtube\"><a data-placement=\"bottom\" href=\"https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg\" rel=\"nofollow\" target=\"_blank\" title=\"tutorialspoint YouTube\">YouTube</a></li>\n</ul>\n</li>\n</ul>\n</nav>\n</div>\n<div class=\"sidenav\" id=\"mySidenav\">\n<div class=\"navbar nav-main\">\n<div class=\"container\">\n<nav class=\"nav-main mega-menu\">\n<ul class=\"nav nav-pills nav-main\" id=\"mainMenu\">\n<li class=\"dropdown no-sub-menu\"> <a class=\"dropdown\" href=\"index.htm\"><i class=\"icon icon-home\"></i> Home</a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"/questions/index.php\"><i class=\"fa fa-send\"></i> Q/A </a> </li>\n<li class=\"dropdown\"><a class=\"dropdown\" href=\"tutorialslibrary.htm\"><span class=\"tut-lib\"> Library </span></a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"videotutorials/index.htm\"><i class=\"fa-toggle-right\"></i> Videos </a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"tutor_connect/index.php\"><i class=\"fa-user\"> </i> Tutors</a></li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"codingground.htm\"><i class=\"fa-code\"></i> Coding Ground </a> </li>\n<li class=\"dropdown no-sub-menu\"><a class=\"dropdown\" href=\"https://store.tutorialspoint.com/\"><i class=\"fa-usd\"></i> Store </a> </li>\n<li class=\"dropdown no-sub-menu\">\n<div class=\"searchform-popup\">\n<input autocomplete=\"off\" class=\"header-search-box\" id=\"search-string\" name=\"q\" onblur=\"if (this.value == '') {this.value = 'Search your favorite tutorials...';}\" onfocus=\"if (this.value == 'Search your favorite tutorials...') {this.value = '';}\" placeholder=\"Search your favorite tutorials...\" type=\"text\"/>\n<div class=\"magnifying-glass\"><i class=\"icon-search\"></i> Search </div>\n</div>\n</li>\n</ul>\n</nav>\n</div>\n</div>\n</div>\n</header></body></html>\n\n<div style=\"clear:both;\"></div>\n<div class=\"main\" role=\"main\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-2\">\n<aside class=\"sidebar\">\n<style>\r\n.ts {\r\n   text-align:center !important;\r\n   vertical-align:middle !important;\r\n}\r\n</style>\n<div class=\"mini-logo\">\n<img alt=\"Data Structures &amp; Algorithms Tutorial\" src=\"/data_structures_algorithms/images/data-structure-mini-logo.jpg\">\n</img></div>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Data Structures &amp; Algorithms</li>\n<li><a href=\"/data_structures_algorithms/index.htm\">DSA - Home</a></li>\n<li><a href=\"/data_structures_algorithms/data_structure_overview.htm\">DSA - Overview</a></li>\n<li><a href=\"/data_structures_algorithms/data_structure_environment.htm\">DSA - Environment Setup</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Algorithm</li>\n<li><a href=\"/data_structures_algorithms/algorithms_basics.htm\">DSA - Algorithms Basics</a></li>\n<li><a href=\"/data_structures_algorithms/asymptotic_analysis.htm\">DSA - Asymptotic Analysis</a></li>\n<li><a href=\"/data_structures_algorithms/greedy_algorithms.htm\">DSA - Greedy Algorithms</a></li>\n<li><a href=\"/data_structures_algorithms/divide_and_conquer.htm\">DSA - Divide and Conquer</a></li>\n<li><a href=\"/data_structures_algorithms/dynamic_programming.htm\">DSA - Dynamic Programming</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Data Structures</li>\n<li><a href=\"/data_structures_algorithms/data_structures_basics.htm\">DSA - Data Structure Basics</a></li>\n<li><a href=\"/data_structures_algorithms/array_data_structure.htm\">DSA - Array Data Structure</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Linked Lists</li></ul></aside></div></div></div></div>\n<li><a href=\"/data_structures_algorithms/linked_list_algorithms.htm\">DSA - Linked List Basics</a></li>\n<li><a href=\"/data_structures_algorithms/doubly_linked_list_algorithm.htm\">DSA - Doubly Linked List</a></li>\n<li><a href=\"/data_structures_algorithms/circular_linked_list_algorithm.htm\">DSA - Circular Linked List</a></li>\n\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Stack &amp; Queue</li>\n<li><a href=\"/data_structures_algorithms/stack_algorithm.htm\">DSA - Stack</a></li>\n<li><a href=\"/data_structures_algorithms/expression_parsing.htm\">DSA - Expression Parsing</a></li>\n<li><a href=\"/data_structures_algorithms/dsa_queue.htm\">DSA - Queue</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Searching Techniques</li>\n<!--<li style=\"background:yellow;\"><a href=\"/data_structures_algorithms/searching_algorithms.htm\">DSA - Searching Algorithms</a></li>-->\n<li><a href=\"/data_structures_algorithms/linear_search_algorithm.htm\">DSA - Linear Search</a></li>\n<li><a href=\"/data_structures_algorithms/binary_search_algorithm.htm\">DSA - Binary Search</a></li>\n<li><a href=\"/data_structures_algorithms/interpolation_search_algorithm.htm\">DSA - Interpolation Search</a></li>\n<li><a href=\"/data_structures_algorithms/hash_data_structure.htm\">DSA - Hash Table</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Sorting Techniques</li>\n<li><a href=\"/data_structures_algorithms/sorting_algorithms.htm\">DSA - Sorting Algorithms</a></li>\n<li><a href=\"/data_structures_algorithms/bubble_sort_algorithm.htm\">DSA - Bubble Sort</a></li>\n<li><a href=\"/data_structures_algorithms/insertion_sort_algorithm.htm\">DSA - Insertion Sort</a></li>\n<li><a href=\"/data_structures_algorithms/selection_sort_algorithm.htm\">DSA - Selection Sort</a></li>\n<li><a href=\"/data_structures_algorithms/merge_sort_algorithm.htm\">DSA - Merge Sort</a></li>\n<li><a href=\"/data_structures_algorithms/shell_sort_algorithm.htm\">DSA - Shell Sort</a></li>\n<li><a href=\"/data_structures_algorithms/quick_sort_algorithm.htm\">DSA - Quick Sort</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Graph Data Structure</li>\n<li><a href=\"/data_structures_algorithms/graph_data_structure.htm\">DSA - Graph Data Structure</a></li>\n<li><a href=\"/data_structures_algorithms/depth_first_traversal.htm\">DSA - Depth First Traversal</a></li>\n<li><a href=\"/data_structures_algorithms/breadth_first_traversal.htm\">DSA - Breadth First Traversal</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Tree Data Structure</li>\n<li><a href=\"/data_structures_algorithms/tree_data_structure.htm\">DSA - Tree Data Structure</a></li>\n<li><a href=\"/data_structures_algorithms/tree_traversal.htm\">DSA - Tree Traversal</a></li>\n<li><a href=\"/data_structures_algorithms/binary_search_tree.htm\">DSA - Binary Search Tree</a></li>\n<li><a href=\"/data_structures_algorithms/avl_tree_algorithm.htm\">DSA - AVL Tree</a></li>\n<li><a href=\"/data_structures_algorithms/spanning_tree.htm\">DSA - Spanning Tree</a></li>\n<li><a href=\"/data_structures_algorithms/heap_data_structure.htm\">DSA - Heap</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">Recursion</li>\n<li><a href=\"/data_structures_algorithms/recursion_basics.htm\">DSA - Recursion Basics</a></li>\n<li><a href=\"/data_structures_algorithms/tower_of_hanoi.htm\">DSA - Tower of Hanoi</a></li>\n<li><a href=\"/data_structures_algorithms/fibonacci_series.htm\">DSA - Fibonacci Series</a></li>\n</ul>\n<ul class=\"nav nav-list primary left-menu\">\n<li class=\"heading\">DSA Useful Resources</li>\n<li><a href=\"/data_structures_algorithms/data_structures_algorithms_questions_answers.htm\">DSA - Questions and Answers</a></li>\n<li><a href=\"/data_structures_algorithms/dsa_quick_guide.htm\">DSA - Quick Guide</a></li>\n<li><a href=\"/data_structures_algorithms/dsa_useful_resources.htm\">DSA - Useful Resources</a></li>\n<li><a href=\"/data_structures_algorithms/dsa_discussion.htm\">DSA - Discussion</a></li>\n</ul>\n<ul class=\"nav nav-list primary push-bottom left-menu special\">\n<li class=\"sreading\">Selected Reading</li>\n<li><a href=\"/upsc_ias_exams.htm\" target=\"_top\">UPSC IAS Exams Notes</a></li>\n<li><a href=\"/developers_best_practices/index.htm\" target=\"_top\">Developer's Best Practices</a></li>\n<li><a href=\"/questions_and_answers.htm\" target=\"_top\">Questions and Answers</a></li>\n<li><a href=\"/effective_resume_writing.htm\" target=\"_top\">Effective Resume Writing</a></li>\n<li><a href=\"/hr_interview_questions/index.htm\" target=\"_top\">HR Interview Questions</a></li>\n<li><a href=\"/computer_glossary.htm\" target=\"_top\">Computer Glossary</a></li>\n<li><a href=\"/computer_whoiswho.htm\" target=\"_top\">Who is Who</a></li>\n</ul>\n\n\n<!-- PRINTING STARTS HERE -->\n<div class=\"row\">\n<div class=\"content\">\n<div class=\"col-md-7 middle-col\">\n<h1>Data Structures - Dynamic Programming</h1>\n<hr/>\n<div style=\"padding-bottom:5px;padding-left:10px;text-align:center\">Advertisements</div>\n<div style=\"text-align: center;\">\n<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 468;\ngoogle_ad_height = 60;\ngoogle_ad_format = \"468x60_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel = \"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\" type=\"text/javascript\">\n</script>\n</div>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/data_structures_algorithms/divide_and_conquer.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/data_structures_algorithms/data_structures_basics.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<div class=\"clearer\"></div>\n<hr/>\n<p>Dynamic programming approach is similar to divide and conquer in breaking down the problem into smaller and yet smaller possible sub-problems. But unlike, divide and conquer, these sub-problems are not solved independently. Rather, results of these smaller sub-problems are remembered and used for similar or overlapping sub-problems.</p>\n<p>Dynamic programming is used where we have problems, which can be divided into similar sub-problems, so that their results can be re-used. Mostly, these algorithms are used for optimization. Before solving the in-hand sub-problem, dynamic algorithm will try to examine the results of the previously solved sub-problems. The solutions of sub-problems are combined in order to achieve the best solution.</p>\n<p>So we can say that \u2212</p>\n<ul class=\"list\">\n<li><p>The problem should be able to be divided into smaller overlapping sub-problem.</p></li>\n<li><p>An optimum solution can be achieved by using an optimum solution of smaller sub-problems.</p></li>\n<li><p>Dynamic algorithms use Memoization.</p></li>\n</ul>\n<h2>Comparison</h2>\n<p>In contrast to greedy algorithms, where local optimization is addressed, dynamic algorithms are motivated for an overall optimization of the problem.</p>\n<p>In contrast to divide and conquer algorithms, where solutions are combined to achieve an overall solution, dynamic algorithms use the output of a smaller sub-problem and then try to optimize a bigger sub-problem. Dynamic algorithms use Memoization to remember the output of already solved sub-problems.</p>\n<h3>Example</h3>\n<p>The following computer problems can be solved using dynamic programming approach \u2212</p>\n<ul class=\"list\">\n<li>Fibonacci number series</li>\n<li>Knapsack problem</li>\n<li>Tower of Hanoi</li>\n<li>All pair shortest path by Floyd-Warshall</li>\n<li>Shortest path by Dijkstra</li>\n<li>Project scheduling</li>\n</ul>\n<p>Dynamic programming can be used in both top-down and bottom-up manner. And of course, most of the times, referring to the previous solution output is cheaper than recomputing in terms of CPU cycles.</p>\n<hr/>\n<div class=\"pre-btn\">\n<a href=\"/data_structures_algorithms/divide_and_conquer.htm\"><i class=\"icon icon-arrow-circle-o-left big-font\"></i> Previous Page</a>\n</div>\n<div class=\"print-btn center\">\n<a href=\"/cgi-bin/printpage.cgi\" target=\"_blank\"><i class=\"icon icon-print big-font\"></i> Print</a>\n</div>\n<div class=\"nxt-btn\">\n<a href=\"/data_structures_algorithms/data_structures_basics.htm\">Next Page <i class=\"icon icon-arrow-circle-o-right big-font\"></i>\u00a0</a>\n</div>\n<hr/>\n<!-- PRINTING ENDS HERE -->\n<div class=\"bottomgooglead\">\n<div class=\"bottomadtag\">Advertisements</div>\n<script><!--\nvar width = 580;\nvar height = 400;\nvar format = \"580x400_as\";\nif( window.innerWidth < 468 ){\n   width = 300;\n   height = 250;\n   format = \"300x250_as\";\n}\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = width;\ngoogle_ad_height = height;\ngoogle_ad_format = format;\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n<div class=\"row\">\n<div class=\"col-md-3\" id=\"rightbar\">\n<div class=\"simple-ad\">\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.facebook.com/sharer.php?u=' + 'https://www.tutorialspoint.com/data_structures_algorithms/dynamic_programming.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/facebookIcon.jpg\">\n</img></a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://twitter.com/share?url=' + 'https://www.tutorialspoint.com/data_structures_algorithms/dynamic_programming.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/twitterIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'https://www.tutorialspoint.com/data_structures_algorithms/dynamic_programming.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/linkedinIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=https://www.tutorialspoint.com/data_structures_algorithms/dynamic_programming.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/googlePlusIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.stumbleupon.com/submit?url=https://www.tutorialspoint.com/data_structures_algorithms/dynamic_programming.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/StumbleUponIcon.jpg\"/>\n</a>\n<a href=\"javascript:void(0)\" onclick=\"var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://reddit.com/submit?url=https://www.tutorialspoint.com/data_structures_algorithms/dynamic_programming.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;\">\n<img alt=\"img\" src=\"/images/reddit.jpg\"/>\n</a>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\ngoogle_ad_format = \"300x250_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"pub-7133395778201029\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 600;\ngoogle_ad_format = \"300x600_as\";\ngoogle_ad_type = \"image\";\ngoogle_ad_channel =\"\";\n//--></script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n<div class=\"rightgooglead\">\n<script><!--\ngoogle_ad_client = \"ca-pub-2537027957187252\";\n/* Right Side Ad */\ngoogle_ad_slot = \"right_side_ad\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;\n//-->\n</script>\n<script src=\"https://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>\n</div>\n</div>\n</div>\n</div>\n\n\n<div class=\"footer-copyright\">\n<div class=\"container\">\n<div class=\"row\">\n<div class=\"col-md-1\">\n<a class=\"logo\" href=\"index.htm\"> <img alt=\"Tutorials Point\" class=\"img-responsive\" src=\"/scripts/img/logo-footer.png\"/> </a>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<nav id=\"sub-menu\">\n<ul>\n<li><a href=\"/about/about_privacy.htm\">Privacy Policy</a></li>\n<li><a href=\"/about/about_cookies.htm\">Cookies Policy</a></li>\n<li><a href=\"/about/contact_us.htm\">Contact</a></li>\n</ul>\n</nav>\n</div>\n<div class=\"col-md-3 col-sm-12 col-xs-12\">\n<p>\u00a9 Copyright 2019. All Rights Reserved.</p>\n</div>\n<div class=\"col-md-4 col-sm-12 col-xs-12\">\n<div class=\"news-group\">\n<input autocomplete=\"off\" class=\"form-control-foot search\" id=\"textemail\" name=\"textemail\" onblur=\"if (this.value == '') {this.value = 'Enter email for newsletter...';}\" onfocus=\"if (this.value == 'Enter email for newsletter...') {this.value = '';}\" placeholder=\"Enter email for newsletter\" type=\"text\"/>\n<span class=\"input-group-btn\"> <button class=\"btn btn-default btn-footer\" id=\"btnemail\" onclick=\"javascript:void(0);\" type=\"submit\">go</button> </span>\n<div id=\"newsresponse\"></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n\n<div id=\"privacy-banner\">\n<div>\n<p>\n      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.\n      <a href=\"javascript:void(0)\" id=\"banner-accept\">Accept</a>\n<a href=\"/about/about_cookies.htm\" id=\"banner-learn\" target=\"_blank\">Learn more</a>\n</p>\n</div>\n</div>\n<script>\n// Banner Trigger if Not Closed\nif (!localStorage.bannerClosed) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n} else {\n  document.getElementById('privacy-banner').style.display = \"none\";\n}\ndocument.getElementById('banner-accept').addEventListener('click', function() {\n  document.getElementById('privacy-banner').style.display = \"none\";\n  localStorage.bannerClosed = 'true';\n});\nif (navigator.userAgent.match(/Opera|OPR\\//)) {\n  document.getElementById('privacy-banner').style.display = \"inherit\";\n}\n</script>\n<!-- Libs -->\n<script src=\"/theme/js/custom-min.js?v=7\"></script>\n<script src=\"https://www.google-analytics.com/urchin.js\">\n</script>\n<script>\n_uacct = \"UA-232293-6\";\nurchinTracker();\n$('.pg-icon').click(function(){\n   $('.wrapLoader').show();\n});\n</script>\n\n\n\n", "content_html": "<p>Dynamic programming approach is similar to divide and conquer in breaking down the problem into smaller and yet smaller possible sub-problems. But unlike, divide and conquer, these sub-problems are not solved independently. Rather, results of these smaller sub-problems are remembered and used for similar or overlapping sub-problems.</p> <p>Dynamic programming is used where we have problems, which can be divided into similar sub-problems, so that their results can be re-used. Mostly, these algorithms are used for optimization. Before solving the in-hand sub-problem, dynamic algorithm will try to examine the results of the previously solved sub-problems. The solutions of sub-problems are combined in order to achieve the best solution.</p> <p>So we can say that \u2212</p> <p>In contrast to greedy algorithms, where local optimization is addressed, dynamic algorithms are motivated for an overall optimization of the problem.</p> <p>In contrast to divide and conquer algorithms, where solutions are combined to achieve an overall solution, dynamic algorithms use the output of a smaller sub-problem and then try to optimize a bigger sub-problem. Dynamic algorithms use Memoization to remember the output of already solved sub-problems.</p> <p>The following computer problems can be solved using dynamic programming approach \u2212</p> <p>Dynamic programming can be used in both top-down and bottom-up manner. And of course, most of the times, referring to the previous solution output is cheaper than recomputing in terms of CPU cycles.</p> ", "content": "Dynamic programming approach is similar to divide and conquer in breaking down the problem into smaller and yet smaller possible sub-problems. But unlike, divide and conquer, these sub-problems are not solved independently. Rather, results of these smaller sub-problems are remembered and used for similar or overlapping sub-problems. Dynamic programming is used where we have problems, which can be divided into similar sub-problems, so that their results can be re-used. Mostly, these algorithms are used for optimization. Before solving the in-hand sub-problem, dynamic algorithm will try to examine the results of the previously solved sub-problems. The solutions of sub-problems are combined in order to achieve the best solution. So we can say that \u2212 In contrast to greedy algorithms, where local optimization is addressed, dynamic algorithms are motivated for an overall optimization of the problem. In contrast to divide and conquer algorithms, where solutions are combined to achieve an overall solution, dynamic algorithms use the output of a smaller sub-problem and then try to optimize a bigger sub-problem. Dynamic algorithms use Memoization to remember the output of already solved sub-problems. The following computer problems can be solved using dynamic programming approach \u2212 Dynamic programming can be used in both top-down and bottom-up manner. And of course, most of the times, referring to the previous solution output is cheaper than recomputing in terms of CPU cycles.", "read_time": 67.2, "title_html": "<h1>Data Structures - Dynamic Programming</h1> ", "url": "https://www.tutorialspoint.com/data_structures_algorithms/dynamic_programming.htm"}