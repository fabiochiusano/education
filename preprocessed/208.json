{"content": "comments By Cecelia Shao , Comet.ml How many times have you run the following snippets: import torchvision.models as models\r inception =  or from keras.applications.inception_v3 import InceptionV3\r base_model =  It seems like using these pre-trained models have become a new standard for industry best practices. After all, why\u00a0 wouldn\u2019t \u00a0you take advantage of a model that\u2019s been trained on more data and compute than you could ever muster by yourself? See the discussion on\u00a0 Reddit \u00a0and\u00a0 HackerNews \u00a0 Long live pre-trained models! \u00a0 There are several substantial benefits to leveraging pre-trained models: super simple to incorporate achieve solid (same or even better) model performance quickly there\u2019s not as much labeled data required versatile uses cases from transfer learning, prediction, and feature extraction Advances within the NLP space have also encouraged the use of pre-trained language models like\u00a0 GPT and GPT-2 , AllenNLP\u2019s\u00a0 ELMo , Google\u2019s\u00a0 BERT , and Sebastian Ruder and Jeremy Howard\u2019s\u00a0 ULMFiT \u00a0(for an excellent over of these models, see\u00a0 this TOPBOTs post ). One common technique for leveraging pretrained models is feature extraction, where you\u2019re retrieving intermediate representations produced by the pretrained model and using those representations as inputs for a new model. These final fully-connected layers are generally assumed to capture information that is relevant for solving a new task. \u00a0 Everyone\u2019s in on the\u00a0game \u00a0 Every major framework like Tensorflow, Keras, PyTorch, MXNet, etc\u2026offers pre-trained models like Inception V3, ResNet, AlexNet with weights: Keras Applications PyTorch torchvision.models Tensorflow Official Models\u00a0 (and now\u00a0 TensorFlow Hubs ) MXNet Model Zoo Fast.ai Applications", "title_html": "<h1 id=\"title\">Approach pre-trained deep learning models with caution</h1> ", "url": "https://www.kdnuggets.com/2019/04/approach-pre-trained-deep-learning-models-caution.html", "tfidf": {"tfidf": {"after": 1.02070207021, "cecelia": 933.882352941, "label": 4.47715736041, "googl": 11.388809182200001, "hackernew": 933.882352941, "featur": 3.05425163524, "pytorch": 1867.764705882, "cometml": 933.882352941, "mxnet": 1867.764705882, "howard": 5.9909433962300005, "fastai": 933.882352941, "space": 2.39818731118, "kerasapplicationsinceptionvnum": 933.882352941, "long": 1.2657259028899999, "see": 2.54484251022, "layer": 8.14153846154, "elmo": 186.776470588, "pretrain": 6537.176470587, "whi": 3.2566153846200003, "the": 6.0, "sever": 1.07241286139, "those": 1.19548192771, "like": 4.596742671, "fullyconnect": 933.882352941, "practic": 1.70434782609, "resnet": 933.882352941, "super": 7.380753138080001, "weight": 4.878918254459999, "solv": 7.26923076923, "produc": 1.36932896326, "requir": 1.52844902282, "use": 4.1185550295199995, "kera": 1671.1578947360001, "languag": 2.29488291414, "this": 1.00379362671, "transfer": 2.72549356223, "substanti": 3.4777656078900003, "from": 2.00113442994, "basemodel": 933.882352941, "versatil": 33.1440501044, "ever": 1.9697270471500001, "post": 2.23826307627, "sebastian": 26.8175675676, "been": 1.0239277652399998, "run": 1.55692850838, "how": 1.60250328051, "excel": 4.84467500763, "retriev": 2.16826003824, "solid": 6.37334403854, "muster": 47.8192771084, "everi": 1.47917637194, "simpl": 3.3981164383599998, "for": 5.0015752000500004, "than": 1.03278688525, "predict": 5.18484650555, "quick": 2.205, "standard": 1.8915763135900003, "all": 1.01146788991, "everyon": 6.3964544722, "etc\u2026off": 933.882352941, "with": 1.0011982089899998, "incept": 33.7070063694, "mani": 1.04426757877, "leverag": 71.5135135136, "ruder": 835.5789473680001, "over": 1.02525024217, "better": 2.0065722952500002, "case": 1.48498737256, "snippet": 135.692307692, "that": 2.0079681275, "jeremi": 16.2165474974, "seem": 2.29123971713, "incorpor": 2.62847682119, "new": 3.0536641662, "more": 1.0171706817, "and": 8.00050393704, "perform": 1.5313977042500002, "same": 1.11857958148, "extract": 15.406113537120001, "discuss": 2.19676214197, "achiev": 1.87216981132, "there": 2.08182533438, "benefit": 3.06841901817, "final": 1.34008609775, "inform": 1.5753125620200001, "yourself": 26.592964824099997, "these": 3.22246278756, "general": 1.1218202374200001, "could": 1.2043695949, "topbot": 933.882352941, "applic": 6.85344269372, "comment": 3.05954904606, "best": 1.5828514456600002, "inceptionvnum": 933.882352941, "have": 3.0446845234199995, "shao": 337.787234043, "even": 1.16461267606, "tensorflow": 2801.647058823, "take": 1.13961668222, "advantag": 3.32412060302, "comput": 3.9277585353800006, "follow": 1.04640126549, "now": 1.160780873, "zoo": 21.483085250300004, "reddit": 529.2, "train": 1.9365698950999999, "model": 29.2683697656, "industri": 2.02319357716, "represent": 11.85660941, "much": 1.1942229577299999, "framework": 8.200413223139998, "advanc": 1.9997480791, "common": 1.4025974025999999, "also": 1.01476510067, "data": 6.75287111868, "time": 1.01127460348, "one": 1.00627495722, "assum": 2.9575260804799997, "encourag": 2.7975330396499998, "task": 3.88641370869, "major": 1.14852058164, "relev": 6.938811188810001, "offici": 1.40483143085, "are": 2.05981187156, "becom": 1.12492028626, "not": 1.01567398119, "import": 2.6803984467400004, "game": 2.57978550536, "live": 1.30591428806, "input": 12.2029208301, "alexnet": 933.882352941, "ulmfit": 933.882352941, "intermedi": 11.4380403458, "captur": 2.88026124819, "hub": 10.4722955145, "where": 1.06715063521, "within": 1.2369302688, "torchvisionmodel": 1867.764705882, "learn": 2.32275054865, "allennlp": 933.882352941, "techniqu": 3.7293868921800004}, "logtfidf": {"after": 0.020490694648099998, "cecelia": 6.83935046985, "label": 1.49898832727, "googl": 2.43263122258, "hackernew": 6.83935046985, "featur": 0.846774836284, "pytorch": 13.6787009397, "cometml": 6.83935046985, "mxnet": 13.6787009397, "howard": 1.7902488949200002, "fastai": 6.83935046985, "space": 0.874713164972, "kerasapplicationsinceptionvnum": 6.83935046985, "long": 0.235645793878, "see": 0.481843170984, "layer": 2.0969791623500003, "elmo": 5.22991255741, "pretrain": 47.87545328895, "whi": 1.18068843047, "the": 0.0, "sever": 0.06991112039689999, "those": 0.17854939087299998, "like": 0.55621430618, "fullyconnect": 6.83935046985, "practic": 0.533182530867, "resnet": 6.83935046985, "super": 1.9988756846400002, "weight": 1.58492352612, "solv": 1.9836504770400003, "produc": 0.314320812003, "requir": 0.424253510675, "use": 0.1168320789264, "kera": 13.45624966948, "languag": 0.8306818244059999, "this": 0.0037864490525, "transfer": 1.00264953547, "substanti": 1.24639002087, "from": 0.001134108337732, "basemodel": 6.83935046985, "versatil": 3.50086321649, "ever": 0.6778949784020001, "post": 0.8057001527009999, "sebastian": 3.2890571790200003, "been": 0.023645982368400004, "run": 0.442714975539, "how": 0.47156695693000006, "excel": 1.5778801652, "retriev": 0.773925020223, "solid": 1.8521242986400002, "muster": 3.86742884499, "everi": 0.391485427421, "simpl": 1.2232212893899999, "for": 0.0015749519769850003, "than": 0.0322608622182, "predict": 1.6457402376899999, "quick": 0.790727508899, "standard": 0.63741050982, "all": 0.011402632097799998, "everyon": 1.8557438481400002, "etc\u2026off": 6.83935046985, "with": 0.00119749171339, "incept": 5.64911707866, "mani": 0.0433157581221, "leverag": 7.153478502939999, "ruder": 6.72812483474, "over": 0.0249367214957, "better": 0.6964279406, "case": 0.395406268889, "snippet": 4.91038987911, "that": 0.00795229675928, "jeremi": 2.78603217137, "seem": 0.829093032276, "incorpor": 0.9664045229739999, "new": 0.0531898405533, "more": 0.017024931599999998, "and": 0.0005039211365088, "perform": 0.42618085058, "same": 0.112059649604, "extract": 4.08323446602, "discuss": 0.78698452262, "achiev": 0.6270980851169999, "there": 0.080195785851, "benefit": 1.12116245116, "final": 0.292733863948, "inform": 0.454453704662, "yourself": 3.28064670051, "these": 0.2146008582024, "general": 0.114952578063, "could": 0.18595627229000003, "topbot": 6.83935046985, "applic": 2.46320785698, "comment": 1.11826753454, "best": 0.459227932947, "inceptionvnum": 6.83935046985, "have": 0.0443550070236, "shao": 5.822416212189999, "even": 0.152388564834, "tensorflow": 20.51805140955, "take": 0.130691962197, "advantag": 1.20120515883, "comput": 1.36806891594, "follow": 0.045356911094199995, "now": 0.149092945021, "zoo": 3.06726589295, "reddit": 6.27136643224, "train": 0.660918312839, "model": 10.324301023554002, "industri": 0.7046772417749999, "represent": 3.5594765752999997, "much": 0.17749572930100002, "framework": 2.10418454607, "advanc": 0.6930212121780001, "common": 0.338325805271, "also": 0.0146571578, "data": 2.4336411696, "time": 0.0112115188626, "one": 0.0062553516455, "assum": 1.08435313525, "encourag": 1.02873797155, "task": 1.35748680661, "major": 0.138474663439, "relev": 1.9371304613999998, "offici": 0.339917317543, "are": 0.0589349471654, "becom": 0.11771217648900001, "not": 0.0155524130075, "import": 0.585636554132, "game": 0.9477062580210001, "live": 0.266903399347, "input": 2.50167533539, "alexnet": 6.83935046985, "ulmfit": 6.83935046985, "intermedi": 2.43694467284, "captur": 1.0578810012100002, "hub": 2.3487332477000002, "where": 0.0649921387457, "within": 0.21263272059799998, "torchvisionmodel": 13.6787009397, "learn": 0.842752064745, "allennlp": 6.83935046985, "techniqu": 1.31624384807}, "logidf": {"after": 0.020490694648099998, "cecelia": 6.83935046985, "label": 1.49898832727, "googl": 2.43263122258, "hackernew": 6.83935046985, "featur": 0.423387418142, "pytorch": 6.83935046985, "cometml": 6.83935046985, "mxnet": 6.83935046985, "howard": 1.7902488949200002, "fastai": 6.83935046985, "space": 0.874713164972, "kerasapplicationsinceptionvnum": 6.83935046985, "long": 0.235645793878, "see": 0.240921585492, "layer": 2.0969791623500003, "elmo": 5.22991255741, "pretrain": 6.83935046985, "whi": 1.18068843047, "the": 0.0, "sever": 0.06991112039689999, "those": 0.17854939087299998, "like": 0.139053576545, "fullyconnect": 6.83935046985, "practic": 0.533182530867, "resnet": 6.83935046985, "super": 1.9988756846400002, "weight": 1.58492352612, "solv": 1.9836504770400003, "produc": 0.314320812003, "requir": 0.424253510675, "use": 0.0292080197316, "kera": 6.72812483474, "languag": 0.8306818244059999, "this": 0.0037864490525, "transfer": 1.00264953547, "substanti": 1.24639002087, "from": 0.000567054168866, "basemodel": 6.83935046985, "versatil": 3.50086321649, "ever": 0.6778949784020001, "post": 0.8057001527009999, "sebastian": 3.2890571790200003, "been": 0.023645982368400004, "run": 0.442714975539, "how": 0.47156695693000006, "excel": 1.5778801652, "retriev": 0.773925020223, "solid": 1.8521242986400002, "muster": 3.86742884499, "everi": 0.391485427421, "simpl": 1.2232212893899999, "for": 0.00031499039539700004, "than": 0.0322608622182, "predict": 1.6457402376899999, "quick": 0.790727508899, "standard": 0.63741050982, "all": 0.011402632097799998, "everyon": 1.8557438481400002, "etc\u2026off": 6.83935046985, "with": 0.00119749171339, "incept": 2.82455853933, "mani": 0.0433157581221, "leverag": 3.5767392514699994, "ruder": 6.72812483474, "over": 0.0249367214957, "better": 0.6964279406, "case": 0.395406268889, "snippet": 4.91038987911, "that": 0.00397614837964, "jeremi": 2.78603217137, "seem": 0.829093032276, "incorpor": 0.9664045229739999, "new": 0.0177299468511, "more": 0.017024931599999998, "and": 6.29901420636e-05, "perform": 0.42618085058, "same": 0.112059649604, "extract": 2.04161723301, "discuss": 0.78698452262, "achiev": 0.6270980851169999, "there": 0.0400978929255, "benefit": 1.12116245116, "final": 0.292733863948, "inform": 0.454453704662, "yourself": 3.28064670051, "these": 0.0715336194008, "general": 0.114952578063, "could": 0.18595627229000003, "topbot": 6.83935046985, "applic": 1.23160392849, "comment": 1.11826753454, "best": 0.459227932947, "inceptionvnum": 6.83935046985, "have": 0.0147850023412, "shao": 5.822416212189999, "even": 0.152388564834, "tensorflow": 6.83935046985, "take": 0.130691962197, "advantag": 1.20120515883, "comput": 1.36806891594, "follow": 0.045356911094199995, "now": 0.149092945021, "zoo": 3.06726589295, "reddit": 6.27136643224, "train": 0.660918312839, "model": 0.7374500731110001, "industri": 0.7046772417749999, "represent": 1.7797382876499999, "much": 0.17749572930100002, "framework": 2.10418454607, "advanc": 0.6930212121780001, "common": 0.338325805271, "also": 0.0146571578, "data": 1.2168205848, "time": 0.0112115188626, "one": 0.0062553516455, "assum": 1.08435313525, "encourag": 1.02873797155, "task": 1.35748680661, "major": 0.138474663439, "relev": 1.9371304613999998, "offici": 0.339917317543, "are": 0.0294674735827, "becom": 0.11771217648900001, "not": 0.0155524130075, "import": 0.292818277066, "game": 0.9477062580210001, "live": 0.266903399347, "input": 2.50167533539, "alexnet": 6.83935046985, "ulmfit": 6.83935046985, "intermedi": 2.43694467284, "captur": 1.0578810012100002, "hub": 2.3487332477000002, "where": 0.0649921387457, "within": 0.21263272059799998, "torchvisionmodel": 6.83935046985, "learn": 0.842752064745, "allennlp": 6.83935046985, "techniqu": 1.31624384807}, "freq": {"after": 1, "cecelia": 1, "label": 1, "googl": 1, "hackernew": 1, "featur": 2, "pytorch": 2, "cometml": 1, "mxnet": 2, "howard": 1, "fastai": 1, "space": 1, "kerasapplicationsinceptionvnum": 1, "long": 1, "see": 2, "layer": 1, "elmo": 1, "pretrain": 7, "whi": 1, "the": 6, "sever": 1, "those": 1, "like": 4, "fullyconnect": 1, "practic": 1, "resnet": 1, "super": 1, "weight": 1, "solv": 1, "produc": 1, "requir": 1, "use": 4, "kera": 2, "languag": 1, "this": 1, "transfer": 1, "substanti": 1, "from": 2, "basemodel": 1, "versatil": 1, "ever": 1, "post": 1, "sebastian": 1, "been": 1, "run": 1, "how": 1, "excel": 1, "retriev": 1, "solid": 1, "muster": 1, "everi": 1, "simpl": 1, "for": 5, "than": 1, "predict": 1, "quick": 1, "standard": 1, "all": 1, "everyon": 1, "etc\u2026off": 1, "with": 1, "incept": 2, "mani": 1, "leverag": 2, "ruder": 1, "over": 1, "better": 1, "case": 1, "snippet": 1, "that": 2, "jeremi": 1, "seem": 1, "incorpor": 1, "new": 3, "more": 1, "and": 8, "perform": 1, "same": 1, "extract": 2, "discuss": 1, "achiev": 1, "there": 2, "benefit": 1, "final": 1, "inform": 1, "yourself": 1, "these": 3, "general": 1, "could": 1, "topbot": 1, "applic": 2, "comment": 1, "best": 1, "inceptionvnum": 1, "have": 3, "shao": 1, "even": 1, "tensorflow": 3, "take": 1, "advantag": 1, "comput": 1, "follow": 1, "now": 1, "zoo": 1, "reddit": 1, "train": 1, "model": 14, "industri": 1, "represent": 2, "much": 1, "framework": 1, "advanc": 1, "common": 1, "also": 1, "data": 2, "time": 1, "one": 1, "assum": 1, "encourag": 1, "task": 1, "major": 1, "relev": 1, "offici": 1, "are": 2, "becom": 1, "not": 1, "import": 2, "game": 1, "live": 1, "input": 1, "alexnet": 1, "ulmfit": 1, "intermedi": 1, "captur": 1, "hub": 1, "where": 1, "within": 1, "torchvisionmodel": 2, "learn": 1, "allennlp": 1, "techniqu": 1}, "idf": {"after": 1.02070207021, "cecelia": 933.882352941, "label": 4.47715736041, "googl": 11.388809182200001, "hackernew": 933.882352941, "featur": 1.52712581762, "pytorch": 933.882352941, "cometml": 933.882352941, "mxnet": 933.882352941, "howard": 5.9909433962300005, "fastai": 933.882352941, "space": 2.39818731118, "kerasapplicationsinceptionvnum": 933.882352941, "long": 1.2657259028899999, "see": 1.27242125511, "layer": 8.14153846154, "elmo": 186.776470588, "pretrain": 933.882352941, "whi": 3.2566153846200003, "the": 1.0, "sever": 1.07241286139, "those": 1.19548192771, "like": 1.14918566775, "fullyconnect": 933.882352941, "practic": 1.70434782609, "resnet": 933.882352941, "super": 7.380753138080001, "weight": 4.878918254459999, "solv": 7.26923076923, "produc": 1.36932896326, "requir": 1.52844902282, "use": 1.0296387573799999, "kera": 835.5789473680001, "languag": 2.29488291414, "this": 1.00379362671, "transfer": 2.72549356223, "substanti": 3.4777656078900003, "from": 1.00056721497, "basemodel": 933.882352941, "versatil": 33.1440501044, "ever": 1.9697270471500001, "post": 2.23826307627, "sebastian": 26.8175675676, "been": 1.0239277652399998, "run": 1.55692850838, "how": 1.60250328051, "excel": 4.84467500763, "retriev": 2.16826003824, "solid": 6.37334403854, "muster": 47.8192771084, "everi": 1.47917637194, "simpl": 3.3981164383599998, "for": 1.00031504001, "than": 1.03278688525, "predict": 5.18484650555, "quick": 2.205, "standard": 1.8915763135900003, "all": 1.01146788991, "everyon": 6.3964544722, "etc\u2026off": 933.882352941, "with": 1.0011982089899998, "incept": 16.8535031847, "mani": 1.04426757877, "leverag": 35.7567567568, "ruder": 835.5789473680001, "over": 1.02525024217, "better": 2.0065722952500002, "case": 1.48498737256, "snippet": 135.692307692, "that": 1.00398406375, "jeremi": 16.2165474974, "seem": 2.29123971713, "incorpor": 2.62847682119, "new": 1.0178880554, "more": 1.0171706817, "and": 1.00006299213, "perform": 1.5313977042500002, "same": 1.11857958148, "extract": 7.703056768560001, "discuss": 2.19676214197, "achiev": 1.87216981132, "there": 1.04091266719, "benefit": 3.06841901817, "final": 1.34008609775, "inform": 1.5753125620200001, "yourself": 26.592964824099997, "these": 1.07415426252, "general": 1.1218202374200001, "could": 1.2043695949, "topbot": 933.882352941, "applic": 3.42672134686, "comment": 3.05954904606, "best": 1.5828514456600002, "inceptionvnum": 933.882352941, "have": 1.0148948411399998, "shao": 337.787234043, "even": 1.16461267606, "tensorflow": 933.882352941, "take": 1.13961668222, "advantag": 3.32412060302, "comput": 3.9277585353800006, "follow": 1.04640126549, "now": 1.160780873, "zoo": 21.483085250300004, "reddit": 529.2, "train": 1.9365698950999999, "model": 2.0905978404, "industri": 2.02319357716, "represent": 5.928304705, "much": 1.1942229577299999, "framework": 8.200413223139998, "advanc": 1.9997480791, "common": 1.4025974025999999, "also": 1.01476510067, "data": 3.37643555934, "time": 1.01127460348, "one": 1.00627495722, "assum": 2.9575260804799997, "encourag": 2.7975330396499998, "task": 3.88641370869, "major": 1.14852058164, "relev": 6.938811188810001, "offici": 1.40483143085, "are": 1.02990593578, "becom": 1.12492028626, "not": 1.01567398119, "import": 1.3401992233700002, "game": 2.57978550536, "live": 1.30591428806, "input": 12.2029208301, "alexnet": 933.882352941, "ulmfit": 933.882352941, "intermedi": 11.4380403458, "captur": 2.88026124819, "hub": 10.4722955145, "where": 1.06715063521, "within": 1.2369302688, "torchvisionmodel": 933.882352941, "learn": 2.32275054865, "allennlp": 933.882352941, "techniqu": 3.7293868921800004}}, "html": "<!DOCTYPE html>\n\n<html lang=\"en-US\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head profile=\"http://gmpg.org/xfn/11\">\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n<title>  Approach pre-trained deep learning models with caution</title>\n<link href=\"/wp-content/themes/kdn17/images/favicon.ico\" rel=\"shortcut icon\"/>\n<link href=\"/wp-content/themes/kdn17/style.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"/wp-content/themes/kdn17/js/jquery-1.9.1.min.js\" type=\"text/javascript\"></script>\n<script src=\"/aps/kda_all.js\" type=\"text/javascript\"></script>\n<link href=\"/feed/\" rel=\"alternate\" title=\"KDnuggets: Analytics, Big Data, Data Mining and Data Science Feed\" type=\"application/rss+xml\"/>\n<link href=\"//s.w.org\" rel=\"dns-prefetch\"/>\n<link href=\"https://www.kdnuggets.com/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/comments/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/2019/04/approach-pre-trained-deep-learning-models-caution.html/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Approach pre-trained deep learning models with caution Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-json/\" rel=\"https://api.w.org/\"/>\n<link href=\"https://www.kdnuggets.com/xmlrpc.php?rsd\" rel=\"EditURI\" title=\"RSD\" type=\"application/rsd+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-includes/wlwmanifest.xml\" rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\"/>\n<link href=\"https://www.kdnuggets.com/2019/04/coursera-earn-deep-learning-certificate.html\" rel=\"prev\" title=\"Earn a Deep Learning Certificate\"/>\n<link href=\"https://www.kdnuggets.com/2019/04/worth-studying-data-science-masters.html\" rel=\"next\" title=\"Was it Worth Studying a Data Science Masters?\"/>\n<meta content=\"WordPress 4.9.10\" name=\"generator\">\n<link href=\"https://www.kdnuggets.com/2019/04/approach-pre-trained-deep-learning-models-caution.html\" rel=\"canonical\"/>\n<link href=\"https://www.kdnuggets.com/?p=93299\" rel=\"shortlink\"/>\n<link href=\"https://www.kdnuggets.com/2019/04/approach-pre-trained-deep-learning-models-caution.html\" rel=\"canonical\"/>\n<!-- BEGIN ExactMetrics v5.3.7 Universal Analytics - https://exactmetrics.com/ -->\n<script>\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-361129-1', 'auto');\n  ga('send', 'pageview');\n</script>\n<!-- END ExactMetrics Universal Analytics -->\n</meta></head>\n<body class=\"post-template-default single single-post postid-93299 single-format-standard\">\n<div class=\"main_wrapper\"><!-- publ: 23-Apr, 2019  -->\n<div id=\"wrapper\">\n<div id=\"header\">\n<div id=\"header_log\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<h1>KDnuggets</h1>\n<div class=\"text-container\">\n            \u00a0\u00a0<a href=\"/news/subscribe.html\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a> \u00a0|\n <a href=\"https://twitter.com/kdnuggets\" target=\"_blank\"><img alt=\"Twitter\" height=\"48\" src=\"/images/tw_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n <a href=\"https://www.facebook.com/kdnuggets\" target=\"_blank\"><img alt=\"Facebook\" height=\"48\" src=\"/images/fb_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n<a href=\"https://www.linkedin.com/groups/54257/\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"48\" src=\"/images/in_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \n\u00a0|\u00a0 <a href=\"/contact.html\"><b>Contact</b></a>\n</div>\n</div>\n<div class=\"search\">\n<form action=\"/\" id=\"searchform\" method=\"get\">\n<input id=\"s\" name=\"s\" placeholder=\"search KDnuggets\" type=\"text\" value=\"\"/>\n<input type=\"submit\" value=\"Search\"/></form>\n</div>\n<div href=\"#\" id=\"pull\">\n<img class=\"menu\" src=\"/images/menu-30.png\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<img class=\"search-icon\" src=\"/images/search-icon.png\">\n</img></img></div>\n<div id=\"pull-menu\">\n<div class=\"navigation\"><ul class=\"menu\" id=\"menu-menu\"><li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-1070\" id=\"menu-item-1070\"><a href=\"/software/index.html\" title=\"Data Science Software\">SOFTWARE</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13756\" id=\"menu-item-13756\"><a href=\"/news/index.html\" title=\"News\">News/Blog</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-46286\" id=\"menu-item-46286\"><a href=\"/news/top-stories.html\">Top stories</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-42152\" id=\"menu-item-42152\"><a href=\"https://www.kdnuggets.com/opinions/index.html\" title=\"Opinions\">Opinions</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-46415\" id=\"menu-item-46415\"><a href=\"https://www.kdnuggets.com/tutorials/index.html\">Tutorials</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13364\" id=\"menu-item-13364\"><a href=\"/jobs/index.html\" title=\"Jobs in Analytics, Data Science\">JOBS</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-63505\" id=\"menu-item-63505\"><a href=\"https://www.kdnuggets.com/companies/index.html\">Companies</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13366\" id=\"menu-item-13366\"><a href=\"/courses/index.html\">Courses</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-1499\" id=\"menu-item-1499\"><a href=\"https://www.kdnuggets.com/datasets/index.html\">Datasets</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-14286\" id=\"menu-item-14286\"><a href=\"https://www.kdnuggets.com/education/index.html\" title=\"Education in Analytics, Big Data, Data Science\">EDUCATION</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-51558\" id=\"menu-item-51558\"><a href=\"https://www.kdnuggets.com/education/analytics-data-mining-certificates.html\" title=\"Certificates in Analytics, Big Data, Data Science\">Certificates</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-14752\" id=\"menu-item-14752\"><a href=\"/meetings/index.html\">Meetings</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13721\" id=\"menu-item-13721\"><a href=\"/webcasts/index.html\" title=\"Webcasts and Webinars\">Webinars</a></li>\n</ul></div></div>\n</div> <!--#header end-->\n<div id=\"spacer\">\n         \u00a0\n      </div>\n<div id=\"content_wrapper\">\n<div id=\"ad_wrapper\">\n<script type=\"text/javascript\">\n\tjQuery(function() {\n   \t    var pull        = $('#pull');\n            menu        = $('#header .navigation ul');\n            menuImage = $('#header img.menu');\n            mobileMenu        = $('#pull-menu-mobile');\n            search = $('img.search-icon');\n            searchBar = $('div.search');\n            searchClick = false;\n            search.on('click', function() {\n                  searchBar.slideToggle();\n                  searchClick = true;\n            });  \n     \t    $(menuImage).on('click', function(e) {\n\t        //e.preventDefault();\n                if (!searchClick) {\n                  menu.slideToggle();\n                }\n                searchClick = false;\n\t    });\n           /* pullMobile.on('click', function(e) {\n              e.preventDefault();\n                if (!searchClick) {\n                  mobileMenu.slideToggle();\n                }\n                searchClick = false;\n\t    });*/\n            \n\t});\n\tkpath = '/'; kda_top(); kda_sid_init(); kda_sid_n=3;\n\t</script>\n</div> <div class=\"breadcumb\">\n<br/>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2019/index.html\">2019</a> \u00bb <a href=\"https://www.kdnuggets.com/2019/04/index.html\">Apr</a> \u00bb <a href=\"https://www.kdnuggets.com/2019/04/tutorials.html\">Tutorials, Overviews</a> \u00bb Approach pre-trained deep learning models with caution (\u00a0<a href=\"/2019/n16.html\">19:n16</a>\u00a0)    </div>\n<div class=\"single\" id=\"content\">\n<div id=\"post-header\">\n<h1 id=\"title\">Approach pre-trained deep learning models with caution</h1>\n<div class=\"pagi\">\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2019/04/coursera-earn-deep-learning-certificate.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"> <strong>Previous post</strong></img></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2019/04/worth-studying-data-science-masters.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/>\u00a0<br/>\u00a0\n    <div class=\"addthis_native_toolbox\"></div>\n</div>\n<div class=\"tag-data\">Tags: <a href=\"https://www.kdnuggets.com/tag/best-practices\" rel=\"tag\">Best Practices</a>, <a href=\"https://www.kdnuggets.com/tag/deep-learning\" rel=\"tag\">Deep Learning</a>, <a href=\"https://www.kdnuggets.com/tag/training\" rel=\"tag\">Training</a></div>\n<br/>\n<p class=\"excerpt\">\n     Pre-trained models are easy to use, but are you glossing over details that could impact your model performance?\n  </p>\n</div>\n<div id=\"post-header-ad\">\n<script type=\"text/javascript\">kda_sid_write(1); kda_sid_n=2;</script>\n</div>\n<hr class=\"grey-line\"/><br/>\n<div class=\"post\" id=\"post-\">\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p><b>By <a href=\"https://www.linkedin.com/in/ceceliashao/\" rel=\"noopener noreferrer\" target=\"_blank\">Cecelia Shao</a>, <a href=\"https://www.comet.ml/\" rel=\"noopener\" target=\"_blank\">Comet.ml</a></b></p>\n<p>How many times have you run the following snippets:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>import torchvision.models as models\r\ninception = models.inception_v3(pretrained=True)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>or</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>from keras.applications.inception_v3 import InceptionV3\r\nbase_model = InceptionV3(weights='imagenet', include_top=False)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>It seems like using these pre-trained models have become a new standard for industry best practices. After all, why\u00a0<em>wouldn\u2019t</em>\u00a0you take advantage of a model that\u2019s been trained on more data and compute than you could ever muster by yourself?</p>\n<blockquote><p>See the discussion on\u00a0<a href=\"https://www.reddit.com/r/MachineLearning/comments/bdjxf2/discussion_be_careful_when_using_pretrained_deep/\" rel=\"noopener noreferrer\" target=\"_blank\">Reddit</a>\u00a0and\u00a0<a href=\"https://news.ycombinator.com/\" rel=\"noopener noreferrer\" target=\"_blank\">HackerNews</a></p></blockquote>\n<p>\u00a0</p>\n<h3>Long live pre-trained models!</h3>\n<p>\u00a0<br>\nThere are several substantial benefits to leveraging pre-trained models:</br></p>\n<ul>\n<li>super simple to incorporate\n<li>achieve solid (same or even better) model performance quickly\n<li>there\u2019s not as much labeled data required\n<li>versatile uses cases from transfer learning, prediction, and feature extraction\n</li></li></li></li></ul>\n<p>Advances within the NLP space have also encouraged the use of pre-trained language models like\u00a0<a href=\"https://github.com/openai/gpt-2\" rel=\"noopener noreferrer\" target=\"_blank\">GPT and GPT-2</a>, AllenNLP\u2019s\u00a0<a href=\"https://arxiv.org/abs/1802.05365\" rel=\"noopener noreferrer\" target=\"_blank\">ELMo</a>, Google\u2019s\u00a0<a href=\"https://arxiv.org/pdf/1810.04805.pdf\" rel=\"noopener noreferrer\" target=\"_blank\">BERT</a>, and Sebastian Ruder and Jeremy Howard\u2019s\u00a0<a href=\"http://nlp.fast.ai/classification/2018/05/15/introducting-ulmfit.html\" rel=\"noopener noreferrer\" target=\"_blank\">ULMFiT</a>\u00a0(for an excellent over of these models, see\u00a0<a href=\"https://www.topbots.com/ai-nlp-research-pretrained-language-models/\" rel=\"noopener noreferrer\" target=\"_blank\">this TOPBOTs post</a>).</p>\n<p>One common technique for leveraging pretrained models is feature extraction, where you\u2019re retrieving intermediate representations produced by the pretrained model and using those representations as inputs for a new model. These final fully-connected layers are generally assumed to capture information that is relevant for solving a new task.</p>\n<p>\u00a0</p>\n<h3><b>Everyone\u2019s in on the\u00a0game</b></h3>\n<p>\u00a0<br>\nEvery major framework like Tensorflow, Keras, PyTorch, MXNet, etc\u2026offers pre-trained models like Inception V3, ResNet, AlexNet with weights:</br></p>\n<ul>\n<li><a href=\"https://keras.io/applications/\" rel=\"noopener noreferrer\" target=\"_blank\">Keras Applications</a>\n<li><a href=\"https://pytorch.org/docs/stable/torchvision/models.html\" rel=\"noopener noreferrer\" target=\"_blank\">PyTorch torchvision.models</a>\n<li><a href=\"https://github.com/tensorflow/models/tree/master/official\" rel=\"noopener noreferrer\" target=\"_blank\">Tensorflow Official Models\u00a0</a>(and now\u00a0<a href=\"https://www.tensorflow.org/hub\" rel=\"noopener noreferrer\" target=\"_blank\">TensorFlow Hubs</a>)\n<li><a href=\"https://mxnet.apache.org/model_zoo/index.html\" rel=\"noopener noreferrer\" target=\"_blank\">MXNet Model Zoo</a>\n<li><a href=\"https://docs.fast.ai/applications.html\" rel=\"noopener noreferrer\" target=\"_blank\">Fast.ai Applications</a>\n</li></li></li></li></li></ul>\n<div style=\"text-align:center\"><img alt=\"Figure\" src=\"https://cdn-images-1.medium.com/max/800/0*rDbSCt1sGeWpqCTp\" width=\"50%\"><br/>\n<font size=\"-1\"></font></img></div></div></div></div></div></div></body></html>\n<div class=\"caption\">Easy, right?</div>\n<p></p>\n<p>\u00a0</p>\n<h3>But are these benchmarks reproducible?</h3>\n<p>\u00a0<br/>\nThe article that inspired this post came from\u00a0<a href=\"http://www.curtisnorthcutt.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Curtis Northcutt</a>, a computer science PhD candidate at MIT.\u00a0<strong>His article \u2018</strong><a href=\"http://l7.curtisnorthcutt.com/towards-reproducibility-benchmarking-keras-pytorch\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>Towards Reproducibility: Benchmarking Keras and PyTorch</strong></a><strong>\u2019 made several interesting claims\u00a0</strong>\u2014</p>\n<ol>\n<li><code>resnet</code>\u00a0architectures perform better in PyTorch and\u00a0<code>inception</code>architectures perform better in Keras\n<li>The\u00a0<a href=\"https://keras.io/applications/#documentation-for-individual-models\" rel=\"noopener noreferrer\" target=\"_blank\">published benchmarks</a>\u00a0on\u00a0<a href=\"https://keras.io/applications/\" rel=\"noopener noreferrer\" target=\"_blank\">Keras Applications</a>\u00a0cannot be reproduced, even when exactly copying the example code. In fact, their reported accuracies (as of Feb. 2019) are usually higher than the actual accuracies (citing\u00a0<a href=\"https://github.com/keras-team/keras/issues/10040\" rel=\"noopener noreferrer\" target=\"_blank\">1</a>\u00a0and\u00a0<a href=\"https://github.com/keras-team/keras/issues/8672\" rel=\"noopener noreferrer\" target=\"_blank\">2</a>)\n<li>Some pre-trained Keras models yield inconsistent or lower accuracies when deployed on a server (<a href=\"https://github.com/keras-team/keras/issues/7848\" rel=\"noopener noreferrer\" target=\"_blank\">3</a>) or run in sequence with other Keras models (<a href=\"https://github.com/keras-team/keras/issues/10979\" rel=\"noopener noreferrer\" target=\"_blank\">4</a>)\n<li>Keras models using batch normalization can be unreliable. For some models, forward-pass evaluations (with gradients supposedly off) still result in weights changing at inference time. (See\u00a0<a href=\"http://blog.datumbox.com/the-batch-normalization-layer-of-keras-is-broken/\" rel=\"noopener noreferrer\" target=\"_blank\">5</a>)\n</li></li></li></li></ol>\n<p>You might be wondering:\u00a0<strong>How is that possible? Aren\u2019t these the same model and shouldn\u2019t they have the same performance if trained with the same conditions?</strong><br/>\nWell, you\u2019re not alone. Curtis\u2019 article also sparked some reactions on Twitter:</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p dir=\"ltr\" lang=\"en\">\u201c[to mitigate reproducibility issues] In Keras I <br/>1) avoid batches during inference.\u201d<br/>!!!<br/>wtf? <a href=\"https://t.co/sO1oa5o61g\">https://t.co/sO1oa5o61g</a></p>\n<p>\u2014 (((\u0644()(\u0644() 'yoav)))) (@yoavgo) <a href=\"https://twitter.com/yoavgo/status/1116582046145531909?ref_src=twsrc%5Etfw\">April 12, 2019</a></p></blockquote>\n<p><script async=\"\" charset=\"utf-8\" src=\"https://platform.twitter.com/widgets.js\"></script></p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p dir=\"ltr\" lang=\"en\"><a href=\"https://twitter.com/hashtag/deeplearning?src=hash&amp;ref_src=twsrc%5Etfw\">#deeplearning</a> reproducibility: \u201cResnet architectures perform better in PyTorch and inception architectures perform better in Keras\u201d \ud83d\ude31\ud83d\ude31 <a href=\"https://t.co/17rlV80hxS\">https://t.co/17rlV80hxS</a></p>\n<p>\u2014 Delip Rao (@deliprao) <a href=\"https://twitter.com/deliprao/status/1116545913558724609?ref_src=twsrc%5Etfw\">April 12, 2019</a></p></blockquote>\n<p><script async=\"\" charset=\"utf-8\" src=\"https://platform.twitter.com/widgets.js\"></script></p>\n<p>and some interesting insights into the reason for these differences:</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p dir=\"ltr\" lang=\"en\">In PyTorch all models in the zoo are trained by the dev team in similar conditions. In Keras most of the pre-trained models are imported from authors' implementation (e.g. ResNet from initial caffe implementation). The ResNet in PyTorch might use modern training heuristics.</p>\n<p>\u2014 Andrei Bursuc (@abursuc) <a href=\"https://twitter.com/abursuc/status/1116639605569269760?ref_src=twsrc%5Etfw\">April 12, 2019</a></p></blockquote>\n<p><script async=\"\" charset=\"utf-8\" src=\"https://platform.twitter.com/widgets.js\"></script></p>\n<p>Knowing (and trusting) these benchmarks are important because they allow you to make informed decisions around which framework to use and are often used as baselines for research and implementation.</p>\n<p>So what are some things to look out for when you\u2019re leveraging these pre-trained models?</p>\n<p>\u00a0</p>\n<h3>Considerations for using pre-trained models</h3>\n<p>\u00a0<br/>\n<strong>1. How similar is your task? How similar is your data?</strong></p>\n<p>Are you expecting that cited 0.945% validation accuracy for the Keras Xception model you\u2019re using with your new dataset of x-rays? First, you need to check how similar your data is to the original dataset that the model was trained on (in this case: ImageNet). You also need to be aware of where the features have been transferred from (the bottom, middle, or top of the network) because that will impact model performance depending on task similarity.</p>\n<p>Read\u00a0<a href=\"http://cs231n.github.io/transfer-learning/\" rel=\"noopener noreferrer\" target=\"_blank\">CS231n\u200a\u2014\u200aTransfer Learning</a>\u00a0and \u2018<a href=\"https://papers.nips.cc/paper/5347-how-transferable-are-features-in-deep-neural-networks.pdf%20/\" rel=\"noopener noreferrer\" target=\"_blank\">How transferable are features in deep neural networks?</a>\u2019</p>\n<p>\u00a0<br/>\n<strong>2. How did you preprocess the data?</strong></p>\n<p>Your model\u2019s pre-processing should be the same as the original model\u2019s training. With almost all torchvision models, they use the same pre-processing values. For\u00a0<a href=\"https://papers.nips.cc/paper/5347-how-transferable-are-features-in-deep-neural-networks.pdf%20/\" rel=\"noopener noreferrer\" target=\"_blank\">Keras models</a>, you should always use the\u00a0<code>preprocess_input</code>function for the corresponding model-level module. For example:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre># VGG16\r\nkeras.applications.vgg16.preprocess_input\r\n\r\n# InceptionV3\r\nkeras.applications.inception_v3.preprocess_input\r\n\r\n#ResNet50\r\nkeras.applications.resnet50.preprocess_input</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>\u00a0<br/>\n<strong>3. What\u2019s your backend?</strong></p>\n<p>There were\u00a0<a href=\"https://news.ycombinator.com/item?id=14470967\" rel=\"noopener noreferrer\" target=\"_blank\">some rumblings on HackerNews</a>\u00a0that changing the Keras\u2019 backend from Tensorflow to CNTK (Microsoft Cognitive toolkit) improved the performance. Since Keras is a model-level library, it does not handle lower-level operations such as tensor products, convolutions, etc\u2026so it relies on\u00a0<a href=\"http://faroit.com/keras-docs/1.2.0/backend/\" rel=\"noopener noreferrer\" target=\"_blank\">other tensor manipulation frameworks</a>\u00a0like the TensorFlow backend and the Theano backend.</p>\n<p>Max Woolf provided\u00a0<a href=\"https://minimaxir.com/2017/06/keras-cntk/\" rel=\"noopener noreferrer\" target=\"_blank\">an excellent benchmarking project</a>\u00a0that found that while accuracy was the same between CNTK and Tensorflow, CNTK was faster at LSTMs and Multilayer Perceptions (MLPs) while Tensorflow was faster at CNNs and embeddings.</p>\n<blockquote><p>Woolf\u2019s post is from 2017, so It\u2019d be interesting to get an updated comparison that also includes Theano and\u00a0<a href=\"https://medium.com/apache-mxnet/keras-gets-a-speedy-new-backend-with-keras-mxnet-3a853efc1d75\" rel=\"noopener noreferrer\" target=\"_blank\">MXNet as a backend\u00a0</a>(although Theano is now deprecated).</p></blockquote>\n<p>There are also some claims that there are certain versions of Theano that may ignore your seed (for a relevant post form Keras, see\u00a0<a href=\"https://keras.io/getting-started/faq/#how-can-i-obtain-reproducible-results-using-keras-during-development\" rel=\"noopener noreferrer\" target=\"_blank\">this</a>)</p>\n<p>\u00a0<br/>\n<strong>4. What\u2019s your hardware?</strong></p>\n<p>Are you using an Amazon EC2 NVIDIA Tesla K80 or a Google Compute NVIDIA Tesla P100? Maybe even a TPU? \ud83d\ude1c Check out these useful benchmark resources for run times for these different pretrained models.</p>\n<ul>\n<li><a href=\"https://medium.com/@apachemxnet_56405\" rel=\"noopener noreferrer\" target=\"_blank\">Apache MXNet</a>\u2019s\u00a0<a href=\"https://medium.com/apache-mxnet/gluon-nlp-bert-6a489bdd3340\" rel=\"noopener noreferrer\" target=\"_blank\">GluonNLP 0.6:Closing the Gap in Reproducible Research with BERT</a>\n<li>Caleb Robinson\u2019s \u2018<a href=\"http://calebrob.com/ml/imagenet/ilsvrc2012/2018/10/22/imagenet-benchmarking.html\" rel=\"noopener noreferrer\" target=\"_blank\">How to reproduce ImageNet validation results</a>\u2019 (and of course, again, Curtis\u2019\u00a0<a href=\"http://l7.curtisnorthcutt.com/towards-reproducibility-benchmarking-keras-pytorch\" rel=\"noopener noreferrer\" target=\"_blank\">benchmarking post</a>)\n<li><a href=\"http://dlbench.comp.hkbu.edu.hk/\" rel=\"noopener noreferrer\" target=\"_blank\">DL Bench</a>\n<li><a href=\"https://dawn.cs.stanford.edu/2018/06/19/dawnbench-analysis/\" rel=\"noopener noreferrer\" target=\"_blank\">Stanford DAWNBench</a>\n<li><a href=\"https://www.tensorflow.org/guide/performance/benchmarks\" rel=\"noopener noreferrer\" target=\"_blank\">TensorFlow\u2019s performance benchmarks</a>\n</li></li></li></li></li></ul>\n<p>\u00a0<br/>\n<strong>5. What\u2019s your learning rate?</strong></p>\n<p>In practice, you should either keep the pre-trained parameters fixed (ie. use the pre-trained models as feature extractors) as or tune them with a fairly small learning in order to not unlearn everything in the original model.</p>\n<p>\u00a0<br/>\n<strong>6. Is there a difference in how you use optimizations like batch normalization or dropout, especially between training mode and inference mode?</strong></p>\n<p>As Curtis\u2019 post claims:</p>\n<blockquote><p>Keras models using batch normalization can be unreliable. For some models, forward-pass evaluations (with gradients supposedly off) still result in weights changing at inference time. (See\u00a0<a href=\"http://blog.datumbox.com/the-batch-normalization-layer-of-keras-is-broken/\" rel=\"noopener noreferrer\" target=\"_blank\">5</a>)</p></blockquote>\n<p>But\u00a0<em>why\u00a0</em>is this the case?</p>\n<p>According to Vasilis Vryniotis, Principal Data Scientist at Expedia, who first identified the issue with the frozen batch normalization layer in Keras (see Vasilis\u2019 PR\u00a0<a href=\"https://github.com/keras-team/keras/pull/9965\" rel=\"noopener noreferrer\" target=\"_blank\">here</a>\u00a0and detailed blog post\u00a0<a href=\"http://blog.datumbox.com/the-batch-normalization-layer-of-keras-is-broken/\" rel=\"noopener noreferrer\" target=\"_blank\">here</a>):</p>\n<blockquote><p>The problem with the current implementation of Keras is that when a batch normalization (BN) layer is frozen, it continues to use the mini-batch statistics during training. I believe a better approach when the BN is frozen is to use the moving mean and variance that it learned during training. Why? For the same reasons why the mini-batch statistics should not be updated when the layer is frozen: it can lead to poor results because the next layers are not trained properly.</p></blockquote>\n<p>Vasilis also cited instances where this discrepancy led to significant drops in model performance (\u201cfrom 100% down to 50% accuracy) when the Keras model is switched from train mode to test mode.</p>\n<p>Use these questions to guide how you interact with pre-trained models for your next project. Have comments, questions, or additions? Comment below!</p>\n<p>\u00a0<br/>\n<b>Want more practical machine learning content? <a href=\"https://medium.com/comet-ml\" rel=\"noopener noreferrer\" target=\"_blank\">Follow us on\u00a0Medium</a>!</b></p>\n<p>Thanks to\u00a0<a data-action-source=\"post_page\" href=\"https://medium.com/@gideon_73428?source=post_page\" rel=\"noopener noreferrer\" target=\"_blank\">Gideon Mendels</a>\u00a0and\u00a0<a data-action-source=\"post_page\" href=\"https://medium.com/@dhruv.nair?source=post_page\" rel=\"noopener noreferrer\" target=\"_blank\">Dhruv Nair</a>.</p>\n<p>\u00a0<br/>\n<b>Bio: <a href=\"https://www.linkedin.com/in/ceceliashao/\" rel=\"noopener noreferrer\" target=\"_blank\">Cecelia Shao<a></a></a></b> is Product Lead at <a href=\"https://www.comet.ml/\" rel=\"noopener\" target=\"_blank\"><strong>Comet.ml</strong></a>.</p>\n<p><a href=\"https://medium.com/comet-ml/approach-pre-trained-deep-learning-models-with-caution-9f0ff739010c\" rel=\"noopener noreferrer\" target=\"_blank\">Original</a>. Reposted with permission.</p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2019/03/deep-learning-toolset-overview.html\">The Deep Learning Toolset\u200a\u2014\u200aAn Overview</a>\n<li><a href=\"/2018/12/implementing-resnet-mxnet-gluon-comet-ml-image-classification.html\">Implementing ResNet with MXNET Gluon and Comet.ml for Image Classification</a>\n<li><a href=\"/2018/08/building-reliable-machine-learning-models-cross-validation.html\">Building Reliable Machine Learning Models with Cross-validation</a>\n</li></li></li></ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p> <script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets';\n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n\n<div class=\"page-link\"></div>\n<div class=\"pagi\">\n<hr class=\"grey-line\"/>\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2019/04/coursera-earn-deep-learning-certificate.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"/> <strong>Previous post</strong></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2019/04/worth-studying-data-science-masters.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/><br/>\n<div>\n<hr class=\"grey-line\"/><br/>\n<h2>Top Stories Past 30 Days</h2>\n<table align=\"center\" cellpadding=\"3\" cellspacing=\"10\" class=\"latn\" width=\"100%\">\n<tr>\n<td valign=\"top\" width=\"50%\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Popular</b></th></tr>\n<tr><td>\n<ol class=\"three_ol\"><li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-1-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-2-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n<li> <a href=\"/2018/05/simplilearn-9-must-have-skills-data-scientist.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-3-simplilearn');\"><b>9 Must-have skills you need to become a Data Scientist, updated</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-4-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/03/another-10-free-must-read-books-for-machine-learning-and-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-5-another-10-books');\"><b>Another 10 Free Must-Read Books for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-6-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/best-data-visualization-techniques.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-7-best-data-viz');\"><b>Best Data Visualization Techniques for small and large data</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td> <td valign=\"top\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Shared</b></th></tr>\n<tr><td><ol class=\"three_ol\">\n<li> <a href=\"/2019/04/another-10-free-must-see-courses-machine-learning-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-1-another-10-courses');\"><b>Another 10 Free Must-See Courses for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-2-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/03/r-vs-python-data-visualization.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-3-r-py-viz');\"><b>R vs Python for Data Visualization</b></a>\n<li> <a href=\"/2019/03/deep-learning-toolset-overview.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-4-dl-toolset');\"><b>The Deep Learning Toolset \u2014 An Overview</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-5-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-6-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-7-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<!--#content end-->\n<div id=\"sidebar\">\n<div class=\"latn\">\n<h3><b><a href=\"/news/index.html\">Latest News</a></b></h3>\n<ul style=\"font-size:14px; margin-top:5px\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/datarobot-delivering-trusted-ai-microsoft.html\">Delivering Trusted AI with DataRobot and Microsoft</a><li> <a href=\"https://www.kdnuggets.com/2019/04/formulated-ai-data-production-landscape.html\">AI and the data production landscape</a><li> <a href=\"https://www.kdnuggets.com/2019/04/most-desired-skill-data-science.html\">The most desired skill in data science</a><li> <a href=\"https://www.kdnuggets.com/2019/04/projects-include-data-science-portfolio.html\">Projects to Include in a Data Science Portfolio</a><li> <a href=\"https://www.kdnuggets.com/2019/04/rework-meet-worlds-leading-ai-deep-learning-experts.html\">Meet the World\u2019s Leading AI &amp; Deep Learning ...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/problem-data-science-job-postings.html\">The problem with data science job postings</a></li></li></li></li></li></li></ul>\n</div>\n<div>\n<script type=\"text/javascript\">kda_sid_write(kda_sid_n);</script>\n</div>\n<br/><script src=\"/aps/sbm.js\" type=\"text/javascript\"></script>\n<div class=\"latn\" style=\"margin-top: 15px;\">\n<h3><b>More Recent Stories</b></h3>\n<ul class=\"next-posts\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/problem-data-science-job-postings.html\">The problem with data science job postings</a><li> <a href=\"https://www.kdnuggets.com/2019/04/graduating-gans-understanding-generative-adversarial-networks.html\">Graduating in GANs: Going From Understanding Generative Advers...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/datax-join-new-generation-ai-technologists.html\">Join the new generation of AI technologists</a><li> <a href=\"https://www.kdnuggets.com/2019/04/top-tweets-apr17-apr23.html\">Top tweets, Apr 17\u201323: The History of Artificial #NeuralN...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/activestate-top-10-python-use-cases.html\">Top 10 Python Use Cases</a><li> <a href=\"https://www.kdnuggets.com/2019/04/future-generative-adversarial-networks.html\">Generative Adversarial Networks \u2013 Key Milestones and Sta...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/attention-craving-rnn-building-transformer-networks.html\">Attention Craving RNNS: Building Up To Transformer Networks</a><li> <a href=\"https://www.kdnuggets.com/jobs/19/04-24-fors-marsh-group-lead-data-scientist.html\">Fors Marsh Group: Lead Data Scientist [Arlington, VA]</a><li> <a href=\"https://www.kdnuggets.com/2019/n16.html\">KDnuggets 19:n16, Apr 24: Data Visualization in Python with...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/paw-mega-paw-las-vegas-lower-rates-end-friday.html\">Lower Rates End Friday for Mega-PAW Vegas \u2013 the Largest Pred...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/top-news-week-0415-0421.html\">Top Stories, Apr 15-21: Data Visualization in Python: Matplotl...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/wharton-customer-analytics-initiative-conference.html\">Wharton Customer Analytics Initiative Annual Conference in Phi...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/machine-learning-graph-analytics.html\">Machine Learning and Deep Link Graph Analytics: A Powerful Com...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/best-masters-data-science-analytics-online.html\">2019 Best Masters in Data Science and Analytics \u2013 Online</a><li> <a href=\"https://www.kdnuggets.com/2019/04/worth-studying-data-science-masters.html\">Was it Worth Studying a Data Science Masters?</a><li> <a href=\"https://www.kdnuggets.com/2019/04/approach-pre-trained-deep-learning-models-caution.html\">Approach pre-trained deep learning models with caution</a><li> <a href=\"https://www.kdnuggets.com/2019/04/coursera-earn-deep-learning-certificate.html\">Earn a Deep Learning Certificate</a><li> <a href=\"https://www.kdnuggets.com/2019/04/octoparse-scrape-data-website.html\">Easy Way to Scrape Data from Website By Yourself</a><li> <a href=\"https://www.kdnuggets.com/2019/04/ai-environment.html\">AI Supporting The Earth</a><li> <a href=\"https://www.kdnuggets.com/2019/04/mueller-report-word-cloud-brief-tutorial-r.html\">The Mueller Report Word Cloud: A brief tutorial in R</a></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></ul>\n</div>\n</div><div class=\"breadcrumbs_bottom\">\n<div class=\"breadcumb\">\n<br>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2019/index.html\">2019</a> \u00bb <a href=\"https://www.kdnuggets.com/2019/04/index.html\">Apr</a> \u00bb <a href=\"https://www.kdnuggets.com/2019/04/tutorials.html\">Tutorials, Overviews</a> \u00bb Approach pre-trained deep learning models with caution (\u00a0<a href=\"/2019/n16.html\">19:n16</a>\u00a0)    </br></div>\n</div>\n<!--#content_wrapper end-->\n<br>\n<div id=\"footer\">\n<br/>\u00a9 2019 KDnuggets. <a href=\"/about/index.html\">About KDnuggets</a>. \u00a0<a href=\"/news/privacy-policy.html\">Privacy policy</a>. <a href=\"/terms-of-service.html\">Terms of Service</a><br/>\u00a0\n<div class=\"kd_bottom\">\n<div class=\"footer-container\">\n<div class=\"footer-news\">\n<a href=\"/news/subscribe.html\" onclick=\"_gaq.push(['_trackPageview','/x/bot/sub']);\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a>\n</div>\n<div class=\"footer-sm\">\n<a href=\"https://twitter.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/twt']);\" target=\"_blank\"><img height=\"32\" src=\"/images/tw_c48.png\" width=\"32\"/></a>\n<a href=\"https://facebook.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/fb']);\" target=\"_blank\"><img alt=\"Facebook\" height=\"32\" src=\"/images/fb_c48.png\" width=\"32\"/></a>\n<a href=\"https://www.linkedin.com/groups/54257\" onclick=\"_gaq.push(['_trackPageview','/x/bot/in']);\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"32\" src=\"/images/in_c48.png\" width=\"32\"/></a>\n</div>\n</div>\n<div class=\"close-footer\">X</div>\n</div>\n<script type=\"text/javascript\">\n  jQuery('.close-footer').click(\n      function(){       \n         jQuery('.kd_bottom').hide();\n      }\n   );\n</script> </div>\n<div class=\"clear\"><!--blank--></div>\n</br>\n<div style=\"display: none;\"><div id=\"boxzilla-box-82996-content\"><script type=\"text/javascript\">(function() {\n\tif (!window.mc4wp) {\n\t\twindow.mc4wp = {\n\t\t\tlisteners: [],\n\t\t\tforms    : {\n\t\t\t\ton: function (event, callback) {\n\t\t\t\t\twindow.mc4wp.listeners.push({\n\t\t\t\t\t\tevent   : event,\n\t\t\t\t\t\tcallback: callback\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})();\n</script><!-- MailChimp for WordPress v4.1.14 - https://wordpress.org/plugins/mailchimp-for-wp/ --><form class=\"mc4wp-form mc4wp-form-77281\" data-id=\"77281\" data-name=\"Subscribe to KDnuggets News\" id=\"mc4wp-form-1\" method=\"post\"><div class=\"mc4wp-form-fields\"><div class=\"header-container\">\n<img align=\"left\" src=\"/wp-content/uploads/envelope.png\"><a href=\"/news/subscribe.html\">Get KDnuggets, a leading newsletter on AI, \r\n  Data Science, and Machine Learning</a>\n</img></div>\n<div class=\"form-fields\">\n<div class=\"field-container\"><label>Email:</label><input maxlength=\"60\" name=\"EMAIL\" placeholder=\"Your email\" required=\"\" size=\"30\" type=\"email\"/></div>\n<div class=\"field-container submit-container\"><div class=\"form-button\" onclick=\"document.getElementById('mc4wp-form-1').submit()\">Sign Up</div></div>\n</div>\n<label style=\"display: none !important;\">Leave this field empty if you're human: <input autocomplete=\"off\" name=\"_mc4wp_honeypot\" tabindex=\"-1\" type=\"text\" value=\"\"/></label><input name=\"_mc4wp_timestamp\" type=\"hidden\" value=\"1556323516\"/><input name=\"_mc4wp_form_id\" type=\"hidden\" value=\"77281\"/><input name=\"_mc4wp_form_element_id\" type=\"hidden\" value=\"mc4wp-form-1\"/></div><div class=\"mc4wp-response\"></div></form><!-- / MailChimp for WordPress Plugin -->\n</div></div><script type=\"text/javascript\">(function() {function addEventListener(element,event,handler) {\n\tif(element.addEventListener) {\n\t\telement.addEventListener(event,handler, false);\n\t} else if(element.attachEvent){\n\t\telement.attachEvent('on'+event,handler);\n\t}\n}function maybePrefixUrlField() {\n\tif(this.value.trim() !== '' && this.value.indexOf('http') !== 0) {\n\t\tthis.value = \"http://\" + this.value;\n\t}\n}\n\nvar urlFields = document.querySelectorAll('.mc4wp-form input[type=\"url\"]');\nif( urlFields && urlFields.length > 0 ) {\n\tfor( var j=0; j < urlFields.length; j++ ) {\n\t\taddEventListener(urlFields[j],'blur',maybePrefixUrlField);\n\t}\n}/* test if browser supports date fields */\nvar testInput = document.createElement('input');\ntestInput.setAttribute('type', 'date');\nif( testInput.type !== 'date') {\n\n\t/* add placeholder & pattern to all date fields */\n\tvar dateFields = document.querySelectorAll('.mc4wp-form input[type=\"date\"]');\n\tfor(var i=0; i<dateFields.length; i++) {\n\t\tif(!dateFields[i].placeholder) {\n\t\t\tdateFields[i].placeholder = 'YYYY-MM-DD';\n\t\t}\n\t\tif(!dateFields[i].pattern) {\n\t\t\tdateFields[i].pattern = '[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])';\n\t\t}\n\t}\n}\n\n})();</script><script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_options = {\"testMode\":\"\",\"boxes\":[{\"id\":82996,\"icon\":\"&times;\",\"content\":\"\",\"css\":{\"background_color\":\"#eeee22\",\"width\":600,\"border_width\":2,\"border_style\":\"double\",\"position\":\"center\"},\"trigger\":{\"method\":\"time_on_page\",\"value\":\"3\"},\"animation\":\"fade\",\"cookie\":{\"triggered\":0,\"dismissed\":336},\"rehide\":true,\"position\":\"center\",\"screenWidthCondition\":{\"condition\":\"larger\",\"value\":500},\"closable\":true,\"post\":{\"id\":82996,\"title\":\"Subscribe to KDnuggets\",\"slug\":\"subscribe-to-kdnuggets\"}}]};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla/assets/js/script.min.js?ver=3.2.5\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_stats_config = {\"ajaxurl\":\"https:\\/\\/www.kdnuggets.com\\/wp-admin\\/admin-ajax.php?action=boxzilla_stats_track\"};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla-stats/assets/js/tracking.min.js?ver=1.0.4\" type=\"text/javascript\"></script>\n<script src=\"https://www.kdnuggets.com/wp-includes/js/wp-embed.min.js?ver=4.9.10\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar mc4wp_forms_config = [];\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/forms-api.min.js?ver=4.1.14\" type=\"text/javascript\"></script>\n<!--[if lte IE 9]>\n<script type='text/javascript' src='https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/third-party/placeholders.min.js?ver=4.1.14'></script>\n<![endif]-->\n<!--/.main_wrapper-->\n<script src=\"https://s7.addthis.com/js/300/addthis_widget.js#pubid=gpsaddthis\" type=\"text/javascript\"></script>\n\n\n<!-- Dynamic page generated in 0.755 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2019-04-26 20:05:16 -->\n<!-- Compression = gzip -->", "content_tokenized": ["comment", "cecelia", "shao", "cometml", "how", "mani", "time", "have", "run", "the", "follow", "snippet", "import", "torchvisionmodel", "model", "incept", "from", "kerasapplicationsinceptionvnum", "import", "inceptionvnum", "basemodel", "seem", "like", "use", "these", "pretrain", "model", "have", "becom", "new", "standard", "for", "industri", "best", "practic", "after", "all", "whi", "take", "advantag", "model", "that", "been", "train", "more", "data", "and", "comput", "than", "could", "ever", "muster", "yourself", "see", "the", "discuss", "reddit", "and", "hackernew", "long", "live", "pretrain", "model", "there", "are", "sever", "substanti", "benefit", "leverag", "pretrain", "model", "super", "simpl", "incorpor", "achiev", "solid", "same", "even", "better", "model", "perform", "quick", "there", "not", "much", "label", "data", "requir", "versatil", "use", "case", "from", "transfer", "learn", "predict", "and", "featur", "extract", "advanc", "within", "the", "space", "have", "also", "encourag", "the", "use", "pretrain", "languag", "model", "like", "and", "allennlp", "elmo", "googl", "and", "sebastian", "ruder", "and", "jeremi", "howard", "ulmfit", "for", "excel", "over", "these", "model", "see", "this", "topbot", "post", "one", "common", "techniqu", "for", "leverag", "pretrain", "model", "featur", "extract", "where", "retriev", "intermedi", "represent", "produc", "the", "pretrain", "model", "and", "use", "those", "represent", "input", "for", "new", "model", "these", "final", "fullyconnect", "layer", "are", "general", "assum", "captur", "inform", "that", "relev", "for", "solv", "new", "task", "everyon", "the", "game", "everi", "major", "framework", "like", "tensorflow", "kera", "pytorch", "mxnet", "etc\u2026off", "pretrain", "model", "like", "incept", "resnet", "alexnet", "with", "weight", "kera", "applic", "pytorch", "torchvisionmodel", "tensorflow", "offici", "model", "and", "now", "tensorflow", "hub", "mxnet", "model", "zoo", "fastai", "applic"], "timestamp_scraper": 1556366016.68792, "title": "Approach pre-trained deep learning models with caution", "read_time": 76.8, "content_html": "<div class=\"post\" id=\"post-\">\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p><b>By <a href=\"https://www.linkedin.com/in/ceceliashao/\" rel=\"noopener noreferrer\" target=\"_blank\">Cecelia Shao</a>, <a href=\"https://www.comet.ml/\" rel=\"noopener\" target=\"_blank\">Comet.ml</a></b></p>\n<p>How many times have you run the following snippets:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>import torchvision.models as models\r\ninception = models.inception_v3(pretrained=True)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>or</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>from keras.applications.inception_v3 import InceptionV3\r\nbase_model = InceptionV3(weights='imagenet', include_top=False)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>It seems like using these pre-trained models have become a new standard for industry best practices. After all, why\u00a0<em>wouldn\u2019t</em>\u00a0you take advantage of a model that\u2019s been trained on more data and compute than you could ever muster by yourself?</p>\n<blockquote><p>See the discussion on\u00a0<a href=\"https://www.reddit.com/r/MachineLearning/comments/bdjxf2/discussion_be_careful_when_using_pretrained_deep/\" rel=\"noopener noreferrer\" target=\"_blank\">Reddit</a>\u00a0and\u00a0<a href=\"https://news.ycombinator.com/\" rel=\"noopener noreferrer\" target=\"_blank\">HackerNews</a></p></blockquote>\n<p>\u00a0</p>\n<h3>Long live pre-trained models!</h3>\n<p>\u00a0<br>\nThere are several substantial benefits to leveraging pre-trained models:</br></p>\n<ul>\n<li>super simple to incorporate\n<li>achieve solid (same or even better) model performance quickly\n<li>there\u2019s not as much labeled data required\n<li>versatile uses cases from transfer learning, prediction, and feature extraction\n</li></li></li></li></ul>\n<p>Advances within the NLP space have also encouraged the use of pre-trained language models like\u00a0<a href=\"https://github.com/openai/gpt-2\" rel=\"noopener noreferrer\" target=\"_blank\">GPT and GPT-2</a>, AllenNLP\u2019s\u00a0<a href=\"https://arxiv.org/abs/1802.05365\" rel=\"noopener noreferrer\" target=\"_blank\">ELMo</a>, Google\u2019s\u00a0<a href=\"https://arxiv.org/pdf/1810.04805.pdf\" rel=\"noopener noreferrer\" target=\"_blank\">BERT</a>, and Sebastian Ruder and Jeremy Howard\u2019s\u00a0<a href=\"http://nlp.fast.ai/classification/2018/05/15/introducting-ulmfit.html\" rel=\"noopener noreferrer\" target=\"_blank\">ULMFiT</a>\u00a0(for an excellent over of these models, see\u00a0<a href=\"https://www.topbots.com/ai-nlp-research-pretrained-language-models/\" rel=\"noopener noreferrer\" target=\"_blank\">this TOPBOTs post</a>).</p>\n<p>One common technique for leveraging pretrained models is feature extraction, where you\u2019re retrieving intermediate representations produced by the pretrained model and using those representations as inputs for a new model. These final fully-connected layers are generally assumed to capture information that is relevant for solving a new task.</p>\n<p>\u00a0</p>\n<h3><b>Everyone\u2019s in on the\u00a0game</b></h3>\n<p>\u00a0<br>\nEvery major framework like Tensorflow, Keras, PyTorch, MXNet, etc\u2026offers pre-trained models like Inception V3, ResNet, AlexNet with weights:</br></p>\n<ul>\n<li><a href=\"https://keras.io/applications/\" rel=\"noopener noreferrer\" target=\"_blank\">Keras Applications</a>\n<li><a href=\"https://pytorch.org/docs/stable/torchvision/models.html\" rel=\"noopener noreferrer\" target=\"_blank\">PyTorch torchvision.models</a>\n<li><a href=\"https://github.com/tensorflow/models/tree/master/official\" rel=\"noopener noreferrer\" target=\"_blank\">Tensorflow Official Models\u00a0</a>(and now\u00a0<a href=\"https://www.tensorflow.org/hub\" rel=\"noopener noreferrer\" target=\"_blank\">TensorFlow Hubs</a>)\n<li><a href=\"https://mxnet.apache.org/model_zoo/index.html\" rel=\"noopener noreferrer\" target=\"_blank\">MXNet Model Zoo</a>\n<li><a href=\"https://docs.fast.ai/applications.html\" rel=\"noopener noreferrer\" target=\"_blank\">Fast.ai Applications</a>\n</li></li></li></li></li></ul>\n<div style=\"text-align:center\"><img alt=\"Figure\" src=\"https://cdn-images-1.medium.com/max/800/0*rDbSCt1sGeWpqCTp\" width=\"50%\"><br/>\n<font size=\"-1\"></font></img></div></div> ", "website": "kdnuggets"}