{"content_html": "<div class=\"post\" id=\"post-\">\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p><b>By <a href=\"https://www.thelearningmachine.ai \">The Learning Machine</a></b></p>\n<h3><strong>Random Forest (+Python implementation)</strong></h3>\n<h4><strong style=\"font-size: 16px;\">1. Introduction</strong></h4>\n<p>This article is written by <strong><u><a href=\"https://www.thelearningmachine.ai/\">The Learning Machine</a></u></strong>, a new open-source project that aims to create an interactive roadmap containing A-Z explanations of concepts, methods, algorithms and their code implementations in either Python or R, accessible for people with various backgrounds.</p>\n<p>Check out our click-and-go <strong><u><a href=\"https://www.thelearningmachine.ai/ml\">Machine Learning Mind Map</a></u></strong> with algorithm explanations and Python implementation.</p>\n<p><img alt=\"Machine Learning\" class=\"alignnone size-full wp-image-92384\" sizes=\"(max-width: 700px) 100vw, 700px\" src=\"https://www.kdnuggets.com/wp-content/uploads/machine-learning-2.jpg\" srcset=\"https://www.kdnuggets.com/wp-content/uploads/machine-learning-2.jpg 700w, https://www.kdnuggets.com/wp-content/uploads/machine-learning-2-300x137.jpg 300w\" width=\"80%\"/></p>\n<h4><strong>2. Random Forest</strong></h4>\n<p>Random Forest is a flexible, easy to use machine learning algorithm that produces, even without hyper-parameter tuning, a great result most of the time. It can be used for both classification and regression tasks. In this article, you are going to learn how the random forest algorithm deals with classification and regression problems.</p>\n<p><em>To understand the Random Forest algorithm, you have to be familiar with Decision Trees at first. Read an article on Decision Trees </em><em><u><a href=\"https://www.thelearningmachine.ai/tree-id3\">here</a></u></em><em>.</em></p>\n<p>One of the common problems with decision trees, especially the ones that have a table full of columns, is that they tend to <strong><em>overfit</em></strong> a lot. Sometimes it looks like the tree just <em>memorizes</em> the data. Here are the typical examples of decision trees that overfit, both for <strong>categorical</strong> and <strong>continuous</strong> data:</p>\n<p><strong>I. Categorical:</strong></p>\n<p><em>If the client is male, between 15 and 25, from the US, likes ice-cream, has a German friend, hates birds and ate pancakes on August 25th, 2012, - he is likely to download Pokemon Go.</em></p>\n<p><strong>II. Continuous:</strong></p>\n<p><img alt=\"Random Forests\" class=\"alignnone size-full wp-image-92385\" sizes=\"(max-width: 516px) 100vw, 516px\" src=\"https://www.kdnuggets.com/wp-content/uploads/random-forests.jpg\" srcset=\"https://www.kdnuggets.com/wp-content/uploads/random-forests.jpg 516w, https://www.kdnuggets.com/wp-content/uploads/random-forests-300x208.jpg 300w\" width=\"60%\"/></p>\n<p>Random Forest prevents this problem: it is an ensemble of multiple decision trees, not just one. And the more the number of these decision trees in Random Forest, the better the generalization.</p>\n<p>More precisely, Random Forest works as follows:</p>\n<ol>\n<li>Selects k features (columns) from the dataset (table) with a total of m features randomly (where k&lt;&lt;m). Then, it builds a Decision Tree from those k features.</li>\n<li>Repeats n times so that you have <strong><em>n</em></strong> Decision Trees built from different random combinations of k features (or a different random sample of the data, called <strong><em>bootstrap</em></strong> <strong><em>sample</em></strong>).</li>\n<li>Takes each of the n built Decision Trees and passes a random variable to predict the outcome. Stores the predicted outcome (target), so that you have a total of <strong><em>n</em></strong> outcomes from the <strong><em>n</em></strong> Decision Trees.</li>\n<li>Calculates the votes for each predicted target and takes the mode (most frequent target variable). In other words, considers the high voted predicted target as the final prediction from the random forest algorithm.</li>\n</ol>\n<p><em>* In case of a regression problem, for a new record, each tree in the forest predicts a value for Y (output). The final value can be calculated by taking the average of all the values predicted by all the trees in a forest. Or, in case of a classification problem, each tree in the forest predicts the category to which the new record belongs. Finally, the new record is assigned to the category that wins the majority vote.</em></p>\n<p><strong>Example:</strong></p>\n<p>James wants to decide what places he should visit during his one week stay in Paris. He goes to a friend who lived there one year and asks what he visited in the past and if he liked it or not. Based on his experience, he will give James some advice.</p>\n<p>This is a typical decision tree algorithm approach. James\u2019 friend decided about what James should visit, based on his personal experience of a year.</p>\n<p>Later, James starts asking more and more of his friends to advise him, and they recommend the places they have been to. Then James chooses the places that were recommend the most to him, which is the typical Random Forest algorithm approach.</p>\n<p><strong><em>Thus, Random Forest is an algorithm that builds n decision trees by randomly selecting k out of the total of m features for every decision tree, and takes the mode (average, if regression) of the predicted outcomes.</em></strong></p>\n<h4><strong>3. Pros &amp; Cons</strong></h4>\n<p><strong>Advantages:</strong></p>\n<ol>\n<li><strong>Can be used for both classification and regression problems:</strong> Random Forest works well when you have both categorical and numerical features.</li>\n<li><strong>Reduction in overfitting</strong>: by averaging several trees, there is a significantly lower risk of overfitting.</li>\n<li><strong>Make a wrong prediction only when more than half of the base classifiers are wrong</strong>: Random Forest is very stable - even if a new data point is introduced in the dataset, the overall algorithm is not affected much as new data may impact one tree, but it is very hard for it to impact all the trees.</li>\n</ol>\n<p><strong>Disadvantages:</strong></p>\n<ol>\n<li>Random forests have been observed to overfit for some datasets with noisy classification/regression tasks.</li>\n<li>More complex and computationally expensive than decision tree algorithm.</li>\n<li>Due to their complexity, they require much more time to train than other comparable algorithms.</li>\n</ol>\n<h3><strong>4. Important Hyperparameters </strong></h3>\n<p>The Hyperparameters in a random forest are either used to increase the predictive power of the model or to make the model faster. Below, hyperparameters of sklearn built-in random forest function is described:</p>\n<ol>\n<li><strong>Increasing the Predictive Power</strong></li>\n</ol>\n<ul>\n<li><strong>n_estimators:</strong> the number of trees the algorithm builds before taking the maximum voting or taking averages of predictions. In general, a higher number of trees increases the performance and makes the predictions more stable, but it also slows down the computation.</li>\n<li><strong>max_features:</strong> the maximum number of features Random Forest is allowed to try in an individual tree. Sklearn provides several options, described in their <u><a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">documentation</a></u>.</li>\n<li><strong>min_sample_leaf: </strong>determines the minimum number of leaves that are required to split an internal node.</li>\n</ul>\n<ol start=\"2\">\n<li><strong> Increasing the Models Speed</strong></li>\n</ol>\n<ul>\n<li><strong>n_jobs:</strong> tells the engine how many processors it is allowed to use. If it has a value of 1, it can only use one processor. A value of \u201c-1\u201d means that there is no limit.</li>\n<li><strong>random_state:</strong> makes the model\u2019s output replicable. The model will always produce the same results when it has a definite value of random_state and if it has been given the same hyperparameters and the same training data.</li>\n<li><strong>oob_score: </strong>(also called oob sampling) - a random forest cross-validation method. In this sampling, about one-third of the data is not used to train the model and can be used to evaluate its performance. These samples are called the out of bag samples. It is very similar to the leave-one-out cross-validation method, but almost no additional computational burden goes along with it.</li>\n</ul>\n<h3><strong>5. Python Implementation</strong></h3>\n<p>View/download a template of Random Forest located in a git repository <u><a href=\"https://github.com/the-learning-machine/ML/blob/master/Classification/random_forests.ipynb\">here</a></u>.</p>\n<p><strong>Resources:</strong></p>\n<ul>\n<li><a href=\"https://www.kdnuggets.com/education/online.html\">On-line and web-based: Analytics, Data Mining, Data Science, Machine Learning education</a></li>\n<li><a href=\"https://www.kdnuggets.com/software/index.html\">Software for Analytics, Data Science, Data Mining, and Machine Learning</a></li>\n</ul>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"https://www.kdnuggets.com/2019/01/random-forests-explained-intuitively.html\">Random forests explained intuitively</a></li>\n<li><a href=\"https://www.kdnuggets.com/2018/08/data-scientist-interviews-demystified.html\">Data Scientist Interviews Demystified</a></li>\n<li><a href=\"https://www.kdnuggets.com/2018/02/tour-top-10-algorithms-machine-learning-newbies.html\">A Tour of The Top 10 Algorithms for Machine Learning Newbies</a></li>\n</ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p><script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets'; \n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div>", "title": "Explaining Random Forest (with Python Implementation)", "html": "<!DOCTYPE html>\n\n<html lang=\"en-US\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head profile=\"http://gmpg.org/xfn/11\">\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n<title>  Explaining Random Forest (with Python Implementation)</title>\n<link href=\"/wp-content/themes/kdn17/images/favicon.ico\" rel=\"shortcut icon\"/>\n<link href=\"/wp-content/themes/kdn17/style.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"/wp-content/themes/kdn17/js/jquery-1.9.1.min.js\" type=\"text/javascript\"></script>\n<script src=\"/aps/kda_all.js\" type=\"text/javascript\"></script>\n<link href=\"/feed/\" rel=\"alternate\" title=\"KDnuggets: Analytics, Big Data, Data Mining and Data Science Feed\" type=\"application/rss+xml\"/>\n<link href=\"//s.w.org\" rel=\"dns-prefetch\"/>\n<link href=\"https://www.kdnuggets.com/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/comments/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/2019/03/random-forest-python.html/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Explaining Random Forest (with Python Implementation) Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-json/\" rel=\"https://api.w.org/\"/>\n<link href=\"https://www.kdnuggets.com/xmlrpc.php?rsd\" rel=\"EditURI\" title=\"RSD\" type=\"application/rsd+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-includes/wlwmanifest.xml\" rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\"/>\n<link href=\"https://www.kdnuggets.com/2019/03/beginners-guide-linear-regression-python-scikit-learn.html\" rel=\"prev\" title=\"A Beginner\u2019s Guide to Linear Regression in Python with Scikit-Learn\"/>\n<link href=\"https://www.kdnuggets.com/2019/03/datathon-data-science-hackathon-april.html\" rel=\"next\" title=\"Datathon 2019: The International Data Science Hackathon, 12-14 April\"/>\n<meta content=\"WordPress 4.9.10\" name=\"generator\">\n<link href=\"https://www.kdnuggets.com/2019/03/random-forest-python.html\" rel=\"canonical\"/>\n<link href=\"https://www.kdnuggets.com/?p=92383\" rel=\"shortlink\"/>\n<link href=\"https://www.kdnuggets.com/2019/03/random-forest-python.html\" rel=\"canonical\"/>\n<!-- BEGIN ExactMetrics v5.3.7 Universal Analytics - https://exactmetrics.com/ -->\n<script>\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-361129-1', 'auto');\n  ga('send', 'pageview');\n</script>\n<!-- END ExactMetrics Universal Analytics -->\n</meta></head>\n<body class=\"post-template-default single single-post postid-92383 single-format-standard\">\n<div class=\"main_wrapper\"><!-- publ: 29-Mar, 2019  -->\n<div id=\"wrapper\">\n<div id=\"header\">\n<div id=\"header_log\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<h1>KDnuggets</h1>\n<div class=\"text-container\">\n            \u00a0\u00a0<a href=\"/news/subscribe.html\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a> \u00a0|\n <a href=\"https://twitter.com/kdnuggets\" target=\"_blank\"><img alt=\"Twitter\" height=\"48\" src=\"/images/tw_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n <a href=\"https://www.facebook.com/kdnuggets\" target=\"_blank\"><img alt=\"Facebook\" height=\"48\" src=\"/images/fb_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n<a href=\"https://www.linkedin.com/groups/54257/\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"48\" src=\"/images/in_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \n\u00a0|\u00a0 <a href=\"/contact.html\"><b>Contact</b></a>\n</div>\n</div>\n<div class=\"search\">\n<form action=\"/\" id=\"searchform\" method=\"get\">\n<input id=\"s\" name=\"s\" placeholder=\"search KDnuggets\" type=\"text\" value=\"\"/>\n<input type=\"submit\" value=\"Search\"/></form>\n</div>\n<div href=\"#\" id=\"pull\">\n<img class=\"menu\" src=\"/images/menu-30.png\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<img class=\"search-icon\" src=\"/images/search-icon.png\">\n</img></img></div>\n<div id=\"pull-menu\">\n<div class=\"navigation\"><ul class=\"menu\" id=\"menu-menu\"><li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-1070\" id=\"menu-item-1070\"><a href=\"/software/index.html\" title=\"Data Science Software\">SOFTWARE</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13756\" id=\"menu-item-13756\"><a href=\"/news/index.html\" title=\"News\">News/Blog</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-46286\" id=\"menu-item-46286\"><a href=\"/news/top-stories.html\">Top stories</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-42152\" id=\"menu-item-42152\"><a href=\"https://www.kdnuggets.com/opinions/index.html\" title=\"Opinions\">Opinions</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-46415\" id=\"menu-item-46415\"><a href=\"https://www.kdnuggets.com/tutorials/index.html\">Tutorials</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13364\" id=\"menu-item-13364\"><a href=\"/jobs/index.html\" title=\"Jobs in Analytics, Data Science\">JOBS</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-63505\" id=\"menu-item-63505\"><a href=\"https://www.kdnuggets.com/companies/index.html\">Companies</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13366\" id=\"menu-item-13366\"><a href=\"/courses/index.html\">Courses</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-1499\" id=\"menu-item-1499\"><a href=\"https://www.kdnuggets.com/datasets/index.html\">Datasets</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-14286\" id=\"menu-item-14286\"><a href=\"https://www.kdnuggets.com/education/index.html\" title=\"Education in Analytics, Big Data, Data Science\">EDUCATION</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-51558\" id=\"menu-item-51558\"><a href=\"https://www.kdnuggets.com/education/analytics-data-mining-certificates.html\" title=\"Certificates in Analytics, Big Data, Data Science\">Certificates</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-14752\" id=\"menu-item-14752\"><a href=\"/meetings/index.html\">Meetings</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13721\" id=\"menu-item-13721\"><a href=\"/webcasts/index.html\" title=\"Webcasts and Webinars\">Webinars</a></li>\n</ul></div></div>\n</div> <!--#header end-->\n<div id=\"spacer\">\n         \u00a0\n      </div>\n<div id=\"content_wrapper\">\n<div id=\"ad_wrapper\">\n<script type=\"text/javascript\">\n\tjQuery(function() {\n   \t    var pull        = $('#pull');\n            menu        = $('#header .navigation ul');\n            menuImage = $('#header img.menu');\n            mobileMenu        = $('#pull-menu-mobile');\n            search = $('img.search-icon');\n            searchBar = $('div.search');\n            searchClick = false;\n            search.on('click', function() {\n                  searchBar.slideToggle();\n                  searchClick = true;\n            });  \n     \t    $(menuImage).on('click', function(e) {\n\t        //e.preventDefault();\n                if (!searchClick) {\n                  menu.slideToggle();\n                }\n                searchClick = false;\n\t    });\n           /* pullMobile.on('click', function(e) {\n              e.preventDefault();\n                if (!searchClick) {\n                  mobileMenu.slideToggle();\n                }\n                searchClick = false;\n\t    });*/\n            \n\t});\n\tkpath = '/'; kda_top(); kda_sid_init(); kda_sid_n=3;\n\t</script>\n</div> <div class=\"breadcumb\">\n<br/>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2019/index.html\">2019</a> \u00bb <a href=\"https://www.kdnuggets.com/2019/03/index.html\">Mar</a> \u00bb <a href=\"https://www.kdnuggets.com/2019/03/tutorials.html\">Tutorials, Overviews</a> \u00bb Explaining Random Forest (with Python Implementation) (\u00a0<a href=\"/2019/n13.html\">19:n13</a>\u00a0)    </div>\n<div class=\"single\" id=\"content\">\n<div id=\"post-header\">\n<h1 id=\"title\">Explaining Random Forest (with Python Implementation)</h1>\n<div class=\"pagi\">\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2019/03/beginners-guide-linear-regression-python-scikit-learn.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"> <strong>Previous post</strong></img></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2019/03/datathon-data-science-hackathon-april.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/>\u00a0<br/>\u00a0\n    <div class=\"addthis_native_toolbox\"></div>\n</div>\n<div class=\"tag-data\">Tags: <a href=\"https://www.kdnuggets.com/tag/explained\" rel=\"tag\">Explained</a>, <a href=\"https://www.kdnuggets.com/tag/machine-learning\" rel=\"tag\">Machine Learning</a>, <a href=\"https://www.kdnuggets.com/tag/python\" rel=\"tag\">Python</a>, <a href=\"https://www.kdnuggets.com/tag/random-forests\" rel=\"tag\">Random Forests</a></div>\n<br/>\n<p class=\"excerpt\">\n     We provide an in-depth introduction to Random Forest, with an explanation to how it works, its advantages and disadvantages, important hyperparameters and a full example Python implementation.\n  </p>\n</div>\n<div id=\"post-header-ad\">\n<script type=\"text/javascript\">kda_sid_write(1); kda_sid_n=2;</script>\n</div>\n<hr class=\"grey-line\"/><br/>\n<div class=\"post\" id=\"post-\">\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p><b>By <a href=\"https://www.thelearningmachine.ai \">The Learning Machine</a></b></p>\n<h3><strong>Random Forest (+Python implementation)</strong></h3>\n<h4><strong style=\"font-size: 16px;\">1. Introduction</strong></h4>\n<p>This article is written by <strong><u><a href=\"https://www.thelearningmachine.ai/\">The Learning Machine</a></u></strong>, a new open-source project that aims to create an interactive roadmap containing A-Z explanations of concepts, methods, algorithms and their code implementations in either Python or R, accessible for people with various backgrounds.</p>\n<p>Check out our click-and-go <strong><u><a href=\"https://www.thelearningmachine.ai/ml\">Machine Learning Mind Map</a></u></strong> with algorithm explanations and Python implementation.</p>\n<p><img alt=\"Machine Learning\" class=\"alignnone size-full wp-image-92384\" sizes=\"(max-width: 700px) 100vw, 700px\" src=\"https://www.kdnuggets.com/wp-content/uploads/machine-learning-2.jpg\" srcset=\"https://www.kdnuggets.com/wp-content/uploads/machine-learning-2.jpg 700w, https://www.kdnuggets.com/wp-content/uploads/machine-learning-2-300x137.jpg 300w\" width=\"80%\"/></p>\n<h4><strong>2. Random Forest</strong></h4>\n<p>Random Forest is a flexible, easy to use machine learning algorithm that produces, even without hyper-parameter tuning, a great result most of the time. It can be used for both classification and regression tasks. In this article, you are going to learn how the random forest algorithm deals with classification and regression problems.</p>\n<p><em>To understand the Random Forest algorithm, you have to be familiar with Decision Trees at first. Read an article on Decision Trees </em><em><u><a href=\"https://www.thelearningmachine.ai/tree-id3\">here</a></u></em><em>.</em></p>\n<p>One of the common problems with decision trees, especially the ones that have a table full of columns, is that they tend to <strong><em>overfit</em></strong> a lot. Sometimes it looks like the tree just <em>memorizes</em> the data. Here are the typical examples of decision trees that overfit, both for <strong>categorical</strong> and <strong>continuous</strong> data:</p>\n<p><strong>I. Categorical:</strong></p>\n<p><em>If the client is male, between 15 and 25, from the US, likes ice-cream, has a German friend, hates birds and ate pancakes on August 25th, 2012, - he is likely to download Pokemon Go.</em></p>\n<p><strong>II. Continuous:</strong></p>\n<p><img alt=\"Random Forests\" class=\"alignnone size-full wp-image-92385\" sizes=\"(max-width: 516px) 100vw, 516px\" src=\"https://www.kdnuggets.com/wp-content/uploads/random-forests.jpg\" srcset=\"https://www.kdnuggets.com/wp-content/uploads/random-forests.jpg 516w, https://www.kdnuggets.com/wp-content/uploads/random-forests-300x208.jpg 300w\" width=\"60%\"/></p>\n<p>Random Forest prevents this problem: it is an ensemble of multiple decision trees, not just one. And the more the number of these decision trees in Random Forest, the better the generalization.</p>\n<p>More precisely, Random Forest works as follows:</p>\n<ol>\n<li>Selects k features (columns) from the dataset (table) with a total of m features randomly (where k&lt;&lt;m). Then, it builds a Decision Tree from those k features.</li>\n<li>Repeats n times so that you have <strong><em>n</em></strong> Decision Trees built from different random combinations of k features (or a different random sample of the data, called <strong><em>bootstrap</em></strong> <strong><em>sample</em></strong>).</li>\n<li>Takes each of the n built Decision Trees and passes a random variable to predict the outcome. Stores the predicted outcome (target), so that you have a total of <strong><em>n</em></strong> outcomes from the <strong><em>n</em></strong> Decision Trees.</li>\n<li>Calculates the votes for each predicted target and takes the mode (most frequent target variable). In other words, considers the high voted predicted target as the final prediction from the random forest algorithm.</li>\n</ol>\n<p><em>* In case of a regression problem, for a new record, each tree in the forest predicts a value for Y (output). The final value can be calculated by taking the average of all the values predicted by all the trees in a forest. Or, in case of a classification problem, each tree in the forest predicts the category to which the new record belongs. Finally, the new record is assigned to the category that wins the majority vote.</em></p>\n<p><strong>Example:</strong></p>\n<p>James wants to decide what places he should visit during his one week stay in Paris. He goes to a friend who lived there one year and asks what he visited in the past and if he liked it or not. Based on his experience, he will give James some advice.</p>\n<p>This is a typical decision tree algorithm approach. James\u2019 friend decided about what James should visit, based on his personal experience of a year.</p>\n<p>Later, James starts asking more and more of his friends to advise him, and they recommend the places they have been to. Then James chooses the places that were recommend the most to him, which is the typical Random Forest algorithm approach.</p>\n<p><strong><em>Thus, Random Forest is an algorithm that builds n decision trees by randomly selecting k out of the total of m features for every decision tree, and takes the mode (average, if regression) of the predicted outcomes.</em></strong></p>\n<h4><strong>3. Pros &amp; Cons</strong></h4>\n<p><strong>Advantages:</strong></p>\n<ol>\n<li><strong>Can be used for both classification and regression problems:</strong> Random Forest works well when you have both categorical and numerical features.</li>\n<li><strong>Reduction in overfitting</strong>: by averaging several trees, there is a significantly lower risk of overfitting.</li>\n<li><strong>Make a wrong prediction only when more than half of the base classifiers are wrong</strong>: Random Forest is very stable - even if a new data point is introduced in the dataset, the overall algorithm is not affected much as new data may impact one tree, but it is very hard for it to impact all the trees.</li>\n</ol>\n<p><strong>Disadvantages:</strong></p>\n<ol>\n<li>Random forests have been observed to overfit for some datasets with noisy classification/regression tasks.</li>\n<li>More complex and computationally expensive than decision tree algorithm.</li>\n<li>Due to their complexity, they require much more time to train than other comparable algorithms.</li>\n</ol>\n<h3><strong>4. Important Hyperparameters </strong></h3>\n<p>The Hyperparameters in a random forest are either used to increase the predictive power of the model or to make the model faster. Below, hyperparameters of sklearn built-in random forest function is described:</p>\n<ol>\n<li><strong>Increasing the Predictive Power</strong></li>\n</ol>\n<ul>\n<li><strong>n_estimators:</strong> the number of trees the algorithm builds before taking the maximum voting or taking averages of predictions. In general, a higher number of trees increases the performance and makes the predictions more stable, but it also slows down the computation.</li>\n<li><strong>max_features:</strong> the maximum number of features Random Forest is allowed to try in an individual tree. Sklearn provides several options, described in their <u><a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">documentation</a></u>.</li>\n<li><strong>min_sample_leaf: </strong>determines the minimum number of leaves that are required to split an internal node.</li>\n</ul>\n<ol start=\"2\">\n<li><strong> Increasing the Models Speed</strong></li>\n</ol>\n<ul>\n<li><strong>n_jobs:</strong> tells the engine how many processors it is allowed to use. If it has a value of 1, it can only use one processor. A value of \u201c-1\u201d means that there is no limit.</li>\n<li><strong>random_state:</strong> makes the model\u2019s output replicable. The model will always produce the same results when it has a definite value of random_state and if it has been given the same hyperparameters and the same training data.</li>\n<li><strong>oob_score: </strong>(also called oob sampling) - a random forest cross-validation method. In this sampling, about one-third of the data is not used to train the model and can be used to evaluate its performance. These samples are called the out of bag samples. It is very similar to the leave-one-out cross-validation method, but almost no additional computational burden goes along with it.</li>\n</ul>\n<h3><strong>5. Python Implementation</strong></h3>\n<p>View/download a template of Random Forest located in a git repository <u><a href=\"https://github.com/the-learning-machine/ML/blob/master/Classification/random_forests.ipynb\">here</a></u>.</p>\n<p><strong>Resources:</strong></p>\n<ul>\n<li><a href=\"https://www.kdnuggets.com/education/online.html\">On-line and web-based: Analytics, Data Mining, Data Science, Machine Learning education</a></li>\n<li><a href=\"https://www.kdnuggets.com/software/index.html\">Software for Analytics, Data Science, Data Mining, and Machine Learning</a></li>\n</ul>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"https://www.kdnuggets.com/2019/01/random-forests-explained-intuitively.html\">Random forests explained intuitively</a></li>\n<li><a href=\"https://www.kdnuggets.com/2018/08/data-scientist-interviews-demystified.html\">Data Scientist Interviews Demystified</a></li>\n<li><a href=\"https://www.kdnuggets.com/2018/02/tour-top-10-algorithms-machine-learning-newbies.html\">A Tour of The Top 10 Algorithms for Machine Learning Newbies</a></li>\n</ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p><script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets'; \n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div>\n<div class=\"page-link\"></div>\n<div class=\"pagi\">\n<hr class=\"grey-line\"/>\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2019/03/beginners-guide-linear-regression-python-scikit-learn.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"/> <strong>Previous post</strong></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2019/03/datathon-data-science-hackathon-april.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/><br/>\n<div>\n<hr class=\"grey-line\"/><br/>\n<h2>Top Stories Past 30 Days</h2>\n<table align=\"center\" cellpadding=\"3\" cellspacing=\"10\" class=\"latn\" width=\"100%\">\n<tr>\n<td valign=\"top\" width=\"50%\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Popular</b></th></tr>\n<tr><td>\n<ol class=\"three_ol\"><li> <a href=\"/2019/03/another-10-free-must-read-books-for-machine-learning-and-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/03-26-mp-1-another-10');\"><b>Another 10 Free Must-Read Books for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2018/05/simplilearn-9-must-have-skills-data-scientist.html\" onclick=\"ga('send','pageview','/x/pbc/2019/03-26-mp-2-simplilearn');\"><b>9 Must-have skills you need to become a Data Scientist, updated</b></a>\n<li> <a href=\"/2019/03/data-science-job-applications.html\" onclick=\"ga('send','pageview','/x/pbc/2019/03-26-mp-3-tell-you');\"><b>What no one will tell you about data science job applications</b></a>\n<li> <a href=\"/2019/03/typical-data-scientist-2019.html\" onclick=\"ga('send','pageview','/x/pbc/2019/03-26-mp-4-typical');\"><b>Who is a typical Data Scientist in 2019?</b></a>\n<li> <a href=\"/2019/02/asking-great-questions-data-scientist.html\" onclick=\"ga('send','pageview','/x/pbc/2019/03-26-mp-5-great-questions');\"><b>Asking Great Questions as a Data Scientist</b></a>\n<li> <a href=\"/2019/03/pareto-principle-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/03-26-mp-6-pareto');\"><b>The Pareto Principle for Data Scientists</b></a>\n<li> <a href=\"/2019/03/women-ai-big-data-science-machine-learning.html\" onclick=\"ga('send','pageview','/x/pbc/2019/03-26-mp-7-19-inspiring-women');\"><b>19 Inspiring Women in AI, Big Data, Data Science, Machine Learning</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td> <td valign=\"top\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Shared</b></th></tr>\n<tr><td><ol class=\"three_ol\">\n<li> <a href=\"/2019/03/artificial-neural-networks-optimization-genetic-algorithm-python.html\" onclick=\"ga('send','pageview','/x/pbc/2019/03-26-ms-1-ann-genetic');\"><b>Artificial Neural Networks Optimization using Genetic Algorithm with Python</b></a>\n<li> <a href=\"/2019/02/artificial-neural-network-implementation-using-numpy-and-image-classification.html\" onclick=\"ga('send','pageview','/x/pbc/2019/03-26-ms-2-ann-numpy-images');\"><b>Artificial Neural Network Implementation using NumPy and Image Classification</b></a>\n<li> <a href=\"/2019/02/setup-python-environment-machine-learning.html\" onclick=\"ga('send','pageview','/x/pbc/2019/03-26-ms-3-py-ml-setup');\"><b>How to Setup a Python Environment for Machine Learning</b></a>\n<li> <a href=\"/2019/03/typical-data-scientist-2019.html\" onclick=\"ga('send','pageview','/x/pbc/2019/03-26-ms-4-typical');\"><b>Who is a typical Data Scientist in 2019?</b></a>\n<li> <a href=\"/2019/03/simplilearn-8-reasons-microsoft-azure-certification.html\" onclick=\"ga('send','pageview','/x/pbc/2019/03-26-ms-5-azure-cert');\"><b>8 Reasons Why You Should Get a Microsoft Azure Certification</b></a>\n<li> <a href=\"/2019/03/pareto-principle-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/03-26-ms-6-pareto');\"><b>The Pareto Principle for Data Scientists</b></a>\n<li> <a href=\"/2019/02/running-r-and-python-in-jupyter.html\" onclick=\"ga('send','pageview','/x/pbc/2019/03-26-ms-7-r-python-jupyter');\"><b>Running R and Python in Jupyter</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<!--#content end--></div>\n<div id=\"sidebar\">\n<div class=\"latn\">\n<h3><b><a href=\"/news/index.html\">Latest News</a></b></h3>\n<ul style=\"font-size:14px; margin-top:5px\">\n<li> <a href=\"https://www.kdnuggets.com/2019/03/datathon-data-science-hackathon-april.html\">Datathon 2019: The International Data Science Hackathon...</a><li> <a href=\"https://www.kdnuggets.com/2019/03/random-forest-python.html\">Explaining Random Forest (with Python Implementation)</a><li> <a href=\"https://www.kdnuggets.com/2019/03/beginners-guide-linear-regression-python-scikit-learn.html\">A Beginner\u2019s Guide to Linear Regression in Python wit...</a><li> <a href=\"https://www.kdnuggets.com/2019/03/interpolation-autoencoders-adversarial-regularizer.html\">Interpolation in Autoencoders via an Adversarial Regula...</a><li> <a href=\"https://www.kdnuggets.com/jobs/19/03-29-cisco-machine-learning-engineer-support-bot-b.html\">Cisco: Machine Learning Engineer/Support Bot Designer [...</a><li> <a href=\"https://www.kdnuggets.com/2019/03/delaware-gain-skills-need-data-driven-career.html\">Gain the Skills You Need to Level-Up in Your Data-Drive...</a></li></li></li></li></li></li></ul>\n</div>\n<div>\n<script type=\"text/javascript\">kda_sid_write(kda_sid_n);</script>\n</div>\n<br/><script src=\"/aps/sbm.js\" type=\"text/javascript\"></script>\n</div>\n</div><div class=\"breadcrumbs_bottom\">\n<div class=\"breadcumb\">\n<br>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2019/index.html\">2019</a> \u00bb <a href=\"https://www.kdnuggets.com/2019/03/index.html\">Mar</a> \u00bb <a href=\"https://www.kdnuggets.com/2019/03/tutorials.html\">Tutorials, Overviews</a> \u00bb Explaining Random Forest (with Python Implementation) (\u00a0<a href=\"/2019/n13.html\">19:n13</a>\u00a0)    </br></div>\n</div>\n<!--#content_wrapper end--></div>\n<br>\n<div id=\"footer\">\n<br/>\u00a9 2019 KDnuggets. <a href=\"/about/index.html\">About KDnuggets</a>. \u00a0<a href=\"/news/privacy-policy.html\">Privacy policy</a>. <a href=\"/terms-of-service.html\">Terms of Service</a><br/>\u00a0\n<div class=\"kd_bottom\">\n<div class=\"footer-container\">\n<div class=\"footer-news\">\n<a href=\"/news/subscribe.html\" onclick=\"_gaq.push(['_trackPageview','/x/bot/sub']);\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a>\n</div>\n<div class=\"footer-sm\">\n<a href=\"https://twitter.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/twt']);\" target=\"_blank\"><img height=\"32\" src=\"/images/tw_c48.png\" width=\"32\"/></a>\n<a href=\"https://facebook.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/fb']);\" target=\"_blank\"><img alt=\"Facebook\" height=\"32\" src=\"/images/fb_c48.png\" width=\"32\"/></a>\n<a href=\"https://www.linkedin.com/groups/54257\" onclick=\"_gaq.push(['_trackPageview','/x/bot/in']);\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"32\" src=\"/images/in_c48.png\" width=\"32\"/></a>\n</div>\n</div>\n<div class=\"close-footer\">X</div>\n</div>\n<script type=\"text/javascript\">\n  jQuery('.close-footer').click(\n      function(){       \n         jQuery('.kd_bottom').hide();\n      }\n   );\n</script> </div>\n<div class=\"clear\"><!--blank--></div>\n</br></div>\n<div style=\"display: none;\"><div id=\"boxzilla-box-82996-content\"><script type=\"text/javascript\">(function() {\n\tif (!window.mc4wp) {\n\t\twindow.mc4wp = {\n\t\t\tlisteners: [],\n\t\t\tforms    : {\n\t\t\t\ton: function (event, callback) {\n\t\t\t\t\twindow.mc4wp.listeners.push({\n\t\t\t\t\t\tevent   : event,\n\t\t\t\t\t\tcallback: callback\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})();\n</script><!-- MailChimp for WordPress v4.1.14 - https://wordpress.org/plugins/mailchimp-for-wp/ --><form class=\"mc4wp-form mc4wp-form-77281\" data-id=\"77281\" data-name=\"Subscribe to KDnuggets News\" id=\"mc4wp-form-1\" method=\"post\"><div class=\"mc4wp-form-fields\"><div class=\"header-container\">\n<img align=\"left\" src=\"/wp-content/uploads/envelope.png\"><a href=\"/news/subscribe.html\">Get KDnuggets, a leading newsletter on AI, \r\n  Data Science, and Machine Learning</a>\n</img></div>\n<div class=\"form-fields\">\n<div class=\"field-container\"><label>Email:</label><input maxlength=\"60\" name=\"EMAIL\" placeholder=\"Your email\" required=\"\" size=\"30\" type=\"email\"/></div>\n<div class=\"field-container submit-container\"><div class=\"form-button\" onclick=\"document.getElementById('mc4wp-form-1').submit()\">Sign Up</div></div>\n</div>\n<label style=\"display: none !important;\">Leave this field empty if you're human: <input autocomplete=\"off\" name=\"_mc4wp_honeypot\" tabindex=\"-1\" type=\"text\" value=\"\"/></label><input name=\"_mc4wp_timestamp\" type=\"hidden\" value=\"1554076810\"/><input name=\"_mc4wp_form_id\" type=\"hidden\" value=\"77281\"/><input name=\"_mc4wp_form_element_id\" type=\"hidden\" value=\"mc4wp-form-1\"/></div><div class=\"mc4wp-response\"></div></form><!-- / MailChimp for WordPress Plugin -->\n</div></div><script type=\"text/javascript\">(function() {function addEventListener(element,event,handler) {\n\tif(element.addEventListener) {\n\t\telement.addEventListener(event,handler, false);\n\t} else if(element.attachEvent){\n\t\telement.attachEvent('on'+event,handler);\n\t}\n}function maybePrefixUrlField() {\n\tif(this.value.trim() !== '' && this.value.indexOf('http') !== 0) {\n\t\tthis.value = \"http://\" + this.value;\n\t}\n}\n\nvar urlFields = document.querySelectorAll('.mc4wp-form input[type=\"url\"]');\nif( urlFields && urlFields.length > 0 ) {\n\tfor( var j=0; j < urlFields.length; j++ ) {\n\t\taddEventListener(urlFields[j],'blur',maybePrefixUrlField);\n\t}\n}/* test if browser supports date fields */\nvar testInput = document.createElement('input');\ntestInput.setAttribute('type', 'date');\nif( testInput.type !== 'date') {\n\n\t/* add placeholder & pattern to all date fields */\n\tvar dateFields = document.querySelectorAll('.mc4wp-form input[type=\"date\"]');\n\tfor(var i=0; i<dateFields.length; i++) {\n\t\tif(!dateFields[i].placeholder) {\n\t\t\tdateFields[i].placeholder = 'YYYY-MM-DD';\n\t\t}\n\t\tif(!dateFields[i].pattern) {\n\t\t\tdateFields[i].pattern = '[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])';\n\t\t}\n\t}\n}\n\n})();</script><script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_options = {\"testMode\":\"\",\"boxes\":[{\"id\":82996,\"icon\":\"&times;\",\"content\":\"\",\"css\":{\"background_color\":\"#eeee22\",\"width\":600,\"border_width\":2,\"border_style\":\"double\",\"position\":\"bottom-left\"},\"trigger\":{\"method\":\"time_on_page\",\"value\":\"3\"},\"animation\":\"fade\",\"cookie\":{\"triggered\":0,\"dismissed\":336},\"rehide\":true,\"position\":\"bottom-left\",\"screenWidthCondition\":{\"condition\":\"larger\",\"value\":500},\"closable\":true,\"post\":{\"id\":82996,\"title\":\"Subscribe to KDnuggets\",\"slug\":\"subscribe-to-kdnuggets\"}}]};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla/assets/js/script.min.js?ver=3.2.5\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_stats_config = {\"ajaxurl\":\"https:\\/\\/www.kdnuggets.com\\/wp-admin\\/admin-ajax.php?action=boxzilla_stats_track\"};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla-stats/assets/js/tracking.min.js?ver=1.0.4\" type=\"text/javascript\"></script>\n<script src=\"https://www.kdnuggets.com/wp-includes/js/wp-embed.min.js?ver=4.9.10\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar mc4wp_forms_config = [];\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/forms-api.min.js?ver=4.1.14\" type=\"text/javascript\"></script>\n<!--[if lte IE 9]>\n<script type='text/javascript' src='https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/third-party/placeholders.min.js?ver=4.1.14'></script>\n<![endif]-->\n<!--/.main_wrapper--></body></html>\n<script src=\"https://s7.addthis.com/js/300/addthis_widget.js#pubid=gpsaddthis\" type=\"text/javascript\"></script>\n\n\n<!-- Dynamic page generated in 0.688 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2019-03-31 20:00:10 -->\n<!-- Compression = gzip -->", "content": "comments By The Learning Machine Random Forest (+Python implementation) 1. Introduction This article is written by The Learning Machine, a new open-source project that aims to create an interactive roadmap containing A-Z explanations of concepts, methods, algorithms and their code implementations in either Python or R, accessible for people with various backgrounds. Check out our click-and-go Machine Learning Mind Map with algorithm explanations and Python implementation. 2. Random Forest Random Forest is a flexible, easy to use machine learning algorithm that produces, even without hyper-parameter tuning, a great result most of the time. It can be used for both classification and regression tasks. In this article, you are going to learn how the random forest algorithm deals with classification and regression problems. To understand the Random Forest algorithm, you have to be familiar with Decision Trees at first. Read an article on Decision Trees here. One of the common problems with decision trees, especially the ones that have a table full of columns, is that they tend to overfit a lot. Sometimes it looks like the tree just memorizes the data. Here are the typical examples of decision trees that overfit, both for categorical and continuous data: I. Categorical: If the client is male, between 15 and 25, from the US, likes ice-cream, has a German friend, hates birds and ate pancakes on August 25th, 2012, - he is likely to download Pokemon Go. II. Continuous: Random Forest prevents this problem: it is an ensemble of multiple decision trees, not just one. And the more the number of these decision trees in Random Forest, the better the generalization. More precisely, Random Forest works as follows: Selects k features (columns) from the dataset (table) with a total of m features randomly (where k<<m). Then, it builds a Decision Tree from those k features. Repeats n times so that you have n Decision Trees built from different random combinations of k features (or a different random sample of the data, called bootstrap sample). Takes each of the n built Decision Trees and passes a random variable to predict the outcome. Stores the predicted outcome (target), so that you have a total of n outcomes from the n Decision Trees. Calculates the votes for each predicted target and takes the mode (most frequent target variable). In other words, considers the high voted predicted target as the final prediction from the random forest algorithm. * In case of a regression problem, for a new record, each tree in the forest predicts a value for Y (output). The final value can be calculated by taking the average of all the values predicted by all the trees in a forest. Or, in case of a classification problem, each tree in the forest predicts the category to which the new record belongs. Finally, the new record is assigned to the category that wins the majority vote. Example: James wants to decide what places he should visit during his one week stay in Paris. He goes to a friend who lived there one year and asks what he visited in the past and if he liked it or not. Based on his experience, he will give James some advice. This is a typical decision tree algorithm approach. James\u2019 friend decided about what James should visit, based on his personal experience of a year. Later, James starts asking more and more of his friends to advise him, and they recommend the places they have been to. Then James chooses the places that were recommend the most to him, which is the typical Random Forest algorithm approach. Thus, Random Forest is an algorithm that builds n decision trees by randomly selecting k out of the total of m features for every decision tree, and takes the mode (average, if regression) of the predicted outcomes. 3. Pros & Cons Advantages: Can be used for both classification and regression problems: Random Forest works well when you have both categorical and numerical features. Reduction in overfitting: by averaging several trees, there is a significantly lower risk of overfitting. Make a wrong prediction only when more than half of the base classifiers are wrong: Random Forest is very stable - even if a new data point is introduced in the dataset, the overall algorithm is not affected much as new data may impact one tree, but it is very hard for it to impact all the trees. Disadvantages: Random forests have been observed to overfit for some datasets with noisy classification/regression tasks. More complex and computationally expensive than decision tree algorithm. Due to their complexity, they require much more time to train than other comparable algorithms. 4. Important Hyperparameters The Hyperparameters in a random forest are either used to increase the predictive power of the model or to make the model faster. Below, hyperparameters of sklearn built-in random forest function is described: Increasing the Predictive Power n_estimators: the number of trees the algorithm builds before taking the maximum voting or taking averages of predictions. In general, a higher number of trees increases the performance and makes the predictions more stable, but it also slows down the computation. max_features: the maximum number of features Random Forest is allowed to try in an individual tree. Sklearn provides several options, described in their documentation. min_sample_leaf: determines the minimum number of leaves that are required to split an internal node. Increasing the Models Speed n_jobs: tells the engine how many processors it is allowed to use. If it has a value of 1, it can only use one processor. A value of \u201c-1\u201d means that there is no limit. random_state: makes the model\u2019s output replicable. The model will always produce the same results when it has a definite value of random_state and if it has been given the same hyperparameters and the same training data. oob_score: (also called oob sampling) - a random forest cross-validation method. In this sampling, about one-third of the data is not used to train the model and can be used to evaluate its performance. These samples are called the out of bag samples. It is very similar to the leave-one-out cross-validation method, but almost no additional computational burden goes along with it. 5. Python Implementation View/download a template of Random Forest located in a git repository here. Resources: On-line and web-based: Analytics, Data Mining, Data Science, Machine Learning education Software for Analytics, Data Science, Data Mining, and Machine Learning Related: Random forests explained intuitively Data Scientist Interviews Demystified A Tour of The Top 10 Algorithms for Machine Learning Newbies var disqus_shortname = 'kdnuggets'; ( { var dsq = ; dsq.type = 'text/javascript'; dsq.async = true; dsq.src = '", "tfidf": {"logidf": {"increas": 0.277820718929, "below": 0.813626591936, "top": 0.609100637788, "written": 0.671587369833, "pancak": 4.682131227119999, "frequent": 0.7443211360850001, "assign": 1.3445959556, "this": 0.0037864490525, "common": 0.338325805271, "git": 5.8883741799800005, "tri": 0.61759152916, "onli": 0.025324268329099998, "mode": 2.00027135827, "great": 0.235805258079, "column": 1.95699427938, "scienc": 0.841436178891, "repeat": 1.0567930591299999, "tune": 2.3434700776599997, "bird": 1.86627452464, "befor": 0.0956377718795, "due": 0.21341214386399998, "task": 1.35748680661, "oob": 6.0349776541799995, "processor": 3.63708238138, "familiar": 1.92626315167, "categor": 2.70937382803, "first": 0.0075872898121599995, "which": 0.00517841384543, "document": 0.932547122383, "typic": 0.812774319158, "start": 0.236443369291, "may": 0.050709995284400004, "allow": 0.24028061118900002, "high": 0.13782378654000002, "expens": 1.26563201674, "continu": 0.13040487398700001, "output": 2.03822657827, "from": 0.000567054168866, "noisi": 4.1313002687400004, "use": 0.0292080197316, "multipl": 1.01092401812, "con": 3.12434471114, "reduct": 1.8437292863099999, "either": 0.459327638815, "can": 0.162341096394, "implement": 1.27437940907, "almost": 0.42907884333400004, "each": 0.173741689304, "learn": 0.842752064745, "icecream": 6.0349776541799995, "code": 1.35601909597, "decid": 0.655322871893, "model": 0.7374500731110001, "person": 0.34018281601800004, "educ": 0.696807183384, "njob": 6.0349776541799995, "num": 0.00031499039539700004, "valu": 0.823193310148, "scientist": 1.54634128444, "goe": 1.4473284897999998, "problem": 0.569140724273, "variabl": 2.1687230672, "week": 0.5907388641619999, "our": 0.8576392141820001, "later": 0.0829654259878, "other": 0.00987474791976, "german": 0.8016199500650001, "are": 0.0294674735827, "machin": 1.39235958062, "place": 0.0957070839572, "power": 0.292396282715, "predict": 1.6457402376899999, "should": 0.509419876758, "classificationregress": 6.0349776541799995, "train": 0.660918312839, "ensembl": 2.81820931165, "along": 0.260344385917, "new": 0.0177299468511, "softwar": 2.32849096333, "differ": 0.212321121312, "creat": 0.222576818514, "not": 0.0155524130075, "oobscor": 6.0349776541799995, "maximum": 1.5687671009200002, "minsampleleaf": 6.0349776541799995, "describ": 0.385447603125, "his": 0.0901772433641, "complex": 0.8502416364309999, "ate": 3.5744895317400003, "base": 0.13652330228700002, "male": 1.24442043932, "dsqtype": 6.0349776541799995, "project": 0.561601885907, "leaveoneout": 6.0349776541799995, "easi": 1.6665296351499999, "option": 1.39846181161, "concept": 0.977224437103, "read": 0.83939268088, "deal": 0.780914701253, "live": 0.266903399347, "well": 0.0635144383156, "client": 2.6488048591599997, "interview": 1.2232212893899999, "mind": 1.2786688388299998, "also": 0.0146571578, "these": 0.0715336194008, "check": 1.87281049562, "numer": 0.606093812346, "featur": 0.423387418142, "mine": 1.58430908678, "signific": 0.373571744332, "approach": 0.7302336145810001, "vote": 1.09899028905, "numth": 0.161378382949, "true": 0.938325629634, "dsqsrc": 6.0349776541799995, "determin": 0.772833019022, "minimum": 1.79668465441, "lower": 0.742201929994, "memor": 2.77992217273, "forest": 1.5883097076, "interact": 1.4858210267899998, "those": 0.17854939087299998, "but": 0.0161923720719, "produc": 0.314320812003, "faster": 2.03003967967, "store": 1.2374487335200002, "node": 3.7920308275, "overfit": 6.0349776541799995, "build": 0.491137452091, "hate": 2.36804786744, "onethird": 6.0349776541799995, "general": 0.114952578063, "python": 4.03065674296, "experi": 0.626272953933, "tend": 1.21597024462, "pari": 1.33713233602, "download": 2.6841506319, "prevent": 0.7706525875229999, "method": 0.944461608841, "risk": 1.4100048408899999, "comput": 1.36806891594, "case": 0.395406268889, "when": 0.0205549888584, "addit": 0.220218882972, "hyperparamet": 6.0349776541799995, "kdnugget": 6.0349776541799995, "viewdownload": 6.0349776541799995, "leav": 0.507743957229, "all": 0.011402632097799998, "advic": 1.9574402102700001, "word": 0.585861082385, "consid": 0.214894723824, "observ": 0.7995160149320001, "than": 0.0322608622182, "precis": 1.67187902939, "here": 0.8850381883700001, "individu": 0.588013447985, "averag": 0.957011687995, "webbas": 6.0349776541799995, "compar": 0.6239191809269999, "like": 0.139053576545, "lot": 1.4835969502500002, "choos": 1.43007066072, "clickandgo": 6.0349776541799995, "sever": 0.06991112039689999, "pros": 4.95406494261, "who": 0.0609002329859, "import": 0.292818277066, "recommend": 1.36461126863, "random": 1.9727214065099998, "record": 0.353010356953, "split": 1.24442043932, "introduc": 0.5457137524260001, "past": 0.7016234157610001, "data": 1.2168205848, "alway": 0.726319204572, "builtin": 6.0349776541799995, "work": 0.109034567273, "pokemon": 6.0349776541799995, "most": 0.020747896295599998, "better": 0.6964279406, "articl": 0.702131739574, "onlin": 0.957503854357, "down": 0.306673741186, "half": 0.564256167492, "nestim": 6.0349776541799995, "especi": 0.511098609709, "some": 0.0395735090645, "locat": 0.46854337067199997, "overal": 1.1132694464700001, "tree": 1.41777488775, "visit": 0.791283218833, "decis": 0.7701082216959999, "var": 4.77472401395, "the": 0.0, "point": 0.23103235903299998, "just": 0.289531434109, "classifi": 1.6665296351499999, "evalu": 1.9388802431299998, "randomst": 6.0349776541799995, "dsq": 6.0349776541799995, "classif": 2.08779073629, "their": 0.015360505122700001, "built": 0.690379535065, "august": 0.384706999499, "provid": 0.19517784432500002, "friend": 0.7893395836239999, "exampl": 0.40868267499899996, "impact": 1.09033222631, "stabl": 1.90234060974, "want": 0.6916366062549999, "demystifi": 5.822416212189999, "intern": 0.265095377816, "tour": 1.2492418381000001, "replic": 3.03924538062, "requir": 0.424253510675, "jame": 0.658238325853, "advis": 1.6123395734600001, "thus": 0.49857627139300004, "have": 0.0147850023412, "target": 1.1690639496200002, "slow": 1.39820680715, "give": 0.311392552224, "contain": 0.468845318236, "sampl": 1.9786264883900002, "look": 0.6463866936, "what": 0.225887296827, "bag": 2.76380903459, "that": 0.00397614837964, "limit": 0.41782385463, "call": 0.0654627744488, "repositori": 3.8060957569699996, "win": 1.01265652029, "follow": 0.045356911094199995, "wrong": 1.70078769102, "hard": 1.00522796406, "out": 0.0584263909193, "total": 0.43567888670500005, "one": 0.0062553516455, "crossvalid": 6.0349776541799995, "for": 0.00031499039539700004, "and": 6.29901420636e-05, "perform": 0.42618085058, "templat": 3.7726664603199995, "even": 0.152388564834, "introduct": 1.02276465794, "understand": 1.0880858756799998, "newbi": 6.0349776541799995, "burden": 2.53290347794, "there": 0.0400978929255, "tabl": 1.34049610661, "categori": 1.38176946652, "function": 0.914465741594, "disadvantag": 2.57088784228, "peopl": 0.193265578473, "roadmap": 5.19522699942, "engin": 0.904767558276, "similar": 0.318556092114, "regress": 3.9359915164199997, "ask": 0.776797209847, "final": 0.292733863948, "sklearn": 6.0349776541799995, "both": 0.050842533389300004, "major": 0.138474663439, "been": 0.023645982368400004, "algorithm": 3.33044239518, "stay": 0.9927416990379999, "were": 0.024291143681099997, "dsqasync": 6.0349776541799995, "comment": 1.11826753454, "higher": 0.752308398995, "him": 0.49124039099699995, "take": 0.130691962197, "mani": 0.0433157581221, "mean": 0.37092128352, "veri": 0.230159793238, "you": 0.771469692294, "relat": 0.21310030165399999, "then": 0.08303386523089999, "pass": 0.48130432974, "opensourc": 6.0349776541799995, "they": 0.0297269947676, "outcom": 2.01339244624, "resourc": 1.08137694258, "with": 0.00119749171339, "advantag": 1.20120515883, "various": 0.28692650007, "number": 0.0966085784186, "everi": 0.391485427421, "intuit": 3.3216780971900004, "select": 0.704804687133, "has": 0.0427239448548, "same": 0.112059649604, "more": 0.017024931599999998, "where": 0.0649921387457, "aim": 1.06333853704, "map": 1.40434493384, "sometim": 0.538025155343, "calcul": 1.8131506592099997, "about": 0.0628434774746, "much": 0.17749572930100002, "year": 0.047402238894600005, "make": 0.07349765782289999, "explan": 1.87322041569, "between": 0.033953681165299995, "belong": 1.2527629685, "without": 0.258874517941, "maxfeatur": 6.0349776541799995, "will": 0.202786534915, "access": 0.627805882716, "bootstrap": 5.57821925168, "textjavascript": 6.0349776541799995, "definit": 1.1755733298, "dataset": 5.26584456664, "result": 0.136378908381, "speed": 1.3533338752700002, "dure": 0.0491209066894, "tell": 1.21236434401, "combin": 0.529218310751, "flexibl": 2.2707222351599996, "given": 0.303255810831, "analyt": 2.8481901438599997, "background": 1.3931203261899998, "affect": 0.908041904384, "explain": 0.955700427358, "disqusshortnam": 6.0349776541799995, "full": 0.511203624148, "time": 0.0112115188626, "how": 0.47156695693000006}, "tfidf": {"increas": 5.280997921, "below": 2.25607503197, "top": 1.8387769284200002, "written": 1.9573418813999999, "pancak": 108.0, "frequent": 2.10501193317, "assign": 3.83663605607, "this": 5.0189681335500005, "common": 1.4025974025999999, "git": 360.818181818, "tri": 1.8544562551099997, "onli": 2.0512953033200003, "mode": 14.782122905020001, "great": 1.26592775696, "column": 14.156041016500001, "scienc": 4.63939216832, "repeat": 2.8771293947099994, "tune": 10.4173228346, "bird": 6.46416938111, "befor": 1.10036041031, "due": 1.23789473684, "task": 7.77282741738, "oob": 417.78947368400003, "processor": 75.961722488, "familiar": 6.86381322957, "categor": 45.0596026491, "first": 1.00761614623, "which": 2.01038369, "document": 2.5409731114, "typic": 6.762459179339999, "start": 1.26673581744, "may": 1.05201775893, "allow": 2.5432118542200004, "high": 1.14777327935, "expens": 3.5453327378300004, "continu": 2.27857911734, "output": 15.353965183760002, "from": 6.00340328982, "noisi": 62.2588235294, "use": 8.237110059039999, "multipl": 2.74813917258, "con": 22.744985673400002, "reduct": 6.320063694269999, "either": 3.1660185462199997, "can": 5.8813069571, "implement": 14.30592475784, "almost": 1.53584212054, "each": 4.75899280576, "learn": 18.5820043892, "icecream": 417.78947368400003, "code": 3.8807137619199996, "decid": 3.8515283842800003, "model": 12.5435870424, "person": 1.40520446097, "educ": 2.00733341763, "njob": 417.78947368400003, "num": 11.00346544011, "valu": 13.666571018640003, "scientist": 4.69426374926, "goe": 8.503481521160001, "problem": 10.60048965054, "variabl": 17.494214876039997, "week": 1.80532181033, "our": 2.35758835759, "later": 1.08650424309, "other": 2.01984732824, "german": 2.22914911542, "are": 6.17943561468, "machin": 28.170342205319997, "place": 3.3013100436600005, "power": 2.6792675723599997, "predict": 72.58785107770001, "should": 3.3286508019800003, "classificationregress": 417.78947368400003, "train": 5.8097096853, "ensembl": 16.746835443, "along": 1.2973768080399999, "new": 6.1073283324, "softwar": 10.2624434389, "differ": 2.4730898045, "creat": 1.2492917847, "not": 4.06269592476, "oobscor": 417.78947368400003, "maximum": 9.60145146658, "minsampleleaf": 417.78947368400003, "describ": 2.94054454528, "his": 4.377472944080001, "complex": 4.6804245283, "ate": 35.6764044944, "base": 3.43884476535, "male": 3.4709226060300002, "dsqtype": 417.78947368400003, "project": 1.7534791252500002, "leaveoneout": 417.78947368400003, "easi": 5.2937645882, "option": 4.04896710023, "concept": 2.65707112971, "read": 2.3149606299200003, "deal": 2.18346857379, "live": 1.30591428806, "well": 1.0655748708, "client": 14.1371326803, "interview": 3.3981164383599998, "mind": 3.5918552036199998, "also": 2.02953020134, "these": 2.14830852504, "check": 6.50655737705, "numer": 1.83325635104, "featur": 10.68988072334, "mine": 9.751842751839998, "signific": 1.4529147982100001, "approach": 4.15113086678, "vote": 12.004536862, "numth": 1.1751295336799998, "true": 2.55569864778, "dsqsrc": 417.78947368400003, "determin": 2.1658935879900003, "minimum": 6.02962400304, "lower": 2.10055570257, "memor": 16.1177664975, "forest": 112.59574468091999, "interact": 4.4185917061, "those": 1.19548192771, "but": 3.04897253697, "produc": 2.73865792652, "faster": 7.61438848921, "store": 3.44680851064, "node": 44.3463687151, "overfit": 2088.94736842, "build": 4.9025218734000005, "hate": 10.676529926, "onethird": 417.78947368400003, "general": 2.2436404748400003, "python": 225.1914893616, "experi": 3.74125132556, "tend": 3.3735656608599998, "pari": 3.80810745982, "download": 14.6457564576, "prevent": 2.16117615029, "method": 7.714285714290001, "risk": 4.095975232200001, "comput": 11.783275606140002, "case": 2.96997474512, "when": 3.0623030926499997, "addit": 1.24634950542, "hyperparamet": 2088.94736842, "kdnugget": 417.78947368400003, "viewdownload": 417.78947368400003, "leav": 1.6615384615399997, "all": 3.03440366973, "advic": 7.08117752007, "word": 1.7965372864099998, "consid": 1.2397313759200002, "observ": 2.22446406053, "than": 3.0983606557499996, "precis": 5.322158900440001, "here": 7.26923076924, "individu": 1.8004082558400003, "averag": 10.41561423652, "webbas": 417.78947368400003, "compar": 1.8662278123900002, "like": 4.596742671, "lot": 4.40877534018, "choos": 4.17899447223, "clickandgo": 417.78947368400003, "sever": 2.14482572278, "pros": 141.75, "who": 1.06279287723, "import": 1.3401992233700002, "recommend": 7.828402366860001, "random": 179.7554347825, "record": 4.27003765464, "split": 3.4709226060300002, "introduc": 1.7258397651900002, "past": 2.01702452039, "data": 40.51722671208, "alway": 2.06745670009, "builtin": 417.78947368400003, "work": 2.23040179826, "pokemon": 417.78947368400003, "most": 3.06289389069, "better": 2.0065722952500002, "articl": 6.054150247859999, "onlin": 2.6051854282900004, "down": 1.35889754344, "half": 1.75813953488, "nestim": 417.78947368400003, "especi": 1.66712170534, "some": 2.08073394496, "locat": 1.59766529134, "overal": 3.0442953020099996, "tree": 99.070202808, "visit": 6.618677042789999, "decis": 30.240000000000002, "var": 236.95522388, "the": 75.0, "point": 1.25990000794, "just": 2.67160286074, "classifi": 5.2937645882, "evalu": 6.9509632224199995, "randomst": 835.5789473680001, "dsq": 417.78947368400003, "classif": 32.268292682920006, "their": 3.0464372521500005, "built": 3.98894472362, "august": 1.46918378679, "provid": 1.21552714187, "friend": 8.80776699028, "exampl": 3.00966824644, "impact": 5.95052473764, "stabl": 13.40312368088, "want": 1.99698113208, "demystifi": 337.787234043, "intern": 1.30355530011, "tour": 3.4876977152900004, "replic": 20.889473684200002, "requir": 3.05689804564, "jame": 11.588321167859998, "advis": 5.0145293746099995, "thus": 1.6463756092500001, "have": 7.104263887979998, "target": 12.875912408760001, "slow": 4.04793472718, "give": 1.3653250774, "contain": 1.59814777532, "sampl": 43.39681093392, "look": 1.9086318826599997, "what": 3.7603031738399997, "bag": 15.8601398601, "that": 12.047808765, "limit": 1.5186531471200002, "call": 3.2029589778, "repositori": 44.974504249300004, "win": 2.75290445639, "follow": 1.04640126549, "wrong": 10.956521739140001, "hard": 2.73253012048, "out": 3.18050083473, "total": 4.638036809819999, "one": 7.04392470054, "crossvalid": 835.5789473680001, "for": 12.00378048012, "and": 24.001511811119997, "perform": 3.0627954085000004, "templat": 43.495890411000005, "even": 2.32922535212, "introduct": 2.7808723068799996, "understand": 2.96858638743, "newbi": 417.78947368400003, "burden": 12.5900079302, "there": 3.12273800157, "tabl": 7.64187725632, "categori": 7.96388261852, "function": 2.495441685, "disadvantag": 13.077429983499998, "peopl": 1.21320495186, "roadmap": 180.409090909, "engin": 2.47135740971, "similar": 1.37514075357, "regress": 256.06451612899997, "ask": 4.3489932886, "final": 4.02025829325, "sklearn": 835.5789473680001, "both": 4.20862880244, "major": 1.14852058164, "been": 3.0717832957199995, "algorithm": 391.3098591556, "stay": 2.6986231514499996, "were": 1.02458857696, "dsqasync": 417.78947368400003, "comment": 3.05954904606, "higher": 2.1218925421, "him": 3.26868437306, "take": 6.8377000933200005, "mani": 1.04426757877, "mean": 1.44906900329, "veri": 3.77640342531, "you": 10.814713896450002, "relat": 1.23750876919, "then": 2.17315721032, "pass": 1.61818367139, "opensourc": 417.78947368400003, "they": 4.12069301148, "outcom": 29.95471698112, "resourc": 2.9487369985100003, "with": 8.009585671919998, "advantag": 3.32412060302, "various": 1.3323262839899999, "number": 5.50714583045, "everi": 1.47917637194, "intuit": 27.7068062827, "select": 4.04690288044, "has": 4.1745990008, "same": 3.35573874444, "more": 8.1373654536, "where": 1.06715063521, "aim": 2.8960233491400005, "map": 4.0728578758300005, "sometim": 1.7126213592200001, "calcul": 12.25945945946, "about": 2.12972030318, "much": 2.3884459154599997, "year": 2.0970873786400004, "make": 4.305064063440001, "explan": 13.0184501845, "between": 1.03453668708, "belong": 3.5, "without": 1.29547123623, "maxfeatur": 417.78947368400003, "will": 2.44962197192, "access": 1.8734953976900002, "bootstrap": 264.6, "textjavascript": 417.78947368400003, "definit": 3.24, "dataset": 580.829268294, "result": 2.29223216864, "speed": 3.8703071672400005, "dure": 1.0503473370799998, "tell": 3.36142282448, "combin": 1.69760479042, "flexibl": 9.68639414277, "given": 1.35426085473, "analyt": 34.513043478200004, "background": 4.02739726027, "affect": 2.4794627518400003, "explain": 2.60049140049, "disqusshortnam": 417.78947368400003, "full": 1.66729678639, "time": 3.03382381044, "how": 3.20500656102}, "freq": {"increas": 4, "below": 1, "top": 1, "written": 1, "pancak": 1, "frequent": 1, "assign": 1, "this": 5, "common": 1, "git": 1, "tri": 1, "onli": 2, "mode": 2, "great": 1, "column": 2, "scienc": 2, "repeat": 1, "tune": 1, "bird": 1, "befor": 1, "due": 1, "task": 2, "oob": 1, "processor": 2, "familiar": 1, "categor": 3, "first": 1, "which": 2, "document": 1, "typic": 3, "start": 1, "may": 1, "allow": 2, "high": 1, "expens": 1, "continu": 2, "output": 2, "from": 6, "noisi": 1, "use": 8, "multipl": 1, "con": 1, "reduct": 1, "either": 2, "can": 5, "implement": 4, "almost": 1, "each": 4, "learn": 8, "icecream": 1, "code": 1, "decid": 2, "model": 6, "person": 1, "educ": 1, "njob": 1, "num": 11, "valu": 6, "scientist": 1, "goe": 2, "problem": 6, "variabl": 2, "week": 1, "our": 1, "later": 1, "other": 2, "german": 1, "are": 6, "machin": 7, "place": 3, "power": 2, "predict": 14, "should": 2, "classificationregress": 1, "train": 3, "ensembl": 1, "along": 1, "new": 6, "softwar": 1, "differ": 2, "creat": 1, "not": 4, "oobscor": 1, "maximum": 2, "minsampleleaf": 1, "describ": 2, "his": 4, "complex": 2, "ate": 1, "base": 3, "male": 1, "dsqtype": 1, "project": 1, "leaveoneout": 1, "easi": 1, "option": 1, "concept": 1, "read": 1, "deal": 1, "live": 1, "well": 1, "client": 1, "interview": 1, "mind": 1, "also": 2, "these": 2, "check": 1, "numer": 1, "featur": 7, "mine": 2, "signific": 1, "approach": 2, "vote": 4, "numth": 1, "true": 1, "dsqsrc": 1, "determin": 1, "minimum": 1, "lower": 1, "memor": 1, "forest": 23, "interact": 1, "those": 1, "but": 3, "produc": 2, "faster": 1, "store": 1, "node": 1, "overfit": 5, "build": 3, "hate": 1, "onethird": 1, "general": 2, "python": 4, "experi": 2, "tend": 1, "pari": 1, "download": 1, "prevent": 1, "method": 3, "risk": 1, "comput": 3, "case": 2, "when": 3, "addit": 1, "hyperparamet": 5, "kdnugget": 1, "viewdownload": 1, "leav": 1, "all": 3, "advic": 1, "word": 1, "consid": 1, "observ": 1, "than": 3, "precis": 1, "here": 3, "individu": 1, "averag": 4, "webbas": 1, "compar": 1, "like": 4, "lot": 1, "choos": 1, "clickandgo": 1, "sever": 2, "pros": 1, "who": 1, "import": 1, "recommend": 2, "random": 25, "record": 3, "split": 1, "introduc": 1, "past": 1, "data": 12, "alway": 1, "builtin": 1, "work": 2, "pokemon": 1, "most": 3, "better": 1, "articl": 3, "onlin": 1, "down": 1, "half": 1, "nestim": 1, "especi": 1, "some": 2, "locat": 1, "overal": 1, "tree": 24, "visit": 3, "decis": 14, "var": 2, "the": 75, "point": 1, "just": 2, "classifi": 1, "evalu": 1, "randomst": 2, "dsq": 1, "classif": 4, "their": 3, "built": 2, "august": 1, "provid": 1, "friend": 4, "exampl": 2, "impact": 2, "stabl": 2, "want": 1, "demystifi": 1, "intern": 1, "tour": 1, "replic": 1, "requir": 2, "jame": 6, "advis": 1, "thus": 1, "have": 7, "target": 4, "slow": 1, "give": 1, "contain": 1, "sampl": 6, "look": 1, "what": 3, "bag": 1, "that": 12, "limit": 1, "call": 3, "repositori": 1, "win": 1, "follow": 1, "wrong": 2, "hard": 1, "out": 3, "total": 3, "one": 7, "crossvalid": 2, "for": 12, "and": 24, "perform": 2, "templat": 1, "even": 2, "introduct": 1, "understand": 1, "newbi": 1, "burden": 1, "there": 3, "tabl": 2, "categori": 2, "function": 1, "disadvantag": 1, "peopl": 1, "roadmap": 1, "engin": 1, "similar": 1, "regress": 5, "ask": 2, "final": 3, "sklearn": 2, "both": 4, "major": 1, "been": 3, "algorithm": 14, "stay": 1, "were": 1, "dsqasync": 1, "comment": 1, "higher": 1, "him": 2, "take": 6, "mani": 1, "mean": 1, "veri": 3, "you": 5, "relat": 1, "then": 2, "pass": 1, "opensourc": 1, "they": 4, "outcom": 4, "resourc": 1, "with": 8, "advantag": 1, "various": 1, "number": 5, "everi": 1, "intuit": 1, "select": 2, "has": 4, "same": 3, "more": 8, "where": 1, "aim": 1, "map": 1, "sometim": 1, "calcul": 2, "about": 2, "much": 2, "year": 2, "make": 4, "explan": 2, "between": 1, "belong": 1, "without": 1, "maxfeatur": 1, "will": 2, "access": 1, "bootstrap": 1, "textjavascript": 1, "definit": 1, "dataset": 3, "result": 2, "speed": 1, "dure": 1, "tell": 1, "combin": 1, "flexibl": 1, "given": 1, "analyt": 2, "background": 1, "affect": 1, "explain": 1, "disqusshortnam": 1, "full": 1, "time": 3, "how": 2}, "idf": {"increas": 1.32024948025, "below": 2.25607503197, "top": 1.8387769284200002, "written": 1.9573418813999999, "pancak": 108.0, "frequent": 2.10501193317, "assign": 3.83663605607, "this": 1.00379362671, "common": 1.4025974025999999, "git": 360.818181818, "tri": 1.8544562551099997, "onli": 1.0256476516600002, "mode": 7.391061452510001, "great": 1.26592775696, "column": 7.078020508250001, "scienc": 2.31969608416, "repeat": 2.8771293947099994, "tune": 10.4173228346, "bird": 6.46416938111, "befor": 1.10036041031, "due": 1.23789473684, "task": 3.88641370869, "oob": 417.78947368400003, "processor": 37.980861244, "familiar": 6.86381322957, "categor": 15.0198675497, "first": 1.00761614623, "which": 1.005191845, "document": 2.5409731114, "typic": 2.2541530597799997, "start": 1.26673581744, "may": 1.05201775893, "allow": 1.2716059271100002, "high": 1.14777327935, "expens": 3.5453327378300004, "continu": 1.13928955867, "output": 7.676982591880001, "from": 1.00056721497, "noisi": 62.2588235294, "use": 1.0296387573799999, "multipl": 2.74813917258, "con": 22.744985673400002, "reduct": 6.320063694269999, "either": 1.5830092731099998, "can": 1.17626139142, "implement": 3.57648118946, "almost": 1.53584212054, "each": 1.18974820144, "learn": 2.32275054865, "icecream": 417.78947368400003, "code": 3.8807137619199996, "decid": 1.9257641921400002, "model": 2.0905978404, "person": 1.40520446097, "educ": 2.00733341763, "njob": 417.78947368400003, "num": 1.00031504001, "valu": 2.2777618364400003, "scientist": 4.69426374926, "goe": 4.251740760580001, "problem": 1.76674827509, "variabl": 8.747107438019999, "week": 1.80532181033, "our": 2.35758835759, "later": 1.08650424309, "other": 1.00992366412, "german": 2.22914911542, "are": 1.02990593578, "machin": 4.02433460076, "place": 1.1004366812200002, "power": 1.3396337861799998, "predict": 5.18484650555, "should": 1.6643254009900001, "classificationregress": 417.78947368400003, "train": 1.9365698950999999, "ensembl": 16.746835443, "along": 1.2973768080399999, "new": 1.0178880554, "softwar": 10.2624434389, "differ": 1.23654490225, "creat": 1.2492917847, "not": 1.01567398119, "oobscor": 417.78947368400003, "maximum": 4.80072573329, "minsampleleaf": 417.78947368400003, "describ": 1.47027227264, "his": 1.0943682360200002, "complex": 2.34021226415, "ate": 35.6764044944, "base": 1.14628158845, "male": 3.4709226060300002, "dsqtype": 417.78947368400003, "project": 1.7534791252500002, "leaveoneout": 417.78947368400003, "easi": 5.2937645882, "option": 4.04896710023, "concept": 2.65707112971, "read": 2.3149606299200003, "deal": 2.18346857379, "live": 1.30591428806, "well": 1.0655748708, "client": 14.1371326803, "interview": 3.3981164383599998, "mind": 3.5918552036199998, "also": 1.01476510067, "these": 1.07415426252, "check": 6.50655737705, "numer": 1.83325635104, "featur": 1.52712581762, "mine": 4.875921375919999, "signific": 1.4529147982100001, "approach": 2.07556543339, "vote": 3.0011342155, "numth": 1.1751295336799998, "true": 2.55569864778, "dsqsrc": 417.78947368400003, "determin": 2.1658935879900003, "minimum": 6.02962400304, "lower": 2.10055570257, "memor": 16.1177664975, "forest": 4.89546716004, "interact": 4.4185917061, "those": 1.19548192771, "but": 1.01632417899, "produc": 1.36932896326, "faster": 7.61438848921, "store": 3.44680851064, "node": 44.3463687151, "overfit": 417.78947368400003, "build": 1.6341739578, "hate": 10.676529926, "onethird": 417.78947368400003, "general": 1.1218202374200001, "python": 56.2978723404, "experi": 1.87062566278, "tend": 3.3735656608599998, "pari": 3.80810745982, "download": 14.6457564576, "prevent": 2.16117615029, "method": 2.5714285714300003, "risk": 4.095975232200001, "comput": 3.9277585353800006, "case": 1.48498737256, "when": 1.02076769755, "addit": 1.24634950542, "hyperparamet": 417.78947368400003, "kdnugget": 417.78947368400003, "viewdownload": 417.78947368400003, "leav": 1.6615384615399997, "all": 1.01146788991, "advic": 7.08117752007, "word": 1.7965372864099998, "consid": 1.2397313759200002, "observ": 2.22446406053, "than": 1.03278688525, "precis": 5.322158900440001, "here": 2.42307692308, "individu": 1.8004082558400003, "averag": 2.60390355913, "webbas": 417.78947368400003, "compar": 1.8662278123900002, "like": 1.14918566775, "lot": 4.40877534018, "choos": 4.17899447223, "clickandgo": 417.78947368400003, "sever": 1.07241286139, "pros": 141.75, "who": 1.06279287723, "import": 1.3401992233700002, "recommend": 3.9142011834300003, "random": 7.1902173913, "record": 1.42334588488, "split": 3.4709226060300002, "introduc": 1.7258397651900002, "past": 2.01702452039, "data": 3.37643555934, "alway": 2.06745670009, "builtin": 417.78947368400003, "work": 1.11520089913, "pokemon": 417.78947368400003, "most": 1.02096463023, "better": 2.0065722952500002, "articl": 2.01805008262, "onlin": 2.6051854282900004, "down": 1.35889754344, "half": 1.75813953488, "nestim": 417.78947368400003, "especi": 1.66712170534, "some": 1.04036697248, "locat": 1.59766529134, "overal": 3.0442953020099996, "tree": 4.127925117, "visit": 2.20622568093, "decis": 2.16, "var": 118.47761194, "the": 1.0, "point": 1.25990000794, "just": 1.33580143037, "classifi": 5.2937645882, "evalu": 6.9509632224199995, "randomst": 417.78947368400003, "dsq": 417.78947368400003, "classif": 8.067073170730001, "their": 1.01547908405, "built": 1.99447236181, "august": 1.46918378679, "provid": 1.21552714187, "friend": 2.20194174757, "exampl": 1.50483412322, "impact": 2.97526236882, "stabl": 6.70156184044, "want": 1.99698113208, "demystifi": 337.787234043, "intern": 1.30355530011, "tour": 3.4876977152900004, "replic": 20.889473684200002, "requir": 1.52844902282, "jame": 1.9313868613099998, "advis": 5.0145293746099995, "thus": 1.6463756092500001, "have": 1.0148948411399998, "target": 3.2189781021900004, "slow": 4.04793472718, "give": 1.3653250774, "contain": 1.59814777532, "sampl": 7.23280182232, "look": 1.9086318826599997, "what": 1.25343439128, "bag": 15.8601398601, "that": 1.00398406375, "limit": 1.5186531471200002, "call": 1.0676529926, "repositori": 44.974504249300004, "win": 2.75290445639, "follow": 1.04640126549, "wrong": 5.478260869570001, "hard": 2.73253012048, "out": 1.06016694491, "total": 1.5460122699399999, "one": 1.00627495722, "crossvalid": 417.78947368400003, "for": 1.00031504001, "and": 1.00006299213, "perform": 1.5313977042500002, "templat": 43.495890411000005, "even": 1.16461267606, "introduct": 2.7808723068799996, "understand": 2.96858638743, "newbi": 417.78947368400003, "burden": 12.5900079302, "there": 1.04091266719, "tabl": 3.82093862816, "categori": 3.98194130926, "function": 2.495441685, "disadvantag": 13.077429983499998, "peopl": 1.21320495186, "roadmap": 180.409090909, "engin": 2.47135740971, "similar": 1.37514075357, "regress": 51.2129032258, "ask": 2.1744966443, "final": 1.34008609775, "sklearn": 417.78947368400003, "both": 1.05215720061, "major": 1.14852058164, "been": 1.0239277652399998, "algorithm": 27.9507042254, "stay": 2.6986231514499996, "were": 1.02458857696, "dsqasync": 417.78947368400003, "comment": 3.05954904606, "higher": 2.1218925421, "him": 1.63434218653, "take": 1.13961668222, "mani": 1.04426757877, "mean": 1.44906900329, "veri": 1.25880114177, "you": 2.1629427792900002, "relat": 1.23750876919, "then": 1.08657860516, "pass": 1.61818367139, "opensourc": 417.78947368400003, "they": 1.03017325287, "outcom": 7.48867924528, "resourc": 2.9487369985100003, "with": 1.0011982089899998, "advantag": 3.32412060302, "various": 1.3323262839899999, "number": 1.10142916609, "everi": 1.47917637194, "intuit": 27.7068062827, "select": 2.02345144022, "has": 1.0436497502, "same": 1.11857958148, "more": 1.0171706817, "where": 1.06715063521, "aim": 2.8960233491400005, "map": 4.0728578758300005, "sometim": 1.7126213592200001, "calcul": 6.12972972973, "about": 1.06486015159, "much": 1.1942229577299999, "year": 1.0485436893200002, "make": 1.0762660158600001, "explan": 6.50922509225, "between": 1.03453668708, "belong": 3.5, "without": 1.29547123623, "maxfeatur": 417.78947368400003, "will": 1.22481098596, "access": 1.8734953976900002, "bootstrap": 264.6, "textjavascript": 417.78947368400003, "definit": 3.24, "dataset": 193.609756098, "result": 1.14611608432, "speed": 3.8703071672400005, "dure": 1.0503473370799998, "tell": 3.36142282448, "combin": 1.69760479042, "flexibl": 9.68639414277, "given": 1.35426085473, "analyt": 17.256521739100002, "background": 4.02739726027, "affect": 2.4794627518400003, "explain": 2.60049140049, "disqusshortnam": 417.78947368400003, "full": 1.66729678639, "time": 1.01127460348, "how": 1.60250328051}, "logtfidf": {"increas": 1.111282875716, "below": 0.813626591936, "top": 0.609100637788, "written": 0.671587369833, "pancak": 4.682131227119999, "frequent": 0.7443211360850001, "assign": 1.3445959556, "this": 0.0189322452625, "common": 0.338325805271, "git": 5.8883741799800005, "tri": 0.61759152916, "onli": 0.050648536658199995, "mode": 4.00054271654, "great": 0.235805258079, "column": 3.91398855876, "scienc": 1.682872357782, "repeat": 1.0567930591299999, "tune": 2.3434700776599997, "bird": 1.86627452464, "befor": 0.0956377718795, "due": 0.21341214386399998, "task": 2.71497361322, "oob": 6.0349776541799995, "processor": 7.27416476276, "familiar": 1.92626315167, "categor": 8.12812148409, "first": 0.0075872898121599995, "which": 0.01035682769086, "document": 0.932547122383, "typic": 2.438322957474, "start": 0.236443369291, "may": 0.050709995284400004, "allow": 0.48056122237800003, "high": 0.13782378654000002, "expens": 1.26563201674, "continu": 0.26080974797400003, "output": 4.07645315654, "from": 0.0034023250131959997, "noisi": 4.1313002687400004, "use": 0.2336641578528, "multipl": 1.01092401812, "con": 3.12434471114, "reduct": 1.8437292863099999, "either": 0.91865527763, "can": 0.8117054819699999, "implement": 5.09751763628, "almost": 0.42907884333400004, "each": 0.694966757216, "learn": 6.74201651796, "icecream": 6.0349776541799995, "code": 1.35601909597, "decid": 1.310645743786, "model": 4.424700438666001, "person": 0.34018281601800004, "educ": 0.696807183384, "njob": 6.0349776541799995, "num": 0.0034648943493670007, "valu": 4.939159860888, "scientist": 1.54634128444, "goe": 2.8946569795999997, "problem": 3.414844345638, "variabl": 4.3374461344, "week": 0.5907388641619999, "our": 0.8576392141820001, "later": 0.0829654259878, "other": 0.01974949583952, "german": 0.8016199500650001, "are": 0.17680484149620002, "machin": 9.74651706434, "place": 0.2871212518716, "power": 0.58479256543, "predict": 23.04036332766, "should": 1.018839753516, "classificationregress": 6.0349776541799995, "train": 1.982754938517, "ensembl": 2.81820931165, "along": 0.260344385917, "new": 0.1063796811066, "softwar": 2.32849096333, "differ": 0.424642242624, "creat": 0.222576818514, "not": 0.06220965203, "oobscor": 6.0349776541799995, "maximum": 3.1375342018400003, "minsampleleaf": 6.0349776541799995, "describ": 0.77089520625, "his": 0.3607089734564, "complex": 1.7004832728619999, "ate": 3.5744895317400003, "base": 0.40956990686100003, "male": 1.24442043932, "dsqtype": 6.0349776541799995, "project": 0.561601885907, "leaveoneout": 6.0349776541799995, "easi": 1.6665296351499999, "option": 1.39846181161, "concept": 0.977224437103, "read": 0.83939268088, "deal": 0.780914701253, "live": 0.266903399347, "well": 0.0635144383156, "client": 2.6488048591599997, "interview": 1.2232212893899999, "mind": 1.2786688388299998, "also": 0.0293143156, "these": 0.1430672388016, "check": 1.87281049562, "numer": 0.606093812346, "featur": 2.9637119269939998, "mine": 3.16861817356, "signific": 0.373571744332, "approach": 1.4604672291620002, "vote": 4.3959611562, "numth": 0.161378382949, "true": 0.938325629634, "dsqsrc": 6.0349776541799995, "determin": 0.772833019022, "minimum": 1.79668465441, "lower": 0.742201929994, "memor": 2.77992217273, "forest": 36.531123274799995, "interact": 1.4858210267899998, "those": 0.17854939087299998, "but": 0.0485771162157, "produc": 0.628641624006, "faster": 2.03003967967, "store": 1.2374487335200002, "node": 3.7920308275, "overfit": 30.1748882709, "build": 1.4734123562730002, "hate": 2.36804786744, "onethird": 6.0349776541799995, "general": 0.229905156126, "python": 16.12262697184, "experi": 1.252545907866, "tend": 1.21597024462, "pari": 1.33713233602, "download": 2.6841506319, "prevent": 0.7706525875229999, "method": 2.833384826523, "risk": 1.4100048408899999, "comput": 4.104206747819999, "case": 0.790812537778, "when": 0.0616649665752, "addit": 0.220218882972, "hyperparamet": 30.1748882709, "kdnugget": 6.0349776541799995, "viewdownload": 6.0349776541799995, "leav": 0.507743957229, "all": 0.03420789629339999, "advic": 1.9574402102700001, "word": 0.585861082385, "consid": 0.214894723824, "observ": 0.7995160149320001, "than": 0.0967825866546, "precis": 1.67187902939, "here": 2.6551145651100003, "individu": 0.588013447985, "averag": 3.82804675198, "webbas": 6.0349776541799995, "compar": 0.6239191809269999, "like": 0.55621430618, "lot": 1.4835969502500002, "choos": 1.43007066072, "clickandgo": 6.0349776541799995, "sever": 0.13982224079379998, "pros": 4.95406494261, "who": 0.0609002329859, "import": 0.292818277066, "recommend": 2.72922253726, "random": 49.31803516274999, "record": 1.059031070859, "split": 1.24442043932, "introduc": 0.5457137524260001, "past": 0.7016234157610001, "data": 14.6018470176, "alway": 0.726319204572, "builtin": 6.0349776541799995, "work": 0.218069134546, "pokemon": 6.0349776541799995, "most": 0.06224368888679999, "better": 0.6964279406, "articl": 2.106395218722, "onlin": 0.957503854357, "down": 0.306673741186, "half": 0.564256167492, "nestim": 6.0349776541799995, "especi": 0.511098609709, "some": 0.079147018129, "locat": 0.46854337067199997, "overal": 1.1132694464700001, "tree": 34.026597306, "visit": 2.373849656499, "decis": 10.781515103743999, "var": 9.5494480279, "the": 0.0, "point": 0.23103235903299998, "just": 0.579062868218, "classifi": 1.6665296351499999, "evalu": 1.9388802431299998, "randomst": 12.069955308359999, "dsq": 6.0349776541799995, "classif": 8.35116294516, "their": 0.046081515368100005, "built": 1.38075907013, "august": 0.384706999499, "provid": 0.19517784432500002, "friend": 3.1573583344959997, "exampl": 0.8173653499979999, "impact": 2.18066445262, "stabl": 3.80468121948, "want": 0.6916366062549999, "demystifi": 5.822416212189999, "intern": 0.265095377816, "tour": 1.2492418381000001, "replic": 3.03924538062, "requir": 0.84850702135, "jame": 3.949429955118, "advis": 1.6123395734600001, "thus": 0.49857627139300004, "have": 0.1034950163884, "target": 4.676255798480001, "slow": 1.39820680715, "give": 0.311392552224, "contain": 0.468845318236, "sampl": 11.87175893034, "look": 0.6463866936, "what": 0.677661890481, "bag": 2.76380903459, "that": 0.04771378055568, "limit": 0.41782385463, "call": 0.1963883233464, "repositori": 3.8060957569699996, "win": 1.01265652029, "follow": 0.045356911094199995, "wrong": 3.40157538204, "hard": 1.00522796406, "out": 0.1752791727579, "total": 1.307036660115, "one": 0.0437874615185, "crossvalid": 12.069955308359999, "for": 0.0037798847447640003, "and": 0.0015117634095264, "perform": 0.85236170116, "templat": 3.7726664603199995, "even": 0.304777129668, "introduct": 1.02276465794, "understand": 1.0880858756799998, "newbi": 6.0349776541799995, "burden": 2.53290347794, "there": 0.12029367877649999, "tabl": 2.68099221322, "categori": 2.76353893304, "function": 0.914465741594, "disadvantag": 2.57088784228, "peopl": 0.193265578473, "roadmap": 5.19522699942, "engin": 0.904767558276, "similar": 0.318556092114, "regress": 19.6799575821, "ask": 1.553594419694, "final": 0.878201591844, "sklearn": 12.069955308359999, "both": 0.20337013355720002, "major": 0.138474663439, "been": 0.07093794710520002, "algorithm": 46.62619353252, "stay": 0.9927416990379999, "were": 0.024291143681099997, "dsqasync": 6.0349776541799995, "comment": 1.11826753454, "higher": 0.752308398995, "him": 0.9824807819939999, "take": 0.784151773182, "mani": 0.0433157581221, "mean": 0.37092128352, "veri": 0.6904793797140001, "you": 3.85734846147, "relat": 0.21310030165399999, "then": 0.16606773046179998, "pass": 0.48130432974, "opensourc": 6.0349776541799995, "they": 0.1189079790704, "outcom": 8.05356978496, "resourc": 1.08137694258, "with": 0.00957993370712, "advantag": 1.20120515883, "various": 0.28692650007, "number": 0.483042892093, "everi": 0.391485427421, "intuit": 3.3216780971900004, "select": 1.409609374266, "has": 0.1708957794192, "same": 0.336178948812, "more": 0.13619945279999998, "where": 0.0649921387457, "aim": 1.06333853704, "map": 1.40434493384, "sometim": 0.538025155343, "calcul": 3.6263013184199995, "about": 0.1256869549492, "much": 0.35499145860200004, "year": 0.09480447778920001, "make": 0.29399063129159997, "explan": 3.74644083138, "between": 0.033953681165299995, "belong": 1.2527629685, "without": 0.258874517941, "maxfeatur": 6.0349776541799995, "will": 0.40557306983, "access": 0.627805882716, "bootstrap": 5.57821925168, "textjavascript": 6.0349776541799995, "definit": 1.1755733298, "dataset": 15.79753369992, "result": 0.272757816762, "speed": 1.3533338752700002, "dure": 0.0491209066894, "tell": 1.21236434401, "combin": 0.529218310751, "flexibl": 2.2707222351599996, "given": 0.303255810831, "analyt": 5.696380287719999, "background": 1.3931203261899998, "affect": 0.908041904384, "explain": 0.955700427358, "disqusshortnam": 6.0349776541799995, "full": 0.511203624148, "time": 0.0336345565878, "how": 0.9431339138600001}}, "url": "https://www.kdnuggets.com/2019/03/random-forest-python.html", "title_html": "<h1 id=\"title\">Explaining Random Forest (with Python Implementation)</h1>", "read_time": 331.5}