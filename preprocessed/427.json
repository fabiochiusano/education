{"content": "comments By Alex Yang , Dataquest This cheat sheet is based on Python 3\u2019s\u00a0 documentation on regular expressions . If you're interested in learning Python, we have a free\u00a0 Python Programming: Beginner \u00a0course for you to try out. Download the cheat sheet here \u00a0 Special Characters \u00a0 ^ \u00a0| Matches the expression to its right at the start of a string. It matches every such instance before each\u00a0 \\n \u00a0in the string. $ \u00a0| Matches the expression to its left at the end of a string. It matches every such instance before each\u00a0 \\n \u00a0in the string. . \u00a0| Matches any character except line terminators like\u00a0 \\n . \\ \u00a0| Escapes special characters or denotes character classes. A|B \u00a0| Matches expression\u00a0 A \u00a0or\u00a0 B . If\u00a0 A \u00a0is matched first,\u00a0 B \u00a0is left untried. + \u00a0| Greedily matches the expression to its left 1 or more times. * \u00a0| Greedily matches the expression to its left 0 or more times. ? \u00a0| Greedily matches the expression to its left 0 or 1 times. But if\u00a0 ? \u00a0is added to qualifiers ( + ,\u00a0 * , and\u00a0 ? \u00a0itself) it will perform matches in a non-greedy manner. {m} \u00a0| Matches the expression to its left\u00a0 m \u00a0times, and not less. {m,n} \u00a0| Matches the expression to its left\u00a0 m \u00a0to\u00a0 n \u00a0times, and not less. {m,n}? \u00a0| Matches the expression to its left\u00a0 m \u00a0times, and ignores\u00a0 n . See\u00a0 ? \u00a0above. \u00a0 Character Classes (a.k.a. Special Sequences) \u00a0 \\w \u00a0| Matches alphanumeric characters, which means\u00a0 a-z ,\u00a0 A-Z , and\u00a0 0-9 . It also matches the underscore,\u00a0 _ . \\d \u00a0| Matches digits, which means\u00a0 0-9 . \\D \u00a0| Matches any non-digits. \\s \u00a0| Matches whitespace characters, which include the\u00a0 \\t ,\u00a0 \\n ,\u00a0 \\r , and space characters. \\S \u00a0| Matches non-whitespace characters. \\b \u00a0| Matches the boundary (or empty string) at the start and end of a word, that is, between\u00a0 \\w \u00a0and\u00a0 \\W . \\B \u00a0| Matches where\u00a0 \\b \u00a0does not, that is, the boundary of\u00a0 \\w \u00a0characters. \\A \u00a0| Matches the expression to its right at the absolute start of a string whether in single or multi-line mode. \\Z \u00a0| Matches the expression to its left at the absolute end of a string whether in single or multi-line mode. \u00a0 Sets \u00a0 [ ] \u00a0| Contains a set of characters to match. [amk] \u00a0| Matches either\u00a0 a ,\u00a0 m , or\u00a0 k . It does not match\u00a0 amk . [a-z] \u00a0| Matches any alphabet from\u00a0 a \u00a0to\u00a0 z . [a\\-z] \u00a0| Matches\u00a0 a ,\u00a0 - , or\u00a0 z . It matches\u00a0 - \u00a0because\u00a0 \\ \u00a0escapes it. [a-] \u00a0| Matches\u00a0 a \u00a0or\u00a0 - , because\u00a0 - \u00a0is not being used to indicate a series of characters. [-a] \u00a0| As above, matches\u00a0 a \u00a0or\u00a0 - . [a-z0-9] \u00a0| Matches characters from\u00a0 a \u00a0to\u00a0 z \u00a0and also from\u00a0 0 \u00a0to\u00a0 9 . [(+*)] \u00a0| Special characters become literal inside a set, so this matches\u00a0 ( ,\u00a0 + ,\u00a0 * , and\u00a0 ) . [^ab5] \u00a0| Adding\u00a0 ^ \u00a0excludes any character in the set. Here, it matches characters that are not\u00a0 a ,\u00a0 b , or\u00a0 5 . \u00a0 Groups \u00a0 ( ) \u00a0| Matches the expression inside the parentheses and groups it. (? ) \u00a0| Inside parentheses like this,\u00a0 ? \u00a0acts as an extension notation. Its meaning depends on the character immediately to its right. (?PAB) \u00a0| Matches the expression\u00a0 AB , and it can be accessed with the group name. (?aiLmsux) \u00a0| Here,\u00a0 a ,\u00a0 i ,\u00a0 L ,\u00a0 m ,\u00a0 s ,\u00a0 u , and\u00a0 x \u00a0are flags: a \u00a0\u2014 Matches ASCII only i \u00a0\u2014 Ignore case L \u00a0\u2014 Locale dependent m \u00a0\u2014 Multi-line s \u00a0\u2014 Matches all u \u00a0\u2014 Matches unicode x \u00a0\u2014 Verbose (?:A) \u00a0| Matches the expression as represented by\u00a0 A , but unlike\u00a0 (?PAB) , it cannot be retrieved afterwards. (?#...) \u00a0| A comment. Contents are for us to read, not for matching.  \u00a0| Lookahead assertion. This matches the expression\u00a0 A \u00a0only if it is followed by\u00a0 B .  \u00a0| Negative lookahead assertion. This matches the expression\u00a0 A \u00a0only if it is not followed by\u00a0 B . (?<=B)A \u00a0| Positive lookbehind assertion. This matches the expression\u00a0 A \u00a0only if\u00a0 B \u00a0is immediately to its left. This can only matched fixed length expressions. (?<!B)A \u00a0| Negative lookbehind assertion. This matches the expression\u00a0 A \u00a0only if\u00a0 B \u00a0is not immediately to its left. This can only matched fixed length expressions. (?P=name) \u00a0| Matches the expression matched by an earlier group named \u201cname\u201d. (...)\\1 \u00a0| The number\u00a0 1 \u00a0corresponds to the first group to be matched. If we want to match more instances of the same expresion, simply use its number instead of writing out the whole expression again. We can use from\u00a0 1 \u00a0up to\u00a0 99 \u00a0such groups and their corresponding numbers. \u00a0 Popular Python re module Functions \u00a0  \u00a0| Matches all instances of an expression\u00a0 A \u00a0in a string\u00a0 B \u00a0and returns them in a list.  \u00a0| Matches the first instance of an expression\u00a0 A \u00a0in a string\u00a0 B , and returns it as a re match object.  \u00a0| Split a string B into a list using the delimiter\u00a0 A .  \u00a0| Replace\u00a0 A \u00a0with\u00a0 B \u00a0in the string\u00a0 C . \u00a0 Useful Regular Expressions Sites for Python users Python 3 re module documentation Online regex tester and debugger \u00a0 Bio: Alex Yang is a writer fascinated by the things code can do. He also enjoys citizen science and new media art. Original . Reposted with permission. Related: 30 Essential Data Science, Machine Learning & Deep Learning Cheat Sheets Introduction to Functional Programming in Python Text Data Preprocessing: A Walkthrough in Python", "title_html": "<h1 id=\"title\"><img align=\"right\" alt=\"Gold Blog\" src=\"/images/tkb-1804-g.png\" width=\"94\"/>Python Regular Expressions Cheat Sheet</h1> ", "url": "https://www.kdnuggets.com/2018/04/python-regular-expressions-cheat-sheet.html", "tfidf": {"tfidf": {"base": 1.14628158845, "relat": 1.23750876919, "art": 1.9994962216599999, "unlik": 2.42529789184, "permiss": 6.280063291139999, "here": 7.26923076924, "immedi": 6.085867620750001, "new": 1.0178880554, "space": 2.39818731118, "dataquest": 1587.6, "number": 3.30428749827, "boundari": 9.71603427172, "contain": 1.59814777532, "function": 4.99088337, "class": 4.23303559526, "alphabet": 16.4008264463, "python": 450.3829787232, "manner": 3.93164933135, "afterward": 4.72640666865, "escap": 7.108126259239999, "ignor": 9.16892867456, "assert": 18.471204188479998, "simpli": 2.5192002538900002, "multilin": 4762.799999999999, "mode": 14.782122905020001, "their": 1.01547908405, "code": 3.8807137619199996, "free": 1.71818181818, "flag": 5.95275590551, "sheet": 25.828633405650002, "fascin": 17.446153846199998, "instead": 1.59461631177, "start": 3.8002074523200005, "express": 49.714079248340006, "alex": 21.310067114000002, "thing": 2.4065484311099996, "repost": 933.882352941, "them": 1.09876115994, "word": 1.7965372864099998, "seri": 1.46511627907, "lookahead": 3175.2, "special": 5.952755905519999, "singl": 3.21897810218, "end": 3.3204127161300003, "digit": 4.416133518780001, "cheat": 95.0658682635, "interest": 1.60331246213, "deep": 3.6279707495399998, "debugg": 512.129032258, "beginn": 53.4545454545, "string": 92.15620052771, "the": 42.0, "site": 1.9721739130400002, "qualifi": 6.546804123709999, "parenthes": 150.4834123222, "will": 1.22481098596, "perform": 1.5313977042500002, "but": 2.03264835798, "regular": 4.18836565096, "where": 1.06715063521, "abnum": 835.5789473680001, "charact": 42.79245283022, "amk": 3175.2, "repres": 1.46972782818, "right": 4.21635977337, "have": 1.0148948411399998, "pname": 1587.6, "replac": 1.5602948402899999, "regex": 1587.6, "whitespac": 793.8, "unicod": 115.043478261, "termin": 4.86397058824, "follow": 2.09280253098, "nongreedi": 1587.6, "tri": 1.8544562551099997, "onlin": 2.6051854282900004, "name": 3.3063519611100003, "out": 2.12033388982, "enjoy": 3.3269069572500003, "aka": 20.834645669300002, "indic": 2.0826446281, "cours": 2.15092805853, "absolut": 10.694509936000001, "also": 3.04429530201, "ailmsux": 1587.6, "mean": 4.34720700987, "not": 10.1567398119, "learn": 6.968251645950001, "length": 7.38246919322, "whole": 2.29488291414, "becom": 1.12492028626, "less": 2.93809567872, "yang": 71.8371040724, "want": 1.99698113208, "into": 1.01502461479, "nondigit": 1587.6, "extens": 1.99171998495, "essenti": 2.9280708225700005, "scienc": 4.63939216832, "citizen": 3.24397221087, "which": 3.015575535, "liter": 5.468825353080001, "introduct": 2.7808723068799996, "itself": 1.74557449148, "nonwhitespac": 1587.6, "either": 1.5830092731099998, "see": 1.27242125511, "such": 3.18454132122, "becaus": 2.2990369994999997, "like": 2.2983713355, "abov": 3.80765079746, "fix": 8.869273743019999, "except": 1.71948445792, "underscor": 59.0185873606, "tester": 200.962025316, "document": 5.0819462228, "includ": 1.0190641247799999, "content": 3.5421686747, "untri": 529.2, "set": 4.74831763124, "access": 1.8734953976900002, "ani": 4.53535209256, "time": 6.06764762088, "lookbehind": 3175.2, "whether": 4.41367806506, "num": 16.00504064016, "instanc": 16.2864177267, "between": 1.03453668708, "left": 15.838563395600001, "return": 2.79064862014, "everi": 2.95835274388, "for": 4.00126016004, "depend": 4.4822134387400006, "all": 2.02293577982, "match": 196.22022471920002, "with": 3.003594626969999, "program": 4.04278074866, "verbos": 378.0, "are": 3.08971780734, "split": 3.4709226060300002, "empti": 8.067073170730001, "case": 1.48498737256, "that": 3.01195219125, "preprocess": 1221.23076923, "walkthrough": 793.8, "popular": 1.50769230769, "object": 2.3488681757700003, "more": 3.0515120451, "and": 18.001133858339998, "list": 2.72642967542, "correspond": 6.64963350786, "exclud": 5.31859296482, "writer": 2.75816539263, "negat": 7.51704545454, "posit": 1.37252528746, "expres": 1587.6, "befor": 2.20072082062, "retriev": 2.16826003824, "greedili": 4329.81818181, "download": 14.6457564576, "alphanumer": 256.064516129, "group": 7.25981251428, "doe": 3.4116256581, "can": 7.05756834852, "aznum": 1587.6, "media": 2.59369384088, "onli": 7.179533561620001, "each": 2.37949640288, "this": 9.03414264039, "read": 2.3149606299200003, "comment": 6.11909809212, "data": 6.75287111868, "act": 1.4318181818200002, "sequenc": 6.07112810707, "from": 4.00226885988, "machin": 4.02433460076, "again": 1.50883862384, "bio": 42.336000000000006, "origin": 1.13724928367, "text": 3.12827586207, "insid": 8.218809318389999, "notat": 26.8175675676, "modul": 33.886872999, "delimit": 99.225, "first": 3.0228484386899996, "earlier": 1.86776470588, "local": 1.51720183486, "use": 5.148193786899999, "write": 2.0575427682700003, "denot": 10.1965317919, "line": 1.4182597820299998, "same": 1.11857958148, "user": 7.71053909665}, "logtfidf": {"base": 0.13652330228700002, "relat": 0.21310030165399999, "art": 0.6928952596619999, "unlik": 0.885954358842, "permiss": 1.8373800586400002, "here": 2.6551145651100003, "immedi": 2.122071033399, "new": 0.0177299468511, "space": 0.874713164972, "dataquest": 7.369978720910001, "number": 0.2898257352558, "boundari": 3.16126071584, "contain": 0.468845318236, "function": 1.828931483188, "class": 1.4995443798660002, "alphabet": 2.79733172663, "python": 32.24525394368, "manner": 1.36905901503, "afterward": 1.5531652242899998, "escap": 2.5361829851, "ignor": 3.0453465389999996, "assert": 6.11967451184, "simpli": 0.923941491586, "multilin": 22.10993616273, "mode": 4.00054271654, "their": 0.015360505122700001, "code": 1.35601909597, "free": 0.5412666492670001, "flag": 1.78385428972, "sheet": 6.458614229369999, "fascin": 2.85911921439, "instead": 0.46663315041500003, "start": 0.709330107873, "express": 16.852982630666002, "alex": 4.73206482992, "thing": 0.8781935346799999, "repost": 6.83935046985, "them": 0.0941833269093, "word": 0.585861082385, "seri": 0.38193461069799994, "lookahead": 14.739957441820001, "special": 1.5902397144040001, "singl": 0.951833538118, "end": 0.304430395854, "digit": 1.48526454375, "cheat": 10.367873138459998, "interest": 0.47207177798199995, "deep": 1.2886734698, "debugg": 6.238576609419999, "beginn": 3.9788316751, "string": 23.381486660290005, "the": 0.0, "site": 0.6791364434899999, "qualifi": 1.87897701053, "parenthes": 8.641411360860001, "will": 0.202786534915, "perform": 0.42618085058, "but": 0.0323847441438, "regular": 1.478326835694, "where": 0.0649921387457, "abnum": 6.72812483474, "charact": 15.693522923063, "amk": 14.739957441820001, "repres": 0.38507723275, "right": 1.02107956251, "have": 0.0147850023412, "pname": 7.369978720910001, "replac": 0.444874803592, "regex": 7.369978720910001, "whitespac": 6.676831540349999, "unicod": 4.74531012875, "termin": 1.5818550978200001, "follow": 0.09071382218839999, "nongreedi": 7.369978720910001, "tri": 0.61759152916, "onlin": 0.957503854357, "name": 0.29169949915290005, "out": 0.1168527818386, "enjoy": 1.2020430306899998, "aka": 3.03661725822, "indic": 0.7336385419149999, "cours": 0.765899404133, "absolut": 3.35316667828, "also": 0.0439714734, "ailmsux": 7.369978720910001, "mean": 1.11276385056, "not": 0.155524130075, "learn": 2.528256194235, "length": 2.6119219622400003, "whole": 0.8306818244059999, "becom": 0.11771217648900001, "less": 0.7692289252, "yang": 7.16250786366, "want": 0.6916366062549999, "into": 0.0149128632287, "nondigit": 7.369978720910001, "extens": 0.6889985794750001, "essenti": 1.07434378384, "scienc": 1.682872357782, "citizen": 1.1767985698999999, "which": 0.01553524153629, "liter": 1.6990638498800001, "introduct": 1.02276465794, "itself": 0.5570837229510001, "nonwhitespac": 7.369978720910001, "either": 0.459327638815, "see": 0.240921585492, "such": 0.179087933418, "becaus": 0.27868631765, "like": 0.27810715309, "abov": 1.287730459632, "fix": 2.97889146902, "except": 0.54202451213, "underscor": 4.0778524343, "tester": 5.30311596144, "document": 1.865094244766, "includ": 0.0188846813905, "content": 1.26473915954, "untri": 6.27136643224, "set": 0.685984045156, "access": 0.627805882716, "ani": 0.502433433464, "time": 0.0672691131756, "lookbehind": 14.739957441820001, "whether": 1.583122379294, "num": 0.005039846326352001, "instanc": 5.9044678986, "between": 0.033953681165299995, "left": 4.0100765622829995, "return": 0.666253737184, "everi": 0.782970854842, "for": 0.0012599615815880002, "depend": 1.61393963, "all": 0.022805264195599997, "match": 69.9547441307, "with": 0.00359247514017, "program": 1.4075711575299998, "verbos": 5.934894195619999, "are": 0.08840242074810001, "split": 1.24442043932, "empti": 2.08779073629, "case": 0.395406268889, "that": 0.01192844513892, "preprocess": 7.1076144564399995, "walkthrough": 6.676831540349999, "popular": 0.41058020877499996, "object": 0.853933584803, "more": 0.05107479479999999, "and": 0.0011338225571448, "list": 0.619691523012, "correspond": 2.40282912198, "exclud": 1.67120878808, "writer": 1.0145657459, "negat": 2.64805197704, "posit": 0.316652318608, "expres": 7.369978720910001, "befor": 0.191275543759, "retriev": 0.773925020223, "greedili": 21.824005623300003, "download": 2.6841506319, "alphanumer": 5.54542942886, "group": 1.1435672087820001, "doe": 1.0680834594339998, "can": 0.974046578364, "aznum": 7.369978720910001, "media": 0.9530830530519999, "onli": 0.17726987830369997, "each": 0.347483378608, "this": 0.0340780414725, "read": 0.83939268088, "comment": 2.23653506908, "data": 2.4336411696, "act": 0.358945092473, "sequenc": 1.8035444374, "from": 0.002268216675464, "machin": 1.39235958062, "again": 0.411340231612, "bio": 3.7456377879300002, "origin": 0.128612437587, "text": 1.14048200999, "insid": 3.02343917439, "notat": 3.2890571790200003, "modul": 5.65976106332, "delimit": 4.59738999867, "first": 0.02276186943648, "earlier": 0.624742371425, "local": 0.416867740206, "use": 0.146040098658, "write": 0.721512439877, "denot": 2.3220476420700003, "line": 0.349430614452, "same": 0.112059649604, "user": 2.04258810688}, "logidf": {"base": 0.13652330228700002, "relat": 0.21310030165399999, "art": 0.6928952596619999, "unlik": 0.885954358842, "permiss": 1.8373800586400002, "here": 0.8850381883700001, "immedi": 0.707357011133, "new": 0.0177299468511, "space": 0.874713164972, "dataquest": 7.369978720910001, "number": 0.0966085784186, "boundari": 1.58063035792, "contain": 0.468845318236, "function": 0.914465741594, "class": 0.7497721899330001, "alphabet": 2.79733172663, "python": 4.03065674296, "manner": 1.36905901503, "afterward": 1.5531652242899998, "escap": 1.26809149255, "ignor": 1.5226732694999998, "assert": 1.52991862796, "simpli": 0.923941491586, "multilin": 7.369978720910001, "mode": 2.00027135827, "their": 0.015360505122700001, "code": 1.35601909597, "free": 0.5412666492670001, "flag": 1.78385428972, "sheet": 2.15287140979, "fascin": 2.85911921439, "instead": 0.46663315041500003, "start": 0.236443369291, "express": 0.648191639641, "alex": 2.36603241496, "thing": 0.8781935346799999, "repost": 6.83935046985, "them": 0.0941833269093, "word": 0.585861082385, "seri": 0.38193461069799994, "lookahead": 7.369978720910001, "special": 0.39755992860100003, "singl": 0.475916769059, "end": 0.101476798618, "digit": 1.48526454375, "cheat": 3.4559577128199996, "interest": 0.47207177798199995, "deep": 1.2886734698, "debugg": 6.238576609419999, "beginn": 3.9788316751, "string": 2.1255896963900005, "the": 0.0, "site": 0.6791364434899999, "qualifi": 1.87897701053, "parenthes": 4.320705680430001, "will": 0.202786534915, "perform": 0.42618085058, "but": 0.0161923720719, "regular": 0.739163417847, "where": 0.0649921387457, "abnum": 6.72812483474, "charact": 0.923148407239, "amk": 7.369978720910001, "repres": 0.38507723275, "right": 0.34035985417, "have": 0.0147850023412, "pname": 7.369978720910001, "replac": 0.444874803592, "regex": 7.369978720910001, "whitespac": 6.676831540349999, "unicod": 4.74531012875, "termin": 1.5818550978200001, "follow": 0.045356911094199995, "nongreedi": 7.369978720910001, "tri": 0.61759152916, "onlin": 0.957503854357, "name": 0.09723316638430002, "out": 0.0584263909193, "enjoy": 1.2020430306899998, "aka": 3.03661725822, "indic": 0.7336385419149999, "cours": 0.765899404133, "absolut": 1.67658333914, "also": 0.0146571578, "ailmsux": 7.369978720910001, "mean": 0.37092128352, "not": 0.0155524130075, "learn": 0.842752064745, "length": 1.3059609811200001, "whole": 0.8306818244059999, "becom": 0.11771217648900001, "less": 0.3846144626, "yang": 3.58125393183, "want": 0.6916366062549999, "into": 0.0149128632287, "nondigit": 7.369978720910001, "extens": 0.6889985794750001, "essenti": 1.07434378384, "scienc": 0.841436178891, "citizen": 1.1767985698999999, "which": 0.00517841384543, "liter": 1.6990638498800001, "introduct": 1.02276465794, "itself": 0.5570837229510001, "nonwhitespac": 7.369978720910001, "either": 0.459327638815, "see": 0.240921585492, "such": 0.059695977806, "becaus": 0.139343158825, "like": 0.139053576545, "abov": 0.643865229816, "fix": 1.48944573451, "except": 0.54202451213, "underscor": 4.0778524343, "tester": 5.30311596144, "document": 0.932547122383, "includ": 0.0188846813905, "content": 1.26473915954, "untri": 6.27136643224, "set": 0.171496011289, "access": 0.627805882716, "ani": 0.125608358366, "time": 0.0112115188626, "lookbehind": 7.369978720910001, "whether": 0.791561189647, "num": 0.00031499039539700004, "instanc": 1.18089357972, "between": 0.033953681165299995, "left": 0.364552414753, "return": 0.333126868592, "everi": 0.391485427421, "for": 0.00031499039539700004, "depend": 0.806969815, "all": 0.011402632097799998, "match": 1.27190443874, "with": 0.00119749171339, "program": 0.7037855787649999, "verbos": 5.934894195619999, "are": 0.0294674735827, "split": 1.24442043932, "empti": 2.08779073629, "case": 0.395406268889, "that": 0.00397614837964, "preprocess": 7.1076144564399995, "walkthrough": 6.676831540349999, "popular": 0.41058020877499996, "object": 0.853933584803, "more": 0.017024931599999998, "and": 6.29901420636e-05, "list": 0.309845761506, "correspond": 1.20141456099, "exclud": 1.67120878808, "writer": 1.0145657459, "negat": 1.32402598852, "posit": 0.316652318608, "expres": 7.369978720910001, "befor": 0.0956377718795, "retriev": 0.773925020223, "greedili": 7.2746685411000005, "download": 2.6841506319, "alphanumer": 5.54542942886, "group": 0.190594534797, "doe": 0.5340417297169999, "can": 0.162341096394, "aznum": 7.369978720910001, "media": 0.9530830530519999, "onli": 0.025324268329099998, "each": 0.173741689304, "this": 0.0037864490525, "read": 0.83939268088, "comment": 1.11826753454, "data": 1.2168205848, "act": 0.358945092473, "sequenc": 1.8035444374, "from": 0.000567054168866, "machin": 1.39235958062, "again": 0.411340231612, "bio": 3.7456377879300002, "origin": 0.128612437587, "text": 1.14048200999, "insid": 1.00781305813, "notat": 3.2890571790200003, "modul": 2.82988053166, "delimit": 4.59738999867, "first": 0.0075872898121599995, "earlier": 0.624742371425, "local": 0.416867740206, "use": 0.0292080197316, "write": 0.721512439877, "denot": 2.3220476420700003, "line": 0.349430614452, "same": 0.112059649604, "user": 2.04258810688}, "freq": {"base": 1, "relat": 1, "art": 1, "unlik": 1, "permiss": 1, "here": 3, "immedi": 3, "new": 1, "space": 1, "dataquest": 1, "number": 3, "boundari": 2, "contain": 1, "function": 2, "class": 2, "alphabet": 1, "python": 8, "manner": 1, "afterward": 1, "escap": 2, "ignor": 2, "assert": 4, "simpli": 1, "multilin": 3, "mode": 2, "their": 1, "code": 1, "free": 1, "flag": 1, "sheet": 3, "fascin": 1, "instead": 1, "start": 3, "express": 26, "alex": 2, "thing": 1, "repost": 1, "them": 1, "word": 1, "seri": 1, "lookahead": 2, "special": 4, "singl": 2, "end": 3, "digit": 1, "cheat": 3, "interest": 1, "deep": 1, "debugg": 1, "beginn": 1, "string": 11, "the": 42, "site": 1, "qualifi": 1, "parenthes": 2, "will": 1, "perform": 1, "but": 2, "regular": 2, "where": 1, "abnum": 1, "charact": 17, "amk": 2, "repres": 1, "right": 3, "have": 1, "pname": 1, "replac": 1, "regex": 1, "whitespac": 1, "unicod": 1, "termin": 1, "follow": 2, "nongreedi": 1, "tri": 1, "onlin": 1, "name": 3, "out": 2, "enjoy": 1, "aka": 1, "indic": 1, "cours": 1, "absolut": 2, "also": 3, "ailmsux": 1, "mean": 3, "not": 10, "learn": 3, "length": 2, "whole": 1, "becom": 1, "less": 2, "yang": 2, "want": 1, "into": 1, "nondigit": 1, "extens": 1, "essenti": 1, "scienc": 2, "citizen": 1, "which": 3, "liter": 1, "introduct": 1, "itself": 1, "nonwhitespac": 1, "either": 1, "see": 1, "such": 3, "becaus": 2, "like": 2, "abov": 2, "fix": 2, "except": 1, "underscor": 1, "tester": 1, "document": 2, "includ": 1, "content": 1, "untri": 1, "set": 4, "access": 1, "ani": 4, "time": 6, "lookbehind": 2, "whether": 2, "num": 16, "instanc": 5, "between": 1, "left": 11, "return": 2, "everi": 2, "for": 4, "depend": 2, "all": 2, "match": 55, "with": 3, "program": 2, "verbos": 1, "are": 3, "split": 1, "empti": 1, "case": 1, "that": 3, "preprocess": 1, "walkthrough": 1, "popular": 1, "object": 1, "more": 3, "and": 18, "list": 2, "correspond": 2, "exclud": 1, "writer": 1, "negat": 2, "posit": 1, "expres": 1, "befor": 2, "retriev": 1, "greedili": 3, "download": 1, "alphanumer": 1, "group": 6, "doe": 2, "can": 6, "aznum": 1, "media": 1, "onli": 7, "each": 2, "this": 9, "read": 1, "comment": 2, "data": 2, "act": 1, "sequenc": 1, "from": 4, "machin": 1, "again": 1, "bio": 1, "origin": 1, "text": 1, "insid": 3, "notat": 1, "modul": 2, "delimit": 1, "first": 3, "earlier": 1, "local": 1, "use": 5, "write": 1, "denot": 1, "line": 1, "same": 1, "user": 1}, "idf": {"base": 1.14628158845, "relat": 1.23750876919, "art": 1.9994962216599999, "unlik": 2.42529789184, "permiss": 6.280063291139999, "here": 2.42307692308, "immedi": 2.02862254025, "new": 1.0178880554, "space": 2.39818731118, "dataquest": 1587.6, "number": 1.10142916609, "boundari": 4.85801713586, "contain": 1.59814777532, "function": 2.495441685, "class": 2.11651779763, "alphabet": 16.4008264463, "python": 56.2978723404, "manner": 3.93164933135, "afterward": 4.72640666865, "escap": 3.5540631296199994, "ignor": 4.58446433728, "assert": 4.6178010471199995, "simpli": 2.5192002538900002, "multilin": 1587.6, "mode": 7.391061452510001, "their": 1.01547908405, "code": 3.8807137619199996, "free": 1.71818181818, "flag": 5.95275590551, "sheet": 8.60954446855, "fascin": 17.446153846199998, "instead": 1.59461631177, "start": 1.26673581744, "express": 1.9120799710900003, "alex": 10.655033557000001, "thing": 2.4065484311099996, "repost": 933.882352941, "them": 1.09876115994, "word": 1.7965372864099998, "seri": 1.46511627907, "lookahead": 1587.6, "special": 1.4881889763799998, "singl": 1.60948905109, "end": 1.10680423871, "digit": 4.416133518780001, "cheat": 31.6886227545, "interest": 1.60331246213, "deep": 3.6279707495399998, "debugg": 512.129032258, "beginn": 53.4545454545, "string": 8.37783641161, "the": 1.0, "site": 1.9721739130400002, "qualifi": 6.546804123709999, "parenthes": 75.2417061611, "will": 1.22481098596, "perform": 1.5313977042500002, "but": 1.01632417899, "regular": 2.09418282548, "where": 1.06715063521, "abnum": 835.5789473680001, "charact": 2.51720310766, "amk": 1587.6, "repres": 1.46972782818, "right": 1.4054532577899999, "have": 1.0148948411399998, "pname": 1587.6, "replac": 1.5602948402899999, "regex": 1587.6, "whitespac": 793.8, "unicod": 115.043478261, "termin": 4.86397058824, "follow": 1.04640126549, "nongreedi": 1587.6, "tri": 1.8544562551099997, "onlin": 2.6051854282900004, "name": 1.10211732037, "out": 1.06016694491, "enjoy": 3.3269069572500003, "aka": 20.834645669300002, "indic": 2.0826446281, "cours": 2.15092805853, "absolut": 5.3472549680000006, "also": 1.01476510067, "ailmsux": 1587.6, "mean": 1.44906900329, "not": 1.01567398119, "learn": 2.32275054865, "length": 3.69123459661, "whole": 2.29488291414, "becom": 1.12492028626, "less": 1.46904783936, "yang": 35.9185520362, "want": 1.99698113208, "into": 1.01502461479, "nondigit": 1587.6, "extens": 1.99171998495, "essenti": 2.9280708225700005, "scienc": 2.31969608416, "citizen": 3.24397221087, "which": 1.005191845, "liter": 5.468825353080001, "introduct": 2.7808723068799996, "itself": 1.74557449148, "nonwhitespac": 1587.6, "either": 1.5830092731099998, "see": 1.27242125511, "such": 1.06151377374, "becaus": 1.1495184997499999, "like": 1.14918566775, "abov": 1.90382539873, "fix": 4.4346368715099995, "except": 1.71948445792, "underscor": 59.0185873606, "tester": 200.962025316, "document": 2.5409731114, "includ": 1.0190641247799999, "content": 3.5421686747, "untri": 529.2, "set": 1.18707940781, "access": 1.8734953976900002, "ani": 1.13383802314, "time": 1.01127460348, "lookbehind": 1587.6, "whether": 2.20683903253, "num": 1.00031504001, "instanc": 3.2572835453400004, "between": 1.03453668708, "left": 1.4398693996, "return": 1.39532431007, "everi": 1.47917637194, "for": 1.00031504001, "depend": 2.2411067193700003, "all": 1.01146788991, "match": 3.5676404494400002, "with": 1.0011982089899998, "program": 2.02139037433, "verbos": 378.0, "are": 1.02990593578, "split": 3.4709226060300002, "empti": 8.067073170730001, "case": 1.48498737256, "that": 1.00398406375, "preprocess": 1221.23076923, "walkthrough": 793.8, "popular": 1.50769230769, "object": 2.3488681757700003, "more": 1.0171706817, "and": 1.00006299213, "list": 1.36321483771, "correspond": 3.32481675393, "exclud": 5.31859296482, "writer": 2.75816539263, "negat": 3.75852272727, "posit": 1.37252528746, "expres": 1587.6, "befor": 1.10036041031, "retriev": 2.16826003824, "greedili": 1443.27272727, "download": 14.6457564576, "alphanumer": 256.064516129, "group": 1.20996875238, "doe": 1.70581282905, "can": 1.17626139142, "aznum": 1587.6, "media": 2.59369384088, "onli": 1.0256476516600002, "each": 1.18974820144, "this": 1.00379362671, "read": 2.3149606299200003, "comment": 3.05954904606, "data": 3.37643555934, "act": 1.4318181818200002, "sequenc": 6.07112810707, "from": 1.00056721497, "machin": 4.02433460076, "again": 1.50883862384, "bio": 42.336000000000006, "origin": 1.13724928367, "text": 3.12827586207, "insid": 2.7396031061299997, "notat": 26.8175675676, "modul": 16.9434364995, "delimit": 99.225, "first": 1.00761614623, "earlier": 1.86776470588, "local": 1.51720183486, "use": 1.0296387573799999, "write": 2.0575427682700003, "denot": 10.1965317919, "line": 1.4182597820299998, "same": 1.11857958148, "user": 7.71053909665}}, "html": "<!DOCTYPE html>\n\n<html lang=\"en-US\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head profile=\"http://gmpg.org/xfn/11\">\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n<title>  Python Regular Expressions Cheat Sheet</title>\n<link href=\"/wp-content/themes/kdn17/images/favicon.ico\" rel=\"shortcut icon\"/>\n<link href=\"/wp-content/themes/kdn17/style.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"/wp-content/themes/kdn17/js/jquery-1.9.1.min.js\" type=\"text/javascript\"></script>\n<script src=\"/aps/kda_all.js\" type=\"text/javascript\"></script>\n<link href=\"/feed/\" rel=\"alternate\" title=\"KDnuggets: Analytics, Big Data, Data Mining and Data Science Feed\" type=\"application/rss+xml\"/>\n<link href=\"//s.w.org\" rel=\"dns-prefetch\"/>\n<link href=\"https://www.kdnuggets.com/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/comments/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/2018/04/python-regular-expressions-cheat-sheet.html/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Python Regular Expressions Cheat Sheet Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-json/\" rel=\"https://api.w.org/\"/>\n<link href=\"https://www.kdnuggets.com/xmlrpc.php?rsd\" rel=\"EditURI\" title=\"RSD\" type=\"application/rsd+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-includes/wlwmanifest.xml\" rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\"/>\n<link href=\"https://www.kdnuggets.com/2018/04/derivation-convolutional-neural-network-fully-connected-step-by-step.html\" rel=\"prev\" title=\"Derivation of Convolutional Neural Network from Fully Connected Network Step-By-Step\"/>\n<link href=\"https://www.kdnuggets.com/2018/04/presto-data-scientists-sql.html\" rel=\"next\" title=\"Presto for Data Scientists \u2013 SQL on anything\"/>\n<meta content=\"WordPress 4.9.10\" name=\"generator\">\n<link href=\"https://www.kdnuggets.com/2018/04/python-regular-expressions-cheat-sheet.html\" rel=\"canonical\"/>\n<link href=\"https://www.kdnuggets.com/?p=80175\" rel=\"shortlink\"/>\n<link href=\"https://www.kdnuggets.com/2018/04/python-regular-expressions-cheat-sheet.html\" rel=\"canonical\"/>\n<!-- BEGIN ExactMetrics v5.3.7 Universal Analytics - https://exactmetrics.com/ -->\n<script>\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-361129-1', 'auto');\n  ga('send', 'pageview');\n</script>\n<!-- END ExactMetrics Universal Analytics -->\n</meta></head>\n<body class=\"post-template-default single single-post postid-80175 single-format-standard\">\n<div class=\"main_wrapper\"><!-- publ: 19-Apr, 2018  -->\n<div id=\"wrapper\">\n<div id=\"header\">\n<div id=\"header_log\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<h1>KDnuggets</h1>\n<div class=\"text-container\">\n            \u00a0\u00a0<a href=\"/news/subscribe.html\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a> \u00a0|\n <a href=\"https://twitter.com/kdnuggets\" target=\"_blank\"><img alt=\"Twitter\" height=\"48\" src=\"/images/tw_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n <a href=\"https://www.facebook.com/kdnuggets\" target=\"_blank\"><img alt=\"Facebook\" height=\"48\" src=\"/images/fb_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n<a href=\"https://www.linkedin.com/groups/54257/\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"48\" src=\"/images/in_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \n\u00a0|\u00a0 <a href=\"/contact.html\"><b>Contact</b></a>\n</div>\n</div>\n<div class=\"search\">\n<form action=\"/\" id=\"searchform\" method=\"get\">\n<input id=\"s\" name=\"s\" placeholder=\"search KDnuggets\" type=\"text\" value=\"\"/>\n<input type=\"submit\" value=\"Search\"/></form>\n</div>\n<div href=\"#\" id=\"pull\">\n<img class=\"menu\" src=\"/images/menu-30.png\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<img class=\"search-icon\" src=\"/images/search-icon.png\">\n</img></img></div>\n<div id=\"pull-menu\">\n<div class=\"navigation\"><ul class=\"menu\" id=\"menu-menu\"><li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-1070\" id=\"menu-item-1070\"><a href=\"/software/index.html\" title=\"Data Science Software\">SOFTWARE</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13756\" id=\"menu-item-13756\"><a href=\"/news/index.html\" title=\"News\">News/Blog</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-46286\" id=\"menu-item-46286\"><a href=\"/news/top-stories.html\">Top stories</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-42152\" id=\"menu-item-42152\"><a href=\"https://www.kdnuggets.com/opinions/index.html\" title=\"Opinions\">Opinions</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-46415\" id=\"menu-item-46415\"><a href=\"https://www.kdnuggets.com/tutorials/index.html\">Tutorials</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13364\" id=\"menu-item-13364\"><a href=\"/jobs/index.html\" title=\"Jobs in Analytics, Data Science\">JOBS</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-63505\" id=\"menu-item-63505\"><a href=\"https://www.kdnuggets.com/companies/index.html\">Companies</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13366\" id=\"menu-item-13366\"><a href=\"/courses/index.html\">Courses</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-1499\" id=\"menu-item-1499\"><a href=\"https://www.kdnuggets.com/datasets/index.html\">Datasets</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-14286\" id=\"menu-item-14286\"><a href=\"https://www.kdnuggets.com/education/index.html\" title=\"Education in Analytics, Big Data, Data Science\">EDUCATION</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-51558\" id=\"menu-item-51558\"><a href=\"https://www.kdnuggets.com/education/analytics-data-mining-certificates.html\" title=\"Certificates in Analytics, Big Data, Data Science\">Certificates</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-14752\" id=\"menu-item-14752\"><a href=\"/meetings/index.html\">Meetings</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13721\" id=\"menu-item-13721\"><a href=\"/webcasts/index.html\" title=\"Webcasts and Webinars\">Webinars</a></li>\n</ul></div></div>\n</div> <!--#header end-->\n<div id=\"spacer\">\n         \u00a0\n      </div>\n<div id=\"content_wrapper\">\n<div id=\"ad_wrapper\">\n<script type=\"text/javascript\">\n\tjQuery(function() {\n   \t    var pull        = $('#pull');\n            menu        = $('#header .navigation ul');\n            menuImage = $('#header img.menu');\n            mobileMenu        = $('#pull-menu-mobile');\n            search = $('img.search-icon');\n            searchBar = $('div.search');\n            searchClick = false;\n            search.on('click', function() {\n                  searchBar.slideToggle();\n                  searchClick = true;\n            });  \n     \t    $(menuImage).on('click', function(e) {\n\t        //e.preventDefault();\n                if (!searchClick) {\n                  menu.slideToggle();\n                }\n                searchClick = false;\n\t    });\n           /* pullMobile.on('click', function(e) {\n              e.preventDefault();\n                if (!searchClick) {\n                  mobileMenu.slideToggle();\n                }\n                searchClick = false;\n\t    });*/\n            \n\t});\n\tkpath = '/'; kda_top(); kda_sid_init(); kda_sid_n=3;\n\t</script>\n</div> <div class=\"breadcumb\">\n<br/>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2018/index.html\">2018</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/04/index.html\">Apr</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/04/tutorials.html\">Tutorials, Overviews</a> \u00bb Python Regular Expressions Cheat Sheet (\u00a0<a href=\"/2018/n17.html\">18:n17</a>\u00a0)    </div>\n<div class=\"single\" id=\"content\">\n<div id=\"post-header\">\n<h1 id=\"title\"><img align=\"right\" alt=\"Gold Blog\" src=\"/images/tkb-1804-g.png\" width=\"94\"/>Python Regular Expressions Cheat Sheet</h1>\n<div class=\"pagi\">\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2018/04/derivation-convolutional-neural-network-fully-connected-step-by-step.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"> <strong>Previous post</strong></img></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2018/04/presto-data-scientists-sql.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/>\u00a0<br/>\u00a0\n    <div class=\"addthis_native_toolbox\"></div>\n</div>\n<div class=\"tag-data\">Tags: <a href=\"https://www.kdnuggets.com/tag/cheat-sheet\" rel=\"tag\">Cheat Sheet</a>, <a href=\"https://www.kdnuggets.com/tag/programming\" rel=\"tag\">Programming</a>, <a href=\"https://www.kdnuggets.com/tag/python\" rel=\"tag\">Python</a>, <a href=\"https://www.kdnuggets.com/tag/text-analytics\" rel=\"tag\">Text Analytics</a></div>\n<br/>\n<p class=\"excerpt\">\n     The tough thing about learning data is remembering all the syntax. While at Dataquest we advocate getting used to consulting the\u00a0Python documentation, sometimes it's nice to have a handy reference, so we've put together this cheat sheet to help you out!\n  </p>\n</div>\n<div id=\"post-header-ad\">\n<script type=\"text/javascript\">kda_sid_write(1); kda_sid_n=2;</script>\n</div>\n<hr class=\"grey-line\"/><br/>\n<div class=\"post\" id=\"post-\">\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p><b>By <a href=\"https://twitter.com/alexalexyang\" rel=\"noopener noreferrer\" target=\"_blank\">Alex Yang</a>, Dataquest</b></p>\n<p>This cheat sheet is based on Python 3\u2019s\u00a0<a href=\"https://docs.python.org/3/library/re.html\" rel=\"noopener noreferrer\" target=\"_blank\">documentation on regular expressions</a>. If you're interested in learning Python, we have a free\u00a0<a href=\"https://www.dataquest.io/course/python-programming-beginner\" rel=\"noopener noreferrer\" target=\"_blank\">Python Programming: Beginner</a>\u00a0course for you to try out.</p>\n<p><center><a href=\"https://www.dataquest.io/blog/large_files/python-regular-expressions-cheat-sheet.pdf\" rel=\"noopener noreferrer\" target=\"_blank\"><img alt=\"python-regular-expressions-cheatsheet_pic\" src=\"https://www.dataquest.io/blog/content/images/2018/03/python-regular-expressions-cheatsheet_pic.png\" width=\"50%\"/></a><br>\n<a href=\"https://www.dataquest.io/blog/large_files/python-regular-expressions-cheat-sheet.pdf\" rel=\"noopener noreferrer\" target=\"_blank\">Download the cheat sheet here</a></br></center></p>\n<p>\u00a0</p>\n<h3>Special Characters</h3>\n<p>\u00a0<br>\n<code>^</code>\u00a0| Matches the expression to its right at the start of a string. It matches every such instance before each\u00a0<code>\\n</code>\u00a0in the string.</br></p>\n<p><code>$</code>\u00a0| Matches the expression to its left at the end of a string. It matches every such instance before each\u00a0<code>\\n</code>\u00a0in the string.</p>\n<p><code>.</code>\u00a0| Matches any character except line terminators like\u00a0<code>\\n</code>.</p>\n<p><code>\\</code>\u00a0| Escapes special characters or denotes character classes.</p>\n<p><code>A|B</code>\u00a0| Matches expression\u00a0<code>A</code>\u00a0or\u00a0<code>B</code>. If\u00a0<code>A</code>\u00a0is matched first,\u00a0<code>B</code>\u00a0is left untried.</p>\n<p><code>+</code>\u00a0| Greedily matches the expression to its left 1 or more times.</p>\n<p><code>*</code>\u00a0| Greedily matches the expression to its left 0 or more times.</p>\n<p><code>?</code>\u00a0| Greedily matches the expression to its left 0 or 1 times. But if\u00a0<code>?</code>\u00a0is added to qualifiers (<code>+</code>,\u00a0<code>*</code>, and\u00a0<code>?</code>\u00a0itself) it will perform matches in a non-greedy manner.</p>\n<p><code>{m}</code>\u00a0| Matches the expression to its left\u00a0<code>m</code>\u00a0times, and not less.</p>\n<p><code>{m,n}</code>\u00a0| Matches the expression to its left\u00a0<code>m</code>\u00a0to\u00a0<code>n</code>\u00a0times, and not less.</p>\n<p><code>{m,n}?</code>\u00a0| Matches the expression to its left\u00a0<code>m</code>\u00a0times, and ignores\u00a0<code>n</code>. See\u00a0<code>?</code>\u00a0above.</p>\n<p>\u00a0</p>\n<h3>Character Classes (a.k.a. Special Sequences)</h3>\n<p>\u00a0<br>\n<code>\\w</code>\u00a0| Matches alphanumeric characters, which means\u00a0<code>a-z</code>,\u00a0<code>A-Z</code>, and\u00a0<code>0-9</code>. It also matches the underscore,\u00a0<code>_</code>.</br></p>\n<p><code>\\d</code>\u00a0| Matches digits, which means\u00a0<code>0-9</code>.</p>\n<p><code>\\D</code>\u00a0| Matches any non-digits.</p>\n<p><code>\\s</code>\u00a0| Matches whitespace characters, which include the\u00a0<code>\\t</code>,\u00a0<code>\\n</code>,\u00a0<code>\\r</code>, and space characters.</p>\n<p><code>\\S</code>\u00a0| Matches non-whitespace characters.</p>\n<p><code>\\b</code>\u00a0| Matches the boundary (or empty string) at the start and end of a word, that is, between\u00a0<code>\\w</code>\u00a0and\u00a0<code>\\W</code>.</p>\n<p><code>\\B</code>\u00a0| Matches where\u00a0<code>\\b</code>\u00a0does not, that is, the boundary of\u00a0<code>\\w</code>\u00a0characters.</p>\n<p><code>\\A</code>\u00a0| Matches the expression to its right at the absolute start of a string whether in single or multi-line mode.</p>\n<p><code>\\Z</code>\u00a0| Matches the expression to its left at the absolute end of a string whether in single or multi-line mode.</p>\n<p>\u00a0</p>\n<h3>Sets</h3>\n<p>\u00a0<br>\n<code>[ ]</code>\u00a0| Contains a set of characters to match.</br></p>\n<p><code>[amk]</code>\u00a0| Matches either\u00a0<code>a</code>,\u00a0<code>m</code>, or\u00a0<code>k</code>. It does not match\u00a0<code>amk</code>.</p>\n<p><code>[a-z]</code>\u00a0| Matches any alphabet from\u00a0<code>a</code>\u00a0to\u00a0<code>z</code>.</p>\n<p><code>[a\\-z]</code>\u00a0| Matches\u00a0<code>a</code>,\u00a0<code>-</code>, or\u00a0<code>z</code>. It matches\u00a0<code>-</code>\u00a0because\u00a0<code>\\</code>\u00a0escapes it.</p>\n<p><code>[a-]</code>\u00a0| Matches\u00a0<code>a</code>\u00a0or\u00a0<code>-</code>, because\u00a0<code>-</code>\u00a0is not being used to indicate a series of characters.</p>\n<p><code>[-a]</code>\u00a0| As above, matches\u00a0<code>a</code>\u00a0or\u00a0<code>-</code>.</p>\n<p><code>[a-z0-9]</code>\u00a0| Matches characters from\u00a0<code>a</code>\u00a0to\u00a0<code>z</code>\u00a0and also from\u00a0<code>0</code>\u00a0to\u00a0<code>9</code>.</p>\n<p><code>[(+*)]</code>\u00a0| Special characters become literal inside a set, so this matches\u00a0<code>(</code>,\u00a0<code>+</code>,\u00a0<code>*</code>, and\u00a0<code>)</code>.</p>\n<p><code>[^ab5]</code>\u00a0| Adding\u00a0<code>^</code>\u00a0excludes any character in the set. Here, it matches characters that are not\u00a0<code>a</code>,\u00a0<code>b</code>, or\u00a0<code>5</code>.</p>\n<p>\u00a0</p>\n<h3>Groups</h3>\n<p>\u00a0<br/>\n<code>( )</code>\u00a0| Matches the expression inside the parentheses and groups it.</p>\n<p><code>(? )</code>\u00a0| Inside parentheses like this,\u00a0<code>?</code>\u00a0acts as an extension notation. Its meaning depends on the character immediately to its right.</p>\n<p><code>(?PAB)</code>\u00a0| Matches the expression\u00a0<code>AB</code>, and it can be accessed with the group name.</p>\n<p><code>(?aiLmsux)</code>\u00a0| Here,\u00a0<code>a</code>,\u00a0<code>i</code>,\u00a0<code>L</code>,\u00a0<code>m</code>,\u00a0<code>s</code>,\u00a0<code>u</code>, and\u00a0<code>x</code>\u00a0are flags:</p>\n<ul>\n<li><code>a</code>\u00a0\u2014 Matches ASCII only\n<li><code>i</code>\u00a0\u2014 Ignore case\n<li><code>L</code>\u00a0\u2014 Locale dependent\n<li><code>m</code>\u00a0\u2014 Multi-line\n<li><code>s</code>\u00a0\u2014 Matches all\n<li><code>u</code>\u00a0\u2014 Matches unicode\n<li><code>x</code>\u00a0\u2014 Verbose\n</li></li></li></li></li></li></li></ul>\n<p><code>(?:A)</code>\u00a0| Matches the expression as represented by\u00a0<code>A</code>, but unlike\u00a0<code>(?PAB)</code>, it cannot be retrieved afterwards.</p>\n<p><code>(?#...)</code>\u00a0| A comment. Contents are for us to read, not for matching.</p>\n<p><code>A(?=B)</code>\u00a0| Lookahead assertion. This matches the expression\u00a0<code>A</code>\u00a0only if it is followed by\u00a0<code>B</code>.</p>\n<p><code>A(?!B)</code>\u00a0| Negative lookahead assertion. This matches the expression\u00a0<code>A</code>\u00a0only if it is not followed by\u00a0<code>B</code>.</p>\n<p><code>(?&lt;=B)A</code>\u00a0| Positive lookbehind assertion. This matches the expression\u00a0<code>A</code>\u00a0only if\u00a0<code>B</code>\u00a0is immediately to its left. This can only matched fixed length expressions.</p>\n<p><code>(?&lt;!B)A</code>\u00a0| Negative lookbehind assertion. This matches the expression\u00a0<code>A</code>\u00a0only if\u00a0<code>B</code>\u00a0is not immediately to its left. This can only matched fixed length expressions.</p>\n<p><code>(?P=name)</code>\u00a0| Matches the expression matched by an earlier group named \u201cname\u201d.</p>\n<p><code>(...)\\1</code>\u00a0| The number\u00a0<code>1</code>\u00a0corresponds to the first group to be matched. If we want to match more instances of the same expresion, simply use its number instead of writing out the whole expression again. We can use from\u00a0<code>1</code>\u00a0up to\u00a0<code>99</code>\u00a0such groups and their corresponding numbers.</p>\n<p>\u00a0</p>\n<h3>Popular Python re module Functions</h3>\n<p>\u00a0<br/>\n<code>re.findall(A, B)</code>\u00a0| Matches all instances of an expression\u00a0<code>A</code>\u00a0in a string\u00a0<code>B</code>\u00a0and returns them in a list.</p>\n<p><code>re.search(A, B)</code>\u00a0| Matches the first instance of an expression\u00a0<code>A</code>\u00a0in a string\u00a0<code>B</code>, and returns it as a re match object.</p>\n<p><code>re.split(A, B)</code>\u00a0| Split a string B into a list using the delimiter\u00a0<code>A</code>.</p>\n<p><code>re.sub(A, B, C)</code>\u00a0| Replace\u00a0<code>A</code>\u00a0with\u00a0<code>B</code>\u00a0in the string\u00a0<code>C</code>.</p>\n<p>\u00a0<br/>\n<b>Useful Regular Expressions Sites for Python users</b></p>\n<ul>\n<li><a href=\"https://docs.python.org/3/library/re.html\" rel=\"noopener noreferrer\" target=\"_blank\">Python 3 re module documentation</a>\n<li><a href=\"https://regex101.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Online regex tester and debugger</a>\n</li></li></ul>\n<p>\u00a0<br/>\n<b>Bio: <a href=\"https://twitter.com/alexalexyang\" rel=\"noopener noreferrer\" target=\"_blank\">Alex Yang</a></b> is a writer fascinated by the things code can do. He also enjoys citizen science and new media art.</p>\n<p><a href=\"https://www.dataquest.io/blog/regex-cheatsheet/?utm_source=kdnuggets&amp;utm_medium=blog\" rel=\"noopener noreferrer\" target=\"_blank\">Original</a>. Reposted with permission.</p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2017/09/essential-data-science-machine-learning-deep-learning-cheat-sheets.html\">30 Essential Data Science, Machine Learning &amp; Deep Learning Cheat Sheets</a>\n<li><a href=\"/2018/02/introduction-functional-programming-python.html\">Introduction to Functional Programming in Python</a>\n<li><a href=\"/2018/03/text-data-preprocessing-walkthrough-python.html\">Text Data Preprocessing: A Walkthrough in Python</a>\n</li></li></li></ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p> <script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets';\n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div>\n<div class=\"page-link\"></div>\n<div class=\"pagi\">\n<hr class=\"grey-line\"/>\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2018/04/derivation-convolutional-neural-network-fully-connected-step-by-step.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"/> <strong>Previous post</strong></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2018/04/presto-data-scientists-sql.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/><br/>\n<div>\n<hr class=\"grey-line\"/><br/>\n<h2>Top Stories Past 30 Days</h2>\n<table align=\"center\" cellpadding=\"3\" cellspacing=\"10\" class=\"latn\" width=\"100%\">\n<tr>\n<td valign=\"top\" width=\"50%\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Popular</b></th></tr>\n<tr><td>\n<ol class=\"three_ol\"><li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-1-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-2-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n<li> <a href=\"/2018/05/simplilearn-9-must-have-skills-data-scientist.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-3-simplilearn');\"><b>9 Must-have skills you need to become a Data Scientist, updated</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-4-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/03/another-10-free-must-read-books-for-machine-learning-and-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-5-another-10-books');\"><b>Another 10 Free Must-Read Books for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-6-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/best-data-visualization-techniques.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-7-best-data-viz');\"><b>Best Data Visualization Techniques for small and large data</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td> <td valign=\"top\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Shared</b></th></tr>\n<tr><td><ol class=\"three_ol\">\n<li> <a href=\"/2019/04/another-10-free-must-see-courses-machine-learning-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-1-another-10-courses');\"><b>Another 10 Free Must-See Courses for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-2-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/03/r-vs-python-data-visualization.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-3-r-py-viz');\"><b>R vs Python for Data Visualization</b></a>\n<li> <a href=\"/2019/03/deep-learning-toolset-overview.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-4-dl-toolset');\"><b>The Deep Learning Toolset \u2014 An Overview</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-5-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-6-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-7-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<!--#content end--></div>\n<div id=\"sidebar\">\n<div class=\"latn\">\n<h3><b><a href=\"/news/index.html\">Latest News</a></b></h3>\n<ul style=\"font-size:14px; margin-top:5px\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/datarobot-delivering-trusted-ai-microsoft.html\">Delivering Trusted AI with DataRobot and Microsoft</a><li> <a href=\"https://www.kdnuggets.com/2019/04/formulated-ai-data-production-landscape.html\">AI and the data production landscape</a><li> <a href=\"https://www.kdnuggets.com/2019/04/most-desired-skill-data-science.html\">The most desired skill in data science</a><li> <a href=\"https://www.kdnuggets.com/2019/04/projects-include-data-science-portfolio.html\">Projects to Include in a Data Science Portfolio</a><li> <a href=\"https://www.kdnuggets.com/2019/04/rework-meet-worlds-leading-ai-deep-learning-experts.html\">Meet the World\u2019s Leading AI &amp; Deep Learning ...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/problem-data-science-job-postings.html\">The problem with data science job postings</a></li></li></li></li></li></li></ul>\n</div>\n<div>\n<script type=\"text/javascript\">kda_sid_write(kda_sid_n);</script>\n</div>\n<br/><script src=\"/aps/sbm.js\" type=\"text/javascript\"></script>\n</div>\n</div><div class=\"breadcrumbs_bottom\">\n<div class=\"breadcumb\">\n<br>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2018/index.html\">2018</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/04/index.html\">Apr</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/04/tutorials.html\">Tutorials, Overviews</a> \u00bb Python Regular Expressions Cheat Sheet (\u00a0<a href=\"/2018/n17.html\">18:n17</a>\u00a0)    </br></div>\n</div>\n<!--#content_wrapper end--></div>\n<br>\n<div id=\"footer\">\n<br/>\u00a9 2019 KDnuggets. <a href=\"/about/index.html\">About KDnuggets</a>. \u00a0<a href=\"/news/privacy-policy.html\">Privacy policy</a>. <a href=\"/terms-of-service.html\">Terms of Service</a><br/>\u00a0\n<div class=\"kd_bottom\">\n<div class=\"footer-container\">\n<div class=\"footer-news\">\n<a href=\"/news/subscribe.html\" onclick=\"_gaq.push(['_trackPageview','/x/bot/sub']);\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a>\n</div>\n<div class=\"footer-sm\">\n<a href=\"https://twitter.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/twt']);\" target=\"_blank\"><img height=\"32\" src=\"/images/tw_c48.png\" width=\"32\"/></a>\n<a href=\"https://facebook.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/fb']);\" target=\"_blank\"><img alt=\"Facebook\" height=\"32\" src=\"/images/fb_c48.png\" width=\"32\"/></a>\n<a href=\"https://www.linkedin.com/groups/54257\" onclick=\"_gaq.push(['_trackPageview','/x/bot/in']);\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"32\" src=\"/images/in_c48.png\" width=\"32\"/></a>\n</div>\n</div>\n<div class=\"close-footer\">X</div>\n</div>\n<script type=\"text/javascript\">\n  jQuery('.close-footer').click(\n      function(){       \n         jQuery('.kd_bottom').hide();\n      }\n   );\n</script> </div>\n<div class=\"clear\"><!--blank--></div>\n</br></div>\n<div style=\"display: none;\"><div id=\"boxzilla-box-82996-content\"><script type=\"text/javascript\">(function() {\n\tif (!window.mc4wp) {\n\t\twindow.mc4wp = {\n\t\t\tlisteners: [],\n\t\t\tforms    : {\n\t\t\t\ton: function (event, callback) {\n\t\t\t\t\twindow.mc4wp.listeners.push({\n\t\t\t\t\t\tevent   : event,\n\t\t\t\t\t\tcallback: callback\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})();\n</script><!-- MailChimp for WordPress v4.1.14 - https://wordpress.org/plugins/mailchimp-for-wp/ --><form class=\"mc4wp-form mc4wp-form-77281\" data-id=\"77281\" data-name=\"Subscribe to KDnuggets News\" id=\"mc4wp-form-1\" method=\"post\"><div class=\"mc4wp-form-fields\"><div class=\"header-container\">\n<img align=\"left\" src=\"/wp-content/uploads/envelope.png\"><a href=\"/news/subscribe.html\">Get KDnuggets, a leading newsletter on AI, \r\n  Data Science, and Machine Learning</a>\n</img></div>\n<div class=\"form-fields\">\n<div class=\"field-container\"><label>Email:</label><input maxlength=\"60\" name=\"EMAIL\" placeholder=\"Your email\" required=\"\" size=\"30\" type=\"email\"/></div>\n<div class=\"field-container submit-container\"><div class=\"form-button\" onclick=\"document.getElementById('mc4wp-form-1').submit()\">Sign Up</div></div>\n</div>\n<label style=\"display: none !important;\">Leave this field empty if you're human: <input autocomplete=\"off\" name=\"_mc4wp_honeypot\" tabindex=\"-1\" type=\"text\" value=\"\"/></label><input name=\"_mc4wp_timestamp\" type=\"hidden\" value=\"1556345748\"/><input name=\"_mc4wp_form_id\" type=\"hidden\" value=\"77281\"/><input name=\"_mc4wp_form_element_id\" type=\"hidden\" value=\"mc4wp-form-1\"/></div><div class=\"mc4wp-response\"></div></form><!-- / MailChimp for WordPress Plugin -->\n</div></div><script type=\"text/javascript\">(function() {function addEventListener(element,event,handler) {\n\tif(element.addEventListener) {\n\t\telement.addEventListener(event,handler, false);\n\t} else if(element.attachEvent){\n\t\telement.attachEvent('on'+event,handler);\n\t}\n}function maybePrefixUrlField() {\n\tif(this.value.trim() !== '' && this.value.indexOf('http') !== 0) {\n\t\tthis.value = \"http://\" + this.value;\n\t}\n}\n\nvar urlFields = document.querySelectorAll('.mc4wp-form input[type=\"url\"]');\nif( urlFields && urlFields.length > 0 ) {\n\tfor( var j=0; j < urlFields.length; j++ ) {\n\t\taddEventListener(urlFields[j],'blur',maybePrefixUrlField);\n\t}\n}/* test if browser supports date fields */\nvar testInput = document.createElement('input');\ntestInput.setAttribute('type', 'date');\nif( testInput.type !== 'date') {\n\n\t/* add placeholder & pattern to all date fields */\n\tvar dateFields = document.querySelectorAll('.mc4wp-form input[type=\"date\"]');\n\tfor(var i=0; i<dateFields.length; i++) {\n\t\tif(!dateFields[i].placeholder) {\n\t\t\tdateFields[i].placeholder = 'YYYY-MM-DD';\n\t\t}\n\t\tif(!dateFields[i].pattern) {\n\t\t\tdateFields[i].pattern = '[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])';\n\t\t}\n\t}\n}\n\n})();</script><script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_options = {\"testMode\":\"\",\"boxes\":[{\"id\":82996,\"icon\":\"&times;\",\"content\":\"\",\"css\":{\"background_color\":\"#eeee22\",\"width\":600,\"border_width\":2,\"border_style\":\"double\",\"position\":\"center\"},\"trigger\":{\"method\":\"time_on_page\",\"value\":\"3\"},\"animation\":\"fade\",\"cookie\":{\"triggered\":0,\"dismissed\":336},\"rehide\":true,\"position\":\"center\",\"screenWidthCondition\":{\"condition\":\"larger\",\"value\":500},\"closable\":true,\"post\":{\"id\":82996,\"title\":\"Subscribe to KDnuggets\",\"slug\":\"subscribe-to-kdnuggets\"}}]};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla/assets/js/script.min.js?ver=3.2.5\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_stats_config = {\"ajaxurl\":\"https:\\/\\/www.kdnuggets.com\\/wp-admin\\/admin-ajax.php?action=boxzilla_stats_track\"};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla-stats/assets/js/tracking.min.js?ver=1.0.4\" type=\"text/javascript\"></script>\n<script src=\"https://www.kdnuggets.com/wp-includes/js/wp-embed.min.js?ver=4.9.10\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar mc4wp_forms_config = [];\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/forms-api.min.js?ver=4.1.14\" type=\"text/javascript\"></script>\n<!--[if lte IE 9]>\n<script type='text/javascript' src='https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/third-party/placeholders.min.js?ver=4.1.14'></script>\n<![endif]-->\n<!--/.main_wrapper--></body></html>\n<script src=\"https://s7.addthis.com/js/300/addthis_widget.js#pubid=gpsaddthis\" type=\"text/javascript\"></script>\n\n\n<!-- Dynamic page generated in 0.629 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2019-04-27 02:15:48 -->\n<!-- Compression = gzip -->", "content_tokenized": ["comment", "alex", "yang", "dataquest", "this", "cheat", "sheet", "base", "python", "num", "document", "regular", "express", "interest", "learn", "python", "have", "free", "python", "program", "beginn", "cours", "for", "tri", "out", "download", "the", "cheat", "sheet", "here", "special", "charact", "match", "the", "express", "right", "the", "start", "string", "match", "everi", "such", "instanc", "befor", "each", "the", "string", "match", "the", "express", "left", "the", "end", "string", "match", "everi", "such", "instanc", "befor", "each", "the", "string", "match", "ani", "charact", "except", "line", "termin", "like", "escap", "special", "charact", "denot", "charact", "class", "match", "express", "match", "first", "left", "untri", "greedili", "match", "the", "express", "left", "num", "more", "time", "greedili", "match", "the", "express", "left", "num", "more", "time", "greedili", "match", "the", "express", "left", "num", "num", "time", "but", "qualifi", "and", "itself", "will", "perform", "match", "nongreedi", "manner", "match", "the", "express", "left", "time", "and", "not", "less", "match", "the", "express", "left", "time", "and", "not", "less", "match", "the", "express", "left", "time", "and", "ignor", "see", "abov", "charact", "class", "aka", "special", "sequenc", "match", "alphanumer", "charact", "which", "mean", "and", "num", "also", "match", "the", "underscor", "match", "digit", "which", "mean", "num", "match", "ani", "nondigit", "match", "whitespac", "charact", "which", "includ", "the", "and", "space", "charact", "match", "nonwhitespac", "charact", "match", "the", "boundari", "empti", "string", "the", "start", "and", "end", "word", "that", "between", "and", "match", "where", "doe", "not", "that", "the", "boundari", "charact", "match", "the", "express", "right", "the", "absolut", "start", "string", "whether", "singl", "multilin", "mode", "match", "the", "express", "left", "the", "absolut", "end", "string", "whether", "singl", "multilin", "mode", "set", "contain", "set", "charact", "match", "amk", "match", "either", "doe", "not", "match", "amk", "match", "ani", "alphabet", "from", "match", "match", "becaus", "escap", "match", "becaus", "not", "use", "indic", "seri", "charact", "abov", "match", "aznum", "match", "charact", "from", "and", "also", "from", "num", "num", "special", "charact", "becom", "liter", "insid", "set", "this", "match", "and", "abnum", "exclud", "ani", "charact", "the", "set", "here", "match", "charact", "that", "are", "not", "num", "group", "match", "the", "express", "insid", "the", "parenthes", "and", "group", "insid", "parenthes", "like", "this", "act", "extens", "notat", "mean", "depend", "the", "charact", "immedi", "right", "match", "the", "express", "and", "can", "access", "with", "the", "group", "name", "ailmsux", "here", "and", "are", "flag", "match", "onli", "ignor", "case", "local", "depend", "multilin", "match", "all", "match", "unicod", "verbos", "match", "the", "express", "repres", "but", "unlik", "can", "not", "retriev", "afterward", "comment", "content", "are", "for", "read", "not", "for", "match", "lookahead", "assert", "this", "match", "the", "express", "onli", "follow", "negat", "lookahead", "assert", "this", "match", "the", "express", "onli", "not", "follow", "posit", "lookbehind", "assert", "this", "match", "the", "express", "onli", "immedi", "left", "this", "can", "onli", "match", "fix", "length", "express", "negat", "lookbehind", "assert", "this", "match", "the", "express", "onli", "not", "immedi", "left", "this", "can", "onli", "match", "fix", "length", "express", "pname", "match", "the", "express", "match", "earlier", "group", "name", "name", "num", "the", "number", "num", "correspond", "the", "first", "group", "match", "want", "match", "more", "instanc", "the", "same", "expres", "simpli", "use", "number", "instead", "write", "out", "the", "whole", "express", "again", "can", "use", "from", "num", "num", "such", "group", "and", "their", "correspond", "number", "popular", "python", "modul", "function", "match", "all", "instanc", "express", "string", "and", "return", "them", "list", "match", "the", "first", "instanc", "express", "string", "and", "return", "match", "object", "split", "string", "into", "list", "use", "the", "delimit", "replac", "with", "the", "string", "use", "regular", "express", "site", "for", "python", "user", "python", "num", "modul", "document", "onlin", "regex", "tester", "and", "debugg", "bio", "alex", "yang", "writer", "fascin", "the", "thing", "code", "can", "also", "enjoy", "citizen", "scienc", "and", "new", "media", "art", "origin", "repost", "with", "permiss", "relat", "num", "essenti", "data", "scienc", "machin", "learn", "deep", "learn", "cheat", "sheet", "introduct", "function", "program", "python", "text", "data", "preprocess", "walkthrough", "python"], "timestamp_scraper": 1556363968.246431, "title": "Python Regular Expressions Cheat Sheet", "read_time": 286.2, "content_html": "<div class=\"post\" id=\"post-\">\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p><b>By <a href=\"https://twitter.com/alexalexyang\" rel=\"noopener noreferrer\" target=\"_blank\">Alex Yang</a>, Dataquest</b></p>\n<p>This cheat sheet is based on Python 3\u2019s\u00a0<a href=\"https://docs.python.org/3/library/re.html\" rel=\"noopener noreferrer\" target=\"_blank\">documentation on regular expressions</a>. If you're interested in learning Python, we have a free\u00a0<a href=\"https://www.dataquest.io/course/python-programming-beginner\" rel=\"noopener noreferrer\" target=\"_blank\">Python Programming: Beginner</a>\u00a0course for you to try out.</p>\n<p><center><a href=\"https://www.dataquest.io/blog/large_files/python-regular-expressions-cheat-sheet.pdf\" rel=\"noopener noreferrer\" target=\"_blank\"><img alt=\"python-regular-expressions-cheatsheet_pic\" src=\"https://www.dataquest.io/blog/content/images/2018/03/python-regular-expressions-cheatsheet_pic.png\" width=\"50%\"/></a><br>\n<a href=\"https://www.dataquest.io/blog/large_files/python-regular-expressions-cheat-sheet.pdf\" rel=\"noopener noreferrer\" target=\"_blank\">Download the cheat sheet here</a></br></center></p>\n<p>\u00a0</p>\n<h3>Special Characters</h3>\n<p>\u00a0<br>\n<code>^</code>\u00a0| Matches the expression to its right at the start of a string. It matches every such instance before each\u00a0<code>\\n</code>\u00a0in the string.</br></p>\n<p><code>$</code>\u00a0| Matches the expression to its left at the end of a string. It matches every such instance before each\u00a0<code>\\n</code>\u00a0in the string.</p>\n<p><code>.</code>\u00a0| Matches any character except line terminators like\u00a0<code>\\n</code>.</p>\n<p><code>\\</code>\u00a0| Escapes special characters or denotes character classes.</p>\n<p><code>A|B</code>\u00a0| Matches expression\u00a0<code>A</code>\u00a0or\u00a0<code>B</code>. If\u00a0<code>A</code>\u00a0is matched first,\u00a0<code>B</code>\u00a0is left untried.</p>\n<p><code>+</code>\u00a0| Greedily matches the expression to its left 1 or more times.</p>\n<p><code>*</code>\u00a0| Greedily matches the expression to its left 0 or more times.</p>\n<p><code>?</code>\u00a0| Greedily matches the expression to its left 0 or 1 times. But if\u00a0<code>?</code>\u00a0is added to qualifiers (<code>+</code>,\u00a0<code>*</code>, and\u00a0<code>?</code>\u00a0itself) it will perform matches in a non-greedy manner.</p>\n<p><code>{m}</code>\u00a0| Matches the expression to its left\u00a0<code>m</code>\u00a0times, and not less.</p>\n<p><code>{m,n}</code>\u00a0| Matches the expression to its left\u00a0<code>m</code>\u00a0to\u00a0<code>n</code>\u00a0times, and not less.</p>\n<p><code>{m,n}?</code>\u00a0| Matches the expression to its left\u00a0<code>m</code>\u00a0times, and ignores\u00a0<code>n</code>. See\u00a0<code>?</code>\u00a0above.</p>\n<p>\u00a0</p>\n<h3>Character Classes (a.k.a. Special Sequences)</h3>\n<p>\u00a0<br>\n<code>\\w</code>\u00a0| Matches alphanumeric characters, which means\u00a0<code>a-z</code>,\u00a0<code>A-Z</code>, and\u00a0<code>0-9</code>. It also matches the underscore,\u00a0<code>_</code>.</br></p>\n<p><code>\\d</code>\u00a0| Matches digits, which means\u00a0<code>0-9</code>.</p>\n<p><code>\\D</code>\u00a0| Matches any non-digits.</p>\n<p><code>\\s</code>\u00a0| Matches whitespace characters, which include the\u00a0<code>\\t</code>,\u00a0<code>\\n</code>,\u00a0<code>\\r</code>, and space characters.</p>\n<p><code>\\S</code>\u00a0| Matches non-whitespace characters.</p>\n<p><code>\\b</code>\u00a0| Matches the boundary (or empty string) at the start and end of a word, that is, between\u00a0<code>\\w</code>\u00a0and\u00a0<code>\\W</code>.</p>\n<p><code>\\B</code>\u00a0| Matches where\u00a0<code>\\b</code>\u00a0does not, that is, the boundary of\u00a0<code>\\w</code>\u00a0characters.</p>\n<p><code>\\A</code>\u00a0| Matches the expression to its right at the absolute start of a string whether in single or multi-line mode.</p>\n<p><code>\\Z</code>\u00a0| Matches the expression to its left at the absolute end of a string whether in single or multi-line mode.</p>\n<p>\u00a0</p>\n<h3>Sets</h3>\n<p>\u00a0<br>\n<code>[ ]</code>\u00a0| Contains a set of characters to match.</br></p>\n<p><code>[amk]</code>\u00a0| Matches either\u00a0<code>a</code>,\u00a0<code>m</code>, or\u00a0<code>k</code>. It does not match\u00a0<code>amk</code>.</p>\n<p><code>[a-z]</code>\u00a0| Matches any alphabet from\u00a0<code>a</code>\u00a0to\u00a0<code>z</code>.</p>\n<p><code>[a\\-z]</code>\u00a0| Matches\u00a0<code>a</code>,\u00a0<code>-</code>, or\u00a0<code>z</code>. It matches\u00a0<code>-</code>\u00a0because\u00a0<code>\\</code>\u00a0escapes it.</p>\n<p><code>[a-]</code>\u00a0| Matches\u00a0<code>a</code>\u00a0or\u00a0<code>-</code>, because\u00a0<code>-</code>\u00a0is not being used to indicate a series of characters.</p>\n<p><code>[-a]</code>\u00a0| As above, matches\u00a0<code>a</code>\u00a0or\u00a0<code>-</code>.</p>\n<p><code>[a-z0-9]</code>\u00a0| Matches characters from\u00a0<code>a</code>\u00a0to\u00a0<code>z</code>\u00a0and also from\u00a0<code>0</code>\u00a0to\u00a0<code>9</code>.</p>\n<p><code>[(+*)]</code>\u00a0| Special characters become literal inside a set, so this matches\u00a0<code>(</code>,\u00a0<code>+</code>,\u00a0<code>*</code>, and\u00a0<code>)</code>.</p>\n<p><code>[^ab5]</code>\u00a0| Adding\u00a0<code>^</code>\u00a0excludes any character in the set. Here, it matches characters that are not\u00a0<code>a</code>,\u00a0<code>b</code>, or\u00a0<code>5</code>.</p>\n<p>\u00a0</p>\n<h3>Groups</h3>\n<p>\u00a0<br/>\n<code>( )</code>\u00a0| Matches the expression inside the parentheses and groups it.</p>\n<p><code>(? )</code>\u00a0| Inside parentheses like this,\u00a0<code>?</code>\u00a0acts as an extension notation. Its meaning depends on the character immediately to its right.</p>\n<p><code>(?PAB)</code>\u00a0| Matches the expression\u00a0<code>AB</code>, and it can be accessed with the group name.</p>\n<p><code>(?aiLmsux)</code>\u00a0| Here,\u00a0<code>a</code>,\u00a0<code>i</code>,\u00a0<code>L</code>,\u00a0<code>m</code>,\u00a0<code>s</code>,\u00a0<code>u</code>, and\u00a0<code>x</code>\u00a0are flags:</p>\n<ul>\n<li><code>a</code>\u00a0\u2014 Matches ASCII only\n<li><code>i</code>\u00a0\u2014 Ignore case\n<li><code>L</code>\u00a0\u2014 Locale dependent\n<li><code>m</code>\u00a0\u2014 Multi-line\n<li><code>s</code>\u00a0\u2014 Matches all\n<li><code>u</code>\u00a0\u2014 Matches unicode\n<li><code>x</code>\u00a0\u2014 Verbose\n</li></li></li></li></li></li></li></ul>\n<p><code>(?:A)</code>\u00a0| Matches the expression as represented by\u00a0<code>A</code>, but unlike\u00a0<code>(?PAB)</code>, it cannot be retrieved afterwards.</p>\n<p><code>(?#...)</code>\u00a0| A comment. Contents are for us to read, not for matching.</p>\n<p><code>A(?=B)</code>\u00a0| Lookahead assertion. This matches the expression\u00a0<code>A</code>\u00a0only if it is followed by\u00a0<code>B</code>.</p>\n<p><code>A(?!B)</code>\u00a0| Negative lookahead assertion. This matches the expression\u00a0<code>A</code>\u00a0only if it is not followed by\u00a0<code>B</code>.</p>\n<p><code>(?&lt;=B)A</code>\u00a0| Positive lookbehind assertion. This matches the expression\u00a0<code>A</code>\u00a0only if\u00a0<code>B</code>\u00a0is immediately to its left. This can only matched fixed length expressions.</p>\n<p><code>(?&lt;!B)A</code>\u00a0| Negative lookbehind assertion. This matches the expression\u00a0<code>A</code>\u00a0only if\u00a0<code>B</code>\u00a0is not immediately to its left. This can only matched fixed length expressions.</p>\n<p><code>(?P=name)</code>\u00a0| Matches the expression matched by an earlier group named \u201cname\u201d.</p>\n<p><code>(...)\\1</code>\u00a0| The number\u00a0<code>1</code>\u00a0corresponds to the first group to be matched. If we want to match more instances of the same expresion, simply use its number instead of writing out the whole expression again. We can use from\u00a0<code>1</code>\u00a0up to\u00a0<code>99</code>\u00a0such groups and their corresponding numbers.</p>\n<p>\u00a0</p>\n<h3>Popular Python re module Functions</h3>\n<p>\u00a0<br/>\n<code>re.findall(A, B)</code>\u00a0| Matches all instances of an expression\u00a0<code>A</code>\u00a0in a string\u00a0<code>B</code>\u00a0and returns them in a list.</p>\n<p><code>re.search(A, B)</code>\u00a0| Matches the first instance of an expression\u00a0<code>A</code>\u00a0in a string\u00a0<code>B</code>, and returns it as a re match object.</p>\n<p><code>re.split(A, B)</code>\u00a0| Split a string B into a list using the delimiter\u00a0<code>A</code>.</p>\n<p><code>re.sub(A, B, C)</code>\u00a0| Replace\u00a0<code>A</code>\u00a0with\u00a0<code>B</code>\u00a0in the string\u00a0<code>C</code>.</p>\n<p>\u00a0<br/>\n<b>Useful Regular Expressions Sites for Python users</b></p>\n<ul>\n<li><a href=\"https://docs.python.org/3/library/re.html\" rel=\"noopener noreferrer\" target=\"_blank\">Python 3 re module documentation</a>\n<li><a href=\"https://regex101.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Online regex tester and debugger</a>\n</li></li></ul>\n<p>\u00a0<br/>\n<b>Bio: <a href=\"https://twitter.com/alexalexyang\" rel=\"noopener noreferrer\" target=\"_blank\">Alex Yang</a></b> is a writer fascinated by the things code can do. He also enjoys citizen science and new media art.</p>\n<p><a href=\"https://www.dataquest.io/blog/regex-cheatsheet/?utm_source=kdnuggets&amp;utm_medium=blog\" rel=\"noopener noreferrer\" target=\"_blank\">Original</a>. Reposted with permission.</p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2017/09/essential-data-science-machine-learning-deep-learning-cheat-sheets.html\">30 Essential Data Science, Machine Learning &amp; Deep Learning Cheat Sheets</a>\n<li><a href=\"/2018/02/introduction-functional-programming-python.html\">Introduction to Functional Programming in Python</a>\n<li><a href=\"/2018/03/text-data-preprocessing-walkthrough-python.html\">Text Data Preprocessing: A Walkthrough in Python</a>\n</li></li></li></ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p> <script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets';\n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div> ", "website": "kdnuggets"}