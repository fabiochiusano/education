{"content": "By Tim Hunter and Joseph Bradley , Databricks. Data scientists often spend hours or days tuning models to get the highest accuracy. This tuning typically involves running a large number of independent Machine Learning (ML) tasks coded in Python or R. Following some work presented at Spark Summit Europe 2015, we are excited to release a library that dramatically simplifies the life of data scientists using Python. This library, published as spark-sklearn , automatically distributes the most repetitive tasks of model tuning on a Spark cluster, without impacting the workflow of data scientists: When used on a single machine, Spark can be used as a substitute to the default multithreading framework used by scikit-learn ( Joblib ). If a need comes to spread the work across multiple machines, no change is required in the code between the single-machine case and the cluster case. Scale data science effortlessly Python is one of the most popular programming languages for data exploration and data science, and this is in no small part due to high quality libraries such as Pandas for data exploration or scikit-learn for machine learning. Scikit-learn provides fast and robust implementations of standard ML algorithms such as clustering, classification, and regression. Scikit-learn\u2019s strength has typically been in the realm of computing on a single node, though. For some common scenarios, such as parameter tuning, a large number of small tasks can be run in parallel. These scenarios are perfect use cases for Spark. We explored how to integrate Spark with scikit-learn, and the result is the spark-sklearn Python package. Spark-sklearn combines the strengths of Spark and scikit-learn with no changes to users\u2019 code. It re-implements some components of scikit-learn that benefit the most from distributed computing. Users will find a Spark-based cross-validator class that is fully compatible with scikit-learn\u2019s cross-validation tools. By swapping out a single class import, users can distribute cross-validation for their existing scikit-learn workflows. Distribute tuning of Random Forests Consider a classical example of identifying digits in images. Here are a few examples of images taken from the popular digits dataset, with their labels: We are going to train a random forest classifier to recognize the digits. This classifier has a number of parameters to adjust, and there is no easy way to know which parameters work best, other than trying out many different combinations. Scikit-learn provides GridSearchCV, a search algorithm that explores many parameter settings automatically. GridSearchCV uses selection by cross-validation, illustrated below. Each parameter setting produces one model, and the best-performing model is selected. The original code , using only scikit-learn, is as follows: from sklearn import grid_search , datasets\r from sklearn . ensemble import RandomForestClassifier\r from sklearn . grid_search import GridSearchCV\r digits = datasets . load_digits ( ) \r X , y = digits . data , digits . target\r param_grid = { \"max_depth\" : [ 3 , None ] , \r \"max_features\" : [ 1 , 3 , 10 ] , \r \"min_samples_split\" : [ 1 , 3 , 10 ] , \r \"min_samples_leaf\" : [ 1 , 3 , 10 ] , \r \"bootstrap\" : [ True , False ] , \r \"criterion\" : [ \"gini\" , \"entropy\" ] , \r \"n_estimators\" : [ 10 , 20 , 40 , 80 ] } \r gs = grid_search . GridSearchCV ( RandomForestClassifier ( ) , param_grid = param_grid ) \r gs . fit ( X , y ) \r The dataset is small (in the hundreds of kilobytes), but exploring all the combinations takes about 5 minutes on a single core. Spark-sklearn provides an alternative implementation of the cross-validation algorithm that distributes the workload on a Spark cluster. Each node runs the training algorithm using a local copy of the scikit-learn library, and reports the best model back to the master: The code is the same as before, except for a one-line change: from sklearn import grid_search , datasets\r from sklearn . ensemble import RandomForestClassifier\r # Use spark_sklearn\u2019s grid search instead: \r from spark_sklearn import GridSearchCV\r digits = datasets . load_digits ( ) \r X , y = digits . data , digits . target\r param_grid = { \"max_depth\" : [ 3 , None ] , \r \"max_features\" : [ 1 , 3 , 10 ] , \r \"min_samples_split\" : [ 1 , 3 , 10 ] , \r \"min_samples_leaf\" : [ 1 , 3 , 10 ] , \r \"bootstrap\" : [ True , False ] , \r \"criterion\" : [ \"gini\" , \"entropy\" ] , \r \"n_estimators\" : [ 10 , 20 , 40 , 80 ] } \r gs = grid_search . GridSearchCV ( RandomForestClassifier ( ) , param_grid = param_grid ) \r gs . fit ( X , y ) \r This example runs under 30 seconds on a 4-node cluster (which has 16 CPUs). For larger datasets and more parameter settings, the difference is even more dramatic. Get started If you would like to try out spark-sklearn yourself, it is available as a Spark package and as a Pypi library . To get started, check out this example notebook on Databricks . In addition to distributing ML tasks in Python across a cluster, spark-sklearn provides additional tools to export data from Spark to python and vice-versa. You can find methods to convert Spark DataFrames to Pandas dataframes and numpy arrays. More details can be found in this Spark Summit Europe presentation and in the API documentation", "title_html": "<h1 id=\"title\">Auto-Scaling scikit-learn with Spark</h1> ", "url": "https://www.kdnuggets.com/2016/02/auto-scaling-scikit-learn-spark.html", "tfidf": {"tfidf": {"label": 4.47715736041, "hour": 2.25960717336, "bradley": 18.9, "start": 2.53347163488, "though": 1.36076112111, "fit": 6.74140127388, "here": 2.42307692308, "minut": 3.11233091551, "report": 1.3634489866, "num": 32.01008128032, "minsamplesleaf": 2646.0, "addit": 2.49269901084, "paramet": 103.53913043460001, "panda": 223.605633802, "datafram": 2646.0, "number": 3.30428749827, "recogn": 2.54954231572, "parallel": 4.57917507932, "the": 32.0, "dataset": 1355.268292686, "about": 1.06486015159, "class": 4.23303559526, "scikitlearn": 15876.0, "summit": 24.4622496148, "python": 337.7872340424, "tri": 3.7089125102199993, "standard": 1.8915763135900003, "classifi": 10.5875291764, "know": 2.59327017315, "random": 14.3804347826, "under": 1.0781663837, "check": 6.50655737705, "out": 4.24066777964, "but": 1.01632417899, "scale": 3.7469907953699995, "automat": 13.575032064980002, "spend": 4.15928739848, "across": 3.4637285916800002, "ensembl": 33.493670886, "instead": 1.59461631177, "tool": 9.99433427762, "few": 1.31729173581, "multipl": 2.74813917258, "viceversa": 1323.0, "run": 6.22771403352, "how": 1.60250328051, "singl": 6.43795620436, "present": 2.51103202846, "than": 1.03278688525, "hundr": 2.4698195395099996, "distribut": 16.437618636779998, "due": 1.23789473684, "found": 1.11387076405, "digit": 39.745201669020005, "maxdepth": 2646.0, "will": 1.22481098596, "entropi": 214.54054054, "gini": 529.2, "taken": 1.6012102874399998, "consid": 1.2397313759200002, "compat": 15.2068965517, "second": 1.1130898128, "provid": 4.86210856748, "select": 4.04690288044, "below": 2.25607503197, "framework": 8.200413223139998, "loaddigit": 2646.0, "hunter": 8.53089736701, "need": 1.4372623574099999, "target": 6.437956204380001, "classif": 8.067073170730001, "exist": 1.4647107666799999, "tune": 52.086614173, "effortless": 136.862068966, "integr": 2.8254137746900003, "best": 3.1657028913200005, "origin": 1.13724928367, "has": 3.1309492505999996, "illustr": 3.6614391143900002, "convert": 3.2740771293099997, "adjust": 7.112903225810001, "would": 1.0828729281799998, "follow": 2.09280253098, "default": 21.1398135819, "robust": 19.9447236181, "code": 19.4035688096, "model": 10.452989202000001, "high": 1.14777327935, "excit": 9.818181818180001, "regress": 51.2129032258, "publish": 1.36885669943, "strength": 8.05479452054, "substitut": 7.96588058204, "sparkbas": 1323.0, "cpus": 174.46153846200002, "typic": 4.508306119559999, "mani": 2.08853515754, "bestperform": 1323.0, "involv": 1.4498630137000001, "task": 15.54565483476, "compon": 4.09491875161, "onelin": 1323.0, "gridsearch": 6615.0, "scenario": 30.7972841902, "paramgrid": 7938.0, "altern": 2.1390460792200003, "kilobyt": 453.6, "easi": 5.2937645882, "machin": 16.09733840304, "swap": 29.954716981100002, "realm": 10.7780040733, "core": 4.623179965059999, "bootstrap": 529.2, "pypi": 1323.0, "scienc": 4.63939216832, "spark": 91.96208530806001, "larger": 2.2407904022599996, "which": 2.01038369, "export": 6.727118644069999, "node": 88.6927374302, "databrick": 2646.0, "numnod": 1323.0, "minsamplessplit": 2646.0, "other": 1.00992366412, "without": 1.29547123623, "algorithm": 111.8028169016, "one": 2.01254991444, "array": 10.1444089457, "take": 1.13961668222, "impact": 2.97526236882, "criterion": 63.631262525, "such": 3.18454132122, "accuraci": 12.7620578778, "imag": 5.40275650842, "explor": 16.9796791444, "get": 5.35687774155, "like": 1.14918566775, "implement": 7.15296237892, "fast": 4.8729281768, "some": 3.1211009174399997, "small": 4.0784380887, "except": 1.71948445792, "copi": 3.8375634517800004, "part": 1.04330682789, "document": 2.5409731114, "independ": 1.58950740889, "sparksklearn": 10584.0, "classic": 2.4087391898, "requir": 1.52844902282, "multithread": 690.260869565, "languag": 2.29488291414, "grid": 18.1232876712, "numpi": 1323.0, "this": 7.02655538697, "from": 9.00510493473, "result": 1.14611608432, "back": 1.26070038911, "chang": 3.5426956263, "work": 3.34560269739, "detail": 2.26186066391, "differ": 2.4730898045, "gridsearchcv": 7938.0, "been": 1.0239277652399998, "most": 3.06289389069, "between": 1.03453668708, "for": 8.00252032008, "maxfeatur": 2646.0, "all": 1.01146788991, "releas": 1.8377126982299998, "fulli": 2.79015817223, "simplifi": 12.109839816900001, "with": 4.004792835959999, "program": 2.02139037433, "there": 1.04091266719, "are": 4.11962374312, "reimplement": 1323.0, "true": 5.11139729556, "case": 4.45496211768, "produc": 1.36932896326, "day": 1.18371607516, "life": 1.37051104972, "popular": 3.01538461538, "spread": 2.8344938403900004, "cluster": 75.0047244096, "more": 3.0515120451, "and": 16.00100787408, "tim": 8.217391304349999, "these": 1.07415426252, "benefit": 3.06841901817, "combin": 5.09281437126, "yourself": 26.592964824099997, "forest": 9.79093432008, "workflow": 738.418604652, "singlemachin": 1323.0, "master": 3.15125049623, "befor": 1.10036041031, "librari": 13.41331530925, "none": 8.13111395646, "crossvalid": 6615.0, "can": 5.8813069571, "even": 1.16461267606, "avail": 1.7288467821, "comput": 7.855517070760001, "set": 3.56123822343, "way": 1.2190739461, "search": 6.507890961259999, "onli": 1.0256476516600002, "each": 2.37949640288, "their": 2.0309581681, "train": 3.8731397901999998, "often": 1.29452054795, "sklearn": 6615.0, "repetit": 20.4324324324, "packag": 15.656804733720001, "europ": 4.0345616264199995, "common": 1.4025974025999999, "same": 1.11857958148, "data": 33.7643555934, "randomforestclassifi": 5292.0, "qualiti": 2.9329392204, "fals": 12.43226311668, "method": 2.5714285714300003, "perfect": 4.48601299802, "scientist": 14.082791247780001, "notebook": 40.1924050633, "come": 1.32831325301, "exampl": 6.01933649288, "that": 5.01992031875, "identifi": 2.30187037843, "import": 9.381394563590002, "joseph": 3.06072874494, "highest": 2.50212765957, "nestim": 2646.0, "when": 1.02076769755, "joblib": 1323.0, "use": 9.266748816419998, "workload": 74.5352112676, "dramat": 7.969879518080001, "larg": 2.3714989917, "find": 3.4588235294199996, "learn": 4.6455010973, "local": 1.51720183486, "user": 23.13161728995}, "logtfidf": {"label": 1.49898832727, "hour": 0.815190981077, "bradley": 2.9391619220700003, "start": 0.472886738582, "though": 0.308044191079, "fit": 2.4302412537799998, "here": 0.8850381883700001, "minut": 1.1353719359799999, "report": 0.31001750903700004, "num": 0.010079692652704001, "minsamplesleaf": 14.37531432822, "addit": 0.440437765944, "paramet": 17.089140863159997, "panda": 9.433473512599999, "datafram": 14.37531432822, "number": 0.2898257352558, "recogn": 0.935913859031, "parallel": 1.52151886822, "the": 0.0, "dataset": 36.86091196648, "about": 0.0628434774746, "class": 1.4995443798660002, "scikitlearn": 86.25188596932, "summit": 5.00796783328, "python": 24.18394045776, "tri": 1.23518305832, "standard": 0.63741050982, "classifi": 3.3330592702999997, "know": 0.952919694398, "random": 3.9454428130199997, "under": 0.07526180538319999, "check": 1.87281049562, "out": 0.2337055636772, "but": 0.0161923720719, "scale": 1.32095306328, "automat": 3.8301700946399997, "spend": 1.42534376116, "across": 1.098396911882, "ensembl": 5.6364186233, "instead": 0.46663315041500003, "tool": 3.21774235926, "few": 0.275577913653, "multipl": 1.01092401812, "viceversa": 7.18765716411, "run": 1.770859902156, "how": 0.47156695693000006, "singl": 1.903667076236, "present": 0.455093309598, "than": 0.0322608622182, "hundr": 0.904145087046, "distribut": 6.04687834878, "due": 0.21341214386399998, "found": 0.107841124048, "digit": 13.367380893750001, "maxdepth": 14.37531432822, "will": 0.202786534915, "entropi": 9.35070308028, "gini": 11.15643850336, "taken": 0.470759772949, "consid": 0.214894723824, "compat": 2.72174904546, "second": 0.10713976337999999, "provid": 0.7807113773000001, "select": 1.409609374266, "below": 0.813626591936, "framework": 2.10418454607, "loaddigit": 14.37531432822, "hunter": 2.14369455726, "need": 0.362740163442, "target": 2.3381278992400003, "classif": 2.08779073629, "exist": 0.38165779408699996, "tune": 11.717350388299998, "effortless": 4.918973622799999, "integr": 1.03865482279, "best": 0.918455865894, "origin": 0.128612437587, "has": 0.1281718345644, "illustr": 1.2978562707799999, "convert": 1.1860360368, "adjust": 1.9619104904, "would": 0.0796176279647, "follow": 0.09071382218839999, "default": 3.0511581621399997, "robust": 2.9929646280599997, "code": 6.78009547985, "model": 3.687250365555, "high": 0.13782378654000002, "excit": 2.28423595433, "regress": 3.9359915164199997, "publish": 0.313975865467, "strength": 2.7862406523799996, "substitut": 2.07516749369, "sparkbas": 7.18765716411, "cpus": 5.16170430739, "typic": 1.625548638316, "mani": 0.0866315162442, "bestperform": 7.18765716411, "involv": 0.371469078658, "task": 5.42994722644, "compon": 1.40974687623, "onelin": 7.18765716411, "gridsearch": 35.93828582055, "scenario": 5.46855865978, "paramgrid": 43.12594298466, "altern": 0.760359972282, "kilobyt": 6.117215752409999, "easi": 1.6665296351499999, "machin": 5.56943832248, "swap": 3.39968680736, "realm": 2.37750739744, "core": 1.53108277245, "bootstrap": 11.15643850336, "pypi": 7.18765716411, "scienc": 1.682872357782, "spark": 23.358292133990002, "larger": 0.806828661778, "which": 0.01035682769086, "export": 1.90614691588, "node": 7.584061655, "databrick": 14.37531432822, "numnod": 7.18765716411, "minsamplessplit": 14.37531432822, "other": 0.00987474791976, "without": 0.258874517941, "algorithm": 13.32176958072, "one": 0.012510703291, "array": 2.31692271093, "take": 0.130691962197, "impact": 1.09033222631, "criterion": 6.9199154363, "such": 0.179087933418, "accuraci": 2.5464765406, "imag": 1.98752421458, "explor": 6.1128968609, "get": 1.739307017346, "like": 0.139053576545, "implement": 2.54875881814, "fast": 1.5836950247400001, "some": 0.11872052719350001, "small": 0.9213054151769999, "except": 0.54202451213, "copi": 1.34483764744, "part": 0.04239531098280001, "document": 0.932547122383, "independ": 0.463424162503, "sparksklearn": 57.50125731288, "classic": 0.8791034528499999, "requir": 0.424253510675, "multithread": 6.5370695979699995, "languag": 0.8306818244059999, "grid": 2.89719772297, "numpi": 7.18765716411, "this": 0.026505143367499998, "from": 0.005103487519794, "result": 0.136378908381, "back": 0.23166743089699998, "chang": 0.49882687517400004, "work": 0.327103701819, "detail": 0.816187777173, "differ": 0.424642242624, "gridsearchcv": 43.12594298466, "been": 0.023645982368400004, "most": 0.06224368888679999, "between": 0.033953681165299995, "for": 0.0025199231631760004, "maxfeatur": 14.37531432822, "all": 0.011402632097799998, "releas": 0.608521699544, "fulli": 1.02609828678, "simplifi": 2.4940183301400003, "with": 0.00478996685356, "program": 0.7037855787649999, "there": 0.0400978929255, "are": 0.1178698943308, "reimplement": 7.18765716411, "true": 1.876651259268, "case": 1.186218806667, "produc": 0.314320812003, "day": 0.16865870631700003, "life": 0.315183699277, "popular": 0.8211604175499999, "spread": 1.04186338169, "cluster": 15.1547498067, "more": 0.05107479479999999, "and": 0.0010078422730176, "tim": 2.10625279913, "these": 0.0715336194008, "benefit": 1.12116245116, "combin": 1.587654932253, "yourself": 3.28064670051, "forest": 3.1766194152, "workflow": 11.82272739642, "singlemachin": 7.18765716411, "master": 1.14779935699, "befor": 0.0956377718795, "librari": 4.934049904715, "none": 2.80510150326, "crossvalid": 35.93828582055, "can": 0.8117054819699999, "even": 0.152388564834, "avail": 0.547454586289, "comput": 2.73613783188, "set": 0.5144880338669999, "way": 0.19809150993500002, "search": 2.3597365081799997, "onli": 0.025324268329099998, "each": 0.347483378608, "their": 0.030721010245400002, "train": 1.321836625678, "often": 0.258140393351, "sklearn": 35.93828582055, "repetit": 3.0171234635400004, "packag": 4.115516898380001, "europ": 1.4035009449840001, "common": 0.338325805271, "same": 0.112059649604, "data": 12.168205848, "randomforestclassifi": 28.75062865644, "qualiti": 1.07600506711, "fals": 3.6542955546199996, "method": 0.944461608841, "perfect": 1.50096433356, "scientist": 4.6390238533199994, "notebook": 3.693678049, "come": 0.28390990653000003, "exampl": 1.6347306999959998, "that": 0.019880741898199997, "identifi": 0.833722000472, "import": 2.049727939462, "joseph": 1.11865303955, "highest": 0.917141433754, "nestim": 14.37531432822, "when": 0.0205549888584, "joblib": 7.18765716411, "use": 0.2628721775844, "workload": 4.31127164819, "dramat": 2.7650443904000004, "larg": 0.34075012121200005, "find": 1.095562660576, "learn": 1.68550412949, "local": 0.416867740206, "user": 6.127764320639999}, "logidf": {"label": 1.49898832727, "hour": 0.815190981077, "bradley": 2.9391619220700003, "start": 0.236443369291, "though": 0.308044191079, "fit": 1.2151206268899999, "here": 0.8850381883700001, "minut": 1.1353719359799999, "report": 0.31001750903700004, "num": 0.00031499039539700004, "minsamplesleaf": 7.18765716411, "addit": 0.220218882972, "paramet": 2.8481901438599997, "panda": 4.7167367562999996, "datafram": 7.18765716411, "number": 0.0966085784186, "recogn": 0.935913859031, "parallel": 1.52151886822, "the": 0.0, "dataset": 5.26584456664, "about": 0.0628434774746, "class": 0.7497721899330001, "scikitlearn": 7.18765716411, "summit": 2.50398391664, "python": 4.03065674296, "tri": 0.61759152916, "standard": 0.63741050982, "classifi": 1.6665296351499999, "know": 0.952919694398, "random": 1.9727214065099998, "under": 0.07526180538319999, "check": 1.87281049562, "out": 0.0584263909193, "but": 0.0161923720719, "scale": 1.32095306328, "automat": 1.9150850473199998, "spend": 1.42534376116, "across": 0.549198455941, "ensembl": 2.81820931165, "instead": 0.46663315041500003, "tool": 1.60887117963, "few": 0.275577913653, "multipl": 1.01092401812, "viceversa": 7.18765716411, "run": 0.442714975539, "how": 0.47156695693000006, "singl": 0.475916769059, "present": 0.227546654799, "than": 0.0322608622182, "hundr": 0.904145087046, "distribut": 1.00781305813, "due": 0.21341214386399998, "found": 0.107841124048, "digit": 1.48526454375, "maxdepth": 7.18765716411, "will": 0.202786534915, "entropi": 4.67535154014, "gini": 5.57821925168, "taken": 0.470759772949, "consid": 0.214894723824, "compat": 2.72174904546, "second": 0.10713976337999999, "provid": 0.19517784432500002, "select": 0.704804687133, "below": 0.813626591936, "framework": 2.10418454607, "loaddigit": 7.18765716411, "hunter": 2.14369455726, "need": 0.362740163442, "target": 1.1690639496200002, "classif": 2.08779073629, "exist": 0.38165779408699996, "tune": 2.3434700776599997, "effortless": 4.918973622799999, "integr": 1.03865482279, "best": 0.459227932947, "origin": 0.128612437587, "has": 0.0427239448548, "illustr": 1.2978562707799999, "convert": 1.1860360368, "adjust": 1.9619104904, "would": 0.0796176279647, "follow": 0.045356911094199995, "default": 3.0511581621399997, "robust": 2.9929646280599997, "code": 1.35601909597, "model": 0.7374500731110001, "high": 0.13782378654000002, "excit": 2.28423595433, "regress": 3.9359915164199997, "publish": 0.313975865467, "strength": 1.3931203261899998, "substitut": 2.07516749369, "sparkbas": 7.18765716411, "cpus": 5.16170430739, "typic": 0.812774319158, "mani": 0.0433157581221, "bestperform": 7.18765716411, "involv": 0.371469078658, "task": 1.35748680661, "compon": 1.40974687623, "onelin": 7.18765716411, "gridsearch": 7.18765716411, "scenario": 2.73427932989, "paramgrid": 7.18765716411, "altern": 0.760359972282, "kilobyt": 6.117215752409999, "easi": 1.6665296351499999, "machin": 1.39235958062, "swap": 3.39968680736, "realm": 2.37750739744, "core": 1.53108277245, "bootstrap": 5.57821925168, "pypi": 7.18765716411, "scienc": 0.841436178891, "spark": 2.12348110309, "larger": 0.806828661778, "which": 0.00517841384543, "export": 1.90614691588, "node": 3.7920308275, "databrick": 7.18765716411, "numnod": 7.18765716411, "minsamplessplit": 7.18765716411, "other": 0.00987474791976, "without": 0.258874517941, "algorithm": 3.33044239518, "one": 0.0062553516455, "array": 2.31692271093, "take": 0.130691962197, "impact": 1.09033222631, "criterion": 3.45995771815, "such": 0.059695977806, "accuraci": 2.5464765406, "imag": 0.99376210729, "explor": 1.22257937218, "get": 0.579769005782, "like": 0.139053576545, "implement": 1.27437940907, "fast": 1.5836950247400001, "some": 0.0395735090645, "small": 0.307101805059, "except": 0.54202451213, "copi": 1.34483764744, "part": 0.04239531098280001, "document": 0.932547122383, "independ": 0.463424162503, "sparksklearn": 7.18765716411, "classic": 0.8791034528499999, "requir": 0.424253510675, "multithread": 6.5370695979699995, "languag": 0.8306818244059999, "grid": 2.89719772297, "numpi": 7.18765716411, "this": 0.0037864490525, "from": 0.000567054168866, "result": 0.136378908381, "back": 0.23166743089699998, "chang": 0.166275625058, "work": 0.109034567273, "detail": 0.816187777173, "differ": 0.212321121312, "gridsearchcv": 7.18765716411, "been": 0.023645982368400004, "most": 0.020747896295599998, "between": 0.033953681165299995, "for": 0.00031499039539700004, "maxfeatur": 7.18765716411, "all": 0.011402632097799998, "releas": 0.608521699544, "fulli": 1.02609828678, "simplifi": 2.4940183301400003, "with": 0.00119749171339, "program": 0.7037855787649999, "there": 0.0400978929255, "are": 0.0294674735827, "reimplement": 7.18765716411, "true": 0.938325629634, "case": 0.395406268889, "produc": 0.314320812003, "day": 0.16865870631700003, "life": 0.315183699277, "popular": 0.41058020877499996, "spread": 1.04186338169, "cluster": 2.52579163445, "more": 0.017024931599999998, "and": 6.29901420636e-05, "tim": 2.10625279913, "these": 0.0715336194008, "benefit": 1.12116245116, "combin": 0.529218310751, "yourself": 3.28064670051, "forest": 1.5883097076, "workflow": 5.91136369821, "singlemachin": 7.18765716411, "master": 1.14779935699, "befor": 0.0956377718795, "librari": 0.986809980943, "none": 1.40255075163, "crossvalid": 7.18765716411, "can": 0.162341096394, "even": 0.152388564834, "avail": 0.547454586289, "comput": 1.36806891594, "set": 0.171496011289, "way": 0.19809150993500002, "search": 1.1798682540899998, "onli": 0.025324268329099998, "each": 0.173741689304, "their": 0.015360505122700001, "train": 0.660918312839, "often": 0.258140393351, "sklearn": 7.18765716411, "repetit": 3.0171234635400004, "packag": 2.0577584491900005, "europ": 0.7017504724920001, "common": 0.338325805271, "same": 0.112059649604, "data": 1.2168205848, "randomforestclassifi": 7.18765716411, "qualiti": 1.07600506711, "fals": 1.8271477773099998, "method": 0.944461608841, "perfect": 1.50096433356, "scientist": 1.54634128444, "notebook": 3.693678049, "come": 0.28390990653000003, "exampl": 0.40868267499899996, "that": 0.00397614837964, "identifi": 0.833722000472, "import": 0.292818277066, "joseph": 1.11865303955, "highest": 0.917141433754, "nestim": 7.18765716411, "when": 0.0205549888584, "joblib": 7.18765716411, "use": 0.0292080197316, "workload": 4.31127164819, "dramat": 1.3825221952000002, "larg": 0.17037506060600002, "find": 0.547781330288, "learn": 0.842752064745, "local": 0.416867740206, "user": 2.04258810688}, "freq": {"label": 1, "hour": 1, "bradley": 1, "start": 2, "though": 1, "fit": 2, "here": 1, "minut": 1, "report": 1, "num": 32, "minsamplesleaf": 2, "addit": 2, "paramet": 6, "panda": 2, "datafram": 2, "number": 3, "recogn": 1, "parallel": 1, "the": 32, "dataset": 7, "about": 1, "class": 2, "scikitlearn": 12, "summit": 2, "python": 6, "tri": 2, "standard": 1, "classifi": 2, "know": 1, "random": 2, "under": 1, "check": 1, "out": 4, "but": 1, "scale": 1, "automat": 2, "spend": 1, "across": 2, "ensembl": 2, "instead": 1, "tool": 2, "few": 1, "multipl": 1, "viceversa": 1, "run": 4, "how": 1, "singl": 4, "present": 2, "than": 1, "hundr": 1, "distribut": 6, "due": 1, "found": 1, "digit": 9, "maxdepth": 2, "will": 1, "entropi": 2, "gini": 2, "taken": 1, "consid": 1, "compat": 1, "second": 1, "provid": 4, "select": 2, "below": 1, "framework": 1, "loaddigit": 2, "hunter": 1, "need": 1, "target": 2, "classif": 1, "exist": 1, "tune": 5, "effortless": 1, "integr": 1, "best": 2, "origin": 1, "has": 3, "illustr": 1, "convert": 1, "adjust": 1, "would": 1, "follow": 2, "default": 1, "robust": 1, "code": 5, "model": 5, "high": 1, "excit": 1, "regress": 1, "publish": 1, "strength": 2, "substitut": 1, "sparkbas": 1, "cpus": 1, "typic": 2, "mani": 2, "bestperform": 1, "involv": 1, "task": 4, "compon": 1, "onelin": 1, "gridsearch": 5, "scenario": 2, "paramgrid": 6, "altern": 1, "kilobyt": 1, "easi": 1, "machin": 4, "swap": 1, "realm": 1, "core": 1, "bootstrap": 2, "pypi": 1, "scienc": 2, "spark": 11, "larger": 1, "which": 2, "export": 1, "node": 2, "databrick": 2, "numnod": 1, "minsamplessplit": 2, "other": 1, "without": 1, "algorithm": 4, "one": 2, "array": 1, "take": 1, "impact": 1, "criterion": 2, "such": 3, "accuraci": 1, "imag": 2, "explor": 5, "get": 3, "like": 1, "implement": 2, "fast": 1, "some": 3, "small": 3, "except": 1, "copi": 1, "part": 1, "document": 1, "independ": 1, "sparksklearn": 8, "classic": 1, "requir": 1, "multithread": 1, "languag": 1, "grid": 1, "numpi": 1, "this": 7, "from": 9, "result": 1, "back": 1, "chang": 3, "work": 3, "detail": 1, "differ": 2, "gridsearchcv": 6, "been": 1, "most": 3, "between": 1, "for": 8, "maxfeatur": 2, "all": 1, "releas": 1, "fulli": 1, "simplifi": 1, "with": 4, "program": 1, "there": 1, "are": 4, "reimplement": 1, "true": 2, "case": 3, "produc": 1, "day": 1, "life": 1, "popular": 2, "spread": 1, "cluster": 6, "more": 3, "and": 16, "tim": 1, "these": 1, "benefit": 1, "combin": 3, "yourself": 1, "forest": 2, "workflow": 2, "singlemachin": 1, "master": 1, "befor": 1, "librari": 5, "none": 2, "crossvalid": 5, "can": 5, "even": 1, "avail": 1, "comput": 2, "set": 3, "way": 1, "search": 2, "onli": 1, "each": 2, "their": 2, "train": 2, "often": 1, "sklearn": 5, "repetit": 1, "packag": 2, "europ": 2, "common": 1, "same": 1, "data": 10, "randomforestclassifi": 4, "qualiti": 1, "fals": 2, "method": 1, "perfect": 1, "scientist": 3, "notebook": 1, "come": 1, "exampl": 4, "that": 5, "identifi": 1, "import": 7, "joseph": 1, "highest": 1, "nestim": 2, "when": 1, "joblib": 1, "use": 9, "workload": 1, "dramat": 2, "larg": 2, "find": 2, "learn": 2, "local": 1, "user": 3}, "idf": {"label": 4.47715736041, "hour": 2.25960717336, "bradley": 18.9, "start": 1.26673581744, "though": 1.36076112111, "fit": 3.37070063694, "here": 2.42307692308, "minut": 3.11233091551, "report": 1.3634489866, "num": 1.00031504001, "minsamplesleaf": 1323.0, "addit": 1.24634950542, "paramet": 17.256521739100002, "panda": 111.802816901, "datafram": 1323.0, "number": 1.10142916609, "recogn": 2.54954231572, "parallel": 4.57917507932, "the": 1.0, "dataset": 193.609756098, "about": 1.06486015159, "class": 2.11651779763, "scikitlearn": 1323.0, "summit": 12.2311248074, "python": 56.2978723404, "tri": 1.8544562551099997, "standard": 1.8915763135900003, "classifi": 5.2937645882, "know": 2.59327017315, "random": 7.1902173913, "under": 1.0781663837, "check": 6.50655737705, "out": 1.06016694491, "but": 1.01632417899, "scale": 3.7469907953699995, "automat": 6.787516032490001, "spend": 4.15928739848, "across": 1.7318642958400001, "ensembl": 16.746835443, "instead": 1.59461631177, "tool": 4.99716713881, "few": 1.31729173581, "multipl": 2.74813917258, "viceversa": 1323.0, "run": 1.55692850838, "how": 1.60250328051, "singl": 1.60948905109, "present": 1.25551601423, "than": 1.03278688525, "hundr": 2.4698195395099996, "distribut": 2.7396031061299997, "due": 1.23789473684, "found": 1.11387076405, "digit": 4.416133518780001, "maxdepth": 1323.0, "will": 1.22481098596, "entropi": 107.27027027, "gini": 264.6, "taken": 1.6012102874399998, "consid": 1.2397313759200002, "compat": 15.2068965517, "second": 1.1130898128, "provid": 1.21552714187, "select": 2.02345144022, "below": 2.25607503197, "framework": 8.200413223139998, "loaddigit": 1323.0, "hunter": 8.53089736701, "need": 1.4372623574099999, "target": 3.2189781021900004, "classif": 8.067073170730001, "exist": 1.4647107666799999, "tune": 10.4173228346, "effortless": 136.862068966, "integr": 2.8254137746900003, "best": 1.5828514456600002, "origin": 1.13724928367, "has": 1.0436497502, "illustr": 3.6614391143900002, "convert": 3.2740771293099997, "adjust": 7.112903225810001, "would": 1.0828729281799998, "follow": 1.04640126549, "default": 21.1398135819, "robust": 19.9447236181, "code": 3.8807137619199996, "model": 2.0905978404, "high": 1.14777327935, "excit": 9.818181818180001, "regress": 51.2129032258, "publish": 1.36885669943, "strength": 4.02739726027, "substitut": 7.96588058204, "sparkbas": 1323.0, "cpus": 174.46153846200002, "typic": 2.2541530597799997, "mani": 1.04426757877, "bestperform": 1323.0, "involv": 1.4498630137000001, "task": 3.88641370869, "compon": 4.09491875161, "onelin": 1323.0, "gridsearch": 1323.0, "scenario": 15.3986420951, "paramgrid": 1323.0, "altern": 2.1390460792200003, "kilobyt": 453.6, "easi": 5.2937645882, "machin": 4.02433460076, "swap": 29.954716981100002, "realm": 10.7780040733, "core": 4.623179965059999, "bootstrap": 264.6, "pypi": 1323.0, "scienc": 2.31969608416, "spark": 8.360189573460001, "larger": 2.2407904022599996, "which": 1.005191845, "export": 6.727118644069999, "node": 44.3463687151, "databrick": 1323.0, "numnod": 1323.0, "minsamplessplit": 1323.0, "other": 1.00992366412, "without": 1.29547123623, "algorithm": 27.9507042254, "one": 1.00627495722, "array": 10.1444089457, "take": 1.13961668222, "impact": 2.97526236882, "criterion": 31.8156312625, "such": 1.06151377374, "accuraci": 12.7620578778, "imag": 2.70137825421, "explor": 3.39593582888, "get": 1.78562591385, "like": 1.14918566775, "implement": 3.57648118946, "fast": 4.8729281768, "some": 1.04036697248, "small": 1.3594793629, "except": 1.71948445792, "copi": 3.8375634517800004, "part": 1.04330682789, "document": 2.5409731114, "independ": 1.58950740889, "sparksklearn": 1323.0, "classic": 2.4087391898, "requir": 1.52844902282, "multithread": 690.260869565, "languag": 2.29488291414, "grid": 18.1232876712, "numpi": 1323.0, "this": 1.00379362671, "from": 1.00056721497, "result": 1.14611608432, "back": 1.26070038911, "chang": 1.1808985421, "work": 1.11520089913, "detail": 2.26186066391, "differ": 1.23654490225, "gridsearchcv": 1323.0, "been": 1.0239277652399998, "most": 1.02096463023, "between": 1.03453668708, "for": 1.00031504001, "maxfeatur": 1323.0, "all": 1.01146788991, "releas": 1.8377126982299998, "fulli": 2.79015817223, "simplifi": 12.109839816900001, "with": 1.0011982089899998, "program": 2.02139037433, "there": 1.04091266719, "are": 1.02990593578, "reimplement": 1323.0, "true": 2.55569864778, "case": 1.48498737256, "produc": 1.36932896326, "day": 1.18371607516, "life": 1.37051104972, "popular": 1.50769230769, "spread": 2.8344938403900004, "cluster": 12.5007874016, "more": 1.0171706817, "and": 1.00006299213, "tim": 8.217391304349999, "these": 1.07415426252, "benefit": 3.06841901817, "combin": 1.69760479042, "yourself": 26.592964824099997, "forest": 4.89546716004, "workflow": 369.209302326, "singlemachin": 1323.0, "master": 3.15125049623, "befor": 1.10036041031, "librari": 2.68266306185, "none": 4.06555697823, "crossvalid": 1323.0, "can": 1.17626139142, "even": 1.16461267606, "avail": 1.7288467821, "comput": 3.9277585353800006, "set": 1.18707940781, "way": 1.2190739461, "search": 3.2539454806299997, "onli": 1.0256476516600002, "each": 1.18974820144, "their": 1.01547908405, "train": 1.9365698950999999, "often": 1.29452054795, "sklearn": 1323.0, "repetit": 20.4324324324, "packag": 7.828402366860001, "europ": 2.0172808132099997, "common": 1.4025974025999999, "same": 1.11857958148, "data": 3.37643555934, "randomforestclassifi": 1323.0, "qualiti": 2.9329392204, "fals": 6.21613155834, "method": 2.5714285714300003, "perfect": 4.48601299802, "scientist": 4.69426374926, "notebook": 40.1924050633, "come": 1.32831325301, "exampl": 1.50483412322, "that": 1.00398406375, "identifi": 2.30187037843, "import": 1.3401992233700002, "joseph": 3.06072874494, "highest": 2.50212765957, "nestim": 1323.0, "when": 1.02076769755, "joblib": 1323.0, "use": 1.0296387573799999, "workload": 74.5352112676, "dramat": 3.9849397590400004, "larg": 1.18574949585, "find": 1.7294117647099998, "learn": 2.32275054865, "local": 1.51720183486, "user": 7.71053909665}}, "html": "<!DOCTYPE html>\n\n<html lang=\"en-US\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head profile=\"http://gmpg.org/xfn/11\">\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n<title>  Auto-Scaling scikit-learn with Spark</title>\n<link href=\"/wp-content/themes/kdn17/images/favicon.ico\" rel=\"shortcut icon\"/>\n<link href=\"/wp-content/themes/kdn17/style.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"/wp-content/themes/kdn17/js/jquery-1.9.1.min.js\" type=\"text/javascript\"></script>\n<script src=\"/aps/kda_all.js\" type=\"text/javascript\"></script>\n<link href=\"/feed/\" rel=\"alternate\" title=\"KDnuggets: Analytics, Big Data, Data Mining and Data Science Feed\" type=\"application/rss+xml\"/>\n<link href=\"//s.w.org\" rel=\"dns-prefetch\"/>\n<link href=\"https://www.kdnuggets.com/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/comments/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/2016/02/auto-scaling-scikit-learn-spark.html/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Auto-Scaling scikit-learn with Spark Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-json/\" rel=\"https://api.w.org/\"/>\n<link href=\"https://www.kdnuggets.com/xmlrpc.php?rsd\" rel=\"EditURI\" title=\"RSD\" type=\"application/rsd+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-includes/wlwmanifest.xml\" rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\"/>\n<link href=\"https://www.kdnuggets.com/2016/02/ieg-data-driven-strategies-2016.html\" rel=\"prev\" title=\"Big Data Innovation Summit, San Francisco, Apr 21-22, 2016 \u2013 Early bird, KDnuggets discount\"/>\n<link href=\"https://www.kdnuggets.com/2016/02/21-data-science-interview-questions-answers.html\" rel=\"next\" title=\"21 Must-Know Data Science Interview Questions and Answers\"/>\n<meta content=\"WordPress 4.9.10\" name=\"generator\">\n<link href=\"https://www.kdnuggets.com/2016/02/auto-scaling-scikit-learn-spark.html\" rel=\"canonical\"/>\n<link href=\"https://www.kdnuggets.com/?p=44814\" rel=\"shortlink\"/>\n<link href=\"https://www.kdnuggets.com/2016/02/auto-scaling-scikit-learn-spark.html\" rel=\"canonical\"/>\n<!-- BEGIN ExactMetrics v5.3.7 Universal Analytics - https://exactmetrics.com/ -->\n<script>\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-361129-1', 'auto');\n  ga('send', 'pageview');\n</script>\n<!-- END ExactMetrics Universal Analytics -->\n</meta></head>\n<body class=\"post-template-default single single-post postid-44814 single-format-standard\">\n<div class=\"main_wrapper\"><!-- publ: 11-Feb, 2016  -->\n<div id=\"wrapper\">\n<div id=\"header\">\n<div id=\"header_log\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<h1>KDnuggets</h1>\n<div class=\"text-container\">\n            \u00a0\u00a0<a href=\"/news/subscribe.html\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a> \u00a0|\n <a href=\"https://twitter.com/kdnuggets\" target=\"_blank\"><img alt=\"Twitter\" height=\"48\" src=\"/images/tw_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n <a href=\"https://www.facebook.com/kdnuggets\" target=\"_blank\"><img alt=\"Facebook\" height=\"48\" src=\"/images/fb_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n<a href=\"https://www.linkedin.com/groups/54257/\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"48\" src=\"/images/in_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \n\u00a0|\u00a0 <a href=\"/contact.html\"><b>Contact</b></a>\n</div>\n</div>\n<div class=\"search\">\n<form action=\"/\" id=\"searchform\" method=\"get\">\n<input id=\"s\" name=\"s\" placeholder=\"search KDnuggets\" type=\"text\" value=\"\"/>\n<input type=\"submit\" value=\"Search\"/></form>\n</div>\n<div href=\"#\" id=\"pull\">\n<img class=\"menu\" src=\"/images/menu-30.png\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<img class=\"search-icon\" src=\"/images/search-icon.png\">\n</img></img></div>\n<div id=\"pull-menu\">\n<div class=\"navigation\"><ul class=\"menu\" id=\"menu-menu\"><li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-1070\" id=\"menu-item-1070\"><a href=\"/software/index.html\" title=\"Data Science Software\">SOFTWARE</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13756\" id=\"menu-item-13756\"><a href=\"/news/index.html\" title=\"News\">News/Blog</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-46286\" id=\"menu-item-46286\"><a href=\"/news/top-stories.html\">Top stories</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-42152\" id=\"menu-item-42152\"><a href=\"https://www.kdnuggets.com/opinions/index.html\" title=\"Opinions\">Opinions</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-46415\" id=\"menu-item-46415\"><a href=\"https://www.kdnuggets.com/tutorials/index.html\">Tutorials</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13364\" id=\"menu-item-13364\"><a href=\"/jobs/index.html\" title=\"Jobs in Analytics, Data Science\">JOBS</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-63505\" id=\"menu-item-63505\"><a href=\"https://www.kdnuggets.com/companies/index.html\">Companies</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13366\" id=\"menu-item-13366\"><a href=\"/courses/index.html\">Courses</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-1499\" id=\"menu-item-1499\"><a href=\"https://www.kdnuggets.com/datasets/index.html\">Datasets</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-14286\" id=\"menu-item-14286\"><a href=\"https://www.kdnuggets.com/education/index.html\" title=\"Education in Analytics, Big Data, Data Science\">EDUCATION</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-51558\" id=\"menu-item-51558\"><a href=\"https://www.kdnuggets.com/education/analytics-data-mining-certificates.html\" title=\"Certificates in Analytics, Big Data, Data Science\">Certificates</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-14752\" id=\"menu-item-14752\"><a href=\"/meetings/index.html\">Meetings</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13721\" id=\"menu-item-13721\"><a href=\"/webcasts/index.html\" title=\"Webcasts and Webinars\">Webinars</a></li>\n</ul></div></div>\n</div> <!--#header end-->\n<div id=\"spacer\">\n         \u00a0\n      </div>\n<div id=\"content_wrapper\">\n<div id=\"ad_wrapper\">\n<script type=\"text/javascript\">\n\tjQuery(function() {\n   \t    var pull        = $('#pull');\n            menu        = $('#header .navigation ul');\n            menuImage = $('#header img.menu');\n            mobileMenu        = $('#pull-menu-mobile');\n            search = $('img.search-icon');\n            searchBar = $('div.search');\n            searchClick = false;\n            search.on('click', function() {\n                  searchBar.slideToggle();\n                  searchClick = true;\n            });  \n     \t    $(menuImage).on('click', function(e) {\n\t        //e.preventDefault();\n                if (!searchClick) {\n                  menu.slideToggle();\n                }\n                searchClick = false;\n\t    });\n           /* pullMobile.on('click', function(e) {\n              e.preventDefault();\n                if (!searchClick) {\n                  mobileMenu.slideToggle();\n                }\n                searchClick = false;\n\t    });*/\n            \n\t});\n\tkpath = '/'; kda_top(); kda_sid_init(); kda_sid_n=3;\n\t</script>\n</div> <div class=\"breadcumb\">\n<br/>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2016/index.html\">2016</a> \u00bb <a href=\"https://www.kdnuggets.com/2016/02/index.html\">Feb</a> \u00bb <a href=\"https://www.kdnuggets.com/2016/02/software.html\">Software</a> \u00bb Auto-Scaling scikit-learn with Spark (\u00a0<a href=\"/2016/n06.html\">16:n06</a>\u00a0)    </div>\n<div class=\"single\" id=\"content\">\n<div id=\"post-header\">\n<h1 id=\"title\">Auto-Scaling scikit-learn with Spark</h1>\n<div class=\"pagi\">\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2016/02/ieg-data-driven-strategies-2016.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"> <strong>Previous post</strong></img></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2016/02/21-data-science-interview-questions-answers.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/>\u00a0<br/>\u00a0\n    <div class=\"addthis_native_toolbox\"></div>\n</div>\n<div class=\"tag-data\">Tags: <a href=\"https://www.kdnuggets.com/tag/apache-spark\" rel=\"tag\">Apache Spark</a>, <a href=\"https://www.kdnuggets.com/tag/databricks\" rel=\"tag\">Databricks</a>, <a href=\"https://www.kdnuggets.com/tag/open-source\" rel=\"tag\">Open Source</a>, <a href=\"https://www.kdnuggets.com/tag/scikit-learn\" rel=\"tag\">scikit-learn</a></div>\n<br/>\n<p class=\"excerpt\">\n     Databricks gives us an overview of the spark-sklearn library, which automatically and seamlessly distributes model tuning on a Spark cluster, without impacting workflow.\n  </p>\n</div>\n<div id=\"post-header-ad\">\n<script type=\"text/javascript\">kda_sid_write(1); kda_sid_n=2;</script>\n</div>\n<hr class=\"grey-line\"/><br/>\n<div class=\"post\" id=\"post-\">\n<p><b>By Tim Hunter and Joseph Bradley</b>, Databricks. </p>\n<p>Data scientists often spend hours or days tuning models to get the highest accuracy. This tuning typically involves running a large number of independent Machine Learning (ML) tasks coded in Python or R. Following some work presented at Spark Summit Europe 2015, we are excited to release a library that dramatically simplifies the life of data scientists using Python. This library, published as <a href=\"http://spark-packages.org/package/databricks/spark-sklearn\">spark-sklearn</a>, automatically distributes the most repetitive tasks of model tuning on a Spark cluster, without impacting the workflow of data scientists:</p>\n<ul class=\"three_ul\">\n<li>When used on a single machine, Spark can be used as a substitute to the default multithreading framework used by <a href=\"http://scikit-learn.org/\">scikit-learn</a> (<a href=\"https://pythonhosted.org/joblib/\">Joblib</a>).</li>\n<li>If a need comes to spread the work across multiple machines, no change is required in the code between the single-machine case and the cluster case.</li>\n</ul>\n<p><b>Scale data science effortlessly</b></p>\n<p>Python is one of the most popular programming languages for data exploration and data science, and this is in no small part due to high quality libraries such as <a href=\"http://pandas.pydata.org/\">Pandas</a> for data exploration or <a href=\"http://scikit-learn.org/\">scikit-learn</a> for machine learning. Scikit-learn provides fast and robust implementations of standard ML algorithms such as clustering, classification, and regression.</p>\n<p>Scikit-learn\u2019s strength has typically been in the realm of computing on a single node, though. For some common scenarios, such as parameter tuning, a large number of small tasks can be run in parallel. These scenarios are perfect use cases for Spark.</p>\n<p>We explored how to integrate Spark with scikit-learn, and the result is the <a href=\"https://github.com/databricks/spark-sklearn\">spark-sklearn</a> Python package. Spark-sklearn combines the strengths of Spark and scikit-learn with no changes to users\u2019 code. It re-implements some components of scikit-learn that benefit the most from distributed computing. Users will find a Spark-based cross-validator class that is fully compatible with scikit-learn\u2019s cross-validation tools. By swapping out a single class import, users can distribute cross-validation for their existing scikit-learn workflows.</p>\n<p><b>Distribute tuning of Random Forests</b></p>\n<p>Consider a classical example of identifying digits in images. Here are a few examples of images taken from the popular digits dataset, with their labels:</p>\n<p><br class=\"blank\"><br>\n<center><br>\n<img alt=\"Digits dataset with labels example\" src=\"/wp-content/uploads/image-taken-from-the-popular-digits-dataset.png\" width=\"75%\"/><br>\n</br></br></center><br/>\n<br class=\"blank\"/></br></br></p>\n<p>We are going to train a <a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">random forest classifier</a> to recognize the digits. This classifier has a number of parameters to adjust, and there is no easy way to know which parameters work best, other than trying out many different combinations. Scikit-learn provides GridSearchCV, a search algorithm that explores many parameter settings automatically. <a href=\"http://scikit-learn.org/stable/modules/grid_search.html\">GridSearchCV</a> uses selection by cross-validation, illustrated below. Each parameter setting produces one model, and the best-performing model is selected.</p>\n<p><br class=\"blank\"/><br/>\n<img alt=\"Cross validation example\" src=\"/wp-content/uploads/scikit-learn-without-spark-training-diagram.jpg\" width=\"99%\"/><br/>\n<br class=\"blank\"/></p>\n<p>The <a href=\"http://scikit-learn.org/stable/auto_examples/classification/plot_digits_classification.html#example-classification-plot-digits-classification-py\">original code</a>, using only scikit-learn, is as follows:</p>\n<p><br class=\"blank\"/></p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"color:#000000;background:#ffffff;\"><span style=\"color:#800000; font-weight:bold; \">from</span> sklearn <span style=\"color:#800000; font-weight:bold; \">import</span> grid_search<span style=\"color:#808030; \">,</span> datasets\r\n<span style=\"color:#800000; font-weight:bold; \">from</span> sklearn<span style=\"color:#808030; \">.</span>ensemble <span style=\"color:#800000; font-weight:bold; \">import</span> RandomForestClassifier\r\n<span style=\"color:#800000; font-weight:bold; \">from</span> sklearn<span style=\"color:#808030; \">.</span>grid_search <span style=\"color:#800000; font-weight:bold; \">import</span> GridSearchCV\r\ndigits <span style=\"color:#808030; \">=</span> datasets<span style=\"color:#808030; \">.</span>load_digits<span style=\"color:#808030; \">(</span><span style=\"color:#808030; \">)</span>\r\nX<span style=\"color:#808030; \">,</span> y <span style=\"color:#808030; \">=</span> digits<span style=\"color:#808030; \">.</span>data<span style=\"color:#808030; \">,</span> digits<span style=\"color:#808030; \">.</span>target\r\nparam_grid <span style=\"color:#808030; \">=</span> <span style=\"color:#800080; \">{</span><span style=\"color:#0000e6; \">\"max_depth\"</span><span style=\"color:#808030; \">:</span> <span style=\"color:#808030; \">[</span><span style=\"color:#008c00; \">3</span><span style=\"color:#808030; \">,</span> <span style=\"color:#074726; \">None</span><span style=\"color:#808030; \">]</span><span style=\"color:#808030; \">,</span>\r\n              <span style=\"color:#0000e6; \">\"max_features\"</span><span style=\"color:#808030; \">:</span> <span style=\"color:#808030; \">[</span><span style=\"color:#008c00; \">1</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">3</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">10</span><span style=\"color:#808030; \">]</span><span style=\"color:#808030; \">,</span>\r\n              <span style=\"color:#0000e6; \">\"min_samples_split\"</span><span style=\"color:#808030; \">:</span> <span style=\"color:#808030; \">[</span><span style=\"color:#008c00; \">1</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">3</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">10</span><span style=\"color:#808030; \">]</span><span style=\"color:#808030; \">,</span>\r\n              <span style=\"color:#0000e6; \">\"min_samples_leaf\"</span><span style=\"color:#808030; \">:</span> <span style=\"color:#808030; \">[</span><span style=\"color:#008c00; \">1</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">3</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">10</span><span style=\"color:#808030; \">]</span><span style=\"color:#808030; \">,</span>\r\n              <span style=\"color:#0000e6; \">\"bootstrap\"</span><span style=\"color:#808030; \">:</span> <span style=\"color:#808030; \">[</span><span style=\"color:#074726; \">True</span><span style=\"color:#808030; \">,</span> <span style=\"color:#074726; \">False</span><span style=\"color:#808030; \">]</span><span style=\"color:#808030; \">,</span>\r\n              <span style=\"color:#0000e6; \">\"criterion\"</span><span style=\"color:#808030; \">:</span> <span style=\"color:#808030; \">[</span><span style=\"color:#0000e6; \">\"gini\"</span><span style=\"color:#808030; \">,</span> <span style=\"color:#0000e6; \">\"entropy\"</span><span style=\"color:#808030; \">]</span><span style=\"color:#808030; \">,</span>\r\n              <span style=\"color:#0000e6; \">\"n_estimators\"</span><span style=\"color:#808030; \">:</span> <span style=\"color:#808030; \">[</span><span style=\"color:#008c00; \">10</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">20</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">40</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">80</span><span style=\"color:#808030; \">]</span><span style=\"color:#800080; \">}</span>\r\ngs <span style=\"color:#808030; \">=</span> grid_search<span style=\"color:#808030; \">.</span>GridSearchCV<span style=\"color:#808030; \">(</span>RandomForestClassifier<span style=\"color:#808030; \">(</span><span style=\"color:#808030; \">)</span><span style=\"color:#808030; \">,</span> param_grid<span style=\"color:#808030; \">=</span>param_grid<span style=\"color:#808030; \">)</span>\r\ngs<span style=\"color:#808030; \">.</span>fit<span style=\"color:#808030; \">(</span>X<span style=\"color:#808030; \">,</span> y<span style=\"color:#808030; \">)</span>\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>The dataset is small (in the hundreds of kilobytes), but exploring all the combinations takes about 5 minutes on a single core. Spark-sklearn provides an alternative implementation of the cross-validation algorithm that distributes the workload on a Spark cluster. Each node runs the training algorithm using a local copy of the scikit-learn library, and reports the best model back to the master:</p>\n<p><br class=\"blank\"/><br/>\n<img alt=\"Distributed cross validation example\" src=\"/wp-content/uploads/scikit-learn-with-spark-training-diagram.jpg\" width=\"99%\"/><br/>\n<br class=\"blank\"/></p>\n<p>The code is the same as before, except for a one-line change:</p>\n<p><br class=\"blank\"/></p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"color:#000000;background:#ffffff;\"><span style=\"color:#800000; font-weight:bold; \">from</span> sklearn <span style=\"color:#800000; font-weight:bold; \">import</span> grid_search<span style=\"color:#808030; \">,</span> datasets\r\n<span style=\"color:#800000; font-weight:bold; \">from</span> sklearn<span style=\"color:#808030; \">.</span>ensemble <span style=\"color:#800000; font-weight:bold; \">import</span> RandomForestClassifier\r\n<span style=\"color:#696969; \"># Use spark_sklearn\u2019s grid search instead:</span>\r\n<span style=\"color:#800000; font-weight:bold; \">from</span> spark_sklearn <span style=\"color:#800000; font-weight:bold; \">import</span> GridSearchCV\r\ndigits <span style=\"color:#808030; \">=</span> datasets<span style=\"color:#808030; \">.</span>load_digits<span style=\"color:#808030; \">(</span><span style=\"color:#808030; \">)</span>\r\nX<span style=\"color:#808030; \">,</span> y <span style=\"color:#808030; \">=</span> digits<span style=\"color:#808030; \">.</span>data<span style=\"color:#808030; \">,</span> digits<span style=\"color:#808030; \">.</span>target\r\nparam_grid <span style=\"color:#808030; \">=</span> <span style=\"color:#800080; \">{</span><span style=\"color:#0000e6; \">\"max_depth\"</span><span style=\"color:#808030; \">:</span> <span style=\"color:#808030; \">[</span><span style=\"color:#008c00; \">3</span><span style=\"color:#808030; \">,</span> <span style=\"color:#074726; \">None</span><span style=\"color:#808030; \">]</span><span style=\"color:#808030; \">,</span>\r\n              <span style=\"color:#0000e6; \">\"max_features\"</span><span style=\"color:#808030; \">:</span> <span style=\"color:#808030; \">[</span><span style=\"color:#008c00; \">1</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">3</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">10</span><span style=\"color:#808030; \">]</span><span style=\"color:#808030; \">,</span>\r\n              <span style=\"color:#0000e6; \">\"min_samples_split\"</span><span style=\"color:#808030; \">:</span> <span style=\"color:#808030; \">[</span><span style=\"color:#008c00; \">1</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">3</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">10</span><span style=\"color:#808030; \">]</span><span style=\"color:#808030; \">,</span>\r\n              <span style=\"color:#0000e6; \">\"min_samples_leaf\"</span><span style=\"color:#808030; \">:</span> <span style=\"color:#808030; \">[</span><span style=\"color:#008c00; \">1</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">3</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">10</span><span style=\"color:#808030; \">]</span><span style=\"color:#808030; \">,</span>\r\n              <span style=\"color:#0000e6; \">\"bootstrap\"</span><span style=\"color:#808030; \">:</span> <span style=\"color:#808030; \">[</span><span style=\"color:#074726; \">True</span><span style=\"color:#808030; \">,</span> <span style=\"color:#074726; \">False</span><span style=\"color:#808030; \">]</span><span style=\"color:#808030; \">,</span>\r\n              <span style=\"color:#0000e6; \">\"criterion\"</span><span style=\"color:#808030; \">:</span> <span style=\"color:#808030; \">[</span><span style=\"color:#0000e6; \">\"gini\"</span><span style=\"color:#808030; \">,</span> <span style=\"color:#0000e6; \">\"entropy\"</span><span style=\"color:#808030; \">]</span><span style=\"color:#808030; \">,</span>\r\n              <span style=\"color:#0000e6; \">\"n_estimators\"</span><span style=\"color:#808030; \">:</span> <span style=\"color:#808030; \">[</span><span style=\"color:#008c00; \">10</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">20</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">40</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">80</span><span style=\"color:#808030; \">]</span><span style=\"color:#800080; \">}</span>\r\ngs <span style=\"color:#808030; \">=</span> grid_search<span style=\"color:#808030; \">.</span>GridSearchCV<span style=\"color:#808030; \">(</span>RandomForestClassifier<span style=\"color:#808030; \">(</span><span style=\"color:#808030; \">)</span><span style=\"color:#808030; \">,</span> param_grid<span style=\"color:#808030; \">=</span>param_grid<span style=\"color:#808030; \">)</span>\r\ngs<span style=\"color:#808030; \">.</span>fit<span style=\"color:#808030; \">(</span>X<span style=\"color:#808030; \">,</span> y<span style=\"color:#808030; \">)</span>\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>This example runs under 30 seconds on a 4-node cluster (which has 16 CPUs). For larger datasets and more parameter settings, the difference is even more dramatic.</p>\n<p><br class=\"blank\"/><br/>\n<img alt=\"Scikit-learn results\" src=\"/wp-content/uploads/scikit-learn-results.png\" width=\"99%\"/><br/>\n<br class=\"blank\"/></p>\n<p><b>Get started</b></p>\n<p>If you would like to try out spark-sklearn yourself, it is available as a <a href=\"http://spark-packages.org/package/databricks/spark-sklearn\">Spark package</a> and as a <a href=\"https://pypi.python.org/pypi/spark-sklearn\">Pypi library</a>. To get started, <a href=\"http://go.databricks.com/hubfs/notebooks/Samples/Miscellaneous/blog_post_cv.html\">check out this example notebook on Databricks</a>.</p>\n<p>In addition to distributing ML tasks in Python across a cluster, spark-sklearn provides additional tools to export data from Spark to python and vice-versa. You can find methods to convert Spark DataFrames to Pandas dataframes and numpy arrays. More details can be found in this <a href=\"http://www.slideshare.net/databricks/spark-summit-europe-2015-combining-the-strengths-of-mllib-scikitlearn-and-r\">Spark Summit Europe presentation</a> and in the API documentation</p></div></div></div></div></div></body></html>.\n<p>We welcome feedback and contributions to our open-source <a href=\"https://github.com/databricks/spark-sklearn\">implementation on Github</a> (Apache 2.0 license).</p>\n<p><b>About: <a href=\"https://databricks.com/\">Databricks</a></b> was founded by the team at UC Berkeley AMPLab that created and continues to drive Apache Spark. Their vision is to make big data simple for data scientists, engineers, developers, and business users alike. </p>\n<p><a href=\"https://databricks.com/blog/2016/02/08/auto-scaling-scikit-learn-with-spark.html\">Original</a>. Reposted with permission.</p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2016/01/deep-learning-spark-tensorflow.html\">Deep Learning with Spark and TensorFlow</a></li>\n<li><a href=\"/2015/12/spark-deep-learning-training-with-sparknet.html\">Spark + Deep Learning: Distributed Deep Neural Network Training with SparkNet</a></li>\n<li><a href=\"/2016/01/spark-2015-year-in-review.html\">Spark 2015 Year In Review</a></li>\n</ul>\n\n<div class=\"page-link\"></div>\n<div class=\"pagi\">\n<hr class=\"grey-line\"/>\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2016/02/ieg-data-driven-strategies-2016.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"/> <strong>Previous post</strong></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2016/02/21-data-science-interview-questions-answers.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/><br/>\n<div>\n<hr class=\"grey-line\"/><br/>\n<h2>Top Stories Past 30 Days</h2>\n<table align=\"center\" cellpadding=\"3\" cellspacing=\"10\" class=\"latn\" width=\"100%\">\n<tr>\n<td valign=\"top\" width=\"50%\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Popular</b></th></tr>\n<tr><td>\n<ol class=\"three_ol\"><li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-1-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-2-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n<li> <a href=\"/2018/05/simplilearn-9-must-have-skills-data-scientist.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-3-simplilearn');\"><b>9 Must-have skills you need to become a Data Scientist, updated</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-4-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/03/another-10-free-must-read-books-for-machine-learning-and-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-5-another-10-books');\"><b>Another 10 Free Must-Read Books for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-6-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/best-data-visualization-techniques.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-7-best-data-viz');\"><b>Best Data Visualization Techniques for small and large data</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td> <td valign=\"top\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Shared</b></th></tr>\n<tr><td><ol class=\"three_ol\">\n<li> <a href=\"/2019/04/another-10-free-must-see-courses-machine-learning-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-1-another-10-courses');\"><b>Another 10 Free Must-See Courses for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-2-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/03/r-vs-python-data-visualization.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-3-r-py-viz');\"><b>R vs Python for Data Visualization</b></a>\n<li> <a href=\"/2019/03/deep-learning-toolset-overview.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-4-dl-toolset');\"><b>The Deep Learning Toolset \u2014 An Overview</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-5-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-6-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-7-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<!--#content end-->\n<div id=\"sidebar\">\n<div class=\"latn\">\n<h3><b><a href=\"/news/index.html\">Latest News</a></b></h3>\n<ul style=\"font-size:14px; margin-top:5px\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/datarobot-delivering-trusted-ai-microsoft.html\">Delivering Trusted AI with DataRobot and Microsoft</a><li> <a href=\"https://www.kdnuggets.com/2019/04/formulated-ai-data-production-landscape.html\">AI and the data production landscape</a><li> <a href=\"https://www.kdnuggets.com/2019/04/most-desired-skill-data-science.html\">The most desired skill in data science</a><li> <a href=\"https://www.kdnuggets.com/2019/04/projects-include-data-science-portfolio.html\">Projects to Include in a Data Science Portfolio</a><li> <a href=\"https://www.kdnuggets.com/2019/04/rework-meet-worlds-leading-ai-deep-learning-experts.html\">Meet the World\u2019s Leading AI &amp; Deep Learning ...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/problem-data-science-job-postings.html\">The problem with data science job postings</a></li></li></li></li></li></li></ul>\n</div>\n<div>\n<script type=\"text/javascript\">kda_sid_write(kda_sid_n);</script>\n</div>\n<br/><script src=\"/aps/sbm.js\" type=\"text/javascript\"></script>\n</div>\n<div class=\"breadcrumbs_bottom\">\n<div class=\"breadcumb\">\n<br>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2016/index.html\">2016</a> \u00bb <a href=\"https://www.kdnuggets.com/2016/02/index.html\">Feb</a> \u00bb <a href=\"https://www.kdnuggets.com/2016/02/software.html\">Software</a> \u00bb Auto-Scaling scikit-learn with Spark (\u00a0<a href=\"/2016/n06.html\">16:n06</a>\u00a0)    </br></div>\n</div>\n<!--#content_wrapper end-->\n<br>\n<div id=\"footer\">\n<br/>\u00a9 2019 KDnuggets. <a href=\"/about/index.html\">About KDnuggets</a>. \u00a0<a href=\"/news/privacy-policy.html\">Privacy policy</a>. <a href=\"/terms-of-service.html\">Terms of Service</a><br/>\u00a0\n<div class=\"kd_bottom\">\n<div class=\"footer-container\">\n<div class=\"footer-news\">\n<a href=\"/news/subscribe.html\" onclick=\"_gaq.push(['_trackPageview','/x/bot/sub']);\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a>\n</div>\n<div class=\"footer-sm\">\n<a href=\"https://twitter.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/twt']);\" target=\"_blank\"><img height=\"32\" src=\"/images/tw_c48.png\" width=\"32\"/></a>\n<a href=\"https://facebook.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/fb']);\" target=\"_blank\"><img alt=\"Facebook\" height=\"32\" src=\"/images/fb_c48.png\" width=\"32\"/></a>\n<a href=\"https://www.linkedin.com/groups/54257\" onclick=\"_gaq.push(['_trackPageview','/x/bot/in']);\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"32\" src=\"/images/in_c48.png\" width=\"32\"/></a>\n</div>\n</div>\n<div class=\"close-footer\">X</div>\n</div>\n<script type=\"text/javascript\">\n  jQuery('.close-footer').click(\n      function(){       \n         jQuery('.kd_bottom').hide();\n      }\n   );\n</script> </div>\n<div class=\"clear\"><!--blank--></div>\n</br>\n<div style=\"display: none;\"><div id=\"boxzilla-box-82996-content\"><script type=\"text/javascript\">(function() {\n\tif (!window.mc4wp) {\n\t\twindow.mc4wp = {\n\t\t\tlisteners: [],\n\t\t\tforms    : {\n\t\t\t\ton: function (event, callback) {\n\t\t\t\t\twindow.mc4wp.listeners.push({\n\t\t\t\t\t\tevent   : event,\n\t\t\t\t\t\tcallback: callback\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})();\n</script><!-- MailChimp for WordPress v4.1.14 - https://wordpress.org/plugins/mailchimp-for-wp/ --><form class=\"mc4wp-form mc4wp-form-77281\" data-id=\"77281\" data-name=\"Subscribe to KDnuggets News\" id=\"mc4wp-form-1\" method=\"post\"><div class=\"mc4wp-form-fields\"><div class=\"header-container\">\n<img align=\"left\" src=\"/wp-content/uploads/envelope.png\"><a href=\"/news/subscribe.html\">Get KDnuggets, a leading newsletter on AI, \r\n  Data Science, and Machine Learning</a>\n</img></div>\n<div class=\"form-fields\">\n<div class=\"field-container\"><label>Email:</label><input maxlength=\"60\" name=\"EMAIL\" placeholder=\"Your email\" required=\"\" size=\"30\" type=\"email\"/></div>\n<div class=\"field-container submit-container\"><div class=\"form-button\" onclick=\"document.getElementById('mc4wp-form-1').submit()\">Sign Up</div></div>\n</div>\n<label style=\"display: none !important;\">Leave this field empty if you're human: <input autocomplete=\"off\" name=\"_mc4wp_honeypot\" tabindex=\"-1\" type=\"text\" value=\"\"/></label><input name=\"_mc4wp_timestamp\" type=\"hidden\" value=\"1556365391\"/><input name=\"_mc4wp_form_id\" type=\"hidden\" value=\"77281\"/><input name=\"_mc4wp_form_element_id\" type=\"hidden\" value=\"mc4wp-form-1\"/></div><div class=\"mc4wp-response\"></div></form><!-- / MailChimp for WordPress Plugin -->\n</div></div><script type=\"text/javascript\">(function() {function addEventListener(element,event,handler) {\n\tif(element.addEventListener) {\n\t\telement.addEventListener(event,handler, false);\n\t} else if(element.attachEvent){\n\t\telement.attachEvent('on'+event,handler);\n\t}\n}function maybePrefixUrlField() {\n\tif(this.value.trim() !== '' && this.value.indexOf('http') !== 0) {\n\t\tthis.value = \"http://\" + this.value;\n\t}\n}\n\nvar urlFields = document.querySelectorAll('.mc4wp-form input[type=\"url\"]');\nif( urlFields && urlFields.length > 0 ) {\n\tfor( var j=0; j < urlFields.length; j++ ) {\n\t\taddEventListener(urlFields[j],'blur',maybePrefixUrlField);\n\t}\n}/* test if browser supports date fields */\nvar testInput = document.createElement('input');\ntestInput.setAttribute('type', 'date');\nif( testInput.type !== 'date') {\n\n\t/* add placeholder & pattern to all date fields */\n\tvar dateFields = document.querySelectorAll('.mc4wp-form input[type=\"date\"]');\n\tfor(var i=0; i<dateFields.length; i++) {\n\t\tif(!dateFields[i].placeholder) {\n\t\t\tdateFields[i].placeholder = 'YYYY-MM-DD';\n\t\t}\n\t\tif(!dateFields[i].pattern) {\n\t\t\tdateFields[i].pattern = '[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])';\n\t\t}\n\t}\n}\n\n})();</script><script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_options = {\"testMode\":\"\",\"boxes\":[{\"id\":82996,\"icon\":\"&times;\",\"content\":\"\",\"css\":{\"background_color\":\"#eeee22\",\"width\":600,\"border_width\":2,\"border_style\":\"double\",\"position\":\"center\"},\"trigger\":{\"method\":\"time_on_page\",\"value\":\"3\"},\"animation\":\"fade\",\"cookie\":{\"triggered\":0,\"dismissed\":336},\"rehide\":true,\"position\":\"center\",\"screenWidthCondition\":{\"condition\":\"larger\",\"value\":500},\"closable\":true,\"post\":{\"id\":82996,\"title\":\"Subscribe to KDnuggets\",\"slug\":\"subscribe-to-kdnuggets\"}}]};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla/assets/js/script.min.js?ver=3.2.5\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_stats_config = {\"ajaxurl\":\"https:\\/\\/www.kdnuggets.com\\/wp-admin\\/admin-ajax.php?action=boxzilla_stats_track\"};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla-stats/assets/js/tracking.min.js?ver=1.0.4\" type=\"text/javascript\"></script>\n<script src=\"https://www.kdnuggets.com/wp-includes/js/wp-embed.min.js?ver=4.9.10\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar mc4wp_forms_config = [];\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/forms-api.min.js?ver=4.1.14\" type=\"text/javascript\"></script>\n<!--[if lte IE 9]>\n<script type='text/javascript' src='https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/third-party/placeholders.min.js?ver=4.1.14'></script>\n<![endif]-->\n<!--/.main_wrapper-->\n<script src=\"https://s7.addthis.com/js/300/addthis_widget.js#pubid=gpsaddthis\" type=\"text/javascript\"></script>\n\n\n<!-- Dynamic page generated in 0.605 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2019-04-27 07:43:11 -->\n<!-- Compression = gzip -->", "content_tokenized": ["tim", "hunter", "and", "joseph", "bradley", "databrick", "data", "scientist", "often", "spend", "hour", "day", "tune", "model", "get", "the", "highest", "accuraci", "this", "tune", "typic", "involv", "run", "larg", "number", "independ", "machin", "learn", "task", "code", "python", "follow", "some", "work", "present", "spark", "summit", "europ", "num", "are", "excit", "releas", "librari", "that", "dramat", "simplifi", "the", "life", "data", "scientist", "use", "python", "this", "librari", "publish", "sparksklearn", "automat", "distribut", "the", "most", "repetit", "task", "model", "tune", "spark", "cluster", "without", "impact", "the", "workflow", "data", "scientist", "when", "use", "singl", "machin", "spark", "can", "use", "substitut", "the", "default", "multithread", "framework", "use", "scikitlearn", "joblib", "need", "come", "spread", "the", "work", "across", "multipl", "machin", "chang", "requir", "the", "code", "between", "the", "singlemachin", "case", "and", "the", "cluster", "case", "scale", "data", "scienc", "effortless", "python", "one", "the", "most", "popular", "program", "languag", "for", "data", "explor", "and", "data", "scienc", "and", "this", "small", "part", "due", "high", "qualiti", "librari", "such", "panda", "for", "data", "explor", "scikitlearn", "for", "machin", "learn", "scikitlearn", "provid", "fast", "and", "robust", "implement", "standard", "algorithm", "such", "cluster", "classif", "and", "regress", "scikitlearn", "strength", "has", "typic", "been", "the", "realm", "comput", "singl", "node", "though", "for", "some", "common", "scenario", "such", "paramet", "tune", "larg", "number", "small", "task", "can", "run", "parallel", "these", "scenario", "are", "perfect", "use", "case", "for", "spark", "explor", "how", "integr", "spark", "with", "scikitlearn", "and", "the", "result", "the", "sparksklearn", "python", "packag", "sparksklearn", "combin", "the", "strength", "spark", "and", "scikitlearn", "with", "chang", "user", "code", "reimplement", "some", "compon", "scikitlearn", "that", "benefit", "the", "most", "from", "distribut", "comput", "user", "will", "find", "sparkbas", "crossvalid", "class", "that", "fulli", "compat", "with", "scikitlearn", "crossvalid", "tool", "swap", "out", "singl", "class", "import", "user", "can", "distribut", "crossvalid", "for", "their", "exist", "scikitlearn", "workflow", "distribut", "tune", "random", "forest", "consid", "classic", "exampl", "identifi", "digit", "imag", "here", "are", "few", "exampl", "imag", "taken", "from", "the", "popular", "digit", "dataset", "with", "their", "label", "are", "train", "random", "forest", "classifi", "recogn", "the", "digit", "this", "classifi", "has", "number", "paramet", "adjust", "and", "there", "easi", "way", "know", "which", "paramet", "work", "best", "other", "than", "tri", "out", "mani", "differ", "combin", "scikitlearn", "provid", "gridsearchcv", "search", "algorithm", "that", "explor", "mani", "paramet", "set", "automat", "gridsearchcv", "use", "select", "crossvalid", "illustr", "below", "each", "paramet", "set", "produc", "one", "model", "and", "the", "bestperform", "model", "select", "the", "origin", "code", "use", "onli", "scikitlearn", "follow", "from", "sklearn", "import", "gridsearch", "dataset", "from", "sklearn", "ensembl", "import", "randomforestclassifi", "from", "sklearn", "gridsearch", "import", "gridsearchcv", "digit", "dataset", "loaddigit", "digit", "data", "digit", "target", "paramgrid", "maxdepth", "num", "none", "maxfeatur", "num", "num", "num", "minsamplessplit", "num", "num", "num", "minsamplesleaf", "num", "num", "num", "bootstrap", "true", "fals", "criterion", "gini", "entropi", "nestim", "num", "num", "num", "num", "gridsearch", "gridsearchcv", "randomforestclassifi", "paramgrid", "paramgrid", "fit", "the", "dataset", "small", "the", "hundr", "kilobyt", "but", "explor", "all", "the", "combin", "take", "about", "num", "minut", "singl", "core", "sparksklearn", "provid", "altern", "implement", "the", "crossvalid", "algorithm", "that", "distribut", "the", "workload", "spark", "cluster", "each", "node", "run", "the", "train", "algorithm", "use", "local", "copi", "the", "scikitlearn", "librari", "and", "report", "the", "best", "model", "back", "the", "master", "the", "code", "the", "same", "befor", "except", "for", "onelin", "chang", "from", "sklearn", "import", "gridsearch", "dataset", "from", "sklearn", "ensembl", "import", "randomforestclassifi", "use", "sparksklearn", "grid", "search", "instead", "from", "sparksklearn", "import", "gridsearchcv", "digit", "dataset", "loaddigit", "digit", "data", "digit", "target", "paramgrid", "maxdepth", "num", "none", "maxfeatur", "num", "num", "num", "minsamplessplit", "num", "num", "num", "minsamplesleaf", "num", "num", "num", "bootstrap", "true", "fals", "criterion", "gini", "entropi", "nestim", "num", "num", "num", "num", "gridsearch", "gridsearchcv", "randomforestclassifi", "paramgrid", "paramgrid", "fit", "this", "exampl", "run", "under", "num", "second", "numnod", "cluster", "which", "has", "num", "cpus", "for", "larger", "dataset", "and", "more", "paramet", "set", "the", "differ", "even", "more", "dramat", "get", "start", "would", "like", "tri", "out", "sparksklearn", "yourself", "avail", "spark", "packag", "and", "pypi", "librari", "get", "start", "check", "out", "this", "exampl", "notebook", "databrick", "addit", "distribut", "task", "python", "across", "cluster", "sparksklearn", "provid", "addit", "tool", "export", "data", "from", "spark", "python", "and", "viceversa", "can", "find", "method", "convert", "spark", "datafram", "panda", "datafram", "and", "numpi", "array", "more", "detail", "can", "found", "this", "spark", "summit", "europ", "present", "and", "the", "document"], "timestamp_scraper": 1556365391.968489, "title": "Auto-Scaling scikit-learn with Spark", "read_time": 269.4, "content_html": "<div class=\"post\" id=\"post-\">\n<p><b>By Tim Hunter and Joseph Bradley</b>, Databricks. </p>\n<p>Data scientists often spend hours or days tuning models to get the highest accuracy. This tuning typically involves running a large number of independent Machine Learning (ML) tasks coded in Python or R. Following some work presented at Spark Summit Europe 2015, we are excited to release a library that dramatically simplifies the life of data scientists using Python. This library, published as <a href=\"http://spark-packages.org/package/databricks/spark-sklearn\">spark-sklearn</a>, automatically distributes the most repetitive tasks of model tuning on a Spark cluster, without impacting the workflow of data scientists:</p>\n<ul class=\"three_ul\">\n<li>When used on a single machine, Spark can be used as a substitute to the default multithreading framework used by <a href=\"http://scikit-learn.org/\">scikit-learn</a> (<a href=\"https://pythonhosted.org/joblib/\">Joblib</a>).</li>\n<li>If a need comes to spread the work across multiple machines, no change is required in the code between the single-machine case and the cluster case.</li>\n</ul>\n<p><b>Scale data science effortlessly</b></p>\n<p>Python is one of the most popular programming languages for data exploration and data science, and this is in no small part due to high quality libraries such as <a href=\"http://pandas.pydata.org/\">Pandas</a> for data exploration or <a href=\"http://scikit-learn.org/\">scikit-learn</a> for machine learning. Scikit-learn provides fast and robust implementations of standard ML algorithms such as clustering, classification, and regression.</p>\n<p>Scikit-learn\u2019s strength has typically been in the realm of computing on a single node, though. For some common scenarios, such as parameter tuning, a large number of small tasks can be run in parallel. These scenarios are perfect use cases for Spark.</p>\n<p>We explored how to integrate Spark with scikit-learn, and the result is the <a href=\"https://github.com/databricks/spark-sklearn\">spark-sklearn</a> Python package. Spark-sklearn combines the strengths of Spark and scikit-learn with no changes to users\u2019 code. It re-implements some components of scikit-learn that benefit the most from distributed computing. Users will find a Spark-based cross-validator class that is fully compatible with scikit-learn\u2019s cross-validation tools. By swapping out a single class import, users can distribute cross-validation for their existing scikit-learn workflows.</p>\n<p><b>Distribute tuning of Random Forests</b></p>\n<p>Consider a classical example of identifying digits in images. Here are a few examples of images taken from the popular digits dataset, with their labels:</p>\n<p><br class=\"blank\"><br>\n<center><br>\n<img alt=\"Digits dataset with labels example\" src=\"/wp-content/uploads/image-taken-from-the-popular-digits-dataset.png\" width=\"75%\"/><br>\n</br></br></center><br/>\n<br class=\"blank\"/></br></br></p>\n<p>We are going to train a <a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">random forest classifier</a> to recognize the digits. This classifier has a number of parameters to adjust, and there is no easy way to know which parameters work best, other than trying out many different combinations. Scikit-learn provides GridSearchCV, a search algorithm that explores many parameter settings automatically. <a href=\"http://scikit-learn.org/stable/modules/grid_search.html\">GridSearchCV</a> uses selection by cross-validation, illustrated below. Each parameter setting produces one model, and the best-performing model is selected.</p>\n<p><br class=\"blank\"/><br/>\n<img alt=\"Cross validation example\" src=\"/wp-content/uploads/scikit-learn-without-spark-training-diagram.jpg\" width=\"99%\"/><br/>\n<br class=\"blank\"/></p>\n<p>The <a href=\"http://scikit-learn.org/stable/auto_examples/classification/plot_digits_classification.html#example-classification-plot-digits-classification-py\">original code</a>, using only scikit-learn, is as follows:</p>\n<p><br class=\"blank\"/></p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"color:#000000;background:#ffffff;\"><span style=\"color:#800000; font-weight:bold; \">from</span> sklearn <span style=\"color:#800000; font-weight:bold; \">import</span> grid_search<span style=\"color:#808030; \">,</span> datasets\r\n<span style=\"color:#800000; font-weight:bold; \">from</span> sklearn<span style=\"color:#808030; \">.</span>ensemble <span style=\"color:#800000; font-weight:bold; \">import</span> RandomForestClassifier\r\n<span style=\"color:#800000; font-weight:bold; \">from</span> sklearn<span style=\"color:#808030; \">.</span>grid_search <span style=\"color:#800000; font-weight:bold; \">import</span> GridSearchCV\r\ndigits <span style=\"color:#808030; \">=</span> datasets<span style=\"color:#808030; \">.</span>load_digits<span style=\"color:#808030; \">(</span><span style=\"color:#808030; \">)</span>\r\nX<span style=\"color:#808030; \">,</span> y <span style=\"color:#808030; \">=</span> digits<span style=\"color:#808030; \">.</span>data<span style=\"color:#808030; \">,</span> digits<span style=\"color:#808030; \">.</span>target\r\nparam_grid <span style=\"color:#808030; \">=</span> <span style=\"color:#800080; \">{</span><span style=\"color:#0000e6; \">\"max_depth\"</span><span style=\"color:#808030; \">:</span> <span style=\"color:#808030; \">[</span><span style=\"color:#008c00; \">3</span><span style=\"color:#808030; \">,</span> <span style=\"color:#074726; \">None</span><span style=\"color:#808030; \">]</span><span style=\"color:#808030; \">,</span>\r\n              <span style=\"color:#0000e6; \">\"max_features\"</span><span style=\"color:#808030; \">:</span> <span style=\"color:#808030; \">[</span><span style=\"color:#008c00; \">1</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">3</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">10</span><span style=\"color:#808030; \">]</span><span style=\"color:#808030; \">,</span>\r\n              <span style=\"color:#0000e6; \">\"min_samples_split\"</span><span style=\"color:#808030; \">:</span> <span style=\"color:#808030; \">[</span><span style=\"color:#008c00; \">1</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">3</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">10</span><span style=\"color:#808030; \">]</span><span style=\"color:#808030; \">,</span>\r\n              <span style=\"color:#0000e6; \">\"min_samples_leaf\"</span><span style=\"color:#808030; \">:</span> <span style=\"color:#808030; \">[</span><span style=\"color:#008c00; \">1</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">3</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">10</span><span style=\"color:#808030; \">]</span><span style=\"color:#808030; \">,</span>\r\n              <span style=\"color:#0000e6; \">\"bootstrap\"</span><span style=\"color:#808030; \">:</span> <span style=\"color:#808030; \">[</span><span style=\"color:#074726; \">True</span><span style=\"color:#808030; \">,</span> <span style=\"color:#074726; \">False</span><span style=\"color:#808030; \">]</span><span style=\"color:#808030; \">,</span>\r\n              <span style=\"color:#0000e6; \">\"criterion\"</span><span style=\"color:#808030; \">:</span> <span style=\"color:#808030; \">[</span><span style=\"color:#0000e6; \">\"gini\"</span><span style=\"color:#808030; \">,</span> <span style=\"color:#0000e6; \">\"entropy\"</span><span style=\"color:#808030; \">]</span><span style=\"color:#808030; \">,</span>\r\n              <span style=\"color:#0000e6; \">\"n_estimators\"</span><span style=\"color:#808030; \">:</span> <span style=\"color:#808030; \">[</span><span style=\"color:#008c00; \">10</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">20</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">40</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">80</span><span style=\"color:#808030; \">]</span><span style=\"color:#800080; \">}</span>\r\ngs <span style=\"color:#808030; \">=</span> grid_search<span style=\"color:#808030; \">.</span>GridSearchCV<span style=\"color:#808030; \">(</span>RandomForestClassifier<span style=\"color:#808030; \">(</span><span style=\"color:#808030; \">)</span><span style=\"color:#808030; \">,</span> param_grid<span style=\"color:#808030; \">=</span>param_grid<span style=\"color:#808030; \">)</span>\r\ngs<span style=\"color:#808030; \">.</span>fit<span style=\"color:#808030; \">(</span>X<span style=\"color:#808030; \">,</span> y<span style=\"color:#808030; \">)</span>\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>The dataset is small (in the hundreds of kilobytes), but exploring all the combinations takes about 5 minutes on a single core. Spark-sklearn provides an alternative implementation of the cross-validation algorithm that distributes the workload on a Spark cluster. Each node runs the training algorithm using a local copy of the scikit-learn library, and reports the best model back to the master:</p>\n<p><br class=\"blank\"/><br/>\n<img alt=\"Distributed cross validation example\" src=\"/wp-content/uploads/scikit-learn-with-spark-training-diagram.jpg\" width=\"99%\"/><br/>\n<br class=\"blank\"/></p>\n<p>The code is the same as before, except for a one-line change:</p>\n<p><br class=\"blank\"/></p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre style=\"color:#000000;background:#ffffff;\"><span style=\"color:#800000; font-weight:bold; \">from</span> sklearn <span style=\"color:#800000; font-weight:bold; \">import</span> grid_search<span style=\"color:#808030; \">,</span> datasets\r\n<span style=\"color:#800000; font-weight:bold; \">from</span> sklearn<span style=\"color:#808030; \">.</span>ensemble <span style=\"color:#800000; font-weight:bold; \">import</span> RandomForestClassifier\r\n<span style=\"color:#696969; \"># Use spark_sklearn\u2019s grid search instead:</span>\r\n<span style=\"color:#800000; font-weight:bold; \">from</span> spark_sklearn <span style=\"color:#800000; font-weight:bold; \">import</span> GridSearchCV\r\ndigits <span style=\"color:#808030; \">=</span> datasets<span style=\"color:#808030; \">.</span>load_digits<span style=\"color:#808030; \">(</span><span style=\"color:#808030; \">)</span>\r\nX<span style=\"color:#808030; \">,</span> y <span style=\"color:#808030; \">=</span> digits<span style=\"color:#808030; \">.</span>data<span style=\"color:#808030; \">,</span> digits<span style=\"color:#808030; \">.</span>target\r\nparam_grid <span style=\"color:#808030; \">=</span> <span style=\"color:#800080; \">{</span><span style=\"color:#0000e6; \">\"max_depth\"</span><span style=\"color:#808030; \">:</span> <span style=\"color:#808030; \">[</span><span style=\"color:#008c00; \">3</span><span style=\"color:#808030; \">,</span> <span style=\"color:#074726; \">None</span><span style=\"color:#808030; \">]</span><span style=\"color:#808030; \">,</span>\r\n              <span style=\"color:#0000e6; \">\"max_features\"</span><span style=\"color:#808030; \">:</span> <span style=\"color:#808030; \">[</span><span style=\"color:#008c00; \">1</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">3</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">10</span><span style=\"color:#808030; \">]</span><span style=\"color:#808030; \">,</span>\r\n              <span style=\"color:#0000e6; \">\"min_samples_split\"</span><span style=\"color:#808030; \">:</span> <span style=\"color:#808030; \">[</span><span style=\"color:#008c00; \">1</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">3</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">10</span><span style=\"color:#808030; \">]</span><span style=\"color:#808030; \">,</span>\r\n              <span style=\"color:#0000e6; \">\"min_samples_leaf\"</span><span style=\"color:#808030; \">:</span> <span style=\"color:#808030; \">[</span><span style=\"color:#008c00; \">1</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">3</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">10</span><span style=\"color:#808030; \">]</span><span style=\"color:#808030; \">,</span>\r\n              <span style=\"color:#0000e6; \">\"bootstrap\"</span><span style=\"color:#808030; \">:</span> <span style=\"color:#808030; \">[</span><span style=\"color:#074726; \">True</span><span style=\"color:#808030; \">,</span> <span style=\"color:#074726; \">False</span><span style=\"color:#808030; \">]</span><span style=\"color:#808030; \">,</span>\r\n              <span style=\"color:#0000e6; \">\"criterion\"</span><span style=\"color:#808030; \">:</span> <span style=\"color:#808030; \">[</span><span style=\"color:#0000e6; \">\"gini\"</span><span style=\"color:#808030; \">,</span> <span style=\"color:#0000e6; \">\"entropy\"</span><span style=\"color:#808030; \">]</span><span style=\"color:#808030; \">,</span>\r\n              <span style=\"color:#0000e6; \">\"n_estimators\"</span><span style=\"color:#808030; \">:</span> <span style=\"color:#808030; \">[</span><span style=\"color:#008c00; \">10</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">20</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">40</span><span style=\"color:#808030; \">,</span> <span style=\"color:#008c00; \">80</span><span style=\"color:#808030; \">]</span><span style=\"color:#800080; \">}</span>\r\ngs <span style=\"color:#808030; \">=</span> grid_search<span style=\"color:#808030; \">.</span>GridSearchCV<span style=\"color:#808030; \">(</span>RandomForestClassifier<span style=\"color:#808030; \">(</span><span style=\"color:#808030; \">)</span><span style=\"color:#808030; \">,</span> param_grid<span style=\"color:#808030; \">=</span>param_grid<span style=\"color:#808030; \">)</span>\r\ngs<span style=\"color:#808030; \">.</span>fit<span style=\"color:#808030; \">(</span>X<span style=\"color:#808030; \">,</span> y<span style=\"color:#808030; \">)</span>\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>This example runs under 30 seconds on a 4-node cluster (which has 16 CPUs). For larger datasets and more parameter settings, the difference is even more dramatic.</p>\n<p><br class=\"blank\"/><br/>\n<img alt=\"Scikit-learn results\" src=\"/wp-content/uploads/scikit-learn-results.png\" width=\"99%\"/><br/>\n<br class=\"blank\"/></p>\n<p><b>Get started</b></p>\n<p>If you would like to try out spark-sklearn yourself, it is available as a <a href=\"http://spark-packages.org/package/databricks/spark-sklearn\">Spark package</a> and as a <a href=\"https://pypi.python.org/pypi/spark-sklearn\">Pypi library</a>. To get started, <a href=\"http://go.databricks.com/hubfs/notebooks/Samples/Miscellaneous/blog_post_cv.html\">check out this example notebook on Databricks</a>.</p>\n<p>In addition to distributing ML tasks in Python across a cluster, spark-sklearn provides additional tools to export data from Spark to python and vice-versa. You can find methods to convert Spark DataFrames to Pandas dataframes and numpy arrays. More details can be found in this <a href=\"http://www.slideshare.net/databricks/spark-summit-europe-2015-combining-the-strengths-of-mllib-scikitlearn-and-r\">Spark Summit Europe presentation</a> and in the API documentation</p></div> ", "website": "kdnuggets"}