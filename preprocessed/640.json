{"content": "By Matthew Mayo , KDnuggets. comments There is always something new to learn on any fast-evolving topic, and machine learning is no exception. This post will point out 5 things to know about machine learning, 5 things which you may not know, may not have been aware of, or may have once known and now forgotten. Note that the title of this post is not \"The 5 Most Important Things...\" or \"Top 5 Things...\" to know about machine learning; it's just \"5 Things.\" It's not authoritative or exhaustive, but rather a collection of 5 things that may be of use. \u00a0 1. Data preparation is 80% of machine learning, so... \u00a0 It's fairly well-discussed that data preparation takes a disproportionate amount of time in a machine learning task. Or, at least, a seemingly disproportionate amount of time. What is commonly lacking in these discussions, beyond the specifics of performing data preparation and the reasons for its importance, is why you should care about performing data preparation . And I don't mean just to have conforming data, but more like a philosophical diatribe as to why you should embrace the data preparation. Live the data preparation. Be one with the data preparation. Data preparation in the CRISP-DM model . Some of the best machine learning advice that I can think of is that since you are ultimately destined to spend so much of your time on preparing data for The Big Show, being determined to be the very best data preparation professional around is a pretty good goal. Since it's not only time-consuming but of great importance to the steps which follow (garbage in, garbage out), having a reputation as a bad-ass data preparer wouldn't be the worst thing in the world. So yeah, while data preparation might take a while to perform and master, that's really not a bad thing. There is opportunity in this necessity, both to stand out in your role, as well as the intrinsic value of knowing you're good at your job. For some more practical insight into data preparation, here are a couple of places to start out: 7 Steps to Mastering Data Preparation with Python Machine Learning Workflows in Python from Scratch Part 1: Data Preparation \u00a0 2. The value of a performance baseline \u00a0 So you have modeled some data with a particular algorithm, spent time tuning your hyperparameters, performed some feature engineering and/or selection, and you're happy that you have squeezed out a training accuracy of, say, 75%. You pat yourself on the back for all of your hard work. But what are you comparing your results to? If you don't have a baseline -- a simple sanity check consists of comparing one\u2019s estimator against simple rules of thumb -- then you are literally comparing that hard work to nothing . It's reasonable to assume that almost any accuracy could be considered back pat-worthy without something with which to compare it. Random guessing isn't the best strategy for a baseline; instead, accepted methods exist for determining a baseline accuracy for comparison. Scikit-learn, for example, provides a series of baseline classifiers in its DummyClassifier class: stratified generates random predictions by respecting the training set class distribution. most_frequent always predicts the most frequent label in the training set. prior always predicts the class that maximizes the class prior (like most_frequent`) and ``predict_proba returns the class prior. uniform generates predictions uniformly at random. constant always predicts a constant label that is provided by the user. Baselines aren't just for classifiers, either; statistical methods exist for baselining regression tasks, for example. After exploratory data analysis and data preparation and preprocessing, establishing a baseline is a logical next step in your machine learning workflow. \u00a0 3. Validation: Beyond training and testing \u00a0 When we build machine learning models, we train them using training data . When we test the resulting models, we use testing data . So where does validation come in? Rachel Thomas of fast.ai recently wrote a solid treatment of how and why to create good validation sets . In it, she covered these 3 types of data as follows: the training set is used to train a given model the validation set is used to choose between models (for instance, does a random forest or a neural net work better for your problem? do you want a random forest with 40 trees or 50 trees?) the test set tells you how you\u2019ve done. If you\u2019ve tried out a lot of different models, you may get one that does well on your validation set just by chance, and having a test set helps make sure that is not the case. Source:\u00a0Andrew Ng's Machine Learning class at Stanford So, is randomly splitting your data into test, train, and validation sets always a good idea? As it turns out, no. Rachel addresses this in the context of time series data: Kaggle currently has a competition to predict the sales in a chain of Ecuadorian grocery stores . Kaggle\u2019s \u201ctraining data\u201d runs from Jan 1 2013 to Aug 15 2017 and the test data spans Aug 16 2017 to Aug 31 2017. A good approach would be to use Aug 1 to Aug 15 2017 as your validation set, and all the earlier data as your training set. Much of the rest of the post relates dataset splitting to Kaggle competition data, which is practical information, as well as roping cross-validation into the discussion, which I will leave for you to seek out yourself. Other times, random splits of data will be useful; it depends on further factors such as the state of the data when you get it (is it split into train/test already?), as well as what type of data it is (see the time series excerpt above). For when random splits are feasible, Scikit-learn may not have a train_validate_test_split method, but you can leverage standard Python libraries to create your own, such as that which is found here . \u00a0 4. There is more to ensembles than a bunch of trees \u00a0 Algorithm selection can be challenging for machine learning newcomers. Often when building classifiers, especially for beginners, an approach is adopted to problem solving which considers single instances of single algorithms. However, in a given scenario, it may prove more useful to chain or group classifiers together, using the techniques of voting, weighting, and combination to pursue the most accurate classifier possible. Ensemble learners are classifiers which provide this functionality in a variety of ways. Random Forests is a very prominent example of an ensemble learner, which uses numerous decision trees in a single predictive model. Random Forests have been applied to problems with great success, and are celebrated accordingly. But they are not the only ensemble method which exists, and numerous others are also worthy of a look. Bagging operates by simple concept: build a number of models, observe the results of these models, and settle on the majority result. I recently had an issue with the rear axle assembly in my car: I wasn't sold on the diagnosis of the dealership, and so I took it to 2 other garages, both of which agreed the issue was something different than the dealership suggested. Voila . Bagging in action. Random Forests are based on modified bagging techniques. Bagging, or bootstrap aggregation . Boosting is similar to bagging, but with one conceptual modification. Instead of assigning equal weighting to models, boosting assigns varying weights to classifiers, and derives its ultimate result based on weighted voting. Thinking again of my car problem, perhaps I had been to one particular garage numerous times in the past, and trusted their diagnosis slightly more than others. Also suppose that I was not a fan of previous interactions with the dealership, and that I trusted their insight less. The weights I assigned would be reflective. Stacking is a bit different from the previous 2 techniques as it trains multiple single classifiers, as opposed to various incarnations of the same learner. While bagging and boosting would use numerous models built using various instances of the same classification algorithm (eg. decision tree), stacking builds its models using different classification algorithms (perhaps decision trees, logistic regression, an ANNs, or some other combination). A combiner algorithm is then trained to make ultimate predictions using the predictions of other algorithms. This combiner can be any ensemble technique, but logistic regression is often found to be an adequate and simple algorithm to perform this combining. Along with classification, stacking can also be employed in unsupervised learning tasks such as density estimation. For some additional detail, read this introduction to ensemble learners . You can read more on implementing ensembles in Python in this very thorough tutorial . \u00a0 5. Google Colab? \u00a0 Finally, let's look at something more practical. Jupyter Notebooks have become a de facto data science development tool, with most people running notebooks locally or via some other configuration-heavy method such as in Docker containers, or in a virtual machine. Google's Colaboratory is an initiative which allows for Jupyter-style and -compatible notebooks to be run directly in your Google Drive, free of configuration. Colaboratory is pre-configured with a number of the most popular Python libraries, and more can be installed within the notebooks themselves thanks to supported package management. For instance, TensorFlow is included, but Keras is not, yet installing Keras via pip takes a matter of seconds. In what is likely the best news, if you are working with neural networks you can use GPU hardware acceleration in your training for free for up to 12 hours at a time. This isn't the panacea it may first seem to be, but it's an added bonus, and a good start to democratizing GPU access. Read 3 Essential Google Colaboratory Tips & Tricks for more information on how to take advantage of Colaboratory's notebooks in the cloud. \u00a0 Related : 5 Things You Need To Know About Data Science 7 Steps to Mastering Machine Learning With Python 4 Things You Probably Didn\u2019t Know Machine Learning and AI was used for", "title_html": "<h1 id=\"title\"><img align=\"right\" alt=\"Silver Blog\" src=\"/images/tkb-1803-s.png\" width=\"94\"/>5 Things to Know About Machine Learning</h1> ", "url": "https://www.kdnuggets.com/2018/03/5-things-know-about-machine-learning.html", "tfidf": {"tfidf": {"after": 1.02070207021, "boost": 27.482977495680004, "googl": 45.555236728800004, "vari": 2.4970116388799997, "awar": 4.27693965517, "onc": 1.4974533106999999, "pip": 135.692307692, "advantag": 3.32412060302, "fastai": 1221.23076923, "assign": 11.50990816821, "addit": 1.24634950542, "veri": 3.77640342531, "adequ": 9.0823798627, "thank": 6.00681044268, "number": 2.20285833218, "previous": 2.85693719632, "welldiscuss": 1221.23076923, "dataset": 193.609756098, "function": 2.495441685, "class": 12.69910678578, "happi": 6.125, "thoma": 2.39673913043, "learner": 300.9668246444, "python": 337.7872340424, "worst": 6.653813914500001, "well": 4.2622994832, "unsupervis": 345.13043478300006, "badass": 933.882352941, "done": 2.3302509907499998, "tree": 24.767550702, "garag": 54.4631217838, "assembl": 3.0011342155, "creat": 2.4985835694, "approach": 4.15113086678, "know": 15.559621038900001, "their": 2.0309581681, "free": 3.43636363636, "equal": 2.542193755, "particular": 2.7629655412400003, "instead": 3.18923262354, "least": 1.6165359943000002, "traintest": 1221.23076923, "multipl": 2.74813917258, "how": 4.80750984153, "test": 18.599497907969997, "news": 2.08182533438, "fair": 3.20533010297, "various": 2.6646525679799997, "bunch": 40.5, "had": 2.0951501154799996, "especi": 1.66712170534, "initi": 1.35, "distribut": 2.7396031061299997, "sure": 7.453521126760001, "found": 2.2277415281, "given": 2.70852170946, "tutori": 59.4606741573, "car": 7.07486631016, "embrac": 8.45817794353, "factor": 2.89127663449, "scenario": 15.3986420951, "consid": 2.4794627518400003, "compat": 15.2068965517, "second": 1.1130898128, "new": 1.0178880554, "simpl": 13.592465753439999, "perform": 9.1883862255, "but": 10.163241789899999, "success": 1.32002993265, "need": 1.4372623574099999, "classif": 24.201219512190004, "final": 1.34008609775, "where": 1.06715063521, "tune": 10.4173228346, "point": 1.25990000794, "jan": 8.31639601886, "ann": 5.08357348703, "docker": 337.787234043, "has": 1.0436497502, "generat": 4.10550814584, "also": 3.04429530201, "tensorflow": 1221.23076923, "thorough": 10.956521739100001, "bonus": 19.6485148515, "use": 16.474220118079998, "machin": 56.340684410639994, "saniti": 103.764705882, "mostfrequ": 2442.46153846, "establish": 1.34622233528, "out": 8.48133555928, "model": 27.177771925200002, "good": 9.11889718554, "alway": 10.33728350045, "concept": 2.65707112971, "titl": 1.87261146497, "dealership": 256.0645161291, "numer": 7.33302540416, "hyperparamet": 1221.23076923, "configurationheavi": 1221.23076923, "store": 3.44680851064, "some": 7.28256880736, "not": 11.17241379309, "tri": 1.8544562551099997, "kaggl": 3663.6923076900002, "less": 1.46904783936, "disproportion": 64.66802444, "specif": 1.8719490626099997, "acceler": 8.15408320493, "aggreg": 17.542541436500002, "will": 3.67443295788, "solv": 7.26923076923, "then": 2.17315721032, "ecuadorian": 120.27272727299999, "they": 1.03017325287, "sale": 3.4274611399, "instal": 7.57442748092, "turn": 1.3838912133899999, "case": 1.48498737256, "let": 3.48616600791, "world": 1.11340206186, "scienc": 4.63939216832, "kdnugget": 1221.23076923, "employ": 2.16530278232, "logic": 8.929133858270001, "major": 1.14852058164, "featur": 1.52712581762, "seek": 2.83753351206, "practic": 5.11304347827, "lack": 1.9271667880599999, "alreadi": 1.9551724137900002, "liter": 5.468825353080001, "trainvalidatetestsplit": 1221.23076923, "provid": 3.64658142561, "about": 4.25944060636, "valu": 4.555523672880001, "either": 1.5830092731099998, "accord": 1.27589809531, "develop": 1.1955719557200002, "observ": 2.22446406053, "accuraci": 38.2861736334, "what": 5.01373756512, "via": 4.595744680859999, "agre": 2.22946215419, "network": 2.59369384088, "deriv": 2.78379800105, "lot": 4.40877534018, "andor": 690.260869565, "beyond": 5.09172546504, "collect": 1.64109985528, "both": 2.10431440122, "baselin": 461.8472727272, "tell": 3.36142282448, "result": 5.7305804216, "varieti": 2.2972073506, "set": 13.05787348591, "ani": 3.40151406942, "virtual": 4.11295336788, "philosoph": 5.65586034913, "from": 3.00170164491, "preconfigur": 1221.23076923, "authorit": 34.8157894737, "allow": 1.2716059271100002, "sold": 2.7935949322500004, "work": 4.46080359652, "detail": 2.26186066391, "num": 36.01134144036, "instanc": 13.029134181360002, "diagnosi": 57.6261343012, "idea": 2.0930784443, "advic": 7.08117752007, "solid": 6.37334403854, "for": 24.00756096024, "depend": 2.2411067193700003, "predict": 46.66361854995, "rope": 22.111420612800003, "discuss": 4.39352428394, "with": 14.016774925859997, "she": 2.16, "competit": 6.1392111369, "assum": 2.9575260804799997, "determin": 4.331787175980001, "topic": 5.457545548300001, "split": 17.354613030150002, "better": 2.0065722952500002, "current": 1.5325803649, "frequent": 2.10501193317, "jupyt": 1221.23076923, "preprocess": 1221.23076923, "look": 3.8172637653199994, "popular": 1.50769230769, "bag": 95.1608391606, "fan": 4.805084745759999, "chanc": 4.2449197861000005, "think": 5.81431972166, "rear": 7.87890818859, "combin": 8.4880239521, "forest": 24.4773358002, "net": 6.96315789474, "master": 9.45375148869, "train": 27.1119785314, "again": 1.50883862384, "compar": 7.464911249560001, "group": 1.20996875238, "doe": 5.11743848715, "logist": 28.1989342806, "valid": 46.285714285720005, "squeez": 35.5964125561, "place": 1.1004366812200002, "great": 2.53185551392, "intrins": 25.9836333879, "goal": 3.28152128979, "scratch": 25.8146341463, "stratifi": 120.27272727299999, "big": 2.7400759406299997, "librari": 5.3653261237, "note": 1.42449528937, "accept": 1.7377408056, "oppos": 2.51282051282, "probabl": 2.64555907349, "notebook": 200.9620253165, "into": 4.06009845916, "prior": 6.53422966113, "cloud": 10.6193979933, "bootstrap": 264.6, "constant": 7.317815164780001, "stack": 58.9455445545, "essenti": 2.9280708225700005, "voila": 1221.23076923, "earlier": 1.86776470588, "live": 1.30591428806, "local": 1.51720183486, "choos": 4.17899447223, "axl": 59.2388059701, "guess": 25.0410094637, "against": 1.2902072328299998, "workflow": 738.418604652, "help": 1.39962972759, "exploratori": 68.4310344828, "cover": 1.69380134429, "own": 1.17844418052, "base": 2.2925631769, "relat": 2.47501753838, "label": 8.95431472082, "hour": 2.25960717336, "post": 6.71478922881, "here": 4.84615384616, "fastevolv": 1221.23076923, "pursu": 4.15384615385, "forgotten": 13.2631578947, "much": 2.3884459154599997, "togeth": 1.58095996813, "contain": 1.59814777532, "scikitlearn": 2442.46153846, "care": 2.49426551453, "adopt": 2.0442956477000003, "problem": 7.06699310036, "job": 3.2539454806299997, "wrote": 2.10473286491, "neural": 118.9213483146, "reput": 4.06451612903, "context": 4.25972632144, "just": 5.34320572148, "treatment": 3.87125091441, "rule": 1.7415533128599998, "standard": 1.8915763135900003, "type": 4.056208482380001, "classifi": 42.3501167056, "would": 4.331491712719999, "check": 6.50655737705, "aug": 176.4, "rest": 1.9573418813999999, "ensembl": 117.22784810099999, "conform": 11.6821192053, "opportun": 3.0119521912400002, "destin": 6.0503048780499995, "spent": 3.00795755968, "start": 2.53347163488, "took": 1.4009883515700001, "noth": 3.46410648047, "run": 4.6707855251399995, "patworthi": 1221.23076923, "them": 1.09876115994, "insight": 23.6074349442, "seri": 4.39534883721, "democrat": 4.1214953271, "trust": 9.79093432008, "bad": 3.3944836433599996, "singl": 6.43795620436, "whi": 9.769846153860001, "modif": 9.5753920386, "support": 1.2685577307200002, "comparison": 4.9597000937199995, "introduct": 2.7808723068799996, "the": 62.0, "step": 11.311720698239998, "perhap": 6.29625223082, "build": 6.5366958312, "pat": 13.066666666700002, "settl": 3.1135516768000002, "algorithm": 223.6056338032, "select": 4.04690288044, "one": 5.031374786100001, "panacea": 453.6, "same": 2.23715916296, "diatrib": 311.294117647, "there": 3.12273800157, "colab": 1221.23076923, "inform": 3.1506251240400003, "possibl": 1.4173734488, "modifi": 4.45329593268, "say": 1.7544480053, "best": 6.331405782640001, "exampl": 4.51450236966, "spend": 4.15928739848, "slight": 3.25327868852, "take": 4.55846672888, "follow": 2.09280253098, "now": 1.160780873, "strategi": 4.44208170118, "further": 1.3618116315, "configur": 11.504347826099998, "necess": 12.128342245999999, "hard": 5.46506024096, "interact": 4.4185917061, "tip": 9.42195845697, "than": 3.0983606557499996, "uniform": 11.446286950260001, "regress": 153.6387096774, "realli": 4.7476076555, "leverag": 35.7567567568, "matter": 2.44773358002, "issu": 2.87843350558, "exhaust": 8.25585023401, "trick": 14.7272727273, "coupl": 3.2572835453400004, "around": 1.21394708671, "mean": 1.44906900329, "vote": 6.002268431, "seem": 4.58247943426, "beginn": 53.4545454545, "task": 11.65924112607, "role": 1.55327267391, "facto": 11.794947994100001, "suppos": 4.23021582734, "may": 8.41614207144, "becom": 1.12492028626, "mayo": 49.7680250784, "past": 2.01702452039, "peopl": 1.21320495186, "stand": 2.0845588235299997, "challeng": 2.55816951337, "promin": 2.39746300211, "want": 1.99698113208, "themselv": 2.05967825636, "howev": 1.0945191313299998, "analysi": 3.47852760736, "prove": 2.45720476706, "span": 6.17262830482, "maxim": 12.928338762200001, "which": 12.06230214, "predictproba": 1221.23076923, "like": 3.44755700325, "incarn": 18.3537572254, "such": 4.24605509496, "worthi": 18.5250875146, "estim": 4.6998223801, "other": 7.06946564884, "appli": 2.2972073506, "techniqu": 14.917547568720002, "consist": 1.4901445466499998, "show": 1.26703910615, "known": 1.0859097127200001, "ultim": 7.75574010747, "see": 1.27242125511, "excerpt": 12.5700712589, "sourc": 1.69760479042, "get": 3.5712518277, "random": 79.0923913043, "implement": 3.57648118946, "abov": 1.90382539873, "manag": 1.6448404475799998, "should": 3.3286508019800003, "except": 1.71948445792, "part": 1.04330682789, "yet": 2.1258703802900003, "recent": 3.0881151527, "celebr": 2.48256450352, "next": 1.4950560316400001, "kera": 1671.1578947360001, "access": 1.8734953976900002, "this": 10.037936267100001, "pretti": 15.75, "time": 9.10147143132, "engin": 2.47135740971, "back": 2.52140077822, "bit": 8.33385826772, "similar": 1.37514075357, "conceptu": 17.6792873051, "differ": 4.946179609, "been": 3.0717832957199995, "profession": 2.6389627659599997, "statist": 4.24265098878, "first": 1.00761614623, "most": 5.10482315115, "between": 1.03453668708, "return": 1.39532431007, "stanford": 12.6, "drive": 2.93510815308, "rachel": 45.7521613832, "along": 1.2973768080399999, "all": 2.02293577982, "top": 1.8387769284200002, "action": 1.81855670103, "reason": 3.44680851064, "someth": 13.12608515916, "dummyclassifi": 1221.23076923, "includ": 1.0190641247799999, "jupyterstyl": 1221.23076923, "almost": 1.53584212054, "exist": 4.39413230004, "feasibl": 17.8181818182, "that": 16.06374502, "weight": 24.394591272299998, "garbag": 87.9556786704, "built": 1.99447236181, "more": 9.154536135299999, "and": 29.00182677177, "groceri": 45.7521613833, "respect": 1.6443293630200002, "these": 3.22246278756, "prepar": 38.88198377472, "yourself": 53.185929648199995, "amount": 4.54054054054, "could": 1.2043695949, "comment": 3.05954904606, "state": 1.0477133240899998, "crossvalid": 1221.23076923, "can": 9.41009113136, "colaboratori": 4884.92307692, "make": 2.1525320317200003, "way": 1.2190739461, "onli": 2.0512953033200003, "andrew": 3.82462057336, "hardwar": 18.8104265403, "are": 12.35887122936, "thing": 24.065484311099997, "accur": 5.768895348840001, "read": 6.944881889760001, "packag": 7.828402366860001, "common": 1.4025974025999999, "chain": 10.35278774046, "data": 111.42237345822, "oper": 1.55479384977, "address": 2.86157173756, "method": 12.857142857150002, "thumb": 33.3529411765, "rather": 1.55692850838, "sinc": 2.16737201366, "newcom": 27.5147313692, "yeah": 80.1818181818, "come": 1.32831325301, "reflect": 2.3443591258099996, "might": 2.1561863370900003, "timeconsum": 1221.23076923, "matthew": 6.908616187989999, "direct": 1.22226499346, "import": 4.020597670110001, "decis": 6.48, "leav": 1.6615384615399997, "have": 11.163843252539998, "tool": 4.99716713881, "while": 3.1325966850899993, "without": 1.29547123623, "often": 2.5890410959, "within": 1.2369302688, "suggest": 1.7571665744299998, "learn": 34.841258229750004, "when": 5.10383848775, "densiti": 7.3465987968499995, "user": 7.71053909665}, "logtfidf": {"after": 0.020490694648099998, "boost": 6.644863572570001, "googl": 9.73052489032, "vari": 0.915094672432, "awar": 1.45323772, "onc": 0.403765872355, "pip": 4.91038987911, "advantag": 1.20120515883, "fastai": 7.1076144564399995, "assign": 4.0337878668, "addit": 0.220218882972, "veri": 0.6904793797140001, "adequ": 2.2063362576900003, "thank": 1.7928938993, "number": 0.1932171568372, "previous": 0.713205920126, "welldiscuss": 7.1076144564399995, "dataset": 5.26584456664, "function": 0.914465741594, "class": 4.498633139598001, "happi": 1.81237875643, "thoma": 0.874109117838, "learner": 17.282822721720002, "python": 24.18394045776, "worst": 1.89519021125, "well": 0.2540577532624, "unsupervis": 5.843922417409999, "badass": 6.83935046985, "done": 0.845975983129, "tree": 8.5066493265, "garag": 6.6087532551, "assembl": 1.09899028905, "creat": 0.445153637028, "approach": 1.4604672291620002, "know": 5.7175181663879995, "their": 0.030721010245400002, "free": 1.0825332985340002, "equal": 0.933027391343, "particular": 0.646314787608, "instead": 0.9332663008300001, "least": 0.480285584745, "traintest": 7.1076144564399995, "multipl": 1.01092401812, "how": 1.4147008707900002, "test": 6.840571059721, "news": 0.733245073485, "fair": 1.16481508131, "various": 0.57385300014, "bunch": 3.70130197411, "had": 0.0929560488222, "especi": 0.511098609709, "initi": 0.30010459245, "distribut": 1.00781305813, "sure": 2.0086865552, "found": 0.215682248096, "given": 0.606511621662, "tutori": 4.0853151555, "car": 2.5268027334, "embrac": 2.13513377732, "factor": 1.06169814662, "scenario": 2.73427932989, "consid": 0.429789447648, "compat": 2.72174904546, "second": 0.10713976337999999, "new": 0.0177299468511, "simpl": 4.892885157559999, "perform": 2.55708510348, "but": 0.161923720719, "success": 0.27765441259199997, "need": 0.362740163442, "classif": 6.263372208870001, "final": 0.292733863948, "where": 0.0649921387457, "tune": 2.3434700776599997, "point": 0.23103235903299998, "jan": 2.11822899018, "ann": 1.62601445662, "docker": 5.822416212189999, "has": 0.0427239448548, "generat": 1.438364683472, "also": 0.0439714734, "tensorflow": 7.1076144564399995, "thorough": 2.39393487158, "bonus": 2.97800175538, "use": 0.4673283157056, "machin": 19.49303412868, "saniti": 4.64212589251, "mostfrequ": 14.215228912879999, "establish": 0.297302399813, "out": 0.4674111273544, "model": 9.586850950443, "good": 2.5115364294419997, "alway": 3.63159602286, "concept": 0.977224437103, "titl": 0.6273339619899999, "dealership": 13.340451420570002, "numer": 2.424375249384, "hyperparamet": 7.1076144564399995, "configurationheavi": 7.1076144564399995, "store": 1.2374487335200002, "some": 0.2770145634515, "not": 0.1710765430825, "tri": 0.61759152916, "kaggl": 21.322843369319997, "less": 0.3846144626, "disproportion": 6.95223937222, "specif": 0.626980167541, "acceler": 2.0985188085299997, "aggreg": 2.8646288702, "will": 0.6083596047450001, "solv": 1.9836504770400003, "then": 0.16606773046179998, "ecuadorian": 4.7897618913199995, "they": 0.0297269947676, "sale": 1.23181979465, "instal": 2.6632611758, "turn": 0.324899251064, "case": 0.395406268889, "let": 1.2488025672799998, "world": 0.107420248621, "scienc": 1.682872357782, "kdnugget": 7.1076144564399995, "employ": 0.7725602049429999, "logic": 2.18931939783, "major": 0.138474663439, "featur": 0.423387418142, "seek": 1.04293519316, "practic": 1.5995475926009999, "lack": 0.656050938907, "alreadi": 0.670478380747, "liter": 1.6990638498800001, "trainvalidatetestsplit": 7.1076144564399995, "provid": 0.585533532975, "about": 0.2513739098984, "valu": 1.646386620296, "either": 0.459327638815, "accord": 0.243650319127, "develop": 0.178624694913, "observ": 0.7995160149320001, "accuraci": 7.6394296218, "what": 0.903549187308, "via": 1.663967250828, "agre": 0.801760369921, "network": 0.9530830530519999, "deriv": 1.02381618275, "lot": 1.4835969502500002, "andor": 6.5370695979699995, "beyond": 1.86893916745, "collect": 0.49536666052, "both": 0.10168506677860001, "baselin": 32.44634172992, "tell": 1.21236434401, "result": 0.681894541905, "varieti": 0.8316941898119999, "set": 1.8864561241789999, "ani": 0.376825075098, "virtual": 1.4141413514399999, "philosoph": 1.73269223754, "from": 0.0017011625065979999, "preconfigur": 7.1076144564399995, "authorit": 3.55007100439, "allow": 0.24028061118900002, "sold": 1.02732927261, "work": 0.436138269092, "detail": 0.816187777173, "num": 0.011339654234292002, "instanc": 4.72357431888, "diagnosi": 6.7216580095000005, "idea": 0.73863592212, "advic": 1.9574402102700001, "solid": 1.8521242986400002, "for": 0.007559769489528001, "depend": 0.806969815, "predict": 14.811662139209998, "rope": 3.09609424485, "discuss": 1.57396904524, "with": 0.01676488398746, "she": 0.7701082216959999, "competit": 2.24309814802, "assum": 1.08435313525, "determin": 1.545666038044, "topic": 1.6969991554100001, "split": 6.2221021966, "better": 0.6964279406, "current": 0.42695282784500005, "frequent": 0.7443211360850001, "jupyt": 7.1076144564399995, "preprocess": 7.1076144564399995, "look": 1.2927733872, "popular": 0.41058020877499996, "bag": 16.58285420754, "fan": 1.56967467926, "chanc": 1.44572292349, "think": 2.1343532235, "rear": 2.0641893395200004, "combin": 2.6460915537550003, "forest": 7.941548537999999, "net": 1.9406330919499999, "master": 3.44339807097, "train": 9.252856379746001, "again": 0.411340231612, "compar": 2.4956767237079998, "group": 0.190594534797, "doe": 1.6021251891509998, "logist": 5.2922740104, "valid": 13.22246252376, "squeez": 3.5722448618800002, "place": 0.0957070839572, "great": 0.471610516158, "intrins": 3.25746685473, "goal": 1.18830712273, "scratch": 3.2509415461, "stratifi": 4.7897618913199995, "big": 1.00798563557, "librari": 1.973619961886, "note": 0.353817568083, "accept": 0.552585882007, "oppos": 0.921405832541, "probabl": 0.972882412913, "notebook": 18.468390245, "into": 0.0596514529148, "prior": 2.335326517563, "cloud": 2.36268232808, "bootstrap": 5.57821925168, "constant": 2.5943292562, "stack": 8.93400526614, "essenti": 1.07434378384, "voila": 7.1076144564399995, "earlier": 0.624742371425, "live": 0.266903399347, "local": 0.416867740206, "choos": 1.43007066072, "axl": 4.08157683339, "guess": 3.22051485947, "against": 0.254802851078, "workflow": 11.82272739642, "help": 0.336207721344, "exploratori": 4.225826442240001, "cover": 0.526975319156, "own": 0.164195077421, "base": 0.27304660457400004, "relat": 0.42620060330799997, "label": 2.99797665454, "hour": 0.815190981077, "post": 2.4171004581029996, "here": 1.7700763767400003, "fastevolv": 7.1076144564399995, "pursu": 1.4240346891, "forgotten": 2.5849901083400004, "much": 0.35499145860200004, "togeth": 0.458032237308, "contain": 0.468845318236, "scikitlearn": 14.215228912879999, "care": 0.9139943029109999, "adopt": 0.7150533036110001, "problem": 2.276562897092, "job": 1.1798682540899998, "wrote": 0.744188554049, "neural": 8.170630311, "reput": 1.40229470247, "context": 1.44920491442, "just": 1.158125736436, "treatment": 1.3535776885100002, "rule": 0.554777423537, "standard": 0.63741050982, "type": 1.414202970774, "classifi": 13.332237081199999, "would": 0.3184705118588, "check": 1.87281049562, "aug": 17.816581155700003, "rest": 0.671587369833, "ensembl": 19.72746518155, "conform": 2.4580593997499998, "opportun": 1.10258843705, "destin": 1.8001086638400001, "spent": 1.10126129684, "start": 0.472886738582, "took": 0.337177952953, "noth": 1.24245472939, "run": 1.328144926617, "patworthi": 7.1076144564399995, "them": 0.0941833269093, "insight": 4.93682904374, "seri": 1.1458038320939998, "democrat": 1.41621604098, "trust": 3.1766194152, "bad": 1.2221516561799999, "singl": 1.903667076236, "whi": 3.54206529141, "modif": 2.25919647821, "support": 0.237880610037, "comparison": 1.60134527393, "introduct": 1.02276465794, "the": 0.0, "step": 4.15818022792, "perhap": 2.29361478366, "build": 1.964549808364, "pat": 2.57006445813, "settl": 1.13576409285, "algorithm": 26.64353916144, "select": 1.409609374266, "one": 0.0312767582275, "panacea": 6.117215752409999, "same": 0.224119299208, "diatrib": 5.74073818118, "there": 0.12029367877649999, "colab": 7.1076144564399995, "inform": 0.908907409324, "possibl": 0.348805474891, "modifi": 1.4936444810499998, "say": 0.562154280552, "best": 1.836911731788, "exampl": 1.2260480249969998, "spend": 1.42534376116, "slight": 1.17966331506, "take": 0.522767848788, "follow": 0.09071382218839999, "now": 0.149092945021, "strategi": 1.49112311818, "further": 0.308815895297, "configur": 2.4427250357499997, "necess": 2.4955450479900003, "hard": 2.01045592812, "interact": 1.4858210267899998, "tip": 2.2430429711200004, "than": 0.0967825866546, "uniform": 3.48903642606, "regress": 11.807974549259999, "realli": 1.5576408397, "leverag": 3.5767392514699994, "matter": 0.8951625270360001, "issu": 0.728198087868, "exhaust": 2.11092206831, "trick": 2.6897010624299997, "coupl": 1.18089357972, "around": 0.19387710578200001, "mean": 0.37092128352, "vote": 2.1979805781, "seem": 1.658186064552, "beginn": 3.9788316751, "task": 4.0724604198300005, "role": 0.44036410757399996, "facto": 2.4676713037, "suppos": 1.44225301477, "may": 0.40567996227520003, "becom": 0.11771217648900001, "mayo": 3.90737271112, "past": 0.7016234157610001, "peopl": 0.193265578473, "stand": 0.7345572374320001, "challeng": 0.9392919688950001, "promin": 0.8744110957960001, "want": 0.6916366062549999, "themselv": 0.7225497843690001, "howev": 0.0903151173475, "analysi": 1.2466091029200002, "prove": 0.899024430345, "span": 1.82012472855, "maxim": 2.5594217052, "which": 0.06214096614516, "predictproba": 7.1076144564399995, "like": 0.417160729635, "incarn": 2.90983430697, "such": 0.238783911224, "worthi": 2.9191258953099997, "estim": 1.70875507195, "other": 0.06912323543832, "appli": 0.8316941898119999, "techniqu": 5.26497539228, "consist": 0.398873126426, "show": 0.236682766013, "known": 0.0824180805992, "ultim": 2.849462818722, "see": 0.240921585492, "excerpt": 2.53131869155, "sourc": 0.529218310751, "get": 1.159538011564, "random": 21.699935471609997, "implement": 1.27437940907, "abov": 0.643865229816, "manag": 0.497643387158, "should": 1.018839753516, "except": 0.54202451213, "part": 0.04239531098280001, "yet": 0.754181309241, "recent": 0.868827482576, "celebr": 0.9092920998899999, "next": 0.402163685499, "kera": 13.45624966948, "access": 0.627805882716, "this": 0.037864490525, "pretti": 2.75684036527, "time": 0.1009036697634, "engin": 0.904767558276, "back": 0.46333486179399996, "bit": 2.12032652634, "similar": 0.318556092114, "conceptu": 2.8723937456, "differ": 0.849284485248, "been": 0.07093794710520002, "profession": 0.970385948273, "statist": 1.4451883070700002, "first": 0.0075872898121599995, "most": 0.103739481478, "between": 0.033953681165299995, "return": 0.333126868592, "stanford": 2.53369681396, "drive": 1.07674430203, "rachel": 6.2601837067999995, "along": 0.260344385917, "all": 0.022805264195599997, "top": 0.609100637788, "action": 0.598043165069, "reason": 1.088603105924, "someth": 4.75322849092, "dummyclassifi": 7.1076144564399995, "includ": 0.0188846813905, "jupyterstyl": 7.1076144564399995, "almost": 0.42907884333400004, "exist": 1.144973382261, "feasibl": 2.88021938643, "that": 0.06361837407424, "weight": 7.9246176306, "garbag": 7.56737171114, "built": 0.690379535065, "more": 0.15322438439999997, "and": 0.0018267141198444, "groceri": 3.8232390339599998, "respect": 0.49733261904, "these": 0.2146008582024, "prepar": 14.207076464992001, "yourself": 6.56129340102, "amount": 1.639797772398, "could": 0.18595627229000003, "comment": 1.11826753454, "state": 0.0466100027668, "crossvalid": 7.1076144564399995, "can": 1.298728771152, "colaboratori": 28.430457825759998, "make": 0.14699531564579998, "way": 0.19809150993500002, "onli": 0.050648536658199995, "andrew": 1.34145926585, "hardwar": 2.93441131931, "are": 0.35360968299240003, "thing": 8.7819353468, "accur": 1.75248061485, "read": 2.51817804264, "packag": 2.0577584491900005, "common": 0.338325805271, "chain": 3.28821729958, "data": 40.1550792984, "oper": 0.441342964347, "address": 1.05137103247, "method": 4.7223080442050005, "thumb": 3.5071459596699994, "rather": 0.442714975539, "sinc": 0.1607363989154, "newcom": 3.31472154739, "yeah": 4.38429678321, "come": 0.28390990653000003, "reflect": 0.85201207065, "might": 0.7683410765340001, "timeconsum": 7.1076144564399995, "matthew": 1.9327693554900003, "direct": 0.200705689496, "import": 0.878454831198, "decis": 2.310324665088, "leav": 0.507743957229, "have": 0.16263502575320002, "tool": 1.60887117963, "while": 0.12974995138140002, "without": 0.258874517941, "often": 0.516280786702, "within": 0.21263272059799998, "suggest": 0.563702610877, "learn": 12.641280971175, "when": 0.102774944292, "densiti": 1.9942374574000001, "user": 2.04258810688}, "logidf": {"after": 0.020490694648099998, "boost": 2.2149545241900004, "googl": 2.43263122258, "vari": 0.915094672432, "awar": 1.45323772, "onc": 0.403765872355, "pip": 4.91038987911, "advantag": 1.20120515883, "fastai": 7.1076144564399995, "assign": 1.3445959556, "addit": 0.220218882972, "veri": 0.230159793238, "adequ": 2.2063362576900003, "thank": 1.7928938993, "number": 0.0966085784186, "previous": 0.356602960063, "welldiscuss": 7.1076144564399995, "dataset": 5.26584456664, "function": 0.914465741594, "class": 0.7497721899330001, "happi": 1.81237875643, "thoma": 0.874109117838, "learner": 4.320705680430001, "python": 4.03065674296, "worst": 1.89519021125, "well": 0.0635144383156, "unsupervis": 5.843922417409999, "badass": 6.83935046985, "done": 0.845975983129, "tree": 1.41777488775, "garag": 3.30437662755, "assembl": 1.09899028905, "creat": 0.222576818514, "approach": 0.7302336145810001, "know": 0.952919694398, "their": 0.015360505122700001, "free": 0.5412666492670001, "equal": 0.933027391343, "particular": 0.323157393804, "instead": 0.46663315041500003, "least": 0.480285584745, "traintest": 7.1076144564399995, "multipl": 1.01092401812, "how": 0.47156695693000006, "test": 0.977224437103, "news": 0.733245073485, "fair": 1.16481508131, "various": 0.28692650007, "bunch": 3.70130197411, "had": 0.0464780244111, "especi": 0.511098609709, "initi": 0.30010459245, "distribut": 1.00781305813, "sure": 2.0086865552, "found": 0.107841124048, "given": 0.303255810831, "tutori": 4.0853151555, "car": 1.2634013667, "embrac": 2.13513377732, "factor": 1.06169814662, "scenario": 2.73427932989, "consid": 0.214894723824, "compat": 2.72174904546, "second": 0.10713976337999999, "new": 0.0177299468511, "simpl": 1.2232212893899999, "perform": 0.42618085058, "but": 0.0161923720719, "success": 0.27765441259199997, "need": 0.362740163442, "classif": 2.08779073629, "final": 0.292733863948, "where": 0.0649921387457, "tune": 2.3434700776599997, "point": 0.23103235903299998, "jan": 2.11822899018, "ann": 1.62601445662, "docker": 5.822416212189999, "has": 0.0427239448548, "generat": 0.719182341736, "also": 0.0146571578, "tensorflow": 7.1076144564399995, "thorough": 2.39393487158, "bonus": 2.97800175538, "use": 0.0292080197316, "machin": 1.39235958062, "saniti": 4.64212589251, "mostfrequ": 7.1076144564399995, "establish": 0.297302399813, "out": 0.0584263909193, "model": 0.7374500731110001, "good": 0.418589404907, "alway": 0.726319204572, "concept": 0.977224437103, "titl": 0.6273339619899999, "dealership": 4.44681714019, "numer": 0.606093812346, "hyperparamet": 7.1076144564399995, "configurationheavi": 7.1076144564399995, "store": 1.2374487335200002, "some": 0.0395735090645, "not": 0.0155524130075, "tri": 0.61759152916, "kaggl": 7.1076144564399995, "less": 0.3846144626, "disproportion": 3.47611968611, "specif": 0.626980167541, "acceler": 2.0985188085299997, "aggreg": 2.8646288702, "will": 0.202786534915, "solv": 1.9836504770400003, "then": 0.08303386523089999, "ecuadorian": 4.7897618913199995, "they": 0.0297269947676, "sale": 1.23181979465, "instal": 1.3316305879, "turn": 0.324899251064, "case": 0.395406268889, "let": 1.2488025672799998, "world": 0.107420248621, "scienc": 0.841436178891, "kdnugget": 7.1076144564399995, "employ": 0.7725602049429999, "logic": 2.18931939783, "major": 0.138474663439, "featur": 0.423387418142, "seek": 1.04293519316, "practic": 0.533182530867, "lack": 0.656050938907, "alreadi": 0.670478380747, "liter": 1.6990638498800001, "trainvalidatetestsplit": 7.1076144564399995, "provid": 0.19517784432500002, "about": 0.0628434774746, "valu": 0.823193310148, "either": 0.459327638815, "accord": 0.243650319127, "develop": 0.178624694913, "observ": 0.7995160149320001, "accuraci": 2.5464765406, "what": 0.225887296827, "via": 0.831983625414, "agre": 0.801760369921, "network": 0.9530830530519999, "deriv": 1.02381618275, "lot": 1.4835969502500002, "andor": 6.5370695979699995, "beyond": 0.934469583725, "collect": 0.49536666052, "both": 0.050842533389300004, "baselin": 4.05579271624, "tell": 1.21236434401, "result": 0.136378908381, "varieti": 0.8316941898119999, "set": 0.171496011289, "ani": 0.125608358366, "virtual": 1.4141413514399999, "philosoph": 1.73269223754, "from": 0.000567054168866, "preconfigur": 7.1076144564399995, "authorit": 3.55007100439, "allow": 0.24028061118900002, "sold": 1.02732927261, "work": 0.109034567273, "detail": 0.816187777173, "num": 0.00031499039539700004, "instanc": 1.18089357972, "diagnosi": 3.3608290047500002, "idea": 0.73863592212, "advic": 1.9574402102700001, "solid": 1.8521242986400002, "for": 0.00031499039539700004, "depend": 0.806969815, "predict": 1.6457402376899999, "rope": 3.09609424485, "discuss": 0.78698452262, "with": 0.00119749171339, "she": 0.7701082216959999, "competit": 1.12154907401, "assum": 1.08435313525, "determin": 0.772833019022, "topic": 1.6969991554100001, "split": 1.24442043932, "better": 0.6964279406, "current": 0.42695282784500005, "frequent": 0.7443211360850001, "jupyt": 7.1076144564399995, "preprocess": 7.1076144564399995, "look": 0.6463866936, "popular": 0.41058020877499996, "bag": 2.76380903459, "fan": 1.56967467926, "chanc": 1.44572292349, "think": 1.06717661175, "rear": 2.0641893395200004, "combin": 0.529218310751, "forest": 1.5883097076, "net": 1.9406330919499999, "master": 1.14779935699, "train": 0.660918312839, "again": 0.411340231612, "compar": 0.6239191809269999, "group": 0.190594534797, "doe": 0.5340417297169999, "logist": 2.6461370052, "valid": 1.8889232176800002, "squeez": 3.5722448618800002, "place": 0.0957070839572, "great": 0.235805258079, "intrins": 3.25746685473, "goal": 1.18830712273, "scratch": 3.2509415461, "stratifi": 4.7897618913199995, "big": 1.00798563557, "librari": 0.986809980943, "note": 0.353817568083, "accept": 0.552585882007, "oppos": 0.921405832541, "probabl": 0.972882412913, "notebook": 3.693678049, "into": 0.0149128632287, "prior": 0.778442172521, "cloud": 2.36268232808, "bootstrap": 5.57821925168, "constant": 1.2971646281, "stack": 2.97800175538, "essenti": 1.07434378384, "voila": 7.1076144564399995, "earlier": 0.624742371425, "live": 0.266903399347, "local": 0.416867740206, "choos": 1.43007066072, "axl": 4.08157683339, "guess": 3.22051485947, "against": 0.254802851078, "workflow": 5.91136369821, "help": 0.336207721344, "exploratori": 4.225826442240001, "cover": 0.526975319156, "own": 0.164195077421, "base": 0.13652330228700002, "relat": 0.21310030165399999, "label": 1.49898832727, "hour": 0.815190981077, "post": 0.8057001527009999, "here": 0.8850381883700001, "fastevolv": 7.1076144564399995, "pursu": 1.4240346891, "forgotten": 2.5849901083400004, "much": 0.17749572930100002, "togeth": 0.458032237308, "contain": 0.468845318236, "scikitlearn": 7.1076144564399995, "care": 0.9139943029109999, "adopt": 0.7150533036110001, "problem": 0.569140724273, "job": 1.1798682540899998, "wrote": 0.744188554049, "neural": 4.0853151555, "reput": 1.40229470247, "context": 1.44920491442, "just": 0.289531434109, "treatment": 1.3535776885100002, "rule": 0.554777423537, "standard": 0.63741050982, "type": 0.707101485387, "classifi": 1.6665296351499999, "would": 0.0796176279647, "check": 1.87281049562, "aug": 3.5633162311400004, "rest": 0.671587369833, "ensembl": 2.81820931165, "conform": 2.4580593997499998, "opportun": 1.10258843705, "destin": 1.8001086638400001, "spent": 1.10126129684, "start": 0.236443369291, "took": 0.337177952953, "noth": 1.24245472939, "run": 0.442714975539, "patworthi": 7.1076144564399995, "them": 0.0941833269093, "insight": 2.46841452187, "seri": 0.38193461069799994, "democrat": 1.41621604098, "trust": 1.5883097076, "bad": 1.2221516561799999, "singl": 0.475916769059, "whi": 1.18068843047, "modif": 2.25919647821, "support": 0.237880610037, "comparison": 1.60134527393, "introduct": 1.02276465794, "the": 0.0, "step": 1.03954505698, "perhap": 1.14680739183, "build": 0.491137452091, "pat": 2.57006445813, "settl": 1.13576409285, "algorithm": 3.33044239518, "select": 0.704804687133, "one": 0.0062553516455, "panacea": 6.117215752409999, "same": 0.112059649604, "diatrib": 5.74073818118, "there": 0.0400978929255, "colab": 7.1076144564399995, "inform": 0.454453704662, "possibl": 0.348805474891, "modifi": 1.4936444810499998, "say": 0.562154280552, "best": 0.459227932947, "exampl": 0.40868267499899996, "spend": 1.42534376116, "slight": 1.17966331506, "take": 0.130691962197, "follow": 0.045356911094199995, "now": 0.149092945021, "strategi": 1.49112311818, "further": 0.308815895297, "configur": 2.4427250357499997, "necess": 2.4955450479900003, "hard": 1.00522796406, "interact": 1.4858210267899998, "tip": 2.2430429711200004, "than": 0.0322608622182, "uniform": 1.74451821303, "regress": 3.9359915164199997, "realli": 1.5576408397, "leverag": 3.5767392514699994, "matter": 0.8951625270360001, "issu": 0.364099043934, "exhaust": 2.11092206831, "trick": 2.6897010624299997, "coupl": 1.18089357972, "around": 0.19387710578200001, "mean": 0.37092128352, "vote": 1.09899028905, "seem": 0.829093032276, "beginn": 3.9788316751, "task": 1.35748680661, "role": 0.44036410757399996, "facto": 2.4676713037, "suppos": 1.44225301477, "may": 0.050709995284400004, "becom": 0.11771217648900001, "mayo": 3.90737271112, "past": 0.7016234157610001, "peopl": 0.193265578473, "stand": 0.7345572374320001, "challeng": 0.9392919688950001, "promin": 0.8744110957960001, "want": 0.6916366062549999, "themselv": 0.7225497843690001, "howev": 0.0903151173475, "analysi": 1.2466091029200002, "prove": 0.899024430345, "span": 1.82012472855, "maxim": 2.5594217052, "which": 0.00517841384543, "predictproba": 7.1076144564399995, "like": 0.139053576545, "incarn": 2.90983430697, "such": 0.059695977806, "worthi": 2.9191258953099997, "estim": 0.854377535975, "other": 0.00987474791976, "appli": 0.8316941898119999, "techniqu": 1.31624384807, "consist": 0.398873126426, "show": 0.236682766013, "known": 0.0824180805992, "ultim": 0.9498209395739999, "see": 0.240921585492, "excerpt": 2.53131869155, "sourc": 0.529218310751, "get": 0.579769005782, "random": 1.9727214065099998, "implement": 1.27437940907, "abov": 0.643865229816, "manag": 0.497643387158, "should": 0.509419876758, "except": 0.54202451213, "part": 0.04239531098280001, "yet": 0.754181309241, "recent": 0.434413741288, "celebr": 0.9092920998899999, "next": 0.402163685499, "kera": 6.72812483474, "access": 0.627805882716, "this": 0.0037864490525, "pretti": 2.75684036527, "time": 0.0112115188626, "engin": 0.904767558276, "back": 0.23166743089699998, "bit": 2.12032652634, "similar": 0.318556092114, "conceptu": 2.8723937456, "differ": 0.212321121312, "been": 0.023645982368400004, "profession": 0.970385948273, "statist": 1.4451883070700002, "first": 0.0075872898121599995, "most": 0.020747896295599998, "between": 0.033953681165299995, "return": 0.333126868592, "stanford": 2.53369681396, "drive": 1.07674430203, "rachel": 3.1300918533999997, "along": 0.260344385917, "all": 0.011402632097799998, "top": 0.609100637788, "action": 0.598043165069, "reason": 0.544301552962, "someth": 1.18830712273, "dummyclassifi": 7.1076144564399995, "includ": 0.0188846813905, "jupyterstyl": 7.1076144564399995, "almost": 0.42907884333400004, "exist": 0.38165779408699996, "feasibl": 2.88021938643, "that": 0.00397614837964, "weight": 1.58492352612, "garbag": 3.78368585557, "built": 0.690379535065, "more": 0.017024931599999998, "and": 6.29901420636e-05, "groceri": 3.8232390339599998, "respect": 0.49733261904, "these": 0.0715336194008, "prepar": 0.8879422790620001, "yourself": 3.28064670051, "amount": 0.819898886199, "could": 0.18595627229000003, "comment": 1.11826753454, "state": 0.0466100027668, "crossvalid": 7.1076144564399995, "can": 0.162341096394, "colaboratori": 7.1076144564399995, "make": 0.07349765782289999, "way": 0.19809150993500002, "onli": 0.025324268329099998, "andrew": 1.34145926585, "hardwar": 2.93441131931, "are": 0.0294674735827, "thing": 0.8781935346799999, "accur": 1.75248061485, "read": 0.83939268088, "packag": 2.0577584491900005, "common": 0.338325805271, "chain": 1.64410864979, "data": 1.2168205848, "oper": 0.441342964347, "address": 1.05137103247, "method": 0.944461608841, "thumb": 3.5071459596699994, "rather": 0.442714975539, "sinc": 0.0803681994577, "newcom": 3.31472154739, "yeah": 4.38429678321, "come": 0.28390990653000003, "reflect": 0.85201207065, "might": 0.7683410765340001, "timeconsum": 7.1076144564399995, "matthew": 1.9327693554900003, "direct": 0.200705689496, "import": 0.292818277066, "decis": 0.7701082216959999, "leav": 0.507743957229, "have": 0.0147850023412, "tool": 1.60887117963, "while": 0.04324998379380001, "without": 0.258874517941, "often": 0.258140393351, "within": 0.21263272059799998, "suggest": 0.563702610877, "learn": 0.842752064745, "when": 0.0205549888584, "densiti": 1.9942374574000001, "user": 2.04258810688}, "freq": {"after": 1, "boost": 3, "googl": 4, "vari": 1, "awar": 1, "onc": 1, "pip": 1, "advantag": 1, "fastai": 1, "assign": 3, "addit": 1, "veri": 3, "adequ": 1, "thank": 1, "number": 2, "previous": 2, "welldiscuss": 1, "dataset": 1, "function": 1, "class": 6, "happi": 1, "thoma": 1, "learner": 4, "python": 6, "worst": 1, "well": 4, "unsupervis": 1, "badass": 1, "done": 1, "tree": 6, "garag": 2, "assembl": 1, "creat": 2, "approach": 2, "know": 6, "their": 2, "free": 2, "equal": 1, "particular": 2, "instead": 2, "least": 1, "traintest": 1, "multipl": 1, "how": 3, "test": 7, "news": 1, "fair": 1, "various": 2, "bunch": 1, "had": 2, "especi": 1, "initi": 1, "distribut": 1, "sure": 1, "found": 2, "given": 2, "tutori": 1, "car": 2, "embrac": 1, "factor": 1, "scenario": 1, "consid": 2, "compat": 1, "second": 1, "new": 1, "simpl": 4, "perform": 6, "but": 10, "success": 1, "need": 1, "classif": 3, "final": 1, "where": 1, "tune": 1, "point": 1, "jan": 1, "ann": 1, "docker": 1, "has": 1, "generat": 2, "also": 3, "tensorflow": 1, "thorough": 1, "bonus": 1, "use": 16, "machin": 14, "saniti": 1, "mostfrequ": 2, "establish": 1, "out": 8, "model": 13, "good": 6, "alway": 5, "concept": 1, "titl": 1, "dealership": 3, "numer": 4, "hyperparamet": 1, "configurationheavi": 1, "store": 1, "some": 7, "not": 11, "tri": 1, "kaggl": 3, "less": 1, "disproportion": 2, "specif": 1, "acceler": 1, "aggreg": 1, "will": 3, "solv": 1, "then": 2, "ecuadorian": 1, "they": 1, "sale": 1, "instal": 2, "turn": 1, "case": 1, "let": 1, "world": 1, "scienc": 2, "kdnugget": 1, "employ": 1, "logic": 1, "major": 1, "featur": 1, "seek": 1, "practic": 3, "lack": 1, "alreadi": 1, "liter": 1, "trainvalidatetestsplit": 1, "provid": 3, "about": 4, "valu": 2, "either": 1, "accord": 1, "develop": 1, "observ": 1, "accuraci": 3, "what": 4, "via": 2, "agre": 1, "network": 1, "deriv": 1, "lot": 1, "andor": 1, "beyond": 2, "collect": 1, "both": 2, "baselin": 8, "tell": 1, "result": 5, "varieti": 1, "set": 11, "ani": 3, "virtual": 1, "philosoph": 1, "from": 3, "preconfigur": 1, "authorit": 1, "allow": 1, "sold": 1, "work": 4, "detail": 1, "num": 36, "instanc": 4, "diagnosi": 2, "idea": 1, "advic": 1, "solid": 1, "for": 24, "depend": 1, "predict": 9, "rope": 1, "discuss": 2, "with": 14, "she": 1, "competit": 2, "assum": 1, "determin": 2, "topic": 1, "split": 5, "better": 1, "current": 1, "frequent": 1, "jupyt": 1, "preprocess": 1, "look": 2, "popular": 1, "bag": 6, "fan": 1, "chanc": 1, "think": 2, "rear": 1, "combin": 5, "forest": 5, "net": 1, "master": 3, "train": 14, "again": 1, "compar": 4, "group": 1, "doe": 3, "logist": 2, "valid": 7, "squeez": 1, "place": 1, "great": 2, "intrins": 1, "goal": 1, "scratch": 1, "stratifi": 1, "big": 1, "librari": 2, "note": 1, "accept": 1, "oppos": 1, "probabl": 1, "notebook": 5, "into": 4, "prior": 3, "cloud": 1, "bootstrap": 1, "constant": 2, "stack": 3, "essenti": 1, "voila": 1, "earlier": 1, "live": 1, "local": 1, "choos": 1, "axl": 1, "guess": 1, "against": 1, "workflow": 2, "help": 1, "exploratori": 1, "cover": 1, "own": 1, "base": 2, "relat": 2, "label": 2, "hour": 1, "post": 3, "here": 2, "fastevolv": 1, "pursu": 1, "forgotten": 1, "much": 2, "togeth": 1, "contain": 1, "scikitlearn": 2, "care": 1, "adopt": 1, "problem": 4, "job": 1, "wrote": 1, "neural": 2, "reput": 1, "context": 1, "just": 4, "treatment": 1, "rule": 1, "standard": 1, "type": 2, "classifi": 8, "would": 4, "check": 1, "aug": 5, "rest": 1, "ensembl": 7, "conform": 1, "opportun": 1, "destin": 1, "spent": 1, "start": 2, "took": 1, "noth": 1, "run": 3, "patworthi": 1, "them": 1, "insight": 2, "seri": 3, "democrat": 1, "trust": 2, "bad": 1, "singl": 4, "whi": 3, "modif": 1, "support": 1, "comparison": 1, "introduct": 1, "the": 62, "step": 4, "perhap": 2, "build": 4, "pat": 1, "settl": 1, "algorithm": 8, "select": 2, "one": 5, "panacea": 1, "same": 2, "diatrib": 1, "there": 3, "colab": 1, "inform": 2, "possibl": 1, "modifi": 1, "say": 1, "best": 4, "exampl": 3, "spend": 1, "slight": 1, "take": 4, "follow": 2, "now": 1, "strategi": 1, "further": 1, "configur": 1, "necess": 1, "hard": 2, "interact": 1, "tip": 1, "than": 3, "uniform": 2, "regress": 3, "realli": 1, "leverag": 1, "matter": 1, "issu": 2, "exhaust": 1, "trick": 1, "coupl": 1, "around": 1, "mean": 1, "vote": 2, "seem": 2, "beginn": 1, "task": 3, "role": 1, "facto": 1, "suppos": 1, "may": 8, "becom": 1, "mayo": 1, "past": 1, "peopl": 1, "stand": 1, "challeng": 1, "promin": 1, "want": 1, "themselv": 1, "howev": 1, "analysi": 1, "prove": 1, "span": 1, "maxim": 1, "which": 12, "predictproba": 1, "like": 3, "incarn": 1, "such": 4, "worthi": 1, "estim": 2, "other": 7, "appli": 1, "techniqu": 4, "consist": 1, "show": 1, "known": 1, "ultim": 3, "see": 1, "excerpt": 1, "sourc": 1, "get": 2, "random": 11, "implement": 1, "abov": 1, "manag": 1, "should": 2, "except": 1, "part": 1, "yet": 1, "recent": 2, "celebr": 1, "next": 1, "kera": 2, "access": 1, "this": 10, "pretti": 1, "time": 9, "engin": 1, "back": 2, "bit": 1, "similar": 1, "conceptu": 1, "differ": 4, "been": 3, "profession": 1, "statist": 1, "first": 1, "most": 5, "between": 1, "return": 1, "stanford": 1, "drive": 1, "rachel": 2, "along": 1, "all": 2, "top": 1, "action": 1, "reason": 2, "someth": 4, "dummyclassifi": 1, "includ": 1, "jupyterstyl": 1, "almost": 1, "exist": 3, "feasibl": 1, "that": 16, "weight": 5, "garbag": 2, "built": 1, "more": 9, "and": 29, "groceri": 1, "respect": 1, "these": 3, "prepar": 16, "yourself": 2, "amount": 2, "could": 1, "comment": 1, "state": 1, "crossvalid": 1, "can": 8, "colaboratori": 4, "make": 2, "way": 1, "onli": 2, "andrew": 1, "hardwar": 1, "are": 12, "thing": 10, "accur": 1, "read": 3, "packag": 1, "common": 1, "chain": 2, "data": 33, "oper": 1, "address": 1, "method": 5, "thumb": 1, "rather": 1, "sinc": 2, "newcom": 1, "yeah": 1, "come": 1, "reflect": 1, "might": 1, "timeconsum": 1, "matthew": 1, "direct": 1, "import": 3, "decis": 3, "leav": 1, "have": 11, "tool": 1, "while": 3, "without": 1, "often": 2, "within": 1, "suggest": 1, "learn": 15, "when": 5, "densiti": 1, "user": 1}, "idf": {"after": 1.02070207021, "boost": 9.16099249856, "googl": 11.388809182200001, "vari": 2.4970116388799997, "awar": 4.27693965517, "onc": 1.4974533106999999, "pip": 135.692307692, "advantag": 3.32412060302, "fastai": 1221.23076923, "assign": 3.83663605607, "addit": 1.24634950542, "veri": 1.25880114177, "adequ": 9.0823798627, "thank": 6.00681044268, "number": 1.10142916609, "previous": 1.42846859816, "welldiscuss": 1221.23076923, "dataset": 193.609756098, "function": 2.495441685, "class": 2.11651779763, "happi": 6.125, "thoma": 2.39673913043, "learner": 75.2417061611, "python": 56.2978723404, "worst": 6.653813914500001, "well": 1.0655748708, "unsupervis": 345.13043478300006, "badass": 933.882352941, "done": 2.3302509907499998, "tree": 4.127925117, "garag": 27.2315608919, "assembl": 3.0011342155, "creat": 1.2492917847, "approach": 2.07556543339, "know": 2.59327017315, "their": 1.01547908405, "free": 1.71818181818, "equal": 2.542193755, "particular": 1.3814827706200001, "instead": 1.59461631177, "least": 1.6165359943000002, "traintest": 1221.23076923, "multipl": 2.74813917258, "how": 1.60250328051, "test": 2.65707112971, "news": 2.08182533438, "fair": 3.20533010297, "various": 1.3323262839899999, "bunch": 40.5, "had": 1.0475750577399998, "especi": 1.66712170534, "initi": 1.35, "distribut": 2.7396031061299997, "sure": 7.453521126760001, "found": 1.11387076405, "given": 1.35426085473, "tutori": 59.4606741573, "car": 3.53743315508, "embrac": 8.45817794353, "factor": 2.89127663449, "scenario": 15.3986420951, "consid": 1.2397313759200002, "compat": 15.2068965517, "second": 1.1130898128, "new": 1.0178880554, "simpl": 3.3981164383599998, "perform": 1.5313977042500002, "but": 1.01632417899, "success": 1.32002993265, "need": 1.4372623574099999, "classif": 8.067073170730001, "final": 1.34008609775, "where": 1.06715063521, "tune": 10.4173228346, "point": 1.25990000794, "jan": 8.31639601886, "ann": 5.08357348703, "docker": 337.787234043, "has": 1.0436497502, "generat": 2.05275407292, "also": 1.01476510067, "tensorflow": 1221.23076923, "thorough": 10.956521739100001, "bonus": 19.6485148515, "use": 1.0296387573799999, "machin": 4.02433460076, "saniti": 103.764705882, "mostfrequ": 1221.23076923, "establish": 1.34622233528, "out": 1.06016694491, "model": 2.0905978404, "good": 1.51981619759, "alway": 2.06745670009, "concept": 2.65707112971, "titl": 1.87261146497, "dealership": 85.3548387097, "numer": 1.83325635104, "hyperparamet": 1221.23076923, "configurationheavi": 1221.23076923, "store": 3.44680851064, "some": 1.04036697248, "not": 1.01567398119, "tri": 1.8544562551099997, "kaggl": 1221.23076923, "less": 1.46904783936, "disproportion": 32.33401222, "specif": 1.8719490626099997, "acceler": 8.15408320493, "aggreg": 17.542541436500002, "will": 1.22481098596, "solv": 7.26923076923, "then": 1.08657860516, "ecuadorian": 120.27272727299999, "they": 1.03017325287, "sale": 3.4274611399, "instal": 3.78721374046, "turn": 1.3838912133899999, "case": 1.48498737256, "let": 3.48616600791, "world": 1.11340206186, "scienc": 2.31969608416, "kdnugget": 1221.23076923, "employ": 2.16530278232, "logic": 8.929133858270001, "major": 1.14852058164, "featur": 1.52712581762, "seek": 2.83753351206, "practic": 1.70434782609, "lack": 1.9271667880599999, "alreadi": 1.9551724137900002, "liter": 5.468825353080001, "trainvalidatetestsplit": 1221.23076923, "provid": 1.21552714187, "about": 1.06486015159, "valu": 2.2777618364400003, "either": 1.5830092731099998, "accord": 1.27589809531, "develop": 1.1955719557200002, "observ": 2.22446406053, "accuraci": 12.7620578778, "what": 1.25343439128, "via": 2.2978723404299997, "agre": 2.22946215419, "network": 2.59369384088, "deriv": 2.78379800105, "lot": 4.40877534018, "andor": 690.260869565, "beyond": 2.54586273252, "collect": 1.64109985528, "both": 1.05215720061, "baselin": 57.7309090909, "tell": 3.36142282448, "result": 1.14611608432, "varieti": 2.2972073506, "set": 1.18707940781, "ani": 1.13383802314, "virtual": 4.11295336788, "philosoph": 5.65586034913, "from": 1.00056721497, "preconfigur": 1221.23076923, "authorit": 34.8157894737, "allow": 1.2716059271100002, "sold": 2.7935949322500004, "work": 1.11520089913, "detail": 2.26186066391, "num": 1.00031504001, "instanc": 3.2572835453400004, "diagnosi": 28.8130671506, "idea": 2.0930784443, "advic": 7.08117752007, "solid": 6.37334403854, "for": 1.00031504001, "depend": 2.2411067193700003, "predict": 5.18484650555, "rope": 22.111420612800003, "discuss": 2.19676214197, "with": 1.0011982089899998, "she": 2.16, "competit": 3.06960556845, "assum": 2.9575260804799997, "determin": 2.1658935879900003, "topic": 5.457545548300001, "split": 3.4709226060300002, "better": 2.0065722952500002, "current": 1.5325803649, "frequent": 2.10501193317, "jupyt": 1221.23076923, "preprocess": 1221.23076923, "look": 1.9086318826599997, "popular": 1.50769230769, "bag": 15.8601398601, "fan": 4.805084745759999, "chanc": 4.2449197861000005, "think": 2.90715986083, "rear": 7.87890818859, "combin": 1.69760479042, "forest": 4.89546716004, "net": 6.96315789474, "master": 3.15125049623, "train": 1.9365698950999999, "again": 1.50883862384, "compar": 1.8662278123900002, "group": 1.20996875238, "doe": 1.70581282905, "logist": 14.0994671403, "valid": 6.61224489796, "squeez": 35.5964125561, "place": 1.1004366812200002, "great": 1.26592775696, "intrins": 25.9836333879, "goal": 3.28152128979, "scratch": 25.8146341463, "stratifi": 120.27272727299999, "big": 2.7400759406299997, "librari": 2.68266306185, "note": 1.42449528937, "accept": 1.7377408056, "oppos": 2.51282051282, "probabl": 2.64555907349, "notebook": 40.1924050633, "into": 1.01502461479, "prior": 2.17807655371, "cloud": 10.6193979933, "bootstrap": 264.6, "constant": 3.6589075823900004, "stack": 19.6485148515, "essenti": 2.9280708225700005, "voila": 1221.23076923, "earlier": 1.86776470588, "live": 1.30591428806, "local": 1.51720183486, "choos": 4.17899447223, "axl": 59.2388059701, "guess": 25.0410094637, "against": 1.2902072328299998, "workflow": 369.209302326, "help": 1.39962972759, "exploratori": 68.4310344828, "cover": 1.69380134429, "own": 1.17844418052, "base": 1.14628158845, "relat": 1.23750876919, "label": 4.47715736041, "hour": 2.25960717336, "post": 2.23826307627, "here": 2.42307692308, "fastevolv": 1221.23076923, "pursu": 4.15384615385, "forgotten": 13.2631578947, "much": 1.1942229577299999, "togeth": 1.58095996813, "contain": 1.59814777532, "scikitlearn": 1221.23076923, "care": 2.49426551453, "adopt": 2.0442956477000003, "problem": 1.76674827509, "job": 3.2539454806299997, "wrote": 2.10473286491, "neural": 59.4606741573, "reput": 4.06451612903, "context": 4.25972632144, "just": 1.33580143037, "treatment": 3.87125091441, "rule": 1.7415533128599998, "standard": 1.8915763135900003, "type": 2.0281042411900003, "classifi": 5.2937645882, "would": 1.0828729281799998, "check": 6.50655737705, "aug": 35.28, "rest": 1.9573418813999999, "ensembl": 16.746835443, "conform": 11.6821192053, "opportun": 3.0119521912400002, "destin": 6.0503048780499995, "spent": 3.00795755968, "start": 1.26673581744, "took": 1.4009883515700001, "noth": 3.46410648047, "run": 1.55692850838, "patworthi": 1221.23076923, "them": 1.09876115994, "insight": 11.8037174721, "seri": 1.46511627907, "democrat": 4.1214953271, "trust": 4.89546716004, "bad": 3.3944836433599996, "singl": 1.60948905109, "whi": 3.2566153846200003, "modif": 9.5753920386, "support": 1.2685577307200002, "comparison": 4.9597000937199995, "introduct": 2.7808723068799996, "the": 1.0, "step": 2.8279301745599996, "perhap": 3.14812611541, "build": 1.6341739578, "pat": 13.066666666700002, "settl": 3.1135516768000002, "algorithm": 27.9507042254, "select": 2.02345144022, "one": 1.00627495722, "panacea": 453.6, "same": 1.11857958148, "diatrib": 311.294117647, "there": 1.04091266719, "colab": 1221.23076923, "inform": 1.5753125620200001, "possibl": 1.4173734488, "modifi": 4.45329593268, "say": 1.7544480053, "best": 1.5828514456600002, "exampl": 1.50483412322, "spend": 4.15928739848, "slight": 3.25327868852, "take": 1.13961668222, "follow": 1.04640126549, "now": 1.160780873, "strategi": 4.44208170118, "further": 1.3618116315, "configur": 11.504347826099998, "necess": 12.128342245999999, "hard": 2.73253012048, "interact": 4.4185917061, "tip": 9.42195845697, "than": 1.03278688525, "uniform": 5.7231434751300005, "regress": 51.2129032258, "realli": 4.7476076555, "leverag": 35.7567567568, "matter": 2.44773358002, "issu": 1.43921675279, "exhaust": 8.25585023401, "trick": 14.7272727273, "coupl": 3.2572835453400004, "around": 1.21394708671, "mean": 1.44906900329, "vote": 3.0011342155, "seem": 2.29123971713, "beginn": 53.4545454545, "task": 3.88641370869, "role": 1.55327267391, "facto": 11.794947994100001, "suppos": 4.23021582734, "may": 1.05201775893, "becom": 1.12492028626, "mayo": 49.7680250784, "past": 2.01702452039, "peopl": 1.21320495186, "stand": 2.0845588235299997, "challeng": 2.55816951337, "promin": 2.39746300211, "want": 1.99698113208, "themselv": 2.05967825636, "howev": 1.0945191313299998, "analysi": 3.47852760736, "prove": 2.45720476706, "span": 6.17262830482, "maxim": 12.928338762200001, "which": 1.005191845, "predictproba": 1221.23076923, "like": 1.14918566775, "incarn": 18.3537572254, "such": 1.06151377374, "worthi": 18.5250875146, "estim": 2.34991119005, "other": 1.00992366412, "appli": 2.2972073506, "techniqu": 3.7293868921800004, "consist": 1.4901445466499998, "show": 1.26703910615, "known": 1.0859097127200001, "ultim": 2.58524670249, "see": 1.27242125511, "excerpt": 12.5700712589, "sourc": 1.69760479042, "get": 1.78562591385, "random": 7.1902173913, "implement": 3.57648118946, "abov": 1.90382539873, "manag": 1.6448404475799998, "should": 1.6643254009900001, "except": 1.71948445792, "part": 1.04330682789, "yet": 2.1258703802900003, "recent": 1.54405757635, "celebr": 2.48256450352, "next": 1.4950560316400001, "kera": 835.5789473680001, "access": 1.8734953976900002, "this": 1.00379362671, "pretti": 15.75, "time": 1.01127460348, "engin": 2.47135740971, "back": 1.26070038911, "bit": 8.33385826772, "similar": 1.37514075357, "conceptu": 17.6792873051, "differ": 1.23654490225, "been": 1.0239277652399998, "profession": 2.6389627659599997, "statist": 4.24265098878, "first": 1.00761614623, "most": 1.02096463023, "between": 1.03453668708, "return": 1.39532431007, "stanford": 12.6, "drive": 2.93510815308, "rachel": 22.8760806916, "along": 1.2973768080399999, "all": 1.01146788991, "top": 1.8387769284200002, "action": 1.81855670103, "reason": 1.72340425532, "someth": 3.28152128979, "dummyclassifi": 1221.23076923, "includ": 1.0190641247799999, "jupyterstyl": 1221.23076923, "almost": 1.53584212054, "exist": 1.4647107666799999, "feasibl": 17.8181818182, "that": 1.00398406375, "weight": 4.878918254459999, "garbag": 43.9778393352, "built": 1.99447236181, "more": 1.0171706817, "and": 1.00006299213, "groceri": 45.7521613833, "respect": 1.6443293630200002, "these": 1.07415426252, "prepar": 2.43012398592, "yourself": 26.592964824099997, "amount": 2.27027027027, "could": 1.2043695949, "comment": 3.05954904606, "state": 1.0477133240899998, "crossvalid": 1221.23076923, "can": 1.17626139142, "colaboratori": 1221.23076923, "make": 1.0762660158600001, "way": 1.2190739461, "onli": 1.0256476516600002, "andrew": 3.82462057336, "hardwar": 18.8104265403, "are": 1.02990593578, "thing": 2.4065484311099996, "accur": 5.768895348840001, "read": 2.3149606299200003, "packag": 7.828402366860001, "common": 1.4025974025999999, "chain": 5.17639387023, "data": 3.37643555934, "oper": 1.55479384977, "address": 2.86157173756, "method": 2.5714285714300003, "thumb": 33.3529411765, "rather": 1.55692850838, "sinc": 1.08368600683, "newcom": 27.5147313692, "yeah": 80.1818181818, "come": 1.32831325301, "reflect": 2.3443591258099996, "might": 2.1561863370900003, "timeconsum": 1221.23076923, "matthew": 6.908616187989999, "direct": 1.22226499346, "import": 1.3401992233700002, "decis": 2.16, "leav": 1.6615384615399997, "have": 1.0148948411399998, "tool": 4.99716713881, "while": 1.0441988950299999, "without": 1.29547123623, "often": 1.29452054795, "within": 1.2369302688, "suggest": 1.7571665744299998, "learn": 2.32275054865, "when": 1.02076769755, "densiti": 7.3465987968499995, "user": 7.71053909665}}, "html": "<!DOCTYPE html>\n\n<html lang=\"en-US\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head profile=\"http://gmpg.org/xfn/11\">\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n<title>  5 Things to Know About Machine Learning</title>\n<link href=\"/wp-content/themes/kdn17/images/favicon.ico\" rel=\"shortcut icon\"/>\n<link href=\"/wp-content/themes/kdn17/style.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"/wp-content/themes/kdn17/js/jquery-1.9.1.min.js\" type=\"text/javascript\"></script>\n<script src=\"/aps/kda_all.js\" type=\"text/javascript\"></script>\n<link href=\"/feed/\" rel=\"alternate\" title=\"KDnuggets: Analytics, Big Data, Data Mining and Data Science Feed\" type=\"application/rss+xml\"/>\n<link href=\"//s.w.org\" rel=\"dns-prefetch\"/>\n<link href=\"https://www.kdnuggets.com/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/comments/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/2018/03/5-things-know-about-machine-learning.html/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb 5 Things to Know About Machine Learning Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-json/\" rel=\"https://api.w.org/\"/>\n<link href=\"https://www.kdnuggets.com/xmlrpc.php?rsd\" rel=\"EditURI\" title=\"RSD\" type=\"application/rsd+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-includes/wlwmanifest.xml\" rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\"/>\n<link href=\"https://www.kdnuggets.com/2018/03/top-tweets-feb28-mar06.html\" rel=\"prev\" title=\"Top KDnuggets tweets, Feb 28 \u2013 Mar 6: How to build a #deeplearning model in 15 minutes\"/>\n<link href=\"https://www.kdnuggets.com/2018/03/great-data-scientists-think-outside-redefine-box.html\" rel=\"next\" title=\"Great Data Scientists Don\u2019t Just Think Outside the Box, They Redefine the Box\"/>\n<meta content=\"WordPress 4.9.10\" name=\"generator\">\n<link href=\"https://www.kdnuggets.com/2018/03/5-things-know-about-machine-learning.html\" rel=\"canonical\"/>\n<link href=\"https://www.kdnuggets.com/?p=77387\" rel=\"shortlink\"/>\n<link href=\"https://www.kdnuggets.com/2018/03/5-things-know-about-machine-learning.html\" rel=\"canonical\"/>\n<!-- BEGIN ExactMetrics v5.3.7 Universal Analytics - https://exactmetrics.com/ -->\n<script>\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-361129-1', 'auto');\n  ga('send', 'pageview');\n</script>\n<!-- END ExactMetrics Universal Analytics -->\n</meta></head>\n<body class=\"post-template-default single single-post postid-77387 single-format-standard\">\n<div class=\"main_wrapper\"><!-- publ: 7-Mar, 2018  -->\n<div id=\"wrapper\">\n<div id=\"header\">\n<div id=\"header_log\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<h1>KDnuggets</h1>\n<div class=\"text-container\">\n            \u00a0\u00a0<a href=\"/news/subscribe.html\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a> \u00a0|\n <a href=\"https://twitter.com/kdnuggets\" target=\"_blank\"><img alt=\"Twitter\" height=\"48\" src=\"/images/tw_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n <a href=\"https://www.facebook.com/kdnuggets\" target=\"_blank\"><img alt=\"Facebook\" height=\"48\" src=\"/images/fb_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n<a href=\"https://www.linkedin.com/groups/54257/\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"48\" src=\"/images/in_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \n\u00a0|\u00a0 <a href=\"/contact.html\"><b>Contact</b></a>\n</div>\n</div>\n<div class=\"search\">\n<form action=\"/\" id=\"searchform\" method=\"get\">\n<input id=\"s\" name=\"s\" placeholder=\"search KDnuggets\" type=\"text\" value=\"\"/>\n<input type=\"submit\" value=\"Search\"/></form>\n</div>\n<div href=\"#\" id=\"pull\">\n<img class=\"menu\" src=\"/images/menu-30.png\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<img class=\"search-icon\" src=\"/images/search-icon.png\">\n</img></img></div>\n<div id=\"pull-menu\">\n<div class=\"navigation\"><ul class=\"menu\" id=\"menu-menu\"><li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-1070\" id=\"menu-item-1070\"><a href=\"/software/index.html\" title=\"Data Science Software\">SOFTWARE</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13756\" id=\"menu-item-13756\"><a href=\"/news/index.html\" title=\"News\">News/Blog</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-46286\" id=\"menu-item-46286\"><a href=\"/news/top-stories.html\">Top stories</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-42152\" id=\"menu-item-42152\"><a href=\"https://www.kdnuggets.com/opinions/index.html\" title=\"Opinions\">Opinions</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-46415\" id=\"menu-item-46415\"><a href=\"https://www.kdnuggets.com/tutorials/index.html\">Tutorials</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13364\" id=\"menu-item-13364\"><a href=\"/jobs/index.html\" title=\"Jobs in Analytics, Data Science\">JOBS</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-63505\" id=\"menu-item-63505\"><a href=\"https://www.kdnuggets.com/companies/index.html\">Companies</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13366\" id=\"menu-item-13366\"><a href=\"/courses/index.html\">Courses</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-1499\" id=\"menu-item-1499\"><a href=\"https://www.kdnuggets.com/datasets/index.html\">Datasets</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-14286\" id=\"menu-item-14286\"><a href=\"https://www.kdnuggets.com/education/index.html\" title=\"Education in Analytics, Big Data, Data Science\">EDUCATION</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-51558\" id=\"menu-item-51558\"><a href=\"https://www.kdnuggets.com/education/analytics-data-mining-certificates.html\" title=\"Certificates in Analytics, Big Data, Data Science\">Certificates</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-14752\" id=\"menu-item-14752\"><a href=\"/meetings/index.html\">Meetings</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13721\" id=\"menu-item-13721\"><a href=\"/webcasts/index.html\" title=\"Webcasts and Webinars\">Webinars</a></li>\n</ul></div></div>\n</div> <!--#header end-->\n<div id=\"spacer\">\n         \u00a0\n      </div>\n<div id=\"content_wrapper\">\n<div id=\"ad_wrapper\">\n<script type=\"text/javascript\">\n\tjQuery(function() {\n   \t    var pull        = $('#pull');\n            menu        = $('#header .navigation ul');\n            menuImage = $('#header img.menu');\n            mobileMenu        = $('#pull-menu-mobile');\n            search = $('img.search-icon');\n            searchBar = $('div.search');\n            searchClick = false;\n            search.on('click', function() {\n                  searchBar.slideToggle();\n                  searchClick = true;\n            });  \n     \t    $(menuImage).on('click', function(e) {\n\t        //e.preventDefault();\n                if (!searchClick) {\n                  menu.slideToggle();\n                }\n                searchClick = false;\n\t    });\n           /* pullMobile.on('click', function(e) {\n              e.preventDefault();\n                if (!searchClick) {\n                  mobileMenu.slideToggle();\n                }\n                searchClick = false;\n\t    });*/\n            \n\t});\n\tkpath = '/'; kda_top(); kda_sid_init(); kda_sid_n=3;\n\t</script>\n</div> <div class=\"breadcumb\">\n<br/>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2018/index.html\">2018</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/03/index.html\">Mar</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/03/tutorials.html\">Tutorials, Overviews</a> \u00bb 5 Things to Know About Machine Learning (\u00a0<a href=\"/2018/n11.html\">18:n11</a>\u00a0)    </div>\n<div class=\"single\" id=\"content\">\n<div id=\"post-header\">\n<h1 id=\"title\"><img align=\"right\" alt=\"Silver Blog\" src=\"/images/tkb-1803-s.png\" width=\"94\"/>5 Things to Know About Machine Learning</h1>\n<div class=\"pagi\">\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2018/03/top-tweets-feb28-mar06.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"> <strong>Previous post</strong></img></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2018/03/great-data-scientists-think-outside-redefine-box.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/>\u00a0<br/>\u00a0\n    <div class=\"addthis_native_toolbox\"></div>\n</div>\n<div class=\"tag-data\">Tags: <a href=\"https://www.kdnuggets.com/tag/accuracy\" rel=\"tag\">Accuracy</a>, <a href=\"https://www.kdnuggets.com/tag/colaboratory\" rel=\"tag\">CoLaboratory</a>, <a href=\"https://www.kdnuggets.com/tag/data-preparation\" rel=\"tag\">Data Preparation</a>, <a href=\"https://www.kdnuggets.com/tag/ensemble-methods\" rel=\"tag\">Ensemble Methods</a>, <a href=\"https://www.kdnuggets.com/tag/jupyter\" rel=\"tag\">Jupyter</a>, <a href=\"https://www.kdnuggets.com/tag/machine-learning\" rel=\"tag\">Machine Learning</a>, <a href=\"https://www.kdnuggets.com/tag/validation\" rel=\"tag\">Validation</a></div>\n<br/>\n<p class=\"excerpt\">\n     This post will point out 5 thing to know about machine learning, 5 things which you may not know, may not have been aware of, or may have once known and now forgotten.\n  </p>\n</div>\n<div id=\"post-header-ad\">\n<script type=\"text/javascript\">kda_sid_write(1); kda_sid_n=2;</script>\n</div>\n<hr class=\"grey-line\"/><br/>\n<div class=\"post\" id=\"post-\">\n<div class=\"author-link\"><b>By <a href=\"https://www.kdnuggets.com/author/matt-mayo\" rel=\"author\" title=\"Posts by Matthew Mayo\">Matthew Mayo</a>, KDnuggets.</b></div>\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p>There is always something new to learn on any fast-evolving topic, and machine learning is no exception. This post will point out 5 things to know about machine learning, 5 things which you may not know, may not have been aware of, or may have once known and now forgotten.</p>\n<p>Note that the title of this post is not \"The 5 Most Important Things...\" or \"Top 5 Things...\" to know about machine learning; it's <em>just</em> \"5 Things.\" It's not authoritative or exhaustive, but rather a collection of 5 things that may be of use.</p>\n<p>\u00a0</p>\n<h3>1. Data preparation is 80% of machine learning, so...</h3>\n<p>\u00a0<br>\nIt's fairly well-discussed that data preparation takes a disproportionate amount of time in a machine learning task. Or, at least, a <b>seemingly</b> disproportionate amount of time.</br></p>\n<p>What is commonly lacking in these discussions, beyond the specifics of performing data preparation and the reasons for its importance, is <em>why you should care about performing data preparation</em>. And I don't mean just to have conforming data, but more like a philosophical diatribe as to why you should embrace the data preparation. Live the data preparation. Be one with the data preparation.</p>\n<p><center><img alt=\"Data prep in CRISP-DM\" src=\"/wp-content/uploads/crisp-dm-prep.jpg\" width=\"60%\"><br>\n<font size=\"-1\">Data preparation in the <a href=\"https://en.wikipedia.org/wiki/Cross_Industry_Standard_Process_for_Data_Mining\" target=\"_blank\">CRISP-DM model</a>.</font></br></img></center></p>\n<p>Some of the best machine learning advice that I can think of is that since you are ultimately destined to spend so much of your time on preparing data for The Big Show, being determined to be the very best data preparation professional around is a pretty good goal. Since it's not only time-consuming but of great importance to the steps which follow (garbage in, garbage out), having a reputation as a bad-ass data preparer wouldn't be the worst thing in the world.</p>\n<p>So yeah, while data preparation might take a while to perform and master, that's really not a bad thing. There is opportunity in this necessity, both to stand out in your role, as well as the intrinsic value of knowing you're good at your job.</p>\n<p>For some more practical insight into data preparation, here are a couple of places to start out:</p>\n<ul>\n<li><a href=\"/2017/06/7-steps-mastering-data-preparation-python.html\" rel=\"noopener\" target=\"_blank\">7 Steps to Mastering Data Preparation with Python</a>\n<li><a href=\"/2017/05/machine-learning-workflows-python-scratch-part-1.html\" rel=\"noopener\" target=\"_blank\">Machine Learning Workflows in Python from Scratch Part 1: Data Preparation</a>\n</li></li></ul>\n<p>\u00a0</p>\n<h3>2. The value of a performance baseline</h3>\n<p>\u00a0<br>\nSo you have modeled some data with a particular algorithm, spent time tuning your hyperparameters, performed some feature engineering and/or selection, and you're happy that you have squeezed out a training accuracy of, say, 75%. You pat yourself on the back for all of your hard work.</br></p>\n<p>But what are you comparing your results to? If you don't have a baseline -- <a href=\"http://scikit-learn.org/stable/modules/model_evaluation.html#dummy-estimators\" rel=\"noopener\" target=\"_blank\">a simple sanity check consists of comparing one\u2019s estimator against simple rules of thumb</a> -- then you are literally comparing that hard work to <b>nothing</b>. It's reasonable to assume that almost any accuracy could be considered back pat-worthy without something with which to compare it.</p>\n<p>Random guessing isn't the best strategy for a baseline; instead, accepted methods exist for determining a baseline accuracy for comparison. Scikit-learn, for example, provides a series of baseline classifiers in its <code><a href=\"http://scikit-learn.org/stable/modules/model_evaluation.html#dummy-estimators\" rel=\"noopener\" target=\"_blank\">DummyClassifier</a></code> class:</p>\n<blockquote>\n<ul>\n<li><code>stratified</code> generates random predictions by respecting the training set class distribution.\n<li><code>most_frequent</code> always predicts the most frequent label in the training set.\n<li><code>prior</code> always predicts the class that maximizes the class prior (like <code>most_frequent`) and ``predict_proba</code> returns the class prior.\n<li><code>uniform</code> generates predictions uniformly at random.\n<li><code>constant</code> always predicts a constant label that is provided by the user.</li></li></li></li></li></ul>\n</blockquote>\n<p>Baselines aren't just for classifiers, either; statistical methods exist for baselining regression tasks, for example.</p>\n<p>After exploratory data analysis and data preparation and preprocessing, establishing a baseline is a logical next step in your machine learning workflow.</p>\n<p>\u00a0</p>\n<h3>3. Validation: Beyond training and testing</h3>\n<p>\u00a0<br>\nWhen we build machine learning models, we train them using <em>training data</em>. When we test the resulting models, we use <em>testing data</em>. So where does validation come in?</br></p>\n<p><a href=\"https://twitter.com/math_rachel\" rel=\"noopener\" target=\"_blank\">Rachel Thomas</a> of <a href=\"http://www.fast.ai/\" rel=\"noopener\" target=\"_blank\">fast.ai</a> recently wrote a solid treatment of <a href=\"/2017/11/create-good-validation-set.html\" rel=\"noopener\" target=\"_blank\">how and why to create good validation sets</a>. In it, she covered these 3 types of data as follows:</p>\n<blockquote>\n<ul>\n<li>the training set is used to train a given model\n<li>the validation set is used to choose between models (for instance, does a random forest or a neural net work better for your problem? do you want a random forest with 40 trees or 50 trees?)\n<li>the test set tells you how you\u2019ve done. If you\u2019ve tried out a lot of different models, you may get one that does well on your validation set just by chance, and having a test set helps make sure that is not the case.</li></li></li></ul>\n</blockquote>\n<p><center><img alt=\"under-fitting and over-fitting\" src=\"https://image.ibb.co/bDA9TR/overfitting2.png\" width=\"85%\"/><br/>\n<font size=\"-1\">Source:\u00a0Andrew Ng's Machine Learning class at Stanford</font></center></p>\n<p>So, is randomly splitting your data into test, train, and validation sets always a good idea? As it turns out, no. Rachel addresses this in the context of time series data:</p>\n<blockquote><p>\nKaggle currently has a competition to <a href=\"https://www.kaggle.com/c/favorita-grocery-sales-forecasting\" rel=\"noopener\" target=\"_blank\">predict the sales in a chain of Ecuadorian grocery stores</a>. Kaggle\u2019s \u201ctraining data\u201d runs from Jan 1 2013 to Aug 15 2017 and the test data spans Aug 16 2017 to Aug 31 2017. A good approach would be to use Aug 1 to Aug 15 2017 as your validation set, and all the earlier data as your training set.\n</p></blockquote>\n<p>Much of the rest of the post relates dataset splitting to Kaggle competition data, which is practical information, as well as roping cross-validation into the discussion, which I will leave for you to seek out yourself.</p>\n<p>Other times, random splits of data will be useful; it depends on further factors such as the state of the data when you get it (is it split into train/test already?), as well as what type of data it is (see the time series excerpt above).</p>\n<p>For when random splits <b>are</b> feasible, Scikit-learn may not have a <code>train_validate_test_split</code> method, but you can leverage standard Python libraries to create your own, <a href=\"https://stackoverflow.com/questions/38250710/how-to-split-data-into-3-sets-train-validation-and-test\" rel=\"noopener\" target=\"_blank\">such as that which is found here</a>.</p>\n<p>\u00a0</p>\n<h3>4. There is more to ensembles than a bunch of trees</h3>\n<p>\u00a0<br/>\nAlgorithm selection can be challenging for machine learning newcomers. Often when building classifiers, especially for beginners, an approach is adopted to problem solving which considers single instances of single algorithms.</p>\n<p>However, in a given scenario, it may prove more useful to chain or group classifiers together, using the techniques of voting, weighting, and combination to pursue the most accurate classifier possible. Ensemble learners are classifiers which provide this functionality in a variety of ways.</p>\n<p>Random Forests is a very prominent example of an ensemble learner, which uses numerous decision trees in a single predictive model. Random Forests have been applied to problems with great success, and are celebrated accordingly. But they are not the only ensemble method which exists, and numerous others are also worthy of a look.</p>\n<p><strong>Bagging</strong> operates by simple concept: build a number of models, observe the results of these models, and settle on the majority result. I recently had an issue with the rear axle assembly in my car: I wasn't sold on the diagnosis of the dealership, and so I took it to 2 other garages, both of which agreed the issue was something different than the dealership suggested. <em>Voila</em>. Bagging in action. Random Forests are based on modified bagging techniques.</p>\n<p><center><img alt=\"Bagging\" src=\"https://www.kdnuggets.com/wp-content/uploads/bagging.jpg\" width=\"65%\"/><br/>\n<font size=\"-1\">Bagging, or <em>bootstrap aggregation</em>.</font></center></p>\n<p><strong>Boosting</strong> is similar to bagging, but with one conceptual modification. Instead of assigning equal weighting to models, boosting assigns varying weights to classifiers, and derives its ultimate result based on weighted voting.</p>\n<p>Thinking again of my car problem, perhaps I had been to one particular garage numerous times in the past, and trusted their diagnosis slightly more than others. Also suppose that I was not a fan of previous interactions with the dealership, and that I trusted their insight less. The weights I assigned would be reflective.</p>\n<p><strong>Stacking</strong> is a bit different from the previous 2 techniques as it trains multiple single classifiers, as opposed to various incarnations of the same learner. While bagging and boosting would use numerous models built using various instances of the same classification algorithm (eg. decision tree), stacking builds its models using different classification algorithms (perhaps decision trees, logistic regression, an ANNs, or some other combination). </p>\n<p>A combiner algorithm is then trained to make ultimate predictions using the predictions of other algorithms. This combiner can be any ensemble technique, but logistic regression is often found to be an adequate and simple algorithm to perform this combining. Along with classification, stacking can also be employed in unsupervised learning tasks such as density estimation.</p>\n<p>For some additional detail, <a href=\"/2016/11/data-science-basics-intro-ensemble-learners.html\" rel=\"noopener\" target=\"_blank\">read this introduction to ensemble learners</a>. You can read more on implementing ensembles in Python in <a href=\"/2018/02/introduction-python-ensembles.html\" rel=\"noopener\" target=\"_blank\">this very thorough tutorial</a>.</p>\n<p>\u00a0</p>\n<h3>5. Google Colab?</h3>\n<p>\u00a0<br/>\nFinally, let's look at something more practical. Jupyter Notebooks have become a <em>de facto</em> data science development tool, with most people running notebooks locally or via some other configuration-heavy method such as in Docker containers, or in a virtual machine. Google's Colaboratory is an initiative which allows for Jupyter-style and -compatible notebooks to be run directly in your Google Drive, free of configuration.</p>\n<p>Colaboratory is pre-configured with a number of the most popular Python libraries, and more can be installed within the notebooks themselves thanks to supported package management. For instance, TensorFlow is included, but Keras is not, yet installing Keras via <code>pip</code> takes a matter of seconds.</p>\n<p>In what is likely the best news, if you are working with neural networks you can use GPU hardware acceleration in your training for free for up to 12 hours at a time. This isn't the panacea it may first seem to be, but it's an added bonus, and a good start to democratizing GPU access.</p>\n<p>Read <a href=\"/2018/02/essential-google-colaboratory-tips-tricks.html\" rel=\"noopener\" target=\"_blank\">3 Essential Google Colaboratory Tips &amp; Tricks</a> for more information on how to take advantage of Colaboratory's notebooks in the cloud.</p>\n<p>\u00a0<br/>\n<b>Related</b>:</p>\n<ul class=\"three_ul\">\n<li><a href=\"/2018/02/5-things-about-data-science.html\">5 Things You Need To Know About Data Science</a>\n<li><a href=\"/2015/11/seven-steps-machine-learning-python.html\">7 Steps to Mastering Machine Learning With Python</a>\n<li><a href=\"/2018/02/4-things-machine-learning-ai.html\">4 Things You Probably Didn\u2019t Know Machine Learning and AI was used for</a>\n</li></li></li></ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p> <script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets';\n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div>\n<div class=\"page-link\"></div>\n<div class=\"pagi\">\n<hr class=\"grey-line\"/>\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2018/03/top-tweets-feb28-mar06.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"/> <strong>Previous post</strong></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2018/03/great-data-scientists-think-outside-redefine-box.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/><br/>\n<div>\n<hr class=\"grey-line\"/><br/>\n<h2>Top Stories Past 30 Days</h2>\n<table align=\"center\" cellpadding=\"3\" cellspacing=\"10\" class=\"latn\" width=\"100%\">\n<tr>\n<td valign=\"top\" width=\"50%\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Popular</b></th></tr>\n<tr><td>\n<ol class=\"three_ol\"><li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-1-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-2-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n<li> <a href=\"/2018/05/simplilearn-9-must-have-skills-data-scientist.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-3-simplilearn');\"><b>9 Must-have skills you need to become a Data Scientist, updated</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-4-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/03/another-10-free-must-read-books-for-machine-learning-and-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-5-another-10-books');\"><b>Another 10 Free Must-Read Books for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-6-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/best-data-visualization-techniques.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-7-best-data-viz');\"><b>Best Data Visualization Techniques for small and large data</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td> <td valign=\"top\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Shared</b></th></tr>\n<tr><td><ol class=\"three_ol\">\n<li> <a href=\"/2019/04/another-10-free-must-see-courses-machine-learning-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-1-another-10-courses');\"><b>Another 10 Free Must-See Courses for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-2-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/03/r-vs-python-data-visualization.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-3-r-py-viz');\"><b>R vs Python for Data Visualization</b></a>\n<li> <a href=\"/2019/03/deep-learning-toolset-overview.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-4-dl-toolset');\"><b>The Deep Learning Toolset \u2014 An Overview</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-5-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-6-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-7-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<!--#content end--></div>\n<div id=\"sidebar\">\n<div class=\"latn\">\n<h3><b><a href=\"/news/index.html\">Latest News</a></b></h3>\n<ul style=\"font-size:14px; margin-top:5px\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/kdnuggets-editor.html\">Looking for a KDnuggets Editor</a><li> <a href=\"https://www.kdnuggets.com/2019/04/datarobot-delivering-trusted-ai-microsoft.html\">Delivering Trusted AI with DataRobot and Microsoft</a><li> <a href=\"https://www.kdnuggets.com/2019/04/formulated-ai-data-production-landscape.html\">AI and the data production landscape</a><li> <a href=\"https://www.kdnuggets.com/2019/04/most-desired-skill-data-science.html\">The most desired skill in data science</a><li> <a href=\"https://www.kdnuggets.com/2019/04/projects-include-data-science-portfolio.html\">Projects to Include in a Data Science Portfolio</a><li> <a href=\"https://www.kdnuggets.com/2019/04/rework-meet-worlds-leading-ai-deep-learning-experts.html\">Meet the World\u2019s Leading AI &amp; Deep Learning ...</a></li></li></li></li></li></li></ul>\n</div>\n<div>\n<script type=\"text/javascript\">kda_sid_write(kda_sid_n);</script>\n</div>\n<br/><script src=\"/aps/sbm.js\" type=\"text/javascript\"></script>\n<div class=\"latn\" style=\"margin-top: 15px;\">\n<h3><b>More Recent Stories</b></h3>\n<ul class=\"next-posts\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/rework-meet-worlds-leading-ai-deep-learning-experts.html\">Meet the World\u2019s Leading AI &amp; Deep Learning Experts</a><li> <a href=\"https://www.kdnuggets.com/2019/04/problem-data-science-job-postings.html\">The problem with data science job postings</a><li> <a href=\"https://www.kdnuggets.com/2019/04/graduating-gans-understanding-generative-adversarial-networks.html\">Graduating in GANs: Going From Understanding Generative Advers...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/datax-join-new-generation-ai-technologists.html\">Join the new generation of AI technologists</a><li> <a href=\"https://www.kdnuggets.com/2019/04/top-tweets-apr17-apr23.html\">Top tweets, Apr 17\u201323: The History of Artificial #NeuralN...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/activestate-top-10-python-use-cases.html\">Top 10 Python Use Cases</a><li> <a href=\"https://www.kdnuggets.com/2019/04/future-generative-adversarial-networks.html\">Generative Adversarial Networks \u2013 Key Milestones and Sta...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/attention-craving-rnn-building-transformer-networks.html\">Attention Craving RNNS: Building Up To Transformer Networks</a><li> <a href=\"https://www.kdnuggets.com/jobs/19/04-24-fors-marsh-group-lead-data-scientist.html\">Fors Marsh Group: Lead Data Scientist [Arlington, VA]</a><li> <a href=\"https://www.kdnuggets.com/2019/n16.html\">KDnuggets 19:n16, Apr 24: Data Visualization in Python with...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/paw-mega-paw-las-vegas-lower-rates-end-friday.html\">Lower Rates End Friday for Mega-PAW Vegas \u2013 the Largest Pred...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/top-news-week-0415-0421.html\">Top Stories, Apr 15-21: Data Visualization in Python: Matplotl...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/wharton-customer-analytics-initiative-conference.html\">Wharton Customer Analytics Initiative Annual Conference in Phi...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/machine-learning-graph-analytics.html\">Machine Learning and Deep Link Graph Analytics: A Powerful Com...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/best-masters-data-science-analytics-online.html\">2019 Best Masters in Data Science and Analytics \u2013 Online</a><li> <a href=\"https://www.kdnuggets.com/2019/04/worth-studying-data-science-masters.html\">Was it Worth Studying a Data Science Masters?</a><li> <a href=\"https://www.kdnuggets.com/2019/04/approach-pre-trained-deep-learning-models-caution.html\">Approach pre-trained deep learning models with caution</a><li> <a href=\"https://www.kdnuggets.com/2019/04/coursera-earn-deep-learning-certificate.html\">Earn a Deep Learning Certificate</a><li> <a href=\"https://www.kdnuggets.com/2019/04/octoparse-scrape-data-website.html\">Easy Way to Scrape Data from Website By Yourself</a><li> <a href=\"https://www.kdnuggets.com/2019/04/ai-environment.html\">AI Supporting The Earth</a></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></ul>\n</div>\n</div><div class=\"breadcrumbs_bottom\">\n<div class=\"breadcumb\">\n<br>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2018/index.html\">2018</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/03/index.html\">Mar</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/03/tutorials.html\">Tutorials, Overviews</a> \u00bb 5 Things to Know About Machine Learning (\u00a0<a href=\"/2018/n11.html\">18:n11</a>\u00a0)    </br></div>\n</div>\n<!--#content_wrapper end--></div>\n<br>\n<div id=\"footer\">\n<br/>\u00a9 2019 KDnuggets. <a href=\"/about/index.html\">About KDnuggets</a>. \u00a0<a href=\"/news/privacy-policy.html\">Privacy policy</a>. <a href=\"/terms-of-service.html\">Terms of Service</a><br/>\u00a0\n<div class=\"kd_bottom\">\n<div class=\"footer-container\">\n<div class=\"footer-news\">\n<a href=\"/news/subscribe.html\" onclick=\"_gaq.push(['_trackPageview','/x/bot/sub']);\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a>\n</div>\n<div class=\"footer-sm\">\n<a href=\"https://twitter.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/twt']);\" target=\"_blank\"><img height=\"32\" src=\"/images/tw_c48.png\" width=\"32\"/></a>\n<a href=\"https://facebook.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/fb']);\" target=\"_blank\"><img alt=\"Facebook\" height=\"32\" src=\"/images/fb_c48.png\" width=\"32\"/></a>\n<a href=\"https://www.linkedin.com/groups/54257\" onclick=\"_gaq.push(['_trackPageview','/x/bot/in']);\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"32\" src=\"/images/in_c48.png\" width=\"32\"/></a>\n</div>\n</div>\n<div class=\"close-footer\">X</div>\n</div>\n<script type=\"text/javascript\">\n  jQuery('.close-footer').click(\n      function(){       \n         jQuery('.kd_bottom').hide();\n      }\n   );\n</script> </div>\n<div class=\"clear\"><!--blank--></div>\n</br></div>\n<div style=\"display: none;\"><div id=\"boxzilla-box-82996-content\"><script type=\"text/javascript\">(function() {\n\tif (!window.mc4wp) {\n\t\twindow.mc4wp = {\n\t\t\tlisteners: [],\n\t\t\tforms    : {\n\t\t\t\ton: function (event, callback) {\n\t\t\t\t\twindow.mc4wp.listeners.push({\n\t\t\t\t\t\tevent   : event,\n\t\t\t\t\t\tcallback: callback\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})();\n</script><!-- MailChimp for WordPress v4.1.14 - https://wordpress.org/plugins/mailchimp-for-wp/ --><form class=\"mc4wp-form mc4wp-form-77281\" data-id=\"77281\" data-name=\"Subscribe to KDnuggets News\" id=\"mc4wp-form-1\" method=\"post\"><div class=\"mc4wp-form-fields\"><div class=\"header-container\">\n<img align=\"left\" src=\"/wp-content/uploads/envelope.png\"><a href=\"/news/subscribe.html\">Get KDnuggets, a leading newsletter on AI, \r\n  Data Science, and Machine Learning</a>\n</img></div>\n<div class=\"form-fields\">\n<div class=\"field-container\"><label>Email:</label><input maxlength=\"60\" name=\"EMAIL\" placeholder=\"Your email\" required=\"\" size=\"30\" type=\"email\"/></div>\n<div class=\"field-container submit-container\"><div class=\"form-button\" onclick=\"document.getElementById('mc4wp-form-1').submit()\">Sign Up</div></div>\n</div>\n<div>\n<br/><span style=\"font-size:9px\">By subscribing, you agree to KDnuggets <a href=\"https://www.kdnuggets.com/news/privacy-policy.html\">privacy policy</a></span>\n</div>\n<label style=\"display: none !important;\">Leave this field empty if you're human: <input autocomplete=\"off\" name=\"_mc4wp_honeypot\" tabindex=\"-1\" type=\"text\" value=\"\"/></label><input name=\"_mc4wp_timestamp\" type=\"hidden\" value=\"1556482479\"/><input name=\"_mc4wp_form_id\" type=\"hidden\" value=\"77281\"/><input name=\"_mc4wp_form_element_id\" type=\"hidden\" value=\"mc4wp-form-1\"/></div><div class=\"mc4wp-response\"></div></form><!-- / MailChimp for WordPress Plugin -->\n</div></div><script type=\"text/javascript\">(function() {function addEventListener(element,event,handler) {\n\tif(element.addEventListener) {\n\t\telement.addEventListener(event,handler, false);\n\t} else if(element.attachEvent){\n\t\telement.attachEvent('on'+event,handler);\n\t}\n}function maybePrefixUrlField() {\n\tif(this.value.trim() !== '' && this.value.indexOf('http') !== 0) {\n\t\tthis.value = \"http://\" + this.value;\n\t}\n}\n\nvar urlFields = document.querySelectorAll('.mc4wp-form input[type=\"url\"]');\nif( urlFields && urlFields.length > 0 ) {\n\tfor( var j=0; j < urlFields.length; j++ ) {\n\t\taddEventListener(urlFields[j],'blur',maybePrefixUrlField);\n\t}\n}/* test if browser supports date fields */\nvar testInput = document.createElement('input');\ntestInput.setAttribute('type', 'date');\nif( testInput.type !== 'date') {\n\n\t/* add placeholder & pattern to all date fields */\n\tvar dateFields = document.querySelectorAll('.mc4wp-form input[type=\"date\"]');\n\tfor(var i=0; i<dateFields.length; i++) {\n\t\tif(!dateFields[i].placeholder) {\n\t\t\tdateFields[i].placeholder = 'YYYY-MM-DD';\n\t\t}\n\t\tif(!dateFields[i].pattern) {\n\t\t\tdateFields[i].pattern = '[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])';\n\t\t}\n\t}\n}\n\n})();</script><script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_options = {\"testMode\":\"\",\"boxes\":[{\"id\":82996,\"icon\":\"&times;\",\"content\":\"\",\"css\":{\"background_color\":\"#eeee22\",\"width\":600,\"border_width\":2,\"border_style\":\"double\",\"position\":\"center\"},\"trigger\":{\"method\":\"time_on_page\",\"value\":\"3\"},\"animation\":\"fade\",\"cookie\":{\"triggered\":0,\"dismissed\":336},\"rehide\":true,\"position\":\"center\",\"screenWidthCondition\":{\"condition\":\"larger\",\"value\":500},\"closable\":true,\"post\":{\"id\":82996,\"title\":\"Subscribe to KDnuggets\",\"slug\":\"subscribe-to-kdnuggets\"}}]};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla/assets/js/script.min.js?ver=3.2.5\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_stats_config = {\"ajaxurl\":\"https:\\/\\/www.kdnuggets.com\\/wp-admin\\/admin-ajax.php?action=boxzilla_stats_track\"};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla-stats/assets/js/tracking.min.js?ver=1.0.4\" type=\"text/javascript\"></script>\n<script src=\"https://www.kdnuggets.com/wp-includes/js/wp-embed.min.js?ver=4.9.10\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar mc4wp_forms_config = [];\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/forms-api.min.js?ver=4.1.14\" type=\"text/javascript\"></script>\n<!--[if lte IE 9]>\n<script type='text/javascript' src='https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/third-party/placeholders.min.js?ver=4.1.14'></script>\n<![endif]-->\n<!--/.main_wrapper--></div>\n<script src=\"https://s7.addthis.com/js/300/addthis_widget.js#pubid=gpsaddthis\" type=\"text/javascript\"></script>\n</body>\n</html>\n<!-- Dynamic page generated in 0.766 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2019-04-28 16:14:39 -->\n<!-- Compression = gzip -->", "content_tokenized": ["matthew", "mayo", "kdnugget", "comment", "there", "alway", "someth", "new", "learn", "ani", "fastevolv", "topic", "and", "machin", "learn", "except", "this", "post", "will", "point", "out", "num", "thing", "know", "about", "machin", "learn", "num", "thing", "which", "may", "not", "know", "may", "not", "have", "been", "awar", "may", "have", "onc", "known", "and", "now", "forgotten", "note", "that", "the", "titl", "this", "post", "not", "the", "num", "most", "import", "thing", "top", "num", "thing", "know", "about", "machin", "learn", "just", "num", "thing", "not", "authorit", "exhaust", "but", "rather", "collect", "num", "thing", "that", "may", "use", "num", "data", "prepar", "num", "machin", "learn", "fair", "welldiscuss", "that", "data", "prepar", "take", "disproportion", "amount", "time", "machin", "learn", "task", "least", "seem", "disproportion", "amount", "time", "what", "common", "lack", "these", "discuss", "beyond", "the", "specif", "perform", "data", "prepar", "and", "the", "reason", "for", "import", "whi", "should", "care", "about", "perform", "data", "prepar", "and", "mean", "just", "have", "conform", "data", "but", "more", "like", "philosoph", "diatrib", "whi", "should", "embrac", "the", "data", "prepar", "live", "the", "data", "prepar", "one", "with", "the", "data", "prepar", "data", "prepar", "the", "model", "some", "the", "best", "machin", "learn", "advic", "that", "can", "think", "that", "sinc", "are", "ultim", "destin", "spend", "much", "time", "prepar", "data", "for", "the", "big", "show", "determin", "the", "veri", "best", "data", "prepar", "profession", "around", "pretti", "good", "goal", "sinc", "not", "onli", "timeconsum", "but", "great", "import", "the", "step", "which", "follow", "garbag", "garbag", "out", "have", "reput", "badass", "data", "prepar", "would", "the", "worst", "thing", "the", "world", "yeah", "while", "data", "prepar", "might", "take", "while", "perform", "and", "master", "that", "realli", "not", "bad", "thing", "there", "opportun", "this", "necess", "both", "stand", "out", "role", "well", "the", "intrins", "valu", "know", "good", "job", "for", "some", "more", "practic", "insight", "into", "data", "prepar", "here", "are", "coupl", "place", "start", "out", "num", "step", "master", "data", "prepar", "with", "python", "machin", "learn", "workflow", "python", "from", "scratch", "part", "num", "data", "prepar", "num", "the", "valu", "perform", "baselin", "have", "model", "some", "data", "with", "particular", "algorithm", "spent", "time", "tune", "hyperparamet", "perform", "some", "featur", "engin", "andor", "select", "and", "happi", "that", "have", "squeez", "out", "train", "accuraci", "say", "num", "pat", "yourself", "the", "back", "for", "all", "hard", "work", "but", "what", "are", "compar", "result", "have", "baselin", "simpl", "saniti", "check", "consist", "compar", "one", "estim", "against", "simpl", "rule", "thumb", "then", "are", "liter", "compar", "that", "hard", "work", "noth", "reason", "assum", "that", "almost", "ani", "accuraci", "could", "consid", "back", "patworthi", "without", "someth", "with", "which", "compar", "random", "guess", "the", "best", "strategi", "for", "baselin", "instead", "accept", "method", "exist", "for", "determin", "baselin", "accuraci", "for", "comparison", "scikitlearn", "for", "exampl", "provid", "seri", "baselin", "classifi", "dummyclassifi", "class", "stratifi", "generat", "random", "predict", "respect", "the", "train", "set", "class", "distribut", "mostfrequ", "alway", "predict", "the", "most", "frequent", "label", "the", "train", "set", "prior", "alway", "predict", "the", "class", "that", "maxim", "the", "class", "prior", "like", "mostfrequ", "and", "predictproba", "return", "the", "class", "prior", "uniform", "generat", "predict", "uniform", "random", "constant", "alway", "predict", "constant", "label", "that", "provid", "the", "user", "baselin", "are", "just", "for", "classifi", "either", "statist", "method", "exist", "for", "baselin", "regress", "task", "for", "exampl", "after", "exploratori", "data", "analysi", "and", "data", "prepar", "and", "preprocess", "establish", "baselin", "logic", "next", "step", "machin", "learn", "workflow", "num", "valid", "beyond", "train", "and", "test", "when", "build", "machin", "learn", "model", "train", "them", "use", "train", "data", "when", "test", "the", "result", "model", "use", "test", "data", "where", "doe", "valid", "come", "rachel", "thoma", "fastai", "recent", "wrote", "solid", "treatment", "how", "and", "whi", "creat", "good", "valid", "set", "she", "cover", "these", "num", "type", "data", "follow", "the", "train", "set", "use", "train", "given", "model", "the", "valid", "set", "use", "choos", "between", "model", "for", "instanc", "doe", "random", "forest", "neural", "net", "work", "better", "for", "problem", "want", "random", "forest", "with", "num", "tree", "num", "tree", "the", "test", "set", "tell", "how", "done", "tri", "out", "lot", "differ", "model", "may", "get", "one", "that", "doe", "well", "valid", "set", "just", "chanc", "and", "have", "test", "set", "help", "make", "sure", "that", "not", "the", "case", "sourc", "andrew", "machin", "learn", "class", "stanford", "random", "split", "data", "into", "test", "train", "and", "valid", "set", "alway", "good", "idea", "turn", "out", "rachel", "address", "this", "the", "context", "time", "seri", "data", "kaggl", "current", "has", "competit", "predict", "the", "sale", "chain", "ecuadorian", "groceri", "store", "kaggl", "train", "data", "run", "from", "jan", "num", "num", "aug", "num", "num", "and", "the", "test", "data", "span", "aug", "num", "num", "aug", "num", "num", "good", "approach", "would", "use", "aug", "num", "aug", "num", "num", "valid", "set", "and", "all", "the", "earlier", "data", "train", "set", "much", "the", "rest", "the", "post", "relat", "dataset", "split", "kaggl", "competit", "data", "which", "practic", "inform", "well", "rope", "crossvalid", "into", "the", "discuss", "which", "will", "leav", "for", "seek", "out", "yourself", "other", "time", "random", "split", "data", "will", "use", "depend", "further", "factor", "such", "the", "state", "the", "data", "when", "get", "split", "into", "traintest", "alreadi", "well", "what", "type", "data", "see", "the", "time", "seri", "excerpt", "abov", "for", "when", "random", "split", "are", "feasibl", "scikitlearn", "may", "not", "have", "trainvalidatetestsplit", "method", "but", "can", "leverag", "standard", "python", "librari", "creat", "own", "such", "that", "which", "found", "here", "num", "there", "more", "ensembl", "than", "bunch", "tree", "algorithm", "select", "can", "challeng", "for", "machin", "learn", "newcom", "often", "when", "build", "classifi", "especi", "for", "beginn", "approach", "adopt", "problem", "solv", "which", "consid", "singl", "instanc", "singl", "algorithm", "howev", "given", "scenario", "may", "prove", "more", "use", "chain", "group", "classifi", "togeth", "use", "the", "techniqu", "vote", "weight", "and", "combin", "pursu", "the", "most", "accur", "classifi", "possibl", "ensembl", "learner", "are", "classifi", "which", "provid", "this", "function", "varieti", "way", "random", "forest", "veri", "promin", "exampl", "ensembl", "learner", "which", "use", "numer", "decis", "tree", "singl", "predict", "model", "random", "forest", "have", "been", "appli", "problem", "with", "great", "success", "and", "are", "celebr", "accord", "but", "they", "are", "not", "the", "onli", "ensembl", "method", "which", "exist", "and", "numer", "other", "are", "also", "worthi", "look", "bag", "oper", "simpl", "concept", "build", "number", "model", "observ", "the", "result", "these", "model", "and", "settl", "the", "major", "result", "recent", "had", "issu", "with", "the", "rear", "axl", "assembl", "car", "sold", "the", "diagnosi", "the", "dealership", "and", "took", "num", "other", "garag", "both", "which", "agre", "the", "issu", "someth", "differ", "than", "the", "dealership", "suggest", "voila", "bag", "action", "random", "forest", "are", "base", "modifi", "bag", "techniqu", "bag", "bootstrap", "aggreg", "boost", "similar", "bag", "but", "with", "one", "conceptu", "modif", "instead", "assign", "equal", "weight", "model", "boost", "assign", "vari", "weight", "classifi", "and", "deriv", "ultim", "result", "base", "weight", "vote", "think", "again", "car", "problem", "perhap", "had", "been", "one", "particular", "garag", "numer", "time", "the", "past", "and", "trust", "their", "diagnosi", "slight", "more", "than", "other", "also", "suppos", "that", "not", "fan", "previous", "interact", "with", "the", "dealership", "and", "that", "trust", "their", "insight", "less", "the", "weight", "assign", "would", "reflect", "stack", "bit", "differ", "from", "the", "previous", "num", "techniqu", "train", "multipl", "singl", "classifi", "oppos", "various", "incarn", "the", "same", "learner", "while", "bag", "and", "boost", "would", "use", "numer", "model", "built", "use", "various", "instanc", "the", "same", "classif", "algorithm", "decis", "tree", "stack", "build", "model", "use", "differ", "classif", "algorithm", "perhap", "decis", "tree", "logist", "regress", "ann", "some", "other", "combin", "combin", "algorithm", "then", "train", "make", "ultim", "predict", "use", "the", "predict", "other", "algorithm", "this", "combin", "can", "ani", "ensembl", "techniqu", "but", "logist", "regress", "often", "found", "adequ", "and", "simpl", "algorithm", "perform", "this", "combin", "along", "with", "classif", "stack", "can", "also", "employ", "unsupervis", "learn", "task", "such", "densiti", "estim", "for", "some", "addit", "detail", "read", "this", "introduct", "ensembl", "learner", "can", "read", "more", "implement", "ensembl", "python", "this", "veri", "thorough", "tutori", "num", "googl", "colab", "final", "let", "look", "someth", "more", "practic", "jupyt", "notebook", "have", "becom", "facto", "data", "scienc", "develop", "tool", "with", "most", "peopl", "run", "notebook", "local", "via", "some", "other", "configurationheavi", "method", "such", "docker", "contain", "virtual", "machin", "googl", "colaboratori", "initi", "which", "allow", "for", "jupyterstyl", "and", "compat", "notebook", "run", "direct", "googl", "drive", "free", "configur", "colaboratori", "preconfigur", "with", "number", "the", "most", "popular", "python", "librari", "and", "more", "can", "instal", "within", "the", "notebook", "themselv", "thank", "support", "packag", "manag", "for", "instanc", "tensorflow", "includ", "but", "kera", "not", "yet", "instal", "kera", "via", "pip", "take", "matter", "second", "what", "like", "the", "best", "news", "are", "work", "with", "neural", "network", "can", "use", "hardwar", "acceler", "train", "for", "free", "for", "num", "hour", "time", "this", "the", "panacea", "may", "first", "seem", "but", "bonus", "and", "good", "start", "democrat", "access", "read", "num", "essenti", "googl", "colaboratori", "tip", "trick", "for", "more", "inform", "how", "take", "advantag", "colaboratori", "notebook", "the", "cloud", "relat", "num", "thing", "need", "know", "about", "data", "scienc", "num", "step", "master", "machin", "learn", "with", "python", "num", "thing", "probabl", "know", "machin", "learn", "and", "use", "for"], "timestamp_scraper": 1556482479.675915, "title": "5 Things to Know About Machine Learning", "read_time": 502.79999999999995, "content_html": "<div class=\"post\" id=\"post-\">\n<div class=\"author-link\"><b>By <a href=\"https://www.kdnuggets.com/author/matt-mayo\" rel=\"author\" title=\"Posts by Matthew Mayo\">Matthew Mayo</a>, KDnuggets.</b></div>\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p>There is always something new to learn on any fast-evolving topic, and machine learning is no exception. This post will point out 5 things to know about machine learning, 5 things which you may not know, may not have been aware of, or may have once known and now forgotten.</p>\n<p>Note that the title of this post is not \"The 5 Most Important Things...\" or \"Top 5 Things...\" to know about machine learning; it's <em>just</em> \"5 Things.\" It's not authoritative or exhaustive, but rather a collection of 5 things that may be of use.</p>\n<p>\u00a0</p>\n<h3>1. Data preparation is 80% of machine learning, so...</h3>\n<p>\u00a0<br>\nIt's fairly well-discussed that data preparation takes a disproportionate amount of time in a machine learning task. Or, at least, a <b>seemingly</b> disproportionate amount of time.</br></p>\n<p>What is commonly lacking in these discussions, beyond the specifics of performing data preparation and the reasons for its importance, is <em>why you should care about performing data preparation</em>. And I don't mean just to have conforming data, but more like a philosophical diatribe as to why you should embrace the data preparation. Live the data preparation. Be one with the data preparation.</p>\n<p><center><img alt=\"Data prep in CRISP-DM\" src=\"/wp-content/uploads/crisp-dm-prep.jpg\" width=\"60%\"><br>\n<font size=\"-1\">Data preparation in the <a href=\"https://en.wikipedia.org/wiki/Cross_Industry_Standard_Process_for_Data_Mining\" target=\"_blank\">CRISP-DM model</a>.</font></br></img></center></p>\n<p>Some of the best machine learning advice that I can think of is that since you are ultimately destined to spend so much of your time on preparing data for The Big Show, being determined to be the very best data preparation professional around is a pretty good goal. Since it's not only time-consuming but of great importance to the steps which follow (garbage in, garbage out), having a reputation as a bad-ass data preparer wouldn't be the worst thing in the world.</p>\n<p>So yeah, while data preparation might take a while to perform and master, that's really not a bad thing. There is opportunity in this necessity, both to stand out in your role, as well as the intrinsic value of knowing you're good at your job.</p>\n<p>For some more practical insight into data preparation, here are a couple of places to start out:</p>\n<ul>\n<li><a href=\"/2017/06/7-steps-mastering-data-preparation-python.html\" rel=\"noopener\" target=\"_blank\">7 Steps to Mastering Data Preparation with Python</a>\n<li><a href=\"/2017/05/machine-learning-workflows-python-scratch-part-1.html\" rel=\"noopener\" target=\"_blank\">Machine Learning Workflows in Python from Scratch Part 1: Data Preparation</a>\n</li></li></ul>\n<p>\u00a0</p>\n<h3>2. The value of a performance baseline</h3>\n<p>\u00a0<br>\nSo you have modeled some data with a particular algorithm, spent time tuning your hyperparameters, performed some feature engineering and/or selection, and you're happy that you have squeezed out a training accuracy of, say, 75%. You pat yourself on the back for all of your hard work.</br></p>\n<p>But what are you comparing your results to? If you don't have a baseline -- <a href=\"http://scikit-learn.org/stable/modules/model_evaluation.html#dummy-estimators\" rel=\"noopener\" target=\"_blank\">a simple sanity check consists of comparing one\u2019s estimator against simple rules of thumb</a> -- then you are literally comparing that hard work to <b>nothing</b>. It's reasonable to assume that almost any accuracy could be considered back pat-worthy without something with which to compare it.</p>\n<p>Random guessing isn't the best strategy for a baseline; instead, accepted methods exist for determining a baseline accuracy for comparison. Scikit-learn, for example, provides a series of baseline classifiers in its <code><a href=\"http://scikit-learn.org/stable/modules/model_evaluation.html#dummy-estimators\" rel=\"noopener\" target=\"_blank\">DummyClassifier</a></code> class:</p>\n<blockquote>\n<ul>\n<li><code>stratified</code> generates random predictions by respecting the training set class distribution.\n<li><code>most_frequent</code> always predicts the most frequent label in the training set.\n<li><code>prior</code> always predicts the class that maximizes the class prior (like <code>most_frequent`) and ``predict_proba</code> returns the class prior.\n<li><code>uniform</code> generates predictions uniformly at random.\n<li><code>constant</code> always predicts a constant label that is provided by the user.</li></li></li></li></li></ul>\n</blockquote>\n<p>Baselines aren't just for classifiers, either; statistical methods exist for baselining regression tasks, for example.</p>\n<p>After exploratory data analysis and data preparation and preprocessing, establishing a baseline is a logical next step in your machine learning workflow.</p>\n<p>\u00a0</p>\n<h3>3. Validation: Beyond training and testing</h3>\n<p>\u00a0<br>\nWhen we build machine learning models, we train them using <em>training data</em>. When we test the resulting models, we use <em>testing data</em>. So where does validation come in?</br></p>\n<p><a href=\"https://twitter.com/math_rachel\" rel=\"noopener\" target=\"_blank\">Rachel Thomas</a> of <a href=\"http://www.fast.ai/\" rel=\"noopener\" target=\"_blank\">fast.ai</a> recently wrote a solid treatment of <a href=\"/2017/11/create-good-validation-set.html\" rel=\"noopener\" target=\"_blank\">how and why to create good validation sets</a>. In it, she covered these 3 types of data as follows:</p>\n<blockquote>\n<ul>\n<li>the training set is used to train a given model\n<li>the validation set is used to choose between models (for instance, does a random forest or a neural net work better for your problem? do you want a random forest with 40 trees or 50 trees?)\n<li>the test set tells you how you\u2019ve done. If you\u2019ve tried out a lot of different models, you may get one that does well on your validation set just by chance, and having a test set helps make sure that is not the case.</li></li></li></ul>\n</blockquote>\n<p><center><img alt=\"under-fitting and over-fitting\" src=\"https://image.ibb.co/bDA9TR/overfitting2.png\" width=\"85%\"/><br/>\n<font size=\"-1\">Source:\u00a0Andrew Ng's Machine Learning class at Stanford</font></center></p>\n<p>So, is randomly splitting your data into test, train, and validation sets always a good idea? As it turns out, no. Rachel addresses this in the context of time series data:</p>\n<blockquote><p>\nKaggle currently has a competition to <a href=\"https://www.kaggle.com/c/favorita-grocery-sales-forecasting\" rel=\"noopener\" target=\"_blank\">predict the sales in a chain of Ecuadorian grocery stores</a>. Kaggle\u2019s \u201ctraining data\u201d runs from Jan 1 2013 to Aug 15 2017 and the test data spans Aug 16 2017 to Aug 31 2017. A good approach would be to use Aug 1 to Aug 15 2017 as your validation set, and all the earlier data as your training set.\n</p></blockquote>\n<p>Much of the rest of the post relates dataset splitting to Kaggle competition data, which is practical information, as well as roping cross-validation into the discussion, which I will leave for you to seek out yourself.</p>\n<p>Other times, random splits of data will be useful; it depends on further factors such as the state of the data when you get it (is it split into train/test already?), as well as what type of data it is (see the time series excerpt above).</p>\n<p>For when random splits <b>are</b> feasible, Scikit-learn may not have a <code>train_validate_test_split</code> method, but you can leverage standard Python libraries to create your own, <a href=\"https://stackoverflow.com/questions/38250710/how-to-split-data-into-3-sets-train-validation-and-test\" rel=\"noopener\" target=\"_blank\">such as that which is found here</a>.</p>\n<p>\u00a0</p>\n<h3>4. There is more to ensembles than a bunch of trees</h3>\n<p>\u00a0<br/>\nAlgorithm selection can be challenging for machine learning newcomers. Often when building classifiers, especially for beginners, an approach is adopted to problem solving which considers single instances of single algorithms.</p>\n<p>However, in a given scenario, it may prove more useful to chain or group classifiers together, using the techniques of voting, weighting, and combination to pursue the most accurate classifier possible. Ensemble learners are classifiers which provide this functionality in a variety of ways.</p>\n<p>Random Forests is a very prominent example of an ensemble learner, which uses numerous decision trees in a single predictive model. Random Forests have been applied to problems with great success, and are celebrated accordingly. But they are not the only ensemble method which exists, and numerous others are also worthy of a look.</p>\n<p><strong>Bagging</strong> operates by simple concept: build a number of models, observe the results of these models, and settle on the majority result. I recently had an issue with the rear axle assembly in my car: I wasn't sold on the diagnosis of the dealership, and so I took it to 2 other garages, both of which agreed the issue was something different than the dealership suggested. <em>Voila</em>. Bagging in action. Random Forests are based on modified bagging techniques.</p>\n<p><center><img alt=\"Bagging\" src=\"https://www.kdnuggets.com/wp-content/uploads/bagging.jpg\" width=\"65%\"/><br/>\n<font size=\"-1\">Bagging, or <em>bootstrap aggregation</em>.</font></center></p>\n<p><strong>Boosting</strong> is similar to bagging, but with one conceptual modification. Instead of assigning equal weighting to models, boosting assigns varying weights to classifiers, and derives its ultimate result based on weighted voting.</p>\n<p>Thinking again of my car problem, perhaps I had been to one particular garage numerous times in the past, and trusted their diagnosis slightly more than others. Also suppose that I was not a fan of previous interactions with the dealership, and that I trusted their insight less. The weights I assigned would be reflective.</p>\n<p><strong>Stacking</strong> is a bit different from the previous 2 techniques as it trains multiple single classifiers, as opposed to various incarnations of the same learner. While bagging and boosting would use numerous models built using various instances of the same classification algorithm (eg. decision tree), stacking builds its models using different classification algorithms (perhaps decision trees, logistic regression, an ANNs, or some other combination). </p>\n<p>A combiner algorithm is then trained to make ultimate predictions using the predictions of other algorithms. This combiner can be any ensemble technique, but logistic regression is often found to be an adequate and simple algorithm to perform this combining. Along with classification, stacking can also be employed in unsupervised learning tasks such as density estimation.</p>\n<p>For some additional detail, <a href=\"/2016/11/data-science-basics-intro-ensemble-learners.html\" rel=\"noopener\" target=\"_blank\">read this introduction to ensemble learners</a>. You can read more on implementing ensembles in Python in <a href=\"/2018/02/introduction-python-ensembles.html\" rel=\"noopener\" target=\"_blank\">this very thorough tutorial</a>.</p>\n<p>\u00a0</p>\n<h3>5. Google Colab?</h3>\n<p>\u00a0<br/>\nFinally, let's look at something more practical. Jupyter Notebooks have become a <em>de facto</em> data science development tool, with most people running notebooks locally or via some other configuration-heavy method such as in Docker containers, or in a virtual machine. Google's Colaboratory is an initiative which allows for Jupyter-style and -compatible notebooks to be run directly in your Google Drive, free of configuration.</p>\n<p>Colaboratory is pre-configured with a number of the most popular Python libraries, and more can be installed within the notebooks themselves thanks to supported package management. For instance, TensorFlow is included, but Keras is not, yet installing Keras via <code>pip</code> takes a matter of seconds.</p>\n<p>In what is likely the best news, if you are working with neural networks you can use GPU hardware acceleration in your training for free for up to 12 hours at a time. This isn't the panacea it may first seem to be, but it's an added bonus, and a good start to democratizing GPU access.</p>\n<p>Read <a href=\"/2018/02/essential-google-colaboratory-tips-tricks.html\" rel=\"noopener\" target=\"_blank\">3 Essential Google Colaboratory Tips &amp; Tricks</a> for more information on how to take advantage of Colaboratory's notebooks in the cloud.</p>\n<p>\u00a0<br/>\n<b>Related</b>:</p>\n<ul class=\"three_ul\">\n<li><a href=\"/2018/02/5-things-about-data-science.html\">5 Things You Need To Know About Data Science</a>\n<li><a href=\"/2015/11/seven-steps-machine-learning-python.html\">7 Steps to Mastering Machine Learning With Python</a>\n<li><a href=\"/2018/02/4-things-machine-learning-ai.html\">4 Things You Probably Didn\u2019t Know Machine Learning and AI was used for</a>\n</li></li></li></ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p> <script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets';\n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div> ", "website": "kdnuggets"}