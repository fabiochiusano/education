{"content": "By Matthew Mayo , KDnuggets. comments We're back. Again. The \"Overlook...\" posts have been dormant for a few months, but fret not, here's another installment. We continue on with the modest quest of bringing formidable, lesser-known machine learning projects to a few additional sets of eyes. This outing is made up exclusively of Python projects, not by intention design, but no doubt influenced by my own biases. While previous iterations have included projects in all sorts of lnauges (R, Go, C++, Scala, Java, etc.), I promise an all R version sometime soon, and will employ some outside assistance when it comes to evaluating those projects (I'm admittedly not very well tuned into the R ecosystem). Here are 5 hand-picked projects for some potential fresh machine learning ideas. \u00a0 1. Live Loss Plot Don't train deep learning models blindfolded! Be impatient and look at each epoch of your training! A live training loss plot in Jupyter Notebook for Keras, PyTorch and other frameworks. An open source Python package by Piotr Migda\u0142 et al. When used with Keras, Live Loss Plot is a simple callback function. \r from livelossplot import PlotLossesKeras\r \r ,\r callbacks=[],\r verbose=0) \u00a0 2. Parfit Out next project comes from Jason Carpenter, a Master's candidate in Data Science at University of San Francisco, and a Machine Learning Engineer Intern at Manifold. A package for parallelizing the fit and flexibly scoring of sklearn machine learning models, with visualization routines. Once imported, you can use  or other functions freely. A code example: \r from parfit import bestFit # Necessary if you wish to use bestFit\r \r # Necessary if you wish to run each step sequentially\r from parfit.fit import *\r from parfit.score import *\r from parfit.plot import *\r from parfit.crossval import *\r \r grid = {\r 'min_samples_leaf': [1, 5, 10, 15, 20, 25],\r 'max_features': ['sqrt', 'log2', 0.5, 0.6, 0.7],\r 'n_estimators': [60],\r 'n_jobs': [-1],\r 'random_state': [42]\r }\r paramGrid = \r \r best_model, best_score, all_models, all_scores = , paramGrid,\r X_train, y_train, X_val, y_val, # nfolds=5 [optional, instead of validation set]\r metric=roc_auc_score, greater_is_better=True, \r scoreLabel='AUC')\r \r \r \u00a0 3. Yellowbrick Yellowbrick is \"Visual analysis and diagnostic tools to facilitate machine learning model selection.\" In more detail: Yellowbrick is a suite of visual diagnostic tools called \"Visualizers\" that extend the scikit-learn API to allow human steering of the model selection process. In a nutshell, Yellowbrick combines scikit-learn with matplotlib in the best tradition of the scikit-learn documentation, but to produce visualizations for your models! Check out the Github repo for examples, and the documentation for much more . \u00a0 4. textgenrnn textgenrnn brings an additional layer of abstraction to text generation tasks, and aims to allow you to \"easily train your own text-generating neural network of any size and complexity on any text dataset with a few lines of code.\" The project is built on top of Keras and boasts the following select features: A modern neural network architecture which utilizes new techniques as attention-weighting and skip-embedding to accelerate training and improve model quality. Able to train on and generate text at either the character-level or word-level. Able to configure RNN size, the number of RNN layers, and whether to use bidirectional RNNs. Able to train on any generic input text file, including large files. Able to train models on a GPU and then use them to generate text with a CPU. Able to utilize a powerful CuDNN implementation of RNNs when trained on the GPU, which massively speeds up training time as opposed to typical LSTM implementations. textgenrnn is incredibly easy to get up and running with: \r from textgenrnn import textgenrnn\r \r textgen = \r \r \r You can find more info and examples on the Github repo linked above. \u00a0 5. Magnitude Magnitude is \"a fast, simple vector embedding utility library.\" A feature-packed Python package and vector storage file format for utilizing vector embeddings in machine learning models in a fast, efficient, and simple manner developed by Plasticity. It is primarily intended to be a simpler / faster alternative to Gensim, but can be used as a generic key-vector store for domains outside NLP. The repo provides links to a variety of popular embedding models which have been prepared in the .magnitude format for usage, and also includes instructions on converting any other word embeddings file to the same format. How to import? \r from pymagnitude import *\r vectors =  Right to the point. The Github repo is filled with more info, including everything you know to get up and running with this simplified library for using pre-trained word embeddings. \u00a0 Related : 5 Machine Learning Projects You Should Not Overlook, Feb 2018 5 Machine Learning Projects You Can No Longer Overlook 5 More Machine Learning Projects You Can No Longer Overlook", "title_html": "<h1 id=\"title\"><img align=\"right\" alt=\"Silver Blog\" src=\"/images/tkb-1806-s.png\" width=\"94\"/>5 Machine Learning Projects You Should Not Overlook, June 2018</h1> ", "url": "https://www.kdnuggets.com/2018/06/5-machine-learning-projects-overlook-jun-2018.html", "tfidf": {"tfidf": {"carpent": 22.266479663400002, "fill": 3.33809924306, "tool": 9.99433427762, "univers": 1.24889867841, "onc": 1.4974533106999999, "this": 2.00758725342, "relat": 1.23750876919, "fit": 3.37070063694, "here": 4.84615384616, "typic": 2.2541530597799997, "project": 17.5347912525, "lognum": 1058.4, "matthew": 6.908616187989999, "diagnost": 68.1373390558, "repo": 1476.837209304, "new": 1.0178880554, "scala": 114.215827338, "minsamplesleaf": 1587.6, "addit": 2.49269901084, "veri": 1.25880114177, "human": 1.8965476048299998, "layer": 16.28307692308, "learn": 23.2275054865, "evalu": 6.9509632224199995, "parallel": 4.57917507932, "etc": 4.2066772655, "dataset": 193.609756098, "simpler": 17.9187358916, "function": 4.99088337, "epoch": 38.347826087, "scikitlearn": 4762.799999999999, "neural": 118.9213483146, "nfoldsnum": 1587.6, "assist": 2.17300848618, "bestfit": 3175.2, "python": 168.8936170212, "manner": 3.93164933135, "time": 1.01127460348, "nutshel": 345.13043478300006, "whether": 2.20683903253, "abov": 1.90382539873, "valid": 6.61224489796, "previous": 1.42846859816, "know": 2.59327017315, "check": 6.50655737705, "out": 2.12033388982, "live": 3.91774286418, "complex": 2.34021226415, "instead": 1.59461631177, "post": 2.23826307627, "massiv": 4.22571200426, "bring": 4.07233551366, "power": 1.3396337861799998, "extend": 1.9604840701400004, "run": 4.6707855251399995, "how": 1.60250328051, "instruct": 4.169117647059999, "them": 1.09876115994, "speed": 3.8703071672400005, "simpl": 10.19434931508, "vector": 103.5954323, "can": 5.8813069571, "parfit": 3175.2, "featurepack": 1587.6, "word": 3.5930745728199995, "abl": 9.104255075100001, "deep": 3.6279707495399998, "intend": 2.3488681757700003, "will": 1.22481098596, "the": 21.0, "piotr": 149.773584906, "dormant": 49.9245283019, "analysi": 3.47852760736, "fresh": 6.7157360406099995, "ytrain": 1587.6, "maxfeatur": 1587.6, "tradit": 1.60802187785, "number": 1.10142916609, "select": 6.07035432066, "textgen": 1587.6, "next": 1.4950560316400001, "packag": 23.485207100580002, "but": 4.06529671596, "sklearn": 1587.6, "open": 1.24556723678, "parfitfit": 1587.6, "longer": 4.04638715432, "jason": 11.579868709000001, "xtrain": 1587.6, "tune": 10.4173228346, "doubt": 5.31325301205, "quest": 12.6805111821, "yval": 1587.6, "pymagnitud": 1587.6, "best": 1.5828514456600002, "exampl": 4.51450236966, "continu": 1.13928955867, "generat": 6.15826221876, "plastic": 11.0326615705, "again": 1.50883862384, "visual": 26.137635824849998, "use": 7.207471301659999, "follow": 1.04640126549, "sequenti": 39.5910224439, "configur": 11.504347826099998, "code": 7.761427523839999, "model": 18.8153805636, "format": 7.59375, "boast": 13.088211047, "admit": 4.03046458492, "much": 1.1942229577299999, "qualiti": 2.9329392204, "bestmodel": 1587.6, "also": 1.01476510067, "feb": 26.0689655172, "while": 1.0441988950299999, "store": 3.44680851064, "modern": 1.5319888063299998, "loss": 7.275893675520001, "usag": 6.427530364369999, "not": 4.06269592476, "acceler": 8.15408320493, "storag": 8.623574144489998, "task": 3.88641370869, "wish": 7.3551077137, "cudnn": 1587.6, "magnitud": 46.9704142011, "paramgrid": 3175.2, "altern": 2.1390460792200003, "mayo": 49.7680250784, "aim": 2.8960233491400005, "facilit": 6.453658536590001, "easi": 5.2937645882, "jupyt": 1587.6, "notebook": 40.1924050633, "yellowbrick": 6350.4, "util": 18.63927208688, "convert": 3.2740771293099997, "text": 15.64137931035, "generic": 35.9185520362, "design": 1.45825296225, "modest": 10.676529926, "manifold": 66.42677824270001, "xval": 1587.6, "allow": 2.5432118542200004, "handpick": 273.724137931, "scienc": 2.31969608416, "kdnugget": 1587.6, "employ": 2.16530278232, "pytorch": 1587.6, "eye": 3.39375801625, "github": 4762.799999999999, "textgener": 1587.6, "featur": 1.52712581762, "come": 2.65662650602, "wordlevel": 1587.6, "soon": 1.9817750592900003, "abstract": 9.966101694919999, "influenc": 1.77246846042, "other": 3.02977099236, "provid": 1.21552714187, "rnns": 3175.2, "plotlosseskera": 1587.6, "either": 1.5830092731099998, "migda\u0142": 1587.6, "develop": 1.1955719557200002, "bestscor": 1587.6, "some": 2.08073394496, "popular": 1.50769230769, "sourc": 1.69760479042, "blindfold": 178.38202247200002, "get": 3.5712518277, "network": 5.18738768176, "implement": 7.15296237892, "fast": 9.7458563536, "routin": 7.997984886649999, "outsid": 3.3490138171, "intent": 3.19372359686, "file": 15.084085510679998, "built": 1.99447236181, "process": 1.69524826482, "document": 5.0819462228, "lesserknown": 1587.6, "that": 1.00398406375, "fret": 145.651376147, "keyvector": 1587.6, "includ": 4.076256499119999, "produc": 1.36932896326, "when": 3.0623030926499997, "everyth": 4.81967213115, "kera": 2506.736842104, "textgenrnn": 7938.0, "candid": 4.51279135873, "grid": 18.1232876712, "info": 75.4204275534, "ani": 4.53535209256, "randomst": 1587.6, "should": 1.6643254009900001, "and": 21.001322834729997, "from": 9.00510493473, "engin": 2.47135740971, "back": 1.26070038911, "which": 3.015575535, "those": 1.19548192771, "outing": 78.2068965517, "detail": 2.26186066391, "num": 22.00693088022, "embed": 84.17815482500001, "been": 2.0478555304799997, "idea": 2.0930784443, "allmodel": 1587.6, "incred": 18.227324913900002, "attentionweight": 1587.6, "domain": 9.39408284024, "for": 11.00346544011, "livelossplot": 1587.6, "version": 2.0083491461099996, "java": 31.625498008, "all": 2.02293577982, "top": 1.8387769284200002, "nestim": 1587.6, "simplifi": 12.109839816900001, "with": 9.010783880909997, "varieti": 2.2972073506, "greaterisbettertru": 1587.6, "steer": 18.0, "are": 1.02990593578, "instal": 3.78721374046, "sqrt": 1587.6, "suit": 3.92873051225, "month": 1.5079787234, "primarili": 2.43459592087, "overlook": 45.6206896552, "look": 1.9086318826599997, "architectur": 5.12790697674, "option": 4.04896710023, "plot": 16.150559511690002, "call": 1.0676529926, "callback": 1323.0, "more": 5.085853408499999, "improv": 2.04376930999, "score": 4.2884927066500005, "parfitplot": 1587.6, "intern": 1.30355530011, "allscor": 1587.6, "prepar": 2.43012398592, "combin": 1.69760479042, "made": 1.07038834951, "bidirect": 288.654545455, "promis": 3.5030891438699996, "master": 3.15125049623, "scorelabelauc": 1587.6, "librari": 5.3653261237, "iter": 37.4433962264, "verbosenum": 1587.6, "then": 1.08657860516, "francisco": 5.2937645882, "faster": 7.61438848921, "set": 2.37415881562, "parfitscor": 1587.6, "each": 2.37949640288, "size": 4.9877474081, "train": 19.365698951, "few": 3.95187520743, "well": 1.0655748708, "metricrocaucscor": 1587.6, "necessari": 5.684210526319999, "step": 2.8279301745599996, "pretrain": 1587.6, "framework": 8.200413223139998, "link": 4.30302208972, "freeli": 11.3643521832, "comment": 3.05954904606, "data": 3.37643555934, "gensim": 1587.6, "anoth": 1.13643521832, "sort": 5.188235294119999, "oppos": 2.51282051282, "skipembed": 1587.6, "machin": 36.219011406839996, "into": 1.01502461479, "sometim": 1.7126213592200001, "bias": 13.7335640138, "matplotlib": 1587.6, "parfitcrossv": 1587.6, "lnaug": 1587.6, "right": 1.4054532577899999, "potenti": 2.52080025405, "import": 13.401992233700001, "ecosystem": 26.111842105300003, "input": 12.2029208301, "techniqu": 3.7293868921800004, "have": 3.0446845234199995, "characterlevel": 1587.6, "formid": 23.1091703057, "flexibl": 9.68639414277, "exclus": 3.40906162766, "impati": 64.5365853659, "easili": 3.6938110749199997, "larg": 1.18574949585, "find": 1.7294117647099998, "point": 1.25990000794, "njob": 1587.6, "line": 1.4182597820299998, "san": 3.30131004367, "same": 1.11857958148, "effici": 5.09335899904, "own": 2.35688836104}, "logtfidf": {"carpent": 3.1030823934900003, "fill": 1.20540155609, "tool": 3.21774235926, "univers": 0.222262105686, "onc": 0.403765872355, "this": 0.007572898105, "relat": 0.21310030165399999, "fit": 1.2151206268899999, "here": 1.7700763767400003, "typic": 0.812774319158, "project": 5.6160188590699995, "lognum": 6.964513612799999, "matthew": 1.9327693554900003, "diagnost": 7.0567563595600005, "repo": 23.64545479284, "new": 0.0177299468511, "scala": 4.73808988077, "minsamplesleaf": 7.369978720910001, "addit": 0.440437765944, "veri": 0.230159793238, "human": 0.640035183243, "layer": 4.1939583247000005, "learn": 8.427520647449999, "evalu": 1.9388802431299998, "parallel": 1.52151886822, "etc": 1.4366730879700003, "dataset": 5.26584456664, "simpler": 2.8858468633, "function": 1.828931483188, "epoch": 3.6466978400800003, "scikitlearn": 22.10993616273, "neural": 8.170630311, "nfoldsnum": 7.369978720910001, "assist": 0.776112606548, "bestfit": 14.739957441820001, "python": 12.09197022888, "manner": 1.36905901503, "time": 0.0112115188626, "nutshel": 5.843922417409999, "whether": 0.791561189647, "abov": 0.643865229816, "valid": 1.8889232176800002, "previous": 0.356602960063, "know": 0.952919694398, "check": 1.87281049562, "out": 0.1168527818386, "live": 0.8007101980410001, "complex": 0.8502416364309999, "instead": 0.46663315041500003, "post": 0.8057001527009999, "massiv": 1.44118776833, "bring": 1.4221389811860001, "power": 0.292396282715, "extend": 0.673191417311, "run": 1.328144926617, "how": 0.47156695693000006, "instruct": 1.42770441799, "them": 0.0941833269093, "speed": 1.3533338752700002, "simpl": 3.66966386817, "vector": 13.01679551188, "can": 0.8117054819699999, "parfit": 14.739957441820001, "featurepack": 7.369978720910001, "word": 1.17172216477, "abl": 2.996519912375, "deep": 1.2886734698, "intend": 0.853933584803, "will": 0.202786534915, "the": 0.0, "piotr": 5.00912471979, "dormant": 3.91051243112, "analysi": 1.2466091029200002, "fresh": 1.9044534353799998, "ytrain": 7.369978720910001, "maxfeatur": 7.369978720910001, "tradit": 0.47500477629199994, "number": 0.0966085784186, "select": 2.114414061399, "textgen": 7.369978720910001, "next": 0.402163685499, "packag": 6.1732753475700015, "but": 0.0647694882876, "sklearn": 7.369978720910001, "open": 0.219591038029, "parfitfit": 7.369978720910001, "longer": 1.4093544835499998, "jason": 2.44926813434, "xtrain": 7.369978720910001, "tune": 2.3434700776599997, "doubt": 1.67020426765, "quest": 2.54006626224, "yval": 7.369978720910001, "pymagnitud": 7.369978720910001, "best": 0.459227932947, "exampl": 1.2260480249969998, "continu": 0.13040487398700001, "generat": 2.1575470252080002, "plastic": 2.40086010702, "again": 0.411340231612, "visual": 8.269691744300001, "use": 0.2044561381212, "follow": 0.045356911094199995, "sequenti": 3.6786023866, "configur": 2.4427250357499997, "code": 2.71203819194, "model": 6.6370506579990005, "format": 2.7861397556189997, "boast": 2.57171190496, "admit": 1.39388165093, "much": 0.17749572930100002, "qualiti": 1.07600506711, "bestmodel": 7.369978720910001, "also": 0.0146571578, "feb": 3.2607455461900003, "while": 0.04324998379380001, "store": 1.2374487335200002, "modern": 0.426566764719, "loss": 2.657863076526, "usag": 1.86059038428, "not": 0.06220965203, "acceler": 2.0985188085299997, "storag": 2.1544996326700003, "task": 1.35748680661, "wish": 2.6044956367, "cudnn": 7.369978720910001, "magnitud": 8.25271688925, "paramgrid": 14.739957441820001, "altern": 0.760359972282, "mayo": 3.90737271112, "aim": 1.06333853704, "facilit": 1.86464718498, "easi": 1.6665296351499999, "jupyt": 7.369978720910001, "notebook": 3.693678049, "yellowbrick": 29.479914883640003, "util": 6.155905584959999, "convert": 1.1860360368, "text": 5.70241004995, "generic": 5.776213502540001, "design": 0.377239118022, "modest": 2.36804786744, "manifold": 4.19610026197, "xval": 7.369978720910001, "allow": 0.48056122237800003, "handpick": 5.61212080336, "scienc": 0.841436178891, "kdnugget": 7.369978720910001, "employ": 0.7725602049429999, "pytorch": 7.369978720910001, "eye": 1.22193786676, "github": 22.10993616273, "textgener": 7.369978720910001, "featur": 0.423387418142, "come": 0.5678198130600001, "wordlevel": 7.369978720910001, "soon": 0.6839929376880001, "abstract": 2.29918950399, "influenc": 0.572373185428, "other": 0.02962424375928, "provid": 0.19517784432500002, "rnns": 14.739957441820001, "plotlosseskera": 7.369978720910001, "either": 0.459327638815, "migda\u0142": 7.369978720910001, "develop": 0.178624694913, "bestscor": 7.369978720910001, "some": 0.079147018129, "popular": 0.41058020877499996, "sourc": 0.529218310751, "blindfold": 5.18392744417, "get": 1.159538011564, "network": 1.9061661061039998, "implement": 2.54875881814, "fast": 3.1673900494800002, "routin": 2.07918962078, "outsid": 1.03103747797, "intent": 1.16118750781, "file": 5.30938354892, "built": 0.690379535065, "process": 0.527829199025, "document": 1.865094244766, "lesserknown": 7.369978720910001, "that": 0.00397614837964, "fret": 4.9812159316699995, "keyvector": 7.369978720910001, "includ": 0.075538725562, "produc": 0.314320812003, "when": 0.0616649665752, "everyth": 1.57270590317, "kera": 20.18437450422, "textgenrnn": 36.849893604550005, "candid": 1.50691588861, "grid": 2.89719772297, "info": 7.259861960439999, "ani": 0.502433433464, "randomst": 7.369978720910001, "should": 0.509419876758, "and": 0.0013227929833356, "from": 0.005103487519794, "engin": 0.904767558276, "back": 0.23166743089699998, "which": 0.01553524153629, "those": 0.17854939087299998, "outing": 4.35935783486, "detail": 0.816187777173, "num": 0.006929788698734001, "embed": 14.11748765635, "been": 0.04729196473680001, "idea": 0.73863592212, "allmodel": 7.369978720910001, "incred": 2.9029218370499996, "attentionweight": 7.369978720910001, "domain": 2.24008000599, "for": 0.0034648943493670007, "livelossplot": 7.369978720910001, "version": 0.697313064259, "java": 3.45396369421, "all": 0.022805264195599997, "top": 0.609100637788, "nestim": 7.369978720910001, "simplifi": 2.4940183301400003, "with": 0.01077742542051, "varieti": 0.8316941898119999, "greaterisbettertru": 7.369978720910001, "steer": 2.8903717579, "are": 0.0294674735827, "instal": 1.3316305879, "sqrt": 7.369978720910001, "suit": 1.36831634882, "month": 0.410770160338, "primarili": 0.8897807965100001, "overlook": 9.73626789204, "look": 0.6463866936, "architectur": 1.63469757919, "option": 1.39846181161, "plot": 5.05002721527, "call": 0.0654627744488, "callback": 12.989019967119999, "more": 0.08512465799999999, "improv": 0.7147958039319999, "score": 1.4559353207700003, "parfitplot": 7.369978720910001, "intern": 0.265095377816, "allscor": 7.369978720910001, "prepar": 0.8879422790620001, "combin": 0.529218310751, "made": 0.0680215260973, "bidirect": 5.66523062867, "promis": 1.25364519176, "master": 1.14779935699, "scorelabelauc": 7.369978720910001, "librari": 1.973619961886, "iter": 3.62283035867, "verbosenum": 7.369978720910001, "then": 0.08303386523089999, "francisco": 1.6665296351499999, "faster": 2.03003967967, "set": 0.342992022578, "parfitscor": 7.369978720910001, "each": 0.347483378608, "size": 1.8276744121219999, "train": 6.609183128390001, "few": 0.826733740959, "well": 0.0635144383156, "metricrocaucscor": 7.369978720910001, "necessari": 2.0890901347999997, "step": 1.03954505698, "pretrain": 7.369978720910001, "framework": 2.10418454607, "link": 1.5323408136899999, "freeli": 2.43048145465, "comment": 1.11826753454, "data": 1.2168205848, "gensim": 7.369978720910001, "anoth": 0.127896361652, "sort": 1.64639361896, "oppos": 0.921405832541, "skipembed": 7.369978720910001, "machin": 12.531236225579999, "into": 0.0149128632287, "sometim": 0.538025155343, "bias": 2.61984276467, "matplotlib": 7.369978720910001, "parfitcrossv": 7.369978720910001, "lnaug": 7.369978720910001, "right": 0.34035985417, "potenti": 0.9245764122419999, "import": 2.92818277066, "ecosystem": 3.26238893194, "input": 2.50167533539, "techniqu": 1.31624384807, "have": 0.0443550070236, "characterlevel": 7.369978720910001, "formid": 3.14022952168, "flexibl": 2.2707222351599996, "exclus": 1.22643707092, "impati": 4.16723227797, "easili": 1.3066587367, "larg": 0.17037506060600002, "find": 0.547781330288, "point": 0.23103235903299998, "njob": 7.369978720910001, "line": 0.349430614452, "san": 1.1943193726299999, "same": 0.112059649604, "effici": 1.62793753414, "own": 0.328390154842}, "logidf": {"carpent": 3.1030823934900003, "fill": 1.20540155609, "tool": 1.60887117963, "univers": 0.222262105686, "onc": 0.403765872355, "this": 0.0037864490525, "relat": 0.21310030165399999, "fit": 1.2151206268899999, "here": 0.8850381883700001, "typic": 0.812774319158, "project": 0.561601885907, "lognum": 6.964513612799999, "matthew": 1.9327693554900003, "diagnost": 3.5283781797800002, "repo": 5.91136369821, "new": 0.0177299468511, "scala": 4.73808988077, "minsamplesleaf": 7.369978720910001, "addit": 0.220218882972, "veri": 0.230159793238, "human": 0.640035183243, "layer": 2.0969791623500003, "learn": 0.842752064745, "evalu": 1.9388802431299998, "parallel": 1.52151886822, "etc": 1.4366730879700003, "dataset": 5.26584456664, "simpler": 2.8858468633, "function": 0.914465741594, "epoch": 3.6466978400800003, "scikitlearn": 7.369978720910001, "neural": 4.0853151555, "nfoldsnum": 7.369978720910001, "assist": 0.776112606548, "bestfit": 7.369978720910001, "python": 4.03065674296, "manner": 1.36905901503, "time": 0.0112115188626, "nutshel": 5.843922417409999, "whether": 0.791561189647, "abov": 0.643865229816, "valid": 1.8889232176800002, "previous": 0.356602960063, "know": 0.952919694398, "check": 1.87281049562, "out": 0.0584263909193, "live": 0.266903399347, "complex": 0.8502416364309999, "instead": 0.46663315041500003, "post": 0.8057001527009999, "massiv": 1.44118776833, "bring": 0.7110694905930001, "power": 0.292396282715, "extend": 0.673191417311, "run": 0.442714975539, "how": 0.47156695693000006, "instruct": 1.42770441799, "them": 0.0941833269093, "speed": 1.3533338752700002, "simpl": 1.2232212893899999, "vector": 3.25419887797, "can": 0.162341096394, "parfit": 7.369978720910001, "featurepack": 7.369978720910001, "word": 0.585861082385, "abl": 0.599303982475, "deep": 1.2886734698, "intend": 0.853933584803, "will": 0.202786534915, "the": 0.0, "piotr": 5.00912471979, "dormant": 3.91051243112, "analysi": 1.2466091029200002, "fresh": 1.9044534353799998, "ytrain": 7.369978720910001, "maxfeatur": 7.369978720910001, "tradit": 0.47500477629199994, "number": 0.0966085784186, "select": 0.704804687133, "textgen": 7.369978720910001, "next": 0.402163685499, "packag": 2.0577584491900005, "but": 0.0161923720719, "sklearn": 7.369978720910001, "open": 0.219591038029, "parfitfit": 7.369978720910001, "longer": 0.7046772417749999, "jason": 2.44926813434, "xtrain": 7.369978720910001, "tune": 2.3434700776599997, "doubt": 1.67020426765, "quest": 2.54006626224, "yval": 7.369978720910001, "pymagnitud": 7.369978720910001, "best": 0.459227932947, "exampl": 0.40868267499899996, "continu": 0.13040487398700001, "generat": 0.719182341736, "plastic": 2.40086010702, "again": 0.411340231612, "visual": 1.6539383488600001, "use": 0.0292080197316, "follow": 0.045356911094199995, "sequenti": 3.6786023866, "configur": 2.4427250357499997, "code": 1.35601909597, "model": 0.7374500731110001, "format": 0.9287132518729999, "boast": 2.57171190496, "admit": 1.39388165093, "much": 0.17749572930100002, "qualiti": 1.07600506711, "bestmodel": 7.369978720910001, "also": 0.0146571578, "feb": 3.2607455461900003, "while": 0.04324998379380001, "store": 1.2374487335200002, "modern": 0.426566764719, "loss": 0.885954358842, "usag": 1.86059038428, "not": 0.0155524130075, "acceler": 2.0985188085299997, "storag": 2.1544996326700003, "task": 1.35748680661, "wish": 1.30224781835, "cudnn": 7.369978720910001, "magnitud": 2.75090562975, "paramgrid": 7.369978720910001, "altern": 0.760359972282, "mayo": 3.90737271112, "aim": 1.06333853704, "facilit": 1.86464718498, "easi": 1.6665296351499999, "jupyt": 7.369978720910001, "notebook": 3.693678049, "yellowbrick": 7.369978720910001, "util": 1.5389763962399998, "convert": 1.1860360368, "text": 1.14048200999, "generic": 2.8881067512700005, "design": 0.377239118022, "modest": 2.36804786744, "manifold": 4.19610026197, "xval": 7.369978720910001, "allow": 0.24028061118900002, "handpick": 5.61212080336, "scienc": 0.841436178891, "kdnugget": 7.369978720910001, "employ": 0.7725602049429999, "pytorch": 7.369978720910001, "eye": 1.22193786676, "github": 7.369978720910001, "textgener": 7.369978720910001, "featur": 0.423387418142, "come": 0.28390990653000003, "wordlevel": 7.369978720910001, "soon": 0.6839929376880001, "abstract": 2.29918950399, "influenc": 0.572373185428, "other": 0.00987474791976, "provid": 0.19517784432500002, "rnns": 7.369978720910001, "plotlosseskera": 7.369978720910001, "either": 0.459327638815, "migda\u0142": 7.369978720910001, "develop": 0.178624694913, "bestscor": 7.369978720910001, "some": 0.0395735090645, "popular": 0.41058020877499996, "sourc": 0.529218310751, "blindfold": 5.18392744417, "get": 0.579769005782, "network": 0.9530830530519999, "implement": 1.27437940907, "fast": 1.5836950247400001, "routin": 2.07918962078, "outsid": 0.515518738985, "intent": 1.16118750781, "file": 1.32734588723, "built": 0.690379535065, "process": 0.527829199025, "document": 0.932547122383, "lesserknown": 7.369978720910001, "that": 0.00397614837964, "fret": 4.9812159316699995, "keyvector": 7.369978720910001, "includ": 0.0188846813905, "produc": 0.314320812003, "when": 0.0205549888584, "everyth": 1.57270590317, "kera": 6.72812483474, "textgenrnn": 7.369978720910001, "candid": 1.50691588861, "grid": 2.89719772297, "info": 3.6299309802199997, "ani": 0.125608358366, "randomst": 7.369978720910001, "should": 0.509419876758, "and": 6.29901420636e-05, "from": 0.000567054168866, "engin": 0.904767558276, "back": 0.23166743089699998, "which": 0.00517841384543, "those": 0.17854939087299998, "outing": 4.35935783486, "detail": 0.816187777173, "num": 0.00031499039539700004, "embed": 2.82349753127, "been": 0.023645982368400004, "idea": 0.73863592212, "allmodel": 7.369978720910001, "incred": 2.9029218370499996, "attentionweight": 7.369978720910001, "domain": 2.24008000599, "for": 0.00031499039539700004, "livelossplot": 7.369978720910001, "version": 0.697313064259, "java": 3.45396369421, "all": 0.011402632097799998, "top": 0.609100637788, "nestim": 7.369978720910001, "simplifi": 2.4940183301400003, "with": 0.00119749171339, "varieti": 0.8316941898119999, "greaterisbettertru": 7.369978720910001, "steer": 2.8903717579, "are": 0.0294674735827, "instal": 1.3316305879, "sqrt": 7.369978720910001, "suit": 1.36831634882, "month": 0.410770160338, "primarili": 0.8897807965100001, "overlook": 2.43406697301, "look": 0.6463866936, "architectur": 1.63469757919, "option": 1.39846181161, "plot": 1.68334240509, "call": 0.0654627744488, "callback": 6.4945099835599995, "more": 0.017024931599999998, "improv": 0.7147958039319999, "score": 1.4559353207700003, "parfitplot": 7.369978720910001, "intern": 0.265095377816, "allscor": 7.369978720910001, "prepar": 0.8879422790620001, "combin": 0.529218310751, "made": 0.0680215260973, "bidirect": 5.66523062867, "promis": 1.25364519176, "master": 1.14779935699, "scorelabelauc": 7.369978720910001, "librari": 0.986809980943, "iter": 3.62283035867, "verbosenum": 7.369978720910001, "then": 0.08303386523089999, "francisco": 1.6665296351499999, "faster": 2.03003967967, "set": 0.171496011289, "parfitscor": 7.369978720910001, "each": 0.173741689304, "size": 0.9138372060609999, "train": 0.660918312839, "few": 0.275577913653, "well": 0.0635144383156, "metricrocaucscor": 7.369978720910001, "necessari": 1.0445450673999999, "step": 1.03954505698, "pretrain": 7.369978720910001, "framework": 2.10418454607, "link": 0.7661704068449999, "freeli": 2.43048145465, "comment": 1.11826753454, "data": 1.2168205848, "gensim": 7.369978720910001, "anoth": 0.127896361652, "sort": 1.64639361896, "oppos": 0.921405832541, "skipembed": 7.369978720910001, "machin": 1.39235958062, "into": 0.0149128632287, "sometim": 0.538025155343, "bias": 2.61984276467, "matplotlib": 7.369978720910001, "parfitcrossv": 7.369978720910001, "lnaug": 7.369978720910001, "right": 0.34035985417, "potenti": 0.9245764122419999, "import": 0.292818277066, "ecosystem": 3.26238893194, "input": 2.50167533539, "techniqu": 1.31624384807, "have": 0.0147850023412, "characterlevel": 7.369978720910001, "formid": 3.14022952168, "flexibl": 2.2707222351599996, "exclus": 1.22643707092, "impati": 4.16723227797, "easili": 1.3066587367, "larg": 0.17037506060600002, "find": 0.547781330288, "point": 0.23103235903299998, "njob": 7.369978720910001, "line": 0.349430614452, "san": 1.1943193726299999, "same": 0.112059649604, "effici": 1.62793753414, "own": 0.164195077421}, "freq": {"carpent": 1, "fill": 1, "tool": 2, "univers": 1, "onc": 1, "this": 2, "relat": 1, "fit": 1, "here": 2, "typic": 1, "project": 10, "lognum": 1, "matthew": 1, "diagnost": 2, "repo": 4, "new": 1, "scala": 1, "minsamplesleaf": 1, "addit": 2, "veri": 1, "human": 1, "layer": 2, "learn": 10, "evalu": 1, "parallel": 1, "etc": 1, "dataset": 1, "simpler": 1, "function": 2, "epoch": 1, "scikitlearn": 3, "neural": 2, "nfoldsnum": 1, "assist": 1, "bestfit": 2, "python": 3, "manner": 1, "time": 1, "nutshel": 1, "whether": 1, "abov": 1, "valid": 1, "previous": 1, "know": 1, "check": 1, "out": 2, "live": 3, "complex": 1, "instead": 1, "post": 1, "massiv": 1, "bring": 2, "power": 1, "extend": 1, "run": 3, "how": 1, "instruct": 1, "them": 1, "speed": 1, "simpl": 3, "vector": 4, "can": 5, "parfit": 2, "featurepack": 1, "word": 2, "abl": 5, "deep": 1, "intend": 1, "will": 1, "the": 21, "piotr": 1, "dormant": 1, "analysi": 1, "fresh": 1, "ytrain": 1, "maxfeatur": 1, "tradit": 1, "number": 1, "select": 3, "textgen": 1, "next": 1, "packag": 3, "but": 4, "sklearn": 1, "open": 1, "parfitfit": 1, "longer": 2, "jason": 1, "xtrain": 1, "tune": 1, "doubt": 1, "quest": 1, "yval": 1, "pymagnitud": 1, "best": 1, "exampl": 3, "continu": 1, "generat": 3, "plastic": 1, "again": 1, "visual": 5, "use": 7, "follow": 1, "sequenti": 1, "configur": 1, "code": 2, "model": 9, "format": 3, "boast": 1, "admit": 1, "much": 1, "qualiti": 1, "bestmodel": 1, "also": 1, "feb": 1, "while": 1, "store": 1, "modern": 1, "loss": 3, "usag": 1, "not": 4, "acceler": 1, "storag": 1, "task": 1, "wish": 2, "cudnn": 1, "magnitud": 3, "paramgrid": 2, "altern": 1, "mayo": 1, "aim": 1, "facilit": 1, "easi": 1, "jupyt": 1, "notebook": 1, "yellowbrick": 4, "util": 4, "convert": 1, "text": 5, "generic": 2, "design": 1, "modest": 1, "manifold": 1, "xval": 1, "allow": 2, "handpick": 1, "scienc": 1, "kdnugget": 1, "employ": 1, "pytorch": 1, "eye": 1, "github": 3, "textgener": 1, "featur": 1, "come": 2, "wordlevel": 1, "soon": 1, "abstract": 1, "influenc": 1, "other": 3, "provid": 1, "rnns": 2, "plotlosseskera": 1, "either": 1, "migda\u0142": 1, "develop": 1, "bestscor": 1, "some": 2, "popular": 1, "sourc": 1, "blindfold": 1, "get": 2, "network": 2, "implement": 2, "fast": 2, "routin": 1, "outsid": 2, "intent": 1, "file": 4, "built": 1, "process": 1, "document": 2, "lesserknown": 1, "that": 1, "fret": 1, "keyvector": 1, "includ": 4, "produc": 1, "when": 3, "everyth": 1, "kera": 3, "textgenrnn": 5, "candid": 1, "grid": 1, "info": 2, "ani": 4, "randomst": 1, "should": 1, "and": 21, "from": 9, "engin": 1, "back": 1, "which": 3, "those": 1, "outing": 1, "detail": 1, "num": 22, "embed": 5, "been": 2, "idea": 1, "allmodel": 1, "incred": 1, "attentionweight": 1, "domain": 1, "for": 11, "livelossplot": 1, "version": 1, "java": 1, "all": 2, "top": 1, "nestim": 1, "simplifi": 1, "with": 9, "varieti": 1, "greaterisbettertru": 1, "steer": 1, "are": 1, "instal": 1, "sqrt": 1, "suit": 1, "month": 1, "primarili": 1, "overlook": 4, "look": 1, "architectur": 1, "option": 1, "plot": 3, "call": 1, "callback": 2, "more": 5, "improv": 1, "score": 1, "parfitplot": 1, "intern": 1, "allscor": 1, "prepar": 1, "combin": 1, "made": 1, "bidirect": 1, "promis": 1, "master": 1, "scorelabelauc": 1, "librari": 2, "iter": 1, "verbosenum": 1, "then": 1, "francisco": 1, "faster": 1, "set": 2, "parfitscor": 1, "each": 2, "size": 2, "train": 10, "few": 3, "well": 1, "metricrocaucscor": 1, "necessari": 2, "step": 1, "pretrain": 1, "framework": 1, "link": 2, "freeli": 1, "comment": 1, "data": 1, "gensim": 1, "anoth": 1, "sort": 1, "oppos": 1, "skipembed": 1, "machin": 9, "into": 1, "sometim": 1, "bias": 1, "matplotlib": 1, "parfitcrossv": 1, "lnaug": 1, "right": 1, "potenti": 1, "import": 10, "ecosystem": 1, "input": 1, "techniqu": 1, "have": 3, "characterlevel": 1, "formid": 1, "flexibl": 1, "exclus": 1, "impati": 1, "easili": 1, "larg": 1, "find": 1, "point": 1, "njob": 1, "line": 1, "san": 1, "same": 1, "effici": 1, "own": 2}, "idf": {"carpent": 22.266479663400002, "fill": 3.33809924306, "tool": 4.99716713881, "univers": 1.24889867841, "onc": 1.4974533106999999, "this": 1.00379362671, "relat": 1.23750876919, "fit": 3.37070063694, "here": 2.42307692308, "typic": 2.2541530597799997, "project": 1.7534791252500002, "lognum": 1058.4, "matthew": 6.908616187989999, "diagnost": 34.0686695279, "repo": 369.209302326, "new": 1.0178880554, "scala": 114.215827338, "minsamplesleaf": 1587.6, "addit": 1.24634950542, "veri": 1.25880114177, "human": 1.8965476048299998, "layer": 8.14153846154, "learn": 2.32275054865, "evalu": 6.9509632224199995, "parallel": 4.57917507932, "etc": 4.2066772655, "dataset": 193.609756098, "simpler": 17.9187358916, "function": 2.495441685, "epoch": 38.347826087, "scikitlearn": 1587.6, "neural": 59.4606741573, "nfoldsnum": 1587.6, "assist": 2.17300848618, "bestfit": 1587.6, "python": 56.2978723404, "manner": 3.93164933135, "time": 1.01127460348, "nutshel": 345.13043478300006, "whether": 2.20683903253, "abov": 1.90382539873, "valid": 6.61224489796, "previous": 1.42846859816, "know": 2.59327017315, "check": 6.50655737705, "out": 1.06016694491, "live": 1.30591428806, "complex": 2.34021226415, "instead": 1.59461631177, "post": 2.23826307627, "massiv": 4.22571200426, "bring": 2.03616775683, "power": 1.3396337861799998, "extend": 1.9604840701400004, "run": 1.55692850838, "how": 1.60250328051, "instruct": 4.169117647059999, "them": 1.09876115994, "speed": 3.8703071672400005, "simpl": 3.3981164383599998, "vector": 25.898858075, "can": 1.17626139142, "parfit": 1587.6, "featurepack": 1587.6, "word": 1.7965372864099998, "abl": 1.8208510150200001, "deep": 3.6279707495399998, "intend": 2.3488681757700003, "will": 1.22481098596, "the": 1.0, "piotr": 149.773584906, "dormant": 49.9245283019, "analysi": 3.47852760736, "fresh": 6.7157360406099995, "ytrain": 1587.6, "maxfeatur": 1587.6, "tradit": 1.60802187785, "number": 1.10142916609, "select": 2.02345144022, "textgen": 1587.6, "next": 1.4950560316400001, "packag": 7.828402366860001, "but": 1.01632417899, "sklearn": 1587.6, "open": 1.24556723678, "parfitfit": 1587.6, "longer": 2.02319357716, "jason": 11.579868709000001, "xtrain": 1587.6, "tune": 10.4173228346, "doubt": 5.31325301205, "quest": 12.6805111821, "yval": 1587.6, "pymagnitud": 1587.6, "best": 1.5828514456600002, "exampl": 1.50483412322, "continu": 1.13928955867, "generat": 2.05275407292, "plastic": 11.0326615705, "again": 1.50883862384, "visual": 5.22752716497, "use": 1.0296387573799999, "follow": 1.04640126549, "sequenti": 39.5910224439, "configur": 11.504347826099998, "code": 3.8807137619199996, "model": 2.0905978404, "format": 2.53125, "boast": 13.088211047, "admit": 4.03046458492, "much": 1.1942229577299999, "qualiti": 2.9329392204, "bestmodel": 1587.6, "also": 1.01476510067, "feb": 26.0689655172, "while": 1.0441988950299999, "store": 3.44680851064, "modern": 1.5319888063299998, "loss": 2.42529789184, "usag": 6.427530364369999, "not": 1.01567398119, "acceler": 8.15408320493, "storag": 8.623574144489998, "task": 3.88641370869, "wish": 3.67755385685, "cudnn": 1587.6, "magnitud": 15.6568047337, "paramgrid": 1587.6, "altern": 2.1390460792200003, "mayo": 49.7680250784, "aim": 2.8960233491400005, "facilit": 6.453658536590001, "easi": 5.2937645882, "jupyt": 1587.6, "notebook": 40.1924050633, "yellowbrick": 1587.6, "util": 4.65981802172, "convert": 3.2740771293099997, "text": 3.12827586207, "generic": 17.9592760181, "design": 1.45825296225, "modest": 10.676529926, "manifold": 66.42677824270001, "xval": 1587.6, "allow": 1.2716059271100002, "handpick": 273.724137931, "scienc": 2.31969608416, "kdnugget": 1587.6, "employ": 2.16530278232, "pytorch": 1587.6, "eye": 3.39375801625, "github": 1587.6, "textgener": 1587.6, "featur": 1.52712581762, "come": 1.32831325301, "wordlevel": 1587.6, "soon": 1.9817750592900003, "abstract": 9.966101694919999, "influenc": 1.77246846042, "other": 1.00992366412, "provid": 1.21552714187, "rnns": 1587.6, "plotlosseskera": 1587.6, "either": 1.5830092731099998, "migda\u0142": 1587.6, "develop": 1.1955719557200002, "bestscor": 1587.6, "some": 1.04036697248, "popular": 1.50769230769, "sourc": 1.69760479042, "blindfold": 178.38202247200002, "get": 1.78562591385, "network": 2.59369384088, "implement": 3.57648118946, "fast": 4.8729281768, "routin": 7.997984886649999, "outsid": 1.67450690855, "intent": 3.19372359686, "file": 3.7710213776699995, "built": 1.99447236181, "process": 1.69524826482, "document": 2.5409731114, "lesserknown": 1587.6, "that": 1.00398406375, "fret": 145.651376147, "keyvector": 1587.6, "includ": 1.0190641247799999, "produc": 1.36932896326, "when": 1.02076769755, "everyth": 4.81967213115, "kera": 835.5789473680001, "textgenrnn": 1587.6, "candid": 4.51279135873, "grid": 18.1232876712, "info": 37.7102137767, "ani": 1.13383802314, "randomst": 1587.6, "should": 1.6643254009900001, "and": 1.00006299213, "from": 1.00056721497, "engin": 2.47135740971, "back": 1.26070038911, "which": 1.005191845, "those": 1.19548192771, "outing": 78.2068965517, "detail": 2.26186066391, "num": 1.00031504001, "embed": 16.835630965, "been": 1.0239277652399998, "idea": 2.0930784443, "allmodel": 1587.6, "incred": 18.227324913900002, "attentionweight": 1587.6, "domain": 9.39408284024, "for": 1.00031504001, "livelossplot": 1587.6, "version": 2.0083491461099996, "java": 31.625498008, "all": 1.01146788991, "top": 1.8387769284200002, "nestim": 1587.6, "simplifi": 12.109839816900001, "with": 1.0011982089899998, "varieti": 2.2972073506, "greaterisbettertru": 1587.6, "steer": 18.0, "are": 1.02990593578, "instal": 3.78721374046, "sqrt": 1587.6, "suit": 3.92873051225, "month": 1.5079787234, "primarili": 2.43459592087, "overlook": 11.4051724138, "look": 1.9086318826599997, "architectur": 5.12790697674, "option": 4.04896710023, "plot": 5.383519837230001, "call": 1.0676529926, "callback": 661.5, "more": 1.0171706817, "improv": 2.04376930999, "score": 4.2884927066500005, "parfitplot": 1587.6, "intern": 1.30355530011, "allscor": 1587.6, "prepar": 2.43012398592, "combin": 1.69760479042, "made": 1.07038834951, "bidirect": 288.654545455, "promis": 3.5030891438699996, "master": 3.15125049623, "scorelabelauc": 1587.6, "librari": 2.68266306185, "iter": 37.4433962264, "verbosenum": 1587.6, "then": 1.08657860516, "francisco": 5.2937645882, "faster": 7.61438848921, "set": 1.18707940781, "parfitscor": 1587.6, "each": 1.18974820144, "size": 2.49387370405, "train": 1.9365698950999999, "few": 1.31729173581, "well": 1.0655748708, "metricrocaucscor": 1587.6, "necessari": 2.8421052631599997, "step": 2.8279301745599996, "pretrain": 1587.6, "framework": 8.200413223139998, "link": 2.15151104486, "freeli": 11.3643521832, "comment": 3.05954904606, "data": 3.37643555934, "gensim": 1587.6, "anoth": 1.13643521832, "sort": 5.188235294119999, "oppos": 2.51282051282, "skipembed": 1587.6, "machin": 4.02433460076, "into": 1.01502461479, "sometim": 1.7126213592200001, "bias": 13.7335640138, "matplotlib": 1587.6, "parfitcrossv": 1587.6, "lnaug": 1587.6, "right": 1.4054532577899999, "potenti": 2.52080025405, "import": 1.3401992233700002, "ecosystem": 26.111842105300003, "input": 12.2029208301, "techniqu": 3.7293868921800004, "have": 1.0148948411399998, "characterlevel": 1587.6, "formid": 23.1091703057, "flexibl": 9.68639414277, "exclus": 3.40906162766, "impati": 64.5365853659, "easili": 3.6938110749199997, "larg": 1.18574949585, "find": 1.7294117647099998, "point": 1.25990000794, "njob": 1587.6, "line": 1.4182597820299998, "san": 3.30131004367, "same": 1.11857958148, "effici": 5.09335899904, "own": 1.17844418052}}, "html": "<!DOCTYPE html>\n\n<html lang=\"en-US\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head profile=\"http://gmpg.org/xfn/11\">\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n<title>  5 Machine Learning Projects You Should Not Overlook, June 2018</title>\n<link href=\"/wp-content/themes/kdn17/images/favicon.ico\" rel=\"shortcut icon\"/>\n<link href=\"/wp-content/themes/kdn17/style.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"/wp-content/themes/kdn17/js/jquery-1.9.1.min.js\" type=\"text/javascript\"></script>\n<script src=\"/aps/kda_all.js\" type=\"text/javascript\"></script>\n<link href=\"/feed/\" rel=\"alternate\" title=\"KDnuggets: Analytics, Big Data, Data Mining and Data Science Feed\" type=\"application/rss+xml\"/>\n<link href=\"//s.w.org\" rel=\"dns-prefetch\"/>\n<link href=\"https://www.kdnuggets.com/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/comments/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/2018/06/5-machine-learning-projects-overlook-jun-2018.html/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb 5 Machine Learning Projects You Should Not Overlook, June 2018 Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-json/\" rel=\"https://api.w.org/\"/>\n<link href=\"https://www.kdnuggets.com/xmlrpc.php?rsd\" rel=\"EditURI\" title=\"RSD\" type=\"application/rsd+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-includes/wlwmanifest.xml\" rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\"/>\n<link href=\"https://www.kdnuggets.com/2018/06/anaconda-empowering-national-grid-anaconda-enterprise.html\" rel=\"prev\" title=\"Empowering National Grid with Anaconda Enterprise\"/>\n<link href=\"https://www.kdnuggets.com/2018/06/better-stats-101.html\" rel=\"next\" title=\"A Better Stats 101\"/>\n<meta content=\"WordPress 4.9.10\" name=\"generator\">\n<link href=\"https://www.kdnuggets.com/2018/06/5-machine-learning-projects-overlook-jun-2018.html\" rel=\"canonical\"/>\n<link href=\"https://www.kdnuggets.com/?p=81932\" rel=\"shortlink\"/>\n<link href=\"https://www.kdnuggets.com/2018/06/5-machine-learning-projects-overlook-jun-2018.html\" rel=\"canonical\"/>\n<!-- BEGIN ExactMetrics v5.3.7 Universal Analytics - https://exactmetrics.com/ -->\n<script>\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-361129-1', 'auto');\n  ga('send', 'pageview');\n</script>\n<!-- END ExactMetrics Universal Analytics -->\n</meta></head>\n<body class=\"post-template-default single single-post postid-81932 single-format-standard\">\n<div class=\"main_wrapper\"><!-- publ: 12-Jun, 2018  -->\n<div id=\"wrapper\">\n<div id=\"header\">\n<div id=\"header_log\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<h1>KDnuggets</h1>\n<div class=\"text-container\">\n            \u00a0\u00a0<a href=\"/news/subscribe.html\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a> \u00a0|\n <a href=\"https://twitter.com/kdnuggets\" target=\"_blank\"><img alt=\"Twitter\" height=\"48\" src=\"/images/tw_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n <a href=\"https://www.facebook.com/kdnuggets\" target=\"_blank\"><img alt=\"Facebook\" height=\"48\" src=\"/images/fb_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n<a href=\"https://www.linkedin.com/groups/54257/\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"48\" src=\"/images/in_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \n\u00a0|\u00a0 <a href=\"/contact.html\"><b>Contact</b></a>\n</div>\n</div>\n<div class=\"search\">\n<form action=\"/\" id=\"searchform\" method=\"get\">\n<input id=\"s\" name=\"s\" placeholder=\"search KDnuggets\" type=\"text\" value=\"\"/>\n<input type=\"submit\" value=\"Search\"/></form>\n</div>\n<div href=\"#\" id=\"pull\">\n<img class=\"menu\" src=\"/images/menu-30.png\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<img class=\"search-icon\" src=\"/images/search-icon.png\">\n</img></img></div>\n<div id=\"pull-menu\">\n<div class=\"navigation\"><ul class=\"menu\" id=\"menu-menu\"><li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-1070\" id=\"menu-item-1070\"><a href=\"/software/index.html\" title=\"Data Science Software\">SOFTWARE</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13756\" id=\"menu-item-13756\"><a href=\"/news/index.html\" title=\"News\">News/Blog</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-46286\" id=\"menu-item-46286\"><a href=\"/news/top-stories.html\">Top stories</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-42152\" id=\"menu-item-42152\"><a href=\"https://www.kdnuggets.com/opinions/index.html\" title=\"Opinions\">Opinions</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-46415\" id=\"menu-item-46415\"><a href=\"https://www.kdnuggets.com/tutorials/index.html\">Tutorials</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13364\" id=\"menu-item-13364\"><a href=\"/jobs/index.html\" title=\"Jobs in Analytics, Data Science\">JOBS</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-63505\" id=\"menu-item-63505\"><a href=\"https://www.kdnuggets.com/companies/index.html\">Companies</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13366\" id=\"menu-item-13366\"><a href=\"/courses/index.html\">Courses</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-1499\" id=\"menu-item-1499\"><a href=\"https://www.kdnuggets.com/datasets/index.html\">Datasets</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-14286\" id=\"menu-item-14286\"><a href=\"https://www.kdnuggets.com/education/index.html\" title=\"Education in Analytics, Big Data, Data Science\">EDUCATION</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-51558\" id=\"menu-item-51558\"><a href=\"https://www.kdnuggets.com/education/analytics-data-mining-certificates.html\" title=\"Certificates in Analytics, Big Data, Data Science\">Certificates</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-14752\" id=\"menu-item-14752\"><a href=\"/meetings/index.html\">Meetings</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13721\" id=\"menu-item-13721\"><a href=\"/webcasts/index.html\" title=\"Webcasts and Webinars\">Webinars</a></li>\n</ul></div></div>\n</div> <!--#header end-->\n<div id=\"spacer\">\n         \u00a0\n      </div>\n<div id=\"content_wrapper\">\n<div id=\"ad_wrapper\">\n<script type=\"text/javascript\">\n\tjQuery(function() {\n   \t    var pull        = $('#pull');\n            menu        = $('#header .navigation ul');\n            menuImage = $('#header img.menu');\n            mobileMenu        = $('#pull-menu-mobile');\n            search = $('img.search-icon');\n            searchBar = $('div.search');\n            searchClick = false;\n            search.on('click', function() {\n                  searchBar.slideToggle();\n                  searchClick = true;\n            });  \n     \t    $(menuImage).on('click', function(e) {\n\t        //e.preventDefault();\n                if (!searchClick) {\n                  menu.slideToggle();\n                }\n                searchClick = false;\n\t    });\n           /* pullMobile.on('click', function(e) {\n              e.preventDefault();\n                if (!searchClick) {\n                  mobileMenu.slideToggle();\n                }\n                searchClick = false;\n\t    });*/\n            \n\t});\n\tkpath = '/'; kda_top(); kda_sid_init(); kda_sid_n=3;\n\t</script>\n</div> <div class=\"breadcumb\">\n<br/>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2018/index.html\">2018</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/06/index.html\">Jun</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/06/tutorials.html\">Tutorials, Overviews</a> \u00bb 5 Machine Learning Projects You Should Not Overlook, June 2018 (\u00a0<a href=\"/2018/n23.html\">18:n23</a>\u00a0)    </div>\n<div class=\"single\" id=\"content\">\n<div id=\"post-header\">\n<h1 id=\"title\"><img align=\"right\" alt=\"Silver Blog\" src=\"/images/tkb-1806-s.png\" width=\"94\"/>5 Machine Learning Projects You Should Not Overlook, June 2018</h1>\n<div class=\"pagi\">\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2018/06/anaconda-empowering-national-grid-anaconda-enterprise.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"> <strong>Previous post</strong></img></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2018/06/better-stats-101.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/>\u00a0<br/>\u00a0\n    <div class=\"addthis_native_toolbox\"></div>\n</div>\n<div class=\"tag-data\">Tags: <a href=\"https://www.kdnuggets.com/tag/interpretability\" rel=\"tag\">Interpretability</a>, <a href=\"https://www.kdnuggets.com/tag/keras\" rel=\"tag\">Keras</a>, <a href=\"https://www.kdnuggets.com/tag/machine-learning\" rel=\"tag\">Machine Learning</a>, <a href=\"https://www.kdnuggets.com/tag/model-performance\" rel=\"tag\">Model Performance</a>, <a href=\"https://www.kdnuggets.com/tag/nlp\" rel=\"tag\">NLP</a>, <a href=\"https://www.kdnuggets.com/tag/overlook\" rel=\"tag\">Overlook</a>, <a href=\"https://www.kdnuggets.com/tag/recurrent-neural-networks\" rel=\"tag\">Recurrent Neural Networks</a>, <a href=\"https://www.kdnuggets.com/tag/visualization\" rel=\"tag\">Visualization</a></div>\n<br/>\n<p class=\"excerpt\">\n     Here is a new installment of 5 more machine learning or machine learning-related projects you may not yet have heard of, but may want to consider checking out!\n  </p>\n</div>\n<div id=\"post-header-ad\">\n<script type=\"text/javascript\">kda_sid_write(1); kda_sid_n=2;</script>\n</div>\n<hr class=\"grey-line\"/><br/>\n<div class=\"post\" id=\"post-\">\n<div class=\"author-link\"><b>By <a href=\"https://www.kdnuggets.com/author/matt-mayo\" rel=\"author\" title=\"Posts by Matthew Mayo\">Matthew Mayo</a>, KDnuggets.</b></div>\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p>We're back. Again. The \"Overlook...\" posts have been dormant for a few months, but fret not, here's another installment. We continue on with the modest quest of bringing formidable, lesser-known machine learning projects to a few additional sets of eyes.</p>\n<p>This outing is made up exclusively of Python projects, not by intention design, but no doubt influenced by my own biases. While previous iterations have included projects in all sorts of lnauges (R, Go, C++, Scala, Java, etc.), I promise an all R version sometime soon, and will employ some outside assistance when it comes to evaluating those projects (I'm admittedly not very well tuned into the R ecosystem).</p>\n<p>Here are 5 hand-picked projects for some potential fresh machine learning ideas.</p>\n<p>\u00a0<br>\n<b>1. <a href=\"https://github.com/stared/livelossplot/\" rel=\"noopener noreferrer\" target=\"_blank\">Live Loss Plot</a></b></br></p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"/wp-content/uploads/livelossplot.jpg\" width=\"85%\"/></p>\n<blockquote><p>\nDon't train deep learning models blindfolded! Be impatient and look at each epoch of your training!</p>\n<p>A live training loss plot in Jupyter Notebook for Keras, PyTorch and other frameworks. An open source Python package by Piotr Migda\u0142 et al.\n</p></blockquote>\n<p>When used with Keras, Live Loss Plot is a simple callback function.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\nfrom livelossplot import PlotLossesKeras\r\n\r\nmodel.fit(X_train, Y_train,\r\n          epochs=10,\r\n          validation_data=(X_test, Y_test),\r\n          callbacks=[PlotLossesKeras()],\r\n          verbose=0)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>\u00a0<br>\n<b>2. <a href=\"https://github.com/jmcarpenter2/parfit\" rel=\"noopener noreferrer\" target=\"_blank\">Parfit</a></b></br></p>\n<p>Out next project comes from Jason Carpenter, a Master's candidate in Data Science at University of San Francisco, and a Machine Learning Engineer Intern at Manifold.</p>\n<blockquote><p>\nA package for parallelizing the fit and flexibly scoring of sklearn machine learning models, with visualization routines.</p>\n<p>Once imported, you can use bestFit() or other functions freely.\n</p></blockquote>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://github.com/jmcarpenter2/parfit/raw/master/assets/scoring_grid_2D.png?raw=true\" width=\"50%\"/></p>\n<p>A code example:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\nfrom parfit import bestFit # Necessary if you wish to use bestFit\r\n\r\n# Necessary if you wish to run each step sequentially\r\nfrom parfit.fit import *\r\nfrom parfit.score import *\r\nfrom parfit.plot import *\r\nfrom parfit.crossval import *\r\n\r\ngrid = {\r\n    'min_samples_leaf': [1, 5, 10, 15, 20, 25],\r\n    'max_features': ['sqrt', 'log2', 0.5, 0.6, 0.7],\r\n    'n_estimators': [60],\r\n    'n_jobs': [-1],\r\n    'random_state': [42]\r\n}\r\nparamGrid = ParameterGrid(grid)\r\n\r\nbest_model, best_score, all_models, all_scores = bestFit(RandomForestClassifier(), paramGrid,\r\n                                                    X_train, y_train, X_val, y_val, # nfolds=5 [optional, instead of validation set]\r\n                                                    metric=roc_auc_score, greater_is_better=True, \r\n                                                    scoreLabel='AUC')\r\n\r\nprint(best_model, best_score)\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>\u00a0<br/>\n<b>3. <a href=\"https://github.com/DistrictDataLabs/yellowbrick\" rel=\"noopener noreferrer\" target=\"_blank\">Yellowbrick</a></b></p>\n<p>Yellowbrick is \"Visual analysis and diagnostic tools to facilitate machine learning model selection.\" In more detail:</p>\n<blockquote><p>\nYellowbrick is a suite of visual diagnostic tools called \"Visualizers\" that extend the scikit-learn API to allow human steering of the model selection process. In a nutshell, Yellowbrick combines scikit-learn with matplotlib in the best tradition of the scikit-learn documentation, but to produce visualizations for your models!\n</p></blockquote>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://github.com/DistrictDataLabs/yellowbrick/raw/develop/docs/images/visualizers.png\" width=\"99%\"/></p>\n<p>Check out the Github repo for examples, and the <a href=\"http://www.scikit-yb.org/en/latest/\" rel=\"noopener\" target=\"_blank\">documentation for much more</a>.</p>\n<p>\u00a0<br/>\n<b>4. <a href=\"https://github.com/minimaxir/textgenrnn\" rel=\"noopener noreferrer\" target=\"_blank\">textgenrnn</a></b></p>\n<p>textgenrnn brings an additional layer of abstraction to text generation tasks, and aims to allow you to \"easily train your own text-generating neural network of any size and complexity on any text dataset with a few lines of code.\"</p>\n<p>The project is built on top of Keras and boasts the following select features:</p>\n<blockquote>\n<ul>\n<li>A modern neural network architecture which utilizes new techniques as attention-weighting and skip-embedding to accelerate training and improve model quality.\n<li>Able to train on and generate text at either the character-level or word-level.\n<li>Able to configure RNN size, the number of RNN layers, and whether to use bidirectional RNNs.\n<li>Able to train on any generic input text file, including large files.\n<li>Able to train models on a GPU and then use them to generate text with a CPU.\n<li>Able to utilize a powerful CuDNN implementation of RNNs when trained on the GPU, which massively speeds up training time as opposed to typical LSTM implementations.\n</li></li></li></li></li></li></ul>\n</blockquote>\n<p>textgenrnn is incredibly easy to get up and running with:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\nfrom textgenrnn import textgenrnn\r\n\r\ntextgen = textgenrnn()\r\ntextgen.train_from_file('hacker-news-2000.txt', num_epochs=1)\r\ntextgen.generate()\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://www.kdnuggets.com/wp-content/uploads/textgenrnn.jpg\" width=\"90%\"/></p>\n<p>You can find more info and examples on the Github repo linked above.</p>\n<p>\u00a0<br/>\n<b>5. <a href=\"https://github.com/plasticityai/magnitude\" rel=\"noopener noreferrer\" target=\"_blank\">Magnitude</a></b></p>\n<p>Magnitude is \"a fast, simple vector embedding utility library.\"</p>\n<blockquote><p>\nA feature-packed Python package and vector storage file format for utilizing vector embeddings in machine learning models in a fast, efficient, and simple manner developed by Plasticity. It is primarily intended to be a simpler / faster alternative to Gensim, but can be used as a generic key-vector store for domains outside NLP.\n</p></blockquote>\n<p>The repo provides links to a variety of popular embedding models which have been prepared in the .magnitude format for usage, and also includes instructions on converting any other word embeddings file to the same format.</p>\n<p>How to import?</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\nfrom pymagnitude import *\r\nvectors = Magnitude(\"/path/to/vectors.magnitude\")</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Right to the point.</p>\n<p>The Github repo is filled with more info, including everything you know to get up and running with this simplified library for using pre-trained word embeddings.</p>\n<p>\u00a0<br/>\n<b>Related</b>:</p>\n<ul class=\"three_ul\">\n<li><a href=\"/2018/02/5-machine-learning-projects-overlook-feb-2018.html\">5 Machine Learning Projects You Should Not Overlook, Feb 2018</a>\n<li><a href=\"/2016/05/five-machine-learning-projects-cant-overlook.html\">5 Machine Learning Projects You Can No Longer Overlook</a>\n<li><a href=\"/2016/06/five-more-machine-learning-projects-cant-overlook.html\">5 More Machine Learning Projects You Can No Longer Overlook</a>\n</li></li></li></ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p> <script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets';\n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div>\n<div class=\"page-link\"></div>\n<div class=\"pagi\">\n<hr class=\"grey-line\"/>\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2018/06/anaconda-empowering-national-grid-anaconda-enterprise.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"/> <strong>Previous post</strong></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2018/06/better-stats-101.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/><br/>\n<div>\n<hr class=\"grey-line\"/><br/>\n<h2>Top Stories Past 30 Days</h2>\n<table align=\"center\" cellpadding=\"3\" cellspacing=\"10\" class=\"latn\" width=\"100%\">\n<tr>\n<td valign=\"top\" width=\"50%\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Popular</b></th></tr>\n<tr><td>\n<ol class=\"three_ol\"><li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-1-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-2-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n<li> <a href=\"/2018/05/simplilearn-9-must-have-skills-data-scientist.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-3-simplilearn');\"><b>9 Must-have skills you need to become a Data Scientist, updated</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-4-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/03/another-10-free-must-read-books-for-machine-learning-and-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-5-another-10-books');\"><b>Another 10 Free Must-Read Books for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-6-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/best-data-visualization-techniques.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-7-best-data-viz');\"><b>Best Data Visualization Techniques for small and large data</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td> <td valign=\"top\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Shared</b></th></tr>\n<tr><td><ol class=\"three_ol\">\n<li> <a href=\"/2019/04/another-10-free-must-see-courses-machine-learning-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-1-another-10-courses');\"><b>Another 10 Free Must-See Courses for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-2-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/03/r-vs-python-data-visualization.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-3-r-py-viz');\"><b>R vs Python for Data Visualization</b></a>\n<li> <a href=\"/2019/03/deep-learning-toolset-overview.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-4-dl-toolset');\"><b>The Deep Learning Toolset \u2014 An Overview</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-5-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-6-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-7-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<!--#content end--></div>\n<div id=\"sidebar\">\n<div class=\"latn\">\n<h3><b><a href=\"/news/index.html\">Latest News</a></b></h3>\n<ul style=\"font-size:14px; margin-top:5px\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/datarobot-delivering-trusted-ai-microsoft.html\">Delivering Trusted AI with DataRobot and Microsoft</a><li> <a href=\"https://www.kdnuggets.com/2019/04/formulated-ai-data-production-landscape.html\">AI and the data production landscape</a><li> <a href=\"https://www.kdnuggets.com/2019/04/most-desired-skill-data-science.html\">The most desired skill in data science</a><li> <a href=\"https://www.kdnuggets.com/2019/04/projects-include-data-science-portfolio.html\">Projects to Include in a Data Science Portfolio</a><li> <a href=\"https://www.kdnuggets.com/2019/04/rework-meet-worlds-leading-ai-deep-learning-experts.html\">Meet the World\u2019s Leading AI &amp; Deep Learning ...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/problem-data-science-job-postings.html\">The problem with data science job postings</a></li></li></li></li></li></li></ul>\n</div>\n<div>\n<script type=\"text/javascript\">kda_sid_write(kda_sid_n);</script>\n</div>\n<br/><script src=\"/aps/sbm.js\" type=\"text/javascript\"></script>\n</div>\n</div><div class=\"breadcrumbs_bottom\">\n<div class=\"breadcumb\">\n<br>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2018/index.html\">2018</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/06/index.html\">Jun</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/06/tutorials.html\">Tutorials, Overviews</a> \u00bb 5 Machine Learning Projects You Should Not Overlook, June 2018 (\u00a0<a href=\"/2018/n23.html\">18:n23</a>\u00a0)    </br></div>\n</div>\n<!--#content_wrapper end--></div>\n<br>\n<div id=\"footer\">\n<br/>\u00a9 2019 KDnuggets. <a href=\"/about/index.html\">About KDnuggets</a>. \u00a0<a href=\"/news/privacy-policy.html\">Privacy policy</a>. <a href=\"/terms-of-service.html\">Terms of Service</a><br/>\u00a0\n<div class=\"kd_bottom\">\n<div class=\"footer-container\">\n<div class=\"footer-news\">\n<a href=\"/news/subscribe.html\" onclick=\"_gaq.push(['_trackPageview','/x/bot/sub']);\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a>\n</div>\n<div class=\"footer-sm\">\n<a href=\"https://twitter.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/twt']);\" target=\"_blank\"><img height=\"32\" src=\"/images/tw_c48.png\" width=\"32\"/></a>\n<a href=\"https://facebook.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/fb']);\" target=\"_blank\"><img alt=\"Facebook\" height=\"32\" src=\"/images/fb_c48.png\" width=\"32\"/></a>\n<a href=\"https://www.linkedin.com/groups/54257\" onclick=\"_gaq.push(['_trackPageview','/x/bot/in']);\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"32\" src=\"/images/in_c48.png\" width=\"32\"/></a>\n</div>\n</div>\n<div class=\"close-footer\">X</div>\n</div>\n<script type=\"text/javascript\">\n  jQuery('.close-footer').click(\n      function(){       \n         jQuery('.kd_bottom').hide();\n      }\n   );\n</script> </div>\n<div class=\"clear\"><!--blank--></div>\n</br></div>\n<div style=\"display: none;\"><div id=\"boxzilla-box-82996-content\"><script type=\"text/javascript\">(function() {\n\tif (!window.mc4wp) {\n\t\twindow.mc4wp = {\n\t\t\tlisteners: [],\n\t\t\tforms    : {\n\t\t\t\ton: function (event, callback) {\n\t\t\t\t\twindow.mc4wp.listeners.push({\n\t\t\t\t\t\tevent   : event,\n\t\t\t\t\t\tcallback: callback\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})();\n</script><!-- MailChimp for WordPress v4.1.14 - https://wordpress.org/plugins/mailchimp-for-wp/ --><form class=\"mc4wp-form mc4wp-form-77281\" data-id=\"77281\" data-name=\"Subscribe to KDnuggets News\" id=\"mc4wp-form-1\" method=\"post\"><div class=\"mc4wp-form-fields\"><div class=\"header-container\">\n<img align=\"left\" src=\"/wp-content/uploads/envelope.png\"><a href=\"/news/subscribe.html\">Get KDnuggets, a leading newsletter on AI, \r\n  Data Science, and Machine Learning</a>\n</img></div>\n<div class=\"form-fields\">\n<div class=\"field-container\"><label>Email:</label><input maxlength=\"60\" name=\"EMAIL\" placeholder=\"Your email\" required=\"\" size=\"30\" type=\"email\"/></div>\n<div class=\"field-container submit-container\"><div class=\"form-button\" onclick=\"document.getElementById('mc4wp-form-1').submit()\">Sign Up</div></div>\n</div>\n<label style=\"display: none !important;\">Leave this field empty if you're human: <input autocomplete=\"off\" name=\"_mc4wp_honeypot\" tabindex=\"-1\" type=\"text\" value=\"\"/></label><input name=\"_mc4wp_timestamp\" type=\"hidden\" value=\"1556370971\"/><input name=\"_mc4wp_form_id\" type=\"hidden\" value=\"77281\"/><input name=\"_mc4wp_form_element_id\" type=\"hidden\" value=\"mc4wp-form-1\"/></div><div class=\"mc4wp-response\"></div></form><!-- / MailChimp for WordPress Plugin -->\n</div></div><script type=\"text/javascript\">(function() {function addEventListener(element,event,handler) {\n\tif(element.addEventListener) {\n\t\telement.addEventListener(event,handler, false);\n\t} else if(element.attachEvent){\n\t\telement.attachEvent('on'+event,handler);\n\t}\n}function maybePrefixUrlField() {\n\tif(this.value.trim() !== '' && this.value.indexOf('http') !== 0) {\n\t\tthis.value = \"http://\" + this.value;\n\t}\n}\n\nvar urlFields = document.querySelectorAll('.mc4wp-form input[type=\"url\"]');\nif( urlFields && urlFields.length > 0 ) {\n\tfor( var j=0; j < urlFields.length; j++ ) {\n\t\taddEventListener(urlFields[j],'blur',maybePrefixUrlField);\n\t}\n}/* test if browser supports date fields */\nvar testInput = document.createElement('input');\ntestInput.setAttribute('type', 'date');\nif( testInput.type !== 'date') {\n\n\t/* add placeholder & pattern to all date fields */\n\tvar dateFields = document.querySelectorAll('.mc4wp-form input[type=\"date\"]');\n\tfor(var i=0; i<dateFields.length; i++) {\n\t\tif(!dateFields[i].placeholder) {\n\t\t\tdateFields[i].placeholder = 'YYYY-MM-DD';\n\t\t}\n\t\tif(!dateFields[i].pattern) {\n\t\t\tdateFields[i].pattern = '[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])';\n\t\t}\n\t}\n}\n\n})();</script><script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_options = {\"testMode\":\"\",\"boxes\":[{\"id\":82996,\"icon\":\"&times;\",\"content\":\"\",\"css\":{\"background_color\":\"#eeee22\",\"width\":600,\"border_width\":2,\"border_style\":\"double\",\"position\":\"center\"},\"trigger\":{\"method\":\"time_on_page\",\"value\":\"3\"},\"animation\":\"fade\",\"cookie\":{\"triggered\":0,\"dismissed\":336},\"rehide\":true,\"position\":\"center\",\"screenWidthCondition\":{\"condition\":\"larger\",\"value\":500},\"closable\":true,\"post\":{\"id\":82996,\"title\":\"Subscribe to KDnuggets\",\"slug\":\"subscribe-to-kdnuggets\"}}]};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla/assets/js/script.min.js?ver=3.2.5\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_stats_config = {\"ajaxurl\":\"https:\\/\\/www.kdnuggets.com\\/wp-admin\\/admin-ajax.php?action=boxzilla_stats_track\"};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla-stats/assets/js/tracking.min.js?ver=1.0.4\" type=\"text/javascript\"></script>\n<script src=\"https://www.kdnuggets.com/wp-includes/js/wp-embed.min.js?ver=4.9.10\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar mc4wp_forms_config = [];\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/forms-api.min.js?ver=4.1.14\" type=\"text/javascript\"></script>\n<!--[if lte IE 9]>\n<script type='text/javascript' src='https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/third-party/placeholders.min.js?ver=4.1.14'></script>\n<![endif]-->\n<!--/.main_wrapper--></body></html>\n<script src=\"https://s7.addthis.com/js/300/addthis_widget.js#pubid=gpsaddthis\" type=\"text/javascript\"></script>\n\n\n<!-- Dynamic page generated in 0.673 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2019-04-27 09:16:11 -->\n<!-- Compression = gzip -->", "content_tokenized": ["matthew", "mayo", "kdnugget", "comment", "back", "again", "the", "overlook", "post", "have", "been", "dormant", "for", "few", "month", "but", "fret", "not", "here", "anoth", "instal", "continu", "with", "the", "modest", "quest", "bring", "formid", "lesserknown", "machin", "learn", "project", "few", "addit", "set", "eye", "this", "outing", "made", "exclus", "python", "project", "not", "intent", "design", "but", "doubt", "influenc", "own", "bias", "while", "previous", "iter", "have", "includ", "project", "all", "sort", "lnaug", "scala", "java", "etc", "promis", "all", "version", "sometim", "soon", "and", "will", "employ", "some", "outsid", "assist", "when", "come", "evalu", "those", "project", "admit", "not", "veri", "well", "tune", "into", "the", "ecosystem", "here", "are", "num", "handpick", "project", "for", "some", "potenti", "fresh", "machin", "learn", "idea", "num", "live", "loss", "plot", "train", "deep", "learn", "model", "blindfold", "impati", "and", "look", "each", "epoch", "train", "live", "train", "loss", "plot", "jupyt", "notebook", "for", "kera", "pytorch", "and", "other", "framework", "open", "sourc", "python", "packag", "piotr", "migda\u0142", "when", "use", "with", "kera", "live", "loss", "plot", "simpl", "callback", "function", "from", "livelossplot", "import", "plotlosseskera", "callback", "verbosenum", "num", "parfit", "out", "next", "project", "come", "from", "jason", "carpent", "master", "candid", "data", "scienc", "univers", "san", "francisco", "and", "machin", "learn", "engin", "intern", "manifold", "packag", "for", "parallel", "the", "fit", "and", "flexibl", "score", "sklearn", "machin", "learn", "model", "with", "visual", "routin", "onc", "import", "can", "use", "other", "function", "freeli", "code", "exampl", "from", "parfit", "import", "bestfit", "necessari", "wish", "use", "bestfit", "necessari", "wish", "run", "each", "step", "sequenti", "from", "parfitfit", "import", "from", "parfitscor", "import", "from", "parfitplot", "import", "from", "parfitcrossv", "import", "grid", "minsamplesleaf", "num", "num", "num", "num", "num", "num", "maxfeatur", "sqrt", "lognum", "num", "num", "num", "nestim", "num", "njob", "num", "randomst", "num", "paramgrid", "bestmodel", "bestscor", "allmodel", "allscor", "paramgrid", "xtrain", "ytrain", "xval", "yval", "nfoldsnum", "option", "instead", "valid", "set", "metricrocaucscor", "greaterisbettertru", "scorelabelauc", "num", "yellowbrick", "yellowbrick", "visual", "analysi", "and", "diagnost", "tool", "facilit", "machin", "learn", "model", "select", "more", "detail", "yellowbrick", "suit", "visual", "diagnost", "tool", "call", "visual", "that", "extend", "the", "scikitlearn", "allow", "human", "steer", "the", "model", "select", "process", "nutshel", "yellowbrick", "combin", "scikitlearn", "with", "matplotlib", "the", "best", "tradit", "the", "scikitlearn", "document", "but", "produc", "visual", "for", "model", "check", "out", "the", "github", "repo", "for", "exampl", "and", "the", "document", "for", "much", "more", "num", "textgenrnn", "textgenrnn", "bring", "addit", "layer", "abstract", "text", "generat", "task", "and", "aim", "allow", "easili", "train", "own", "textgener", "neural", "network", "ani", "size", "and", "complex", "ani", "text", "dataset", "with", "few", "line", "code", "the", "project", "built", "top", "kera", "and", "boast", "the", "follow", "select", "featur", "modern", "neural", "network", "architectur", "which", "util", "new", "techniqu", "attentionweight", "and", "skipembed", "acceler", "train", "and", "improv", "model", "qualiti", "abl", "train", "and", "generat", "text", "either", "the", "characterlevel", "wordlevel", "abl", "configur", "size", "the", "number", "layer", "and", "whether", "use", "bidirect", "rnns", "abl", "train", "ani", "generic", "input", "text", "file", "includ", "larg", "file", "abl", "train", "model", "and", "then", "use", "them", "generat", "text", "with", "abl", "util", "power", "cudnn", "implement", "rnns", "when", "train", "the", "which", "massiv", "speed", "train", "time", "oppos", "typic", "implement", "textgenrnn", "incred", "easi", "get", "and", "run", "with", "from", "textgenrnn", "import", "textgenrnn", "textgen", "can", "find", "more", "info", "and", "exampl", "the", "github", "repo", "link", "abov", "num", "magnitud", "magnitud", "fast", "simpl", "vector", "embed", "util", "librari", "featurepack", "python", "packag", "and", "vector", "storag", "file", "format", "for", "util", "vector", "embed", "machin", "learn", "model", "fast", "effici", "and", "simpl", "manner", "develop", "plastic", "primarili", "intend", "simpler", "faster", "altern", "gensim", "but", "can", "use", "generic", "keyvector", "store", "for", "domain", "outsid", "the", "repo", "provid", "link", "varieti", "popular", "embed", "model", "which", "have", "been", "prepar", "the", "magnitud", "format", "for", "usag", "and", "also", "includ", "instruct", "convert", "ani", "other", "word", "embed", "file", "the", "same", "format", "how", "import", "from", "pymagnitud", "import", "vector", "right", "the", "point", "the", "github", "repo", "fill", "with", "more", "info", "includ", "everyth", "know", "get", "and", "run", "with", "this", "simplifi", "librari", "for", "use", "pretrain", "word", "embed", "relat", "num", "machin", "learn", "project", "should", "not", "overlook", "feb", "num", "num", "machin", "learn", "project", "can", "longer", "overlook", "num", "more", "machin", "learn", "project", "can", "longer", "overlook"], "timestamp_scraper": 1556370971.610868, "title": "5 Machine Learning Projects You Should Not Overlook, June 2018", "read_time": 237.6, "content_html": "<div class=\"post\" id=\"post-\">\n<div class=\"author-link\"><b>By <a href=\"https://www.kdnuggets.com/author/matt-mayo\" rel=\"author\" title=\"Posts by Matthew Mayo\">Matthew Mayo</a>, KDnuggets.</b></div>\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p>We're back. Again. The \"Overlook...\" posts have been dormant for a few months, but fret not, here's another installment. We continue on with the modest quest of bringing formidable, lesser-known machine learning projects to a few additional sets of eyes.</p>\n<p>This outing is made up exclusively of Python projects, not by intention design, but no doubt influenced by my own biases. While previous iterations have included projects in all sorts of lnauges (R, Go, C++, Scala, Java, etc.), I promise an all R version sometime soon, and will employ some outside assistance when it comes to evaluating those projects (I'm admittedly not very well tuned into the R ecosystem).</p>\n<p>Here are 5 hand-picked projects for some potential fresh machine learning ideas.</p>\n<p>\u00a0<br>\n<b>1. <a href=\"https://github.com/stared/livelossplot/\" rel=\"noopener noreferrer\" target=\"_blank\">Live Loss Plot</a></b></br></p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"/wp-content/uploads/livelossplot.jpg\" width=\"85%\"/></p>\n<blockquote><p>\nDon't train deep learning models blindfolded! Be impatient and look at each epoch of your training!</p>\n<p>A live training loss plot in Jupyter Notebook for Keras, PyTorch and other frameworks. An open source Python package by Piotr Migda\u0142 et al.\n</p></blockquote>\n<p>When used with Keras, Live Loss Plot is a simple callback function.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\nfrom livelossplot import PlotLossesKeras\r\n\r\nmodel.fit(X_train, Y_train,\r\n          epochs=10,\r\n          validation_data=(X_test, Y_test),\r\n          callbacks=[PlotLossesKeras()],\r\n          verbose=0)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>\u00a0<br>\n<b>2. <a href=\"https://github.com/jmcarpenter2/parfit\" rel=\"noopener noreferrer\" target=\"_blank\">Parfit</a></b></br></p>\n<p>Out next project comes from Jason Carpenter, a Master's candidate in Data Science at University of San Francisco, and a Machine Learning Engineer Intern at Manifold.</p>\n<blockquote><p>\nA package for parallelizing the fit and flexibly scoring of sklearn machine learning models, with visualization routines.</p>\n<p>Once imported, you can use bestFit() or other functions freely.\n</p></blockquote>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://github.com/jmcarpenter2/parfit/raw/master/assets/scoring_grid_2D.png?raw=true\" width=\"50%\"/></p>\n<p>A code example:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\nfrom parfit import bestFit # Necessary if you wish to use bestFit\r\n\r\n# Necessary if you wish to run each step sequentially\r\nfrom parfit.fit import *\r\nfrom parfit.score import *\r\nfrom parfit.plot import *\r\nfrom parfit.crossval import *\r\n\r\ngrid = {\r\n    'min_samples_leaf': [1, 5, 10, 15, 20, 25],\r\n    'max_features': ['sqrt', 'log2', 0.5, 0.6, 0.7],\r\n    'n_estimators': [60],\r\n    'n_jobs': [-1],\r\n    'random_state': [42]\r\n}\r\nparamGrid = ParameterGrid(grid)\r\n\r\nbest_model, best_score, all_models, all_scores = bestFit(RandomForestClassifier(), paramGrid,\r\n                                                    X_train, y_train, X_val, y_val, # nfolds=5 [optional, instead of validation set]\r\n                                                    metric=roc_auc_score, greater_is_better=True, \r\n                                                    scoreLabel='AUC')\r\n\r\nprint(best_model, best_score)\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>\u00a0<br/>\n<b>3. <a href=\"https://github.com/DistrictDataLabs/yellowbrick\" rel=\"noopener noreferrer\" target=\"_blank\">Yellowbrick</a></b></p>\n<p>Yellowbrick is \"Visual analysis and diagnostic tools to facilitate machine learning model selection.\" In more detail:</p>\n<blockquote><p>\nYellowbrick is a suite of visual diagnostic tools called \"Visualizers\" that extend the scikit-learn API to allow human steering of the model selection process. In a nutshell, Yellowbrick combines scikit-learn with matplotlib in the best tradition of the scikit-learn documentation, but to produce visualizations for your models!\n</p></blockquote>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://github.com/DistrictDataLabs/yellowbrick/raw/develop/docs/images/visualizers.png\" width=\"99%\"/></p>\n<p>Check out the Github repo for examples, and the <a href=\"http://www.scikit-yb.org/en/latest/\" rel=\"noopener\" target=\"_blank\">documentation for much more</a>.</p>\n<p>\u00a0<br/>\n<b>4. <a href=\"https://github.com/minimaxir/textgenrnn\" rel=\"noopener noreferrer\" target=\"_blank\">textgenrnn</a></b></p>\n<p>textgenrnn brings an additional layer of abstraction to text generation tasks, and aims to allow you to \"easily train your own text-generating neural network of any size and complexity on any text dataset with a few lines of code.\"</p>\n<p>The project is built on top of Keras and boasts the following select features:</p>\n<blockquote>\n<ul>\n<li>A modern neural network architecture which utilizes new techniques as attention-weighting and skip-embedding to accelerate training and improve model quality.\n<li>Able to train on and generate text at either the character-level or word-level.\n<li>Able to configure RNN size, the number of RNN layers, and whether to use bidirectional RNNs.\n<li>Able to train on any generic input text file, including large files.\n<li>Able to train models on a GPU and then use them to generate text with a CPU.\n<li>Able to utilize a powerful CuDNN implementation of RNNs when trained on the GPU, which massively speeds up training time as opposed to typical LSTM implementations.\n</li></li></li></li></li></li></ul>\n</blockquote>\n<p>textgenrnn is incredibly easy to get up and running with:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\nfrom textgenrnn import textgenrnn\r\n\r\ntextgen = textgenrnn()\r\ntextgen.train_from_file('hacker-news-2000.txt', num_epochs=1)\r\ntextgen.generate()\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://www.kdnuggets.com/wp-content/uploads/textgenrnn.jpg\" width=\"90%\"/></p>\n<p>You can find more info and examples on the Github repo linked above.</p>\n<p>\u00a0<br/>\n<b>5. <a href=\"https://github.com/plasticityai/magnitude\" rel=\"noopener noreferrer\" target=\"_blank\">Magnitude</a></b></p>\n<p>Magnitude is \"a fast, simple vector embedding utility library.\"</p>\n<blockquote><p>\nA feature-packed Python package and vector storage file format for utilizing vector embeddings in machine learning models in a fast, efficient, and simple manner developed by Plasticity. It is primarily intended to be a simpler / faster alternative to Gensim, but can be used as a generic key-vector store for domains outside NLP.\n</p></blockquote>\n<p>The repo provides links to a variety of popular embedding models which have been prepared in the .magnitude format for usage, and also includes instructions on converting any other word embeddings file to the same format.</p>\n<p>How to import?</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\nfrom pymagnitude import *\r\nvectors = Magnitude(\"/path/to/vectors.magnitude\")</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Right to the point.</p>\n<p>The Github repo is filled with more info, including everything you know to get up and running with this simplified library for using pre-trained word embeddings.</p>\n<p>\u00a0<br/>\n<b>Related</b>:</p>\n<ul class=\"three_ul\">\n<li><a href=\"/2018/02/5-machine-learning-projects-overlook-feb-2018.html\">5 Machine Learning Projects You Should Not Overlook, Feb 2018</a>\n<li><a href=\"/2016/05/five-machine-learning-projects-cant-overlook.html\">5 Machine Learning Projects You Can No Longer Overlook</a>\n<li><a href=\"/2016/06/five-more-machine-learning-projects-cant-overlook.html\">5 More Machine Learning Projects You Can No Longer Overlook</a>\n</li></li></li></ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p> <script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets';\n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div> ", "website": "kdnuggets"}