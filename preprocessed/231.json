{"content": "comments By Pavel Tiunov, Statsbot A single query optimization tip can boost your database performance by 100x. At one point, we advised one of our customers that had a 10TB database to use a date-based multi-column index. As a result, their date range query sped up by 112x. In this post, we share five simple but still powerful tips for PostgreSQL query optimization. Although we usually advise our customers to use these tips to optimize analytic queries (such as aggregation ones), this post is still very helpful for any other type of query. To keep it easy, we ran examples for this article on a test dataset. Although it doesn\u2019t show the actual performance improvement, you will see that our tips solve the significant set of optimization problems and work well in real-world case scenarios. \u00a0 Explain analyze \u00a0 Postgres has a cool extension to the well-known\u00a0 EXPLAIN \u00a0command, which is called\u00a0 EXPLAIN ANALYZE . The difference is that\u00a0 EXPLAIN \u00a0shows you query cost based on collected statistics about your database, and\u00a0 EXPLAIN ANALYZE \u00a0actually runs it to show the processed time for every stage. We highly recommend you use\u00a0 EXPLAIN ANALYZE \u00a0because there are a lot of cases when EXPLAIN shows a higher query cost, while the time to execute is actually less and vice versa. The most important thing is that the EXPLAIN command will help you to understand if a specific index is used and how. The ability to see indexes is the first step to learning PostgreSQL query optimization. \u00a0 One index per query \u00a0 Indexes are materialized copies of your table. They contain only specific columns of the table, so you can quickly find data based on the values in these columns. Indexes in Postgres also store row identifiers or row addresses used to speed up the original table scans. It\u2019s always a trade-off between storage space and query time, and a lot of indexes can introduce overhead for DML operations. However, when read query performance is a priority, as is the case with business analytics, it\u2019s usually a well-working approach. We advise to create one index per unique query for better performance. Look further in this post to learn how to create indexes for specific queries. \u00a0 Using multiple columns in index \u00a0 Let\u2019s review the explain analyze plan of the following simple query without indexes: \r EXPLAIN ANALYZE SELECT line_items.product_id, \r FROM line_items\r WHERE product_id > 80\r GROUP BY 1 An explain analyze returns: \r HashAggregate (cost=13.81..14.52 rows=71 width=12) (actual time=0.137..0.141 rows=20 loops=1)\r Group Key: product_id\r -> Seq Scan on line_items (cost=0.00..13.25 rows=112 width=8) (actual time=0.017..0.082 rows=112 loops=1)\r Filter: (product_id > 80)\r Rows Removed by Filter: 388\r Planning time: 0.082 ms\r Execution time: 0.187 ms This query scans all of the line items to find a product with an id that is greater than 80, and then sums up all the values grouped by that product id. Now we\u2019ll add the index to this table: \r CREATE INDEX items_product_id ON  We created a\u00a0 B-tree index , which contains only one column:\u00a0 product_id . After reading lots of articles about the benefits of using index, one can expect a query boost from such an operation. Sorry, bad news. As we need to sum up the price column in the query above, we still need to scan the original table. Depending on the table statistics, Postgres will choose to scan the original table instead of the index. The thing is, index lacks a\u00a0 price \u00a0column. We can tweak this index by adding a price column as follows: \r CREATE INDEX items_product_id_price ON  If we rerun the explain plan, we\u2019ll see our index is the forth line: \r GroupAggregate (cost=0.27..7.50 rows=71 width=12) (actual time=0.034..0.090 rows=20 loops=1)\r Group Key: product_id\r -> Index Only Scan using items_product_id_price on line_items (cost=0.27..6.23 rows=112 width=8) (actual time=0.024..0.049 rows=112 loops=1)\r Index Cond: (product_id > 80)\r Heap Fetches: 0\r Planning time: 0.271 ms\r Execution time: 0.136 ms But how would putting the price column first affect the PostgreSQL query optimization? \u00a0 Column order in a multicolumn index \u00a0 Well, we figured out that a multicolumn index is used in the previous query because we included both columns. The interesting thing is that we can use another order for these columns while defining the index: \r CREATE INDEX items_product_id_price_reversed ON  If we rerun explain analyze, we\u2019ll see that\u00a0 items_product_id_price_reversed \u00a0is not used. That\u2019s because this index is sorted firstly on\u00a0 price \u00a0and then on\u00a0 product_id . Using this index will lead to a full index scan,\u00a0 which is nearly equivalent to scanning the whole table . That\u2019s why Postgres opts to use scan for an original table. It\u2019s a good practice to put in the first place columns, which you use in filters with the biggest number of unique values. \u00a0 Filters + joins \u00a0 It\u2019s time to figure out what the best set of indexes is for a specific join query, which also has some filter conditions. Usually, you can achieve optimal results by trial and error. As in the case of simple filtering, choose the most restrictive filtering condition and add an index for it. Let\u2019s consider an example: \r SELECT orders.product_id, \r FROM line_items\r LEFT JOIN orders ON line_items.order_id = orders.id\r WHERE line_items.created_at BETWEEN '2018-01-01' and '2018-01-02'\r GROUP BY 1 Here we have join on\u00a0 order_id \u00a0and filter on\u00a0 created_at . This way, we can create a multicolumn index that will contain\u00a0 created_at \u00a0in the first place,\u00a0 order_id \u00a0in the second and\u00a0 price \u00a0in the third: \r CREATE INDEX line_items_created_at_order_id_price ON  We\u2019ll get the following explain plan: \r GroupAggregate (cost=12.62..12.64 rows=1 width=12) (actual time=0.029..0.029 rows=1 loops=1)\r Group Key: orders.product_id\r -> Sort (cost=12.62..12.62 rows=1 width=8) (actual time=0.025..0.026 rows=1 loops=1)\r Sort Key: orders.product_id\r Sort Method: quicksort Memory: 25kB\r -> Nested Loop Left Join (cost=0.56..12.61 rows=1 width=8) (actual time=0.015..0.017 rows=1 loops=1)\r -> Index Only Scan using line_items_created_at_order_id_price on line_items (cost=0.27..4.29 rows=1 width=8) (actual time=0.009..0.010 rows=1 loops=1)\r Index Cond: ((created_at >= '2018-01-01 00:00:00'::timestamp without time zone) AND (created_at <= '2018-01-02 00:00:00'::timestamp without time zone))\r Heap Fetches: 0\r -> Index Scan using orders_pkey on orders (cost=0.29..8.30 rows=1 width=8) (actual time=0.004..0.005 rows=1 loops=1)\r Index Cond: (line_items.order_id = id)\r Planning time: 0.303 ms\r Execution time: 0.072 ms As you can see,\u00a0 line_items_created_at_order_id_price \u00a0is used to reduce scan by date condition. After that, it\u2019s joined with orders using the\u00a0 orders_pkey \u00a0index scan. Date columns are usually one of the best candidates for the first column in a multicolumn index as it reduces scanning throughput in a predictable manner. \u00a0 Conclusion \u00a0 Our tips for PostgreSQL query optimization will help you to speed up queries 10-100x for multi-GB databases. They can solve most of your performance bottlenecks in an 80/20 manner. It doesn\u2019t mean you shouldn\u2019t double check your queries with\u00a0 EXPLAIN \u00a0for real-world case scenarios. \u00a0 Original . Reposted with permission. Related: Scalable Select of Random Rows in SQL SQL Window Functions Tutorial for Business Analysis Calculating Customer Lifetime Value: SQL Example", "title_html": "<h1 id=\"title\">Simple Tips for PostgreSQL Query Optimization</h1> ", "url": "https://www.kdnuggets.com/2018/06/simple-tips-postgresql-query-optimization.html", "tfidf": {"tfidf": {"after": 2.04140414042, "base": 2.2925631769, "loopsnum": 10206.0, "boost": 18.32198499712, "understand": 2.96858638743, "equival": 4.09175257732, "rowsnum": 20412.0, "permiss": 6.280063291139999, "relat": 1.23750876919, "post": 6.71478922881, "here": 2.42307692308, "five": 1.37740760021, "widthnum": 10206.0, "good": 1.51981619759, "pavel": 56.0989399293, "num": 22.00693088022, "speed": 7.740614334480001, "space": 2.39818731118, "would": 1.0828729281799998, "number": 1.10142916609, "follow": 3.1392037964699995, "greater": 2.14801785956, "contain": 4.79444332596, "share": 1.8566249561500001, "dataset": 193.609756098, "about": 2.12972030318, "biggest": 5.2972972973, "articl": 4.03610016524, "itemsproductidpric": 2268.0, "seq": 180.409090909, "manner": 7.8632986627, "ordersproductid": 3402.0, "join": 8.961390833149999, "product": 3.24529844644, "work": 1.11520089913, "abov": 1.90382539873, "candid": 4.51279135873, "price": 20.90322580644, "previous": 1.42846859816, "approach": 2.07556543339, "repost": 933.882352941, "higher": 2.1218925421, "can": 11.7626139142, "defin": 2.72830383227, "wellwork": 1134.0, "recommend": 3.9142011834300003, "overhead": 24.054545454499998, "lineitemscreatedatorderidpric": 3402.0, "instead": 1.59461631177, "creat": 4.9971671388, "their": 1.01547908405, "itemsproductidpricerevers": 2268.0, "multipl": 2.74813917258, "stage": 2.0831911822599998, "heap": 117.6, "how": 4.80750984153, "test": 2.65707112971, "singl": 1.60948905109, "news": 2.08182533438, "productid": 7938.0, "such": 2.12302754748, "keep": 2.04245465071, "bad": 3.3944836433599996, "explain": 15.602948402940001, "execut": 8.9454852796, "order": 6.23125834055, "timestamp": 1058.4, "whi": 3.2566153846200003, "interest": 1.60331246213, "tutori": 59.4606741573, "had": 1.0475750577399998, "will": 7.34886591576, "fetch": 117.16605166059999, "scenario": 30.7972841902, "consid": 1.2397313759200002, "analysi": 3.47852760736, "second": 1.1130898128, "power": 1.3396337861799998, "select": 2.02345144022, "tabl": 34.38844765344, "postgresql": 4536.0, "near": 1.28769567686, "groupaggreg": 2268.0, "show": 5.0681564246, "need": 2.8745247148199997, "our": 11.78794178795, "there": 1.04091266719, "command": 5.33378128674, "cost": 4.63871439006, "expect": 2.20011086475, "point": 1.25990000794, "ordersid": 1134.0, "key": 9.1202068074, "review": 2.2099109131400003, "best": 3.1657028913200005, "exampl": 4.51450236966, "has": 2.0872995004, "have": 1.0148948411399998, "realworld": 2268.0, "createdat": 4536.0, "numkb": 387.219512195, "now": 1.160780873, "wellknown": 1134.0, "further": 1.3618116315, "sorri": 39.3945409429, "out": 2.12033388982, "aggreg": 17.542541436500002, "usual": 6.90035857872, "per": 3.9195161091199995, "see": 6.36210627555, "high": 1.14777327935, "alway": 2.06745670009, "time": 12.13529524176, "advis": 15.043588123829998, "abil": 2.70875277256, "reduc": 3.97396745932, "orderspkey": 2268.0, "opt": 12.721153846199998, "also": 2.02953020134, "optim": 92.3023255816, "versa": 23.381443299, "mean": 1.44906900329, "not": 1.01567398119, "storag": 8.623574144489998, "materi": 2.13014893332, "row": 22.196434813000003, "plan": 9.214161346500001, "window": 5.86479497599, "signific": 1.4529147982100001, "nest": 21.2530120482, "whole": 2.29488291414, "the": 47.0, "run": 1.55692850838, "lineitemsproductid": 1134.0, "read": 4.629921259840001, "lineitemscreatedat": 1134.0, "specif": 7.487796250439999, "quick": 2.205, "lineitem": 5670.0, "easi": 5.2937645882, "less": 1.46904783936, "postgr": 4536.0, "solv": 14.53846153846, "than": 1.03278688525, "function": 2.495441685, "index": 244.8920229175, "they": 2.06034650574, "statsbot": 1134.0, "zone": 8.413354531, "orderid": 2268.0, "extens": 1.99171998495, "howev": 1.0945191313299998, "choos": 8.35798894446, "although": 2.2993699761, "anoth": 1.13643521832, "still": 3.5599073174399996, "which": 5.025959224999999, "databas": 32.98909090908, "rerun": 143.6742081448, "tweak": 113.4, "bottleneck": 90.72, "item": 5.07869481766, "practic": 1.70434782609, "lack": 1.9271667880599999, "simpl": 10.19434931508, "other": 1.00992366412, "uniqu": 6.03191489362, "calcul": 6.12972972973, "one": 8.05019965776, "restrict": 3.1062414400300002, "valu": 9.111047345760001, "custom": 10.903846153859998, "full": 1.66729678639, "shouldn": 1134.0, "becaus": 3.4485554992499994, "problem": 1.76674827509, "loop": 13.5114893617, "get": 1.78562591385, "btree": 1134.0, "random": 7.1902173913, "without": 3.88641370869, "lot": 13.22632602054, "some": 1.04036697248, "forth": 8.65177111717, "collect": 1.64109985528, "add": 9.22486926206, "scan": 263.3459715642, "process": 1.69524826482, "both": 1.05215720061, "analyt": 34.513043478200004, "memori": 2.57392996109, "includ": 1.0190641247799999, "tip": 47.10979228485, "cool": 6.8578833693300005, "use": 18.533497632839996, "multigb": 1134.0, "introduc": 1.7258397651900002, "set": 2.37415881562, "ani": 1.13383802314, "when": 2.0415353951, "hashaggreg": 1134.0, "and": 13.00081889769, "from": 1.00056721497, "result": 2.29223216864, "perform": 7.6569885212500015, "differ": 1.23654490225, "but": 2.03264835798, "put": 3.31613577024, "statist": 8.48530197756, "first": 6.045696877379999, "most": 3.06289389069, "between": 1.03453668708, "left": 1.4398693996, "return": 1.39532431007, "what": 1.25343439128, "for": 16.00504064016, "depend": 2.2411067193700003, "predict": 5.18484650555, "all": 2.02293577982, "ran": 3.4915328788199997, "with": 6.007189253939998, "store": 3.44680851064, "are": 3.08971780734, "condit": 5.774490785639999, "datebas": 1134.0, "better": 2.0065722952500002, "case": 7.4249368628, "that": 13.05179282875, "sort": 20.752941176479997, "look": 1.9086318826599997, "filter": 135.1148936168, "call": 1.0676529926, "third": 1.4195278969999998, "improv": 2.04376930999, "cond": 523.3846153860001, "veri": 1.25880114177, "type": 2.0281042411900003, "achiev": 1.87216981132, "these": 3.22246278756, "benefit": 3.06841901817, "tiunov": 1134.0, "lineitemsorderid": 2268.0, "column": 99.09228711550001, "comment": 3.05954904606, "remov": 2.0058117498400003, "then": 2.17315721032, "group": 4.83987500952, "numx": 86.5963636365, "sum": 13.363636363639998, "queri": 1294.8510638292, "way": 1.2190739461, "onli": 4.102590606640001, "check": 6.50655737705, "place": 2.2008733624400003, "sped": 103.090909091, "well": 2.1311497416, "this": 10.037936267100001, "thing": 7.219645293329998, "step": 2.8279301745599996, "error": 6.04109589041, "lifetim": 7.1352808988800005, "trial": 4.04175152749, "lead": 1.2664326739, "data": 3.37643555934, "throughput": 134.542372881, "oper": 3.10958769954, "address": 2.86157173756, "method": 2.5714285714300003, "rang": 1.7848229342299997, "analyz": 38.74557657108, "origin": 5.6862464183500006, "timenum": 10206.0, "multicolumn": 5670.0, "learn": 4.6455010973, "prioriti": 8.623574144489998, "identifi": 2.30187037843, "figur": 4.0686827268, "scalabl": 186.776470588, "import": 1.3401992233700002, "itemsproductid": 1134.0, "everi": 1.47917637194, "copi": 3.8375634517800004, "busi": 4.11082340756, "let": 6.97233201582, "date": 4.89244992297, "while": 2.0883977900599997, "quicksort": 1134.0, "help": 4.19888918277, "affect": 2.4794627518400003, "tradeoff": 208.89473684200001, "find": 3.4588235294199996, "vice": 5.19162851537, "line": 2.8365195640599996, "actual": 22.49787435048, "conclus": 4.84615384615, "doubl": 2.9713644020200003, "costnum": 10206.0}, "logtfidf": {"after": 0.040981389296199995, "base": 0.27304660457400004, "loopsnum": 63.301558358609995, "boost": 4.429909048380001, "understand": 1.0880858756799998, "equival": 1.40897338129, "rowsnum": 126.60311671721999, "permiss": 1.8373800586400002, "relat": 0.21310030165399999, "post": 2.4171004581029996, "here": 0.8850381883700001, "five": 0.320203181906, "widthnum": 63.301558358609995, "good": 0.418589404907, "pavel": 4.02711691626, "num": 0.006929788698734001, "speed": 2.7066677505400003, "space": 0.874713164972, "would": 0.0796176279647, "number": 0.0966085784186, "follow": 0.1360707332826, "greater": 0.764545491118, "contain": 1.406535954708, "share": 0.618760299747, "dataset": 5.26584456664, "about": 0.1256869549492, "biggest": 1.6671967465900002, "articl": 1.404263479148, "itemsproductidpric": 14.067012968579998, "seq": 5.19522699942, "manner": 2.73811803006, "ordersproductid": 21.100519452869996, "join": 2.9174376471000003, "product": 0.968120273072, "work": 0.109034567273, "abov": 0.643865229816, "candid": 1.50691588861, "price": 7.48886413584, "previous": 0.356602960063, "approach": 0.7302336145810001, "repost": 6.83935046985, "higher": 0.752308398995, "can": 1.6234109639399998, "defin": 1.00368010925, "wellwork": 7.033506484289999, "recommend": 1.36461126863, "overhead": 3.18032397888, "lineitemscreatedatorderidpric": 21.100519452869996, "instead": 0.46663315041500003, "creat": 0.890307274056, "their": 0.015360505122700001, "itemsproductidpricerevers": 14.067012968579998, "multipl": 1.01092401812, "stage": 0.733900940237, "heap": 8.1482837098, "how": 1.4147008707900002, "test": 0.977224437103, "singl": 0.475916769059, "news": 0.733245073485, "productid": 49.23454539002999, "such": 0.119391955612, "keep": 0.7141523446729999, "bad": 1.2221516561799999, "explain": 5.734202564148, "execut": 3.219418423456, "order": 1.1007019039650001, "timestamp": 12.54273286448, "whi": 1.18068843047, "interest": 0.47207177798199995, "tutori": 4.0853151555, "had": 0.0464780244111, "will": 1.2167192094900001, "fetch": 8.14088998604, "scenario": 5.46855865978, "consid": 0.214894723824, "analysi": 1.2466091029200002, "second": 0.10713976337999999, "power": 0.292396282715, "select": 0.704804687133, "tabl": 12.064464959490001, "postgresql": 28.134025937159997, "near": 0.252854324034, "groupaggreg": 14.067012968579998, "show": 0.946731064052, "need": 0.725480326884, "our": 4.288196070910001, "there": 0.0400978929255, "command": 1.9618264815000002, "cost": 1.68258015236, "expect": 0.78850775216, "point": 0.23103235903299998, "ordersid": 7.033506484289999, "key": 3.29679247584, "review": 0.7929522039210001, "best": 0.918455865894, "exampl": 1.2260480249969998, "has": 0.0854478897096, "have": 0.0147850023412, "realworld": 14.067012968579998, "createdat": 28.134025937159997, "numkb": 5.958991747200001, "now": 0.149092945021, "wellknown": 7.033506484289999, "further": 0.308815895297, "sorri": 3.6736272519599997, "out": 0.1168527818386, "aggreg": 2.8646288702, "usual": 2.181116068256, "per": 1.345642048144, "see": 1.20460792746, "high": 0.13782378654000002, "alway": 0.726319204572, "time": 0.1345382263512, "advis": 4.837018720380001, "abil": 0.996488297427, "reduc": 1.373235550286, "orderspkey": 14.067012968579998, "opt": 2.54326626497, "also": 0.0293143156, "optim": 19.565022363279997, "versa": 3.15194268634, "mean": 0.37092128352, "not": 0.0155524130075, "storag": 2.1544996326700003, "materi": 0.7561918990209999, "row": 6.8545492834, "plan": 2.573892648882, "window": 1.7689675242900003, "signific": 0.373571744332, "nest": 3.0564986287700004, "whole": 0.8306818244059999, "the": 0.0, "run": 0.442714975539, "lineitemsproductid": 7.033506484289999, "read": 1.67878536176, "lineitemscreatedat": 7.033506484289999, "specif": 2.507920670164, "quick": 0.790727508899, "lineitem": 35.16753242145, "easi": 1.6665296351499999, "less": 0.3846144626, "postgr": 28.134025937159997, "solv": 3.9673009540800006, "than": 0.0322608622182, "function": 0.914465741594, "index": 68.0914265192, "they": 0.0594539895352, "statsbot": 7.033506484289999, "zone": 2.8733461759400005, "orderid": 14.067012968579998, "extens": 0.6889985794750001, "howev": 0.0903151173475, "choos": 2.86014132144, "although": 0.278975962836, "anoth": 0.127896361652, "still": 0.5133666642870001, "which": 0.02589206922715, "databas": 8.43953026872, "rerun": 8.548802224780001, "tweak": 4.73092139129, "bottleneck": 4.50777783998, "item": 1.62505430292, "practic": 0.533182530867, "lack": 0.656050938907, "simpl": 3.66966386817, "other": 0.00987474791976, "uniqu": 2.2078346818, "calcul": 1.8131506592099997, "one": 0.050042813164, "restrict": 1.13341345513, "valu": 3.292773240592, "custom": 3.8715098894399995, "full": 0.511203624148, "shouldn": 7.033506484289999, "becaus": 0.418029476475, "problem": 0.569140724273, "loop": 2.60354038732, "get": 0.579769005782, "btree": 7.033506484289999, "random": 1.9727214065099998, "without": 0.7766235538230001, "lot": 4.450790850750001, "some": 0.0395735090645, "forth": 2.1577640534099998, "collect": 0.49536666052, "add": 3.05751167426, "scan": 41.08175847034, "process": 0.527829199025, "both": 0.050842533389300004, "analyt": 5.696380287719999, "memori": 0.9454338986599999, "includ": 0.0188846813905, "tip": 11.215214855600003, "cool": 1.9253988473800001, "use": 0.5257443551688, "multigb": 7.033506484289999, "introduc": 0.5457137524260001, "set": 0.342992022578, "ani": 0.125608358366, "when": 0.0411099777168, "hashaggreg": 7.033506484289999, "and": 0.0008188718468268, "from": 0.000567054168866, "result": 0.272757816762, "perform": 2.1309042528999997, "differ": 0.212321121312, "but": 0.0323847441438, "put": 1.011305999708, "statist": 2.8903766141400005, "first": 0.04552373887296, "most": 0.06224368888679999, "between": 0.033953681165299995, "left": 0.364552414753, "return": 0.333126868592, "what": 0.225887296827, "for": 0.005039846326352001, "depend": 0.806969815, "predict": 1.6457402376899999, "all": 0.022805264195599997, "ran": 1.25034086008, "with": 0.00718495028034, "store": 1.2374487335200002, "are": 0.08840242074810001, "condit": 1.964513364618, "datebas": 7.033506484289999, "better": 0.6964279406, "case": 1.9770313444449998, "that": 0.05168992893532, "sort": 6.58557447584, "look": 0.6463866936, "filter": 22.61347150912, "call": 0.0654627744488, "third": 0.35032434942900004, "improv": 0.7147958039319999, "cond": 15.48511292217, "veri": 0.230159793238, "type": 0.707101485387, "achiev": 0.6270980851169999, "these": 0.2146008582024, "benefit": 1.12116245116, "tiunov": 7.033506484289999, "lineitemsorderid": 14.067012968579998, "column": 27.39791991132, "comment": 1.11826753454, "remov": 0.6960488415880001, "then": 0.16606773046179998, "group": 0.762378139188, "numx": 10.08793660704, "sum": 3.79878026684, "queri": 92.70510508807999, "way": 0.19809150993500002, "onli": 0.10129707331639999, "check": 1.87281049562, "place": 0.1914141679144, "sped": 4.63561121149, "well": 0.1270288766312, "this": 0.037864490525, "thing": 2.63458060404, "step": 1.03954505698, "error": 1.7985854343, "lifetim": 1.9650516193, "trial": 1.3966781444299998, "lead": 0.23620402986699998, "data": 1.2168205848, "throughput": 4.90187918944, "oper": 0.882685928694, "address": 1.05137103247, "method": 0.944461608841, "rang": 0.579319213803, "analyz": 9.082888940639998, "origin": 0.643062187935, "timenum": 63.301558358609995, "multicolumn": 35.16753242145, "learn": 1.68550412949, "prioriti": 2.1544996326700003, "identifi": 0.833722000472, "figur": 1.4203442243200002, "scalabl": 5.22991255741, "import": 0.292818277066, "itemsproductid": 7.033506484289999, "everi": 0.391485427421, "copi": 1.34483764744, "busi": 1.44095234071, "let": 2.4976051345599997, "date": 1.467242688291, "while": 0.08649996758760002, "quicksort": 7.033506484289999, "help": 1.008623164032, "affect": 0.908041904384, "tradeoff": 5.34183047362, "find": 1.095562660576, "vice": 1.64704742741, "line": 0.698861228904, "actual": 7.542170179776, "conclus": 1.57818536893, "doubl": 1.0890212419499998, "costnum": 63.301558358609995}, "logidf": {"after": 0.020490694648099998, "base": 0.13652330228700002, "loopsnum": 7.033506484289999, "boost": 2.2149545241900004, "understand": 1.0880858756799998, "equival": 1.40897338129, "rowsnum": 7.033506484289999, "permiss": 1.8373800586400002, "relat": 0.21310030165399999, "post": 0.8057001527009999, "here": 0.8850381883700001, "five": 0.320203181906, "widthnum": 7.033506484289999, "good": 0.418589404907, "pavel": 4.02711691626, "num": 0.00031499039539700004, "speed": 1.3533338752700002, "space": 0.874713164972, "would": 0.0796176279647, "number": 0.0966085784186, "follow": 0.045356911094199995, "greater": 0.764545491118, "contain": 0.468845318236, "share": 0.618760299747, "dataset": 5.26584456664, "about": 0.0628434774746, "biggest": 1.6671967465900002, "articl": 0.702131739574, "itemsproductidpric": 7.033506484289999, "seq": 5.19522699942, "manner": 1.36905901503, "ordersproductid": 7.033506484289999, "join": 0.58348752942, "product": 0.484060136536, "work": 0.109034567273, "abov": 0.643865229816, "candid": 1.50691588861, "price": 1.24814402264, "previous": 0.356602960063, "approach": 0.7302336145810001, "repost": 6.83935046985, "higher": 0.752308398995, "can": 0.162341096394, "defin": 1.00368010925, "wellwork": 7.033506484289999, "recommend": 1.36461126863, "overhead": 3.18032397888, "lineitemscreatedatorderidpric": 7.033506484289999, "instead": 0.46663315041500003, "creat": 0.222576818514, "their": 0.015360505122700001, "itemsproductidpricerevers": 7.033506484289999, "multipl": 1.01092401812, "stage": 0.733900940237, "heap": 4.0741418549, "how": 0.47156695693000006, "test": 0.977224437103, "singl": 0.475916769059, "news": 0.733245073485, "productid": 7.033506484289999, "such": 0.059695977806, "keep": 0.7141523446729999, "bad": 1.2221516561799999, "explain": 0.955700427358, "execut": 0.804854605864, "order": 0.22014038079300002, "timestamp": 6.27136643224, "whi": 1.18068843047, "interest": 0.47207177798199995, "tutori": 4.0853151555, "had": 0.0464780244111, "will": 0.202786534915, "fetch": 4.07044499302, "scenario": 2.73427932989, "consid": 0.214894723824, "analysi": 1.2466091029200002, "second": 0.10713976337999999, "power": 0.292396282715, "select": 0.704804687133, "tabl": 1.34049610661, "postgresql": 7.033506484289999, "near": 0.252854324034, "groupaggreg": 7.033506484289999, "show": 0.236682766013, "need": 0.362740163442, "our": 0.8576392141820001, "there": 0.0400978929255, "command": 0.9809132407500001, "cost": 0.84129007618, "expect": 0.78850775216, "point": 0.23103235903299998, "ordersid": 7.033506484289999, "key": 0.82419811896, "review": 0.7929522039210001, "best": 0.459227932947, "exampl": 0.40868267499899996, "has": 0.0427239448548, "have": 0.0147850023412, "realworld": 7.033506484289999, "createdat": 7.033506484289999, "numkb": 5.958991747200001, "now": 0.149092945021, "wellknown": 7.033506484289999, "further": 0.308815895297, "sorri": 3.6736272519599997, "out": 0.0584263909193, "aggreg": 2.8646288702, "usual": 0.545279017064, "per": 0.672821024072, "see": 0.240921585492, "high": 0.13782378654000002, "alway": 0.726319204572, "time": 0.0112115188626, "advis": 1.6123395734600001, "abil": 0.996488297427, "reduc": 0.686617775143, "orderspkey": 7.033506484289999, "opt": 2.54326626497, "also": 0.0146571578, "optim": 2.4456277954099996, "versa": 3.15194268634, "mean": 0.37092128352, "not": 0.0155524130075, "storag": 2.1544996326700003, "materi": 0.7561918990209999, "row": 1.71363732085, "plan": 0.428982108147, "window": 1.7689675242900003, "signific": 0.373571744332, "nest": 3.0564986287700004, "whole": 0.8306818244059999, "the": 0.0, "run": 0.442714975539, "lineitemsproductid": 7.033506484289999, "read": 0.83939268088, "lineitemscreatedat": 7.033506484289999, "specif": 0.626980167541, "quick": 0.790727508899, "lineitem": 7.033506484289999, "easi": 1.6665296351499999, "less": 0.3846144626, "postgr": 7.033506484289999, "solv": 1.9836504770400003, "than": 0.0322608622182, "function": 0.914465741594, "index": 1.94546932912, "they": 0.0297269947676, "statsbot": 7.033506484289999, "zone": 1.4366730879700003, "orderid": 7.033506484289999, "extens": 0.6889985794750001, "howev": 0.0903151173475, "choos": 1.43007066072, "although": 0.139487981418, "anoth": 0.127896361652, "still": 0.17112222142900002, "which": 0.00517841384543, "databas": 2.10988256718, "rerun": 4.2744011123900005, "tweak": 4.73092139129, "bottleneck": 4.50777783998, "item": 1.62505430292, "practic": 0.533182530867, "lack": 0.656050938907, "simpl": 1.2232212893899999, "other": 0.00987474791976, "uniqu": 1.1039173409, "calcul": 1.8131506592099997, "one": 0.0062553516455, "restrict": 1.13341345513, "valu": 0.823193310148, "custom": 1.2905032964799998, "full": 0.511203624148, "shouldn": 7.033506484289999, "becaus": 0.139343158825, "problem": 0.569140724273, "loop": 2.60354038732, "get": 0.579769005782, "btree": 7.033506484289999, "random": 1.9727214065099998, "without": 0.258874517941, "lot": 1.4835969502500002, "some": 0.0395735090645, "forth": 2.1577640534099998, "collect": 0.49536666052, "add": 1.52875583713, "scan": 2.93441131931, "process": 0.527829199025, "both": 0.050842533389300004, "analyt": 2.8481901438599997, "memori": 0.9454338986599999, "includ": 0.0188846813905, "tip": 2.2430429711200004, "cool": 1.9253988473800001, "use": 0.0292080197316, "multigb": 7.033506484289999, "introduc": 0.5457137524260001, "set": 0.171496011289, "ani": 0.125608358366, "when": 0.0205549888584, "hashaggreg": 7.033506484289999, "and": 6.29901420636e-05, "from": 0.000567054168866, "result": 0.136378908381, "perform": 0.42618085058, "differ": 0.212321121312, "but": 0.0161923720719, "put": 0.505652999854, "statist": 1.4451883070700002, "first": 0.0075872898121599995, "most": 0.020747896295599998, "between": 0.033953681165299995, "left": 0.364552414753, "return": 0.333126868592, "what": 0.225887296827, "for": 0.00031499039539700004, "depend": 0.806969815, "predict": 1.6457402376899999, "all": 0.011402632097799998, "ran": 1.25034086008, "with": 0.00119749171339, "store": 1.2374487335200002, "are": 0.0294674735827, "condit": 0.654837788206, "datebas": 7.033506484289999, "better": 0.6964279406, "case": 0.395406268889, "that": 0.00397614837964, "sort": 1.64639361896, "look": 0.6463866936, "filter": 2.82668393864, "call": 0.0654627744488, "third": 0.35032434942900004, "improv": 0.7147958039319999, "cond": 5.16170430739, "veri": 0.230159793238, "type": 0.707101485387, "achiev": 0.6270980851169999, "these": 0.0715336194008, "benefit": 1.12116245116, "tiunov": 7.033506484289999, "lineitemsorderid": 7.033506484289999, "column": 1.95699427938, "comment": 1.11826753454, "remov": 0.6960488415880001, "then": 0.08303386523089999, "group": 0.190594534797, "numx": 3.36264553568, "sum": 1.89939013342, "queri": 4.03065674296, "way": 0.19809150993500002, "onli": 0.025324268329099998, "check": 1.87281049562, "place": 0.0957070839572, "sped": 4.63561121149, "well": 0.0635144383156, "this": 0.0037864490525, "thing": 0.8781935346799999, "step": 1.03954505698, "error": 1.7985854343, "lifetim": 1.9650516193, "trial": 1.3966781444299998, "lead": 0.23620402986699998, "data": 1.2168205848, "throughput": 4.90187918944, "oper": 0.441342964347, "address": 1.05137103247, "method": 0.944461608841, "rang": 0.579319213803, "analyz": 2.2707222351599996, "origin": 0.128612437587, "timenum": 7.033506484289999, "multicolumn": 7.033506484289999, "learn": 0.842752064745, "prioriti": 2.1544996326700003, "identifi": 0.833722000472, "figur": 0.7101721121600001, "scalabl": 5.22991255741, "import": 0.292818277066, "itemsproductid": 7.033506484289999, "everi": 0.391485427421, "copi": 1.34483764744, "busi": 0.720476170355, "let": 1.2488025672799998, "date": 0.489080896097, "while": 0.04324998379380001, "quicksort": 7.033506484289999, "help": 0.336207721344, "affect": 0.908041904384, "tradeoff": 5.34183047362, "find": 0.547781330288, "vice": 1.64704742741, "line": 0.349430614452, "actual": 0.628514181648, "conclus": 1.57818536893, "doubl": 1.0890212419499998, "costnum": 7.033506484289999}, "freq": {"after": 2, "base": 2, "loopsnum": 9, "boost": 2, "understand": 1, "equival": 1, "rowsnum": 18, "permiss": 1, "relat": 1, "post": 3, "here": 1, "five": 1, "widthnum": 9, "good": 1, "pavel": 1, "num": 22, "speed": 2, "space": 1, "would": 1, "number": 1, "follow": 3, "greater": 1, "contain": 3, "share": 1, "dataset": 1, "about": 2, "biggest": 1, "articl": 2, "itemsproductidpric": 2, "seq": 1, "manner": 2, "ordersproductid": 3, "join": 5, "product": 2, "work": 1, "abov": 1, "candid": 1, "price": 6, "previous": 1, "approach": 1, "repost": 1, "higher": 1, "can": 10, "defin": 1, "wellwork": 1, "recommend": 1, "overhead": 1, "lineitemscreatedatorderidpric": 3, "instead": 1, "creat": 4, "their": 1, "itemsproductidpricerevers": 2, "multipl": 1, "stage": 1, "heap": 2, "how": 3, "test": 1, "singl": 1, "news": 1, "productid": 7, "such": 2, "keep": 1, "bad": 1, "explain": 6, "execut": 4, "order": 5, "timestamp": 2, "whi": 1, "interest": 1, "tutori": 1, "had": 1, "will": 6, "fetch": 2, "scenario": 2, "consid": 1, "analysi": 1, "second": 1, "power": 1, "select": 1, "tabl": 9, "postgresql": 4, "near": 1, "groupaggreg": 2, "show": 4, "need": 2, "our": 5, "there": 1, "command": 2, "cost": 2, "expect": 1, "point": 1, "ordersid": 1, "key": 4, "review": 1, "best": 2, "exampl": 3, "has": 2, "have": 1, "realworld": 2, "createdat": 4, "numkb": 1, "now": 1, "wellknown": 1, "further": 1, "sorri": 1, "out": 2, "aggreg": 1, "usual": 4, "per": 2, "see": 5, "high": 1, "alway": 1, "time": 12, "advis": 3, "abil": 1, "reduc": 2, "orderspkey": 2, "opt": 1, "also": 2, "optim": 8, "versa": 1, "mean": 1, "not": 1, "storag": 1, "materi": 1, "row": 4, "plan": 6, "window": 1, "signific": 1, "nest": 1, "whole": 1, "the": 47, "run": 1, "lineitemsproductid": 1, "read": 2, "lineitemscreatedat": 1, "specif": 4, "quick": 1, "lineitem": 5, "easi": 1, "less": 1, "postgr": 4, "solv": 2, "than": 1, "function": 1, "index": 35, "they": 2, "statsbot": 1, "zone": 2, "orderid": 2, "extens": 1, "howev": 1, "choos": 2, "although": 2, "anoth": 1, "still": 3, "which": 5, "databas": 4, "rerun": 2, "tweak": 1, "bottleneck": 1, "item": 1, "practic": 1, "lack": 1, "simpl": 3, "other": 1, "uniqu": 2, "calcul": 1, "one": 8, "restrict": 1, "valu": 4, "custom": 3, "full": 1, "shouldn": 1, "becaus": 3, "problem": 1, "loop": 1, "get": 1, "btree": 1, "random": 1, "without": 3, "lot": 3, "some": 1, "forth": 1, "collect": 1, "add": 2, "scan": 14, "process": 1, "both": 1, "analyt": 2, "memori": 1, "includ": 1, "tip": 5, "cool": 1, "use": 18, "multigb": 1, "introduc": 1, "set": 2, "ani": 1, "when": 2, "hashaggreg": 1, "and": 13, "from": 1, "result": 2, "perform": 5, "differ": 1, "but": 2, "put": 2, "statist": 2, "first": 6, "most": 3, "between": 1, "left": 1, "return": 1, "what": 1, "for": 16, "depend": 1, "predict": 1, "all": 2, "ran": 1, "with": 6, "store": 1, "are": 3, "condit": 3, "datebas": 1, "better": 1, "case": 5, "that": 13, "sort": 4, "look": 1, "filter": 8, "call": 1, "third": 1, "improv": 1, "cond": 3, "veri": 1, "type": 1, "achiev": 1, "these": 3, "benefit": 1, "tiunov": 1, "lineitemsorderid": 2, "column": 14, "comment": 1, "remov": 1, "then": 2, "group": 4, "numx": 3, "sum": 2, "queri": 23, "way": 1, "onli": 4, "check": 1, "place": 2, "sped": 1, "well": 2, "this": 10, "thing": 3, "step": 1, "error": 1, "lifetim": 1, "trial": 1, "lead": 1, "data": 1, "throughput": 1, "oper": 2, "address": 1, "method": 1, "rang": 1, "analyz": 4, "origin": 5, "timenum": 9, "multicolumn": 5, "learn": 2, "prioriti": 1, "identifi": 1, "figur": 2, "scalabl": 1, "import": 1, "itemsproductid": 1, "everi": 1, "copi": 1, "busi": 2, "let": 2, "date": 3, "while": 2, "quicksort": 1, "help": 3, "affect": 1, "tradeoff": 1, "find": 2, "vice": 1, "line": 2, "actual": 12, "conclus": 1, "doubl": 1, "costnum": 9}, "idf": {"after": 1.02070207021, "base": 1.14628158845, "loopsnum": 1134.0, "boost": 9.16099249856, "understand": 2.96858638743, "equival": 4.09175257732, "rowsnum": 1134.0, "permiss": 6.280063291139999, "relat": 1.23750876919, "post": 2.23826307627, "here": 2.42307692308, "five": 1.37740760021, "widthnum": 1134.0, "good": 1.51981619759, "pavel": 56.0989399293, "num": 1.00031504001, "speed": 3.8703071672400005, "space": 2.39818731118, "would": 1.0828729281799998, "number": 1.10142916609, "follow": 1.04640126549, "greater": 2.14801785956, "contain": 1.59814777532, "share": 1.8566249561500001, "dataset": 193.609756098, "about": 1.06486015159, "biggest": 5.2972972973, "articl": 2.01805008262, "itemsproductidpric": 1134.0, "seq": 180.409090909, "manner": 3.93164933135, "ordersproductid": 1134.0, "join": 1.7922781666299998, "product": 1.62264922322, "work": 1.11520089913, "abov": 1.90382539873, "candid": 4.51279135873, "price": 3.4838709677399997, "previous": 1.42846859816, "approach": 2.07556543339, "repost": 933.882352941, "higher": 2.1218925421, "can": 1.17626139142, "defin": 2.72830383227, "wellwork": 1134.0, "recommend": 3.9142011834300003, "overhead": 24.054545454499998, "lineitemscreatedatorderidpric": 1134.0, "instead": 1.59461631177, "creat": 1.2492917847, "their": 1.01547908405, "itemsproductidpricerevers": 1134.0, "multipl": 2.74813917258, "stage": 2.0831911822599998, "heap": 58.8, "how": 1.60250328051, "test": 2.65707112971, "singl": 1.60948905109, "news": 2.08182533438, "productid": 1134.0, "such": 1.06151377374, "keep": 2.04245465071, "bad": 3.3944836433599996, "explain": 2.60049140049, "execut": 2.2363713199, "order": 1.24625166811, "timestamp": 529.2, "whi": 3.2566153846200003, "interest": 1.60331246213, "tutori": 59.4606741573, "had": 1.0475750577399998, "will": 1.22481098596, "fetch": 58.583025830299995, "scenario": 15.3986420951, "consid": 1.2397313759200002, "analysi": 3.47852760736, "second": 1.1130898128, "power": 1.3396337861799998, "select": 2.02345144022, "tabl": 3.82093862816, "postgresql": 1134.0, "near": 1.28769567686, "groupaggreg": 1134.0, "show": 1.26703910615, "need": 1.4372623574099999, "our": 2.35758835759, "there": 1.04091266719, "command": 2.66689064337, "cost": 2.31935719503, "expect": 2.20011086475, "point": 1.25990000794, "ordersid": 1134.0, "key": 2.28005170185, "review": 2.2099109131400003, "best": 1.5828514456600002, "exampl": 1.50483412322, "has": 1.0436497502, "have": 1.0148948411399998, "realworld": 1134.0, "createdat": 1134.0, "numkb": 387.219512195, "now": 1.160780873, "wellknown": 1134.0, "further": 1.3618116315, "sorri": 39.3945409429, "out": 1.06016694491, "aggreg": 17.542541436500002, "usual": 1.72508964468, "per": 1.9597580545599997, "see": 1.27242125511, "high": 1.14777327935, "alway": 2.06745670009, "time": 1.01127460348, "advis": 5.0145293746099995, "abil": 2.70875277256, "reduc": 1.98698372966, "orderspkey": 1134.0, "opt": 12.721153846199998, "also": 1.01476510067, "optim": 11.5377906977, "versa": 23.381443299, "mean": 1.44906900329, "not": 1.01567398119, "storag": 8.623574144489998, "materi": 2.13014893332, "row": 5.549108703250001, "plan": 1.5356935577500002, "window": 5.86479497599, "signific": 1.4529147982100001, "nest": 21.2530120482, "whole": 2.29488291414, "the": 1.0, "run": 1.55692850838, "lineitemsproductid": 1134.0, "read": 2.3149606299200003, "lineitemscreatedat": 1134.0, "specif": 1.8719490626099997, "quick": 2.205, "lineitem": 1134.0, "easi": 5.2937645882, "less": 1.46904783936, "postgr": 1134.0, "solv": 7.26923076923, "than": 1.03278688525, "function": 2.495441685, "index": 6.9969149405, "they": 1.03017325287, "statsbot": 1134.0, "zone": 4.2066772655, "orderid": 1134.0, "extens": 1.99171998495, "howev": 1.0945191313299998, "choos": 4.17899447223, "although": 1.14968498805, "anoth": 1.13643521832, "still": 1.1866357724799999, "which": 1.005191845, "databas": 8.24727272727, "rerun": 71.8371040724, "tweak": 113.4, "bottleneck": 90.72, "item": 5.07869481766, "practic": 1.70434782609, "lack": 1.9271667880599999, "simpl": 3.3981164383599998, "other": 1.00992366412, "uniqu": 3.01595744681, "calcul": 6.12972972973, "one": 1.00627495722, "restrict": 3.1062414400300002, "valu": 2.2777618364400003, "custom": 3.6346153846199996, "full": 1.66729678639, "shouldn": 1134.0, "becaus": 1.1495184997499999, "problem": 1.76674827509, "loop": 13.5114893617, "get": 1.78562591385, "btree": 1134.0, "random": 7.1902173913, "without": 1.29547123623, "lot": 4.40877534018, "some": 1.04036697248, "forth": 8.65177111717, "collect": 1.64109985528, "add": 4.61243463103, "scan": 18.8104265403, "process": 1.69524826482, "both": 1.05215720061, "analyt": 17.256521739100002, "memori": 2.57392996109, "includ": 1.0190641247799999, "tip": 9.42195845697, "cool": 6.8578833693300005, "use": 1.0296387573799999, "multigb": 1134.0, "introduc": 1.7258397651900002, "set": 1.18707940781, "ani": 1.13383802314, "when": 1.02076769755, "hashaggreg": 1134.0, "and": 1.00006299213, "from": 1.00056721497, "result": 1.14611608432, "perform": 1.5313977042500002, "differ": 1.23654490225, "but": 1.01632417899, "put": 1.65806788512, "statist": 4.24265098878, "first": 1.00761614623, "most": 1.02096463023, "between": 1.03453668708, "left": 1.4398693996, "return": 1.39532431007, "what": 1.25343439128, "for": 1.00031504001, "depend": 2.2411067193700003, "predict": 5.18484650555, "all": 1.01146788991, "ran": 3.4915328788199997, "with": 1.0011982089899998, "store": 3.44680851064, "are": 1.02990593578, "condit": 1.92483026188, "datebas": 1134.0, "better": 2.0065722952500002, "case": 1.48498737256, "that": 1.00398406375, "sort": 5.188235294119999, "look": 1.9086318826599997, "filter": 16.8893617021, "call": 1.0676529926, "third": 1.4195278969999998, "improv": 2.04376930999, "cond": 174.46153846200002, "veri": 1.25880114177, "type": 2.0281042411900003, "achiev": 1.87216981132, "these": 1.07415426252, "benefit": 3.06841901817, "tiunov": 1134.0, "lineitemsorderid": 1134.0, "column": 7.078020508250001, "comment": 3.05954904606, "remov": 2.0058117498400003, "then": 1.08657860516, "group": 1.20996875238, "numx": 28.8654545455, "sum": 6.681818181819999, "queri": 56.2978723404, "way": 1.2190739461, "onli": 1.0256476516600002, "check": 6.50655737705, "place": 1.1004366812200002, "sped": 103.090909091, "well": 1.0655748708, "this": 1.00379362671, "thing": 2.4065484311099996, "step": 2.8279301745599996, "error": 6.04109589041, "lifetim": 7.1352808988800005, "trial": 4.04175152749, "lead": 1.2664326739, "data": 3.37643555934, "throughput": 134.542372881, "oper": 1.55479384977, "address": 2.86157173756, "method": 2.5714285714300003, "rang": 1.7848229342299997, "analyz": 9.68639414277, "origin": 1.13724928367, "timenum": 1134.0, "multicolumn": 1134.0, "learn": 2.32275054865, "prioriti": 8.623574144489998, "identifi": 2.30187037843, "figur": 2.0343413634, "scalabl": 186.776470588, "import": 1.3401992233700002, "itemsproductid": 1134.0, "everi": 1.47917637194, "copi": 3.8375634517800004, "busi": 2.05541170378, "let": 3.48616600791, "date": 1.63081664099, "while": 1.0441988950299999, "quicksort": 1134.0, "help": 1.39962972759, "affect": 2.4794627518400003, "tradeoff": 208.89473684200001, "find": 1.7294117647099998, "vice": 5.19162851537, "line": 1.4182597820299998, "actual": 1.87482286254, "conclus": 4.84615384615, "doubl": 2.9713644020200003, "costnum": 1134.0}}, "html": "<!DOCTYPE html>\n\n<html lang=\"en-US\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head profile=\"http://gmpg.org/xfn/11\">\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n<title>  Simple Tips for PostgreSQL Query Optimization</title>\n<link href=\"/wp-content/themes/kdn17/images/favicon.ico\" rel=\"shortcut icon\"/>\n<link href=\"/wp-content/themes/kdn17/style.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"/wp-content/themes/kdn17/js/jquery-1.9.1.min.js\" type=\"text/javascript\"></script>\n<script src=\"/aps/kda_all.js\" type=\"text/javascript\"></script>\n<link href=\"/feed/\" rel=\"alternate\" title=\"KDnuggets: Analytics, Big Data, Data Mining and Data Science Feed\" type=\"application/rss+xml\"/>\n<link href=\"//s.w.org\" rel=\"dns-prefetch\"/>\n<link href=\"https://www.kdnuggets.com/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/comments/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/2018/06/simple-tips-postgresql-query-optimization.html/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Simple Tips for PostgreSQL Query Optimization Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-json/\" rel=\"https://api.w.org/\"/>\n<link href=\"https://www.kdnuggets.com/xmlrpc.php?rsd\" rel=\"EditURI\" title=\"RSD\" type=\"application/rsd+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-includes/wlwmanifest.xml\" rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\"/>\n<link href=\"https://www.kdnuggets.com/jobs/18/06-22-ucd-dublin-research-fellow.html\" rel=\"prev\" title=\"University College Dublin: Research Fellow\"/>\n<link href=\"https://www.kdnuggets.com/2018/06/7-simple-data-visualizations-should-know-r.html\" rel=\"next\" title=\"7 Simple Data Visualizations You Should Know in R\"/>\n<meta content=\"WordPress 4.9.10\" name=\"generator\">\n<link href=\"https://www.kdnuggets.com/2018/06/simple-tips-postgresql-query-optimization.html\" rel=\"canonical\"/>\n<link href=\"https://www.kdnuggets.com/?p=82253\" rel=\"shortlink\"/>\n<link href=\"https://www.kdnuggets.com/2018/06/simple-tips-postgresql-query-optimization.html\" rel=\"canonical\"/>\n<!-- BEGIN ExactMetrics v5.3.7 Universal Analytics - https://exactmetrics.com/ -->\n<script>\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-361129-1', 'auto');\n  ga('send', 'pageview');\n</script>\n<!-- END ExactMetrics Universal Analytics -->\n</meta></head>\n<body class=\"post-template-default single single-post postid-82253 single-format-standard\">\n<div class=\"main_wrapper\"><!-- publ: 22-Jun, 2018  -->\n<div id=\"wrapper\">\n<div id=\"header\">\n<div id=\"header_log\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<h1>KDnuggets</h1>\n<div class=\"text-container\">\n            \u00a0\u00a0<a href=\"/news/subscribe.html\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a> \u00a0|\n <a href=\"https://twitter.com/kdnuggets\" target=\"_blank\"><img alt=\"Twitter\" height=\"48\" src=\"/images/tw_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n <a href=\"https://www.facebook.com/kdnuggets\" target=\"_blank\"><img alt=\"Facebook\" height=\"48\" src=\"/images/fb_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n<a href=\"https://www.linkedin.com/groups/54257/\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"48\" src=\"/images/in_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \n\u00a0|\u00a0 <a href=\"/contact.html\"><b>Contact</b></a>\n</div>\n</div>\n<div class=\"search\">\n<form action=\"/\" id=\"searchform\" method=\"get\">\n<input id=\"s\" name=\"s\" placeholder=\"search KDnuggets\" type=\"text\" value=\"\"/>\n<input type=\"submit\" value=\"Search\"/></form>\n</div>\n<div href=\"#\" id=\"pull\">\n<img class=\"menu\" src=\"/images/menu-30.png\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<img class=\"search-icon\" src=\"/images/search-icon.png\">\n</img></img></div>\n<div id=\"pull-menu\">\n<div class=\"navigation\"><ul class=\"menu\" id=\"menu-menu\"><li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-1070\" id=\"menu-item-1070\"><a href=\"/software/index.html\" title=\"Data Science Software\">SOFTWARE</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13756\" id=\"menu-item-13756\"><a href=\"/news/index.html\" title=\"News\">News/Blog</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-46286\" id=\"menu-item-46286\"><a href=\"/news/top-stories.html\">Top stories</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-42152\" id=\"menu-item-42152\"><a href=\"https://www.kdnuggets.com/opinions/index.html\" title=\"Opinions\">Opinions</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-46415\" id=\"menu-item-46415\"><a href=\"https://www.kdnuggets.com/tutorials/index.html\">Tutorials</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13364\" id=\"menu-item-13364\"><a href=\"/jobs/index.html\" title=\"Jobs in Analytics, Data Science\">JOBS</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-63505\" id=\"menu-item-63505\"><a href=\"https://www.kdnuggets.com/companies/index.html\">Companies</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13366\" id=\"menu-item-13366\"><a href=\"/courses/index.html\">Courses</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-1499\" id=\"menu-item-1499\"><a href=\"https://www.kdnuggets.com/datasets/index.html\">Datasets</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-14286\" id=\"menu-item-14286\"><a href=\"https://www.kdnuggets.com/education/index.html\" title=\"Education in Analytics, Big Data, Data Science\">EDUCATION</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-51558\" id=\"menu-item-51558\"><a href=\"https://www.kdnuggets.com/education/analytics-data-mining-certificates.html\" title=\"Certificates in Analytics, Big Data, Data Science\">Certificates</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-14752\" id=\"menu-item-14752\"><a href=\"/meetings/index.html\">Meetings</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13721\" id=\"menu-item-13721\"><a href=\"/webcasts/index.html\" title=\"Webcasts and Webinars\">Webinars</a></li>\n</ul></div></div>\n</div> <!--#header end-->\n<div id=\"spacer\">\n         \u00a0\n      </div>\n<div id=\"content_wrapper\">\n<div id=\"ad_wrapper\">\n<script type=\"text/javascript\">\n\tjQuery(function() {\n   \t    var pull        = $('#pull');\n            menu        = $('#header .navigation ul');\n            menuImage = $('#header img.menu');\n            mobileMenu        = $('#pull-menu-mobile');\n            search = $('img.search-icon');\n            searchBar = $('div.search');\n            searchClick = false;\n            search.on('click', function() {\n                  searchBar.slideToggle();\n                  searchClick = true;\n            });  \n     \t    $(menuImage).on('click', function(e) {\n\t        //e.preventDefault();\n                if (!searchClick) {\n                  menu.slideToggle();\n                }\n                searchClick = false;\n\t    });\n           /* pullMobile.on('click', function(e) {\n              e.preventDefault();\n                if (!searchClick) {\n                  mobileMenu.slideToggle();\n                }\n                searchClick = false;\n\t    });*/\n            \n\t});\n\tkpath = '/'; kda_top(); kda_sid_init(); kda_sid_n=3;\n\t</script>\n</div> <div class=\"breadcumb\">\n<br/>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2018/index.html\">2018</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/06/index.html\">Jun</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/06/tutorials.html\">Tutorials, Overviews</a> \u00bb Simple Tips for PostgreSQL Query Optimization (\u00a0<a href=\"/2018/n25.html\">18:n25</a>\u00a0)    </div>\n<div class=\"single\" id=\"content\">\n<div id=\"post-header\">\n<h1 id=\"title\">Simple Tips for PostgreSQL Query Optimization</h1>\n<div class=\"pagi\">\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/jobs/18/06-22-ucd-dublin-research-fellow.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"> <strong>Previous post</strong></img></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2018/06/7-simple-data-visualizations-should-know-r.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/>\u00a0<br/>\u00a0\n    <div class=\"addthis_native_toolbox\"></div>\n</div>\n<div class=\"tag-data\">Tags: <a href=\"https://www.kdnuggets.com/tag/optimization\" rel=\"tag\">Optimization</a>, <a href=\"https://www.kdnuggets.com/tag/postgres\" rel=\"tag\">Postgres</a>, <a href=\"https://www.kdnuggets.com/tag/sql\" rel=\"tag\">SQL</a>, <a href=\"https://www.kdnuggets.com/tag/statsbot\" rel=\"tag\">Statsbot</a></div>\n<br/>\n<p class=\"excerpt\">\n     A single query optimization tip can boost your database performance by 100x. Although we usually advise our customers to use these tips to optimize analytic queries (such as aggregation ones), this post is still very helpful for any other type of query.\n  </p>\n</div>\n<div id=\"post-header-ad\">\n<script type=\"text/javascript\">kda_sid_write(1); kda_sid_n=2;</script>\n</div>\n<hr class=\"grey-line\"/><br/>\n<div class=\"post\" id=\"post-\">\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p><b>By Pavel Tiunov, <a href=\"https://statsbot.co/\" rel=\"noopener\" target=\"_blank\">Statsbot</a></b></p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://statsbot.co/blog/wp-content/uploads/2018/05/postgres-cover-1-1-1076x563.png\" width=\"99%\"/></p>\n<p>A single query optimization tip can boost your database performance by 100x. At one point, we advised one of our customers that had a 10TB database to use a date-based multi-column index. As a result, their date range query sped up by 112x. In this post, we share five simple but still powerful tips for PostgreSQL query optimization.</p>\n<p>Although we usually advise our customers to use these tips to optimize analytic queries (such as aggregation ones), this post is still very helpful for any other type of query.</p>\n<p>To keep it easy, we ran examples for this article on a test dataset. Although it doesn\u2019t show the actual performance improvement, you will see that our tips solve the significant set of optimization problems and work well in real-world case scenarios.</p>\n<p>\u00a0</p>\n<h3>Explain analyze</h3>\n<p>\u00a0<br>\nPostgres has a cool extension to the well-known\u00a0<code>EXPLAIN</code>\u00a0command, which is called\u00a0<a href=\"https://www.postgresql.org/docs/9.3/static/using-explain.html#USING-EXPLAIN-ANALYZE\" rel=\"noopener noreferrer\" target=\"_blank\"><code>EXPLAIN ANALYZE</code></a>. The difference is that\u00a0<code>EXPLAIN</code>\u00a0shows you query cost based on collected statistics about your database, and\u00a0<code>EXPLAIN ANALYZE</code>\u00a0actually runs it to show the processed time for every stage.</br></p>\n<p>We highly recommend you use\u00a0<code>EXPLAIN ANALYZE</code>\u00a0because there are a lot of cases when <code>EXPLAIN</code> shows a higher query cost, while the time to execute is actually less and vice versa. The most important thing is that the EXPLAIN command will help you to understand if a specific index is used and how.</p>\n<p>The ability to see indexes is the first step to learning PostgreSQL query optimization.</p>\n<p>\u00a0</p>\n<h3>One index per query</h3>\n<p>\u00a0<br>\nIndexes are materialized copies of your table. They contain only specific columns of the table, so you can quickly find data based on the values in these columns. Indexes in Postgres also store row identifiers or row addresses used to speed up the original table scans.</br></p>\n<p>It\u2019s always a trade-off between storage space and query time, and a lot of indexes can introduce overhead for DML operations. However, when read query performance is a priority, as is the case with business analytics, it\u2019s usually a well-working approach.</p>\n<p>We advise to create one index per unique query for better performance. Look further in this post to learn how to create indexes for specific queries.</p>\n<p>\u00a0</p>\n<h3>Using multiple columns in index</h3>\n<p>\u00a0<br>\nLet\u2019s review the explain analyze plan of the following simple query without indexes:</br></p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\nEXPLAIN ANALYZE SELECT line_items.product_id, SUM(line_items.price)\r\nFROM line_items\r\nWHERE product_id &gt; 80\r\nGROUP BY 1</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>An explain analyze returns:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\nHashAggregate (cost=13.81..14.52 rows=71 width=12) (actual time=0.137..0.141 rows=20 loops=1)\r\nGroup Key: product_id\r\n-&gt; Seq Scan on line_items (cost=0.00..13.25 rows=112 width=8) (actual time=0.017..0.082 rows=112 loops=1)\r\nFilter: (product_id &gt; 80)\r\nRows Removed by Filter: 388\r\nPlanning time: 0.082 ms\r\nExecution time: 0.187 ms</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>This query scans all of the line items to find a product with an id that is greater than 80, and then sums up all the values grouped by that product id.</p>\n<p>Now we\u2019ll add the index to this table:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\nCREATE INDEX items_product_id ON line_items(product_id)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>We created a\u00a0<a href=\"https://en.wikipedia.org/wiki/B-tree\" rel=\"noopener noreferrer\" target=\"_blank\">B-tree index</a>, which contains only one column:\u00a0<code>product_id</code>. After reading lots of articles about the benefits of using index, one can expect a query boost from such an operation. Sorry, bad news.</p>\n<p>As we need to sum up the price column in the query above, we still need to scan the original table. Depending on the table statistics, Postgres will choose to scan the original table instead of the index. The thing is, index lacks a\u00a0<code>price</code>\u00a0column.</p>\n<p>We can tweak this index by adding a price column as follows:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\nCREATE INDEX items_product_id_price ON line_items(product_id, price)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>If we rerun the explain plan, we\u2019ll see our index is the forth line:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\nGroupAggregate (cost=0.27..7.50 rows=71 width=12) (actual time=0.034..0.090 rows=20 loops=1)\r\nGroup Key: product_id\r\n-&gt; Index Only Scan using items_product_id_price on line_items (cost=0.27..6.23 rows=112 width=8) (actual time=0.024..0.049 rows=112 loops=1)\r\nIndex Cond: (product_id &gt; 80)\r\nHeap Fetches: 0\r\nPlanning time: 0.271 ms\r\nExecution time: 0.136 ms</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>But how would putting the price column first affect the PostgreSQL query optimization?</p>\n<p>\u00a0</p>\n<h3>Column order in a multicolumn index</h3>\n<p>\u00a0<br/>\nWell, we figured out that a multicolumn index is used in the previous query because we included both columns. The interesting thing is that we can use another order for these columns while defining the index:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\nCREATE INDEX items_product_id_price_reversed ON line_items(price, product_id)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>If we rerun explain analyze, we\u2019ll see that\u00a0<code>items_product_id_price_reversed</code>\u00a0is not used. That\u2019s because this index is sorted firstly on\u00a0<code>price</code>\u00a0and then on\u00a0<code>product_id</code>. Using this index will lead to a full index scan,\u00a0<strong>which is nearly equivalent to scanning the whole table</strong>. That\u2019s why Postgres opts to use scan for an original table.</p>\n<p>It\u2019s a good practice to put in the first place columns, which you use in filters with the biggest number of unique values.</p>\n<p>\u00a0</p>\n<h3>Filters + joins</h3>\n<p>\u00a0<br/>\nIt\u2019s time to figure out what the best set of indexes is for a specific join query, which also has some filter conditions. Usually, you can achieve optimal results by trial and error.</p>\n<p>As in the case of simple filtering, choose the most restrictive filtering condition and add an index for it.</p>\n<p>Let\u2019s consider an example:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\nSELECT orders.product_id, SUM(line_items.price)\r\nFROM line_items\r\nLEFT JOIN orders ON line_items.order_id = orders.id\r\nWHERE line_items.created_at BETWEEN '2018-01-01' and '2018-01-02'\r\nGROUP BY 1</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Here we have join on\u00a0<code>order_id</code>\u00a0and filter on\u00a0<code>created_at</code>. This way, we can create a multicolumn index that will contain\u00a0<code>created_at</code>\u00a0in the first place,\u00a0<code>order_id</code>\u00a0in the second and\u00a0<code>price</code>\u00a0in the third:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\nCREATE INDEX line_items_created_at_order_id_price ON line_items(created_at, order_id, price)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>We\u2019ll get the following explain plan:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\nGroupAggregate (cost=12.62..12.64 rows=1 width=12) (actual time=0.029..0.029 rows=1 loops=1)\r\nGroup Key: orders.product_id\r\n-&gt; Sort (cost=12.62..12.62 rows=1 width=8) (actual time=0.025..0.026 rows=1 loops=1)\r\nSort Key: orders.product_id\r\nSort Method: quicksort Memory: 25kB\r\n-&gt; Nested Loop Left Join (cost=0.56..12.61 rows=1 width=8) (actual time=0.015..0.017 rows=1 loops=1)\r\n-&gt; Index Only Scan using line_items_created_at_order_id_price on line_items (cost=0.27..4.29 rows=1 width=8) (actual time=0.009..0.010 rows=1 loops=1)\r\nIndex Cond: ((created_at &gt;= '2018-01-01 00:00:00'::timestamp without time zone) AND (created_at &lt;= '2018-01-02 00:00:00'::timestamp without time zone))\r\nHeap Fetches: 0\r\n-&gt; Index Scan using orders_pkey on orders (cost=0.29..8.30 rows=1 width=8) (actual time=0.004..0.005 rows=1 loops=1)\r\nIndex Cond: (line_items.order_id = id)\r\nPlanning time: 0.303 ms\r\nExecution time: 0.072 ms</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>As you can see,\u00a0<code>line_items_created_at_order_id_price</code>\u00a0is used to reduce scan by date condition. After that, it\u2019s joined with orders using the\u00a0<code>orders_pkey</code>\u00a0index scan.</p>\n<p>Date columns are usually one of the best candidates for the first column in a multicolumn index as it reduces scanning throughput in a predictable manner.</p>\n<p>\u00a0</p>\n<h3>Conclusion</h3>\n<p>\u00a0<br/>\nOur tips for PostgreSQL query optimization will help you to speed up queries 10-100x for multi-GB databases. They can solve most of your performance bottlenecks in an 80/20 manner. It doesn\u2019t mean you shouldn\u2019t double check your queries with\u00a0<code>EXPLAIN</code>\u00a0for real-world case scenarios.</p>\n<p>\u00a0<br/>\n<a href=\"https://statsbot.co/blog/postgresql-query-optimization/?utm_source=kdnuggets&amp;utm_medium=post&amp;utm_campaign=postgres-sql\" rel=\"noopener noreferrer\" target=\"_blank\">Original</a>. Reposted with permission.</p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2018/04/scalable-select-random-rows-sql.html\">Scalable Select of Random Rows in SQL</a>\n<li><a href=\"/2017/12/sql-window-functions-tutorial-business-analytics.html\">SQL Window Functions Tutorial for Business Analysis</a>\n<li><a href=\"/2018/02/calculating-customer-lifetime-value-sql-example.html\">Calculating Customer Lifetime Value: SQL Example</a>\n</li></li></li></ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p> <script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets';\n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div>\n<div class=\"page-link\"></div>\n<div class=\"pagi\">\n<hr class=\"grey-line\"/>\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/jobs/18/06-22-ucd-dublin-research-fellow.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"/> <strong>Previous post</strong></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2018/06/7-simple-data-visualizations-should-know-r.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/><br/>\n<div>\n<hr class=\"grey-line\"/><br/>\n<h2>Top Stories Past 30 Days</h2>\n<table align=\"center\" cellpadding=\"3\" cellspacing=\"10\" class=\"latn\" width=\"100%\">\n<tr>\n<td valign=\"top\" width=\"50%\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Popular</b></th></tr>\n<tr><td>\n<ol class=\"three_ol\"><li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-1-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-2-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n<li> <a href=\"/2018/05/simplilearn-9-must-have-skills-data-scientist.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-3-simplilearn');\"><b>9 Must-have skills you need to become a Data Scientist, updated</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-4-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/03/another-10-free-must-read-books-for-machine-learning-and-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-5-another-10-books');\"><b>Another 10 Free Must-Read Books for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-6-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/best-data-visualization-techniques.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-7-best-data-viz');\"><b>Best Data Visualization Techniques for small and large data</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td> <td valign=\"top\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Shared</b></th></tr>\n<tr><td><ol class=\"three_ol\">\n<li> <a href=\"/2019/04/another-10-free-must-see-courses-machine-learning-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-1-another-10-courses');\"><b>Another 10 Free Must-See Courses for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-2-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/03/r-vs-python-data-visualization.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-3-r-py-viz');\"><b>R vs Python for Data Visualization</b></a>\n<li> <a href=\"/2019/03/deep-learning-toolset-overview.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-4-dl-toolset');\"><b>The Deep Learning Toolset \u2014 An Overview</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-5-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-6-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-7-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<!--#content end--></div>\n<div id=\"sidebar\">\n<div class=\"latn\">\n<h3><b><a href=\"/news/index.html\">Latest News</a></b></h3>\n<ul style=\"font-size:14px; margin-top:5px\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/kdnuggets-editor.html\">Looking for a KDnuggets Editor</a><li> <a href=\"https://www.kdnuggets.com/2019/04/datarobot-delivering-trusted-ai-microsoft.html\">Delivering Trusted AI with DataRobot and Microsoft</a><li> <a href=\"https://www.kdnuggets.com/2019/04/formulated-ai-data-production-landscape.html\">AI and the data production landscape</a><li> <a href=\"https://www.kdnuggets.com/2019/04/most-desired-skill-data-science.html\">The most desired skill in data science</a><li> <a href=\"https://www.kdnuggets.com/2019/04/projects-include-data-science-portfolio.html\">Projects to Include in a Data Science Portfolio</a><li> <a href=\"https://www.kdnuggets.com/2019/04/rework-meet-worlds-leading-ai-deep-learning-experts.html\">Meet the World\u2019s Leading AI &amp; Deep Learning ...</a></li></li></li></li></li></li></ul>\n</div>\n<div>\n<script type=\"text/javascript\">kda_sid_write(kda_sid_n);</script>\n</div>\n<br/><script src=\"/aps/sbm.js\" type=\"text/javascript\"></script>\n</div>\n</div><div class=\"breadcrumbs_bottom\">\n<div class=\"breadcumb\">\n<br>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2018/index.html\">2018</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/06/index.html\">Jun</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/06/tutorials.html\">Tutorials, Overviews</a> \u00bb Simple Tips for PostgreSQL Query Optimization (\u00a0<a href=\"/2018/n25.html\">18:n25</a>\u00a0)    </br></div>\n</div>\n<!--#content_wrapper end--></div>\n<br>\n<div id=\"footer\">\n<br/>\u00a9 2019 KDnuggets. <a href=\"/about/index.html\">About KDnuggets</a>. \u00a0<a href=\"/news/privacy-policy.html\">Privacy policy</a>. <a href=\"/terms-of-service.html\">Terms of Service</a><br/>\u00a0\n<div class=\"kd_bottom\">\n<div class=\"footer-container\">\n<div class=\"footer-news\">\n<a href=\"/news/subscribe.html\" onclick=\"_gaq.push(['_trackPageview','/x/bot/sub']);\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a>\n</div>\n<div class=\"footer-sm\">\n<a href=\"https://twitter.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/twt']);\" target=\"_blank\"><img height=\"32\" src=\"/images/tw_c48.png\" width=\"32\"/></a>\n<a href=\"https://facebook.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/fb']);\" target=\"_blank\"><img alt=\"Facebook\" height=\"32\" src=\"/images/fb_c48.png\" width=\"32\"/></a>\n<a href=\"https://www.linkedin.com/groups/54257\" onclick=\"_gaq.push(['_trackPageview','/x/bot/in']);\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"32\" src=\"/images/in_c48.png\" width=\"32\"/></a>\n</div>\n</div>\n<div class=\"close-footer\">X</div>\n</div>\n<script type=\"text/javascript\">\n  jQuery('.close-footer').click(\n      function(){       \n         jQuery('.kd_bottom').hide();\n      }\n   );\n</script> </div>\n<div class=\"clear\"><!--blank--></div>\n</br></div>\n<div style=\"display: none;\"><div id=\"boxzilla-box-82996-content\"><script type=\"text/javascript\">(function() {\n\tif (!window.mc4wp) {\n\t\twindow.mc4wp = {\n\t\t\tlisteners: [],\n\t\t\tforms    : {\n\t\t\t\ton: function (event, callback) {\n\t\t\t\t\twindow.mc4wp.listeners.push({\n\t\t\t\t\t\tevent   : event,\n\t\t\t\t\t\tcallback: callback\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})();\n</script><!-- MailChimp for WordPress v4.1.14 - https://wordpress.org/plugins/mailchimp-for-wp/ --><form class=\"mc4wp-form mc4wp-form-77281\" data-id=\"77281\" data-name=\"Subscribe to KDnuggets News\" id=\"mc4wp-form-1\" method=\"post\"><div class=\"mc4wp-form-fields\"><div class=\"header-container\">\n<img align=\"left\" src=\"/wp-content/uploads/envelope.png\"><a href=\"/news/subscribe.html\">Get KDnuggets, a leading newsletter on AI, \r\n  Data Science, and Machine Learning</a>\n</img></div>\n<div class=\"form-fields\">\n<div class=\"field-container\"><label>Email:</label><input maxlength=\"60\" name=\"EMAIL\" placeholder=\"Your email\" required=\"\" size=\"30\" type=\"email\"/></div>\n<div class=\"field-container submit-container\"><div class=\"form-button\" onclick=\"document.getElementById('mc4wp-form-1').submit()\">Sign Up</div></div>\n</div>\n<div>\n<br/><span style=\"font-size:9px\">By subscribing, you agree to KDnuggets <a href=\"https://www.kdnuggets.com/news/privacy-policy.html\">privacy policy</a></span>\n</div>\n<label style=\"display: none !important;\">Leave this field empty if you're human: <input autocomplete=\"off\" name=\"_mc4wp_honeypot\" tabindex=\"-1\" type=\"text\" value=\"\"/></label><input name=\"_mc4wp_timestamp\" type=\"hidden\" value=\"1556479556\"/><input name=\"_mc4wp_form_id\" type=\"hidden\" value=\"77281\"/><input name=\"_mc4wp_form_element_id\" type=\"hidden\" value=\"mc4wp-form-1\"/></div><div class=\"mc4wp-response\"></div></form><!-- / MailChimp for WordPress Plugin -->\n</div></div><script type=\"text/javascript\">(function() {function addEventListener(element,event,handler) {\n\tif(element.addEventListener) {\n\t\telement.addEventListener(event,handler, false);\n\t} else if(element.attachEvent){\n\t\telement.attachEvent('on'+event,handler);\n\t}\n}function maybePrefixUrlField() {\n\tif(this.value.trim() !== '' && this.value.indexOf('http') !== 0) {\n\t\tthis.value = \"http://\" + this.value;\n\t}\n}\n\nvar urlFields = document.querySelectorAll('.mc4wp-form input[type=\"url\"]');\nif( urlFields && urlFields.length > 0 ) {\n\tfor( var j=0; j < urlFields.length; j++ ) {\n\t\taddEventListener(urlFields[j],'blur',maybePrefixUrlField);\n\t}\n}/* test if browser supports date fields */\nvar testInput = document.createElement('input');\ntestInput.setAttribute('type', 'date');\nif( testInput.type !== 'date') {\n\n\t/* add placeholder & pattern to all date fields */\n\tvar dateFields = document.querySelectorAll('.mc4wp-form input[type=\"date\"]');\n\tfor(var i=0; i<dateFields.length; i++) {\n\t\tif(!dateFields[i].placeholder) {\n\t\t\tdateFields[i].placeholder = 'YYYY-MM-DD';\n\t\t}\n\t\tif(!dateFields[i].pattern) {\n\t\t\tdateFields[i].pattern = '[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])';\n\t\t}\n\t}\n}\n\n})();</script><script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_options = {\"testMode\":\"\",\"boxes\":[{\"id\":82996,\"icon\":\"&times;\",\"content\":\"\",\"css\":{\"background_color\":\"#eeee22\",\"width\":600,\"border_width\":2,\"border_style\":\"double\",\"position\":\"center\"},\"trigger\":{\"method\":\"time_on_page\",\"value\":\"3\"},\"animation\":\"fade\",\"cookie\":{\"triggered\":0,\"dismissed\":336},\"rehide\":true,\"position\":\"center\",\"screenWidthCondition\":{\"condition\":\"larger\",\"value\":500},\"closable\":true,\"post\":{\"id\":82996,\"title\":\"Subscribe to KDnuggets\",\"slug\":\"subscribe-to-kdnuggets\"}}]};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla/assets/js/script.min.js?ver=3.2.5\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_stats_config = {\"ajaxurl\":\"https:\\/\\/www.kdnuggets.com\\/wp-admin\\/admin-ajax.php?action=boxzilla_stats_track\"};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla-stats/assets/js/tracking.min.js?ver=1.0.4\" type=\"text/javascript\"></script>\n<script src=\"https://www.kdnuggets.com/wp-includes/js/wp-embed.min.js?ver=4.9.10\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar mc4wp_forms_config = [];\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/forms-api.min.js?ver=4.1.14\" type=\"text/javascript\"></script>\n<!--[if lte IE 9]>\n<script type='text/javascript' src='https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/third-party/placeholders.min.js?ver=4.1.14'></script>\n<![endif]-->\n<!--/.main_wrapper--></body></html>\n<script src=\"https://s7.addthis.com/js/300/addthis_widget.js#pubid=gpsaddthis\" type=\"text/javascript\"></script>\n\n\n<!-- Dynamic page generated in 0.623 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2019-04-28 15:25:56 -->\n<!-- Compression = gzip -->", "content_tokenized": ["comment", "pavel", "tiunov", "statsbot", "singl", "queri", "optim", "tip", "can", "boost", "databas", "perform", "numx", "one", "point", "advis", "one", "our", "custom", "that", "had", "databas", "use", "datebas", "multicolumn", "index", "result", "their", "date", "rang", "queri", "sped", "numx", "this", "post", "share", "five", "simpl", "but", "still", "power", "tip", "for", "postgresql", "queri", "optim", "although", "usual", "advis", "our", "custom", "use", "these", "tip", "optim", "analyt", "queri", "such", "aggreg", "one", "this", "post", "still", "veri", "help", "for", "ani", "other", "type", "queri", "keep", "easi", "ran", "exampl", "for", "this", "articl", "test", "dataset", "although", "show", "the", "actual", "perform", "improv", "will", "see", "that", "our", "tip", "solv", "the", "signific", "set", "optim", "problem", "and", "work", "well", "realworld", "case", "scenario", "explain", "analyz", "postgr", "has", "cool", "extens", "the", "wellknown", "command", "which", "call", "the", "differ", "that", "show", "queri", "cost", "base", "collect", "statist", "about", "databas", "and", "actual", "run", "show", "the", "process", "time", "for", "everi", "stage", "high", "recommend", "use", "becaus", "there", "are", "lot", "case", "when", "show", "higher", "queri", "cost", "while", "the", "time", "execut", "actual", "less", "and", "vice", "versa", "the", "most", "import", "thing", "that", "the", "command", "will", "help", "understand", "specif", "index", "use", "and", "how", "the", "abil", "see", "index", "the", "first", "step", "learn", "postgresql", "queri", "optim", "one", "index", "per", "queri", "index", "are", "materi", "copi", "tabl", "they", "contain", "onli", "specif", "column", "the", "tabl", "can", "quick", "find", "data", "base", "the", "valu", "these", "column", "index", "postgr", "also", "store", "row", "identifi", "row", "address", "use", "speed", "the", "origin", "tabl", "scan", "alway", "tradeoff", "between", "storag", "space", "and", "queri", "time", "and", "lot", "index", "can", "introduc", "overhead", "for", "oper", "howev", "when", "read", "queri", "perform", "prioriti", "the", "case", "with", "busi", "analyt", "usual", "wellwork", "approach", "advis", "creat", "one", "index", "per", "uniqu", "queri", "for", "better", "perform", "look", "further", "this", "post", "learn", "how", "creat", "index", "for", "specif", "queri", "use", "multipl", "column", "index", "let", "review", "the", "explain", "analyz", "plan", "the", "follow", "simpl", "queri", "without", "index", "lineitemsproductid", "lineitem", "productid", "num", "num", "explain", "analyz", "return", "hashaggreg", "costnum", "rowsnum", "widthnum", "actual", "timenum", "rowsnum", "loopsnum", "group", "key", "productid", "seq", "scan", "lineitem", "costnum", "rowsnum", "widthnum", "actual", "timenum", "rowsnum", "loopsnum", "filter", "productid", "num", "row", "remov", "filter", "num", "plan", "time", "num", "execut", "time", "num", "this", "queri", "scan", "all", "the", "line", "item", "find", "product", "with", "that", "greater", "than", "num", "and", "then", "sum", "all", "the", "valu", "group", "that", "product", "now", "add", "the", "index", "this", "tabl", "itemsproductid", "creat", "btree", "index", "which", "contain", "onli", "one", "column", "productid", "after", "read", "lot", "articl", "about", "the", "benefit", "use", "index", "one", "can", "expect", "queri", "boost", "from", "such", "oper", "sorri", "bad", "news", "need", "sum", "the", "price", "column", "the", "queri", "abov", "still", "need", "scan", "the", "origin", "tabl", "depend", "the", "tabl", "statist", "postgr", "will", "choos", "scan", "the", "origin", "tabl", "instead", "the", "index", "the", "thing", "index", "lack", "price", "column", "can", "tweak", "this", "index", "price", "column", "follow", "itemsproductidpric", "rerun", "the", "explain", "plan", "see", "our", "index", "the", "forth", "line", "groupaggreg", "costnum", "rowsnum", "widthnum", "actual", "timenum", "rowsnum", "loopsnum", "group", "key", "productid", "index", "onli", "scan", "use", "itemsproductidpric", "lineitem", "costnum", "rowsnum", "widthnum", "actual", "timenum", "rowsnum", "loopsnum", "index", "cond", "productid", "num", "heap", "fetch", "num", "plan", "time", "num", "execut", "time", "num", "but", "how", "would", "put", "the", "price", "column", "first", "affect", "the", "postgresql", "queri", "optim", "column", "order", "multicolumn", "index", "well", "figur", "out", "that", "multicolumn", "index", "use", "the", "previous", "queri", "becaus", "includ", "both", "column", "the", "interest", "thing", "that", "can", "use", "anoth", "order", "for", "these", "column", "while", "defin", "the", "index", "itemsproductidpricerevers", "rerun", "explain", "analyz", "see", "that", "itemsproductidpricerevers", "not", "use", "that", "becaus", "this", "index", "sort", "first", "price", "and", "then", "productid", "use", "this", "index", "will", "lead", "full", "index", "scan", "which", "near", "equival", "scan", "the", "whole", "tabl", "that", "whi", "postgr", "opt", "use", "scan", "for", "origin", "tabl", "good", "practic", "put", "the", "first", "place", "column", "which", "use", "filter", "with", "the", "biggest", "number", "uniqu", "valu", "filter", "join", "time", "figur", "out", "what", "the", "best", "set", "index", "for", "specif", "join", "queri", "which", "also", "has", "some", "filter", "condit", "usual", "can", "achiev", "optim", "result", "trial", "and", "error", "the", "case", "simpl", "filter", "choos", "the", "most", "restrict", "filter", "condit", "and", "add", "index", "for", "let", "consid", "exampl", "ordersproductid", "lineitem", "order", "lineitemsorderid", "ordersid", "lineitemscreatedat", "num", "and", "num", "num", "here", "have", "join", "orderid", "and", "filter", "createdat", "this", "way", "can", "creat", "multicolumn", "index", "that", "will", "contain", "createdat", "the", "first", "place", "orderid", "the", "second", "and", "price", "the", "third", "lineitemscreatedatorderidpric", "get", "the", "follow", "explain", "plan", "groupaggreg", "costnum", "rowsnum", "widthnum", "actual", "timenum", "rowsnum", "loopsnum", "group", "key", "ordersproductid", "sort", "costnum", "rowsnum", "widthnum", "actual", "timenum", "rowsnum", "loopsnum", "sort", "key", "ordersproductid", "sort", "method", "quicksort", "memori", "numkb", "nest", "loop", "left", "join", "costnum", "rowsnum", "widthnum", "actual", "timenum", "rowsnum", "loopsnum", "index", "onli", "scan", "use", "lineitemscreatedatorderidpric", "lineitem", "costnum", "rowsnum", "widthnum", "actual", "timenum", "rowsnum", "loopsnum", "index", "cond", "createdat", "num", "num", "timestamp", "without", "time", "zone", "createdat", "num", "num", "timestamp", "without", "time", "zone", "heap", "fetch", "num", "index", "scan", "use", "orderspkey", "order", "costnum", "rowsnum", "widthnum", "actual", "timenum", "rowsnum", "loopsnum", "index", "cond", "lineitemsorderid", "plan", "time", "num", "execut", "time", "num", "can", "see", "lineitemscreatedatorderidpric", "use", "reduc", "scan", "date", "condit", "after", "that", "join", "with", "order", "use", "the", "orderspkey", "index", "scan", "date", "column", "are", "usual", "one", "the", "best", "candid", "for", "the", "first", "column", "multicolumn", "index", "reduc", "scan", "throughput", "predict", "manner", "conclus", "our", "tip", "for", "postgresql", "queri", "optim", "will", "help", "speed", "queri", "numx", "for", "multigb", "databas", "they", "can", "solv", "most", "perform", "bottleneck", "num", "manner", "mean", "shouldn", "doubl", "check", "queri", "with", "for", "realworld", "case", "scenario", "origin", "repost", "with", "permiss", "relat", "scalabl", "select", "random", "row", "window", "function", "tutori", "for", "busi", "analysi", "calcul", "custom", "lifetim", "valu", "exampl"], "timestamp_scraper": 1556479557.232157, "title": "Simple Tips for PostgreSQL Query Optimization", "read_time": 347.09999999999997, "content_html": "<div class=\"post\" id=\"post-\">\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p><b>By Pavel Tiunov, <a href=\"https://statsbot.co/\" rel=\"noopener\" target=\"_blank\">Statsbot</a></b></p>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://statsbot.co/blog/wp-content/uploads/2018/05/postgres-cover-1-1-1076x563.png\" width=\"99%\"/></p>\n<p>A single query optimization tip can boost your database performance by 100x. At one point, we advised one of our customers that had a 10TB database to use a date-based multi-column index. As a result, their date range query sped up by 112x. In this post, we share five simple but still powerful tips for PostgreSQL query optimization.</p>\n<p>Although we usually advise our customers to use these tips to optimize analytic queries (such as aggregation ones), this post is still very helpful for any other type of query.</p>\n<p>To keep it easy, we ran examples for this article on a test dataset. Although it doesn\u2019t show the actual performance improvement, you will see that our tips solve the significant set of optimization problems and work well in real-world case scenarios.</p>\n<p>\u00a0</p>\n<h3>Explain analyze</h3>\n<p>\u00a0<br>\nPostgres has a cool extension to the well-known\u00a0<code>EXPLAIN</code>\u00a0command, which is called\u00a0<a href=\"https://www.postgresql.org/docs/9.3/static/using-explain.html#USING-EXPLAIN-ANALYZE\" rel=\"noopener noreferrer\" target=\"_blank\"><code>EXPLAIN ANALYZE</code></a>. The difference is that\u00a0<code>EXPLAIN</code>\u00a0shows you query cost based on collected statistics about your database, and\u00a0<code>EXPLAIN ANALYZE</code>\u00a0actually runs it to show the processed time for every stage.</br></p>\n<p>We highly recommend you use\u00a0<code>EXPLAIN ANALYZE</code>\u00a0because there are a lot of cases when <code>EXPLAIN</code> shows a higher query cost, while the time to execute is actually less and vice versa. The most important thing is that the EXPLAIN command will help you to understand if a specific index is used and how.</p>\n<p>The ability to see indexes is the first step to learning PostgreSQL query optimization.</p>\n<p>\u00a0</p>\n<h3>One index per query</h3>\n<p>\u00a0<br>\nIndexes are materialized copies of your table. They contain only specific columns of the table, so you can quickly find data based on the values in these columns. Indexes in Postgres also store row identifiers or row addresses used to speed up the original table scans.</br></p>\n<p>It\u2019s always a trade-off between storage space and query time, and a lot of indexes can introduce overhead for DML operations. However, when read query performance is a priority, as is the case with business analytics, it\u2019s usually a well-working approach.</p>\n<p>We advise to create one index per unique query for better performance. Look further in this post to learn how to create indexes for specific queries.</p>\n<p>\u00a0</p>\n<h3>Using multiple columns in index</h3>\n<p>\u00a0<br>\nLet\u2019s review the explain analyze plan of the following simple query without indexes:</br></p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\nEXPLAIN ANALYZE SELECT line_items.product_id, SUM(line_items.price)\r\nFROM line_items\r\nWHERE product_id &gt; 80\r\nGROUP BY 1</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>An explain analyze returns:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\nHashAggregate (cost=13.81..14.52 rows=71 width=12) (actual time=0.137..0.141 rows=20 loops=1)\r\nGroup Key: product_id\r\n-&gt; Seq Scan on line_items (cost=0.00..13.25 rows=112 width=8) (actual time=0.017..0.082 rows=112 loops=1)\r\nFilter: (product_id &gt; 80)\r\nRows Removed by Filter: 388\r\nPlanning time: 0.082 ms\r\nExecution time: 0.187 ms</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>This query scans all of the line items to find a product with an id that is greater than 80, and then sums up all the values grouped by that product id.</p>\n<p>Now we\u2019ll add the index to this table:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\nCREATE INDEX items_product_id ON line_items(product_id)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>We created a\u00a0<a href=\"https://en.wikipedia.org/wiki/B-tree\" rel=\"noopener noreferrer\" target=\"_blank\">B-tree index</a>, which contains only one column:\u00a0<code>product_id</code>. After reading lots of articles about the benefits of using index, one can expect a query boost from such an operation. Sorry, bad news.</p>\n<p>As we need to sum up the price column in the query above, we still need to scan the original table. Depending on the table statistics, Postgres will choose to scan the original table instead of the index. The thing is, index lacks a\u00a0<code>price</code>\u00a0column.</p>\n<p>We can tweak this index by adding a price column as follows:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\nCREATE INDEX items_product_id_price ON line_items(product_id, price)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>If we rerun the explain plan, we\u2019ll see our index is the forth line:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\nGroupAggregate (cost=0.27..7.50 rows=71 width=12) (actual time=0.034..0.090 rows=20 loops=1)\r\nGroup Key: product_id\r\n-&gt; Index Only Scan using items_product_id_price on line_items (cost=0.27..6.23 rows=112 width=8) (actual time=0.024..0.049 rows=112 loops=1)\r\nIndex Cond: (product_id &gt; 80)\r\nHeap Fetches: 0\r\nPlanning time: 0.271 ms\r\nExecution time: 0.136 ms</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>But how would putting the price column first affect the PostgreSQL query optimization?</p>\n<p>\u00a0</p>\n<h3>Column order in a multicolumn index</h3>\n<p>\u00a0<br/>\nWell, we figured out that a multicolumn index is used in the previous query because we included both columns. The interesting thing is that we can use another order for these columns while defining the index:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\nCREATE INDEX items_product_id_price_reversed ON line_items(price, product_id)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>If we rerun explain analyze, we\u2019ll see that\u00a0<code>items_product_id_price_reversed</code>\u00a0is not used. That\u2019s because this index is sorted firstly on\u00a0<code>price</code>\u00a0and then on\u00a0<code>product_id</code>. Using this index will lead to a full index scan,\u00a0<strong>which is nearly equivalent to scanning the whole table</strong>. That\u2019s why Postgres opts to use scan for an original table.</p>\n<p>It\u2019s a good practice to put in the first place columns, which you use in filters with the biggest number of unique values.</p>\n<p>\u00a0</p>\n<h3>Filters + joins</h3>\n<p>\u00a0<br/>\nIt\u2019s time to figure out what the best set of indexes is for a specific join query, which also has some filter conditions. Usually, you can achieve optimal results by trial and error.</p>\n<p>As in the case of simple filtering, choose the most restrictive filtering condition and add an index for it.</p>\n<p>Let\u2019s consider an example:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\nSELECT orders.product_id, SUM(line_items.price)\r\nFROM line_items\r\nLEFT JOIN orders ON line_items.order_id = orders.id\r\nWHERE line_items.created_at BETWEEN '2018-01-01' and '2018-01-02'\r\nGROUP BY 1</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Here we have join on\u00a0<code>order_id</code>\u00a0and filter on\u00a0<code>created_at</code>. This way, we can create a multicolumn index that will contain\u00a0<code>created_at</code>\u00a0in the first place,\u00a0<code>order_id</code>\u00a0in the second and\u00a0<code>price</code>\u00a0in the third:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\nCREATE INDEX line_items_created_at_order_id_price ON line_items(created_at, order_id, price)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>We\u2019ll get the following explain plan:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\r\nGroupAggregate (cost=12.62..12.64 rows=1 width=12) (actual time=0.029..0.029 rows=1 loops=1)\r\nGroup Key: orders.product_id\r\n-&gt; Sort (cost=12.62..12.62 rows=1 width=8) (actual time=0.025..0.026 rows=1 loops=1)\r\nSort Key: orders.product_id\r\nSort Method: quicksort Memory: 25kB\r\n-&gt; Nested Loop Left Join (cost=0.56..12.61 rows=1 width=8) (actual time=0.015..0.017 rows=1 loops=1)\r\n-&gt; Index Only Scan using line_items_created_at_order_id_price on line_items (cost=0.27..4.29 rows=1 width=8) (actual time=0.009..0.010 rows=1 loops=1)\r\nIndex Cond: ((created_at &gt;= '2018-01-01 00:00:00'::timestamp without time zone) AND (created_at &lt;= '2018-01-02 00:00:00'::timestamp without time zone))\r\nHeap Fetches: 0\r\n-&gt; Index Scan using orders_pkey on orders (cost=0.29..8.30 rows=1 width=8) (actual time=0.004..0.005 rows=1 loops=1)\r\nIndex Cond: (line_items.order_id = id)\r\nPlanning time: 0.303 ms\r\nExecution time: 0.072 ms</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>As you can see,\u00a0<code>line_items_created_at_order_id_price</code>\u00a0is used to reduce scan by date condition. After that, it\u2019s joined with orders using the\u00a0<code>orders_pkey</code>\u00a0index scan.</p>\n<p>Date columns are usually one of the best candidates for the first column in a multicolumn index as it reduces scanning throughput in a predictable manner.</p>\n<p>\u00a0</p>\n<h3>Conclusion</h3>\n<p>\u00a0<br/>\nOur tips for PostgreSQL query optimization will help you to speed up queries 10-100x for multi-GB databases. They can solve most of your performance bottlenecks in an 80/20 manner. It doesn\u2019t mean you shouldn\u2019t double check your queries with\u00a0<code>EXPLAIN</code>\u00a0for real-world case scenarios.</p>\n<p>\u00a0<br/>\n<a href=\"https://statsbot.co/blog/postgresql-query-optimization/?utm_source=kdnuggets&amp;utm_medium=post&amp;utm_campaign=postgres-sql\" rel=\"noopener noreferrer\" target=\"_blank\">Original</a>. Reposted with permission.</p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2018/04/scalable-select-random-rows-sql.html\">Scalable Select of Random Rows in SQL</a>\n<li><a href=\"/2017/12/sql-window-functions-tutorial-business-analytics.html\">SQL Window Functions Tutorial for Business Analysis</a>\n<li><a href=\"/2018/02/calculating-customer-lifetime-value-sql-example.html\">Calculating Customer Lifetime Value: SQL Example</a>\n</li></li></li></ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p> <script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets';\n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div> ", "website": "kdnuggets"}