{"content": "comments By Monte Zweben , CEO Splice Machine . Lambda architectures are ubiquitous in machine learning and data science applications. The Lambda Architecture enables a continuous processing of real-time data without the traditional ETL lag that plagues traditional operational (OLTP) and analytical (OLAP) implementations. In traditional architectures, OLTP databases are normalized for performance and then extensive ETL pipelines de-normalize this data, typically into star schemas on OLAP engines. This process usually takes at least a day. The Lambda Architecture circumvents this lag. In its purist form, the Lambda Architecture sends data down two paths: a batch processing layer and a speed layer. The batch layer aggregates the raw data and trains models. The results of the batch layer are then transferred to a serving layer for the application to surface. The speed layer allows applications to access the most current data that \u201cmissed\u201d the last batch processing window. So how do companies implement this architecture? For the batch layer, they typically use a batch analytics processing engine on Hadoop, like MapReduce, Hive or Spark. For the serving layer, they use a NoSQL/Key-Value engine that performs well on batch imports and reads like ElephantDB and Voldemort. For the speed layer, they need a data store that supports fast reads and writes like Cassandra or HBase. At the front of this architecture, there typically is a queuing system like Kafka and a streaming system like Storm, Spark or even Flink to break continuous data into chunks for processing. Enterprises keep this architecture working with what I like to call enterprise duct tape. It is a painful process that gets the job done, but at a great cost. Here are the five reasons we need a better Lambda architecture: Simplify Operational Complexity \u2013 It is very expensive to keep these systems synchronized based on versions and tuned for performance. It requires expertise in too many technologies Eliminate Need For Specialized Coding Skills \u2013 Developers have to be able to write pretty low-level code to handle basic operations like joins, aggregations, sorts, and groupings, let alone applying analytics. They have to write batch programs to cleanse and filter individual records Provide Access to Standard Tools \u2013 99% of data scientists know SQL and have used BI visualization tools. Why would we throw away these powerful tools, now that they don\u2019t have the same performance and flexibility issues that the first generation of databases had? Minimize Storage \u2013 Lambda typically requires at least duplicating the data in multiple engines Support Integrated Applications \u2013 The modern application does not have application logic separated from analytical logic. These workloads need to co-mingle. You want to be able to use the operational raw data for business applications in the moment, use it to perform feature engineering and train models, and be able to visualize it \u2014 all concurrently. This requires the ACID properties of traditional databases, the ingestion capabilities of NoSQL and the scale-out capabilities of the Hadoop/Spark engines So what is a better solution? We call it Lambda-R (\u019b-R) for the Relational Lambda. With the new scale-out RDBMS systems, you can now get all the benefits of Lambda with a much simpler architecture. Here\u2019s how a machine learning application can use\u00a0 \u019b-R : Batch file ingestion \u2013 Imports of raw data files are directly inserted into sharded tables in parallel with indexes that are atomically updated with the data for fast access Real-time stream ingestion \u2013 Stored procedures continuously ingest streams with standard SQL and auto-shards Data cleansing \u2013 Use standard SQL, with constraints and triggers, to clean up small subsets of data as well as entire data sets efficiently, without big batch runs or file explosions Feature engineering and extensive ETL \u2013 Execute complex aggregations, joins, sorts, and groupings with efficient SQL that is automatically parallelized and optimized without writing code at the application level Model training \u2013 Stored procedures execute analytics directly on the data, for example, using built-in functions like ResultSetToRDD that take SQL results and treat them as Spark RDDs or execute R and Python libraries directly on database result sets. Application logic \u2013 ACID semantics enable the architecture to power concurrent CRUD applications without additional moving parts Model execution \u2013 Stored procedures and user-defined functions wrap models Reporting and data visualization \u2013 Use Tableau, Domo, MicroStrategy and other ODBC/JDBC tools turnkey One scale out RDBMS that can do this is Splice Machine. Splice Machine is a dual-engine RDBMS that is built on Hadoop and Spark. The Splice Machine RDBMS provides: ANSI SQL \u2013 Splice Machine provides ANSI SQL-99 coverage, including full DDL and DML ACID Transactions \u2013 Splice Machine provides fully ACID transactions with Snapshot Isolation semantics, which scale both to very small operational queries and large analytics In-Place Updates \u2013\u00a0Updates in Splice Machine scale from a single row to millions of rows with a single transaction Secondary Indexing \u2013\u00a0Splice Machine supports true secondary indices on data, in both unique and non-unique forms Referential Integrity \u2013 Referential integrity, such as Primary and Foreign key constraints, can be enforced without requiring any behavior from the underlying application Joins \u2013\u00a0Splice Machine supports inner, outer, cross and natural joins using join algorithms such as broadcast, merge, merge sort, batch nested loop, and nested loop joins Resource Isolation The cost-based optimizer chooses a dataflow engine based on the estimation of the query plan \u2013 OLTP runs on HBase and OLAP runs on Spark In summary, by centralizing on a\u00a0 \u019b-R architecture, teams can build ML applications very quickly, maintain them with standard operational personnel, and be able to tightly integrate ML into the application without extensive use of \u201cEnterprise Duct Tape\u201d. Related: Interview: Antonio Magnaghi, TicketMaster on Unifying Heterogeneous Analytics through Lambda Architecture Bill Moreau, USOC on Empowering World\u2019s Best Athletes through Analytics Hobson Lane, SHARP Labs on How Analytics can Show You \u201cAll the Light You Cannot See\u201d", "title_html": "<h1 id=\"title\">5 Reasons Machine Learning Applications Need a Better Lambda Architecture</h1> ", "url": "https://www.kdnuggets.com/2016/05/5-reasons-machine-learning-applications-lambda-architecture.html", "tfidf": {"tfidf": {"lowlevel": 1587.6, "base": 2.2925631769, "natur": 1.5392670157100001, "can": 8.23382973994, "behavior": 5.52978056426, "outer": 8.413354531, "tableau": 244.246153846, "spark": 41.80094786730001, "relat": 2.47501753838, "usual": 1.72508964468, "here": 4.84615384616, "typic": 9.016612239119999, "five": 1.37740760021, "form": 2.25511363636, "report": 1.3634489866, "multipl": 2.74813917258, "lambda": 821.1724137927, "speed": 11.610921501720002, "comingl": 1587.6, "clean": 6.86975335353, "addit": 1.24634950542, "atom": 10.576948700900001, "ticketmast": 1134.0, "reason": 1.72340425532, "layer": 73.27384615385999, "tradit": 6.4320875114, "technolog": 2.6034765496900003, "parallel": 9.15835015864, "aggreg": 52.62762430950001, "function": 4.99088337, "stream": 19.5356849877, "job": 3.2539454806299997, "queu": 294.0, "solut": 4.7278141751, "python": 56.2978723404, "userdefin": 1587.6, "duplic": 19.7955112219, "hadoopspark": 1587.6, "join": 10.753668999779999, "done": 2.3302509907499998, "hive": 108.739726027, "standard": 7.566305254360001, "empow": 23.3127753304, "nest": 42.5060240964, "front": 2.32820061593, "know": 2.59327017315, "them": 2.19752231988, "too": 1.81585268215, "expens": 3.5453327378300004, "out": 1.06016694491, "enforc": 4.93810264386, "scale": 11.240972386109998, "automat": 6.787516032490001, "raw": 31.943661971699996, "train": 5.8097096853, "voldemort": 721.636363636, "complex": 4.6804245283, "least": 3.2330719886000003, "plagu": 11.086592178800002, "chunk": 81.0, "run": 4.6707855251399995, "how": 4.80750984153, "enabl": 7.0843373494, "inplac": 1587.6, "million": 1.7279059643, "rdds": 1587.6, "light": 1.9102394417, "they": 5.15086626435, "maintain": 1.77306231852, "keep": 4.08490930142, "had": 1.0475750577399998, "microstrategi": 1587.6, "special": 1.4881889763799998, "execut": 8.9454852796, "singl": 3.21897810218, "insert": 10.041745730599999, "whi": 3.2566153846200003, "secondari": 8.73747936158, "athlet": 6.9418452120700005, "heterogen": 52.0524590164, "abl": 7.2834040600800005, "mani": 1.04426757877, "other": 1.00992366412, "ubiquit": 34.8157894737, "the": 42.0, "generat": 2.05275407292, "broadcast": 3.55167785235, "write": 8.230171073080001, "coverag": 8.26444560125, "denorm": 1587.6, "provid": 4.86210856748, "procedur": 17.60739371535, "power": 2.6792675723599997, "updat": 16.69400630916, "constraint": 30.0966824644, "new": 1.0178880554, "lag": 66.705882353, "under": 1.0781663837, "perform": 7.6569885212500015, "but": 1.01632417899, "throw": 8.39555790587, "show": 1.26703910615, "need": 5.749049429639999, "there": 1.04091266719, "explos": 6.72142252329, "cost": 2.31935719503, "primari": 2.2373167981999997, "tune": 10.4173228346, "record": 1.42334588488, "applic": 47.97409885604, "cleans": 68.8763557484, "lab": 14.4327272727, "level": 1.6544393497299998, "exampl": 1.50483412322, "big": 2.7400759406299997, "have": 5.0744742057, "storm": 5.524008350730001, "star": 2.4450947173900004, "enterpris": 19.24363636365, "lane": 7.534883720930001, "visual": 15.68258149491, "tape": 19.56377079482, "now": 2.321561746, "synchron": 26.0262295082, "central": 1.6121039805000001, "resourc": 2.9487369985100003, "elephantdb": 1587.6, "lambdar": 1587.6, "code": 11.64214128576, "model": 10.452989202000001, "full": 1.66729678639, "nosql": 1587.6, "basic": 2.7301805675, "comment": 3.05954904606, "indic": 2.0826446281, "break": 2.42863698944, "issu": 1.43921675279, "duct": 148.3738317758, "support": 5.074230922880001, "optim": 23.0755813954, "modern": 1.5319888063299998, "program": 2.02139037433, "choos": 4.17899447223, "resultsettordd": 1587.6, "into": 4.06009845916, "process": 11.86673785374, "not": 2.03134796238, "storag": 8.623574144489998, "batch": 392.44044943840004, "plan": 1.5356935577500002, "window": 5.86479497599, "uniqu": 3.01595744681, "merg": 10.56638935108, "team": 2.2748244734200003, "minim": 6.10850327049, "take": 2.27923336444, "store": 13.78723404256, "hobson": 85.3548387097, "unifi": 7.60709151893, "quick": 2.205, "referenti": 721.636363636, "domo": 635.04, "handl": 3.9229058561900003, "want": 1.99698113208, "which": 1.005191845, "simpler": 17.9187358916, "index": 13.993829881, "hbase": 3175.2, "system": 5.54959363804, "build": 1.6341739578, "dataflow": 1587.6, "semant": 78.2068965518, "extens": 5.97515995485, "last": 1.2117234010100002, "let": 3.48616600791, "world": 1.11340206186, "elimin": 3.67670217693, "nonuniqu": 1587.6, "logic": 26.787401574810005, "wrap": 14.5919117647, "away": 1.85142857143, "databas": 32.98909090908, "featur": 3.05425163524, "skill": 3.6989748369099997, "moreau": 133.411764706, "estim": 2.34991119005, "mapreduc": 1587.6, "normal": 2.61075481006, "appli": 2.2972073506, "trigger": 7.91820448878, "algorithm": 27.9507042254, "one": 1.00627495722, "autoshard": 1587.6, "two": 1.01379310345, "foreign": 2.5276229899700002, "develop": 1.1955719557200002, "such": 2.12302754748, "architectur": 66.66279069762001, "loop": 27.0229787234, "get": 3.5712518277, "like": 9.193485342, "implement": 7.15296237892, "fast": 9.7458563536, "moment": 4.262013422819999, "small": 2.7189587258, "cross": 2.33127753304, "costbas": 1587.6, "file": 11.313064133009998, "alon": 2.99716820842, "part": 1.04330682789, "both": 2.10431440122, "analyt": 155.30869565190002, "subset": 27.3253012048, "version": 2.0083491461099996, "entir": 1.59365589239, "filter": 16.8893617021, "tabl": 3.82093862816, "use": 11.32602633118, "well": 2.1311497416, "shard": 122.123076923, "miss": 3.53664513255, "set": 2.37415881562, "access": 5.6204861930700005, "ani": 1.13383802314, "pretti": 15.75, "from": 3.00170164491, "engin": 19.77085927768, "workload": 74.5352112676, "snapshot": 99.225, "bill": 2.7926121372000003, "work": 1.11520089913, "num": 1.00031504001, "same": 1.11857958148, "first": 1.00761614623, "most": 1.02096463023, "dualengin": 1587.6, "for": 12.00378048012, "builtin": 1587.6, "personnel": 6.3964544722, "all": 3.03440366973, "fulli": 2.79015817223, "simplifi": 12.109839816900001, "with": 11.013180298889997, "expertis": 20.0201765448, "much": 1.1942229577299999, "these": 3.22246278756, "are": 6.17943561468, "includ": 1.0190641247799999, "true": 2.55569864778, "better": 4.0131445905000005, "compani": 1.5523613963, "result": 3.43834825296, "inner": 6.432739059969999, "current": 1.5325803649, "day": 1.18371607516, "sort": 15.564705882359998, "isol": 9.72794117648, "path": 4.6421052631599995, "built": 1.99447236181, "summari": 7.80147420147, "and": 36.002267716679995, "veri": 3.77640342531, "surfac": 3.97396745932, "pain": 6.55762081784, "treat": 3.59023066486, "benefit": 3.06841901817, "cassandra": 128.032258065, "capabl": 7.316129032260001, "properti": 2.5949656750599996, "turnkey": 1587.6, "realtim": 858.162162162, "scaleout": 3175.2, "librari": 2.68266306185, "zweben": 1587.6, "antonio": 10.3292127521, "kafka": 211.68, "then": 2.17315721032, "group": 2.41993750476, "serv": 2.9337521944, "doe": 1.70581282905, "even": 1.16461267606, "mont": 19.4083129584, "queri": 112.5957446808, "separ": 1.6012102874399998, "circumv": 44.974504249300004, "splice": 1066.29850746, "concurr": 30.827184466, "great": 1.26592775696, "ingest": 169.796791444, "key": 2.28005170185, "this": 8.03034901368, "flink": 1587.6, "read": 4.629921259840001, "transfer": 2.72549356223, "move": 1.29125660838, "continu": 3.4178686760100003, "integr": 11.301655098760001, "data": 64.15227562746, "oper": 9.32876309862, "transact": 35.676404494500005, "row": 11.098217406500002, "call": 2.1353059852, "scientist": 4.69426374926, "machin": 44.267680608359996, "best": 1.5828514456600002, "purist": 130.131147541, "would": 1.0828729281799998, "tight": 10.0100882724, "that": 12.047808765, "through": 2.14149861738, "send": 3.75053153792, "requir": 6.11379609128, "without": 7.77282741738, "direct": 3.66679498038, "import": 2.6803984467400004, "hadoop": 3175.2, "what": 2.50686878256, "busi": 2.05541170378, "allow": 1.2716059271100002, "nosqlkeyvalu": 1587.6, "interview": 3.3981164383599998, "tool": 19.98866855524, "flexibl": 9.68639414277, "schema": 111.802816901, "magnaghi": 1587.6, "larg": 1.18574949585, "scienc": 2.31969608416, "see": 1.27242125511, "down": 1.35889754344, "learn": 4.6455010973, "pipelin": 32.1376518219, "individu": 1.8004082558400003, "effici": 10.18671799808}, "logtfidf": {"lowlevel": 7.369978720910001, "base": 0.27304660457400004, "natur": 0.431306339292, "can": 1.136387674758, "behavior": 1.71014813378, "outer": 2.12982026853, "tableau": 5.4981765440100006, "spark": 10.61740551545, "relat": 0.42620060330799997, "usual": 0.545279017064, "here": 1.7700763767400003, "typic": 3.251097276632, "five": 0.320203181906, "form": 0.240106368382, "report": 0.31001750903700004, "multipl": 1.01092401812, "lambda": 40.62157663221001, "speed": 4.060001625810001, "comingl": 7.369978720910001, "clean": 1.9271282036300001, "addit": 0.220218882972, "atom": 2.35867698227, "ticketmast": 7.033506484289999, "reason": 0.544301552962, "layer": 18.87281246115, "tradit": 1.9000191051679998, "technolog": 0.956847686355, "parallel": 3.04303773644, "aggreg": 8.593886610599998, "function": 1.828931483188, "stream": 5.62089151158, "job": 1.1798682540899998, "queu": 5.6835797673399995, "solut": 1.55346297627, "python": 4.03065674296, "userdefin": 7.369978720910001, "duplic": 2.98545520604, "hadoopspark": 7.369978720910001, "join": 3.50092517652, "done": 0.845975983129, "hive": 4.68895719219, "standard": 2.54964203928, "empow": 3.1490015077499995, "nest": 6.112997257540001, "front": 0.845095701382, "know": 0.952919694398, "them": 0.1883666538186, "too": 0.5965551547219999, "expens": 1.26563201674, "out": 0.0584263909193, "enforc": 1.59698117723, "scale": 3.9628591898399996, "automat": 1.9150850473199998, "raw": 7.09608449742, "train": 1.982754938517, "voldemort": 6.58152136054, "complex": 1.7004832728619999, "least": 0.96057116949, "plagu": 2.4057364663799996, "chunk": 4.394449154669999, "run": 1.328144926617, "how": 1.4147008707900002, "enabl": 2.52947831908, "inplac": 7.369978720910001, "million": 0.5469102500940001, "rdds": 7.369978720910001, "light": 0.64722859635, "they": 0.148634973838, "maintain": 0.572708175102, "keep": 1.4283046893459999, "had": 0.0464780244111, "microstrategi": 7.369978720910001, "special": 0.39755992860100003, "execut": 3.219418423456, "singl": 0.951833538118, "insert": 2.3067509766900005, "whi": 1.18068843047, "secondari": 2.9489491299, "athlet": 1.93756761988, "heterogen": 3.9522520373, "abl": 2.3972159299, "mani": 0.0433157581221, "other": 0.00987474791976, "ubiquit": 3.55007100439, "the": 0.0, "generat": 0.719182341736, "broadcast": 1.2674201263, "write": 2.886049759508, "coverag": 2.1119626511300003, "denorm": 7.369978720910001, "provid": 0.7807113773000001, "procedur": 5.30911986786, "power": 0.58479256543, "updat": 5.149312388069999, "constraint": 5.422535535980001, "new": 0.0177299468511, "lag": 7.014291919339999, "under": 0.07526180538319999, "perform": 2.1309042528999997, "but": 0.0161923720719, "throw": 2.12770274524, "show": 0.236682766013, "need": 1.450960653768, "there": 0.0400978929255, "explos": 1.90529981715, "cost": 0.84129007618, "primari": 0.805277289914, "tune": 2.3434700776599997, "record": 0.353010356953, "applic": 17.24245499886, "cleans": 7.078331541819999, "lab": 2.66949835512, "level": 0.503462189943, "exampl": 0.40868267499899996, "big": 1.00798563557, "have": 0.07392501170600001, "storm": 1.7091037472600001, "star": 0.8940838613940001, "enterpris": 5.5757044167, "lane": 2.0195434001, "visual": 4.96181504658, "tape": 4.561064492780001, "now": 0.298185890042, "synchron": 3.25910485674, "central": 0.477540146039, "resourc": 1.08137694258, "elephantdb": 7.369978720910001, "lambdar": 7.369978720910001, "code": 4.06805728791, "model": 3.687250365555, "full": 0.511203624148, "nosql": 7.369978720910001, "basic": 1.00436774895, "comment": 1.11826753454, "indic": 0.7336385419149999, "break": 0.88733019029, "issu": 0.364099043934, "duct": 8.61317559776, "support": 0.951522440148, "optim": 4.891255590819999, "modern": 0.426566764719, "program": 0.7037855787649999, "choos": 1.43007066072, "resultsettordd": 7.369978720910001, "into": 0.0596514529148, "process": 3.694804393175, "not": 0.031104826015, "storag": 2.1544996326700003, "batch": 39.31938484914, "plan": 0.428982108147, "window": 1.7689675242900003, "uniqu": 1.1039173409, "merg": 3.32906193386, "team": 0.821902894886, "minim": 1.80968177926, "take": 0.261383924394, "store": 4.949794934080001, "hobson": 4.44681714019, "unifi": 2.02908090683, "quick": 0.790727508899, "referenti": 11.776748359960001, "domo": 6.45368798903, "handl": 1.36683266903, "want": 0.6916366062549999, "which": 0.00517841384543, "simpler": 2.8858468633, "index": 3.89093865824, "hbase": 14.739957441820001, "system": 1.30972138234, "build": 0.491137452091, "dataflow": 7.369978720910001, "semant": 7.3324213086, "extens": 2.066995738425, "last": 0.19204364461100001, "let": 1.2488025672799998, "world": 0.107420248621, "elimin": 1.30201620283, "nonuniqu": 7.369978720910001, "logic": 6.56795819349, "wrap": 2.68046738649, "away": 0.615957541869, "databas": 8.43953026872, "featur": 0.846774836284, "skill": 1.30805571015, "moreau": 4.89344032079, "estim": 0.854377535975, "mapreduc": 7.369978720910001, "normal": 0.959639378783, "appli": 0.8316941898119999, "trigger": 2.06916447416, "algorithm": 3.33044239518, "one": 0.0062553516455, "autoshard": 7.369978720910001, "two": 0.0136988443582, "foreign": 0.927279331449, "develop": 0.178624694913, "such": 0.119391955612, "architectur": 21.25106852947, "loop": 5.20708077464, "get": 1.159538011564, "like": 1.11242861236, "implement": 2.54875881814, "fast": 3.1673900494800002, "moment": 1.4497416830899998, "small": 0.614203610118, "cross": 0.846416414759, "costbas": 7.369978720910001, "file": 3.9820376616899997, "alon": 1.09766791236, "part": 0.04239531098280001, "both": 0.10168506677860001, "analyt": 25.633711294739996, "subset": 3.3078130570499997, "version": 0.697313064259, "entir": 0.46603068026999994, "filter": 2.82668393864, "tabl": 1.34049610661, "use": 0.3212882170476, "well": 0.1270288766312, "shard": 4.80502936345, "miss": 1.2631785751200002, "set": 0.342992022578, "access": 1.883417648148, "ani": 0.125608358366, "pretti": 2.75684036527, "from": 0.0017011625065979999, "engin": 7.238140466208, "workload": 4.31127164819, "snapshot": 4.59738999867, "bill": 1.0269774077200002, "work": 0.109034567273, "num": 0.00031499039539700004, "same": 0.112059649604, "first": 0.0075872898121599995, "most": 0.020747896295599998, "dualengin": 7.369978720910001, "for": 0.0037798847447640003, "builtin": 7.369978720910001, "personnel": 1.8557438481400002, "all": 0.03420789629339999, "fulli": 1.02609828678, "simplifi": 2.4940183301400003, "with": 0.01317240884729, "expertis": 2.99674059227, "much": 0.17749572930100002, "these": 0.2146008582024, "are": 0.17680484149620002, "includ": 0.0188846813905, "true": 0.938325629634, "better": 1.3928558812, "compani": 0.439777253097, "result": 0.40913672514300004, "inner": 1.86140042888, "current": 0.42695282784500005, "day": 0.16865870631700003, "sort": 4.93918085688, "isol": 3.1637101956400002, "path": 1.5351679838499999, "built": 0.690379535065, "summari": 2.0543127160299997, "and": 0.0022676451142896, "veri": 0.6904793797140001, "surfac": 1.3797649557, "pain": 1.88062785696, "treat": 1.27821645249, "benefit": 1.12116245116, "cassandra": 4.8522822483, "capabl": 2.5938683736200003, "properti": 0.953573289192, "turnkey": 7.369978720910001, "realtim": 12.123291802519999, "scaleout": 14.739957441820001, "librari": 0.986809980943, "zweben": 7.369978720910001, "antonio": 2.3349760703599998, "kafka": 5.35507570037, "then": 0.16606773046179998, "group": 0.381189069594, "serv": 0.766270071216, "doe": 0.5340417297169999, "even": 0.152388564834, "mont": 2.9657014773, "queri": 8.06131348592, "separ": 0.470759772949, "circumv": 3.8060957569699996, "splice": 42.97251612555, "concurr": 5.4704994653600005, "great": 0.235805258079, "ingest": 14.99323206596, "key": 0.82419811896, "this": 0.03029159242, "flink": 7.369978720910001, "read": 1.67878536176, "transfer": 1.00264953547, "move": 0.255615859253, "continu": 0.39121462196100004, "integr": 4.15461929116, "data": 23.1195911112, "oper": 2.648057786082, "transact": 7.427631729210001, "row": 3.4272746417, "call": 0.1309255488976, "scientist": 1.54634128444, "machin": 15.31595538682, "best": 0.459227932947, "purist": 4.86854276917, "would": 0.0796176279647, "tight": 2.3035934117099996, "that": 0.04771378055568, "through": 0.1367173837698, "send": 1.32189757338, "requir": 1.6970140427, "without": 1.5532471076460002, "direct": 0.6021170684880001, "import": 0.585636554132, "hadoop": 14.739957441820001, "what": 0.451774593654, "busi": 0.720476170355, "allow": 0.24028061118900002, "nosqlkeyvalu": 7.369978720910001, "interview": 1.2232212893899999, "tool": 6.43548471852, "flexibl": 2.2707222351599996, "schema": 4.7167367562999996, "magnaghi": 7.369978720910001, "larg": 0.17037506060600002, "scienc": 0.841436178891, "see": 0.240921585492, "down": 0.306673741186, "learn": 1.68550412949, "pipelin": 3.47002829672, "individu": 0.588013447985, "effici": 3.25587506828}, "logidf": {"lowlevel": 7.369978720910001, "base": 0.13652330228700002, "natur": 0.431306339292, "can": 0.162341096394, "behavior": 1.71014813378, "outer": 2.12982026853, "tableau": 5.4981765440100006, "spark": 2.12348110309, "relat": 0.21310030165399999, "usual": 0.545279017064, "here": 0.8850381883700001, "typic": 0.812774319158, "five": 0.320203181906, "form": 0.120053184191, "report": 0.31001750903700004, "multipl": 1.01092401812, "lambda": 4.513508514690001, "speed": 1.3533338752700002, "comingl": 7.369978720910001, "clean": 1.9271282036300001, "addit": 0.220218882972, "atom": 2.35867698227, "ticketmast": 7.033506484289999, "reason": 0.544301552962, "layer": 2.0969791623500003, "tradit": 0.47500477629199994, "technolog": 0.956847686355, "parallel": 1.52151886822, "aggreg": 2.8646288702, "function": 0.914465741594, "stream": 1.8736305038599999, "job": 1.1798682540899998, "queu": 5.6835797673399995, "solut": 1.55346297627, "python": 4.03065674296, "userdefin": 7.369978720910001, "duplic": 2.98545520604, "hadoopspark": 7.369978720910001, "join": 0.58348752942, "done": 0.845975983129, "hive": 4.68895719219, "standard": 0.63741050982, "empow": 3.1490015077499995, "nest": 3.0564986287700004, "front": 0.845095701382, "know": 0.952919694398, "them": 0.0941833269093, "too": 0.5965551547219999, "expens": 1.26563201674, "out": 0.0584263909193, "enforc": 1.59698117723, "scale": 1.32095306328, "automat": 1.9150850473199998, "raw": 2.36536149914, "train": 0.660918312839, "voldemort": 6.58152136054, "complex": 0.8502416364309999, "least": 0.480285584745, "plagu": 2.4057364663799996, "chunk": 4.394449154669999, "run": 0.442714975539, "how": 0.47156695693000006, "enabl": 1.26473915954, "inplac": 7.369978720910001, "million": 0.5469102500940001, "rdds": 7.369978720910001, "light": 0.64722859635, "they": 0.0297269947676, "maintain": 0.572708175102, "keep": 0.7141523446729999, "had": 0.0464780244111, "microstrategi": 7.369978720910001, "special": 0.39755992860100003, "execut": 0.804854605864, "singl": 0.475916769059, "insert": 2.3067509766900005, "whi": 1.18068843047, "secondari": 1.47447456495, "athlet": 1.93756761988, "heterogen": 3.9522520373, "abl": 0.599303982475, "mani": 0.0433157581221, "other": 0.00987474791976, "ubiquit": 3.55007100439, "the": 0.0, "generat": 0.719182341736, "broadcast": 1.2674201263, "write": 0.721512439877, "coverag": 2.1119626511300003, "denorm": 7.369978720910001, "provid": 0.19517784432500002, "procedur": 1.76970662262, "power": 0.292396282715, "updat": 1.7164374626899999, "constraint": 2.7112677679900004, "new": 0.0177299468511, "lag": 3.5071459596699994, "under": 0.07526180538319999, "perform": 0.42618085058, "but": 0.0161923720719, "throw": 2.12770274524, "show": 0.236682766013, "need": 0.362740163442, "there": 0.0400978929255, "explos": 1.90529981715, "cost": 0.84129007618, "primari": 0.805277289914, "tune": 2.3434700776599997, "record": 0.353010356953, "applic": 1.23160392849, "cleans": 3.5391657709099995, "lab": 2.66949835512, "level": 0.503462189943, "exampl": 0.40868267499899996, "big": 1.00798563557, "have": 0.0147850023412, "storm": 1.7091037472600001, "star": 0.8940838613940001, "enterpris": 1.8585681389, "lane": 2.0195434001, "visual": 1.6539383488600001, "tape": 2.2805322463900004, "now": 0.149092945021, "synchron": 3.25910485674, "central": 0.477540146039, "resourc": 1.08137694258, "elephantdb": 7.369978720910001, "lambdar": 7.369978720910001, "code": 1.35601909597, "model": 0.7374500731110001, "full": 0.511203624148, "nosql": 7.369978720910001, "basic": 1.00436774895, "comment": 1.11826753454, "indic": 0.7336385419149999, "break": 0.88733019029, "issu": 0.364099043934, "duct": 4.30658779888, "support": 0.237880610037, "optim": 2.4456277954099996, "modern": 0.426566764719, "program": 0.7037855787649999, "choos": 1.43007066072, "resultsettordd": 7.369978720910001, "into": 0.0149128632287, "process": 0.527829199025, "not": 0.0155524130075, "storag": 2.1544996326700003, "batch": 3.5744895317400003, "plan": 0.428982108147, "window": 1.7689675242900003, "uniqu": 1.1039173409, "merg": 1.66453096693, "team": 0.821902894886, "minim": 1.80968177926, "take": 0.130691962197, "store": 1.2374487335200002, "hobson": 4.44681714019, "unifi": 2.02908090683, "quick": 0.790727508899, "referenti": 5.8883741799800005, "domo": 6.45368798903, "handl": 1.36683266903, "want": 0.6916366062549999, "which": 0.00517841384543, "simpler": 2.8858468633, "index": 1.94546932912, "hbase": 7.369978720910001, "system": 0.327430345585, "build": 0.491137452091, "dataflow": 7.369978720910001, "semant": 3.6662106543, "extens": 0.6889985794750001, "last": 0.19204364461100001, "let": 1.2488025672799998, "world": 0.107420248621, "elimin": 1.30201620283, "nonuniqu": 7.369978720910001, "logic": 2.18931939783, "wrap": 2.68046738649, "away": 0.615957541869, "databas": 2.10988256718, "featur": 0.423387418142, "skill": 1.30805571015, "moreau": 4.89344032079, "estim": 0.854377535975, "mapreduc": 7.369978720910001, "normal": 0.959639378783, "appli": 0.8316941898119999, "trigger": 2.06916447416, "algorithm": 3.33044239518, "one": 0.0062553516455, "autoshard": 7.369978720910001, "two": 0.0136988443582, "foreign": 0.927279331449, "develop": 0.178624694913, "such": 0.059695977806, "architectur": 1.63469757919, "loop": 2.60354038732, "get": 0.579769005782, "like": 0.139053576545, "implement": 1.27437940907, "fast": 1.5836950247400001, "moment": 1.4497416830899998, "small": 0.307101805059, "cross": 0.846416414759, "costbas": 7.369978720910001, "file": 1.32734588723, "alon": 1.09766791236, "part": 0.04239531098280001, "both": 0.050842533389300004, "analyt": 2.8481901438599997, "subset": 3.3078130570499997, "version": 0.697313064259, "entir": 0.46603068026999994, "filter": 2.82668393864, "tabl": 1.34049610661, "use": 0.0292080197316, "well": 0.0635144383156, "shard": 4.80502936345, "miss": 1.2631785751200002, "set": 0.171496011289, "access": 0.627805882716, "ani": 0.125608358366, "pretti": 2.75684036527, "from": 0.000567054168866, "engin": 0.904767558276, "workload": 4.31127164819, "snapshot": 4.59738999867, "bill": 1.0269774077200002, "work": 0.109034567273, "num": 0.00031499039539700004, "same": 0.112059649604, "first": 0.0075872898121599995, "most": 0.020747896295599998, "dualengin": 7.369978720910001, "for": 0.00031499039539700004, "builtin": 7.369978720910001, "personnel": 1.8557438481400002, "all": 0.011402632097799998, "fulli": 1.02609828678, "simplifi": 2.4940183301400003, "with": 0.00119749171339, "expertis": 2.99674059227, "much": 0.17749572930100002, "these": 0.0715336194008, "are": 0.0294674735827, "includ": 0.0188846813905, "true": 0.938325629634, "better": 0.6964279406, "compani": 0.439777253097, "result": 0.136378908381, "inner": 1.86140042888, "current": 0.42695282784500005, "day": 0.16865870631700003, "sort": 1.64639361896, "isol": 1.5818550978200001, "path": 1.5351679838499999, "built": 0.690379535065, "summari": 2.0543127160299997, "and": 6.29901420636e-05, "veri": 0.230159793238, "surfac": 1.3797649557, "pain": 1.88062785696, "treat": 1.27821645249, "benefit": 1.12116245116, "cassandra": 4.8522822483, "capabl": 1.2969341868100002, "properti": 0.953573289192, "turnkey": 7.369978720910001, "realtim": 6.0616459012599995, "scaleout": 7.369978720910001, "librari": 0.986809980943, "zweben": 7.369978720910001, "antonio": 2.3349760703599998, "kafka": 5.35507570037, "then": 0.08303386523089999, "group": 0.190594534797, "serv": 0.383135035608, "doe": 0.5340417297169999, "even": 0.152388564834, "mont": 2.9657014773, "queri": 4.03065674296, "separ": 0.470759772949, "circumv": 3.8060957569699996, "splice": 4.77472401395, "concurr": 2.7352497326800003, "great": 0.235805258079, "ingest": 3.74830801649, "key": 0.82419811896, "this": 0.0037864490525, "flink": 7.369978720910001, "read": 0.83939268088, "transfer": 1.00264953547, "move": 0.255615859253, "continu": 0.13040487398700001, "integr": 1.03865482279, "data": 1.2168205848, "oper": 0.441342964347, "transact": 2.4758772430700002, "row": 1.71363732085, "call": 0.0654627744488, "scientist": 1.54634128444, "machin": 1.39235958062, "best": 0.459227932947, "purist": 4.86854276917, "would": 0.0796176279647, "tight": 2.3035934117099996, "that": 0.00397614837964, "through": 0.0683586918849, "send": 1.32189757338, "requir": 0.424253510675, "without": 0.258874517941, "direct": 0.200705689496, "import": 0.292818277066, "hadoop": 7.369978720910001, "what": 0.225887296827, "busi": 0.720476170355, "allow": 0.24028061118900002, "nosqlkeyvalu": 7.369978720910001, "interview": 1.2232212893899999, "tool": 1.60887117963, "flexibl": 2.2707222351599996, "schema": 4.7167367562999996, "magnaghi": 7.369978720910001, "larg": 0.17037506060600002, "scienc": 0.841436178891, "see": 0.240921585492, "down": 0.306673741186, "learn": 0.842752064745, "pipelin": 3.47002829672, "individu": 0.588013447985, "effici": 1.62793753414}, "freq": {"lowlevel": 1, "base": 2, "natur": 1, "can": 7, "behavior": 1, "outer": 1, "tableau": 1, "spark": 5, "relat": 2, "usual": 1, "here": 2, "typic": 4, "five": 1, "form": 2, "report": 1, "multipl": 1, "lambda": 9, "speed": 3, "comingl": 1, "clean": 1, "addit": 1, "atom": 1, "ticketmast": 1, "reason": 1, "layer": 9, "tradit": 4, "technolog": 1, "parallel": 2, "aggreg": 3, "function": 2, "stream": 3, "job": 1, "queu": 1, "solut": 1, "python": 1, "userdefin": 1, "duplic": 1, "hadoopspark": 1, "join": 6, "done": 1, "hive": 1, "standard": 4, "empow": 1, "nest": 2, "front": 1, "know": 1, "them": 2, "too": 1, "expens": 1, "out": 1, "enforc": 1, "scale": 3, "automat": 1, "raw": 3, "train": 3, "voldemort": 1, "complex": 2, "least": 2, "plagu": 1, "chunk": 1, "run": 3, "how": 3, "enabl": 2, "inplac": 1, "million": 1, "rdds": 1, "light": 1, "they": 5, "maintain": 1, "keep": 2, "had": 1, "microstrategi": 1, "special": 1, "execut": 4, "singl": 2, "insert": 1, "whi": 1, "secondari": 2, "athlet": 1, "heterogen": 1, "abl": 4, "mani": 1, "other": 1, "ubiquit": 1, "the": 42, "generat": 1, "broadcast": 1, "write": 4, "coverag": 1, "denorm": 1, "provid": 4, "procedur": 3, "power": 2, "updat": 3, "constraint": 2, "new": 1, "lag": 2, "under": 1, "perform": 5, "but": 1, "throw": 1, "show": 1, "need": 4, "there": 1, "explos": 1, "cost": 1, "primari": 1, "tune": 1, "record": 1, "applic": 14, "cleans": 2, "lab": 1, "level": 1, "exampl": 1, "big": 1, "have": 5, "storm": 1, "star": 1, "enterpris": 3, "lane": 1, "visual": 3, "tape": 2, "now": 2, "synchron": 1, "central": 1, "resourc": 1, "elephantdb": 1, "lambdar": 1, "code": 3, "model": 5, "full": 1, "nosql": 1, "basic": 1, "comment": 1, "indic": 1, "break": 1, "issu": 1, "duct": 2, "support": 4, "optim": 2, "modern": 1, "program": 1, "choos": 1, "resultsettordd": 1, "into": 4, "process": 7, "not": 2, "storag": 1, "batch": 11, "plan": 1, "window": 1, "uniqu": 1, "merg": 2, "team": 1, "minim": 1, "take": 2, "store": 4, "hobson": 1, "unifi": 1, "quick": 1, "referenti": 2, "domo": 1, "handl": 1, "want": 1, "which": 1, "simpler": 1, "index": 2, "hbase": 2, "system": 4, "build": 1, "dataflow": 1, "semant": 2, "extens": 3, "last": 1, "let": 1, "world": 1, "elimin": 1, "nonuniqu": 1, "logic": 3, "wrap": 1, "away": 1, "databas": 4, "featur": 2, "skill": 1, "moreau": 1, "estim": 1, "mapreduc": 1, "normal": 1, "appli": 1, "trigger": 1, "algorithm": 1, "one": 1, "autoshard": 1, "two": 1, "foreign": 1, "develop": 1, "such": 2, "architectur": 13, "loop": 2, "get": 2, "like": 8, "implement": 2, "fast": 2, "moment": 1, "small": 2, "cross": 1, "costbas": 1, "file": 3, "alon": 1, "part": 1, "both": 2, "analyt": 9, "subset": 1, "version": 1, "entir": 1, "filter": 1, "tabl": 1, "use": 11, "well": 2, "shard": 1, "miss": 1, "set": 2, "access": 3, "ani": 1, "pretti": 1, "from": 3, "engin": 8, "workload": 1, "snapshot": 1, "bill": 1, "work": 1, "num": 1, "same": 1, "first": 1, "most": 1, "dualengin": 1, "for": 12, "builtin": 1, "personnel": 1, "all": 3, "fulli": 1, "simplifi": 1, "with": 11, "expertis": 1, "much": 1, "these": 3, "are": 6, "includ": 1, "true": 1, "better": 2, "compani": 1, "result": 3, "inner": 1, "current": 1, "day": 1, "sort": 3, "isol": 2, "path": 1, "built": 1, "summari": 1, "and": 36, "veri": 3, "surfac": 1, "pain": 1, "treat": 1, "benefit": 1, "cassandra": 1, "capabl": 2, "properti": 1, "turnkey": 1, "realtim": 2, "scaleout": 2, "librari": 1, "zweben": 1, "antonio": 1, "kafka": 1, "then": 2, "group": 2, "serv": 2, "doe": 1, "even": 1, "mont": 1, "queri": 2, "separ": 1, "circumv": 1, "splice": 9, "concurr": 2, "great": 1, "ingest": 4, "key": 1, "this": 8, "flink": 1, "read": 2, "transfer": 1, "move": 1, "continu": 3, "integr": 4, "data": 19, "oper": 6, "transact": 3, "row": 2, "call": 2, "scientist": 1, "machin": 11, "best": 1, "purist": 1, "would": 1, "tight": 1, "that": 12, "through": 2, "send": 1, "requir": 4, "without": 6, "direct": 3, "import": 2, "hadoop": 2, "what": 2, "busi": 1, "allow": 1, "nosqlkeyvalu": 1, "interview": 1, "tool": 4, "flexibl": 1, "schema": 1, "magnaghi": 1, "larg": 1, "scienc": 1, "see": 1, "down": 1, "learn": 2, "pipelin": 1, "individu": 1, "effici": 2}, "idf": {"lowlevel": 1587.6, "base": 1.14628158845, "natur": 1.5392670157100001, "can": 1.17626139142, "behavior": 5.52978056426, "outer": 8.413354531, "tableau": 244.246153846, "spark": 8.360189573460001, "relat": 1.23750876919, "usual": 1.72508964468, "here": 2.42307692308, "typic": 2.2541530597799997, "five": 1.37740760021, "form": 1.12755681818, "report": 1.3634489866, "multipl": 2.74813917258, "lambda": 91.2413793103, "speed": 3.8703071672400005, "comingl": 1587.6, "clean": 6.86975335353, "addit": 1.24634950542, "atom": 10.576948700900001, "ticketmast": 1134.0, "reason": 1.72340425532, "layer": 8.14153846154, "tradit": 1.60802187785, "technolog": 2.6034765496900003, "parallel": 4.57917507932, "aggreg": 17.542541436500002, "function": 2.495441685, "stream": 6.5118949959000005, "job": 3.2539454806299997, "queu": 294.0, "solut": 4.7278141751, "python": 56.2978723404, "userdefin": 1587.6, "duplic": 19.7955112219, "hadoopspark": 1587.6, "join": 1.7922781666299998, "done": 2.3302509907499998, "hive": 108.739726027, "standard": 1.8915763135900003, "empow": 23.3127753304, "nest": 21.2530120482, "front": 2.32820061593, "know": 2.59327017315, "them": 1.09876115994, "too": 1.81585268215, "expens": 3.5453327378300004, "out": 1.06016694491, "enforc": 4.93810264386, "scale": 3.7469907953699995, "automat": 6.787516032490001, "raw": 10.6478873239, "train": 1.9365698950999999, "voldemort": 721.636363636, "complex": 2.34021226415, "least": 1.6165359943000002, "plagu": 11.086592178800002, "chunk": 81.0, "run": 1.55692850838, "how": 1.60250328051, "enabl": 3.5421686747, "inplac": 1587.6, "million": 1.7279059643, "rdds": 1587.6, "light": 1.9102394417, "they": 1.03017325287, "maintain": 1.77306231852, "keep": 2.04245465071, "had": 1.0475750577399998, "microstrategi": 1587.6, "special": 1.4881889763799998, "execut": 2.2363713199, "singl": 1.60948905109, "insert": 10.041745730599999, "whi": 3.2566153846200003, "secondari": 4.36873968079, "athlet": 6.9418452120700005, "heterogen": 52.0524590164, "abl": 1.8208510150200001, "mani": 1.04426757877, "other": 1.00992366412, "ubiquit": 34.8157894737, "the": 1.0, "generat": 2.05275407292, "broadcast": 3.55167785235, "write": 2.0575427682700003, "coverag": 8.26444560125, "denorm": 1587.6, "provid": 1.21552714187, "procedur": 5.8691312384500005, "power": 1.3396337861799998, "updat": 5.56466876972, "constraint": 15.0483412322, "new": 1.0178880554, "lag": 33.3529411765, "under": 1.0781663837, "perform": 1.5313977042500002, "but": 1.01632417899, "throw": 8.39555790587, "show": 1.26703910615, "need": 1.4372623574099999, "there": 1.04091266719, "explos": 6.72142252329, "cost": 2.31935719503, "primari": 2.2373167981999997, "tune": 10.4173228346, "record": 1.42334588488, "applic": 3.42672134686, "cleans": 34.4381778742, "lab": 14.4327272727, "level": 1.6544393497299998, "exampl": 1.50483412322, "big": 2.7400759406299997, "have": 1.0148948411399998, "storm": 5.524008350730001, "star": 2.4450947173900004, "enterpris": 6.414545454550001, "lane": 7.534883720930001, "visual": 5.22752716497, "tape": 9.78188539741, "now": 1.160780873, "synchron": 26.0262295082, "central": 1.6121039805000001, "resourc": 2.9487369985100003, "elephantdb": 1587.6, "lambdar": 1587.6, "code": 3.8807137619199996, "model": 2.0905978404, "full": 1.66729678639, "nosql": 1587.6, "basic": 2.7301805675, "comment": 3.05954904606, "indic": 2.0826446281, "break": 2.42863698944, "issu": 1.43921675279, "duct": 74.1869158879, "support": 1.2685577307200002, "optim": 11.5377906977, "modern": 1.5319888063299998, "program": 2.02139037433, "choos": 4.17899447223, "resultsettordd": 1587.6, "into": 1.01502461479, "process": 1.69524826482, "not": 1.01567398119, "storag": 8.623574144489998, "batch": 35.6764044944, "plan": 1.5356935577500002, "window": 5.86479497599, "uniqu": 3.01595744681, "merg": 5.28319467554, "team": 2.2748244734200003, "minim": 6.10850327049, "take": 1.13961668222, "store": 3.44680851064, "hobson": 85.3548387097, "unifi": 7.60709151893, "quick": 2.205, "referenti": 360.818181818, "domo": 635.04, "handl": 3.9229058561900003, "want": 1.99698113208, "which": 1.005191845, "simpler": 17.9187358916, "index": 6.9969149405, "hbase": 1587.6, "system": 1.38739840951, "build": 1.6341739578, "dataflow": 1587.6, "semant": 39.1034482759, "extens": 1.99171998495, "last": 1.2117234010100002, "let": 3.48616600791, "world": 1.11340206186, "elimin": 3.67670217693, "nonuniqu": 1587.6, "logic": 8.929133858270001, "wrap": 14.5919117647, "away": 1.85142857143, "databas": 8.24727272727, "featur": 1.52712581762, "skill": 3.6989748369099997, "moreau": 133.411764706, "estim": 2.34991119005, "mapreduc": 1587.6, "normal": 2.61075481006, "appli": 2.2972073506, "trigger": 7.91820448878, "algorithm": 27.9507042254, "one": 1.00627495722, "autoshard": 1587.6, "two": 1.01379310345, "foreign": 2.5276229899700002, "develop": 1.1955719557200002, "such": 1.06151377374, "architectur": 5.12790697674, "loop": 13.5114893617, "get": 1.78562591385, "like": 1.14918566775, "implement": 3.57648118946, "fast": 4.8729281768, "moment": 4.262013422819999, "small": 1.3594793629, "cross": 2.33127753304, "costbas": 1587.6, "file": 3.7710213776699995, "alon": 2.99716820842, "part": 1.04330682789, "both": 1.05215720061, "analyt": 17.256521739100002, "subset": 27.3253012048, "version": 2.0083491461099996, "entir": 1.59365589239, "filter": 16.8893617021, "tabl": 3.82093862816, "use": 1.0296387573799999, "well": 1.0655748708, "shard": 122.123076923, "miss": 3.53664513255, "set": 1.18707940781, "access": 1.8734953976900002, "ani": 1.13383802314, "pretti": 15.75, "from": 1.00056721497, "engin": 2.47135740971, "workload": 74.5352112676, "snapshot": 99.225, "bill": 2.7926121372000003, "work": 1.11520089913, "num": 1.00031504001, "same": 1.11857958148, "first": 1.00761614623, "most": 1.02096463023, "dualengin": 1587.6, "for": 1.00031504001, "builtin": 1587.6, "personnel": 6.3964544722, "all": 1.01146788991, "fulli": 2.79015817223, "simplifi": 12.109839816900001, "with": 1.0011982089899998, "expertis": 20.0201765448, "much": 1.1942229577299999, "these": 1.07415426252, "are": 1.02990593578, "includ": 1.0190641247799999, "true": 2.55569864778, "better": 2.0065722952500002, "compani": 1.5523613963, "result": 1.14611608432, "inner": 6.432739059969999, "current": 1.5325803649, "day": 1.18371607516, "sort": 5.188235294119999, "isol": 4.86397058824, "path": 4.6421052631599995, "built": 1.99447236181, "summari": 7.80147420147, "and": 1.00006299213, "veri": 1.25880114177, "surfac": 3.97396745932, "pain": 6.55762081784, "treat": 3.59023066486, "benefit": 3.06841901817, "cassandra": 128.032258065, "capabl": 3.6580645161300005, "properti": 2.5949656750599996, "turnkey": 1587.6, "realtim": 429.081081081, "scaleout": 1587.6, "librari": 2.68266306185, "zweben": 1587.6, "antonio": 10.3292127521, "kafka": 211.68, "then": 1.08657860516, "group": 1.20996875238, "serv": 1.4668760972, "doe": 1.70581282905, "even": 1.16461267606, "mont": 19.4083129584, "queri": 56.2978723404, "separ": 1.6012102874399998, "circumv": 44.974504249300004, "splice": 118.47761194, "concurr": 15.413592233, "great": 1.26592775696, "ingest": 42.449197861, "key": 2.28005170185, "this": 1.00379362671, "flink": 1587.6, "read": 2.3149606299200003, "transfer": 2.72549356223, "move": 1.29125660838, "continu": 1.13928955867, "integr": 2.8254137746900003, "data": 3.37643555934, "oper": 1.55479384977, "transact": 11.892134831500002, "row": 5.549108703250001, "call": 1.0676529926, "scientist": 4.69426374926, "machin": 4.02433460076, "best": 1.5828514456600002, "purist": 130.131147541, "would": 1.0828729281799998, "tight": 10.0100882724, "that": 1.00398406375, "through": 1.07074930869, "send": 3.75053153792, "requir": 1.52844902282, "without": 1.29547123623, "direct": 1.22226499346, "import": 1.3401992233700002, "hadoop": 1587.6, "what": 1.25343439128, "busi": 2.05541170378, "allow": 1.2716059271100002, "nosqlkeyvalu": 1587.6, "interview": 3.3981164383599998, "tool": 4.99716713881, "flexibl": 9.68639414277, "schema": 111.802816901, "magnaghi": 1587.6, "larg": 1.18574949585, "scienc": 2.31969608416, "see": 1.27242125511, "down": 1.35889754344, "learn": 2.32275054865, "pipelin": 32.1376518219, "individu": 1.8004082558400003, "effici": 5.09335899904}}, "html": "<!DOCTYPE html>\n\n<html lang=\"en-US\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head profile=\"http://gmpg.org/xfn/11\">\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n<title>  5 Reasons Machine Learning Applications Need a Better Lambda Architecture</title>\n<link href=\"/wp-content/themes/kdn17/images/favicon.ico\" rel=\"shortcut icon\"/>\n<link href=\"/wp-content/themes/kdn17/style.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"/wp-content/themes/kdn17/js/jquery-1.9.1.min.js\" type=\"text/javascript\"></script>\n<script src=\"/aps/kda_all.js\" type=\"text/javascript\"></script>\n<link href=\"/feed/\" rel=\"alternate\" title=\"KDnuggets: Analytics, Big Data, Data Mining and Data Science Feed\" type=\"application/rss+xml\"/>\n<link href=\"//s.w.org\" rel=\"dns-prefetch\"/>\n<link href=\"https://www.kdnuggets.com/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/comments/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/2016/05/5-reasons-machine-learning-applications-lambda-architecture.html/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb 5 Reasons Machine Learning Applications Need a Better Lambda Architecture Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-json/\" rel=\"https://api.w.org/\"/>\n<link href=\"https://www.kdnuggets.com/xmlrpc.php?rsd\" rel=\"EditURI\" title=\"RSD\" type=\"application/rsd+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-includes/wlwmanifest.xml\" rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\"/>\n<link href=\"https://www.kdnuggets.com/2016/06/top-tweets-may25-31.html\" rel=\"prev\" title=\"Top KDnuggets tweets, May 25-31: 19 Free eBooks to learn #programming with #Python; Awesome collection of public datasets on Github\"/>\n<link href=\"https://www.kdnuggets.com/2016/06/build-deep-learning-box.html\" rel=\"next\" title=\"How to Build Your Own Deep Learning Box\"/>\n<meta content=\"WordPress 4.9.10\" name=\"generator\">\n<link href=\"https://www.kdnuggets.com/2016/05/5-reasons-machine-learning-applications-lambda-architecture.html\" rel=\"canonical\"/>\n<link href=\"https://www.kdnuggets.com/?p=50416\" rel=\"shortlink\"/>\n<link href=\"https://www.kdnuggets.com/2016/05/5-reasons-machine-learning-applications-lambda-architecture.html\" rel=\"canonical\"/>\n<!-- BEGIN ExactMetrics v5.3.7 Universal Analytics - https://exactmetrics.com/ -->\n<script>\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-361129-1', 'auto');\n  ga('send', 'pageview');\n</script>\n<!-- END ExactMetrics Universal Analytics -->\n</meta></head>\n<body class=\"post-template-default single single-post postid-50416 single-format-standard\">\n<div class=\"main_wrapper\"><!-- publ: 2-Jun, 2016  -->\n<div id=\"wrapper\">\n<div id=\"header\">\n<div id=\"header_log\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<h1>KDnuggets</h1>\n<div class=\"text-container\">\n            \u00a0\u00a0<a href=\"/news/subscribe.html\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a> \u00a0|\n <a href=\"https://twitter.com/kdnuggets\" target=\"_blank\"><img alt=\"Twitter\" height=\"48\" src=\"/images/tw_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n <a href=\"https://www.facebook.com/kdnuggets\" target=\"_blank\"><img alt=\"Facebook\" height=\"48\" src=\"/images/fb_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n<a href=\"https://www.linkedin.com/groups/54257/\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"48\" src=\"/images/in_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \n\u00a0|\u00a0 <a href=\"/contact.html\"><b>Contact</b></a>\n</div>\n</div>\n<div class=\"search\">\n<form action=\"/\" id=\"searchform\" method=\"get\">\n<input id=\"s\" name=\"s\" placeholder=\"search KDnuggets\" type=\"text\" value=\"\"/>\n<input type=\"submit\" value=\"Search\"/></form>\n</div>\n<div href=\"#\" id=\"pull\">\n<img class=\"menu\" src=\"/images/menu-30.png\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<img class=\"search-icon\" src=\"/images/search-icon.png\">\n</img></img></div>\n<div id=\"pull-menu\">\n<div class=\"navigation\"><ul class=\"menu\" id=\"menu-menu\"><li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-1070\" id=\"menu-item-1070\"><a href=\"/software/index.html\" title=\"Data Science Software\">SOFTWARE</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13756\" id=\"menu-item-13756\"><a href=\"/news/index.html\" title=\"News\">News/Blog</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-46286\" id=\"menu-item-46286\"><a href=\"/news/top-stories.html\">Top stories</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-42152\" id=\"menu-item-42152\"><a href=\"https://www.kdnuggets.com/opinions/index.html\" title=\"Opinions\">Opinions</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-46415\" id=\"menu-item-46415\"><a href=\"https://www.kdnuggets.com/tutorials/index.html\">Tutorials</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13364\" id=\"menu-item-13364\"><a href=\"/jobs/index.html\" title=\"Jobs in Analytics, Data Science\">JOBS</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-63505\" id=\"menu-item-63505\"><a href=\"https://www.kdnuggets.com/companies/index.html\">Companies</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13366\" id=\"menu-item-13366\"><a href=\"/courses/index.html\">Courses</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-1499\" id=\"menu-item-1499\"><a href=\"https://www.kdnuggets.com/datasets/index.html\">Datasets</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-14286\" id=\"menu-item-14286\"><a href=\"https://www.kdnuggets.com/education/index.html\" title=\"Education in Analytics, Big Data, Data Science\">EDUCATION</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-51558\" id=\"menu-item-51558\"><a href=\"https://www.kdnuggets.com/education/analytics-data-mining-certificates.html\" title=\"Certificates in Analytics, Big Data, Data Science\">Certificates</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-14752\" id=\"menu-item-14752\"><a href=\"/meetings/index.html\">Meetings</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13721\" id=\"menu-item-13721\"><a href=\"/webcasts/index.html\" title=\"Webcasts and Webinars\">Webinars</a></li>\n</ul></div></div>\n</div> <!--#header end-->\n<div id=\"spacer\">\n         \u00a0\n      </div>\n<div id=\"content_wrapper\">\n<div id=\"ad_wrapper\">\n<script type=\"text/javascript\">\n\tjQuery(function() {\n   \t    var pull        = $('#pull');\n            menu        = $('#header .navigation ul');\n            menuImage = $('#header img.menu');\n            mobileMenu        = $('#pull-menu-mobile');\n            search = $('img.search-icon');\n            searchBar = $('div.search');\n            searchClick = false;\n            search.on('click', function() {\n                  searchBar.slideToggle();\n                  searchClick = true;\n            });  \n     \t    $(menuImage).on('click', function(e) {\n\t        //e.preventDefault();\n                if (!searchClick) {\n                  menu.slideToggle();\n                }\n                searchClick = false;\n\t    });\n           /* pullMobile.on('click', function(e) {\n              e.preventDefault();\n                if (!searchClick) {\n                  mobileMenu.slideToggle();\n                }\n                searchClick = false;\n\t    });*/\n            \n\t});\n\tkpath = '/'; kda_top(); kda_sid_init(); kda_sid_n=3;\n\t</script>\n</div> <div class=\"breadcumb\">\n<br/>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2016/index.html\">2016</a> \u00bb <a href=\"https://www.kdnuggets.com/2016/05/index.html\">May</a> \u00bb <a href=\"https://www.kdnuggets.com/2016/05/opinions-interviews.html\">Opinions, Interviews, Reports</a> \u00bb 5 Reasons Machine Learning Applications Need a Better Lambda Architecture (\u00a0<a href=\"/2016/n20.html\">16:n20</a>\u00a0)    </div>\n<div class=\"single\" id=\"content\">\n<div id=\"post-header\">\n<h1 id=\"title\">5 Reasons Machine Learning Applications Need a Better Lambda Architecture</h1>\n<div class=\"pagi\">\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2016/06/top-tweets-may25-31.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"> <strong>Previous post</strong></img></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2016/06/build-deep-learning-box.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/>\u00a0<br/>\u00a0\n    <div class=\"addthis_native_toolbox\"></div>\n</div>\n<div class=\"tag-data\">Tags: <a href=\"https://www.kdnuggets.com/tag/applications\" rel=\"tag\">Applications</a>, <a href=\"https://www.kdnuggets.com/tag/lambda-architecture\" rel=\"tag\">Lambda Architecture</a>, <a href=\"https://www.kdnuggets.com/tag/machine-learning\" rel=\"tag\">Machine Learning</a>, <a href=\"https://www.kdnuggets.com/tag/monte-zweben\" rel=\"tag\">Monte Zweben</a>, <a href=\"https://www.kdnuggets.com/tag/splice-machine\" rel=\"tag\">Splice Machine</a></div>\n<br/>\n<p class=\"excerpt\">\n     The Lambda Architecture enables a continuous processing of real-time data.  It is a painful process that gets the job done, but at a great cost. Here is a simplified solution called as Lambda-R (\u019b-R) for the Relational Lambda.\n  </p>\n</div>\n<div id=\"post-header-ad\">\n<script type=\"text/javascript\">kda_sid_write(1); kda_sid_n=2;</script>\n</div>\n<hr class=\"grey-line\"/><br/>\n<div class=\"post\" id=\"post-\">\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p><strong>By <a href=\"https://www.linkedin.com/in/mzweben\">Monte Zweben</a>, CEO <a href=\"http://www.splicemachine.com\">Splice Machine</a>.</strong></p>\n<p>Lambda architectures are ubiquitous in machine learning and data science applications. The Lambda Architecture enables a continuous processing of real-time data without the traditional ETL lag that plagues traditional operational (OLTP) and analytical (OLAP) implementations. In traditional architectures, OLTP databases are normalized for performance and then extensive ETL pipelines de-normalize this data, typically into star schemas on OLAP engines. This process usually takes at least a day. The Lambda Architecture circumvents this lag. In its purist form, the Lambda Architecture sends data down two paths: a batch processing layer and a speed layer. The batch layer aggregates the raw data and trains models. The results of the batch layer are then transferred to a serving layer for the application to surface. The speed layer allows applications to access the most current data that \u201cmissed\u201d the last batch processing window.</p>\n<p>So how do companies implement this architecture? For the batch layer, they typically use a batch analytics processing engine on Hadoop, like MapReduce, Hive or Spark. For the serving layer, they use a NoSQL/Key-Value engine that performs well on batch imports and reads like ElephantDB and Voldemort. For the speed layer, they need a data store that supports fast reads and writes like Cassandra or HBase. At the front of this architecture, there typically is a queuing system like Kafka and a streaming system like Storm, Spark or even Flink to break continuous data into chunks for processing.</p>\n<p><img alt=\"enterprise-lambda-architecture\" class=\"wp-image-50428 aligncenter\" sizes=\"(max-width: 490px) 100vw, 490px\" src=\"/wp-content/uploads/enterprise-lambda-architecture.jpg\" srcset=\"https://www.kdnuggets.com/wp-content/uploads/enterprise-lambda-architecture.jpg 490w, https://www.kdnuggets.com/wp-content/uploads/enterprise-lambda-architecture-300x128.jpg 300w\" width=\"99%\"/></p>\n<p>Enterprises keep this architecture working with what I like to call enterprise duct tape. It is a painful process that gets the job done, but at a great cost. Here are the five reasons we need a better Lambda architecture:</p>\n<ol class=\"three_ol\">\n<li>Simplify Operational Complexity \u2013 It is very expensive to keep these systems synchronized based on versions and tuned for performance. It requires expertise in too many technologies</li>\n<li>Eliminate Need For Specialized Coding Skills \u2013 Developers have to be able to write pretty low-level code to handle basic operations like joins, aggregations, sorts, and groupings, let alone applying analytics. They have to write batch programs to cleanse and filter individual records</li>\n<li>Provide Access to Standard Tools \u2013 99% of data scientists know SQL and have used BI visualization tools. Why would we throw away these powerful tools, now that they don\u2019t have the same performance and flexibility issues that the first generation of databases had?</li>\n<li>Minimize Storage \u2013 Lambda typically requires at least duplicating the data in multiple engines</li>\n<li>Support Integrated Applications \u2013 The modern application does not have application logic separated from analytical logic. These workloads need to co-mingle. You want to be able to use the operational raw data for business applications in the moment, use it to perform feature engineering and train models, and be able to visualize it \u2014 all concurrently. This requires the ACID properties of traditional databases, the ingestion capabilities of NoSQL and the scale-out capabilities of the Hadoop/Spark engines</li>\n</ol>\n<p>So what is a better solution? We call it Lambda-R (\u019b-R) for the Relational Lambda. With the new scale-out RDBMS systems, you can now get all the benefits of Lambda with a much simpler architecture.</p>\n<p style=\"text-align: center;\"><img alt=\"simplified-lambda-architecture\" class=\"wp-image-50429 aligncenter\" sizes=\"(max-width: 480px) 100vw, 480px\" src=\"/wp-content/uploads/simplified-lambda-architecture.jpg\" srcset=\"https://www.kdnuggets.com/wp-content/uploads/simplified-lambda-architecture.jpg 480w, https://www.kdnuggets.com/wp-content/uploads/simplified-lambda-architecture-300x179.jpg 300w\" width=\"99%\"/></p>\n<p>Here\u2019s how a machine learning application can use\u00a0 \u019b-R :</p>\n<ul class=\"three_ul\">\n<li>Batch file ingestion \u2013 Imports of raw data files are directly inserted into sharded tables in parallel with indexes that are atomically updated with the data for fast access</li>\n<li>Real-time stream ingestion \u2013 Stored procedures continuously ingest streams with standard SQL and auto-shards</li>\n<li>Data cleansing \u2013 Use standard SQL, with constraints and triggers, to clean up small subsets of data as well as entire data sets efficiently, without big batch runs or file explosions</li>\n<li>Feature engineering and extensive ETL \u2013 Execute complex aggregations, joins, sorts, and groupings with efficient SQL that is automatically parallelized and optimized without writing code at the application level</li>\n<li>Model training \u2013 Stored procedures execute analytics directly on the data, for example, using built-in functions like ResultSetToRDD that take SQL results and treat them as Spark RDDs or execute R and Python libraries directly on database result sets.</li>\n<li>Application logic \u2013 ACID semantics enable the architecture to power concurrent CRUD applications without additional moving parts</li>\n<li>Model execution \u2013 Stored procedures and user-defined functions wrap models</li>\n<li>Reporting and data visualization \u2013 Use Tableau, Domo, MicroStrategy and other ODBC/JDBC tools turnkey</li>\n</ul>\n<p>One scale out RDBMS that can do this is Splice Machine. Splice Machine is a dual-engine RDBMS that is built on Hadoop and Spark.</p>\n<p>The Splice Machine RDBMS provides:</p>\n<ul class=\"three_ul\">\n<li>ANSI SQL \u2013 Splice Machine provides ANSI SQL-99 coverage, including full DDL and DML</li>\n<li>ACID Transactions \u2013 Splice Machine provides fully ACID transactions with Snapshot Isolation semantics, which scale both to very small operational queries and large analytics</li>\n<li>In-Place Updates \u2013\u00a0Updates in Splice Machine scale from a single row to millions of rows with a single transaction</li>\n<li>Secondary Indexing \u2013\u00a0Splice Machine supports true secondary indices on data, in both unique and non-unique forms</li>\n<li>Referential Integrity \u2013 Referential integrity, such as Primary and Foreign key constraints, can be enforced without requiring any behavior from the underlying application</li>\n<li>Joins \u2013\u00a0Splice Machine supports inner, outer, cross and natural joins using join algorithms such as broadcast, merge, merge sort, batch nested loop, and nested loop joins</li>\n<li>Resource Isolation The cost-based optimizer chooses a dataflow engine based on the estimation of the query plan \u2013 OLTP runs on HBase and OLAP runs on Spark</li>\n</ul>\n<p>In summary, by centralizing on a\u00a0 \u019b-R architecture, teams can build ML applications very quickly, maintain them with standard operational personnel, and be able to tightly integrate ML into the application without extensive use of \u201cEnterprise Duct Tape\u201d.</p>\n<p><strong>Related:</strong></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2015/05/interview-antonio-magnaghi-ticketmaster-analytics-lambda.html\" target=\"_blank\">Interview: Antonio Magnaghi, TicketMaster on Unifying Heterogeneous Analytics through Lambda Architecture</a></li>\n<li><a href=\"/2015/03/interview-bill-moreau-usoc-athletes-analytics.html\" target=\"_blank\">Bill Moreau, USOC on Empowering World\u2019s Best Athletes through Analytics</a></li>\n<li><a href=\"/2015/05/interview-hobson-lane-sharp-labs-data-science.html\" target=\"_blank\">Hobson Lane, SHARP Labs on How Analytics can Show You \u201cAll the Light You Cannot See\u201d</a></li>\n</ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p><script type=\"text/javascript\">// <![CDATA[\n var disqus_shortname = 'kdnuggets'; \n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n\n// ]]&gt;</script></p>\n</div>\n<div class=\"page-link\"></div>\n<div class=\"pagi\">\n<hr class=\"grey-line\"/>\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2016/06/top-tweets-may25-31.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"/> <strong>Previous post</strong></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2016/06/build-deep-learning-box.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/><br/>\n<div>\n<hr class=\"grey-line\"/><br/>\n<h2>Top Stories Past 30 Days</h2>\n<table align=\"center\" cellpadding=\"3\" cellspacing=\"10\" class=\"latn\" width=\"100%\">\n<tr>\n<td valign=\"top\" width=\"50%\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Popular</b></th></tr>\n<tr><td>\n<ol class=\"three_ol\"><li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-1-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-2-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n<li> <a href=\"/2018/05/simplilearn-9-must-have-skills-data-scientist.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-3-simplilearn');\"><b>9 Must-have skills you need to become a Data Scientist, updated</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-4-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/03/another-10-free-must-read-books-for-machine-learning-and-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-5-another-10-books');\"><b>Another 10 Free Must-Read Books for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-6-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/best-data-visualization-techniques.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-7-best-data-viz');\"><b>Best Data Visualization Techniques for small and large data</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td> <td valign=\"top\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Shared</b></th></tr>\n<tr><td><ol class=\"three_ol\">\n<li> <a href=\"/2019/04/another-10-free-must-see-courses-machine-learning-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-1-another-10-courses');\"><b>Another 10 Free Must-See Courses for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-2-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/03/r-vs-python-data-visualization.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-3-r-py-viz');\"><b>R vs Python for Data Visualization</b></a>\n<li> <a href=\"/2019/03/deep-learning-toolset-overview.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-4-dl-toolset');\"><b>The Deep Learning Toolset \u2014 An Overview</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-5-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-6-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-7-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<!--#content end--></div>\n<div id=\"sidebar\">\n<div class=\"latn\">\n<h3><b><a href=\"/news/index.html\">Latest News</a></b></h3>\n<ul style=\"font-size:14px; margin-top:5px\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/datarobot-delivering-trusted-ai-microsoft.html\">Delivering Trusted AI with DataRobot and Microsoft</a><li> <a href=\"https://www.kdnuggets.com/2019/04/formulated-ai-data-production-landscape.html\">AI and the data production landscape</a><li> <a href=\"https://www.kdnuggets.com/2019/04/most-desired-skill-data-science.html\">The most desired skill in data science</a><li> <a href=\"https://www.kdnuggets.com/2019/04/projects-include-data-science-portfolio.html\">Projects to Include in a Data Science Portfolio</a><li> <a href=\"https://www.kdnuggets.com/2019/04/rework-meet-worlds-leading-ai-deep-learning-experts.html\">Meet the World\u2019s Leading AI &amp; Deep Learning ...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/problem-data-science-job-postings.html\">The problem with data science job postings</a></li></li></li></li></li></li></ul>\n</div>\n<div>\n<script type=\"text/javascript\">kda_sid_write(kda_sid_n);</script>\n</div>\n<br/><script src=\"/aps/sbm.js\" type=\"text/javascript\"></script>\n</div>\n</div><div class=\"breadcrumbs_bottom\">\n<div class=\"breadcumb\">\n<br>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2016/index.html\">2016</a> \u00bb <a href=\"https://www.kdnuggets.com/2016/05/index.html\">May</a> \u00bb <a href=\"https://www.kdnuggets.com/2016/05/opinions-interviews.html\">Opinions, Interviews, Reports</a> \u00bb 5 Reasons Machine Learning Applications Need a Better Lambda Architecture (\u00a0<a href=\"/2016/n20.html\">16:n20</a>\u00a0)    </br></div>\n</div>\n<!--#content_wrapper end--></div>\n<br>\n<div id=\"footer\">\n<br/>\u00a9 2019 KDnuggets. <a href=\"/about/index.html\">About KDnuggets</a>. \u00a0<a href=\"/news/privacy-policy.html\">Privacy policy</a>. <a href=\"/terms-of-service.html\">Terms of Service</a><br/>\u00a0\n<div class=\"kd_bottom\">\n<div class=\"footer-container\">\n<div class=\"footer-news\">\n<a href=\"/news/subscribe.html\" onclick=\"_gaq.push(['_trackPageview','/x/bot/sub']);\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a>\n</div>\n<div class=\"footer-sm\">\n<a href=\"https://twitter.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/twt']);\" target=\"_blank\"><img height=\"32\" src=\"/images/tw_c48.png\" width=\"32\"/></a>\n<a href=\"https://facebook.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/fb']);\" target=\"_blank\"><img alt=\"Facebook\" height=\"32\" src=\"/images/fb_c48.png\" width=\"32\"/></a>\n<a href=\"https://www.linkedin.com/groups/54257\" onclick=\"_gaq.push(['_trackPageview','/x/bot/in']);\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"32\" src=\"/images/in_c48.png\" width=\"32\"/></a>\n</div>\n</div>\n<div class=\"close-footer\">X</div>\n</div>\n<script type=\"text/javascript\">\n  jQuery('.close-footer').click(\n      function(){       \n         jQuery('.kd_bottom').hide();\n      }\n   );\n</script> </div>\n<div class=\"clear\"><!--blank--></div>\n</br></div>\n<div style=\"display: none;\"><div id=\"boxzilla-box-82996-content\"><script type=\"text/javascript\">(function() {\n\tif (!window.mc4wp) {\n\t\twindow.mc4wp = {\n\t\t\tlisteners: [],\n\t\t\tforms    : {\n\t\t\t\ton: function (event, callback) {\n\t\t\t\t\twindow.mc4wp.listeners.push({\n\t\t\t\t\t\tevent   : event,\n\t\t\t\t\t\tcallback: callback\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})();\n</script><!-- MailChimp for WordPress v4.1.14 - https://wordpress.org/plugins/mailchimp-for-wp/ --><form class=\"mc4wp-form mc4wp-form-77281\" data-id=\"77281\" data-name=\"Subscribe to KDnuggets News\" id=\"mc4wp-form-1\" method=\"post\"><div class=\"mc4wp-form-fields\"><div class=\"header-container\">\n<img align=\"left\" src=\"/wp-content/uploads/envelope.png\"><a href=\"/news/subscribe.html\">Get KDnuggets, a leading newsletter on AI, \r\n  Data Science, and Machine Learning</a>\n</img></div>\n<div class=\"form-fields\">\n<div class=\"field-container\"><label>Email:</label><input maxlength=\"60\" name=\"EMAIL\" placeholder=\"Your email\" required=\"\" size=\"30\" type=\"email\"/></div>\n<div class=\"field-container submit-container\"><div class=\"form-button\" onclick=\"document.getElementById('mc4wp-form-1').submit()\">Sign Up</div></div>\n</div>\n<label style=\"display: none !important;\">Leave this field empty if you're human: <input autocomplete=\"off\" name=\"_mc4wp_honeypot\" tabindex=\"-1\" type=\"text\" value=\"\"/></label><input name=\"_mc4wp_timestamp\" type=\"hidden\" value=\"1556365387\"/><input name=\"_mc4wp_form_id\" type=\"hidden\" value=\"77281\"/><input name=\"_mc4wp_form_element_id\" type=\"hidden\" value=\"mc4wp-form-1\"/></div><div class=\"mc4wp-response\"></div></form><!-- / MailChimp for WordPress Plugin -->\n</div></div><script type=\"text/javascript\">(function() {function addEventListener(element,event,handler) {\n\tif(element.addEventListener) {\n\t\telement.addEventListener(event,handler, false);\n\t} else if(element.attachEvent){\n\t\telement.attachEvent('on'+event,handler);\n\t}\n}function maybePrefixUrlField() {\n\tif(this.value.trim() !== '' && this.value.indexOf('http') !== 0) {\n\t\tthis.value = \"http://\" + this.value;\n\t}\n}\n\nvar urlFields = document.querySelectorAll('.mc4wp-form input[type=\"url\"]');\nif( urlFields && urlFields.length > 0 ) {\n\tfor( var j=0; j < urlFields.length; j++ ) {\n\t\taddEventListener(urlFields[j],'blur',maybePrefixUrlField);\n\t}\n}/* test if browser supports date fields */\nvar testInput = document.createElement('input');\ntestInput.setAttribute('type', 'date');\nif( testInput.type !== 'date') {\n\n\t/* add placeholder & pattern to all date fields */\n\tvar dateFields = document.querySelectorAll('.mc4wp-form input[type=\"date\"]');\n\tfor(var i=0; i<dateFields.length; i++) {\n\t\tif(!dateFields[i].placeholder) {\n\t\t\tdateFields[i].placeholder = 'YYYY-MM-DD';\n\t\t}\n\t\tif(!dateFields[i].pattern) {\n\t\t\tdateFields[i].pattern = '[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])';\n\t\t}\n\t}\n}\n\n})();</script><script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_options = {\"testMode\":\"\",\"boxes\":[{\"id\":82996,\"icon\":\"&times;\",\"content\":\"\",\"css\":{\"background_color\":\"#eeee22\",\"width\":600,\"border_width\":2,\"border_style\":\"double\",\"position\":\"center\"},\"trigger\":{\"method\":\"time_on_page\",\"value\":\"3\"},\"animation\":\"fade\",\"cookie\":{\"triggered\":0,\"dismissed\":336},\"rehide\":true,\"position\":\"center\",\"screenWidthCondition\":{\"condition\":\"larger\",\"value\":500},\"closable\":true,\"post\":{\"id\":82996,\"title\":\"Subscribe to KDnuggets\",\"slug\":\"subscribe-to-kdnuggets\"}}]};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla/assets/js/script.min.js?ver=3.2.5\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_stats_config = {\"ajaxurl\":\"https:\\/\\/www.kdnuggets.com\\/wp-admin\\/admin-ajax.php?action=boxzilla_stats_track\"};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla-stats/assets/js/tracking.min.js?ver=1.0.4\" type=\"text/javascript\"></script>\n<script src=\"https://www.kdnuggets.com/wp-includes/js/wp-embed.min.js?ver=4.9.10\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar mc4wp_forms_config = [];\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/forms-api.min.js?ver=4.1.14\" type=\"text/javascript\"></script>\n<!--[if lte IE 9]>\n<script type='text/javascript' src='https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/third-party/placeholders.min.js?ver=4.1.14'></script>\n<![endif]-->\n<!--/.main_wrapper--></body></html>\n<script src=\"https://s7.addthis.com/js/300/addthis_widget.js#pubid=gpsaddthis\" type=\"text/javascript\"></script>\n\n\n<!-- Dynamic page generated in 0.630 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2019-04-27 07:43:07 -->\n<!-- Compression = gzip -->", "content_tokenized": ["comment", "mont", "zweben", "splice", "machin", "lambda", "architectur", "are", "ubiquit", "machin", "learn", "and", "data", "scienc", "applic", "the", "lambda", "architectur", "enabl", "continu", "process", "realtim", "data", "without", "the", "tradit", "lag", "that", "plagu", "tradit", "oper", "and", "analyt", "implement", "tradit", "architectur", "databas", "are", "normal", "for", "perform", "and", "then", "extens", "pipelin", "denorm", "this", "data", "typic", "into", "star", "schema", "engin", "this", "process", "usual", "take", "least", "day", "the", "lambda", "architectur", "circumv", "this", "lag", "purist", "form", "the", "lambda", "architectur", "send", "data", "down", "two", "path", "batch", "process", "layer", "and", "speed", "layer", "the", "batch", "layer", "aggreg", "the", "raw", "data", "and", "train", "model", "the", "result", "the", "batch", "layer", "are", "then", "transfer", "serv", "layer", "for", "the", "applic", "surfac", "the", "speed", "layer", "allow", "applic", "access", "the", "most", "current", "data", "that", "miss", "the", "last", "batch", "process", "window", "how", "compani", "implement", "this", "architectur", "for", "the", "batch", "layer", "they", "typic", "use", "batch", "analyt", "process", "engin", "hadoop", "like", "mapreduc", "hive", "spark", "for", "the", "serv", "layer", "they", "use", "nosqlkeyvalu", "engin", "that", "perform", "well", "batch", "import", "and", "read", "like", "elephantdb", "and", "voldemort", "for", "the", "speed", "layer", "they", "need", "data", "store", "that", "support", "fast", "read", "and", "write", "like", "cassandra", "hbase", "the", "front", "this", "architectur", "there", "typic", "queu", "system", "like", "kafka", "and", "stream", "system", "like", "storm", "spark", "even", "flink", "break", "continu", "data", "into", "chunk", "for", "process", "enterpris", "keep", "this", "architectur", "work", "with", "what", "like", "call", "enterpris", "duct", "tape", "pain", "process", "that", "get", "the", "job", "done", "but", "great", "cost", "here", "are", "the", "five", "reason", "need", "better", "lambda", "architectur", "simplifi", "oper", "complex", "veri", "expens", "keep", "these", "system", "synchron", "base", "version", "and", "tune", "for", "perform", "requir", "expertis", "too", "mani", "technolog", "elimin", "need", "for", "special", "code", "skill", "develop", "have", "abl", "write", "pretti", "lowlevel", "code", "handl", "basic", "oper", "like", "join", "aggreg", "sort", "and", "group", "let", "alon", "appli", "analyt", "they", "have", "write", "batch", "program", "cleans", "and", "filter", "individu", "record", "provid", "access", "standard", "tool", "num", "data", "scientist", "know", "and", "have", "use", "visual", "tool", "whi", "would", "throw", "away", "these", "power", "tool", "now", "that", "they", "have", "the", "same", "perform", "and", "flexibl", "issu", "that", "the", "first", "generat", "databas", "had", "minim", "storag", "lambda", "typic", "requir", "least", "duplic", "the", "data", "multipl", "engin", "support", "integr", "applic", "the", "modern", "applic", "doe", "not", "have", "applic", "logic", "separ", "from", "analyt", "logic", "these", "workload", "need", "comingl", "want", "abl", "use", "the", "oper", "raw", "data", "for", "busi", "applic", "the", "moment", "use", "perform", "featur", "engin", "and", "train", "model", "and", "abl", "visual", "all", "concurr", "this", "requir", "the", "properti", "tradit", "databas", "the", "ingest", "capabl", "nosql", "and", "the", "scaleout", "capabl", "the", "hadoopspark", "engin", "what", "better", "solut", "call", "lambdar", "for", "the", "relat", "lambda", "with", "the", "new", "scaleout", "system", "can", "now", "get", "all", "the", "benefit", "lambda", "with", "much", "simpler", "architectur", "here", "how", "machin", "learn", "applic", "can", "use", "batch", "file", "ingest", "import", "raw", "data", "file", "are", "direct", "insert", "into", "shard", "tabl", "parallel", "with", "index", "that", "are", "atom", "updat", "with", "the", "data", "for", "fast", "access", "realtim", "stream", "ingest", "store", "procedur", "continu", "ingest", "stream", "with", "standard", "and", "autoshard", "data", "cleans", "use", "standard", "with", "constraint", "and", "trigger", "clean", "small", "subset", "data", "well", "entir", "data", "set", "effici", "without", "big", "batch", "run", "file", "explos", "featur", "engin", "and", "extens", "execut", "complex", "aggreg", "join", "sort", "and", "group", "with", "effici", "that", "automat", "parallel", "and", "optim", "without", "write", "code", "the", "applic", "level", "model", "train", "store", "procedur", "execut", "analyt", "direct", "the", "data", "for", "exampl", "use", "builtin", "function", "like", "resultsettordd", "that", "take", "result", "and", "treat", "them", "spark", "rdds", "execut", "and", "python", "librari", "direct", "databas", "result", "set", "applic", "logic", "semant", "enabl", "the", "architectur", "power", "concurr", "applic", "without", "addit", "move", "part", "model", "execut", "store", "procedur", "and", "userdefin", "function", "wrap", "model", "report", "and", "data", "visual", "use", "tableau", "domo", "microstrategi", "and", "other", "tool", "turnkey", "one", "scale", "out", "that", "can", "this", "splice", "machin", "splice", "machin", "dualengin", "that", "built", "hadoop", "and", "spark", "the", "splice", "machin", "provid", "splice", "machin", "provid", "coverag", "includ", "full", "and", "transact", "splice", "machin", "provid", "fulli", "transact", "with", "snapshot", "isol", "semant", "which", "scale", "both", "veri", "small", "oper", "queri", "and", "larg", "analyt", "inplac", "updat", "updat", "splice", "machin", "scale", "from", "singl", "row", "million", "row", "with", "singl", "transact", "secondari", "index", "splice", "machin", "support", "true", "secondari", "indic", "data", "both", "uniqu", "and", "nonuniqu", "form", "referenti", "integr", "referenti", "integr", "such", "primari", "and", "foreign", "key", "constraint", "can", "enforc", "without", "requir", "ani", "behavior", "from", "the", "under", "applic", "join", "splice", "machin", "support", "inner", "outer", "cross", "and", "natur", "join", "use", "join", "algorithm", "such", "broadcast", "merg", "merg", "sort", "batch", "nest", "loop", "and", "nest", "loop", "join", "resourc", "isol", "the", "costbas", "optim", "choos", "dataflow", "engin", "base", "the", "estim", "the", "queri", "plan", "run", "hbase", "and", "run", "spark", "summari", "central", "architectur", "team", "can", "build", "applic", "veri", "quick", "maintain", "them", "with", "standard", "oper", "personnel", "and", "abl", "tight", "integr", "into", "the", "applic", "without", "extens", "use", "enterpris", "duct", "tape", "relat", "interview", "antonio", "magnaghi", "ticketmast", "unifi", "heterogen", "analyt", "through", "lambda", "architectur", "bill", "moreau", "empow", "world", "best", "athlet", "through", "analyt", "hobson", "lane", "lab", "how", "analyt", "can", "show", "all", "the", "light", "can", "not", "see"], "timestamp_scraper": 1556365387.33255, "title": "5 Reasons Machine Learning Applications Need a Better Lambda Architecture", "read_time": 291.9, "content_html": "<div class=\"post\" id=\"post-\">\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p><strong>By <a href=\"https://www.linkedin.com/in/mzweben\">Monte Zweben</a>, CEO <a href=\"http://www.splicemachine.com\">Splice Machine</a>.</strong></p>\n<p>Lambda architectures are ubiquitous in machine learning and data science applications. The Lambda Architecture enables a continuous processing of real-time data without the traditional ETL lag that plagues traditional operational (OLTP) and analytical (OLAP) implementations. In traditional architectures, OLTP databases are normalized for performance and then extensive ETL pipelines de-normalize this data, typically into star schemas on OLAP engines. This process usually takes at least a day. The Lambda Architecture circumvents this lag. In its purist form, the Lambda Architecture sends data down two paths: a batch processing layer and a speed layer. The batch layer aggregates the raw data and trains models. The results of the batch layer are then transferred to a serving layer for the application to surface. The speed layer allows applications to access the most current data that \u201cmissed\u201d the last batch processing window.</p>\n<p>So how do companies implement this architecture? For the batch layer, they typically use a batch analytics processing engine on Hadoop, like MapReduce, Hive or Spark. For the serving layer, they use a NoSQL/Key-Value engine that performs well on batch imports and reads like ElephantDB and Voldemort. For the speed layer, they need a data store that supports fast reads and writes like Cassandra or HBase. At the front of this architecture, there typically is a queuing system like Kafka and a streaming system like Storm, Spark or even Flink to break continuous data into chunks for processing.</p>\n<p><img alt=\"enterprise-lambda-architecture\" class=\"wp-image-50428 aligncenter\" sizes=\"(max-width: 490px) 100vw, 490px\" src=\"/wp-content/uploads/enterprise-lambda-architecture.jpg\" srcset=\"https://www.kdnuggets.com/wp-content/uploads/enterprise-lambda-architecture.jpg 490w, https://www.kdnuggets.com/wp-content/uploads/enterprise-lambda-architecture-300x128.jpg 300w\" width=\"99%\"/></p>\n<p>Enterprises keep this architecture working with what I like to call enterprise duct tape. It is a painful process that gets the job done, but at a great cost. Here are the five reasons we need a better Lambda architecture:</p>\n<ol class=\"three_ol\">\n<li>Simplify Operational Complexity \u2013 It is very expensive to keep these systems synchronized based on versions and tuned for performance. It requires expertise in too many technologies</li>\n<li>Eliminate Need For Specialized Coding Skills \u2013 Developers have to be able to write pretty low-level code to handle basic operations like joins, aggregations, sorts, and groupings, let alone applying analytics. They have to write batch programs to cleanse and filter individual records</li>\n<li>Provide Access to Standard Tools \u2013 99% of data scientists know SQL and have used BI visualization tools. Why would we throw away these powerful tools, now that they don\u2019t have the same performance and flexibility issues that the first generation of databases had?</li>\n<li>Minimize Storage \u2013 Lambda typically requires at least duplicating the data in multiple engines</li>\n<li>Support Integrated Applications \u2013 The modern application does not have application logic separated from analytical logic. These workloads need to co-mingle. You want to be able to use the operational raw data for business applications in the moment, use it to perform feature engineering and train models, and be able to visualize it \u2014 all concurrently. This requires the ACID properties of traditional databases, the ingestion capabilities of NoSQL and the scale-out capabilities of the Hadoop/Spark engines</li>\n</ol>\n<p>So what is a better solution? We call it Lambda-R (\u019b-R) for the Relational Lambda. With the new scale-out RDBMS systems, you can now get all the benefits of Lambda with a much simpler architecture.</p>\n<p style=\"text-align: center;\"><img alt=\"simplified-lambda-architecture\" class=\"wp-image-50429 aligncenter\" sizes=\"(max-width: 480px) 100vw, 480px\" src=\"/wp-content/uploads/simplified-lambda-architecture.jpg\" srcset=\"https://www.kdnuggets.com/wp-content/uploads/simplified-lambda-architecture.jpg 480w, https://www.kdnuggets.com/wp-content/uploads/simplified-lambda-architecture-300x179.jpg 300w\" width=\"99%\"/></p>\n<p>Here\u2019s how a machine learning application can use\u00a0 \u019b-R :</p>\n<ul class=\"three_ul\">\n<li>Batch file ingestion \u2013 Imports of raw data files are directly inserted into sharded tables in parallel with indexes that are atomically updated with the data for fast access</li>\n<li>Real-time stream ingestion \u2013 Stored procedures continuously ingest streams with standard SQL and auto-shards</li>\n<li>Data cleansing \u2013 Use standard SQL, with constraints and triggers, to clean up small subsets of data as well as entire data sets efficiently, without big batch runs or file explosions</li>\n<li>Feature engineering and extensive ETL \u2013 Execute complex aggregations, joins, sorts, and groupings with efficient SQL that is automatically parallelized and optimized without writing code at the application level</li>\n<li>Model training \u2013 Stored procedures execute analytics directly on the data, for example, using built-in functions like ResultSetToRDD that take SQL results and treat them as Spark RDDs or execute R and Python libraries directly on database result sets.</li>\n<li>Application logic \u2013 ACID semantics enable the architecture to power concurrent CRUD applications without additional moving parts</li>\n<li>Model execution \u2013 Stored procedures and user-defined functions wrap models</li>\n<li>Reporting and data visualization \u2013 Use Tableau, Domo, MicroStrategy and other ODBC/JDBC tools turnkey</li>\n</ul>\n<p>One scale out RDBMS that can do this is Splice Machine. Splice Machine is a dual-engine RDBMS that is built on Hadoop and Spark.</p>\n<p>The Splice Machine RDBMS provides:</p>\n<ul class=\"three_ul\">\n<li>ANSI SQL \u2013 Splice Machine provides ANSI SQL-99 coverage, including full DDL and DML</li>\n<li>ACID Transactions \u2013 Splice Machine provides fully ACID transactions with Snapshot Isolation semantics, which scale both to very small operational queries and large analytics</li>\n<li>In-Place Updates \u2013\u00a0Updates in Splice Machine scale from a single row to millions of rows with a single transaction</li>\n<li>Secondary Indexing \u2013\u00a0Splice Machine supports true secondary indices on data, in both unique and non-unique forms</li>\n<li>Referential Integrity \u2013 Referential integrity, such as Primary and Foreign key constraints, can be enforced without requiring any behavior from the underlying application</li>\n<li>Joins \u2013\u00a0Splice Machine supports inner, outer, cross and natural joins using join algorithms such as broadcast, merge, merge sort, batch nested loop, and nested loop joins</li>\n<li>Resource Isolation The cost-based optimizer chooses a dataflow engine based on the estimation of the query plan \u2013 OLTP runs on HBase and OLAP runs on Spark</li>\n</ul>\n<p>In summary, by centralizing on a\u00a0 \u019b-R architecture, teams can build ML applications very quickly, maintain them with standard operational personnel, and be able to tightly integrate ML into the application without extensive use of \u201cEnterprise Duct Tape\u201d.</p>\n<p><strong>Related:</strong></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2015/05/interview-antonio-magnaghi-ticketmaster-analytics-lambda.html\" target=\"_blank\">Interview: Antonio Magnaghi, TicketMaster on Unifying Heterogeneous Analytics through Lambda Architecture</a></li>\n<li><a href=\"/2015/03/interview-bill-moreau-usoc-athletes-analytics.html\" target=\"_blank\">Bill Moreau, USOC on Empowering World\u2019s Best Athletes through Analytics</a></li>\n<li><a href=\"/2015/05/interview-hobson-lane-sharp-labs-data-science.html\" target=\"_blank\">Hobson Lane, SHARP Labs on How Analytics can Show You \u201cAll the Light You Cannot See\u201d</a></li>\n</ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p><script type=\"text/javascript\">// <![CDATA[\n var disqus_shortname = 'kdnuggets'; \n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n\n// ]]&gt;</script></p>\n</div> ", "website": "kdnuggets"}