{"content": "By Madison May, indico . I recently stumbled across an old Data Science Stack Exchange answer of mine on the topic of the \u201cBest Python library for neural networks\u201d , and it struck me how much the Python deep learning ecosystem has evolved over the course of the past 2.5 years. The library I recommended in July 2014, pylearn2 , is no longer actively developed or maintained, but a whole host of deep learning libraries have sprung up to take its place. Each has its own strengths and weaknesses. We\u2019ve used most of the technologies on this list in production or development at indico, but for the few that we haven\u2019t, I\u2019ll pull from the experiences of others to help give a clear, comprehensive picture of the Python deep learning ecosystem of 2017. In particular, we\u2019ll be looking at: Theano Lasagne Blocks TensorFlow Keras MXNet PyTorch Theano \u00a0 Description: Theano is a Python library that allows you to define, optimize, and evaluate mathematical expressions involving multi-dimensional arrays efficiently. It works with GPUs and performs efficient symbolic differentiation. Documentation: /software/theano/ Summary: Theano is the numerical computing workhorse that powers many of the other deep learning frameworks on our list. It was built by Fr\u00e9d\u00e9ric Bastien and the excellent research team behind the University of Montreal\u2019s lab, MILA. Its API is quite low level, and in order to write effective Theano you need to be quite familiar with the algorithms that are hidden away behind the scenes in other frameworks. Theano is a go-to library if you have substantial academic machine learning expertise, are looking for very fine grained control of your models, or want to implement a novel or unusual model. In general, Theano trades ease of use for flexibility. Pros: Flexible Performant if used properly Cons: Substantial learning curve Lower level API Compiling complex symbolic graphs can be slow Resources: Installation guide Official Theano tutorial Theano slideshow and practice exercises From linear regression to CNNs with Theano Introduction to Deep Learning with Python & Theano (MNIST video tutorial) Lasagne \u00a0 Description: Lightweight library for building and training neural networks in Theano. Documentation: / Summary: Since Theano aims first and foremost to be a library for symbolic mathematics, Lasagne offers abstractions on top of Theano that make it more suitable for deep learning. It\u2019s written and maintained primarily by Sander Dieleman, a current DeepMind research scientist. Instead of specifying network models in terms of function relationships between symbolic variables, Lasagne allows users to think at the Layer level, offering building blocks like \u201cConv2DLayer\u201d and \u201cDropoutLayer\u201d for users to work with. Lasagne requires little sacrifice in terms of flexibility while providing a wealth of common components to help with layer definition, layer initialization, model regularization, model monitoring, and model training. Pros: Still very flexible Higher layer of abstraction than Theano Docs and code contain an assortment of pasta puns Cons: Smaller community Resources: Official GitHub page Official installation guide Official Lasagne tutorial Example Lasagne code Blocks \u00a0 Description: A Theano framework for building and training neural networks. Documentation: /en/latest/ Summary: Similar to Lasagne, Blocks is a shot at adding a layer of abstraction on top of Theano to facilitate cleaner, simpler, more standardized definitions of deep learning models than writing raw Theano. It\u2019s written by the University of Montreal\u2019s lab, MILA \u2014 some of the same folks who contributed to the building of Theano and its first high level interface to neural network definitions, the deceased PyLearn2. It\u2019s a bit more flexible than Lasagne at the cost of having a slightly more difficult learning curve to use effectively. Among other things, Blocks has excellent support for recurrent neural network architectures, so it\u2019s worth a look if you\u2019re interested in exploring that genre of model. Alongside TensorFlow, Blocks is the library of choice for many of the APIs we\u2019ve deployed to production at indico. Pros: Still very flexible Higher layer of abstraction than Theano Very well tested Cons: Substantial learning curve Smaller community Resources: Official installation guide Arxiv paper on the design of the Blocks library A reddit discussion on the differences between Blocks and Lasagne Block\u2019s sister library for data pipelines, Fuel TensorFlow \u00a0 Description: An open source software library for numerical computation using data flow graphs. Documentation: /api_docs/python/ Summary: TensorFlow is a blend between lower level, symbolic computation libraries like Theano, and higher level, network specification libraries like Blocks and Lasagne. Although it\u2019s the newest member of the Python deep learning library collection, it likely has garnered the largest active community because it\u2019s backed by the Google Brain team. It offers support for running machine learning models across multiple GPUs, provides utilities for efficient data pipelining, and has built-in modules for the inspection, visualization, and serialization of models. More recently, the TensorFlow team decided to incorporate support for Keras, the next deep learning library on our list. The community seems to agree that although TensorFlow has its shortcomings , the sheer size of its community and the massive amount of momentum behind the project mean that learning TensorFlow is a safe bet. Consequently, TensorFlow is our deep learning library of choice today at indico. Pros: Backed by software giant Google Very large community Low level and high level interfaces to network training Faster model compilation than Theano-based options Clean multi-GPU support Cons: Initially slower at many benchmarks than Theano-based options, although Tensorflow is catching up. RNN support is still outclassed by Theano Resources: Official TensorFlow website Download and setup guide indico\u2019s take on TensorFlow A collection of TensorFlow tutorials A Udacity machine learning course taught using TensorFlow TensorFlow MNIST tutorial TensorFlow data input Keras \u00a0 Description: Deep learning library for Python. Convnets, recurrent neural networks, and more. Runs on Theano or TensorFlow. Documentation: / Summary: Keras is probably the highest level, most user friendly library of the bunch. It\u2019s written and maintained by Francis Chollet, another member of the Google Brain team. It allows users to choose whether the models they build are executed on Theano\u2019s or TensorFlow\u2019s symbolic graph. Keras\u2019 user interface is Torch-inspired, so if you have prior experience with machine learning in Lua, Keras is definitely worth a look. Thanks in part to excellent documentation and its relative ease of use, the Keras community is quite large and very active. Recently, the TensorFlow team announced plans to ship with Keras support built in, so soon Keras will be a subset of the TensorFlow project. Pros: Your choice of a Theano or TensorFlow backend Intuitive, high level interface Easier learning curve Cons: Less flexible, more prescriptive than other options Resources: Official installation guide Keras users Google group Repository of Keras examples Instructions for using Keras with Docker Repository of Keras tutorials by application area MXNet \u00a0 Description: MXNet is a deep learning framework designed for both efficiency and flexibility. Documentation: /api/python/index.html#python-api-reference Summary: MXNet is Amazon\u2019s library of choice for deep learning, and is perhaps the most performant library of the bunch. It has a data flow graph similar to Theano and TensorFlow, offers good support for multi-GPU configurations, has higher level model building blocks similar to that of Lasagne and Blocks, and can run on just about any hardware you can imagine (including mobile phones). Python support is just the tip of the iceberg \u2014 MXNet also offers interfaces to R, Julia, C++, Scala, Matlab, and Javascript. Choose MXNet if you\u2019re looking for performance that\u2019s second to none, but you must be willing to deal with a few of MXNet\u2019s quirks to get you there. Pros: Blazing fast benchmarks Extremely flexible Cons: Smallest community Steeper learning curve than Theano Resources: Official getting started guide indico\u2019s intro to MXNet Repository of MXNet examples Amazon\u2019s CTO\u2019s take on MXNet MXNet Arxiv paper PyTorch \u00a0 Description: Tensors and dynamic neural networks in Python with strong GPU acceleration. Documentation: /docs/ Summary: Released just over a week ago, PyTorch is the new kid on the block in our list of deep learning frameworks for Python. It\u2019s a loose port of Lua\u2019s Torch library to Python, and is notable because it\u2019s backed by the Facebook Artificial Intelligence Research team (FAIR), and because it\u2019s designed to handle dynamic computation graphs \u2014 a feature absent from the likes of Theano, TensorFlow, and derivatives. The jury is still out on what role PyTorch will play in the Python deep learning ecosystem, but all signs point to PyTorch being a very respectable alternative to the other frameworks on our list. Pros: Organizational backing from Facebook Clean support for dynamic graphs Blend of high level and low level APIs Cons: Much less mature than alternatives (in their own words \u2014 \u201cWe are in an early-release Beta. Expect some adventures.\u201d) Limited references / resources outside of the official documentation Resources: Official PyTorch homepage PyTorch twitter feed Repository of PyTorch examples Repository of PyTorch tutorials Bio: Madison May is a developer, designer, and engineer, and is the CTO of indico Data Solutions . Original . Reposted with permission. Related: Deep Learning, Artificial Intuition and the Quest for AGI Why Deep Learning is Radically Different From Machine Learning Is Deep Learning the Silver Bullet?", "title_html": "<h1 id=\"title\"><img align=\"right\" alt=\"Silver Blog, 2017\" src=\"/images/tkb-17xx-s.png\" width=\"120\"/>An Overview of Python Deep Learning Frameworks</h1> ", "url": "https://www.kdnuggets.com/2017/02/python-deep-learning-frameworks-overview.html", "tfidf": {"tfidf": {"googl": 45.555236728800004, "apipythonindexhtml": 1587.6, "slight": 3.25327868852, "play": 1.46390041494, "fr\u00e9d\u00e9ric": 1587.6, "goto": 288.654545455, "new": 1.0178880554, "scala": 114.215827338, "pun": 51.5454545455, "topic": 5.457545548300001, "thank": 6.00681044268, "blend": 24.3870967742, "specif": 1.8719490626099997, "function": 2.495441685, "pictur": 3.4953764861300005, "ship": 3.14812611541, "univers": 2.49779735682, "python": 675.5744680848, "sheer": 27.6585365854, "well": 1.0655748708, "product": 3.24529844644, "whether": 2.20683903253, "catch": 8.25585023401, "higher": 8.4875701684, "collect": 3.28219971056, "wealth": 6.727118644069999, "between": 3.1036100612399995, "momentum": 16.835630965, "dropoutlay": 1587.6, "torchinspir": 1587.6, "enlatest": 1587.6, "multipl": 2.74813917258, "how": 1.60250328051, "test": 2.65707112971, "instruct": 4.169117647059999, "repost": 933.882352941, "bunch": 81.0, "newest": 22.777618364400002, "maintain": 5.31918695556, "good": 1.51981619759, "initi": 2.7, "soon": 1.9817750592900003, "word": 1.7965372864099998, "interest": 1.60331246213, "deep": 65.30347349172, "will": 3.67443295788, "haven": 12.690647482000001, "open": 1.24556723678, "stack": 19.6485148515, "run": 4.6707855251399995, "second": 1.1130898128, "incorpor": 2.62847682119, "intro": 66.7058823529, "clear": 1.85423966363, "perform": 6.125590817000001, "but": 4.06529671596, "definit": 12.96, "need": 1.4372623574099999, "comprehens": 5.3544688027, "franci": 5.096629213480001, "cost": 2.31935719503, "expect": 2.20011086475, "point": 1.25990000794, "quest": 12.6805111821, "applic": 3.42672134686, "hidden": 7.81299212598, "lab": 28.8654545454, "level": 21.507711546489997, "has": 8.3491980016, "have": 4.059579364559999, "tensorflow": 34927.2, "outclass": 211.68, "use": 8.237110059039999, "experi": 3.74125132556, "optim": 11.5377906977, "resourc": 23.589895988080002, "reddit": 529.2, "out": 1.06016694491, "blaze": 39.789473684200004, "model": 27.177771925200002, "quit": 8.65491550065, "specifi": 6.920662598080001, "slow": 4.04793472718, "much": 2.3884459154599997, "cours": 4.30185611706, "numer": 3.66651270208, "docker": 337.787234043, "julia": 20.9722589168, "javascript": 174.46153846200002, "start": 1.26673581744, "juri": 13.077429983499998, "udac": 1587.6, "involv": 1.4498630137000001, "compon": 4.09491875161, "respect": 1.6443293630200002, "whole": 2.29488291414, "prescript": 30.7079303675, "altern": 4.278092158440001, "aim": 2.8960233491400005, "garner": 12.5900079302, "deepmind": 1587.6, "theano": 44452.799999999996, "slower": 17.1632432432, "handl": 3.9229058561900003, "than": 9.295081967249999, "they": 1.03017325287, "design": 5.833011849, "genr": 8.34700315457, "recurr": 71.1928251122, "descript": 28.03531786076, "allow": 3.8148177813300004, "homepag": 42.336000000000006, "taught": 5.57052631579, "pytorch": 14288.4, "github": 1587.6, "sprung": 65.0655737705, "away": 1.85142857143, "featur": 1.52712581762, "tensor": 152.653846154, "feed": 7.77853993141, "practic": 1.70434782609, "phone": 9.118897185529999, "abstract": 39.864406779679996, "provid": 2.43105428374, "plan": 1.5356935577500002, "array": 10.1444089457, "offer": 7.6948429624, "softwar": 20.5248868778, "kid": 9.39964476021, "develop": 3.5867158671600006, "compil": 11.392895586660002, "foremost": 19.1970979444, "explor": 3.39593582888, "network": 25.9369384088, "deriv": 2.78379800105, "fast": 4.8729281768, "some": 2.08073394496, "sourc": 1.69760479042, "control": 1.46959178006, "both": 1.05215720061, "may": 2.10403551786, "document": 22.8687580026, "subset": 27.3253012048, "twitter": 33.213389121300004, "repositori": 224.8725212465, "struck": 6.34786085566, "matur": 9.31690140845, "ani": 1.13383802314, "modul": 16.9434364995, "ecosystem": 78.33552631590001, "still": 4.746543089919999, "answer": 4.64890190337, "limit": 1.5186531471200002, "work": 2.23040179826, "matlab": 417.78947368400003, "num": 3.00094512003, "technolog": 2.6034765496900003, "bet": 29.1838235294, "curv": 55.54933519949999, "safe": 5.02723242559, "for": 26.00819104026, "difficult": 2.48957189901, "builtin": 1587.6, "friend": 2.20194174757, "releas": 1.8377126982299998, "with": 12.014378507879997, "written": 5.8720256442, "think": 2.90715986083, "are": 4.11962374312, "solut": 4.7278141751, "cleaner": 45.7521613833, "sacrific": 11.7079646018, "pasta": 127.008, "current": 1.5325803649, "team": 13.64894684052, "look": 9.543159413299998, "option": 12.146901300689999, "video": 3.29719626168, "backend": 933.882352941, "summari": 54.610319410289996, "veri": 8.81160799239, "variabl": 8.747107438019999, "ago": 6.05954198473, "familiar": 6.86381322957, "artifici": 16.63279203772, "group": 1.20996875238, "dieleman": 1587.6, "weak": 4.70539419087, "old": 1.52844902282, "littl": 1.5499365420299998, "give": 1.3653250774, "simpler": 17.9187358916, "proper": 3.3388012618299996, "their": 1.01547908405, "place": 1.1004366812200002, "torch": 30.1825095057, "beta": 25.0410094637, "indico": 11113.199999999999, "extrem": 2.36602086438, "juli": 1.43466473884, "anoth": 1.13643521832, "thing": 2.4065484311099996, "contribut": 1.9255306246200001, "probabl": 2.64555907349, "scientist": 4.69426374926, "machin": 20.121673003799998, "paper": 5.325729620940001, "instal": 15.14885496184, "strength": 4.02739726027, "steeper": 157.188118812, "requir": 1.52844902282, "smallest": 13.2964824121, "effect": 2.7926121372000003, "what": 1.25343439128, "highest": 2.50212765957, "choos": 8.35798894446, "fine": 4.02229541424, "relationship": 2.39132399458, "particular": 1.3814827706200001, "flexibl": 87.17754728493, "help": 2.79925945518, "larg": 2.3714989917, "scienc": 2.31969608416, "instead": 1.59461631177, "brain": 17.858267716540002, "pros": 992.25, "own": 2.35688836104, "unusu": 4.68180477735, "relat": 2.47501753838, "deal": 2.18346857379, "alongsid": 4.0728578758300005, "who": 1.06279287723, "decid": 1.9257641921400002, "theanobas": 3175.2, "assort": 32.2682926829, "permiss": 6.280063291139999, "lower": 4.20111140514, "week": 1.80532181033, "apidocspython": 1587.6, "express": 1.9120799710900003, "clean": 13.73950670706, "layer": 48.849230769239995, "evalu": 6.9509632224199995, "contain": 1.59814777532, "about": 1.06486015159, "deploy": 7.41869158879, "notabl": 1.82840032247, "communiti": 15.68968499072, "scene": 3.45055422734, "neural": 416.2247191011, "silver": 4.89697717458, "softwaretheano": 1587.6, "just": 4.00740429111, "adventur": 6.65102639296, "standard": 1.8915763135900003, "pylearnnum": 3175.2, "madison": 31.40652819, "exercis": 4.73627684964, "mobil": 4.89697717458, "defin": 2.72830383227, "multidimension": 160.363636364, "announc": 2.02940048575, "recommend": 3.9142011834300003, "dynam": 19.57583230581, "across": 3.4637285916800002, "train": 7.7462795803999995, "complex": 2.34021226415, "massiv": 4.22571200426, "few": 2.63458347162, "among": 1.25670862028, "intuit": 55.4136125654, "lua": 774.43902439, "guid": 14.946806841359999, "whi": 3.2566153846200003, "bastien": 1323.0, "giant": 6.23566378633, "order": 1.24625166811, "montreal": 29.814084506999997, "other": 6.05954198472, "support": 11.417019576480001, "benchmark": 103.7647058824, "mani": 3.13280273631, "pull": 5.18654034629, "introduct": 2.7808723068799996, "over": 2.05050048434, "perhap": 3.14812611541, "build": 9.805043746800001, "monitor": 6.05723006486, "mine": 4.875921375919999, "linear": 13.8776223776, "execut": 2.2363713199, "shot": 3.85339805825, "framework": 49.20247933883999, "same": 1.11857958148, "largest": 2.0511627907, "grain": 12.0272727273, "there": 1.04091266719, "regular": 2.09418282548, "interfac": 104.58498023700001, "substanti": 10.433296823670002, "con": 159.2148997138, "hardwar": 18.8104265403, "best": 1.5828514456600002, "exampl": 6.01933649288, "trade": 2.37522441652, "radic": 5.2937645882, "loos": 7.065420560750001, "inspect": 11.7512953368, "setup": 34.1419354839, "take": 3.4188500466600003, "visual": 5.22752716497, "data": 23.63504891538, "configur": 11.504347826099998, "code": 7.761427523839999, "tip": 9.42195845697, "high": 4.5910931174, "regress": 51.2129032258, "power": 1.3396337861799998, "convnumdlay": 1587.6, "also": 1.01476510067, "member": 2.64137758922, "mean": 1.44906900329, "symbol": 20.507212056, "acceler": 8.15408320493, "iceberg": 163.670103093, "becaus": 3.4485554992499994, "role": 1.55327267391, "pythonapirefer": 1587.6, "research": 5.8260550458600004, "quirk": 128.032258065, "the": 60.0, "area": 1.3881262568900001, "doc": 69.6315789474, "past": 2.01702452039, "facilit": 6.453658536590001, "evolv": 4.60173913043, "chollet": 1587.6, "multigpu": 3175.2, "primarili": 2.43459592087, "workhors": 278.526315789, "want": 1.99698113208, "util": 4.65981802172, "agre": 2.22946215419, "sinc": 1.08368600683, "bullet": 16.2997946612, "although": 3.44905496415, "organiz": 23.4159292035, "shortcom": 44.974504249300004, "slideshow": 105.84, "intellig": 4.19334389857, "prior": 2.17807655371, "activ": 4.39210623387, "mxnet": 17463.6, "raw": 10.6478873239, "refer": 1.30024570025, "graph": 226.2612826602, "seem": 2.29123971713, "suitabl": 6.23811394892, "algorithm": 27.9507042254, "mathemat": 14.782122905020001, "facebook": 57.107913669, "get": 3.5712518277, "easier": 7.84, "like": 5.745928338750001, "implement": 3.57648118946, "outsid": 1.67450690855, "imagin": 6.598503740650001, "lasagn": 19051.199999999997, "part": 1.04330682789, "fuel": 5.59014084507, "includ": 1.0190641247799999, "sign": 1.7606742819099999, "next": 1.4950560316400001, "term": 2.79040337464, "kera": 10862.526315784, "differenti": 7.759530791789999, "stumbl": 43.3770491803, "this": 1.00379362671, "choic": 12.527914776080001, "sister": 3.75852272727, "api": 168.89361702120001, "engin": 2.47135740971, "back": 5.04280155644, "bit": 8.33385826772, "similar": 4.12542226071, "smaller": 5.18738768176, "project": 3.5069582505000003, "differ": 2.4730898045, "most": 3.06289389069, "earlyreleas": 1587.6, "low": 6.3921621258900005, "tutori": 416.2247191011, "excel": 14.53402502289, "all": 1.01146788991, "top": 3.6775538568400004, "today": 1.74961428257, "our": 11.78794178795, "expertis": 20.0201765448, "strong": 1.6439888163999998, "recent": 4.63217272905, "less": 2.93809567872, "longer": 2.02319357716, "that": 10.0398406375, "exchang": 3.05837025621, "architectur": 5.12790697674, "built": 3.98894472362, "academ": 3.8921304241199994, "more": 7.1201947719, "and": 41.00258267733, "list": 6.81607418855, "novel": 4.06555697823, "discuss": 2.19676214197, "deceas": 18.269275028800003, "folk": 7.6658619024600005, "amount": 2.27027027027, "general": 1.1218202374200001, "websit": 2.52160101652, "faster": 7.61438848921, "librari": 56.33592429885, "none": 4.06555697823, "download": 14.6457564576, "consequ": 2.98533283189, "can": 3.52878417426, "flow": 8.82, "comput": 15.711034141520003, "make": 1.0762660158600001, "each": 1.18974820144, "size": 2.49387370405, "eas": 18.0923076923, "serial": 11.3643521832, "amazon": 66.2881002088, "common": 1.4025974025999999, "block": 41.63566673396, "sander": 29.0237659963, "lightweight": 32.4, "cnns": 1587.6, "port": 3.9443478260900005, "behind": 6.253676470589999, "absent": 11.7079646018, "bio": 42.336000000000006, "must": 1.9220338983099996, "origin": 1.13724928367, "convnet": 1587.6, "worth": 10.420741713160002, "gpus": 2116.8, "from": 5.00283607485, "first": 2.01523229246, "input": 12.2029208301, "arxiv": 882.0, "page": 2.03669018602, "while": 1.0441988950299999, "offici": 14.0483143085, "year": 1.0485436893200002, "host": 2.7092150170599996, "write": 4.1150855365400005, "user": 46.2632345799, "learn": 67.35976591085, "pipelin": 64.2753036438, "effici": 20.37343599616}, "logtfidf": {"googl": 9.73052489032, "apipythonindexhtml": 7.369978720910001, "slight": 1.17966331506, "play": 0.38110439064199997, "fr\u00e9d\u00e9ric": 7.369978720910001, "goto": 5.66523062867, "new": 0.0177299468511, "scala": 4.73808988077, "pun": 3.9424640309300005, "topic": 1.6969991554100001, "thank": 1.7928938993, "blend": 5.00181398226, "specif": 0.626980167541, "function": 0.914465741594, "pictur": 1.25144109124, "ship": 1.14680739183, "univers": 0.444524211372, "python": 48.36788091552, "sheer": 3.3199344175800003, "well": 0.0635144383156, "product": 0.968120273072, "whether": 0.791561189647, "catch": 2.11092206831, "higher": 3.00923359598, "collect": 0.99073332104, "wealth": 1.90614691588, "between": 0.10186104349589999, "momentum": 2.82349753127, "dropoutlay": 7.369978720910001, "torchinspir": 7.369978720910001, "enlatest": 7.369978720910001, "multipl": 1.01092401812, "how": 0.47156695693000006, "test": 0.977224437103, "instruct": 1.42770441799, "repost": 6.83935046985, "bunch": 7.40260394822, "newest": 3.12577840314, "maintain": 1.718124525306, "good": 0.418589404907, "initi": 0.6002091849, "soon": 0.6839929376880001, "word": 0.585861082385, "interest": 0.47207177798199995, "deep": 23.196122456399998, "will": 0.6083596047450001, "haven": 2.54086530344, "open": 0.219591038029, "stack": 2.97800175538, "run": 1.328144926617, "second": 0.10713976337999999, "incorpor": 0.9664045229739999, "intro": 4.20029314023, "clear": 0.617474727198, "perform": 1.70472340232, "but": 0.0647694882876, "definit": 4.7022933192, "need": 0.362740163442, "comprehens": 1.6779315024700001, "franci": 1.6285793826800001, "cost": 0.84129007618, "expect": 0.78850775216, "point": 0.23103235903299998, "quest": 2.54006626224, "applic": 1.23160392849, "hidden": 2.0557880052, "lab": 5.33899671024, "level": 6.545008469259, "has": 0.3417915588384, "have": 0.0591400093648, "tensorflow": 162.13953186002, "outclass": 5.35507570037, "use": 0.2336641578528, "experi": 1.252545907866, "optim": 2.4456277954099996, "resourc": 8.65101554064, "reddit": 6.27136643224, "out": 0.0584263909193, "blaze": 3.6836023970099996, "model": 9.586850950443, "quit": 3.17854541052, "specifi": 1.93451151621, "slow": 1.39820680715, "much": 0.35499145860200004, "cours": 1.531798808266, "numer": 1.212187624692, "docker": 5.822416212189999, "julia": 3.04320056047, "javascript": 5.16170430739, "start": 0.236443369291, "juri": 2.57088784228, "udac": 7.369978720910001, "involv": 0.371469078658, "compon": 1.40974687623, "respect": 0.49733261904, "whole": 0.8306818244059999, "prescript": 3.4245209393900002, "altern": 1.520719944564, "aim": 1.06333853704, "garner": 2.53290347794, "deepmind": 7.369978720910001, "theano": 206.35940418548003, "slower": 2.84277007639, "handl": 1.36683266903, "than": 0.2903477599638, "they": 0.0297269947676, "design": 1.508956472088, "genr": 2.1219025708, "recurr": 7.1444897237600005, "descript": 9.71288442915, "allow": 0.720841833567, "homepag": 3.7456377879300002, "taught": 1.7174895406400001, "pytorch": 66.32980848819001, "github": 7.369978720910001, "sprung": 4.17539558861, "away": 0.615957541869, "featur": 0.423387418142, "tensor": 5.02817291476, "feed": 2.05136865109, "practic": 0.533182530867, "phone": 2.2103488741299997, "abstract": 9.19675801596, "provid": 0.39035568865000003, "plan": 0.428982108147, "array": 2.31692271093, "offer": 2.15556223451, "softwar": 4.65698192666, "kid": 2.2406718971, "develop": 0.535874084739, "compil": 3.4796855728400002, "foremost": 2.95475911888, "explor": 1.22257937218, "network": 9.53083053052, "deriv": 1.02381618275, "fast": 1.5836950247400001, "some": 0.079147018129, "sourc": 0.529218310751, "control": 0.38498466158600003, "both": 0.050842533389300004, "may": 0.10141999056880001, "document": 8.392924101446999, "subset": 3.3078130570499997, "twitter": 3.50295308141, "repositori": 19.030478784849997, "struck": 1.84811788303, "matur": 2.23183010651, "ani": 0.125608358366, "modul": 2.82988053166, "ecosystem": 9.78716679582, "still": 0.6844888857160001, "answer": 1.5366310419, "limit": 0.41782385463, "work": 0.218069134546, "matlab": 6.0349776541799995, "num": 0.0009449711861910001, "technolog": 0.956847686355, "bet": 3.3736145670499997, "curv": 12.03916817985, "safe": 1.61486961909, "for": 0.008189750280322, "difficult": 0.912110767588, "builtin": 7.369978720910001, "friend": 0.7893395836239999, "releas": 0.608521699544, "with": 0.01436990056068, "written": 2.0147621094990003, "think": 1.06717661175, "are": 0.1178698943308, "solut": 1.55346297627, "cleaner": 3.8232390339599998, "sacrific": 2.4602693454, "pasta": 4.8442500766, "current": 0.42695282784500005, "team": 4.931417369316, "look": 3.2319334680000003, "option": 4.19538543483, "video": 1.19307248967, "backend": 6.83935046985, "summari": 14.380189012209998, "veri": 1.6111185526660001, "variabl": 2.1687230672, "ago": 1.80163421715, "familiar": 1.92626315167, "artifici": 4.23645798036, "group": 0.190594534797, "dieleman": 7.369978720910001, "weak": 1.5487095508000002, "old": 0.424253510675, "littl": 0.438213989466, "give": 0.311392552224, "simpler": 2.8858468633, "proper": 1.2056118389200001, "their": 0.015360505122700001, "place": 0.0957070839572, "torch": 3.40726260117, "beta": 3.22051485947, "indico": 51.58985104637001, "extrem": 0.8612095839370001, "juli": 0.360931190445, "anoth": 0.127896361652, "thing": 0.8781935346799999, "contribut": 0.655201578909, "probabl": 0.972882412913, "scientist": 1.54634128444, "machin": 6.9617979031, "paper": 1.95880507933, "instal": 5.3265223516, "strength": 1.3931203261899998, "steeper": 5.05744329706, "requir": 0.424253510675, "smallest": 2.58749951995, "effect": 0.667660454316, "what": 0.225887296827, "highest": 0.917141433754, "choos": 2.86014132144, "fine": 1.39185273824, "relationship": 0.871847185184, "particular": 0.323157393804, "flexibl": 20.436500116439998, "help": 0.672415442688, "larg": 0.34075012121200005, "scienc": 0.841436178891, "instead": 0.46663315041500003, "brain": 4.37863879566, "pros": 34.678454598269994, "own": 0.328390154842, "unusu": 1.54368367178, "relat": 0.42620060330799997, "deal": 0.780914701253, "alongsid": 1.40434493384, "who": 0.0609002329859, "decid": 0.655322871893, "theanobas": 14.739957441820001, "assort": 3.47408509741, "permiss": 1.8373800586400002, "lower": 1.484403859988, "week": 0.5907388641619999, "apidocspython": 7.369978720910001, "express": 0.648191639641, "clean": 3.8542564072600003, "layer": 12.581874974100002, "evalu": 1.9388802431299998, "contain": 0.468845318236, "about": 0.0628434774746, "deploy": 2.00400270589, "notabl": 0.603441443842, "communiti": 5.388495582328, "scene": 1.23853486375, "neural": 28.597206088500002, "silver": 1.5886181116100002, "softwaretheano": 7.369978720910001, "just": 0.868594302327, "adventur": 1.8947711875599997, "standard": 0.63741050982, "pylearnnum": 14.739957441820001, "madison": 5.507737189759999, "exercis": 1.5552513523, "mobil": 1.5886181116100002, "defin": 1.00368010925, "multidimension": 5.0774439637699995, "announc": 0.707740422218, "recommend": 1.36461126863, "dynam": 5.62705041336, "across": 1.098396911882, "train": 2.643673251356, "complex": 0.8502416364309999, "massiv": 1.44118776833, "few": 0.551155827306, "among": 0.228496097073, "intuit": 6.643356194380001, "lua": 11.917983494400001, "guid": 5.476429311534, "whi": 1.18068843047, "bastien": 7.18765716411, "giant": 1.83028503479, "order": 0.22014038079300002, "montreal": 5.4036674715199995, "other": 0.05924848751856, "support": 2.140925490333, "benchmark": 7.897957423899999, "mani": 0.1299472743663, "pull": 1.6460668749599998, "introduct": 1.02276465794, "over": 0.0498734429914, "perhap": 1.14680739183, "build": 2.9468247125460003, "monitor": 1.80125261058, "mine": 1.58430908678, "linear": 2.63027764196, "execut": 0.804854605864, "shot": 1.3489553715600002, "framework": 12.62510727642, "same": 0.112059649604, "largest": 0.7184068473190001, "grain": 2.48717679832, "there": 0.0400978929255, "regular": 0.739163417847, "interfac": 15.202810182549998, "substanti": 3.7391700626100004, "con": 21.87041297798, "hardwar": 2.93441131931, "best": 0.459227932947, "exampl": 1.6347306999959998, "trade": 0.865091924188, "radic": 1.6665296351499999, "loos": 1.9552125417200001, "inspect": 2.46396347594, "setup": 3.5305264083199996, "take": 0.392075886591, "visual": 1.6539383488600001, "data": 8.5177440936, "configur": 2.4427250357499997, "code": 2.71203819194, "tip": 2.2430429711200004, "high": 0.5512951461600001, "regress": 3.9359915164199997, "power": 0.292396282715, "convnumdlay": 7.369978720910001, "also": 0.0146571578, "member": 0.556306829198, "mean": 0.37092128352, "symbol": 7.37410297596, "acceler": 2.0985188085299997, "iceberg": 5.0978528354, "becaus": 0.418029476475, "role": 0.44036410757399996, "pythonapirefer": 7.369978720910001, "research": 1.991183454414, "quirk": 4.8522822483, "the": 0.0, "area": 0.327954821122, "doc": 7.10014200878, "past": 0.7016234157610001, "facilit": 1.86464718498, "evolv": 1.52643430388, "chollet": 7.369978720910001, "multigpu": 14.739957441820001, "primarili": 0.8897807965100001, "workhors": 5.62951254607, "want": 0.6916366062549999, "util": 1.5389763962399998, "agre": 0.801760369921, "sinc": 0.0803681994577, "bullet": 2.7911525102599994, "although": 0.418463944254, "organiz": 3.1534165259599996, "shortcom": 3.8060957569699996, "slideshow": 4.66192851981, "intellig": 1.43349848213, "prior": 0.778442172521, "activ": 1.143589809852, "mxnet": 81.06976593001, "raw": 2.36536149914, "refer": 0.262553246798, "graph": 21.77958588132, "seem": 0.829093032276, "suitabl": 1.83067788492, "algorithm": 3.33044239518, "mathemat": 4.00054271654, "facebook": 6.703591039299999, "get": 1.159538011564, "easier": 2.05923883436, "like": 0.6952678827250001, "implement": 1.27437940907, "outsid": 0.515518738985, "imagin": 1.88684291737, "lasagn": 88.43974465092, "part": 0.04239531098280001, "fuel": 1.72100448275, "includ": 0.0188846813905, "sign": 0.565696850403, "next": 0.402163685499, "term": 0.6660779670920001, "kera": 87.46562285162, "differenti": 2.0489218673900003, "stumbl": 3.7699304805000002, "this": 0.0037864490525, "choic": 4.56665990172, "sister": 1.32402598852, "api": 8.87224370214, "engin": 0.904767558276, "back": 0.9266697235879999, "bit": 2.12032652634, "similar": 0.9556682763419999, "smaller": 1.9061661061039998, "project": 1.123203771814, "differ": 0.424642242624, "most": 0.06224368888679999, "earlyreleas": 7.369978720910001, "low": 2.2693808500470003, "tutori": 28.597206088500002, "excel": 4.7336404956, "all": 0.011402632097799998, "top": 1.218201275576, "today": 0.559395353679, "our": 4.288196070910001, "expertis": 2.99674059227, "strong": 0.49712549393600003, "recent": 1.3032412238639999, "less": 0.7692289252, "longer": 0.7046772417749999, "that": 0.039761483796399995, "exchang": 1.11788217808, "architectur": 1.63469757919, "built": 1.38075907013, "academ": 1.35895667459, "more": 0.11917452119999998, "and": 0.0025825958246076, "list": 1.54922880753, "novel": 1.40255075163, "discuss": 0.78698452262, "deceas": 2.90522068864, "folk": 2.03677695251, "amount": 0.819898886199, "general": 0.114952578063, "websit": 0.924894023806, "faster": 2.03003967967, "librari": 20.723009599803, "none": 1.40255075163, "download": 2.6841506319, "consequ": 1.0937112421, "can": 0.487023289182, "flow": 2.9677493789200002, "comput": 5.47227566376, "make": 0.07349765782289999, "each": 0.173741689304, "size": 0.9138372060609999, "eas": 4.404679356, "serial": 2.43048145465, "amazon": 7.00172643298, "common": 0.338325805271, "block": 15.132101606440001, "sander": 3.36811501148, "lightweight": 3.4781584227999995, "cnns": 7.369978720910001, "port": 1.37228362405, "behind": 2.2036717122960003, "absent": 2.4602693454, "bio": 3.7456377879300002, "must": 0.653383947388, "origin": 0.128612437587, "convnet": 7.369978720910001, "worth": 3.30130206984, "gpus": 13.929027225599999, "from": 0.00283527084433, "first": 0.015174579624319999, "input": 2.50167533539, "arxiv": 12.1780897509, "page": 0.711326032411, "while": 0.04324998379380001, "offici": 3.3991731754299996, "year": 0.047402238894600005, "host": 0.996658931332, "write": 1.443024879754, "user": 12.255528641279998, "learn": 24.439809877605, "pipelin": 6.94005659344, "effici": 6.51175013656}, "logidf": {"googl": 2.43263122258, "apipythonindexhtml": 7.369978720910001, "slight": 1.17966331506, "play": 0.38110439064199997, "fr\u00e9d\u00e9ric": 7.369978720910001, "goto": 5.66523062867, "new": 0.0177299468511, "scala": 4.73808988077, "pun": 3.9424640309300005, "topic": 1.6969991554100001, "thank": 1.7928938993, "blend": 2.50090699113, "specif": 0.626980167541, "function": 0.914465741594, "pictur": 1.25144109124, "ship": 1.14680739183, "univers": 0.222262105686, "python": 4.03065674296, "sheer": 3.3199344175800003, "well": 0.0635144383156, "product": 0.484060136536, "whether": 0.791561189647, "catch": 2.11092206831, "higher": 0.752308398995, "collect": 0.49536666052, "wealth": 1.90614691588, "between": 0.033953681165299995, "momentum": 2.82349753127, "dropoutlay": 7.369978720910001, "torchinspir": 7.369978720910001, "enlatest": 7.369978720910001, "multipl": 1.01092401812, "how": 0.47156695693000006, "test": 0.977224437103, "instruct": 1.42770441799, "repost": 6.83935046985, "bunch": 3.70130197411, "newest": 3.12577840314, "maintain": 0.572708175102, "good": 0.418589404907, "initi": 0.30010459245, "soon": 0.6839929376880001, "word": 0.585861082385, "interest": 0.47207177798199995, "deep": 1.2886734698, "will": 0.202786534915, "haven": 2.54086530344, "open": 0.219591038029, "stack": 2.97800175538, "run": 0.442714975539, "second": 0.10713976337999999, "incorpor": 0.9664045229739999, "intro": 4.20029314023, "clear": 0.617474727198, "perform": 0.42618085058, "but": 0.0161923720719, "definit": 1.1755733298, "need": 0.362740163442, "comprehens": 1.6779315024700001, "franci": 1.6285793826800001, "cost": 0.84129007618, "expect": 0.78850775216, "point": 0.23103235903299998, "quest": 2.54006626224, "applic": 1.23160392849, "hidden": 2.0557880052, "lab": 2.66949835512, "level": 0.503462189943, "has": 0.0427239448548, "have": 0.0147850023412, "tensorflow": 7.369978720910001, "outclass": 5.35507570037, "use": 0.0292080197316, "experi": 0.626272953933, "optim": 2.4456277954099996, "resourc": 1.08137694258, "reddit": 6.27136643224, "out": 0.0584263909193, "blaze": 3.6836023970099996, "model": 0.7374500731110001, "quit": 1.05951513684, "specifi": 1.93451151621, "slow": 1.39820680715, "much": 0.17749572930100002, "cours": 0.765899404133, "numer": 0.606093812346, "docker": 5.822416212189999, "julia": 3.04320056047, "javascript": 5.16170430739, "start": 0.236443369291, "juri": 2.57088784228, "udac": 7.369978720910001, "involv": 0.371469078658, "compon": 1.40974687623, "respect": 0.49733261904, "whole": 0.8306818244059999, "prescript": 3.4245209393900002, "altern": 0.760359972282, "aim": 1.06333853704, "garner": 2.53290347794, "deepmind": 7.369978720910001, "theano": 7.369978720910001, "slower": 2.84277007639, "handl": 1.36683266903, "than": 0.0322608622182, "they": 0.0297269947676, "design": 0.377239118022, "genr": 2.1219025708, "recurr": 3.5722448618800002, "descript": 1.38755491845, "allow": 0.24028061118900002, "homepag": 3.7456377879300002, "taught": 1.7174895406400001, "pytorch": 7.369978720910001, "github": 7.369978720910001, "sprung": 4.17539558861, "away": 0.615957541869, "featur": 0.423387418142, "tensor": 5.02817291476, "feed": 2.05136865109, "practic": 0.533182530867, "phone": 2.2103488741299997, "abstract": 2.29918950399, "provid": 0.19517784432500002, "plan": 0.428982108147, "array": 2.31692271093, "offer": 0.431112446902, "softwar": 2.32849096333, "kid": 2.2406718971, "develop": 0.178624694913, "compil": 1.7398427864200001, "foremost": 2.95475911888, "explor": 1.22257937218, "network": 0.9530830530519999, "deriv": 1.02381618275, "fast": 1.5836950247400001, "some": 0.0395735090645, "sourc": 0.529218310751, "control": 0.38498466158600003, "both": 0.050842533389300004, "may": 0.050709995284400004, "document": 0.932547122383, "subset": 3.3078130570499997, "twitter": 3.50295308141, "repositori": 3.8060957569699996, "struck": 1.84811788303, "matur": 2.23183010651, "ani": 0.125608358366, "modul": 2.82988053166, "ecosystem": 3.26238893194, "still": 0.17112222142900002, "answer": 1.5366310419, "limit": 0.41782385463, "work": 0.109034567273, "matlab": 6.0349776541799995, "num": 0.00031499039539700004, "technolog": 0.956847686355, "bet": 3.3736145670499997, "curv": 2.40783363597, "safe": 1.61486961909, "for": 0.00031499039539700004, "difficult": 0.912110767588, "builtin": 7.369978720910001, "friend": 0.7893395836239999, "releas": 0.608521699544, "with": 0.00119749171339, "written": 0.671587369833, "think": 1.06717661175, "are": 0.0294674735827, "solut": 1.55346297627, "cleaner": 3.8232390339599998, "sacrific": 2.4602693454, "pasta": 4.8442500766, "current": 0.42695282784500005, "team": 0.821902894886, "look": 0.6463866936, "option": 1.39846181161, "video": 1.19307248967, "backend": 6.83935046985, "summari": 2.0543127160299997, "veri": 0.230159793238, "variabl": 2.1687230672, "ago": 1.80163421715, "familiar": 1.92626315167, "artifici": 2.11822899018, "group": 0.190594534797, "dieleman": 7.369978720910001, "weak": 1.5487095508000002, "old": 0.424253510675, "littl": 0.438213989466, "give": 0.311392552224, "simpler": 2.8858468633, "proper": 1.2056118389200001, "their": 0.015360505122700001, "place": 0.0957070839572, "torch": 3.40726260117, "beta": 3.22051485947, "indico": 7.369978720910001, "extrem": 0.8612095839370001, "juli": 0.360931190445, "anoth": 0.127896361652, "thing": 0.8781935346799999, "contribut": 0.655201578909, "probabl": 0.972882412913, "scientist": 1.54634128444, "machin": 1.39235958062, "paper": 0.979402539665, "instal": 1.3316305879, "strength": 1.3931203261899998, "steeper": 5.05744329706, "requir": 0.424253510675, "smallest": 2.58749951995, "effect": 0.333830227158, "what": 0.225887296827, "highest": 0.917141433754, "choos": 1.43007066072, "fine": 1.39185273824, "relationship": 0.871847185184, "particular": 0.323157393804, "flexibl": 2.2707222351599996, "help": 0.336207721344, "larg": 0.17037506060600002, "scienc": 0.841436178891, "instead": 0.46663315041500003, "brain": 2.18931939783, "pros": 4.95406494261, "own": 0.164195077421, "unusu": 1.54368367178, "relat": 0.21310030165399999, "deal": 0.780914701253, "alongsid": 1.40434493384, "who": 0.0609002329859, "decid": 0.655322871893, "theanobas": 7.369978720910001, "assort": 3.47408509741, "permiss": 1.8373800586400002, "lower": 0.742201929994, "week": 0.5907388641619999, "apidocspython": 7.369978720910001, "express": 0.648191639641, "clean": 1.9271282036300001, "layer": 2.0969791623500003, "evalu": 1.9388802431299998, "contain": 0.468845318236, "about": 0.0628434774746, "deploy": 2.00400270589, "notabl": 0.603441443842, "communiti": 0.673561947791, "scene": 1.23853486375, "neural": 4.0853151555, "silver": 1.5886181116100002, "softwaretheano": 7.369978720910001, "just": 0.289531434109, "adventur": 1.8947711875599997, "standard": 0.63741050982, "pylearnnum": 7.369978720910001, "madison": 2.7538685948799997, "exercis": 1.5552513523, "mobil": 1.5886181116100002, "defin": 1.00368010925, "multidimension": 5.0774439637699995, "announc": 0.707740422218, "recommend": 1.36461126863, "dynam": 1.8756834711200001, "across": 0.549198455941, "train": 0.660918312839, "complex": 0.8502416364309999, "massiv": 1.44118776833, "few": 0.275577913653, "among": 0.228496097073, "intuit": 3.3216780971900004, "lua": 5.958991747200001, "guid": 0.912738218589, "whi": 1.18068843047, "bastien": 7.18765716411, "giant": 1.83028503479, "order": 0.22014038079300002, "montreal": 2.7018337357599997, "other": 0.00987474791976, "support": 0.237880610037, "benchmark": 3.9489787119499997, "mani": 0.0433157581221, "pull": 1.6460668749599998, "introduct": 1.02276465794, "over": 0.0249367214957, "perhap": 1.14680739183, "build": 0.491137452091, "monitor": 1.80125261058, "mine": 1.58430908678, "linear": 2.63027764196, "execut": 0.804854605864, "shot": 1.3489553715600002, "framework": 2.10418454607, "same": 0.112059649604, "largest": 0.7184068473190001, "grain": 2.48717679832, "there": 0.0400978929255, "regular": 0.739163417847, "interfac": 3.0405620365099995, "substanti": 1.24639002087, "con": 3.12434471114, "hardwar": 2.93441131931, "best": 0.459227932947, "exampl": 0.40868267499899996, "trade": 0.865091924188, "radic": 1.6665296351499999, "loos": 1.9552125417200001, "inspect": 2.46396347594, "setup": 3.5305264083199996, "take": 0.130691962197, "visual": 1.6539383488600001, "data": 1.2168205848, "configur": 2.4427250357499997, "code": 1.35601909597, "tip": 2.2430429711200004, "high": 0.13782378654000002, "regress": 3.9359915164199997, "power": 0.292396282715, "convnumdlay": 7.369978720910001, "also": 0.0146571578, "member": 0.278153414599, "mean": 0.37092128352, "symbol": 1.22901716266, "acceler": 2.0985188085299997, "iceberg": 5.0978528354, "becaus": 0.139343158825, "role": 0.44036410757399996, "pythonapirefer": 7.369978720910001, "research": 0.663727818138, "quirk": 4.8522822483, "the": 0.0, "area": 0.327954821122, "doc": 3.55007100439, "past": 0.7016234157610001, "facilit": 1.86464718498, "evolv": 1.52643430388, "chollet": 7.369978720910001, "multigpu": 7.369978720910001, "primarili": 0.8897807965100001, "workhors": 5.62951254607, "want": 0.6916366062549999, "util": 1.5389763962399998, "agre": 0.801760369921, "sinc": 0.0803681994577, "bullet": 2.7911525102599994, "although": 0.139487981418, "organiz": 3.1534165259599996, "shortcom": 3.8060957569699996, "slideshow": 4.66192851981, "intellig": 1.43349848213, "prior": 0.778442172521, "activ": 0.381196603284, "mxnet": 7.369978720910001, "raw": 2.36536149914, "refer": 0.262553246798, "graph": 3.6299309802199997, "seem": 0.829093032276, "suitabl": 1.83067788492, "algorithm": 3.33044239518, "mathemat": 2.00027135827, "facebook": 3.3517955196499996, "get": 0.579769005782, "easier": 2.05923883436, "like": 0.139053576545, "implement": 1.27437940907, "outsid": 0.515518738985, "imagin": 1.88684291737, "lasagn": 7.369978720910001, "part": 0.04239531098280001, "fuel": 1.72100448275, "includ": 0.0188846813905, "sign": 0.565696850403, "next": 0.402163685499, "term": 0.33303898354600003, "kera": 6.72812483474, "differenti": 2.0489218673900003, "stumbl": 3.7699304805000002, "this": 0.0037864490525, "choic": 1.14166497543, "sister": 1.32402598852, "api": 4.43612185107, "engin": 0.904767558276, "back": 0.23166743089699998, "bit": 2.12032652634, "similar": 0.318556092114, "smaller": 0.9530830530519999, "project": 0.561601885907, "differ": 0.212321121312, "most": 0.020747896295599998, "earlyreleas": 7.369978720910001, "low": 0.7564602833490001, "tutori": 4.0853151555, "excel": 1.5778801652, "all": 0.011402632097799998, "top": 0.609100637788, "today": 0.559395353679, "our": 0.8576392141820001, "expertis": 2.99674059227, "strong": 0.49712549393600003, "recent": 0.434413741288, "less": 0.3846144626, "longer": 0.7046772417749999, "that": 0.00397614837964, "exchang": 1.11788217808, "architectur": 1.63469757919, "built": 0.690379535065, "academ": 1.35895667459, "more": 0.017024931599999998, "and": 6.29901420636e-05, "list": 0.309845761506, "novel": 1.40255075163, "discuss": 0.78698452262, "deceas": 2.90522068864, "folk": 2.03677695251, "amount": 0.819898886199, "general": 0.114952578063, "websit": 0.924894023806, "faster": 2.03003967967, "librari": 0.986809980943, "none": 1.40255075163, "download": 2.6841506319, "consequ": 1.0937112421, "can": 0.162341096394, "flow": 1.4838746894600001, "comput": 1.36806891594, "make": 0.07349765782289999, "each": 0.173741689304, "size": 0.9138372060609999, "eas": 2.202339678, "serial": 2.43048145465, "amazon": 3.50086321649, "common": 0.338325805271, "block": 1.16400781588, "sander": 3.36811501148, "lightweight": 3.4781584227999995, "cnns": 7.369978720910001, "port": 1.37228362405, "behind": 0.7345572374320001, "absent": 2.4602693454, "bio": 3.7456377879300002, "must": 0.653383947388, "origin": 0.128612437587, "convnet": 7.369978720910001, "worth": 1.65065103492, "gpus": 6.964513612799999, "from": 0.000567054168866, "first": 0.0075872898121599995, "input": 2.50167533539, "arxiv": 6.08904487545, "page": 0.711326032411, "while": 0.04324998379380001, "offici": 0.339917317543, "year": 0.047402238894600005, "host": 0.996658931332, "write": 0.721512439877, "user": 2.04258810688, "learn": 0.842752064745, "pipelin": 3.47002829672, "effici": 1.62793753414}, "freq": {"googl": 4, "apipythonindexhtml": 1, "slight": 1, "play": 1, "fr\u00e9d\u00e9ric": 1, "goto": 1, "new": 1, "scala": 1, "pun": 1, "topic": 1, "thank": 1, "blend": 2, "specif": 1, "function": 1, "pictur": 1, "ship": 1, "univers": 2, "python": 12, "sheer": 1, "well": 1, "product": 2, "whether": 1, "catch": 1, "higher": 4, "collect": 2, "wealth": 1, "between": 3, "momentum": 1, "dropoutlay": 1, "torchinspir": 1, "enlatest": 1, "multipl": 1, "how": 1, "test": 1, "instruct": 1, "repost": 1, "bunch": 2, "newest": 1, "maintain": 3, "good": 1, "initi": 2, "soon": 1, "word": 1, "interest": 1, "deep": 18, "will": 3, "haven": 1, "open": 1, "stack": 1, "run": 3, "second": 1, "incorpor": 1, "intro": 1, "clear": 1, "perform": 4, "but": 4, "definit": 4, "need": 1, "comprehens": 1, "franci": 1, "cost": 1, "expect": 1, "point": 1, "quest": 1, "applic": 1, "hidden": 1, "lab": 2, "level": 13, "has": 8, "have": 4, "tensorflow": 22, "outclass": 1, "use": 8, "experi": 2, "optim": 1, "resourc": 8, "reddit": 1, "out": 1, "blaze": 1, "model": 13, "quit": 3, "specifi": 1, "slow": 1, "much": 2, "cours": 2, "numer": 2, "docker": 1, "julia": 1, "javascript": 1, "start": 1, "juri": 1, "udac": 1, "involv": 1, "compon": 1, "respect": 1, "whole": 1, "prescript": 1, "altern": 2, "aim": 1, "garner": 1, "deepmind": 1, "theano": 28, "slower": 1, "handl": 1, "than": 9, "they": 1, "design": 4, "genr": 1, "recurr": 2, "descript": 7, "allow": 3, "homepag": 1, "taught": 1, "pytorch": 9, "github": 1, "sprung": 1, "away": 1, "featur": 1, "tensor": 1, "feed": 1, "practic": 1, "phone": 1, "abstract": 4, "provid": 2, "plan": 1, "array": 1, "offer": 5, "softwar": 2, "kid": 1, "develop": 3, "compil": 2, "foremost": 1, "explor": 1, "network": 10, "deriv": 1, "fast": 1, "some": 2, "sourc": 1, "control": 1, "both": 1, "may": 2, "document": 9, "subset": 1, "twitter": 1, "repositori": 5, "struck": 1, "matur": 1, "ani": 1, "modul": 1, "ecosystem": 3, "still": 4, "answer": 1, "limit": 1, "work": 2, "matlab": 1, "num": 3, "technolog": 1, "bet": 1, "curv": 5, "safe": 1, "for": 26, "difficult": 1, "builtin": 1, "friend": 1, "releas": 1, "with": 12, "written": 3, "think": 1, "are": 4, "solut": 1, "cleaner": 1, "sacrific": 1, "pasta": 1, "current": 1, "team": 6, "look": 5, "option": 3, "video": 1, "backend": 1, "summari": 7, "veri": 7, "variabl": 1, "ago": 1, "familiar": 1, "artifici": 2, "group": 1, "dieleman": 1, "weak": 1, "old": 1, "littl": 1, "give": 1, "simpler": 1, "proper": 1, "their": 1, "place": 1, "torch": 1, "beta": 1, "indico": 7, "extrem": 1, "juli": 1, "anoth": 1, "thing": 1, "contribut": 1, "probabl": 1, "scientist": 1, "machin": 5, "paper": 2, "instal": 4, "strength": 1, "steeper": 1, "requir": 1, "smallest": 1, "effect": 2, "what": 1, "highest": 1, "choos": 2, "fine": 1, "relationship": 1, "particular": 1, "flexibl": 9, "help": 2, "larg": 2, "scienc": 1, "instead": 1, "brain": 2, "pros": 7, "own": 2, "unusu": 1, "relat": 2, "deal": 1, "alongsid": 1, "who": 1, "decid": 1, "theanobas": 2, "assort": 1, "permiss": 1, "lower": 2, "week": 1, "apidocspython": 1, "express": 1, "clean": 2, "layer": 6, "evalu": 1, "contain": 1, "about": 1, "deploy": 1, "notabl": 1, "communiti": 8, "scene": 1, "neural": 7, "silver": 1, "softwaretheano": 1, "just": 3, "adventur": 1, "standard": 1, "pylearnnum": 2, "madison": 2, "exercis": 1, "mobil": 1, "defin": 1, "multidimension": 1, "announc": 1, "recommend": 1, "dynam": 3, "across": 2, "train": 4, "complex": 1, "massiv": 1, "few": 2, "among": 1, "intuit": 2, "lua": 2, "guid": 6, "whi": 1, "bastien": 1, "giant": 1, "order": 1, "montreal": 2, "other": 6, "support": 9, "benchmark": 2, "mani": 3, "pull": 1, "introduct": 1, "over": 2, "perhap": 1, "build": 6, "monitor": 1, "mine": 1, "linear": 1, "execut": 1, "shot": 1, "framework": 6, "same": 1, "largest": 1, "grain": 1, "there": 1, "regular": 1, "interfac": 5, "substanti": 3, "con": 7, "hardwar": 1, "best": 1, "exampl": 4, "trade": 1, "radic": 1, "loos": 1, "inspect": 1, "setup": 1, "take": 3, "visual": 1, "data": 7, "configur": 1, "code": 2, "tip": 1, "high": 4, "regress": 1, "power": 1, "convnumdlay": 1, "also": 1, "member": 2, "mean": 1, "symbol": 6, "acceler": 1, "iceberg": 1, "becaus": 3, "role": 1, "pythonapirefer": 1, "research": 3, "quirk": 1, "the": 60, "area": 1, "doc": 2, "past": 1, "facilit": 1, "evolv": 1, "chollet": 1, "multigpu": 2, "primarili": 1, "workhors": 1, "want": 1, "util": 1, "agre": 1, "sinc": 1, "bullet": 1, "although": 3, "organiz": 1, "shortcom": 1, "slideshow": 1, "intellig": 1, "prior": 1, "activ": 3, "mxnet": 11, "raw": 1, "refer": 1, "graph": 6, "seem": 1, "suitabl": 1, "algorithm": 1, "mathemat": 2, "facebook": 2, "get": 2, "easier": 1, "like": 5, "implement": 1, "outsid": 1, "imagin": 1, "lasagn": 12, "part": 1, "fuel": 1, "includ": 1, "sign": 1, "next": 1, "term": 2, "kera": 13, "differenti": 1, "stumbl": 1, "this": 1, "choic": 4, "sister": 1, "api": 2, "engin": 1, "back": 4, "bit": 1, "similar": 3, "smaller": 2, "project": 2, "differ": 2, "most": 3, "earlyreleas": 1, "low": 3, "tutori": 7, "excel": 3, "all": 1, "top": 2, "today": 1, "our": 5, "expertis": 1, "strong": 1, "recent": 3, "less": 2, "longer": 1, "that": 10, "exchang": 1, "architectur": 1, "built": 2, "academ": 1, "more": 7, "and": 41, "list": 5, "novel": 1, "discuss": 1, "deceas": 1, "folk": 1, "amount": 1, "general": 1, "websit": 1, "faster": 1, "librari": 21, "none": 1, "download": 1, "consequ": 1, "can": 3, "flow": 2, "comput": 4, "make": 1, "each": 1, "size": 1, "eas": 2, "serial": 1, "amazon": 2, "common": 1, "block": 13, "sander": 1, "lightweight": 1, "cnns": 1, "port": 1, "behind": 3, "absent": 1, "bio": 1, "must": 1, "origin": 1, "convnet": 1, "worth": 2, "gpus": 2, "from": 5, "first": 2, "input": 1, "arxiv": 2, "page": 1, "while": 1, "offici": 10, "year": 1, "host": 1, "write": 2, "user": 6, "learn": 29, "pipelin": 2, "effici": 4}, "idf": {"googl": 11.388809182200001, "apipythonindexhtml": 1587.6, "slight": 3.25327868852, "play": 1.46390041494, "fr\u00e9d\u00e9ric": 1587.6, "goto": 288.654545455, "new": 1.0178880554, "scala": 114.215827338, "pun": 51.5454545455, "topic": 5.457545548300001, "thank": 6.00681044268, "blend": 12.1935483871, "specif": 1.8719490626099997, "function": 2.495441685, "pictur": 3.4953764861300005, "ship": 3.14812611541, "univers": 1.24889867841, "python": 56.2978723404, "sheer": 27.6585365854, "well": 1.0655748708, "product": 1.62264922322, "whether": 2.20683903253, "catch": 8.25585023401, "higher": 2.1218925421, "collect": 1.64109985528, "wealth": 6.727118644069999, "between": 1.03453668708, "momentum": 16.835630965, "dropoutlay": 1587.6, "torchinspir": 1587.6, "enlatest": 1587.6, "multipl": 2.74813917258, "how": 1.60250328051, "test": 2.65707112971, "instruct": 4.169117647059999, "repost": 933.882352941, "bunch": 40.5, "newest": 22.777618364400002, "maintain": 1.77306231852, "good": 1.51981619759, "initi": 1.35, "soon": 1.9817750592900003, "word": 1.7965372864099998, "interest": 1.60331246213, "deep": 3.6279707495399998, "will": 1.22481098596, "haven": 12.690647482000001, "open": 1.24556723678, "stack": 19.6485148515, "run": 1.55692850838, "second": 1.1130898128, "incorpor": 2.62847682119, "intro": 66.7058823529, "clear": 1.85423966363, "perform": 1.5313977042500002, "but": 1.01632417899, "definit": 3.24, "need": 1.4372623574099999, "comprehens": 5.3544688027, "franci": 5.096629213480001, "cost": 2.31935719503, "expect": 2.20011086475, "point": 1.25990000794, "quest": 12.6805111821, "applic": 3.42672134686, "hidden": 7.81299212598, "lab": 14.4327272727, "level": 1.6544393497299998, "has": 1.0436497502, "have": 1.0148948411399998, "tensorflow": 1587.6, "outclass": 211.68, "use": 1.0296387573799999, "experi": 1.87062566278, "optim": 11.5377906977, "resourc": 2.9487369985100003, "reddit": 529.2, "out": 1.06016694491, "blaze": 39.789473684200004, "model": 2.0905978404, "quit": 2.8849718335500003, "specifi": 6.920662598080001, "slow": 4.04793472718, "much": 1.1942229577299999, "cours": 2.15092805853, "numer": 1.83325635104, "docker": 337.787234043, "julia": 20.9722589168, "javascript": 174.46153846200002, "start": 1.26673581744, "juri": 13.077429983499998, "udac": 1587.6, "involv": 1.4498630137000001, "compon": 4.09491875161, "respect": 1.6443293630200002, "whole": 2.29488291414, "prescript": 30.7079303675, "altern": 2.1390460792200003, "aim": 2.8960233491400005, "garner": 12.5900079302, "deepmind": 1587.6, "theano": 1587.6, "slower": 17.1632432432, "handl": 3.9229058561900003, "than": 1.03278688525, "they": 1.03017325287, "design": 1.45825296225, "genr": 8.34700315457, "recurr": 35.5964125561, "descript": 4.00504540868, "allow": 1.2716059271100002, "homepag": 42.336000000000006, "taught": 5.57052631579, "pytorch": 1587.6, "github": 1587.6, "sprung": 65.0655737705, "away": 1.85142857143, "featur": 1.52712581762, "tensor": 152.653846154, "feed": 7.77853993141, "practic": 1.70434782609, "phone": 9.118897185529999, "abstract": 9.966101694919999, "provid": 1.21552714187, "plan": 1.5356935577500002, "array": 10.1444089457, "offer": 1.53896859248, "softwar": 10.2624434389, "kid": 9.39964476021, "develop": 1.1955719557200002, "compil": 5.696447793330001, "foremost": 19.1970979444, "explor": 3.39593582888, "network": 2.59369384088, "deriv": 2.78379800105, "fast": 4.8729281768, "some": 1.04036697248, "sourc": 1.69760479042, "control": 1.46959178006, "both": 1.05215720061, "may": 1.05201775893, "document": 2.5409731114, "subset": 27.3253012048, "twitter": 33.213389121300004, "repositori": 44.974504249300004, "struck": 6.34786085566, "matur": 9.31690140845, "ani": 1.13383802314, "modul": 16.9434364995, "ecosystem": 26.111842105300003, "still": 1.1866357724799999, "answer": 4.64890190337, "limit": 1.5186531471200002, "work": 1.11520089913, "matlab": 417.78947368400003, "num": 1.00031504001, "technolog": 2.6034765496900003, "bet": 29.1838235294, "curv": 11.1098670399, "safe": 5.02723242559, "for": 1.00031504001, "difficult": 2.48957189901, "builtin": 1587.6, "friend": 2.20194174757, "releas": 1.8377126982299998, "with": 1.0011982089899998, "written": 1.9573418813999999, "think": 2.90715986083, "are": 1.02990593578, "solut": 4.7278141751, "cleaner": 45.7521613833, "sacrific": 11.7079646018, "pasta": 127.008, "current": 1.5325803649, "team": 2.2748244734200003, "look": 1.9086318826599997, "option": 4.04896710023, "video": 3.29719626168, "backend": 933.882352941, "summari": 7.80147420147, "veri": 1.25880114177, "variabl": 8.747107438019999, "ago": 6.05954198473, "familiar": 6.86381322957, "artifici": 8.31639601886, "group": 1.20996875238, "dieleman": 1587.6, "weak": 4.70539419087, "old": 1.52844902282, "littl": 1.5499365420299998, "give": 1.3653250774, "simpler": 17.9187358916, "proper": 3.3388012618299996, "their": 1.01547908405, "place": 1.1004366812200002, "torch": 30.1825095057, "beta": 25.0410094637, "indico": 1587.6, "extrem": 2.36602086438, "juli": 1.43466473884, "anoth": 1.13643521832, "thing": 2.4065484311099996, "contribut": 1.9255306246200001, "probabl": 2.64555907349, "scientist": 4.69426374926, "machin": 4.02433460076, "paper": 2.6628648104700003, "instal": 3.78721374046, "strength": 4.02739726027, "steeper": 157.188118812, "requir": 1.52844902282, "smallest": 13.2964824121, "effect": 1.3963060686000002, "what": 1.25343439128, "highest": 2.50212765957, "choos": 4.17899447223, "fine": 4.02229541424, "relationship": 2.39132399458, "particular": 1.3814827706200001, "flexibl": 9.68639414277, "help": 1.39962972759, "larg": 1.18574949585, "scienc": 2.31969608416, "instead": 1.59461631177, "brain": 8.929133858270001, "pros": 141.75, "own": 1.17844418052, "unusu": 4.68180477735, "relat": 1.23750876919, "deal": 2.18346857379, "alongsid": 4.0728578758300005, "who": 1.06279287723, "decid": 1.9257641921400002, "theanobas": 1587.6, "assort": 32.2682926829, "permiss": 6.280063291139999, "lower": 2.10055570257, "week": 1.80532181033, "apidocspython": 1587.6, "express": 1.9120799710900003, "clean": 6.86975335353, "layer": 8.14153846154, "evalu": 6.9509632224199995, "contain": 1.59814777532, "about": 1.06486015159, "deploy": 7.41869158879, "notabl": 1.82840032247, "communiti": 1.96121062384, "scene": 3.45055422734, "neural": 59.4606741573, "silver": 4.89697717458, "softwaretheano": 1587.6, "just": 1.33580143037, "adventur": 6.65102639296, "standard": 1.8915763135900003, "pylearnnum": 1587.6, "madison": 15.703264095, "exercis": 4.73627684964, "mobil": 4.89697717458, "defin": 2.72830383227, "multidimension": 160.363636364, "announc": 2.02940048575, "recommend": 3.9142011834300003, "dynam": 6.52527743527, "across": 1.7318642958400001, "train": 1.9365698950999999, "complex": 2.34021226415, "massiv": 4.22571200426, "few": 1.31729173581, "among": 1.25670862028, "intuit": 27.7068062827, "lua": 387.219512195, "guid": 2.49113447356, "whi": 3.2566153846200003, "bastien": 1323.0, "giant": 6.23566378633, "order": 1.24625166811, "montreal": 14.907042253499998, "other": 1.00992366412, "support": 1.2685577307200002, "benchmark": 51.8823529412, "mani": 1.04426757877, "pull": 5.18654034629, "introduct": 2.7808723068799996, "over": 1.02525024217, "perhap": 3.14812611541, "build": 1.6341739578, "monitor": 6.05723006486, "mine": 4.875921375919999, "linear": 13.8776223776, "execut": 2.2363713199, "shot": 3.85339805825, "framework": 8.200413223139998, "same": 1.11857958148, "largest": 2.0511627907, "grain": 12.0272727273, "there": 1.04091266719, "regular": 2.09418282548, "interfac": 20.9169960474, "substanti": 3.4777656078900003, "con": 22.744985673400002, "hardwar": 18.8104265403, "best": 1.5828514456600002, "exampl": 1.50483412322, "trade": 2.37522441652, "radic": 5.2937645882, "loos": 7.065420560750001, "inspect": 11.7512953368, "setup": 34.1419354839, "take": 1.13961668222, "visual": 5.22752716497, "data": 3.37643555934, "configur": 11.504347826099998, "code": 3.8807137619199996, "tip": 9.42195845697, "high": 1.14777327935, "regress": 51.2129032258, "power": 1.3396337861799998, "convnumdlay": 1587.6, "also": 1.01476510067, "member": 1.32068879461, "mean": 1.44906900329, "symbol": 3.4178686760000003, "acceler": 8.15408320493, "iceberg": 163.670103093, "becaus": 1.1495184997499999, "role": 1.55327267391, "pythonapirefer": 1587.6, "research": 1.9420183486200002, "quirk": 128.032258065, "the": 1.0, "area": 1.3881262568900001, "doc": 34.8157894737, "past": 2.01702452039, "facilit": 6.453658536590001, "evolv": 4.60173913043, "chollet": 1587.6, "multigpu": 1587.6, "primarili": 2.43459592087, "workhors": 278.526315789, "want": 1.99698113208, "util": 4.65981802172, "agre": 2.22946215419, "sinc": 1.08368600683, "bullet": 16.2997946612, "although": 1.14968498805, "organiz": 23.4159292035, "shortcom": 44.974504249300004, "slideshow": 105.84, "intellig": 4.19334389857, "prior": 2.17807655371, "activ": 1.46403541129, "mxnet": 1587.6, "raw": 10.6478873239, "refer": 1.30024570025, "graph": 37.7102137767, "seem": 2.29123971713, "suitabl": 6.23811394892, "algorithm": 27.9507042254, "mathemat": 7.391061452510001, "facebook": 28.5539568345, "get": 1.78562591385, "easier": 7.84, "like": 1.14918566775, "implement": 3.57648118946, "outsid": 1.67450690855, "imagin": 6.598503740650001, "lasagn": 1587.6, "part": 1.04330682789, "fuel": 5.59014084507, "includ": 1.0190641247799999, "sign": 1.7606742819099999, "next": 1.4950560316400001, "term": 1.39520168732, "kera": 835.5789473680001, "differenti": 7.759530791789999, "stumbl": 43.3770491803, "this": 1.00379362671, "choic": 3.1319786940200003, "sister": 3.75852272727, "api": 84.44680851060001, "engin": 2.47135740971, "back": 1.26070038911, "bit": 8.33385826772, "similar": 1.37514075357, "smaller": 2.59369384088, "project": 1.7534791252500002, "differ": 1.23654490225, "most": 1.02096463023, "earlyreleas": 1587.6, "low": 2.13072070863, "tutori": 59.4606741573, "excel": 4.84467500763, "all": 1.01146788991, "top": 1.8387769284200002, "today": 1.74961428257, "our": 2.35758835759, "expertis": 20.0201765448, "strong": 1.6439888163999998, "recent": 1.54405757635, "less": 1.46904783936, "longer": 2.02319357716, "that": 1.00398406375, "exchang": 3.05837025621, "architectur": 5.12790697674, "built": 1.99447236181, "academ": 3.8921304241199994, "more": 1.0171706817, "and": 1.00006299213, "list": 1.36321483771, "novel": 4.06555697823, "discuss": 2.19676214197, "deceas": 18.269275028800003, "folk": 7.6658619024600005, "amount": 2.27027027027, "general": 1.1218202374200001, "websit": 2.52160101652, "faster": 7.61438848921, "librari": 2.68266306185, "none": 4.06555697823, "download": 14.6457564576, "consequ": 2.98533283189, "can": 1.17626139142, "flow": 4.41, "comput": 3.9277585353800006, "make": 1.0762660158600001, "each": 1.18974820144, "size": 2.49387370405, "eas": 9.04615384615, "serial": 11.3643521832, "amazon": 33.1440501044, "common": 1.4025974025999999, "block": 3.20274359492, "sander": 29.0237659963, "lightweight": 32.4, "cnns": 1587.6, "port": 3.9443478260900005, "behind": 2.0845588235299997, "absent": 11.7079646018, "bio": 42.336000000000006, "must": 1.9220338983099996, "origin": 1.13724928367, "convnet": 1587.6, "worth": 5.210370856580001, "gpus": 1058.4, "from": 1.00056721497, "first": 1.00761614623, "input": 12.2029208301, "arxiv": 441.0, "page": 2.03669018602, "while": 1.0441988950299999, "offici": 1.40483143085, "year": 1.0485436893200002, "host": 2.7092150170599996, "write": 2.0575427682700003, "user": 7.71053909665, "learn": 2.32275054865, "pipelin": 32.1376518219, "effici": 5.09335899904}}, "html": "<!DOCTYPE html>\n\n<html lang=\"en-US\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head profile=\"http://gmpg.org/xfn/11\">\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n<title>  An Overview of Python Deep Learning Frameworks</title>\n<link href=\"/wp-content/themes/kdn17/images/favicon.ico\" rel=\"shortcut icon\"/>\n<link href=\"/wp-content/themes/kdn17/style.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"/wp-content/themes/kdn17/js/jquery-1.9.1.min.js\" type=\"text/javascript\"></script>\n<script src=\"/aps/kda_all.js\" type=\"text/javascript\"></script>\n<link href=\"/feed/\" rel=\"alternate\" title=\"KDnuggets: Analytics, Big Data, Data Mining and Data Science Feed\" type=\"application/rss+xml\"/>\n<link href=\"//s.w.org\" rel=\"dns-prefetch\"/>\n<link href=\"https://www.kdnuggets.com/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/comments/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/2017/02/python-deep-learning-frameworks-overview.html/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb An Overview of Python Deep Learning Frameworks Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-json/\" rel=\"https://api.w.org/\"/>\n<link href=\"https://www.kdnuggets.com/xmlrpc.php?rsd\" rel=\"EditURI\" title=\"RSD\" type=\"application/rsd+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-includes/wlwmanifest.xml\" rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\"/>\n<link href=\"https://www.kdnuggets.com/2017/02/paw-chicago-learn-modeling-methods.html\" rel=\"prev\" title=\"Learn about modeling methods at PAW Chicago, Jun 19-22\"/>\n<link href=\"https://www.kdnuggets.com/2017/02/data-science-vs-fake-news-contest.html\" rel=\"next\" title=\"Data Science vs Fake News Contest\"/>\n<meta content=\"WordPress 4.9.10\" name=\"generator\">\n<link href=\"https://www.kdnuggets.com/2017/02/python-deep-learning-frameworks-overview.html\" rel=\"canonical\"/>\n<link href=\"https://www.kdnuggets.com/?p=63155\" rel=\"shortlink\"/>\n<link href=\"https://www.kdnuggets.com/2017/02/python-deep-learning-frameworks-overview.html\" rel=\"canonical\"/>\n<!-- BEGIN ExactMetrics v5.3.7 Universal Analytics - https://exactmetrics.com/ -->\n<script>\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-361129-1', 'auto');\n  ga('send', 'pageview');\n</script>\n<!-- END ExactMetrics Universal Analytics -->\n</meta></head>\n<body class=\"post-template-default single single-post postid-63155 single-format-standard\">\n<div class=\"main_wrapper\"><!-- publ: 27-Feb, 2017  -->\n<div id=\"wrapper\">\n<div id=\"header\">\n<div id=\"header_log\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<h1>KDnuggets</h1>\n<div class=\"text-container\">\n            \u00a0\u00a0<a href=\"/news/subscribe.html\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a> \u00a0|\n <a href=\"https://twitter.com/kdnuggets\" target=\"_blank\"><img alt=\"Twitter\" height=\"48\" src=\"/images/tw_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n <a href=\"https://www.facebook.com/kdnuggets\" target=\"_blank\"><img alt=\"Facebook\" height=\"48\" src=\"/images/fb_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n<a href=\"https://www.linkedin.com/groups/54257/\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"48\" src=\"/images/in_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \n\u00a0|\u00a0 <a href=\"/contact.html\"><b>Contact</b></a>\n</div>\n</div>\n<div class=\"search\">\n<form action=\"/\" id=\"searchform\" method=\"get\">\n<input id=\"s\" name=\"s\" placeholder=\"search KDnuggets\" type=\"text\" value=\"\"/>\n<input type=\"submit\" value=\"Search\"/></form>\n</div>\n<div href=\"#\" id=\"pull\">\n<img class=\"menu\" src=\"/images/menu-30.png\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<img class=\"search-icon\" src=\"/images/search-icon.png\">\n</img></img></div>\n<div id=\"pull-menu\">\n<div class=\"navigation\"><ul class=\"menu\" id=\"menu-menu\"><li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-1070\" id=\"menu-item-1070\"><a href=\"/software/index.html\" title=\"Data Science Software\">SOFTWARE</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13756\" id=\"menu-item-13756\"><a href=\"/news/index.html\" title=\"News\">News/Blog</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-46286\" id=\"menu-item-46286\"><a href=\"/news/top-stories.html\">Top stories</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-42152\" id=\"menu-item-42152\"><a href=\"https://www.kdnuggets.com/opinions/index.html\" title=\"Opinions\">Opinions</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-46415\" id=\"menu-item-46415\"><a href=\"https://www.kdnuggets.com/tutorials/index.html\">Tutorials</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13364\" id=\"menu-item-13364\"><a href=\"/jobs/index.html\" title=\"Jobs in Analytics, Data Science\">JOBS</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-63505\" id=\"menu-item-63505\"><a href=\"https://www.kdnuggets.com/companies/index.html\">Companies</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13366\" id=\"menu-item-13366\"><a href=\"/courses/index.html\">Courses</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-1499\" id=\"menu-item-1499\"><a href=\"https://www.kdnuggets.com/datasets/index.html\">Datasets</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-14286\" id=\"menu-item-14286\"><a href=\"https://www.kdnuggets.com/education/index.html\" title=\"Education in Analytics, Big Data, Data Science\">EDUCATION</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-51558\" id=\"menu-item-51558\"><a href=\"https://www.kdnuggets.com/education/analytics-data-mining-certificates.html\" title=\"Certificates in Analytics, Big Data, Data Science\">Certificates</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-14752\" id=\"menu-item-14752\"><a href=\"/meetings/index.html\">Meetings</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13721\" id=\"menu-item-13721\"><a href=\"/webcasts/index.html\" title=\"Webcasts and Webinars\">Webinars</a></li>\n</ul></div></div>\n</div> <!--#header end-->\n<div id=\"spacer\">\n         \u00a0\n      </div>\n<div id=\"content_wrapper\">\n<div id=\"ad_wrapper\">\n<script type=\"text/javascript\">\n\tjQuery(function() {\n   \t    var pull        = $('#pull');\n            menu        = $('#header .navigation ul');\n            menuImage = $('#header img.menu');\n            mobileMenu        = $('#pull-menu-mobile');\n            search = $('img.search-icon');\n            searchBar = $('div.search');\n            searchClick = false;\n            search.on('click', function() {\n                  searchBar.slideToggle();\n                  searchClick = true;\n            });  \n     \t    $(menuImage).on('click', function(e) {\n\t        //e.preventDefault();\n                if (!searchClick) {\n                  menu.slideToggle();\n                }\n                searchClick = false;\n\t    });\n           /* pullMobile.on('click', function(e) {\n              e.preventDefault();\n                if (!searchClick) {\n                  mobileMenu.slideToggle();\n                }\n                searchClick = false;\n\t    });*/\n            \n\t});\n\tkpath = '/'; kda_top(); kda_sid_init(); kda_sid_n=3;\n\t</script>\n</div> <div class=\"breadcumb\">\n<br/>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2017/index.html\">2017</a> \u00bb <a href=\"https://www.kdnuggets.com/2017/02/index.html\">Feb</a> \u00bb <a href=\"https://www.kdnuggets.com/2017/02/tutorials.html\">Tutorials, Overviews</a> \u00bb An Overview of Python Deep Learning Frameworks (\u00a0<a href=\"/2017/n08.html\">17:n08</a>\u00a0)    </div>\n<div class=\"single\" id=\"content\">\n<div id=\"post-header\">\n<h1 id=\"title\"><img align=\"right\" alt=\"Silver Blog, 2017\" src=\"/images/tkb-17xx-s.png\" width=\"120\"/>An Overview of Python Deep Learning Frameworks</h1>\n<div class=\"pagi\">\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2017/02/paw-chicago-learn-modeling-methods.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"> <strong>Previous post</strong></img></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2017/02/data-science-vs-fake-news-contest.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/>\u00a0<br/>\u00a0\n    <span class=\"http-likes\" style=\"float: left; font-size:14px\">http likes 1459</span> <div class=\"addthis_native_toolbox\"></div>\n</div>\n<div class=\"tag-data\">Tags: <a href=\"https://www.kdnuggets.com/tag/deep-learning\" rel=\"tag\">Deep Learning</a>, <a href=\"https://www.kdnuggets.com/tag/keras\" rel=\"tag\">Keras</a>, <a href=\"https://www.kdnuggets.com/tag/neural-networks\" rel=\"tag\">Neural Networks</a>, <a href=\"https://www.kdnuggets.com/tag/python\" rel=\"tag\">Python</a>, <a href=\"https://www.kdnuggets.com/tag/tensorflow\" rel=\"tag\">TensorFlow</a>, <a href=\"https://www.kdnuggets.com/tag/theano\" rel=\"tag\">Theano</a>, <a href=\"https://www.kdnuggets.com/tag/torch\" rel=\"tag\">Torch</a></div>\n<br/>\n<p class=\"excerpt\">\n     Read this concise overview of leading Python deep learning frameworks, including Theano, Lasagne, Blocks, TensorFlow, Keras, MXNet, and PyTorch.\n  </p>\n</div>\n<div id=\"post-header-ad\">\n<script type=\"text/javascript\">kda_sid_write(1); kda_sid_n=2;</script>\n</div>\n<hr class=\"grey-line\"/><br/>\n<div class=\"post\" id=\"post-\">\n<p><b>By Madison May, <a href=\"https://indico.io/\" target=\"_blank\">indico</a></b>.</p>\n<p>I recently stumbled across an old Data Science Stack Exchange answer of mine on the topic of the <a href=\"http://datascience.stackexchange.com/a/695/684\" target=\"_blank\">\u201cBest Python library for neural networks\u201d</a>, and it struck me how much the Python deep learning ecosystem has evolved over the course of the past 2.5 years. The library I recommended in July 2014, <code>pylearn2</code>, is no longer actively developed or maintained, but a whole host of deep learning libraries have sprung up to take its place. Each has its own strengths and weaknesses. We\u2019ve used most of the technologies on this list in production or development at indico, but for the few that we haven\u2019t, I\u2019ll pull from the experiences of others to help give a clear, comprehensive picture of the Python deep learning ecosystem of 2017.</p>\n<p><center><img alt=\"Python\" deep=\"\" learning\"=\"\" src=\"/wp-content/uploads/python-deep-learning.jpg\" width=\"85%\"/></center></p>\n<p>In particular, we\u2019ll be looking at:</p>\n<ul class=\"three_ul\">\n<li>Theano\n<li>Lasagne\n<li>Blocks\n<li>TensorFlow\n<li>Keras\n<li>MXNet\n<li>PyTorch\n</li></li></li></li></li></li></li></ul>\n<h3><a href=\"https://github.com/Theano/Theano\" target=\"_blank\">Theano</a></h3>\n<p>\u00a0<br>\n<b>Description:</b></br></p>\n<p>Theano is a Python library that allows you to define, optimize, and evaluate mathematical expressions involving multi-dimensional arrays efficiently. It works with GPUs and performs efficient symbolic differentiation.</p>\n<p><b>Documentation:</b></p>\n<p><a href=\"http://deeplearning.net/software/theano/\" target=\"_blank\">http://deeplearning.net/software/theano/</a></p>\n<p><b>Summary:</b></p>\n<p>Theano is the numerical computing workhorse that powers many of the other deep learning frameworks on our list. It was built by Fr\u00e9d\u00e9ric Bastien and the excellent research team behind the University of Montreal\u2019s lab, MILA. Its API is quite low level, and in order to write effective Theano you need to be quite familiar with the algorithms that are hidden away behind the scenes in other frameworks. Theano is a go-to library if you have substantial academic machine learning expertise, are looking for very fine grained control of your models, or want to implement a novel or unusual model. In general, Theano trades ease of use for flexibility.</p>\n<p><b>Pros:</b></p>\n<ul class=\"three_ul\">\n<li>Flexible\n<li>Performant if used properly\n</li></li></ul>\n<p><b>Cons:</b></p>\n<ul class=\"three_ul\">\n<li>Substantial learning curve\n<li>Lower level API\n<li>Compiling complex symbolic graphs can be slow\n</li></li></li></ul>\n<p><b>Resources:</b></p>\n<ul class=\"three_ul\" v=\"\">\n<li><a href=\"http://deeplearning.net/software/theano/install.html\" target=\"_blank\">Installation guide</a>\n<li><a href=\"http://deeplearning.net/software/theano/tutorial/\" target=\"_blank\">Official Theano tutorial</a>\n<li><a href=\"https://github.com/goodfeli/theano_exercises\" target=\"_blank\">Theano slideshow and practice exercises</a>\n<li><a href=\"https://github.com/Newmu/Theano-Tutorials\" target=\"_blank\">From linear regression to CNNs with Theano</a>\n<li><a href=\"https://indico.io/blog/introduction-to-deep-learning-with-python-and-theano-2/\" target=\"_blank\">Introduction to Deep Learning with Python &amp; Theano (MNIST video tutorial)</a>\n</li></li></li></li></li></ul>\n<h3><a href=\"https://github.com/Lasagne/Lasagne\" target=\"_blank\">Lasagne</a></h3>\n<p>\u00a0<br>\n<b>Description:</b></br></p>\n<p>Lightweight library for building and training neural networks in Theano.</p>\n<p><b>Documentation:</b></p>\n<p><a href=\"http://lasagne.readthedocs.org/\" target=\"_blank\">http://lasagne.readthedocs.org/</a></p>\n<p><b>Summary:</b></p>\n<p>Since Theano aims first and foremost to be a library for symbolic mathematics, Lasagne offers abstractions on top of Theano that make it more suitable for deep learning. It\u2019s written and maintained primarily by Sander Dieleman, a current DeepMind research scientist. Instead of specifying network models in terms of function relationships between symbolic variables, Lasagne allows users to think at the <code>Layer</code> level, offering building blocks like \u201cConv2DLayer\u201d and \u201cDropoutLayer\u201d for users to work with. Lasagne requires little sacrifice in terms of flexibility while providing a wealth of common components to help with layer definition, layer initialization, model regularization, model monitoring, and model training.</p>\n<p><b>Pros:</b></p>\n<ul class=\"three_ul\">\n<li>Still very flexible\n<li>Higher layer of abstraction than Theano\n<li>Docs and code contain an assortment of pasta puns\n</li></li></li></ul>\n<p><b>Cons:</b></p>\n<ul class=\"three_ul\">\n<li>Smaller community\n</li></ul>\n<p><b>Resources:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"https://github.com/Lasagne/Lasagne\" target=\"_blank\">Official GitHub page</a>\n<li><a href=\"http://lasagne.readthedocs.io/en/latest/user/installation.html\" target=\"_blank\">Official installation guide</a>\n<li><a href=\"http://lasagne.readthedocs.io/en/latest/user/tutorial.html\" target=\"_blank\">Official Lasagne tutorial</a>\n<li><a href=\"https://github.com/Lasagne/Lasagne/tree/master/examples\" target=\"_blank\">Example Lasagne code</a>\n</li></li></li></li></ul>\n<h3><a href=\"https://github.com/mila-udem/blocks\" target=\"_blank\">Blocks</a></h3>\n<p>\u00a0<br>\n<b>Description:</b></br></p>\n<p>A Theano framework for building and training neural networks.</p>\n<p><b>Documentation:</b></p>\n<p><a href=\"http://blocks.readthedocs.io/en/latest/\" target=\"_blank\">http://blocks.readthedocs.io/en/latest/</a></p>\n<p><b>Summary:</b></p>\n<p>Similar to Lasagne, Blocks is a shot at adding a layer of abstraction on top of Theano to facilitate cleaner, simpler, more standardized definitions of deep learning models than writing raw Theano. It\u2019s written by the University of Montreal\u2019s lab, MILA \u2014 some of the same folks who contributed to the building of Theano and its first high level interface to neural network definitions, the deceased PyLearn2. It\u2019s a bit more flexible than Lasagne at the cost of having a slightly more difficult learning curve to use effectively. Among other things, Blocks has excellent support for recurrent neural network architectures, so it\u2019s worth a look if you\u2019re interested in exploring that genre of model. Alongside TensorFlow, Blocks is the library of choice for many of the APIs we\u2019ve deployed to production at indico.</p>\n<p><b>Pros:</b></p>\n<ul class=\"three_ul\">\n<li>Still very flexible\n<li>Higher layer of abstraction than Theano\n<li>Very well tested\n</li></li></li></ul>\n<p><b>Cons:</b></p>\n<ul class=\"three_ul\">\n<li>Substantial learning curve\n<li>Smaller community\n</li></li></ul>\n<p><b>Resources:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"http://blocks.readthedocs.io/en/latest/setup.html\" target=\"_blank\">Official installation guide</a>\n<li><a href=\"https://arxiv.org/pdf/1506.00619.pdf\" target=\"_blank\">Arxiv paper on the design of the Blocks library</a>\n<li><a href=\"https://www.reddit.com/r/MachineLearning/comments/4kpztm/lasagne_vs_blocks_for_deep_learning/\" target=\"_blank\">A reddit discussion on the differences between Blocks and Lasagne</a>\n<li><a href=\"https://github.com/mila-udem/fuel\" target=\"_blank\">Block\u2019s sister library for data pipelines, Fuel</a>\n</li></li></li></li></ul>\n<p><center><img alt=\"TensorFlow\" src=\"/wp-content/uploads/tensorflow-cats.jpg\" width=\"85%\"/></center></p>\n<h3><a href=\"https://github.com/tensorflow/tensorflow\" target=\"_blank\">TensorFlow</a></h3>\n<p>\u00a0<br>\n<b>Description:</b></br></p>\n<p>An open source software library for numerical computation using data flow graphs.</p>\n<p><b>Documentation:</b></p>\n<p><a href=\"https://www.tensorflow.org/api_docs/python/\" target=\"_blank\">https://www.tensorflow.org/api_docs/python/</a></p>\n<p><b>Summary:</b></p>\n<p>TensorFlow is a blend between lower level, symbolic computation libraries like Theano, and higher level, network specification libraries like Blocks and Lasagne. Although it\u2019s the newest member of the Python deep learning library collection, it likely has garnered the largest active community because it\u2019s backed by the Google Brain team. It offers support for running machine learning models across multiple GPUs, provides utilities for efficient data pipelining, and has built-in modules for the inspection, visualization, and serialization of models. More recently, the TensorFlow team decided to incorporate support for Keras, the next deep learning library on our list. The community seems to agree that although <a href=\"https://indico.io/blog/the-good-bad-ugly-of-tensorflow/\" target=\"_blank\">TensorFlow has its shortcomings</a>, the sheer size of its community and the massive amount of momentum behind the project mean that learning TensorFlow is a safe bet. Consequently, TensorFlow is our deep learning library of choice today at indico.</p>\n<p><b>Pros:</b></p>\n<ul class=\"three_ul\">\n<li>Backed by software giant Google\n<li>Very large community\n<li>Low level and high level interfaces to network training\n<li>Faster model compilation than Theano-based options\n<li>Clean multi-GPU support\n</li></li></li></li></li></ul>\n<p><b><strong>Cons:</strong></b></p>\n<ul class=\"three_ul\">\n<li>Initially slower at many benchmarks than Theano-based options, although Tensorflow is catching up.\n<li>RNN support is still outclassed by Theano\n</li></li></ul>\n<p><b>Resources:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"https://www.tensorflow.org/\" target=\"_blank\">Official TensorFlow website</a>\n<li><a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/g3doc/get_started/os_setup.md\" target=\"_blank\">Download and setup guide</a>\n<li><a href=\"https://indico.io/blog/the-good-bad-ugly-of-tensorflow/\" target=\"_blank\">indico\u2019s take on TensorFlow</a>\n<li><a href=\"https://github.com/nlintz/TensorFlow-Tutorials\" target=\"_blank\">A collection of TensorFlow tutorials</a>\n<li><a href=\"https://www.udacity.com/course/deep-learning--ud730\" target=\"_blank\">A Udacity machine learning course taught using TensorFlow</a>\n<li><a href=\"https://www.tensorflow.org/tutorials/mnist/beginners/\" target=\"_blank\">TensorFlow MNIST tutorial</a>\n<li><a href=\"https://indico.io/blog/tensorflow-data-inputs-part1-placeholders-protobufs-queues/\" target=\"_blank\">TensorFlow data input</a>\n</li></li></li></li></li></li></li></ul>\n<h3><a href=\"https://github.com/fchollet/keras\" target=\"_blank\">Keras</a></h3>\n<p>\u00a0<br/>\n<b>Description:</b></p>\n<p>Deep learning library for Python. Convnets, recurrent neural networks, and more. Runs on Theano or TensorFlow.</p>\n<p><b>Documentation:</b></p>\n<p><a href=\"https://keras.io/\" target=\"_blank\">https://keras.io/</a></p>\n<p><b>Summary:</b></p>\n<p>Keras is probably the highest level, most user friendly library of the bunch. It\u2019s written and maintained by Francis Chollet, another member of the Google Brain team. It allows users to choose whether the models they build are executed on Theano\u2019s or TensorFlow\u2019s symbolic graph. Keras\u2019 user interface is Torch-inspired, so if you have prior experience with machine learning in Lua, Keras is definitely worth a look. Thanks in part to excellent documentation and its relative ease of use, the Keras community is quite large and very active. Recently, the TensorFlow team announced plans to ship with Keras support built in, so soon Keras will be a subset of the TensorFlow project.</p>\n<p><b>Pros:</b></p>\n<ul class=\"three_ul\">\n<li>Your choice of a Theano or TensorFlow backend\n<li>Intuitive, high level interface\n<li>Easier learning curve\n</li></li></li></ul>\n<p><b>Cons:</b></p>\n<ul class=\"three_ul\">\n<li>Less flexible, more prescriptive than other options\n</li></ul>\n<p><b>Resources:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"https://keras.io/#installation\" target=\"_blank\">Official installation guide</a>\n<li><a href=\"https://groups.google.com/forum/#!forum/keras-users\" target=\"_blank\">Keras users Google group</a>\n<li><a href=\"https://github.com/fchollet/keras/tree/master/examples\" target=\"_blank\">Repository of Keras examples</a>\n<li><a href=\"https://github.com/fchollet/keras/tree/master/docker\" target=\"_blank\">Instructions for using Keras with Docker</a>\n<li><a href=\"https://github.com/fchollet/keras-resources\" target=\"_blank\">Repository of Keras tutorials by application area</a>\n</li></li></li></li></li></ul>\n<h3><a href=\"https://github.com/dmlc/mxnet\" target=\"_blank\">MXNet</a></h3>\n<p>\u00a0<br/>\n<b>Description:</b></p>\n<p>MXNet is a deep learning framework designed for both efficiency and flexibility.</p>\n<p><b>Documentation:</b></p>\n<p><a href=\"http://mxnet.io/api/python/index.html#python-api-reference\" target=\"_blank\">http://mxnet.io/api/python/index.html#python-api-reference</a></p>\n<p><b>Summary:</b></p>\n<p>MXNet is Amazon\u2019s library of choice for deep learning, and is perhaps the most performant library of the bunch. It has a data flow graph similar to Theano and TensorFlow, offers good support for multi-GPU configurations, has higher level model building blocks similar to that of Lasagne and Blocks, and can run on just about any hardware you can imagine (including mobile phones). Python support is just the tip of the iceberg \u2014 MXNet also offers interfaces to R, Julia, C++, Scala, Matlab, and Javascript. Choose MXNet if you\u2019re looking for performance that\u2019s second to none, but you must be willing to deal with a few of MXNet\u2019s quirks to get you there.</p>\n<p><b>Pros:</b></p>\n<ul class=\"three_ul\">\n<li>Blazing fast benchmarks\n<li>Extremely flexible\n</li></li></ul>\n<p><b>Cons:</b></p>\n<ul class=\"three_ul\">\n<li>Smallest community\n<li>Steeper learning curve than Theano\n</li></li></ul>\n<p><b>Resources:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"http://mxnet.io/get_started/\" target=\"_blank\">Official getting started guide</a>\n<li><a href=\"https://indico.io/blog/getting-started-with-mxnet/\" target=\"_blank\">indico\u2019s intro to MXNet</a>\n<li><a href=\"https://github.com/dmlc/mxnet/tree/master/example\" target=\"_blank\">Repository of MXNet examples</a>\n<li><a href=\"http://www.allthingsdistributed.com/2016/11/mxnet-default-framework-deep-learning-aws.html\" target=\"_blank\">Amazon\u2019s CTO\u2019s take on MXNet</a>\n<li><a href=\"https://arxiv.org/abs/1512.01274\" target=\"_blank\">MXNet Arxiv paper</a>\n</li></li></li></li></li></ul>\n<h3><a href=\"https://github.com/pytorch/pytorch\" target=\"_blank\">PyTorch</a></h3>\n<p>\u00a0<br/>\n<b>Description:</b></p>\n<p>Tensors and dynamic neural networks in Python with strong GPU acceleration.</p>\n<p><b>Documentation:</b></p>\n<p><a href=\"http://pytorch.org/docs/\" target=\"_blank\">http://pytorch.org/docs/</a></p>\n<p><b>Summary:</b></p>\n<p>Released just over a week ago, PyTorch is the new kid on the block in our list of deep learning frameworks for Python. It\u2019s a loose port of Lua\u2019s Torch library to Python, and is notable because it\u2019s backed by the Facebook Artificial Intelligence Research team (FAIR), and because it\u2019s <a href=\"http://pytorch.org/about/#dynamic-neural-networks-tape-based-autograd\" target=\"_blank\">designed to handle dynamic computation graphs</a> \u2014 a feature absent from the likes of Theano, TensorFlow, and derivatives. The jury is still out on what role PyTorch will play in the Python deep learning ecosystem, but all signs point to PyTorch being a very respectable alternative to the other frameworks on our list.</p>\n<p><b>Pros:</b></p>\n<ul class=\"three_ul\">\n<li>Organizational backing from Facebook\n<li>Clean support for dynamic graphs\n<li>Blend of high level and low level APIs\n</li></li></li></ul>\n<p><b>Cons:</b></p>\n<ul class=\"three_ul\">\n<li>Much less mature than alternatives (in their own words \u2014 \u201cWe are in an early-release Beta. Expect some adventures.\u201d)\n<li>Limited references / resources outside of the official documentation\n</li></li></ul>\n<p><b>Resources:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"http://pytorch.org/\" target=\"_blank\">Official PyTorch homepage</a>\n<li><a href=\"https://twitter.com/PyTorch\" target=\"_blank\">PyTorch twitter feed</a>\n<li><a href=\"https://github.com/pytorch/examples\" target=\"_blank\">Repository of PyTorch examples</a>\n<li><a href=\"https://github.com/pytorch/tutorials\" target=\"_blank\">Repository of PyTorch tutorials</a>\n</li></li></li></li></ul>\n<p><b>Bio: <a href=\"https://www.linkedin.com/in/madison-may-49a1924a\" target=\"_blank\">Madison May</a></b> is a developer, designer, and engineer, and is the CTO of <a href=\"https://indico.io/\" target=\"_blank\">indico Data Solutions</a>.</p>\n<p><a href=\"https://indico.io/blog/python-deep-learning-frameworks-reviewed/\" target=\"_blank\">Original</a>. Reposted with permission.</p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2017/02/deep-learning-artificial-intelligence-quest-agi.html\">Deep Learning, Artificial Intuition and the Quest for AGI</a>\n<li><a href=\"/2016/12/deep-learning-radically-different-machine-learning.html\">Why Deep Learning is Radically Different From Machine Learning</a>\n<li><a href=\"/2017/02/deep-learning-silver-bullet.html\">Is Deep Learning the Silver Bullet?</a>\n</li></li></li></ul>\n</div>\n<div class=\"page-link\"></div>\n<div class=\"pagi\">\n<hr class=\"grey-line\"/>\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2017/02/paw-chicago-learn-modeling-methods.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"/> <strong>Previous post</strong></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2017/02/data-science-vs-fake-news-contest.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/><br/>\n<div>\n<hr class=\"grey-line\"/><br/>\n<h2>Top Stories Past 30 Days</h2>\n<table align=\"center\" cellpadding=\"3\" cellspacing=\"10\" class=\"latn\" width=\"100%\">\n<tr>\n<td valign=\"top\" width=\"50%\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Popular</b></th></tr>\n<tr><td>\n<ol class=\"three_ol\"><li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-1-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-2-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n<li> <a href=\"/2018/05/simplilearn-9-must-have-skills-data-scientist.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-3-simplilearn');\"><b>9 Must-have skills you need to become a Data Scientist, updated</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-4-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/03/another-10-free-must-read-books-for-machine-learning-and-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-5-another-10-books');\"><b>Another 10 Free Must-Read Books for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-6-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/best-data-visualization-techniques.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-7-best-data-viz');\"><b>Best Data Visualization Techniques for small and large data</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td> <td valign=\"top\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Shared</b></th></tr>\n<tr><td><ol class=\"three_ol\">\n<li> <a href=\"/2019/04/another-10-free-must-see-courses-machine-learning-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-1-another-10-courses');\"><b>Another 10 Free Must-See Courses for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-2-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/03/r-vs-python-data-visualization.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-3-r-py-viz');\"><b>R vs Python for Data Visualization</b></a>\n<li> <a href=\"/2019/03/deep-learning-toolset-overview.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-4-dl-toolset');\"><b>The Deep Learning Toolset \u2014 An Overview</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-5-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-6-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-7-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<!--#content end--></div>\n<div id=\"sidebar\">\n<div class=\"latn\">\n<h3><b><a href=\"/news/index.html\">Latest News</a></b></h3>\n<ul style=\"font-size:14px; margin-top:5px\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/datarobot-delivering-trusted-ai-microsoft.html\">Delivering Trusted AI with DataRobot and Microsoft</a><li> <a href=\"https://www.kdnuggets.com/2019/04/formulated-ai-data-production-landscape.html\">AI and the data production landscape</a><li> <a href=\"https://www.kdnuggets.com/2019/04/most-desired-skill-data-science.html\">The most desired skill in data science</a><li> <a href=\"https://www.kdnuggets.com/2019/04/projects-include-data-science-portfolio.html\">Projects to Include in a Data Science Portfolio</a><li> <a href=\"https://www.kdnuggets.com/2019/04/rework-meet-worlds-leading-ai-deep-learning-experts.html\">Meet the World\u2019s Leading AI &amp; Deep Learning ...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/problem-data-science-job-postings.html\">The problem with data science job postings</a></li></li></li></li></li></li></ul>\n</div>\n<div>\n<script type=\"text/javascript\">kda_sid_write(kda_sid_n);</script>\n</div>\n<br/><script src=\"/aps/sbm.js\" type=\"text/javascript\"></script>\n</div>\n</div><div class=\"breadcrumbs_bottom\">\n<div class=\"breadcumb\">\n<br>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2017/index.html\">2017</a> \u00bb <a href=\"https://www.kdnuggets.com/2017/02/index.html\">Feb</a> \u00bb <a href=\"https://www.kdnuggets.com/2017/02/tutorials.html\">Tutorials, Overviews</a> \u00bb An Overview of Python Deep Learning Frameworks (\u00a0<a href=\"/2017/n08.html\">17:n08</a>\u00a0)    </br></div>\n</div>\n<!--#content_wrapper end--></div>\n<br>\n<div id=\"footer\">\n<br/>\u00a9 2019 KDnuggets. <a href=\"/about/index.html\">About KDnuggets</a>. \u00a0<a href=\"/news/privacy-policy.html\">Privacy policy</a>. <a href=\"/terms-of-service.html\">Terms of Service</a><br/>\u00a0\n<div class=\"kd_bottom\">\n<div class=\"footer-container\">\n<div class=\"footer-news\">\n<a href=\"/news/subscribe.html\" onclick=\"_gaq.push(['_trackPageview','/x/bot/sub']);\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a>\n</div>\n<div class=\"footer-sm\">\n<a href=\"https://twitter.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/twt']);\" target=\"_blank\"><img height=\"32\" src=\"/images/tw_c48.png\" width=\"32\"/></a>\n<a href=\"https://facebook.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/fb']);\" target=\"_blank\"><img alt=\"Facebook\" height=\"32\" src=\"/images/fb_c48.png\" width=\"32\"/></a>\n<a href=\"https://www.linkedin.com/groups/54257\" onclick=\"_gaq.push(['_trackPageview','/x/bot/in']);\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"32\" src=\"/images/in_c48.png\" width=\"32\"/></a>\n</div>\n</div>\n<div class=\"close-footer\">X</div>\n</div>\n<script type=\"text/javascript\">\n  jQuery('.close-footer').click(\n      function(){       \n         jQuery('.kd_bottom').hide();\n      }\n   );\n</script> </div>\n<div class=\"clear\"><!--blank--></div>\n</br></div>\n<div style=\"display: none;\"><div id=\"boxzilla-box-82996-content\"><script type=\"text/javascript\">(function() {\n\tif (!window.mc4wp) {\n\t\twindow.mc4wp = {\n\t\t\tlisteners: [],\n\t\t\tforms    : {\n\t\t\t\ton: function (event, callback) {\n\t\t\t\t\twindow.mc4wp.listeners.push({\n\t\t\t\t\t\tevent   : event,\n\t\t\t\t\t\tcallback: callback\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})();\n</script><!-- MailChimp for WordPress v4.1.14 - https://wordpress.org/plugins/mailchimp-for-wp/ --><form class=\"mc4wp-form mc4wp-form-77281\" data-id=\"77281\" data-name=\"Subscribe to KDnuggets News\" id=\"mc4wp-form-1\" method=\"post\"><div class=\"mc4wp-form-fields\"><div class=\"header-container\">\n<img align=\"left\" src=\"/wp-content/uploads/envelope.png\"><a href=\"/news/subscribe.html\">Get KDnuggets, a leading newsletter on AI, \r\n  Data Science, and Machine Learning</a>\n</img></div>\n<div class=\"form-fields\">\n<div class=\"field-container\"><label>Email:</label><input maxlength=\"60\" name=\"EMAIL\" placeholder=\"Your email\" required=\"\" size=\"30\" type=\"email\"/></div>\n<div class=\"field-container submit-container\"><div class=\"form-button\" onclick=\"document.getElementById('mc4wp-form-1').submit()\">Sign Up</div></div>\n</div>\n<label style=\"display: none !important;\">Leave this field empty if you're human: <input autocomplete=\"off\" name=\"_mc4wp_honeypot\" tabindex=\"-1\" type=\"text\" value=\"\"/></label><input name=\"_mc4wp_timestamp\" type=\"hidden\" value=\"1556338389\"/><input name=\"_mc4wp_form_id\" type=\"hidden\" value=\"77281\"/><input name=\"_mc4wp_form_element_id\" type=\"hidden\" value=\"mc4wp-form-1\"/></div><div class=\"mc4wp-response\"></div></form><!-- / MailChimp for WordPress Plugin -->\n</div></div><script type=\"text/javascript\">(function() {function addEventListener(element,event,handler) {\n\tif(element.addEventListener) {\n\t\telement.addEventListener(event,handler, false);\n\t} else if(element.attachEvent){\n\t\telement.attachEvent('on'+event,handler);\n\t}\n}function maybePrefixUrlField() {\n\tif(this.value.trim() !== '' && this.value.indexOf('http') !== 0) {\n\t\tthis.value = \"http://\" + this.value;\n\t}\n}\n\nvar urlFields = document.querySelectorAll('.mc4wp-form input[type=\"url\"]');\nif( urlFields && urlFields.length > 0 ) {\n\tfor( var j=0; j < urlFields.length; j++ ) {\n\t\taddEventListener(urlFields[j],'blur',maybePrefixUrlField);\n\t}\n}/* test if browser supports date fields */\nvar testInput = document.createElement('input');\ntestInput.setAttribute('type', 'date');\nif( testInput.type !== 'date') {\n\n\t/* add placeholder & pattern to all date fields */\n\tvar dateFields = document.querySelectorAll('.mc4wp-form input[type=\"date\"]');\n\tfor(var i=0; i<dateFields.length; i++) {\n\t\tif(!dateFields[i].placeholder) {\n\t\t\tdateFields[i].placeholder = 'YYYY-MM-DD';\n\t\t}\n\t\tif(!dateFields[i].pattern) {\n\t\t\tdateFields[i].pattern = '[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])';\n\t\t}\n\t}\n}\n\n})();</script><script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_options = {\"testMode\":\"\",\"boxes\":[{\"id\":82996,\"icon\":\"&times;\",\"content\":\"\",\"css\":{\"background_color\":\"#eeee22\",\"width\":600,\"border_width\":2,\"border_style\":\"double\",\"position\":\"center\"},\"trigger\":{\"method\":\"time_on_page\",\"value\":\"3\"},\"animation\":\"fade\",\"cookie\":{\"triggered\":0,\"dismissed\":336},\"rehide\":true,\"position\":\"center\",\"screenWidthCondition\":{\"condition\":\"larger\",\"value\":500},\"closable\":true,\"post\":{\"id\":82996,\"title\":\"Subscribe to KDnuggets\",\"slug\":\"subscribe-to-kdnuggets\"}}]};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla/assets/js/script.min.js?ver=3.2.5\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_stats_config = {\"ajaxurl\":\"https:\\/\\/www.kdnuggets.com\\/wp-admin\\/admin-ajax.php?action=boxzilla_stats_track\"};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla-stats/assets/js/tracking.min.js?ver=1.0.4\" type=\"text/javascript\"></script>\n<script src=\"https://www.kdnuggets.com/wp-includes/js/wp-embed.min.js?ver=4.9.10\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar mc4wp_forms_config = [];\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/forms-api.min.js?ver=4.1.14\" type=\"text/javascript\"></script>\n<!--[if lte IE 9]>\n<script type='text/javascript' src='https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/third-party/placeholders.min.js?ver=4.1.14'></script>\n<![endif]-->\n<!--/.main_wrapper--></body></html>\n<script src=\"https://s7.addthis.com/js/300/addthis_widget.js#pubid=gpsaddthis\" type=\"text/javascript\"></script>\n\n\n<!-- Dynamic page generated in 0.611 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2019-04-27 00:13:09 -->\n<!-- Compression = gzip -->", "content_tokenized": ["madison", "may", "indico", "recent", "stumbl", "across", "old", "data", "scienc", "stack", "exchang", "answer", "mine", "the", "topic", "the", "best", "python", "librari", "for", "neural", "network", "and", "struck", "how", "much", "the", "python", "deep", "learn", "ecosystem", "has", "evolv", "over", "the", "cours", "the", "past", "num", "year", "the", "librari", "recommend", "juli", "num", "pylearnnum", "longer", "activ", "develop", "maintain", "but", "whole", "host", "deep", "learn", "librari", "have", "sprung", "take", "place", "each", "has", "own", "strength", "and", "weak", "use", "most", "the", "technolog", "this", "list", "product", "develop", "indico", "but", "for", "the", "few", "that", "haven", "pull", "from", "the", "experi", "other", "help", "give", "clear", "comprehens", "pictur", "the", "python", "deep", "learn", "ecosystem", "num", "particular", "look", "theano", "lasagn", "block", "tensorflow", "kera", "mxnet", "pytorch", "theano", "descript", "theano", "python", "librari", "that", "allow", "defin", "optim", "and", "evalu", "mathemat", "express", "involv", "multidimension", "array", "effici", "work", "with", "gpus", "and", "perform", "effici", "symbol", "differenti", "document", "softwaretheano", "summari", "theano", "the", "numer", "comput", "workhors", "that", "power", "mani", "the", "other", "deep", "learn", "framework", "our", "list", "built", "fr\u00e9d\u00e9ric", "bastien", "and", "the", "excel", "research", "team", "behind", "the", "univers", "montreal", "lab", "quit", "low", "level", "and", "order", "write", "effect", "theano", "need", "quit", "familiar", "with", "the", "algorithm", "that", "are", "hidden", "away", "behind", "the", "scene", "other", "framework", "theano", "goto", "librari", "have", "substanti", "academ", "machin", "learn", "expertis", "are", "look", "for", "veri", "fine", "grain", "control", "model", "want", "implement", "novel", "unusu", "model", "general", "theano", "trade", "eas", "use", "for", "flexibl", "pros", "flexibl", "perform", "use", "proper", "con", "substanti", "learn", "curv", "lower", "level", "compil", "complex", "symbol", "graph", "can", "slow", "resourc", "instal", "guid", "offici", "theano", "tutori", "theano", "slideshow", "and", "practic", "exercis", "from", "linear", "regress", "cnns", "with", "theano", "introduct", "deep", "learn", "with", "python", "theano", "video", "tutori", "lasagn", "descript", "lightweight", "librari", "for", "build", "and", "train", "neural", "network", "theano", "document", "summari", "sinc", "theano", "aim", "first", "and", "foremost", "librari", "for", "symbol", "mathemat", "lasagn", "offer", "abstract", "top", "theano", "that", "make", "more", "suitabl", "for", "deep", "learn", "written", "and", "maintain", "primarili", "sander", "dieleman", "current", "deepmind", "research", "scientist", "instead", "specifi", "network", "model", "term", "function", "relationship", "between", "symbol", "variabl", "lasagn", "allow", "user", "think", "the", "layer", "level", "offer", "build", "block", "like", "convnumdlay", "and", "dropoutlay", "for", "user", "work", "with", "lasagn", "requir", "littl", "sacrific", "term", "flexibl", "while", "provid", "wealth", "common", "compon", "help", "with", "layer", "definit", "layer", "initi", "model", "regular", "model", "monitor", "and", "model", "train", "pros", "still", "veri", "flexibl", "higher", "layer", "abstract", "than", "theano", "doc", "and", "code", "contain", "assort", "pasta", "pun", "con", "smaller", "communiti", "resourc", "offici", "github", "page", "offici", "instal", "guid", "offici", "lasagn", "tutori", "exampl", "lasagn", "code", "block", "descript", "theano", "framework", "for", "build", "and", "train", "neural", "network", "document", "enlatest", "summari", "similar", "lasagn", "block", "shot", "layer", "abstract", "top", "theano", "facilit", "cleaner", "simpler", "more", "standard", "definit", "deep", "learn", "model", "than", "write", "raw", "theano", "written", "the", "univers", "montreal", "lab", "some", "the", "same", "folk", "who", "contribut", "the", "build", "theano", "and", "first", "high", "level", "interfac", "neural", "network", "definit", "the", "deceas", "pylearnnum", "bit", "more", "flexibl", "than", "lasagn", "the", "cost", "have", "slight", "more", "difficult", "learn", "curv", "use", "effect", "among", "other", "thing", "block", "has", "excel", "support", "for", "recurr", "neural", "network", "architectur", "worth", "look", "interest", "explor", "that", "genr", "model", "alongsid", "tensorflow", "block", "the", "librari", "choic", "for", "mani", "the", "api", "deploy", "product", "indico", "pros", "still", "veri", "flexibl", "higher", "layer", "abstract", "than", "theano", "veri", "well", "test", "con", "substanti", "learn", "curv", "smaller", "communiti", "resourc", "offici", "instal", "guid", "arxiv", "paper", "the", "design", "the", "block", "librari", "reddit", "discuss", "the", "differ", "between", "block", "and", "lasagn", "block", "sister", "librari", "for", "data", "pipelin", "fuel", "tensorflow", "descript", "open", "sourc", "softwar", "librari", "for", "numer", "comput", "use", "data", "flow", "graph", "document", "apidocspython", "summari", "tensorflow", "blend", "between", "lower", "level", "symbol", "comput", "librari", "like", "theano", "and", "higher", "level", "network", "specif", "librari", "like", "block", "and", "lasagn", "although", "the", "newest", "member", "the", "python", "deep", "learn", "librari", "collect", "like", "has", "garner", "the", "largest", "activ", "communiti", "becaus", "back", "the", "googl", "brain", "team", "offer", "support", "for", "run", "machin", "learn", "model", "across", "multipl", "gpus", "provid", "util", "for", "effici", "data", "pipelin", "and", "has", "builtin", "modul", "for", "the", "inspect", "visual", "and", "serial", "model", "more", "recent", "the", "tensorflow", "team", "decid", "incorpor", "support", "for", "kera", "the", "next", "deep", "learn", "librari", "our", "list", "the", "communiti", "seem", "agre", "that", "although", "tensorflow", "has", "shortcom", "the", "sheer", "size", "communiti", "and", "the", "massiv", "amount", "momentum", "behind", "the", "project", "mean", "that", "learn", "tensorflow", "safe", "bet", "consequ", "tensorflow", "our", "deep", "learn", "librari", "choic", "today", "indico", "pros", "back", "softwar", "giant", "googl", "veri", "larg", "communiti", "low", "level", "and", "high", "level", "interfac", "network", "train", "faster", "model", "compil", "than", "theanobas", "option", "clean", "multigpu", "support", "con", "initi", "slower", "mani", "benchmark", "than", "theanobas", "option", "although", "tensorflow", "catch", "support", "still", "outclass", "theano", "resourc", "offici", "tensorflow", "websit", "download", "and", "setup", "guid", "indico", "take", "tensorflow", "collect", "tensorflow", "tutori", "udac", "machin", "learn", "cours", "taught", "use", "tensorflow", "tensorflow", "tutori", "tensorflow", "data", "input", "kera", "descript", "deep", "learn", "librari", "for", "python", "convnet", "recurr", "neural", "network", "and", "more", "run", "theano", "tensorflow", "document", "summari", "kera", "probabl", "the", "highest", "level", "most", "user", "friend", "librari", "the", "bunch", "written", "and", "maintain", "franci", "chollet", "anoth", "member", "the", "googl", "brain", "team", "allow", "user", "choos", "whether", "the", "model", "they", "build", "are", "execut", "theano", "tensorflow", "symbol", "graph", "kera", "user", "interfac", "torchinspir", "have", "prior", "experi", "with", "machin", "learn", "lua", "kera", "definit", "worth", "look", "thank", "part", "excel", "document", "and", "relat", "eas", "use", "the", "kera", "communiti", "quit", "larg", "and", "veri", "activ", "recent", "the", "tensorflow", "team", "announc", "plan", "ship", "with", "kera", "support", "built", "soon", "kera", "will", "subset", "the", "tensorflow", "project", "pros", "choic", "theano", "tensorflow", "backend", "intuit", "high", "level", "interfac", "easier", "learn", "curv", "con", "less", "flexibl", "more", "prescript", "than", "other", "option", "resourc", "offici", "instal", "guid", "kera", "user", "googl", "group", "repositori", "kera", "exampl", "instruct", "for", "use", "kera", "with", "docker", "repositori", "kera", "tutori", "applic", "area", "mxnet", "descript", "mxnet", "deep", "learn", "framework", "design", "for", "both", "effici", "and", "flexibl", "document", "apipythonindexhtml", "pythonapirefer", "summari", "mxnet", "amazon", "librari", "choic", "for", "deep", "learn", "and", "perhap", "the", "most", "perform", "librari", "the", "bunch", "has", "data", "flow", "graph", "similar", "theano", "and", "tensorflow", "offer", "good", "support", "for", "multigpu", "configur", "has", "higher", "level", "model", "build", "block", "similar", "that", "lasagn", "and", "block", "and", "can", "run", "just", "about", "ani", "hardwar", "can", "imagin", "includ", "mobil", "phone", "python", "support", "just", "the", "tip", "the", "iceberg", "mxnet", "also", "offer", "interfac", "julia", "scala", "matlab", "and", "javascript", "choos", "mxnet", "look", "for", "perform", "that", "second", "none", "but", "must", "will", "deal", "with", "few", "mxnet", "quirk", "get", "there", "pros", "blaze", "fast", "benchmark", "extrem", "flexibl", "con", "smallest", "communiti", "steeper", "learn", "curv", "than", "theano", "resourc", "offici", "get", "start", "guid", "indico", "intro", "mxnet", "repositori", "mxnet", "exampl", "amazon", "take", "mxnet", "mxnet", "arxiv", "paper", "pytorch", "descript", "tensor", "and", "dynam", "neural", "network", "python", "with", "strong", "acceler", "document", "doc", "summari", "releas", "just", "over", "week", "ago", "pytorch", "the", "new", "kid", "the", "block", "our", "list", "deep", "learn", "framework", "for", "python", "loos", "port", "lua", "torch", "librari", "python", "and", "notabl", "becaus", "back", "the", "facebook", "artifici", "intellig", "research", "team", "and", "becaus", "design", "handl", "dynam", "comput", "graph", "featur", "absent", "from", "the", "like", "theano", "tensorflow", "and", "deriv", "the", "juri", "still", "out", "what", "role", "pytorch", "will", "play", "the", "python", "deep", "learn", "ecosystem", "but", "all", "sign", "point", "pytorch", "veri", "respect", "altern", "the", "other", "framework", "our", "list", "pros", "organiz", "back", "from", "facebook", "clean", "support", "for", "dynam", "graph", "blend", "high", "level", "and", "low", "level", "api", "con", "much", "less", "matur", "than", "altern", "their", "own", "word", "are", "earlyreleas", "beta", "expect", "some", "adventur", "limit", "refer", "resourc", "outsid", "the", "offici", "document", "resourc", "offici", "pytorch", "homepag", "pytorch", "twitter", "feed", "repositori", "pytorch", "exampl", "repositori", "pytorch", "tutori", "bio", "madison", "may", "develop", "design", "and", "engin", "and", "the", "indico", "data", "solut", "origin", "repost", "with", "permiss", "relat", "deep", "learn", "artifici", "intuit", "and", "the", "quest", "for", "whi", "deep", "learn", "radic", "differ", "from", "machin", "learn", "deep", "learn", "the", "silver", "bullet"], "timestamp_scraper": 1556378000.700924, "title": "An Overview of Python Deep Learning Frameworks", "read_time": 453.29999999999995, "content_html": "<div class=\"post\" id=\"post-\">\n<p><b>By Madison May, <a href=\"https://indico.io/\" target=\"_blank\">indico</a></b>.</p>\n<p>I recently stumbled across an old Data Science Stack Exchange answer of mine on the topic of the <a href=\"http://datascience.stackexchange.com/a/695/684\" target=\"_blank\">\u201cBest Python library for neural networks\u201d</a>, and it struck me how much the Python deep learning ecosystem has evolved over the course of the past 2.5 years. The library I recommended in July 2014, <code>pylearn2</code>, is no longer actively developed or maintained, but a whole host of deep learning libraries have sprung up to take its place. Each has its own strengths and weaknesses. We\u2019ve used most of the technologies on this list in production or development at indico, but for the few that we haven\u2019t, I\u2019ll pull from the experiences of others to help give a clear, comprehensive picture of the Python deep learning ecosystem of 2017.</p>\n<p><center><img alt=\"Python\" deep=\"\" learning\"=\"\" src=\"/wp-content/uploads/python-deep-learning.jpg\" width=\"85%\"/></center></p>\n<p>In particular, we\u2019ll be looking at:</p>\n<ul class=\"three_ul\">\n<li>Theano\n<li>Lasagne\n<li>Blocks\n<li>TensorFlow\n<li>Keras\n<li>MXNet\n<li>PyTorch\n</li></li></li></li></li></li></li></ul>\n<h3><a href=\"https://github.com/Theano/Theano\" target=\"_blank\">Theano</a></h3>\n<p>\u00a0<br>\n<b>Description:</b></br></p>\n<p>Theano is a Python library that allows you to define, optimize, and evaluate mathematical expressions involving multi-dimensional arrays efficiently. It works with GPUs and performs efficient symbolic differentiation.</p>\n<p><b>Documentation:</b></p>\n<p><a href=\"http://deeplearning.net/software/theano/\" target=\"_blank\">http://deeplearning.net/software/theano/</a></p>\n<p><b>Summary:</b></p>\n<p>Theano is the numerical computing workhorse that powers many of the other deep learning frameworks on our list. It was built by Fr\u00e9d\u00e9ric Bastien and the excellent research team behind the University of Montreal\u2019s lab, MILA. Its API is quite low level, and in order to write effective Theano you need to be quite familiar with the algorithms that are hidden away behind the scenes in other frameworks. Theano is a go-to library if you have substantial academic machine learning expertise, are looking for very fine grained control of your models, or want to implement a novel or unusual model. In general, Theano trades ease of use for flexibility.</p>\n<p><b>Pros:</b></p>\n<ul class=\"three_ul\">\n<li>Flexible\n<li>Performant if used properly\n</li></li></ul>\n<p><b>Cons:</b></p>\n<ul class=\"three_ul\">\n<li>Substantial learning curve\n<li>Lower level API\n<li>Compiling complex symbolic graphs can be slow\n</li></li></li></ul>\n<p><b>Resources:</b></p>\n<ul class=\"three_ul\" v=\"\">\n<li><a href=\"http://deeplearning.net/software/theano/install.html\" target=\"_blank\">Installation guide</a>\n<li><a href=\"http://deeplearning.net/software/theano/tutorial/\" target=\"_blank\">Official Theano tutorial</a>\n<li><a href=\"https://github.com/goodfeli/theano_exercises\" target=\"_blank\">Theano slideshow and practice exercises</a>\n<li><a href=\"https://github.com/Newmu/Theano-Tutorials\" target=\"_blank\">From linear regression to CNNs with Theano</a>\n<li><a href=\"https://indico.io/blog/introduction-to-deep-learning-with-python-and-theano-2/\" target=\"_blank\">Introduction to Deep Learning with Python &amp; Theano (MNIST video tutorial)</a>\n</li></li></li></li></li></ul>\n<h3><a href=\"https://github.com/Lasagne/Lasagne\" target=\"_blank\">Lasagne</a></h3>\n<p>\u00a0<br>\n<b>Description:</b></br></p>\n<p>Lightweight library for building and training neural networks in Theano.</p>\n<p><b>Documentation:</b></p>\n<p><a href=\"http://lasagne.readthedocs.org/\" target=\"_blank\">http://lasagne.readthedocs.org/</a></p>\n<p><b>Summary:</b></p>\n<p>Since Theano aims first and foremost to be a library for symbolic mathematics, Lasagne offers abstractions on top of Theano that make it more suitable for deep learning. It\u2019s written and maintained primarily by Sander Dieleman, a current DeepMind research scientist. Instead of specifying network models in terms of function relationships between symbolic variables, Lasagne allows users to think at the <code>Layer</code> level, offering building blocks like \u201cConv2DLayer\u201d and \u201cDropoutLayer\u201d for users to work with. Lasagne requires little sacrifice in terms of flexibility while providing a wealth of common components to help with layer definition, layer initialization, model regularization, model monitoring, and model training.</p>\n<p><b>Pros:</b></p>\n<ul class=\"three_ul\">\n<li>Still very flexible\n<li>Higher layer of abstraction than Theano\n<li>Docs and code contain an assortment of pasta puns\n</li></li></li></ul>\n<p><b>Cons:</b></p>\n<ul class=\"three_ul\">\n<li>Smaller community\n</li></ul>\n<p><b>Resources:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"https://github.com/Lasagne/Lasagne\" target=\"_blank\">Official GitHub page</a>\n<li><a href=\"http://lasagne.readthedocs.io/en/latest/user/installation.html\" target=\"_blank\">Official installation guide</a>\n<li><a href=\"http://lasagne.readthedocs.io/en/latest/user/tutorial.html\" target=\"_blank\">Official Lasagne tutorial</a>\n<li><a href=\"https://github.com/Lasagne/Lasagne/tree/master/examples\" target=\"_blank\">Example Lasagne code</a>\n</li></li></li></li></ul>\n<h3><a href=\"https://github.com/mila-udem/blocks\" target=\"_blank\">Blocks</a></h3>\n<p>\u00a0<br>\n<b>Description:</b></br></p>\n<p>A Theano framework for building and training neural networks.</p>\n<p><b>Documentation:</b></p>\n<p><a href=\"http://blocks.readthedocs.io/en/latest/\" target=\"_blank\">http://blocks.readthedocs.io/en/latest/</a></p>\n<p><b>Summary:</b></p>\n<p>Similar to Lasagne, Blocks is a shot at adding a layer of abstraction on top of Theano to facilitate cleaner, simpler, more standardized definitions of deep learning models than writing raw Theano. It\u2019s written by the University of Montreal\u2019s lab, MILA \u2014 some of the same folks who contributed to the building of Theano and its first high level interface to neural network definitions, the deceased PyLearn2. It\u2019s a bit more flexible than Lasagne at the cost of having a slightly more difficult learning curve to use effectively. Among other things, Blocks has excellent support for recurrent neural network architectures, so it\u2019s worth a look if you\u2019re interested in exploring that genre of model. Alongside TensorFlow, Blocks is the library of choice for many of the APIs we\u2019ve deployed to production at indico.</p>\n<p><b>Pros:</b></p>\n<ul class=\"three_ul\">\n<li>Still very flexible\n<li>Higher layer of abstraction than Theano\n<li>Very well tested\n</li></li></li></ul>\n<p><b>Cons:</b></p>\n<ul class=\"three_ul\">\n<li>Substantial learning curve\n<li>Smaller community\n</li></li></ul>\n<p><b>Resources:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"http://blocks.readthedocs.io/en/latest/setup.html\" target=\"_blank\">Official installation guide</a>\n<li><a href=\"https://arxiv.org/pdf/1506.00619.pdf\" target=\"_blank\">Arxiv paper on the design of the Blocks library</a>\n<li><a href=\"https://www.reddit.com/r/MachineLearning/comments/4kpztm/lasagne_vs_blocks_for_deep_learning/\" target=\"_blank\">A reddit discussion on the differences between Blocks and Lasagne</a>\n<li><a href=\"https://github.com/mila-udem/fuel\" target=\"_blank\">Block\u2019s sister library for data pipelines, Fuel</a>\n</li></li></li></li></ul>\n<p><center><img alt=\"TensorFlow\" src=\"/wp-content/uploads/tensorflow-cats.jpg\" width=\"85%\"/></center></p>\n<h3><a href=\"https://github.com/tensorflow/tensorflow\" target=\"_blank\">TensorFlow</a></h3>\n<p>\u00a0<br>\n<b>Description:</b></br></p>\n<p>An open source software library for numerical computation using data flow graphs.</p>\n<p><b>Documentation:</b></p>\n<p><a href=\"https://www.tensorflow.org/api_docs/python/\" target=\"_blank\">https://www.tensorflow.org/api_docs/python/</a></p>\n<p><b>Summary:</b></p>\n<p>TensorFlow is a blend between lower level, symbolic computation libraries like Theano, and higher level, network specification libraries like Blocks and Lasagne. Although it\u2019s the newest member of the Python deep learning library collection, it likely has garnered the largest active community because it\u2019s backed by the Google Brain team. It offers support for running machine learning models across multiple GPUs, provides utilities for efficient data pipelining, and has built-in modules for the inspection, visualization, and serialization of models. More recently, the TensorFlow team decided to incorporate support for Keras, the next deep learning library on our list. The community seems to agree that although <a href=\"https://indico.io/blog/the-good-bad-ugly-of-tensorflow/\" target=\"_blank\">TensorFlow has its shortcomings</a>, the sheer size of its community and the massive amount of momentum behind the project mean that learning TensorFlow is a safe bet. Consequently, TensorFlow is our deep learning library of choice today at indico.</p>\n<p><b>Pros:</b></p>\n<ul class=\"three_ul\">\n<li>Backed by software giant Google\n<li>Very large community\n<li>Low level and high level interfaces to network training\n<li>Faster model compilation than Theano-based options\n<li>Clean multi-GPU support\n</li></li></li></li></li></ul>\n<p><b><strong>Cons:</strong></b></p>\n<ul class=\"three_ul\">\n<li>Initially slower at many benchmarks than Theano-based options, although Tensorflow is catching up.\n<li>RNN support is still outclassed by Theano\n</li></li></ul>\n<p><b>Resources:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"https://www.tensorflow.org/\" target=\"_blank\">Official TensorFlow website</a>\n<li><a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/g3doc/get_started/os_setup.md\" target=\"_blank\">Download and setup guide</a>\n<li><a href=\"https://indico.io/blog/the-good-bad-ugly-of-tensorflow/\" target=\"_blank\">indico\u2019s take on TensorFlow</a>\n<li><a href=\"https://github.com/nlintz/TensorFlow-Tutorials\" target=\"_blank\">A collection of TensorFlow tutorials</a>\n<li><a href=\"https://www.udacity.com/course/deep-learning--ud730\" target=\"_blank\">A Udacity machine learning course taught using TensorFlow</a>\n<li><a href=\"https://www.tensorflow.org/tutorials/mnist/beginners/\" target=\"_blank\">TensorFlow MNIST tutorial</a>\n<li><a href=\"https://indico.io/blog/tensorflow-data-inputs-part1-placeholders-protobufs-queues/\" target=\"_blank\">TensorFlow data input</a>\n</li></li></li></li></li></li></li></ul>\n<h3><a href=\"https://github.com/fchollet/keras\" target=\"_blank\">Keras</a></h3>\n<p>\u00a0<br/>\n<b>Description:</b></p>\n<p>Deep learning library for Python. Convnets, recurrent neural networks, and more. Runs on Theano or TensorFlow.</p>\n<p><b>Documentation:</b></p>\n<p><a href=\"https://keras.io/\" target=\"_blank\">https://keras.io/</a></p>\n<p><b>Summary:</b></p>\n<p>Keras is probably the highest level, most user friendly library of the bunch. It\u2019s written and maintained by Francis Chollet, another member of the Google Brain team. It allows users to choose whether the models they build are executed on Theano\u2019s or TensorFlow\u2019s symbolic graph. Keras\u2019 user interface is Torch-inspired, so if you have prior experience with machine learning in Lua, Keras is definitely worth a look. Thanks in part to excellent documentation and its relative ease of use, the Keras community is quite large and very active. Recently, the TensorFlow team announced plans to ship with Keras support built in, so soon Keras will be a subset of the TensorFlow project.</p>\n<p><b>Pros:</b></p>\n<ul class=\"three_ul\">\n<li>Your choice of a Theano or TensorFlow backend\n<li>Intuitive, high level interface\n<li>Easier learning curve\n</li></li></li></ul>\n<p><b>Cons:</b></p>\n<ul class=\"three_ul\">\n<li>Less flexible, more prescriptive than other options\n</li></ul>\n<p><b>Resources:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"https://keras.io/#installation\" target=\"_blank\">Official installation guide</a>\n<li><a href=\"https://groups.google.com/forum/#!forum/keras-users\" target=\"_blank\">Keras users Google group</a>\n<li><a href=\"https://github.com/fchollet/keras/tree/master/examples\" target=\"_blank\">Repository of Keras examples</a>\n<li><a href=\"https://github.com/fchollet/keras/tree/master/docker\" target=\"_blank\">Instructions for using Keras with Docker</a>\n<li><a href=\"https://github.com/fchollet/keras-resources\" target=\"_blank\">Repository of Keras tutorials by application area</a>\n</li></li></li></li></li></ul>\n<h3><a href=\"https://github.com/dmlc/mxnet\" target=\"_blank\">MXNet</a></h3>\n<p>\u00a0<br/>\n<b>Description:</b></p>\n<p>MXNet is a deep learning framework designed for both efficiency and flexibility.</p>\n<p><b>Documentation:</b></p>\n<p><a href=\"http://mxnet.io/api/python/index.html#python-api-reference\" target=\"_blank\">http://mxnet.io/api/python/index.html#python-api-reference</a></p>\n<p><b>Summary:</b></p>\n<p>MXNet is Amazon\u2019s library of choice for deep learning, and is perhaps the most performant library of the bunch. It has a data flow graph similar to Theano and TensorFlow, offers good support for multi-GPU configurations, has higher level model building blocks similar to that of Lasagne and Blocks, and can run on just about any hardware you can imagine (including mobile phones). Python support is just the tip of the iceberg \u2014 MXNet also offers interfaces to R, Julia, C++, Scala, Matlab, and Javascript. Choose MXNet if you\u2019re looking for performance that\u2019s second to none, but you must be willing to deal with a few of MXNet\u2019s quirks to get you there.</p>\n<p><b>Pros:</b></p>\n<ul class=\"three_ul\">\n<li>Blazing fast benchmarks\n<li>Extremely flexible\n</li></li></ul>\n<p><b>Cons:</b></p>\n<ul class=\"three_ul\">\n<li>Smallest community\n<li>Steeper learning curve than Theano\n</li></li></ul>\n<p><b>Resources:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"http://mxnet.io/get_started/\" target=\"_blank\">Official getting started guide</a>\n<li><a href=\"https://indico.io/blog/getting-started-with-mxnet/\" target=\"_blank\">indico\u2019s intro to MXNet</a>\n<li><a href=\"https://github.com/dmlc/mxnet/tree/master/example\" target=\"_blank\">Repository of MXNet examples</a>\n<li><a href=\"http://www.allthingsdistributed.com/2016/11/mxnet-default-framework-deep-learning-aws.html\" target=\"_blank\">Amazon\u2019s CTO\u2019s take on MXNet</a>\n<li><a href=\"https://arxiv.org/abs/1512.01274\" target=\"_blank\">MXNet Arxiv paper</a>\n</li></li></li></li></li></ul>\n<h3><a href=\"https://github.com/pytorch/pytorch\" target=\"_blank\">PyTorch</a></h3>\n<p>\u00a0<br/>\n<b>Description:</b></p>\n<p>Tensors and dynamic neural networks in Python with strong GPU acceleration.</p>\n<p><b>Documentation:</b></p>\n<p><a href=\"http://pytorch.org/docs/\" target=\"_blank\">http://pytorch.org/docs/</a></p>\n<p><b>Summary:</b></p>\n<p>Released just over a week ago, PyTorch is the new kid on the block in our list of deep learning frameworks for Python. It\u2019s a loose port of Lua\u2019s Torch library to Python, and is notable because it\u2019s backed by the Facebook Artificial Intelligence Research team (FAIR), and because it\u2019s <a href=\"http://pytorch.org/about/#dynamic-neural-networks-tape-based-autograd\" target=\"_blank\">designed to handle dynamic computation graphs</a> \u2014 a feature absent from the likes of Theano, TensorFlow, and derivatives. The jury is still out on what role PyTorch will play in the Python deep learning ecosystem, but all signs point to PyTorch being a very respectable alternative to the other frameworks on our list.</p>\n<p><b>Pros:</b></p>\n<ul class=\"three_ul\">\n<li>Organizational backing from Facebook\n<li>Clean support for dynamic graphs\n<li>Blend of high level and low level APIs\n</li></li></li></ul>\n<p><b>Cons:</b></p>\n<ul class=\"three_ul\">\n<li>Much less mature than alternatives (in their own words \u2014 \u201cWe are in an early-release Beta. Expect some adventures.\u201d)\n<li>Limited references / resources outside of the official documentation\n</li></li></ul>\n<p><b>Resources:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"http://pytorch.org/\" target=\"_blank\">Official PyTorch homepage</a>\n<li><a href=\"https://twitter.com/PyTorch\" target=\"_blank\">PyTorch twitter feed</a>\n<li><a href=\"https://github.com/pytorch/examples\" target=\"_blank\">Repository of PyTorch examples</a>\n<li><a href=\"https://github.com/pytorch/tutorials\" target=\"_blank\">Repository of PyTorch tutorials</a>\n</li></li></li></li></ul>\n<p><b>Bio: <a href=\"https://www.linkedin.com/in/madison-may-49a1924a\" target=\"_blank\">Madison May</a></b> is a developer, designer, and engineer, and is the CTO of <a href=\"https://indico.io/\" target=\"_blank\">indico Data Solutions</a>.</p>\n<p><a href=\"https://indico.io/blog/python-deep-learning-frameworks-reviewed/\" target=\"_blank\">Original</a>. Reposted with permission.</p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2017/02/deep-learning-artificial-intelligence-quest-agi.html\">Deep Learning, Artificial Intuition and the Quest for AGI</a>\n<li><a href=\"/2016/12/deep-learning-radically-different-machine-learning.html\">Why Deep Learning is Radically Different From Machine Learning</a>\n<li><a href=\"/2017/02/deep-learning-silver-bullet.html\">Is Deep Learning the Silver Bullet?</a>\n</li></li></li></ul>\n</div> ", "website": "kdnuggets"}