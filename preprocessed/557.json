{"content": "By Sagar Sharma, Machine Learning & Programming Aficionado. Let\u2019s\u00a0 visualize \u00a0to improve your prediction... Let us say, you are writing a nice and clean Machine Learning code (e.g. Linear Regression). You code is OK, first you divided your dataset into two parts, \"Training Set and Testing Set\" as usual with the function like\u00a0 train_test_split and with some\u00a0 random factor. Your prediction could be slightly under or overfit, like the figures below. Fig: Under and Over-Fit Prediction and the results are not changing. So what can we do? As the name of the suggests, cross-validation is the next fun thing after learning\u00a0 Linear Regression \u00a0because it helps to improve your prediction using the\u00a0 K-Fold\u00a0 strategy. What is K-Fold you asked? Everything is explained below with\u00a0 Code . The Full Code\u00a0:) Fig:- Cross Validation with Visualization Code Insight: The above code is divided into 4 steps... 1. Load \u00a0and\u00a0 Divide target \u00a0dataset. Fig:- Load the\u00a0dataset We are copying the target in dataset to\u00a0 y\u00a0 variable .\u00a0 To see the dataset uncomment the\u00a0 print \u00a0line. 2.\u00a0 Model Selection Fig:- Model Selection () Just to make things simple we will use Linear Regression. To learn about it more click on \u201c Linear Regression: The Easier Way \u201d Post. 3. Cross-Validation\u00a0:) Fig:- Cross Validation in\u00a0sklearn It is a process and also a function in the sklearn  where, model\u00a0 is the model we selected on which we want to perform cross-validation data\u00a0 is the data. target\u00a0 is the target values w.r.t. the data. cv\u00a0 (optional)is the total number of folds (a.k.a.\u00a0 K-Fold\u00a0 ). In this process, we don\u2019t divide the data in two sets like usual (training and test set) like shown below. Fig:- Train set (Blue)and Test set\u00a0(Red) But we divide the dataset into equal\u00a0 K \u00a0parts ( K-Folds or\u00a0 cv ).\u00a0 To improve the prediction and to generalize better.\u00a0 Then train the model on the bigger dataset and test on the smaller dataset. Let us say the\u00a0 cv \u00a0 is\u00a0 6. Fig:- 6 equal folds or\u00a0parts Now, the first iteration of model splitting will look something like this where Red is test & Blue is Train data. Fig:- cross_val first iteration The second iteration will look like the Figure below. Fig:- cross_val second iteration and so on till the last or 6th iteration that will look something like this figure below. Fig:- cross_val sixth iteration 4.\u00a0 Visualize\u00a0 the Data with\u00a0 Matplotlib Fig:- Visualize with Matplotlib For visualisation we are importing\u00a0 matplotlib \u00a0 library. Then making a\u00a0 subplot . Creating\u00a0 scatter \u00a0 points with black () outline or\u00a0 edgecolors . Using\u00a0 ax.plot \u00a0to give minimum & maximum values for both axis with ' k-- ' representing the type of line with the line width i.e.\u00a0 lw \u00a0 = 4 . Next, giving label to x and y axis.  \u00a0at last to show the graph. The Result Fig:- Prediction This graph represents the k- folds Cross Validation for the Boston dataset with Linear Regression model. I\u2019m sure there many types of cross validation that people implement but K-folds is a good and an easy type to start from. To get the full code go to this github link:\u00a0 Github Follow me on Medium to get similar posts. I will be posting 2 posts per week so don\u2019t miss the Code tutorial. Contact me on Facebook , Twitter , Linkedin , Google+ . Any comments or if you have any question, write it in the comment. Clap it! Share it! Follow Me ! Happy to be helpful. kudos... \u00a0 Bio: Sagar Sharma ( @SagarSharma244 ) is interested in Programming (Python, C++), Arduino, Machine learning :). He also likes to write stuff. Original . Reposted with permission. Related: Understanding the Bias-Variance Tradeoff: An Overview Making Predictive Models Robust: Holdout vs Cross-Validation Understanding overfitting: an inaccurate meme in Machine Learning", "title_html": "<h1 id=\"title\">Visualizing Cross-validation Code</h1> ", "url": "https://www.kdnuggets.com/2017/09/visualizing-cross-validation-code.html", "tfidf": {"tfidf": {"after": 1.02070207021, "relat": 1.23750876919, "label": 4.47715736041, "googl": 11.388809182200001, "permiss": 6.280063291139999, "bigger": 13.23, "aficionado": 143.027027027, "wrt": 1587.6, "edgecolor": 1587.6, "factor": 2.89127663449, "maximum": 4.80072573329, "clean": 6.86975335353, "numth": 1.1751295336799998, "uncom": 1587.6, "number": 1.10142916609, "dataset": 1742.4878048819999, "about": 1.06486015159, "function": 4.99088337, "happi": 6.125, "python": 56.2978723404, "just": 1.33580143037, "kfold": 7938.0, "meme": 230.086956522, "type": 6.084312723570001, "medium": 7.00617828773, "kudo": 512.129032258, "equal": 5.08438751, "axi": 24.219679633800002, "creat": 1.2492917847, "start": 1.26673581744, "thing": 4.813096862219999, "test": 13.285355648549999, "repost": 933.882352941, "insight": 11.8037174721, "load": 13.60994427776, "explain": 2.60049140049, "scatter": 9.38852749852, "interest": 1.60331246213, "tutori": 59.4606741573, "mani": 1.04426757877, "will": 6.1240549298, "red": 4.44456886898, "the": 42.0, "sixth": 5.11798839458, "sharma": 194.7975460122, "second": 2.2261796256, "select": 6.07035432066, "subplot": 151.2, "next": 2.9901120632800002, "below": 11.28037515985, "similar": 1.37514075357, "but": 2.03264835798, "sklearn": 3175.2, "black": 1.94917127072, "usual": 3.45017928936, "there": 1.04091266719, "point": 1.25990000794, "clap": 109.48965517200001, "say": 3.5088960106, "origin": 1.13724928367, "fun": 12.8863636364, "slight": 3.25327868852, "linkedin": 610.615384615, "visual": 20.91010865988, "use": 3.0889162721399996, "follow": 2.09280253098, "now": 1.160780873, "strategi": 4.44208170118, "robust": 19.9447236181, "name": 1.10211732037, "code": 31.045710095359997, "model": 16.7247827232, "per": 1.9597580545599997, "see": 1.27242125511, "good": 1.51981619759, "sure": 7.453521126760001, "regress": 256.06451612899997, "aka": 20.834645669300002, "under": 2.1563327674, "also": 2.02953020134, "target": 12.875912408760001, "everyth": 4.81967213115, "print": 3.29719626168, "not": 1.01567398119, "learn": 13.936503291900001, "overview": 12.6805111821, "peopl": 1.21320495186, "till": 11.563000728299999, "easi": 5.2937645882, "width": 17.294117647100002, "shown": 2.76923076923, "want": 1.99698113208, "stuff": 23.3127753304, "then": 2.17315721032, "fold": 37.0357698288, "blue": 6.14039837556, "last": 2.4234468020200004, "share": 1.8566249561500001, "minimum": 6.02962400304, "axplot": 1587.6, "week": 1.80532181033, "github": 3175.2, "which": 1.005191845, "like": 9.193485342, "contact": 3.2196309065099995, "simpl": 3.3981164383599998, "variabl": 8.747107438019999, "twitter": 33.213389121300004, "graph": 75.4204275534, "valu": 4.555523672880001, "two": 2.0275862069, "full": 3.33459357278, "becaus": 1.1495184997499999, "facebook": 28.5539568345, "get": 3.5712518277, "easier": 7.84, "random": 7.1902173913, "implement": 3.57648118946, "boston": 5.104823151130001, "some": 1.04036697248, "linear": 69.388111888, "cross": 9.32511013216, "both": 1.05215720061, "part": 3.12992048367, "outlin": 6.38102893891, "miss": 3.53664513255, "click": 34.7396061269, "ani": 2.26767604628, "question": 2.20408163265, "divid": 11.584938704049998, "and": 14.000881889819999, "from": 1.00056721497, "process": 3.39049652964, "chang": 1.1808985421, "perform": 1.5313977042500002, "smaller": 2.59369384088, "num": 9.00283536009, "biasvari": 1587.6, "for": 3.00094512003, "predict": 36.293925538850004, "holdout": 244.246153846, "with": 11.013180298889997, "program": 4.04278074866, "someth": 6.56304257958, "are": 4.11962374312, "split": 3.4709226060300002, "better": 2.0065722952500002, "result": 2.29223216864, "that": 2.0079681275, "look": 5.725895647979999, "option": 4.04896710023, "arduino": 1134.0, "more": 1.0171706817, "improv": 6.13130792997, "valid": 26.44897959184, "crossval": 4762.799999999999, "inaccur": 24.201219512199998, "post": 8.95305230508, "general": 1.1218202374200001, "could": 1.2043695949, "librari": 2.68266306185, "iter": 224.66037735839998, "crossvalid": 6350.4, "can": 1.17626139142, "sagar": 705.6, "give": 2.7306501548, "make": 3.2287980475800007, "set": 7.12247644686, "way": 1.2190739461, "train": 9.6828494755, "this": 5.0189681335500005, "step": 2.8279301745599996, "total": 1.5460122699399999, "link": 2.15151104486, "ask": 2.1744966443, "comment": 6.11909809212, "data": 20.25861335604, "machin": 16.09733840304, "into": 3.04507384437, "bio": 42.336000000000006, "matplotlib": 4762.799999999999, "repres": 2.93945565636, "abov": 1.90382539873, "understand": 5.93717277486, "where": 2.13430127042, "figur": 6.1030240902, "traintestsplit": 1587.6, "import": 1.3401992233700002, "first": 3.0228484386899996, "what": 2.50686878256, "copi": 3.8375634517800004, "let": 10.45849802373, "nice": 17.7583892617, "have": 1.0148948411399998, "fig": 654.6804123708, "overfit": 4762.799999999999, "show": 1.26703910615, "help": 2.79925945518, "write": 6.172628304810001, "tradeoff": 208.89473684200001, "suggest": 1.7571665744299998, "line": 4.254779346089999, "visualis": 180.409090909, "sagarsharmanum": 1587.6}, "logtfidf": {"after": 0.020490694648099998, "relat": 0.21310030165399999, "label": 1.49898832727, "googl": 2.43263122258, "permiss": 1.8373800586400002, "bigger": 2.58248697813, "aficionado": 4.96303361259, "wrt": 7.369978720910001, "edgecolor": 7.369978720910001, "factor": 1.06169814662, "maximum": 1.5687671009200002, "clean": 1.9271282036300001, "numth": 0.161378382949, "uncom": 7.369978720910001, "number": 0.0966085784186, "dataset": 47.39260109976, "about": 0.0628434774746, "function": 1.828931483188, "happi": 1.81237875643, "python": 4.03065674296, "just": 0.289531434109, "kfold": 36.849893604550005, "meme": 5.43845730931, "type": 2.121304456161, "medium": 1.94679237232, "kudo": 6.238576609419999, "equal": 1.866054782686, "axi": 4.988036660280001, "creat": 0.222576818514, "start": 0.236443369291, "thing": 1.7563870693599999, "test": 4.886122185515, "repost": 6.83935046985, "insight": 2.46841452187, "load": 3.83530708376, "explain": 0.955700427358, "scatter": 2.239488465, "interest": 0.47207177798199995, "tutori": 4.0853151555, "mani": 0.0433157581221, "will": 1.0139326745750001, "red": 1.597071382694, "the": 0.0, "sixth": 1.6327614701700002, "sharma": 9.1576272262, "second": 0.21427952675999998, "select": 2.114414061399, "subplot": 5.01860346375, "next": 0.804327370998, "below": 4.06813295968, "similar": 0.318556092114, "but": 0.0323847441438, "sklearn": 14.739957441820001, "black": 0.667404292867, "usual": 1.090558034128, "there": 0.0400978929255, "point": 0.23103235903299998, "clap": 4.69583007148, "say": 1.124308561104, "origin": 0.128612437587, "fun": 2.5561696698099996, "slight": 1.17966331506, "linkedin": 6.414467275880001, "visual": 6.6157533954400005, "use": 0.0876240591948, "follow": 0.09071382218839999, "now": 0.149092945021, "strategi": 1.49112311818, "robust": 2.9929646280599997, "name": 0.09723316638430002, "code": 10.84815276776, "model": 5.899600584888001, "per": 0.672821024072, "see": 0.240921585492, "good": 0.418589404907, "sure": 2.0086865552, "regress": 19.6799575821, "aka": 3.03661725822, "under": 0.15052361076639997, "also": 0.0293143156, "target": 4.676255798480001, "everyth": 1.57270590317, "print": 1.19307248967, "not": 0.0155524130075, "learn": 5.05651238847, "overview": 2.54006626224, "peopl": 0.193265578473, "till": 2.44781040813, "easi": 1.6665296351499999, "width": 2.85036642328, "shown": 1.01856958099, "want": 0.6916366062549999, "stuff": 3.1490015077499995, "then": 0.16606773046179998, "fold": 7.53981572733, "blue": 2.2434848830200003, "last": 0.38408728922200003, "share": 0.618760299747, "minimum": 1.79668465441, "axplot": 7.369978720910001, "week": 0.5907388641619999, "github": 14.739957441820001, "which": 0.00517841384543, "like": 1.11242861236, "contact": 1.16926672768, "simpl": 1.2232212893899999, "variabl": 2.1687230672, "twitter": 3.50295308141, "graph": 7.259861960439999, "valu": 1.646386620296, "two": 0.0273976887164, "full": 1.022407248296, "becaus": 0.139343158825, "facebook": 3.3517955196499996, "get": 1.159538011564, "easier": 2.05923883436, "random": 1.9727214065099998, "implement": 1.27437940907, "boston": 1.6301858087299999, "some": 0.0395735090645, "linear": 13.151388209799999, "cross": 3.385665659036, "both": 0.050842533389300004, "part": 0.12718593294840003, "outlin": 1.85332936004, "miss": 1.2631785751200002, "click": 3.54788042301, "ani": 0.251216716732, "question": 0.790310929014, "divid": 4.201339772294999, "and": 0.0008818619888904, "from": 0.000567054168866, "process": 1.05565839805, "chang": 0.166275625058, "perform": 0.42618085058, "smaller": 0.9530830530519999, "num": 0.0028349135585730005, "biasvari": 7.369978720910001, "for": 0.0009449711861910001, "predict": 11.52018166383, "holdout": 5.4981765440100006, "with": 0.01317240884729, "program": 1.4075711575299998, "someth": 2.37661424546, "are": 0.1178698943308, "split": 1.24442043932, "better": 0.6964279406, "result": 0.272757816762, "that": 0.00795229675928, "look": 1.9391600808, "option": 1.39846181161, "arduino": 7.033506484289999, "more": 0.017024931599999998, "improv": 2.144387411796, "valid": 7.555692870720001, "crossval": 22.10993616273, "inaccur": 3.1864030249599997, "post": 3.2228006108039997, "general": 0.114952578063, "could": 0.18595627229000003, "librari": 0.986809980943, "iter": 21.736982152019998, "crossvalid": 29.479914883640003, "can": 0.162341096394, "sagar": 11.73180264826, "give": 0.622785104448, "make": 0.22049297346869998, "set": 1.0289760677339999, "way": 0.19809150993500002, "train": 3.3045915641950003, "this": 0.0189322452625, "step": 1.03954505698, "total": 0.43567888670500005, "link": 0.7661704068449999, "ask": 0.776797209847, "comment": 2.23653506908, "data": 7.3009235088, "machin": 5.56943832248, "into": 0.0447385896861, "bio": 3.7456377879300002, "matplotlib": 22.10993616273, "repres": 0.7701544655, "abov": 0.643865229816, "understand": 2.1761717513599996, "where": 0.1299842774914, "figur": 2.1305163364800004, "traintestsplit": 7.369978720910001, "import": 0.292818277066, "first": 0.02276186943648, "what": 0.451774593654, "copi": 1.34483764744, "let": 3.7464077018399995, "nice": 2.8768580387299996, "have": 0.0147850023412, "fig": 47.99088656076, "overfit": 22.10993616273, "show": 0.236682766013, "help": 0.672415442688, "write": 2.164537319631, "tradeoff": 5.34183047362, "suggest": 0.563702610877, "line": 1.048291843356, "visualis": 5.19522699942, "sagarsharmanum": 7.369978720910001}, "logidf": {"after": 0.020490694648099998, "relat": 0.21310030165399999, "label": 1.49898832727, "googl": 2.43263122258, "permiss": 1.8373800586400002, "bigger": 2.58248697813, "aficionado": 4.96303361259, "wrt": 7.369978720910001, "edgecolor": 7.369978720910001, "factor": 1.06169814662, "maximum": 1.5687671009200002, "clean": 1.9271282036300001, "numth": 0.161378382949, "uncom": 7.369978720910001, "number": 0.0966085784186, "dataset": 5.26584456664, "about": 0.0628434774746, "function": 0.914465741594, "happi": 1.81237875643, "python": 4.03065674296, "just": 0.289531434109, "kfold": 7.369978720910001, "meme": 5.43845730931, "type": 0.707101485387, "medium": 1.94679237232, "kudo": 6.238576609419999, "equal": 0.933027391343, "axi": 2.4940183301400003, "creat": 0.222576818514, "start": 0.236443369291, "thing": 0.8781935346799999, "test": 0.977224437103, "repost": 6.83935046985, "insight": 2.46841452187, "load": 1.91765354188, "explain": 0.955700427358, "scatter": 2.239488465, "interest": 0.47207177798199995, "tutori": 4.0853151555, "mani": 0.0433157581221, "will": 0.202786534915, "red": 0.798535691347, "the": 0.0, "sixth": 1.6327614701700002, "sharma": 4.5788136131, "second": 0.10713976337999999, "select": 0.704804687133, "subplot": 5.01860346375, "next": 0.402163685499, "below": 0.813626591936, "similar": 0.318556092114, "but": 0.0161923720719, "sklearn": 7.369978720910001, "black": 0.667404292867, "usual": 0.545279017064, "there": 0.0400978929255, "point": 0.23103235903299998, "clap": 4.69583007148, "say": 0.562154280552, "origin": 0.128612437587, "fun": 2.5561696698099996, "slight": 1.17966331506, "linkedin": 6.414467275880001, "visual": 1.6539383488600001, "use": 0.0292080197316, "follow": 0.045356911094199995, "now": 0.149092945021, "strategi": 1.49112311818, "robust": 2.9929646280599997, "name": 0.09723316638430002, "code": 1.35601909597, "model": 0.7374500731110001, "per": 0.672821024072, "see": 0.240921585492, "good": 0.418589404907, "sure": 2.0086865552, "regress": 3.9359915164199997, "aka": 3.03661725822, "under": 0.07526180538319999, "also": 0.0146571578, "target": 1.1690639496200002, "everyth": 1.57270590317, "print": 1.19307248967, "not": 0.0155524130075, "learn": 0.842752064745, "overview": 2.54006626224, "peopl": 0.193265578473, "till": 2.44781040813, "easi": 1.6665296351499999, "width": 2.85036642328, "shown": 1.01856958099, "want": 0.6916366062549999, "stuff": 3.1490015077499995, "then": 0.08303386523089999, "fold": 2.5132719091099998, "blue": 1.1217424415100001, "last": 0.19204364461100001, "share": 0.618760299747, "minimum": 1.79668465441, "axplot": 7.369978720910001, "week": 0.5907388641619999, "github": 7.369978720910001, "which": 0.00517841384543, "like": 0.139053576545, "contact": 1.16926672768, "simpl": 1.2232212893899999, "variabl": 2.1687230672, "twitter": 3.50295308141, "graph": 3.6299309802199997, "valu": 0.823193310148, "two": 0.0136988443582, "full": 0.511203624148, "becaus": 0.139343158825, "facebook": 3.3517955196499996, "get": 0.579769005782, "easier": 2.05923883436, "random": 1.9727214065099998, "implement": 1.27437940907, "boston": 1.6301858087299999, "some": 0.0395735090645, "linear": 2.63027764196, "cross": 0.846416414759, "both": 0.050842533389300004, "part": 0.04239531098280001, "outlin": 1.85332936004, "miss": 1.2631785751200002, "click": 3.54788042301, "ani": 0.125608358366, "question": 0.790310929014, "divid": 0.8402679544589999, "and": 6.29901420636e-05, "from": 0.000567054168866, "process": 0.527829199025, "chang": 0.166275625058, "perform": 0.42618085058, "smaller": 0.9530830530519999, "num": 0.00031499039539700004, "biasvari": 7.369978720910001, "for": 0.00031499039539700004, "predict": 1.6457402376899999, "holdout": 5.4981765440100006, "with": 0.00119749171339, "program": 0.7037855787649999, "someth": 1.18830712273, "are": 0.0294674735827, "split": 1.24442043932, "better": 0.6964279406, "result": 0.136378908381, "that": 0.00397614837964, "look": 0.6463866936, "option": 1.39846181161, "arduino": 7.033506484289999, "more": 0.017024931599999998, "improv": 0.7147958039319999, "valid": 1.8889232176800002, "crossval": 7.369978720910001, "inaccur": 3.1864030249599997, "post": 0.8057001527009999, "general": 0.114952578063, "could": 0.18595627229000003, "librari": 0.986809980943, "iter": 3.62283035867, "crossvalid": 7.369978720910001, "can": 0.162341096394, "sagar": 5.86590132413, "give": 0.311392552224, "make": 0.07349765782289999, "set": 0.171496011289, "way": 0.19809150993500002, "train": 0.660918312839, "this": 0.0037864490525, "step": 1.03954505698, "total": 0.43567888670500005, "link": 0.7661704068449999, "ask": 0.776797209847, "comment": 1.11826753454, "data": 1.2168205848, "machin": 1.39235958062, "into": 0.0149128632287, "bio": 3.7456377879300002, "matplotlib": 7.369978720910001, "repres": 0.38507723275, "abov": 0.643865229816, "understand": 1.0880858756799998, "where": 0.0649921387457, "figur": 0.7101721121600001, "traintestsplit": 7.369978720910001, "import": 0.292818277066, "first": 0.0075872898121599995, "what": 0.225887296827, "copi": 1.34483764744, "let": 1.2488025672799998, "nice": 2.8768580387299996, "have": 0.0147850023412, "fig": 3.9992405467300003, "overfit": 7.369978720910001, "show": 0.236682766013, "help": 0.336207721344, "write": 0.721512439877, "tradeoff": 5.34183047362, "suggest": 0.563702610877, "line": 0.349430614452, "visualis": 5.19522699942, "sagarsharmanum": 7.369978720910001}, "freq": {"after": 1, "relat": 1, "label": 1, "googl": 1, "permiss": 1, "bigger": 1, "aficionado": 1, "wrt": 1, "edgecolor": 1, "factor": 1, "maximum": 1, "clean": 1, "numth": 1, "uncom": 1, "number": 1, "dataset": 9, "about": 1, "function": 2, "happi": 1, "python": 1, "just": 1, "kfold": 5, "meme": 1, "type": 3, "medium": 1, "kudo": 1, "equal": 2, "axi": 2, "creat": 1, "start": 1, "thing": 2, "test": 5, "repost": 1, "insight": 1, "load": 2, "explain": 1, "scatter": 1, "interest": 1, "tutori": 1, "mani": 1, "will": 5, "red": 2, "the": 42, "sixth": 1, "sharma": 2, "second": 2, "select": 3, "subplot": 1, "next": 2, "below": 5, "similar": 1, "but": 2, "sklearn": 2, "black": 1, "usual": 2, "there": 1, "point": 1, "clap": 1, "say": 2, "origin": 1, "fun": 1, "slight": 1, "linkedin": 1, "visual": 4, "use": 3, "follow": 2, "now": 1, "strategi": 1, "robust": 1, "name": 1, "code": 8, "model": 8, "per": 1, "see": 1, "good": 1, "sure": 1, "regress": 5, "aka": 1, "under": 2, "also": 2, "target": 4, "everyth": 1, "print": 1, "not": 1, "learn": 6, "overview": 1, "peopl": 1, "till": 1, "easi": 1, "width": 1, "shown": 1, "want": 1, "stuff": 1, "then": 2, "fold": 3, "blue": 2, "last": 2, "share": 1, "minimum": 1, "axplot": 1, "week": 1, "github": 2, "which": 1, "like": 8, "contact": 1, "simpl": 1, "variabl": 1, "twitter": 1, "graph": 2, "valu": 2, "two": 2, "full": 2, "becaus": 1, "facebook": 1, "get": 2, "easier": 1, "random": 1, "implement": 1, "boston": 1, "some": 1, "linear": 5, "cross": 4, "both": 1, "part": 3, "outlin": 1, "miss": 1, "click": 1, "ani": 2, "question": 1, "divid": 5, "and": 14, "from": 1, "process": 2, "chang": 1, "perform": 1, "smaller": 1, "num": 9, "biasvari": 1, "for": 3, "predict": 7, "holdout": 1, "with": 11, "program": 2, "someth": 2, "are": 4, "split": 1, "better": 1, "result": 2, "that": 2, "look": 3, "option": 1, "arduino": 1, "more": 1, "improv": 3, "valid": 4, "crossval": 3, "inaccur": 1, "post": 4, "general": 1, "could": 1, "librari": 1, "iter": 6, "crossvalid": 4, "can": 1, "sagar": 2, "give": 2, "make": 3, "set": 6, "way": 1, "train": 5, "this": 5, "step": 1, "total": 1, "link": 1, "ask": 1, "comment": 2, "data": 6, "machin": 4, "into": 3, "bio": 1, "matplotlib": 3, "repres": 2, "abov": 1, "understand": 2, "where": 2, "figur": 3, "traintestsplit": 1, "import": 1, "first": 3, "what": 2, "copi": 1, "let": 3, "nice": 1, "have": 1, "fig": 12, "overfit": 3, "show": 1, "help": 2, "write": 3, "tradeoff": 1, "suggest": 1, "line": 3, "visualis": 1, "sagarsharmanum": 1}, "idf": {"after": 1.02070207021, "relat": 1.23750876919, "label": 4.47715736041, "googl": 11.388809182200001, "permiss": 6.280063291139999, "bigger": 13.23, "aficionado": 143.027027027, "wrt": 1587.6, "edgecolor": 1587.6, "factor": 2.89127663449, "maximum": 4.80072573329, "clean": 6.86975335353, "numth": 1.1751295336799998, "uncom": 1587.6, "number": 1.10142916609, "dataset": 193.609756098, "about": 1.06486015159, "function": 2.495441685, "happi": 6.125, "python": 56.2978723404, "just": 1.33580143037, "kfold": 1587.6, "meme": 230.086956522, "type": 2.0281042411900003, "medium": 7.00617828773, "kudo": 512.129032258, "equal": 2.542193755, "axi": 12.109839816900001, "creat": 1.2492917847, "start": 1.26673581744, "thing": 2.4065484311099996, "test": 2.65707112971, "repost": 933.882352941, "insight": 11.8037174721, "load": 6.80497213888, "explain": 2.60049140049, "scatter": 9.38852749852, "interest": 1.60331246213, "tutori": 59.4606741573, "mani": 1.04426757877, "will": 1.22481098596, "red": 2.22228443449, "the": 1.0, "sixth": 5.11798839458, "sharma": 97.3987730061, "second": 1.1130898128, "select": 2.02345144022, "subplot": 151.2, "next": 1.4950560316400001, "below": 2.25607503197, "similar": 1.37514075357, "but": 1.01632417899, "sklearn": 1587.6, "black": 1.94917127072, "usual": 1.72508964468, "there": 1.04091266719, "point": 1.25990000794, "clap": 109.48965517200001, "say": 1.7544480053, "origin": 1.13724928367, "fun": 12.8863636364, "slight": 3.25327868852, "linkedin": 610.615384615, "visual": 5.22752716497, "use": 1.0296387573799999, "follow": 1.04640126549, "now": 1.160780873, "strategi": 4.44208170118, "robust": 19.9447236181, "name": 1.10211732037, "code": 3.8807137619199996, "model": 2.0905978404, "per": 1.9597580545599997, "see": 1.27242125511, "good": 1.51981619759, "sure": 7.453521126760001, "regress": 51.2129032258, "aka": 20.834645669300002, "under": 1.0781663837, "also": 1.01476510067, "target": 3.2189781021900004, "everyth": 4.81967213115, "print": 3.29719626168, "not": 1.01567398119, "learn": 2.32275054865, "overview": 12.6805111821, "peopl": 1.21320495186, "till": 11.563000728299999, "easi": 5.2937645882, "width": 17.294117647100002, "shown": 2.76923076923, "want": 1.99698113208, "stuff": 23.3127753304, "then": 1.08657860516, "fold": 12.3452566096, "blue": 3.07019918778, "last": 1.2117234010100002, "share": 1.8566249561500001, "minimum": 6.02962400304, "axplot": 1587.6, "week": 1.80532181033, "github": 1587.6, "which": 1.005191845, "like": 1.14918566775, "contact": 3.2196309065099995, "simpl": 3.3981164383599998, "variabl": 8.747107438019999, "twitter": 33.213389121300004, "graph": 37.7102137767, "valu": 2.2777618364400003, "two": 1.01379310345, "full": 1.66729678639, "becaus": 1.1495184997499999, "facebook": 28.5539568345, "get": 1.78562591385, "easier": 7.84, "random": 7.1902173913, "implement": 3.57648118946, "boston": 5.104823151130001, "some": 1.04036697248, "linear": 13.8776223776, "cross": 2.33127753304, "both": 1.05215720061, "part": 1.04330682789, "outlin": 6.38102893891, "miss": 3.53664513255, "click": 34.7396061269, "ani": 1.13383802314, "question": 2.20408163265, "divid": 2.3169877408099997, "and": 1.00006299213, "from": 1.00056721497, "process": 1.69524826482, "chang": 1.1808985421, "perform": 1.5313977042500002, "smaller": 2.59369384088, "num": 1.00031504001, "biasvari": 1587.6, "for": 1.00031504001, "predict": 5.18484650555, "holdout": 244.246153846, "with": 1.0011982089899998, "program": 2.02139037433, "someth": 3.28152128979, "are": 1.02990593578, "split": 3.4709226060300002, "better": 2.0065722952500002, "result": 1.14611608432, "that": 1.00398406375, "look": 1.9086318826599997, "option": 4.04896710023, "arduino": 1134.0, "more": 1.0171706817, "improv": 2.04376930999, "valid": 6.61224489796, "crossval": 1587.6, "inaccur": 24.201219512199998, "post": 2.23826307627, "general": 1.1218202374200001, "could": 1.2043695949, "librari": 2.68266306185, "iter": 37.4433962264, "crossvalid": 1587.6, "can": 1.17626139142, "sagar": 352.8, "give": 1.3653250774, "make": 1.0762660158600001, "set": 1.18707940781, "way": 1.2190739461, "train": 1.9365698950999999, "this": 1.00379362671, "step": 2.8279301745599996, "total": 1.5460122699399999, "link": 2.15151104486, "ask": 2.1744966443, "comment": 3.05954904606, "data": 3.37643555934, "machin": 4.02433460076, "into": 1.01502461479, "bio": 42.336000000000006, "matplotlib": 1587.6, "repres": 1.46972782818, "abov": 1.90382539873, "understand": 2.96858638743, "where": 1.06715063521, "figur": 2.0343413634, "traintestsplit": 1587.6, "import": 1.3401992233700002, "first": 1.00761614623, "what": 1.25343439128, "copi": 3.8375634517800004, "let": 3.48616600791, "nice": 17.7583892617, "have": 1.0148948411399998, "fig": 54.5567010309, "overfit": 1587.6, "show": 1.26703910615, "help": 1.39962972759, "write": 2.0575427682700003, "tradeoff": 208.89473684200001, "suggest": 1.7571665744299998, "line": 1.4182597820299998, "visualis": 180.409090909, "sagarsharmanum": 1587.6}}, "html": "<!DOCTYPE html>\n\n<html lang=\"en-US\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head profile=\"http://gmpg.org/xfn/11\">\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n<title>  Visualizing Cross-validation Code</title>\n<link href=\"/wp-content/themes/kdn17/images/favicon.ico\" rel=\"shortcut icon\"/>\n<link href=\"/wp-content/themes/kdn17/style.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"/wp-content/themes/kdn17/js/jquery-1.9.1.min.js\" type=\"text/javascript\"></script>\n<script src=\"/aps/kda_all.js\" type=\"text/javascript\"></script>\n<link href=\"/feed/\" rel=\"alternate\" title=\"KDnuggets: Analytics, Big Data, Data Mining and Data Science Feed\" type=\"application/rss+xml\"/>\n<link href=\"//s.w.org\" rel=\"dns-prefetch\"/>\n<link href=\"https://www.kdnuggets.com/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/comments/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/2017/09/visualizing-cross-validation-code.html/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Visualizing Cross-validation Code Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-json/\" rel=\"https://api.w.org/\"/>\n<link href=\"https://www.kdnuggets.com/xmlrpc.php?rsd\" rel=\"EditURI\" title=\"RSD\" type=\"application/rsd+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-includes/wlwmanifest.xml\" rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\"/>\n<link href=\"https://www.kdnuggets.com/2017/09/databricks-vision-making-deep-learning-simple.html\" rel=\"prev\" title=\"A Vision for Making Deep Learning Simple\"/>\n<link href=\"https://www.kdnuggets.com/2017/09/closing-insights-action-gap.html\" rel=\"next\" title=\"Closing the Insights-to-Action Gap\"/>\n<meta content=\"WordPress 4.9.10\" name=\"generator\">\n<link href=\"https://www.kdnuggets.com/2017/09/visualizing-cross-validation-code.html\" rel=\"canonical\"/>\n<link href=\"https://www.kdnuggets.com/?p=70996\" rel=\"shortlink\"/>\n<link href=\"https://www.kdnuggets.com/2017/09/visualizing-cross-validation-code.html\" rel=\"canonical\"/>\n<!-- BEGIN ExactMetrics v5.3.7 Universal Analytics - https://exactmetrics.com/ -->\n<script>\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-361129-1', 'auto');\n  ga('send', 'pageview');\n</script>\n<!-- END ExactMetrics Universal Analytics -->\n</meta></head>\n<body class=\"post-template-default single single-post postid-70996 single-format-standard\">\n<div class=\"main_wrapper\"><!-- publ: 5-Sep, 2017  -->\n<div id=\"wrapper\">\n<div id=\"header\">\n<div id=\"header_log\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<h1>KDnuggets</h1>\n<div class=\"text-container\">\n            \u00a0\u00a0<a href=\"/news/subscribe.html\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a> \u00a0|\n <a href=\"https://twitter.com/kdnuggets\" target=\"_blank\"><img alt=\"Twitter\" height=\"48\" src=\"/images/tw_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n <a href=\"https://www.facebook.com/kdnuggets\" target=\"_blank\"><img alt=\"Facebook\" height=\"48\" src=\"/images/fb_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n<a href=\"https://www.linkedin.com/groups/54257/\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"48\" src=\"/images/in_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \n\u00a0|\u00a0 <a href=\"/contact.html\"><b>Contact</b></a>\n</div>\n</div>\n<div class=\"search\">\n<form action=\"/\" id=\"searchform\" method=\"get\">\n<input id=\"s\" name=\"s\" placeholder=\"search KDnuggets\" type=\"text\" value=\"\"/>\n<input type=\"submit\" value=\"Search\"/></form>\n</div>\n<div href=\"#\" id=\"pull\">\n<img class=\"menu\" src=\"/images/menu-30.png\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<img class=\"search-icon\" src=\"/images/search-icon.png\">\n</img></img></div>\n<div id=\"pull-menu\">\n<div class=\"navigation\"><ul class=\"menu\" id=\"menu-menu\"><li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-1070\" id=\"menu-item-1070\"><a href=\"/software/index.html\" title=\"Data Science Software\">SOFTWARE</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13756\" id=\"menu-item-13756\"><a href=\"/news/index.html\" title=\"News\">News/Blog</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-46286\" id=\"menu-item-46286\"><a href=\"/news/top-stories.html\">Top stories</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-42152\" id=\"menu-item-42152\"><a href=\"https://www.kdnuggets.com/opinions/index.html\" title=\"Opinions\">Opinions</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-46415\" id=\"menu-item-46415\"><a href=\"https://www.kdnuggets.com/tutorials/index.html\">Tutorials</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13364\" id=\"menu-item-13364\"><a href=\"/jobs/index.html\" title=\"Jobs in Analytics, Data Science\">JOBS</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-63505\" id=\"menu-item-63505\"><a href=\"https://www.kdnuggets.com/companies/index.html\">Companies</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13366\" id=\"menu-item-13366\"><a href=\"/courses/index.html\">Courses</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-1499\" id=\"menu-item-1499\"><a href=\"https://www.kdnuggets.com/datasets/index.html\">Datasets</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-14286\" id=\"menu-item-14286\"><a href=\"https://www.kdnuggets.com/education/index.html\" title=\"Education in Analytics, Big Data, Data Science\">EDUCATION</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-51558\" id=\"menu-item-51558\"><a href=\"https://www.kdnuggets.com/education/analytics-data-mining-certificates.html\" title=\"Certificates in Analytics, Big Data, Data Science\">Certificates</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-14752\" id=\"menu-item-14752\"><a href=\"/meetings/index.html\">Meetings</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13721\" id=\"menu-item-13721\"><a href=\"/webcasts/index.html\" title=\"Webcasts and Webinars\">Webinars</a></li>\n</ul></div></div>\n</div> <!--#header end-->\n<div id=\"spacer\">\n         \u00a0\n      </div>\n<div id=\"content_wrapper\">\n<div id=\"ad_wrapper\">\n<script type=\"text/javascript\">\n\tjQuery(function() {\n   \t    var pull        = $('#pull');\n            menu        = $('#header .navigation ul');\n            menuImage = $('#header img.menu');\n            mobileMenu        = $('#pull-menu-mobile');\n            search = $('img.search-icon');\n            searchBar = $('div.search');\n            searchClick = false;\n            search.on('click', function() {\n                  searchBar.slideToggle();\n                  searchClick = true;\n            });  \n     \t    $(menuImage).on('click', function(e) {\n\t        //e.preventDefault();\n                if (!searchClick) {\n                  menu.slideToggle();\n                }\n                searchClick = false;\n\t    });\n           /* pullMobile.on('click', function(e) {\n              e.preventDefault();\n                if (!searchClick) {\n                  mobileMenu.slideToggle();\n                }\n                searchClick = false;\n\t    });*/\n            \n\t});\n\tkpath = '/'; kda_top(); kda_sid_init(); kda_sid_n=3;\n\t</script>\n</div> <div class=\"breadcumb\">\n<br/>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2017/index.html\">2017</a> \u00bb <a href=\"https://www.kdnuggets.com/2017/09/index.html\">Sep</a> \u00bb <a href=\"https://www.kdnuggets.com/2017/09/tutorials.html\">Tutorials, Overviews</a> \u00bb Visualizing Cross-validation Code (\u00a0<a href=\"/2017/n34.html\">17:n34</a>\u00a0)    </div>\n<div class=\"single\" id=\"content\">\n<div id=\"post-header\">\n<h1 id=\"title\">Visualizing Cross-validation Code</h1>\n<div class=\"pagi\">\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2017/09/databricks-vision-making-deep-learning-simple.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"> <strong>Previous post</strong></img></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2017/09/closing-insights-action-gap.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/>\u00a0<br/>\u00a0\n    <span class=\"http-likes\" style=\"float: left; font-size:14px\">http likes 99</span> <div class=\"addthis_native_toolbox\"></div>\n</div>\n<div class=\"tag-data\">Tags: <a href=\"https://www.kdnuggets.com/tag/cross-validation\" rel=\"tag\">Cross-validation</a>, <a href=\"https://www.kdnuggets.com/tag/machine-learning\" rel=\"tag\">Machine Learning</a>, <a href=\"https://www.kdnuggets.com/tag/python\" rel=\"tag\">Python</a>, <a href=\"https://www.kdnuggets.com/tag/scikit-learn\" rel=\"tag\">scikit-learn</a></div>\n<br/>\n<p class=\"excerpt\">\n     Cross-validation helps to improve your prediction using the K-Fold strategy. What is K-Fold you asked? Check out this post for a visualized explanation.\n  </p>\n</div>\n<div id=\"post-header-ad\">\n<script type=\"text/javascript\">kda_sid_write(1); kda_sid_n=2;</script>\n</div>\n<hr class=\"grey-line\"/><br/>\n<div class=\"post\" id=\"post-\">\n<p><b>By Sagar Sharma, Machine Learning &amp; Programming Aficionado.</b></p>\n<p>Let\u2019s\u00a0<strong>visualize</strong>\u00a0to improve your prediction...</p>\n<p>Let us say, you are writing a nice and clean Machine Learning code (e.g. Linear Regression). You code is OK, first you divided your dataset into two parts, \"Training Set and Testing Set\" as usual with the function like\u00a0<em>train_test_split</em> and with some\u00a0<em>random factor.</em> Your prediction could be slightly under or overfit, like the figures below.</p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*0Z42x0nYm-WyftKiALjZLg.png\" width=\"99%\"/><br>\n<font size=\"-1\">Fig: Under and Over-Fit Prediction</font></br></center></p>\n<p>and the results are not changing. So what can we do?</p>\n<p>As the name of the suggests, cross-validation is the next fun thing after learning\u00a0<em>Linear Regression</em>\u00a0because it helps to improve your prediction using the\u00a0<strong><em>K-Fold\u00a0</em></strong>strategy. What is K-Fold you asked? Everything is explained below with\u00a0<strong>Code</strong>.</p>\n<p>The Full Code\u00a0:)</p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*Vhcivhf78YxOHV2opJCJig.png\" width=\"99%\"/><br>\n<font size=\"-1\">Fig:- Cross Validation with Visualization</font></br></center></p>\n<p>Code Insight:</p>\n<p>The above code is divided into 4 steps...</p>\n<p><b>1. <strong>Load</strong>\u00a0and\u00a0<strong>Divide target</strong>\u00a0dataset.</b></p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*Pxt_DjJfvTxRItkRByl2Rg.png\" width=\"80%\"/><br>\n<font size=\"-1\">Fig:- Load the\u00a0dataset</font></br></center></p>\n<p>We are copying the target in dataset to\u00a0<em>y\u00a0</em>variable<em>.\u00a0</em>To see the dataset uncomment the\u00a0<em>print</em>\u00a0line.</p>\n<p><b>2.\u00a0<strong>Model Selection</strong></b></p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*9Diy5bR8aWuIUv4g9zcDHw.png\" width=\"80%\"/><br>\n<font size=\"-1\">Fig:- Model Selection (LinearRegression())</font></br></center></p>\n<p>Just to make things simple we will use Linear Regression. To learn about it more click on \u201c<a href=\"https://medium.com/@sagarsharma4244/linear-regression-the-easier-way-6f941aa471ea\" target=\"_blank\">Linear Regression: The Easier Way</a>\u201d Post.</p>\n<p><b><strong>3. Cross-Validation\u00a0:)</strong></b></p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*X8MWzwLc7Trt3fvvWHb6TA.png\" width=\"80%\"/><br/>\n<font size=\"-1\">Fig:- Cross Validation in\u00a0sklearn</font></center></p>\n<p>It is a process and also a function in the sklearn</p>\n<p><strong><em>cross_val_predict(model, data, target, cv)</em></strong></p>\n<p>where,</p>\n<ul>\n<li><strong><em>model\u00a0</em></strong>is the model we selected on which we want to perform cross-validation\n<li><strong><em>data\u00a0</em></strong>is the data.\n<li><strong><em>target\u00a0</em></strong>is the target values w.r.t. the data.\n<li><strong><em>cv\u00a0</em></strong>(optional)is the total number of folds (a.k.a.\u00a0<em>K-Fold\u00a0</em>).\n</li></li></li></li></ul>\n<p>In this process, we don\u2019t divide the data in two sets like usual (training and test set) like shown below.</p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*fDK2iB1t7f2Gdyqfv3PMBg.png\" width=\"65%\"/><br/>\n<font size=\"-1\">Fig:- Train set (Blue)and Test set\u00a0(Red)</font></center></p>\n<p>But we divide the dataset into equal\u00a0<em>K</em>\u00a0parts (<em>K-Folds or\u00a0</em><strong><em>cv</em></strong>).\u00a0<strong>To improve the prediction and to generalize better.\u00a0</strong>Then train the model on the bigger dataset and test on the smaller dataset. Let us say the\u00a0<strong><em>cv</em></strong><em>\u00a0</em>is\u00a0<strong>6.</strong></p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*JnKOeRJVhkLWsO7IDF8cUw.png\" width=\"65%\"/><br/>\n<font size=\"-1\">Fig:- 6 equal folds or\u00a0parts</font></center></p>\n<p>Now, the first iteration of model splitting will look something like this where Red is test &amp; Blue is Train data.</p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*NpzABcZwTgDy1Xsn3gPuog.png\" width=\"65%\"/><br/>\n<font size=\"-1\">Fig:- cross_val first iteration</font></center></p>\n<p>The second iteration will look like the Figure below.</p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*9TwfQwZe7e8IVCTfO8ja6g.png\" width=\"65%\"/><br/>\n<font size=\"-1\">Fig:- cross_val second iteration</font></center></p>\n<p>and so on till the last or 6th iteration that will look something like this figure below.</p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*j2fqzW4qFey-rd1FdXILqQ.png\" width=\"65%\"/><br/>\n<font size=\"-1\">Fig:- cross_val sixth iteration</font></center></p>\n<p><b>4.\u00a0<strong>Visualize\u00a0</strong>the Data with\u00a0<strong>Matplotlib</strong></b></p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*z6vxTbLwrDIfF_B88k9JGg.png\" width=\"99%\"/><br/>\n<font size=\"-1\">Fig:- Visualize with Matplotlib</font></center></p>\n<p>For visualisation we are importing\u00a0<strong><em>matplotlib</em>\u00a0</strong>library. Then making a\u00a0<strong><em>subplot</em></strong>.</p>\n<p>Creating\u00a0<strong><em>scatter</em>\u00a0</strong>points with black (i.e(0,0,0)) outline or\u00a0<em>edgecolors</em>.</p>\n<p>Using\u00a0<strong><em>ax.plot</em></strong>\u00a0to give minimum &amp; maximum values for both axis with '<strong><em>k--</em></strong>' representing the type of line with the line width i.e.\u00a0<strong><em>lw</em></strong><em>\u00a0</em><strong><em>= 4</em></strong>.</p>\n<p>Next, giving label to x and y axis.</p>\n<p><strong><em>plt.show()</em></strong>\u00a0at last to show the graph.</p>\n<p><b>The Result</b></p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*tGIm55wwRHYkQ3WflI-SKA.png\" width=\"65%\"/><br/>\n<font size=\"-1\">Fig:- Prediction</font></center></p>\n<p>This graph represents the k- folds Cross Validation for the Boston dataset with Linear Regression model.</p>\n<p>I\u2019m sure there many types of cross validation that people implement but K-folds is a good and an easy type to start from.</p>\n<p>To get the full code go to this github link:\u00a0<a href=\"https://github.com/Sagarsharma4244/Cross-Validation\" target=\"_blank\">Github</a></p>\n<p>Follow me on <a href=\"https://medium.com/@sagarsharma4244\" target=\"_blank\">Medium</a> to get similar posts.</p>\n<p>I will be posting 2 posts per week so don\u2019t miss the Code tutorial.</p>\n<p>Contact me on <a href=\"https://www.facebook.com/profile.php?id=100003188718299\" target=\"_blank\">Facebook</a>, <a href=\"https://twitter.com/SagarSharma4244\" target=\"_blank\">Twitter</a>, <a href=\"https://www.linkedin.com/in/sagar-sharma-232a06148/\" target=\"_blank\">Linkedin</a>, <a href=\"https://plus.google.com/+SAGARSHARMA4244\" target=\"_blank\">Google+</a>.</p>\n<p>Any comments or if you have any question, write it in the comment.</p>\n<p>Clap it! Share it! Follow Me !</p>\n<p>Happy to be helpful. kudos...</p>\n<p>\u00a0<br/>\n<b>Bio: <a href=\"https://medium.com/@sagarsharma4244\" target=\"_blank\">Sagar Sharma</a></b> (<a href=\"https://twitter.com/SagarSharma4244\" target=\"_blank\">@SagarSharma244</a>) is interested in Programming (Python, C++), Arduino, Machine learning :). He also likes to write stuff.</p>\n<p><a href=\"https://medium.com/towards-data-science/cross-validation-code-visualization-kind-of-fun-b9741baea1f8\" target=\"_blank\">Original</a>. Reposted with permission.</p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2016/08/bias-variance-tradeoff-overview.html\">Understanding the Bias-Variance Tradeoff: An Overview</a>\n<li><a href=\"/2017/08/dataiku-predictive-model-holdout-cross-validation.html\">Making Predictive Models Robust: Holdout vs Cross-Validation</a>\n<li><a href=\"/2017/08/understanding-overfitting-meme-supervised-learning.html\">Understanding overfitting: an inaccurate meme in Machine Learning</a>\n</li></li></li></ul>\n</div>\n<div class=\"page-link\"></div>\n<div class=\"pagi\">\n<hr class=\"grey-line\"/>\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2017/09/databricks-vision-making-deep-learning-simple.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"/> <strong>Previous post</strong></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2017/09/closing-insights-action-gap.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/><br/>\n<div>\n<hr class=\"grey-line\"/><br/>\n<h2>Top Stories Past 30 Days</h2>\n<table align=\"center\" cellpadding=\"3\" cellspacing=\"10\" class=\"latn\" width=\"100%\">\n<tr>\n<td valign=\"top\" width=\"50%\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Popular</b></th></tr>\n<tr><td>\n<ol class=\"three_ol\"><li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-1-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-2-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n<li> <a href=\"/2018/05/simplilearn-9-must-have-skills-data-scientist.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-3-simplilearn');\"><b>9 Must-have skills you need to become a Data Scientist, updated</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-4-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/03/another-10-free-must-read-books-for-machine-learning-and-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-5-another-10-books');\"><b>Another 10 Free Must-Read Books for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-6-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/best-data-visualization-techniques.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-7-best-data-viz');\"><b>Best Data Visualization Techniques for small and large data</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td> <td valign=\"top\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Shared</b></th></tr>\n<tr><td><ol class=\"three_ol\">\n<li> <a href=\"/2019/04/another-10-free-must-see-courses-machine-learning-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-1-another-10-courses');\"><b>Another 10 Free Must-See Courses for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-2-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/03/r-vs-python-data-visualization.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-3-r-py-viz');\"><b>R vs Python for Data Visualization</b></a>\n<li> <a href=\"/2019/03/deep-learning-toolset-overview.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-4-dl-toolset');\"><b>The Deep Learning Toolset \u2014 An Overview</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-5-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-6-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-7-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<!--#content end--></div>\n<div id=\"sidebar\">\n<div class=\"latn\">\n<h3><b><a href=\"/news/index.html\">Latest News</a></b></h3>\n<ul style=\"font-size:14px; margin-top:5px\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/datarobot-delivering-trusted-ai-microsoft.html\">Delivering Trusted AI with DataRobot and Microsoft</a><li> <a href=\"https://www.kdnuggets.com/2019/04/formulated-ai-data-production-landscape.html\">AI and the data production landscape</a><li> <a href=\"https://www.kdnuggets.com/2019/04/most-desired-skill-data-science.html\">The most desired skill in data science</a><li> <a href=\"https://www.kdnuggets.com/2019/04/projects-include-data-science-portfolio.html\">Projects to Include in a Data Science Portfolio</a><li> <a href=\"https://www.kdnuggets.com/2019/04/rework-meet-worlds-leading-ai-deep-learning-experts.html\">Meet the World\u2019s Leading AI &amp; Deep Learning ...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/problem-data-science-job-postings.html\">The problem with data science job postings</a></li></li></li></li></li></li></ul>\n</div>\n<div>\n<script type=\"text/javascript\">kda_sid_write(kda_sid_n);</script>\n</div>\n<br/><script src=\"/aps/sbm.js\" type=\"text/javascript\"></script>\n</div>\n</div><div class=\"breadcrumbs_bottom\">\n<div class=\"breadcumb\">\n<br>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2017/index.html\">2017</a> \u00bb <a href=\"https://www.kdnuggets.com/2017/09/index.html\">Sep</a> \u00bb <a href=\"https://www.kdnuggets.com/2017/09/tutorials.html\">Tutorials, Overviews</a> \u00bb Visualizing Cross-validation Code (\u00a0<a href=\"/2017/n34.html\">17:n34</a>\u00a0)    </br></div>\n</div>\n<!--#content_wrapper end--></div>\n<br>\n<div id=\"footer\">\n<br/>\u00a9 2019 KDnuggets. <a href=\"/about/index.html\">About KDnuggets</a>. \u00a0<a href=\"/news/privacy-policy.html\">Privacy policy</a>. <a href=\"/terms-of-service.html\">Terms of Service</a><br/>\u00a0\n<div class=\"kd_bottom\">\n<div class=\"footer-container\">\n<div class=\"footer-news\">\n<a href=\"/news/subscribe.html\" onclick=\"_gaq.push(['_trackPageview','/x/bot/sub']);\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a>\n</div>\n<div class=\"footer-sm\">\n<a href=\"https://twitter.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/twt']);\" target=\"_blank\"><img height=\"32\" src=\"/images/tw_c48.png\" width=\"32\"/></a>\n<a href=\"https://facebook.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/fb']);\" target=\"_blank\"><img alt=\"Facebook\" height=\"32\" src=\"/images/fb_c48.png\" width=\"32\"/></a>\n<a href=\"https://www.linkedin.com/groups/54257\" onclick=\"_gaq.push(['_trackPageview','/x/bot/in']);\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"32\" src=\"/images/in_c48.png\" width=\"32\"/></a>\n</div>\n</div>\n<div class=\"close-footer\">X</div>\n</div>\n<script type=\"text/javascript\">\n  jQuery('.close-footer').click(\n      function(){       \n         jQuery('.kd_bottom').hide();\n      }\n   );\n</script> </div>\n<div class=\"clear\"><!--blank--></div>\n</br></div>\n<div style=\"display: none;\"><div id=\"boxzilla-box-82996-content\"><script type=\"text/javascript\">(function() {\n\tif (!window.mc4wp) {\n\t\twindow.mc4wp = {\n\t\t\tlisteners: [],\n\t\t\tforms    : {\n\t\t\t\ton: function (event, callback) {\n\t\t\t\t\twindow.mc4wp.listeners.push({\n\t\t\t\t\t\tevent   : event,\n\t\t\t\t\t\tcallback: callback\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})();\n</script><!-- MailChimp for WordPress v4.1.14 - https://wordpress.org/plugins/mailchimp-for-wp/ --><form class=\"mc4wp-form mc4wp-form-77281\" data-id=\"77281\" data-name=\"Subscribe to KDnuggets News\" id=\"mc4wp-form-1\" method=\"post\"><div class=\"mc4wp-form-fields\"><div class=\"header-container\">\n<img align=\"left\" src=\"/wp-content/uploads/envelope.png\"><a href=\"/news/subscribe.html\">Get KDnuggets, a leading newsletter on AI, \r\n  Data Science, and Machine Learning</a>\n</img></div>\n<div class=\"form-fields\">\n<div class=\"field-container\"><label>Email:</label><input maxlength=\"60\" name=\"EMAIL\" placeholder=\"Your email\" required=\"\" size=\"30\" type=\"email\"/></div>\n<div class=\"field-container submit-container\"><div class=\"form-button\" onclick=\"document.getElementById('mc4wp-form-1').submit()\">Sign Up</div></div>\n</div>\n<label style=\"display: none !important;\">Leave this field empty if you're human: <input autocomplete=\"off\" name=\"_mc4wp_honeypot\" tabindex=\"-1\" type=\"text\" value=\"\"/></label><input name=\"_mc4wp_timestamp\" type=\"hidden\" value=\"1556379501\"/><input name=\"_mc4wp_form_id\" type=\"hidden\" value=\"77281\"/><input name=\"_mc4wp_form_element_id\" type=\"hidden\" value=\"mc4wp-form-1\"/></div><div class=\"mc4wp-response\"></div></form><!-- / MailChimp for WordPress Plugin -->\n</div></div><script type=\"text/javascript\">(function() {function addEventListener(element,event,handler) {\n\tif(element.addEventListener) {\n\t\telement.addEventListener(event,handler, false);\n\t} else if(element.attachEvent){\n\t\telement.attachEvent('on'+event,handler);\n\t}\n}function maybePrefixUrlField() {\n\tif(this.value.trim() !== '' && this.value.indexOf('http') !== 0) {\n\t\tthis.value = \"http://\" + this.value;\n\t}\n}\n\nvar urlFields = document.querySelectorAll('.mc4wp-form input[type=\"url\"]');\nif( urlFields && urlFields.length > 0 ) {\n\tfor( var j=0; j < urlFields.length; j++ ) {\n\t\taddEventListener(urlFields[j],'blur',maybePrefixUrlField);\n\t}\n}/* test if browser supports date fields */\nvar testInput = document.createElement('input');\ntestInput.setAttribute('type', 'date');\nif( testInput.type !== 'date') {\n\n\t/* add placeholder & pattern to all date fields */\n\tvar dateFields = document.querySelectorAll('.mc4wp-form input[type=\"date\"]');\n\tfor(var i=0; i<dateFields.length; i++) {\n\t\tif(!dateFields[i].placeholder) {\n\t\t\tdateFields[i].placeholder = 'YYYY-MM-DD';\n\t\t}\n\t\tif(!dateFields[i].pattern) {\n\t\t\tdateFields[i].pattern = '[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])';\n\t\t}\n\t}\n}\n\n})();</script><script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_options = {\"testMode\":\"\",\"boxes\":[{\"id\":82996,\"icon\":\"&times;\",\"content\":\"\",\"css\":{\"background_color\":\"#eeee22\",\"width\":600,\"border_width\":2,\"border_style\":\"double\",\"position\":\"center\"},\"trigger\":{\"method\":\"time_on_page\",\"value\":\"3\"},\"animation\":\"fade\",\"cookie\":{\"triggered\":0,\"dismissed\":336},\"rehide\":true,\"position\":\"center\",\"screenWidthCondition\":{\"condition\":\"larger\",\"value\":500},\"closable\":true,\"post\":{\"id\":82996,\"title\":\"Subscribe to KDnuggets\",\"slug\":\"subscribe-to-kdnuggets\"}}]};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla/assets/js/script.min.js?ver=3.2.5\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_stats_config = {\"ajaxurl\":\"https:\\/\\/www.kdnuggets.com\\/wp-admin\\/admin-ajax.php?action=boxzilla_stats_track\"};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla-stats/assets/js/tracking.min.js?ver=1.0.4\" type=\"text/javascript\"></script>\n<script src=\"https://www.kdnuggets.com/wp-includes/js/wp-embed.min.js?ver=4.9.10\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar mc4wp_forms_config = [];\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/forms-api.min.js?ver=4.1.14\" type=\"text/javascript\"></script>\n<!--[if lte IE 9]>\n<script type='text/javascript' src='https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/third-party/placeholders.min.js?ver=4.1.14'></script>\n<![endif]-->\n<!--/.main_wrapper--></body></html>\n<script src=\"https://s7.addthis.com/js/300/addthis_widget.js#pubid=gpsaddthis\" type=\"text/javascript\"></script>\n\n\n<!-- Dynamic page generated in 0.623 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2019-04-27 11:38:21 -->\n<!-- Compression = gzip -->", "content_tokenized": ["sagar", "sharma", "machin", "learn", "program", "aficionado", "let", "visual", "improv", "predict", "let", "say", "are", "write", "nice", "and", "clean", "machin", "learn", "code", "linear", "regress", "code", "first", "divid", "dataset", "into", "two", "part", "train", "set", "and", "test", "set", "usual", "with", "the", "function", "like", "traintestsplit", "and", "with", "some", "random", "factor", "predict", "could", "slight", "under", "overfit", "like", "the", "figur", "below", "fig", "under", "and", "overfit", "predict", "and", "the", "result", "are", "not", "chang", "what", "can", "the", "name", "the", "suggest", "crossvalid", "the", "next", "fun", "thing", "after", "learn", "linear", "regress", "becaus", "help", "improv", "predict", "use", "the", "kfold", "strategi", "what", "kfold", "ask", "everyth", "explain", "below", "with", "code", "the", "full", "code", "fig", "cross", "valid", "with", "visual", "code", "insight", "the", "abov", "code", "divid", "into", "num", "step", "num", "load", "and", "divid", "target", "dataset", "fig", "load", "the", "dataset", "are", "copi", "the", "target", "dataset", "variabl", "see", "the", "dataset", "uncom", "the", "print", "line", "num", "model", "select", "fig", "model", "select", "just", "make", "thing", "simpl", "will", "use", "linear", "regress", "learn", "about", "more", "click", "linear", "regress", "the", "easier", "way", "post", "num", "crossvalid", "fig", "cross", "valid", "sklearn", "process", "and", "also", "function", "the", "sklearn", "where", "model", "the", "model", "select", "which", "want", "perform", "crossvalid", "data", "the", "data", "target", "the", "target", "valu", "wrt", "the", "data", "option", "the", "total", "number", "fold", "aka", "kfold", "this", "process", "divid", "the", "data", "two", "set", "like", "usual", "train", "and", "test", "set", "like", "shown", "below", "fig", "train", "set", "blue", "and", "test", "set", "red", "but", "divid", "the", "dataset", "into", "equal", "part", "kfold", "improv", "the", "predict", "and", "general", "better", "then", "train", "the", "model", "the", "bigger", "dataset", "and", "test", "the", "smaller", "dataset", "let", "say", "the", "num", "fig", "num", "equal", "fold", "part", "now", "the", "first", "iter", "model", "split", "will", "look", "someth", "like", "this", "where", "red", "test", "blue", "train", "data", "fig", "crossval", "first", "iter", "the", "second", "iter", "will", "look", "like", "the", "figur", "below", "fig", "crossval", "second", "iter", "and", "till", "the", "last", "numth", "iter", "that", "will", "look", "someth", "like", "this", "figur", "below", "fig", "crossval", "sixth", "iter", "num", "visual", "the", "data", "with", "matplotlib", "fig", "visual", "with", "matplotlib", "for", "visualis", "are", "import", "matplotlib", "librari", "then", "make", "subplot", "creat", "scatter", "point", "with", "black", "outlin", "edgecolor", "use", "axplot", "give", "minimum", "maximum", "valu", "for", "both", "axi", "with", "repres", "the", "type", "line", "with", "the", "line", "width", "num", "next", "give", "label", "and", "axi", "last", "show", "the", "graph", "the", "result", "fig", "predict", "this", "graph", "repres", "the", "fold", "cross", "valid", "for", "the", "boston", "dataset", "with", "linear", "regress", "model", "sure", "there", "mani", "type", "cross", "valid", "that", "peopl", "implement", "but", "kfold", "good", "and", "easi", "type", "start", "from", "get", "the", "full", "code", "this", "github", "link", "github", "follow", "medium", "get", "similar", "post", "will", "post", "num", "post", "per", "week", "miss", "the", "code", "tutori", "contact", "facebook", "twitter", "linkedin", "googl", "ani", "comment", "have", "ani", "question", "write", "the", "comment", "clap", "share", "follow", "happi", "help", "kudo", "bio", "sagar", "sharma", "sagarsharmanum", "interest", "program", "python", "arduino", "machin", "learn", "also", "like", "write", "stuff", "origin", "repost", "with", "permiss", "relat", "understand", "the", "biasvari", "tradeoff", "overview", "make", "predict", "model", "robust", "holdout", "crossvalid", "understand", "overfit", "inaccur", "meme", "machin", "learn"], "timestamp_scraper": 1556379502.045027, "title": "Visualizing Cross-validation Code", "read_time": 189.9, "content_html": "<div class=\"post\" id=\"post-\">\n<p><b>By Sagar Sharma, Machine Learning &amp; Programming Aficionado.</b></p>\n<p>Let\u2019s\u00a0<strong>visualize</strong>\u00a0to improve your prediction...</p>\n<p>Let us say, you are writing a nice and clean Machine Learning code (e.g. Linear Regression). You code is OK, first you divided your dataset into two parts, \"Training Set and Testing Set\" as usual with the function like\u00a0<em>train_test_split</em> and with some\u00a0<em>random factor.</em> Your prediction could be slightly under or overfit, like the figures below.</p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*0Z42x0nYm-WyftKiALjZLg.png\" width=\"99%\"/><br>\n<font size=\"-1\">Fig: Under and Over-Fit Prediction</font></br></center></p>\n<p>and the results are not changing. So what can we do?</p>\n<p>As the name of the suggests, cross-validation is the next fun thing after learning\u00a0<em>Linear Regression</em>\u00a0because it helps to improve your prediction using the\u00a0<strong><em>K-Fold\u00a0</em></strong>strategy. What is K-Fold you asked? Everything is explained below with\u00a0<strong>Code</strong>.</p>\n<p>The Full Code\u00a0:)</p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*Vhcivhf78YxOHV2opJCJig.png\" width=\"99%\"/><br>\n<font size=\"-1\">Fig:- Cross Validation with Visualization</font></br></center></p>\n<p>Code Insight:</p>\n<p>The above code is divided into 4 steps...</p>\n<p><b>1. <strong>Load</strong>\u00a0and\u00a0<strong>Divide target</strong>\u00a0dataset.</b></p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*Pxt_DjJfvTxRItkRByl2Rg.png\" width=\"80%\"/><br>\n<font size=\"-1\">Fig:- Load the\u00a0dataset</font></br></center></p>\n<p>We are copying the target in dataset to\u00a0<em>y\u00a0</em>variable<em>.\u00a0</em>To see the dataset uncomment the\u00a0<em>print</em>\u00a0line.</p>\n<p><b>2.\u00a0<strong>Model Selection</strong></b></p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*9Diy5bR8aWuIUv4g9zcDHw.png\" width=\"80%\"/><br>\n<font size=\"-1\">Fig:- Model Selection (LinearRegression())</font></br></center></p>\n<p>Just to make things simple we will use Linear Regression. To learn about it more click on \u201c<a href=\"https://medium.com/@sagarsharma4244/linear-regression-the-easier-way-6f941aa471ea\" target=\"_blank\">Linear Regression: The Easier Way</a>\u201d Post.</p>\n<p><b><strong>3. Cross-Validation\u00a0:)</strong></b></p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*X8MWzwLc7Trt3fvvWHb6TA.png\" width=\"80%\"/><br/>\n<font size=\"-1\">Fig:- Cross Validation in\u00a0sklearn</font></center></p>\n<p>It is a process and also a function in the sklearn</p>\n<p><strong><em>cross_val_predict(model, data, target, cv)</em></strong></p>\n<p>where,</p>\n<ul>\n<li><strong><em>model\u00a0</em></strong>is the model we selected on which we want to perform cross-validation\n<li><strong><em>data\u00a0</em></strong>is the data.\n<li><strong><em>target\u00a0</em></strong>is the target values w.r.t. the data.\n<li><strong><em>cv\u00a0</em></strong>(optional)is the total number of folds (a.k.a.\u00a0<em>K-Fold\u00a0</em>).\n</li></li></li></li></ul>\n<p>In this process, we don\u2019t divide the data in two sets like usual (training and test set) like shown below.</p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*fDK2iB1t7f2Gdyqfv3PMBg.png\" width=\"65%\"/><br/>\n<font size=\"-1\">Fig:- Train set (Blue)and Test set\u00a0(Red)</font></center></p>\n<p>But we divide the dataset into equal\u00a0<em>K</em>\u00a0parts (<em>K-Folds or\u00a0</em><strong><em>cv</em></strong>).\u00a0<strong>To improve the prediction and to generalize better.\u00a0</strong>Then train the model on the bigger dataset and test on the smaller dataset. Let us say the\u00a0<strong><em>cv</em></strong><em>\u00a0</em>is\u00a0<strong>6.</strong></p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*JnKOeRJVhkLWsO7IDF8cUw.png\" width=\"65%\"/><br/>\n<font size=\"-1\">Fig:- 6 equal folds or\u00a0parts</font></center></p>\n<p>Now, the first iteration of model splitting will look something like this where Red is test &amp; Blue is Train data.</p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*NpzABcZwTgDy1Xsn3gPuog.png\" width=\"65%\"/><br/>\n<font size=\"-1\">Fig:- cross_val first iteration</font></center></p>\n<p>The second iteration will look like the Figure below.</p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*9TwfQwZe7e8IVCTfO8ja6g.png\" width=\"65%\"/><br/>\n<font size=\"-1\">Fig:- cross_val second iteration</font></center></p>\n<p>and so on till the last or 6th iteration that will look something like this figure below.</p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*j2fqzW4qFey-rd1FdXILqQ.png\" width=\"65%\"/><br/>\n<font size=\"-1\">Fig:- cross_val sixth iteration</font></center></p>\n<p><b>4.\u00a0<strong>Visualize\u00a0</strong>the Data with\u00a0<strong>Matplotlib</strong></b></p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*z6vxTbLwrDIfF_B88k9JGg.png\" width=\"99%\"/><br/>\n<font size=\"-1\">Fig:- Visualize with Matplotlib</font></center></p>\n<p>For visualisation we are importing\u00a0<strong><em>matplotlib</em>\u00a0</strong>library. Then making a\u00a0<strong><em>subplot</em></strong>.</p>\n<p>Creating\u00a0<strong><em>scatter</em>\u00a0</strong>points with black (i.e(0,0,0)) outline or\u00a0<em>edgecolors</em>.</p>\n<p>Using\u00a0<strong><em>ax.plot</em></strong>\u00a0to give minimum &amp; maximum values for both axis with '<strong><em>k--</em></strong>' representing the type of line with the line width i.e.\u00a0<strong><em>lw</em></strong><em>\u00a0</em><strong><em>= 4</em></strong>.</p>\n<p>Next, giving label to x and y axis.</p>\n<p><strong><em>plt.show()</em></strong>\u00a0at last to show the graph.</p>\n<p><b>The Result</b></p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*tGIm55wwRHYkQ3WflI-SKA.png\" width=\"65%\"/><br/>\n<font size=\"-1\">Fig:- Prediction</font></center></p>\n<p>This graph represents the k- folds Cross Validation for the Boston dataset with Linear Regression model.</p>\n<p>I\u2019m sure there many types of cross validation that people implement but K-folds is a good and an easy type to start from.</p>\n<p>To get the full code go to this github link:\u00a0<a href=\"https://github.com/Sagarsharma4244/Cross-Validation\" target=\"_blank\">Github</a></p>\n<p>Follow me on <a href=\"https://medium.com/@sagarsharma4244\" target=\"_blank\">Medium</a> to get similar posts.</p>\n<p>I will be posting 2 posts per week so don\u2019t miss the Code tutorial.</p>\n<p>Contact me on <a href=\"https://www.facebook.com/profile.php?id=100003188718299\" target=\"_blank\">Facebook</a>, <a href=\"https://twitter.com/SagarSharma4244\" target=\"_blank\">Twitter</a>, <a href=\"https://www.linkedin.com/in/sagar-sharma-232a06148/\" target=\"_blank\">Linkedin</a>, <a href=\"https://plus.google.com/+SAGARSHARMA4244\" target=\"_blank\">Google+</a>.</p>\n<p>Any comments or if you have any question, write it in the comment.</p>\n<p>Clap it! Share it! Follow Me !</p>\n<p>Happy to be helpful. kudos...</p>\n<p>\u00a0<br/>\n<b>Bio: <a href=\"https://medium.com/@sagarsharma4244\" target=\"_blank\">Sagar Sharma</a></b> (<a href=\"https://twitter.com/SagarSharma4244\" target=\"_blank\">@SagarSharma244</a>) is interested in Programming (Python, C++), Arduino, Machine learning :). He also likes to write stuff.</p>\n<p><a href=\"https://medium.com/towards-data-science/cross-validation-code-visualization-kind-of-fun-b9741baea1f8\" target=\"_blank\">Original</a>. Reposted with permission.</p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2016/08/bias-variance-tradeoff-overview.html\">Understanding the Bias-Variance Tradeoff: An Overview</a>\n<li><a href=\"/2017/08/dataiku-predictive-model-holdout-cross-validation.html\">Making Predictive Models Robust: Holdout vs Cross-Validation</a>\n<li><a href=\"/2017/08/understanding-overfitting-meme-supervised-learning.html\">Understanding overfitting: an inaccurate meme in Machine Learning</a>\n</li></li></li></ul>\n</div> ", "website": "kdnuggets"}