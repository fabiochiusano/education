{"content": "comments By\u00a0 Rajiv Shah ,\u00a0data scientist at DataRobot As a data scientist, you spend a lot of your time helping to make better decisions. You build predictive models to provide improved insights. You might be predicting whether an image is a cat or dog, store sales for the next month, or the likelihood if a part will fail. In this post, I won't help you with making better predictions, but instead how to make the best decision. The post strives to give you some background on optimization. It starts with a simply toy example show you the math behind an optimization calculation. After that, this post tackles a more sophisticated optimization problem, trying to pick the best team for fantasy football. The FanDuel image below is a very common sort of game that is widely played (ask your in-laws). The optimization strategies in this post were shown to consistently win! Along the way, I will show a few code snippets and provide links to working code in R, Python, and Julia. And if you do win money, feel free to share it :) A simple example, which I found online , starts with a carpenter making bookcases in two sizes, large and small. It takes 6 hours to make a large bookcase and 2 hours to make a small one. The profit on a large bookcase is $50, and the profit on a small bookcase is $20. The carpenter can spend only 24 hours per week making bookcases and must make at least 2 of each size per week. Your job as a data scientist is to help your carpenter maximize her revenue. Your initial inclination could be that since the large bookcase is the most profitable, why not focus on them. In that case, you would profit (2*$20) + (3*$50) which is $190. That is a pretty good baseline, but not the best possible answer. It is time to get the algebra out and create equations that define the problem. First, we start with the constraints: \r x>=2 ## large bookcases\r \r y>=2 ## small bookcases\r \r 6x + 2y <= 24 (labor constraint)\r \u00a0 Our objective function which we are trying to maximize is: \r P = 50x + 20y\r \u00a0 If we do the algebra by hand, we can convert out constraints to y <= 12 - 3x . Then we graph all the constraints and find the feasible area for the portion of making small and large bookcases: The next step is figuring out the optimal point. Using the corner-point principle of linear programming, the maximum and minimum values of the objective function each occur at one of the vertices of the feasible region. Looking here, the maximum values (2,6) is when we make 2 large bookcases and 6 small bookcases, which results in an income of $220. This is a very simple toy problem, typically there are many more constraints and the objective functions can get complicated. There are lots of classic problems in optimization such as routing algorithms to find the best path, scheduling algorithms to optimize staffing, or trying to find the best way to allocate a group of people to set of tasks. As a data scientist, you need to dissect what you are trying to maximize and identify the constraints in the form of equations. Once you can do this, we can hand this over to a computer to solve. So lets next walk through a bit more complicated example. Fantasy Football Over the last few years, fantasy sports have increasingly grown in popularity. One game is to pick a set of football players to make the best possible team. Each football player has a price and there is a salary cap limit. The challenge is to optimize your team to produce the highest total points while staying within a salary cap limit. This type of optimization problem is known as the knapsack problem or an assignment problem. Simple Linear Optimization Let's start by loading a dataset and taking a look at the raw data. You need to know both the salary as well as the expected points. Most football fans spend a lot of time trying to predict how many points a player will score. If you want to build a model for predicting the expected performance of a player, take a look at Ben's blog post . The goal here is to build the best possible team for a salary cap, let's say $50,000. A team consists of a quarterback, running backs, wide receivers, tight ends, and a defense. We can use the lpSolve package in R to set up the problem. Here is a code snippet for setting up the constraints. If you parse through this, you can see we have set a minimum and maximum for QB of 1 player. However, for the RB, we have allowed a maximum of 3 and a minimum of 2. This is not unusual in fantasy football, be because there is a role called a flex player, which anyone can choose, and they can either be a RB, WR, or TE. Now let's look at the code for the objective: The code shows that we have set up the problem to maximize the objective of the most points and include our constraints. Once the code is run, it outputs an optimal team! I forked an existing repo and have made the R code and dataset are available here. A more sophisticated python optimization repo is also available. Advanced steps So far, we have built a very simple optimization to solve the problem. There are several other strategies to further improve the optimizer. First, the variance of our teams can be increased by using a strategy called stacking , where you make sure your QB and WR are on the same team. A simple optimization is a constraint for selecting a QB and WR from the same team. Another strategy is using an overlap constraint for selecting multiple lineups. An overlap constraint ensures a diversity of players and not the same set of players for each optimized team. This strategy is particularly effective when submitting multiple lineups. You can read more about these strategies here and run the code in Julia here . A code snippet of the stacking constraint (this is for a hockey optimization): Last year, at Sloan sports conference, Haugh and Sighal , presented a paper with additional optimization constraints. They include what an opponent\u2019s \u00a0team is likely to look like. After all, there are some players that are much more popular. Using this knowledge, you can predict the likely teams that will oppose your team. The approach here used Dirichlet regressions for modeling players. The result was a much-improved optimizer that was capable of consistently winning! I hope this post has shown you how optimization strategies can help you find the best possible solution. Bio :\u00a0 Rajiv Shah is a data scientist at DataRobot , where he works with customers to make and implement predictions. Previously, Rajiv has been part of data science teams at Caterpillar and State Farm. He enjoys data science and spends time mentoring data scientists, speaking at events, and having fun with blog posts. He has a Ph.D. from the University of Illinois at Urbana Champaign. Related: Why Germany did not defeat Brazil in the final, or Data Science lessons from the World Cup The Guerrilla Guide to Machine Learning with Julia Only Numpy: Implementing GANs and Adam Optimizer using Numpy", "title_html": "<h1 id=\"title\">Optimization 101 for Data Scientists</h1> ", "url": "https://www.kdnuggets.com/2018/08/optimization-101-data-scientists.html", "tfidf": {"tfidf": {"after": 2.04140414042, "hand": 3.2304405331200003, "carpent": 66.7994389902, "onc": 2.9949066213999997, "relat": 1.23750876919, "form": 1.12755681818, "repo": 738.418604652, "assign": 3.83663605607, "addit": 1.24634950542, "would": 1.0828729281799998, "cup": 6.70156184044, "incom": 3.92, "brazil": 7.31275909719, "dataset": 387.219512196, "function": 7.486325055, "knapsack": 610.615384615, "dog": 6.26272189349, "python": 112.5957446808, "well": 1.0655748708, "further": 1.3618116315, "approach": 2.07556543339, "path": 4.6421052631599995, "toy": 30.767441860399998, "illinoi": 8.63295269168, "know": 2.59327017315, "labor": 5.12129032258, "stack": 39.297029703, "grown": 5.78993435449, "instead": 1.59461631177, "creat": 1.2492917847, "defens": 3.19115577889, "enjoy": 3.3269069572500003, "multipl": 5.49627834516, "how": 4.80750984153, "present": 1.25551601423, "increas": 2.6404989605, "initi": 1.35, "end": 1.10680423871, "found": 1.11387076405, "will": 4.89924394384, "event": 1.5356935577500002, "snippet": 407.07692307600007, "alloc": 10.5558510638, "wide": 3.1196698762, "constraint": 195.6284360186, "next": 4.485168094920001, "below": 2.25607503197, "perform": 1.5313977042500002, "but": 2.03264835798, "maximum": 19.20290293316, "need": 2.8745247148199997, "our": 7.07276507277, "background": 4.02739726027, "final": 1.34008609775, "germani": 2.61118421053, "expect": 4.4002217295, "point": 6.2995000397, "likelihood": 23.4852071006, "walk": 3.56363636364, "sport": 6.59302325582, "has": 4.1745990008, "fun": 12.8863636364, "region": 1.7647843486, "optim": 242.2936046517, "defeat": 2.87869446963, "out": 3.18050083473, "her": 1.7770315648099997, "model": 6.2717935212, "good": 1.51981619759, "sure": 7.453521126760001, "algebra": 82.9033942558, "julia": 62.916776750400004, "program": 2.02139037433, "datarobot": 2886.54545454, "not": 5.07836990595, "far": 1.71022298826, "solut": 4.7278141751, "shown": 5.53846153846, "champaign": 283.5, "then": 1.08657860516, "complic": 11.295624332980001, "they": 2.06034650574, "anoth": 1.13643521832, "sale": 3.4274611399, "last": 2.4234468020200004, "choos": 4.17899447223, "world": 1.11340206186, "minimum": 18.088872009120003, "within": 1.2369302688, "blog": 28.3753351206, "ensur": 3.4127257093700005, "simpl": 16.990582191799998, "provid": 2.43105428374, "hockey": 10.5981308411, "valu": 4.555523672880001, "either": 1.5830092731099998, "such": 1.06151377374, "sever": 1.07241286139, "confer": 2.8324710080299997, "math": 22.0806675939, "lot": 13.22632602054, "some": 2.08073394496, "phd": 22.3605633803, "small": 8.1568761774, "both": 1.05215720061, "baselin": 57.7309090909, "call": 2.1353059852, "result": 2.29223216864, "classic": 2.4087391898, "receiv": 1.3054847463200001, "set": 8.30955585467, "two": 1.01379310345, "sophist": 20.0075614366, "improv": 4.08753861998, "from": 3.00170164491, "fanduel": 1443.27272727, "answer": 4.64890190337, "allow": 1.2716059271100002, "limit": 3.0373062942400004, "whether": 2.20683903253, "num": 23.00724592023, "free": 1.71818181818, "equat": 19.5396923077, "for": 14.00441056014, "predict": 36.293925538850004, "output": 7.676982591880001, "with": 8.009585671919998, "are": 9.26915342202, "speak": 2.89127663449, "better": 4.0131445905000005, "month": 1.5079787234, "look": 9.543159413299998, "popular": 3.01538461538, "stay": 2.6986231514499996, "varianc": 51.3786407767, "numpi": 2886.54545454, "veri": 3.77640342531, "work": 2.23040179826, "pars": 145.651376147, "focus": 2.01012914662, "dirichlet": 547.448275862, "tackl": 19.8698372966, "group": 1.20996875238, "give": 1.3653250774, "cap": 27.123006833699996, "guerrilla": 19.5276752768, "step": 5.655860349119999, "total": 1.5460122699399999, "ask": 2.1744966443, "type": 2.0281042411900003, "oppos": 2.51282051282, "salari": 40.8385852092, "scientist": 28.165582495560002, "machin": 4.02433460076, "paper": 2.6628648104700003, "tight": 10.0100882724, "through": 2.14149861738, "figur": 2.0343413634, "effect": 1.3963060686000002, "rout": 3.1619199362700003, "what": 2.50686878256, "highest": 2.50212765957, "let": 13.94466403164, "revenu": 5.98416886544, "help": 5.59851891036, "strive": 21.9585062241, "larg": 8.300246470949999, "scienc": 6.959088252479999, "overlap": 24.1827875096, "least": 1.6165359943000002, "unusu": 4.68180477735, "occur": 1.7453825857499998, "hour": 6.77882152008, "univers": 1.24889867841, "sloan": 47.8192771084, "post": 15.66784153389, "here": 16.96153846156, "were": 1.02458857696, "footbal": 28.165582495560002, "onlin": 2.6051854282900004, "much": 1.1942229577299999, "about": 1.06486015159, "problem": 17.6674827509, "job": 3.2539454806299997, "have": 7.104263887979998, "adam": 4.43092380687, "price": 3.4838709677399997, "simpli": 2.5192002538900002, "guid": 2.49113447356, "defin": 2.72830383227, "haugh": 1443.27272727, "where": 2.13430127042, "start": 5.06694326976, "run": 4.6707855251399995, "flex": 75.6, "them": 1.09876115994, "insight": 11.8037174721, "load": 6.80497213888, "whi": 6.513230769240001, "oppon": 5.292000000000001, "fork": 33.5644820296, "inclin": 14.9210526316, "numi": 177.3854748604, "play": 1.46390041494, "mani": 2.08853515754, "other": 1.00992366412, "over": 2.05050048434, "goal": 3.28152128979, "build": 4.9025218734000005, "algorithm": 55.9014084508, "linear": 27.7552447552, "team": 31.847542627880003, "same": 3.35573874444, "graph": 37.7102137767, "link": 2.15151104486, "there": 6.24547600314, "exist": 1.4647107666799999, "possibl": 5.6694937952, "say": 1.7544480053, "best": 12.662811565280002, "exampl": 4.51450236966, "spend": 16.63714959392, "hope": 2.50884955752, "knowledg": 3.3981164383599998, "take": 3.4188500466600003, "lesson": 8.66593886463, "previous": 1.42846859816, "now": 1.160780873, "farm": 4.4272169548199996, "strategi": 31.09457190826, "tri": 9.272281275549998, "code": 34.92642385728, "per": 3.9195161091199995, "divers": 3.97197898424, "regress": 51.2129032258, "feel": 3.1356903021900004, "also": 1.01476510067, "sighal": 1443.27272727, "typic": 2.2541530597799997, "money": 2.62283165373, "staf": 31.437623762399998, "task": 3.88641370869, "role": 1.55327267391, "cornerpoint": 1443.27272727, "rajiv": 595.3499999999999, "the": 74.0, "area": 1.3881262568900001, "peopl": 1.21320495186, "challeng": 2.55816951337, "want": 1.99698113208, "convert": 3.2740771293099997, "vertic": 8.974561899380001, "behind": 2.0845588235299997, "howev": 1.0945191313299998, "share": 1.8566249561500001, "win": 8.25871336917, "calcul": 6.12972972973, "week": 3.61064362066, "maxim": 51.713355048800004, "which": 5.025959224999999, "raw": 10.6478873239, "one": 3.01882487166, "show": 3.80111731845, "known": 1.0859097127200001, "custom": 3.6346153846199996, "see": 1.27242125511, "caterpillar": 98.6086956522, "becaus": 1.1495184997499999, "imag": 5.40275650842, "mentor": 14.8373831776, "get": 3.5712518277, "like": 3.44755700325, "implement": 7.15296237892, "select": 4.04690288044, "portion": 3.3019966722099996, "part": 2.08661365578, "includ": 2.0381282495599997, "identifi": 2.30187037843, "anyon": 5.37440758294, "shah": 54.744827586199996, "numx": 86.5963636365, "pick": 9.879278158060002, "this": 13.049317147230001, "schedul": 3.6648199445999996, "principl": 3.4520547945199995, "time": 4.04509841392, "dissect": 63.7590361446, "back": 1.26070038911, "bit": 8.33385826772, "fan": 4.805084745759999, "been": 1.0239277652399998, "first": 2.01523229246, "most": 3.06289389069, "player": 35.4375, "particular": 1.3814827706200001, "fail": 1.9281029876099998, "along": 1.2973768080399999, "all": 2.02293577982, "store": 3.44680851064, "solv": 14.53846153846, "case": 1.48498737256, "feasibl": 35.6363636364, "ben": 7.18046132972, "that": 10.0398406375, "sort": 5.188235294119999, "lpsolv": 1443.27272727, "gan": 101.121019108, "built": 1.99447236181, "object": 11.744340878850002, "more": 6.1030240902, "and": 33.002078740289996, "while": 1.0441988950299999, "consist": 4.4704336399499995, "these": 1.07415426252, "cat": 10.5348374253, "capabl": 3.6580645161300005, "made": 1.07038834951, "could": 1.2043695949, "comment": 3.05954904606, "submit": 5.770992366410001, "state": 1.0477133240899998, "year": 2.0970873786400004, "can": 15.29139808846, "avail": 3.4576935642, "comput": 3.9277585353800006, "make": 13.991458206180003, "way": 2.4381478922, "onli": 2.0512953033200003, "each": 4.75899280576, "size": 4.9877474081, "few": 2.63458347162, "find": 6.917647058839999, "read": 2.3149606299200003, "packag": 7.828402366860001, "pretti": 15.75, "advanc": 1.9997480791, "common": 1.4025974025999999, "data": 33.7643555934, "muchimprov": 1443.27272727, "inlaw": 1443.27272727, "profit": 21.94333102972, "sinc": 1.08368600683, "bio": 42.336000000000006, "must": 1.9220338983099996, "might": 2.1561863370900003, "bookcas": 5457.375, "produc": 1.36932896326, "decis": 4.32, "game": 5.15957101072, "use": 7.207471301659999, "score": 4.2884927066500005, "fantasi": 48.0363086232, "quarterback": 58.8, "lineup": 51.130434782600005, "urbana": 98.0, "learn": 2.32275054865, "when": 2.0415353951}, "logtfidf": {"after": 0.040981389296199995, "hand": 0.958942670672, "carpent": 9.30924718047, "onc": 0.80753174471, "relat": 0.21310030165399999, "form": 0.120053184191, "repo": 11.82272739642, "assign": 1.3445959556, "addit": 0.220218882972, "would": 0.0796176279647, "cup": 1.90234060974, "incom": 1.3660916537999999, "brazil": 1.9896206440200002, "dataset": 10.53168913328, "function": 2.743397224782, "knapsack": 6.414467275880001, "dog": 1.8346148978799999, "python": 8.06131348592, "well": 0.0635144383156, "further": 0.308815895297, "approach": 0.7302336145810001, "path": 1.5351679838499999, "toy": 5.46661973572, "illinoi": 2.1555865893, "know": 0.952919694398, "labor": 1.6334064234299999, "stack": 5.95600351076, "grown": 1.75612095378, "instead": 0.46663315041500003, "creat": 0.222576818514, "defens": 1.16038316431, "enjoy": 1.2020430306899998, "multipl": 2.02184803624, "how": 1.4147008707900002, "present": 0.227546654799, "increas": 0.555641437858, "initi": 0.30010459245, "end": 0.101476798618, "found": 0.107841124048, "will": 0.81114613966, "event": 0.428982108147, "snippet": 14.731169637330002, "alloc": 2.35668030939, "wide": 0.8891600135079999, "constraint": 35.24648098387001, "next": 1.206491056497, "below": 0.813626591936, "perform": 0.42618085058, "but": 0.0323847441438, "maximum": 6.275068403680001, "need": 0.725480326884, "our": 2.5729176425460003, "background": 1.3931203261899998, "final": 0.292733863948, "germani": 0.959803838943, "expect": 1.57701550432, "point": 1.155161795165, "likelihood": 3.15637073786, "walk": 1.270781474, "sport": 2.38572965382, "has": 0.1708957794192, "fun": 2.5561696698099996, "region": 0.568028500824, "optim": 51.358183703609996, "defeat": 1.05733688222, "out": 0.1752791727579, "her": 0.574944311991, "model": 2.2123502193330005, "good": 0.418589404907, "sure": 2.0086865552, "algebra": 7.4490576494399985, "julia": 9.12960168141, "program": 0.7037855787649999, "datarobot": 14.549337082200001, "not": 0.0777620650375, "far": 0.536623764503, "solut": 1.55346297627, "shown": 2.03713916198, "champaign": 5.647212123169999, "then": 0.08303386523089999, "complic": 3.4625364860000003, "they": 0.0594539895352, "anoth": 0.127896361652, "sale": 1.23181979465, "last": 0.38408728922200003, "choos": 1.43007066072, "world": 0.107420248621, "minimum": 5.39005396323, "within": 0.21263272059799998, "blog": 5.30474621118, "ensur": 1.22751130026, "simpl": 6.116106446949999, "provid": 0.39035568865000003, "hockey": 2.36067764983, "valu": 1.646386620296, "either": 0.459327638815, "such": 0.059695977806, "sever": 0.06991112039689999, "confer": 1.0411494784, "math": 3.09470245618, "lot": 4.450790850750001, "some": 0.079147018129, "phd": 3.10729884387, "small": 1.8426108303539999, "both": 0.050842533389300004, "baselin": 4.05579271624, "call": 0.1309255488976, "result": 0.272757816762, "classic": 0.8791034528499999, "receiv": 0.266574424922, "set": 1.200472079023, "two": 0.0136988443582, "sophist": 4.60592618676, "improv": 1.4295916078639999, "from": 0.0017011625065979999, "fanduel": 7.2746685411000005, "answer": 1.5366310419, "allow": 0.24028061118900002, "limit": 0.83564770926, "whether": 0.791561189647, "num": 0.007244779094131001, "free": 0.5412666492670001, "equat": 4.55860143828, "for": 0.0044098655355580005, "predict": 11.52018166383, "output": 2.03822657827, "with": 0.00957993370712, "are": 0.2652072622443, "speak": 1.06169814662, "better": 1.3928558812, "month": 0.410770160338, "look": 3.2319334680000003, "popular": 0.8211604175499999, "stay": 0.9927416990379999, "varianc": 3.9392225370099996, "numpi": 14.549337082200001, "veri": 0.6904793797140001, "work": 0.218069134546, "pars": 4.9812159316699995, "focus": 0.6981989720559999, "dirichlet": 6.305267983919999, "tackl": 2.98920286814, "group": 0.190594534797, "give": 0.311392552224, "cap": 6.605310119129999, "guerrilla": 2.9718327043599997, "step": 2.07909011396, "total": 0.43567888670500005, "ask": 0.776797209847, "type": 0.707101485387, "oppos": 0.921405832541, "salari": 9.293331957160001, "scientist": 9.278047706639999, "machin": 1.39235958062, "paper": 0.979402539665, "tight": 2.3035934117099996, "through": 0.1367173837698, "figur": 0.7101721121600001, "effect": 0.333830227158, "rout": 1.15117941787, "what": 0.451774593654, "highest": 0.917141433754, "let": 4.995210269119999, "revenu": 1.78911745977, "help": 1.344830885376, "strive": 3.0891545917400003, "larg": 1.1926254242420002, "scienc": 2.524308536673, "overlap": 4.9849878792, "least": 0.480285584745, "unusu": 1.54368367178, "occur": 0.556973778473, "hour": 2.4455729432310003, "univers": 0.222262105686, "sloan": 3.86742884499, "post": 5.639901068906999, "here": 6.195267318590001, "were": 0.024291143681099997, "footbal": 9.278047706639999, "onlin": 0.957503854357, "much": 0.17749572930100002, "about": 0.0628434774746, "problem": 5.6914072427299995, "job": 1.1798682540899998, "have": 0.1034950163884, "adam": 1.4886080966, "price": 1.24814402264, "simpli": 0.923941491586, "guid": 0.912738218589, "defin": 1.00368010925, "haugh": 7.2746685411000005, "where": 0.1299842774914, "start": 0.945773477164, "run": 1.328144926617, "flex": 4.32545628319, "them": 0.0941833269093, "insight": 2.46841452187, "load": 1.91765354188, "whi": 2.36137686094, "oppon": 1.66619624625, "fork": 3.51346842541, "inclin": 2.7027731439999996, "numi": 8.97035601612, "play": 0.38110439064199997, "mani": 0.0866315162442, "other": 0.00987474791976, "over": 0.0498734429914, "goal": 1.18830712273, "build": 1.4734123562730002, "algorithm": 6.66088479036, "linear": 5.26055528392, "team": 11.506640528404, "same": 0.336178948812, "graph": 3.6299309802199997, "link": 0.7661704068449999, "there": 0.24058735755299998, "exist": 0.38165779408699996, "possibl": 1.395221899564, "say": 0.562154280552, "best": 3.673823463576, "exampl": 1.2260480249969998, "spend": 5.70137504464, "hope": 0.919824304455, "knowledg": 1.2232212893899999, "take": 0.392075886591, "lesson": 2.1594002686700002, "previous": 0.356602960063, "now": 0.149092945021, "farm": 1.48777115974, "strategi": 10.43786182726, "tri": 3.0879576458000004, "code": 12.20417186373, "per": 1.345642048144, "divers": 1.37926445519, "regress": 3.9359915164199997, "feel": 1.1428493419299999, "also": 0.0146571578, "sighal": 7.2746685411000005, "typic": 0.812774319158, "money": 0.964254518011, "staf": 3.4480053846300005, "task": 1.35748680661, "role": 0.44036410757399996, "cornerpoint": 7.2746685411000005, "rajiv": 15.87161153769, "the": 0.0, "area": 0.327954821122, "peopl": 0.193265578473, "challeng": 0.9392919688950001, "want": 0.6916366062549999, "convert": 1.1860360368, "vertic": 2.19439411974, "behind": 0.7345572374320001, "howev": 0.0903151173475, "share": 0.618760299747, "win": 3.0379695608699997, "calcul": 1.8131506592099997, "week": 1.1814777283239999, "maxim": 10.2376868208, "which": 0.02589206922715, "raw": 2.36536149914, "one": 0.0187660549365, "show": 0.710048298039, "known": 0.0824180805992, "custom": 1.2905032964799998, "see": 0.240921585492, "caterpillar": 4.591159448919999, "becaus": 0.139343158825, "imag": 1.98752421458, "mentor": 2.6971498864499996, "get": 1.159538011564, "like": 0.417160729635, "implement": 2.54875881814, "select": 1.409609374266, "portion": 1.1945273376899999, "part": 0.08479062196560001, "includ": 0.037769362781, "identifi": 0.833722000472, "anyon": 1.68164835081, "shah": 6.61907142072, "numx": 10.08793660704, "pick": 3.19458453522, "this": 0.0492238376825, "schedul": 1.2987792057799998, "principl": 1.2389696463600002, "time": 0.0448460754504, "dissect": 4.15511091744, "back": 0.23166743089699998, "bit": 2.12032652634, "fan": 1.56967467926, "been": 0.023645982368400004, "first": 0.015174579624319999, "most": 0.06224368888679999, "player": 12.6518548849, "particular": 0.323157393804, "fail": 0.656536611573, "along": 0.260344385917, "all": 0.022805264195599997, "store": 1.2374487335200002, "solv": 3.9673009540800006, "case": 0.395406268889, "feasibl": 5.76043877286, "ben": 1.9713636330500002, "that": 0.039761483796399995, "sort": 1.64639361896, "lpsolv": 7.2746685411000005, "gan": 4.61631800855, "built": 0.690379535065, "object": 4.269667924015, "more": 0.10214958959999998, "and": 0.0020786746880988, "while": 0.04324998379380001, "consist": 1.196619379278, "these": 0.0715336194008, "cat": 2.35468761528, "capabl": 1.2969341868100002, "made": 0.0680215260973, "could": 0.18595627229000003, "comment": 1.11826753454, "submit": 1.7528440529799998, "state": 0.0466100027668, "year": 0.09480447778920001, "can": 2.110434253122, "avail": 1.094909172578, "comput": 1.36806891594, "make": 0.9554695516976999, "way": 0.39618301987000004, "onli": 0.050648536658199995, "each": 0.694966757216, "size": 1.8276744121219999, "few": 0.551155827306, "find": 2.191125321152, "read": 0.83939268088, "packag": 2.0577584491900005, "pretti": 2.75684036527, "advanc": 0.6930212121780001, "common": 0.338325805271, "data": 12.168205848, "muchimprov": 7.2746685411000005, "inlaw": 7.2746685411000005, "profit": 6.80867562684, "sinc": 0.0803681994577, "bio": 3.7456377879300002, "must": 0.653383947388, "might": 0.7683410765340001, "bookcas": 68.2751070221, "produc": 0.314320812003, "decis": 1.5402164433919998, "game": 1.8954125160420001, "use": 0.2044561381212, "score": 1.4559353207700003, "fantasi": 9.94265117396, "quarterback": 4.0741418549, "lineup": 6.482465463940001, "urbana": 4.584967478669999, "learn": 0.842752064745, "when": 0.0411099777168}, "logidf": {"after": 0.020490694648099998, "hand": 0.479471335336, "carpent": 3.1030823934900003, "onc": 0.403765872355, "relat": 0.21310030165399999, "form": 0.120053184191, "repo": 5.91136369821, "assign": 1.3445959556, "addit": 0.220218882972, "would": 0.0796176279647, "cup": 1.90234060974, "incom": 1.3660916537999999, "brazil": 1.9896206440200002, "dataset": 5.26584456664, "function": 0.914465741594, "knapsack": 6.414467275880001, "dog": 1.8346148978799999, "python": 4.03065674296, "well": 0.0635144383156, "further": 0.308815895297, "approach": 0.7302336145810001, "path": 1.5351679838499999, "toy": 2.73330986786, "illinoi": 2.1555865893, "know": 0.952919694398, "labor": 1.6334064234299999, "stack": 2.97800175538, "grown": 1.75612095378, "instead": 0.46663315041500003, "creat": 0.222576818514, "defens": 1.16038316431, "enjoy": 1.2020430306899998, "multipl": 1.01092401812, "how": 0.47156695693000006, "present": 0.227546654799, "increas": 0.277820718929, "initi": 0.30010459245, "end": 0.101476798618, "found": 0.107841124048, "will": 0.202786534915, "event": 0.428982108147, "snippet": 4.91038987911, "alloc": 2.35668030939, "wide": 0.44458000675399995, "constraint": 2.7112677679900004, "next": 0.402163685499, "below": 0.813626591936, "perform": 0.42618085058, "but": 0.0161923720719, "maximum": 1.5687671009200002, "need": 0.362740163442, "our": 0.8576392141820001, "background": 1.3931203261899998, "final": 0.292733863948, "germani": 0.959803838943, "expect": 0.78850775216, "point": 0.23103235903299998, "likelihood": 3.15637073786, "walk": 1.270781474, "sport": 1.19286482691, "has": 0.0427239448548, "fun": 2.5561696698099996, "region": 0.568028500824, "optim": 2.4456277954099996, "defeat": 1.05733688222, "out": 0.0584263909193, "her": 0.574944311991, "model": 0.7374500731110001, "good": 0.418589404907, "sure": 2.0086865552, "algebra": 3.7245288247199992, "julia": 3.04320056047, "program": 0.7037855787649999, "datarobot": 7.2746685411000005, "not": 0.0155524130075, "far": 0.536623764503, "solut": 1.55346297627, "shown": 1.01856958099, "champaign": 5.647212123169999, "then": 0.08303386523089999, "complic": 1.7312682430000002, "they": 0.0297269947676, "anoth": 0.127896361652, "sale": 1.23181979465, "last": 0.19204364461100001, "choos": 1.43007066072, "world": 0.107420248621, "minimum": 1.79668465441, "within": 0.21263272059799998, "blog": 2.65237310559, "ensur": 1.22751130026, "simpl": 1.2232212893899999, "provid": 0.19517784432500002, "hockey": 2.36067764983, "valu": 0.823193310148, "either": 0.459327638815, "such": 0.059695977806, "sever": 0.06991112039689999, "confer": 1.0411494784, "math": 3.09470245618, "lot": 1.4835969502500002, "some": 0.0395735090645, "phd": 3.10729884387, "small": 0.307101805059, "both": 0.050842533389300004, "baselin": 4.05579271624, "call": 0.0654627744488, "result": 0.136378908381, "classic": 0.8791034528499999, "receiv": 0.266574424922, "set": 0.171496011289, "two": 0.0136988443582, "sophist": 2.30296309338, "improv": 0.7147958039319999, "from": 0.000567054168866, "fanduel": 7.2746685411000005, "answer": 1.5366310419, "allow": 0.24028061118900002, "limit": 0.41782385463, "whether": 0.791561189647, "num": 0.00031499039539700004, "free": 0.5412666492670001, "equat": 2.27930071914, "for": 0.00031499039539700004, "predict": 1.6457402376899999, "output": 2.03822657827, "with": 0.00119749171339, "are": 0.0294674735827, "speak": 1.06169814662, "better": 0.6964279406, "month": 0.410770160338, "look": 0.6463866936, "popular": 0.41058020877499996, "stay": 0.9927416990379999, "varianc": 3.9392225370099996, "numpi": 7.2746685411000005, "veri": 0.230159793238, "work": 0.109034567273, "pars": 4.9812159316699995, "focus": 0.6981989720559999, "dirichlet": 6.305267983919999, "tackl": 2.98920286814, "group": 0.190594534797, "give": 0.311392552224, "cap": 2.20177003971, "guerrilla": 2.9718327043599997, "step": 1.03954505698, "total": 0.43567888670500005, "ask": 0.776797209847, "type": 0.707101485387, "oppos": 0.921405832541, "salari": 2.3233329892900003, "scientist": 1.54634128444, "machin": 1.39235958062, "paper": 0.979402539665, "tight": 2.3035934117099996, "through": 0.0683586918849, "figur": 0.7101721121600001, "effect": 0.333830227158, "rout": 1.15117941787, "what": 0.225887296827, "highest": 0.917141433754, "let": 1.2488025672799998, "revenu": 1.78911745977, "help": 0.336207721344, "strive": 3.0891545917400003, "larg": 0.17037506060600002, "scienc": 0.841436178891, "overlap": 2.4924939396, "least": 0.480285584745, "unusu": 1.54368367178, "occur": 0.556973778473, "hour": 0.815190981077, "univers": 0.222262105686, "sloan": 3.86742884499, "post": 0.8057001527009999, "here": 0.8850381883700001, "were": 0.024291143681099997, "footbal": 1.54634128444, "onlin": 0.957503854357, "much": 0.17749572930100002, "about": 0.0628434774746, "problem": 0.569140724273, "job": 1.1798682540899998, "have": 0.0147850023412, "adam": 1.4886080966, "price": 1.24814402264, "simpli": 0.923941491586, "guid": 0.912738218589, "defin": 1.00368010925, "haugh": 7.2746685411000005, "where": 0.0649921387457, "start": 0.236443369291, "run": 0.442714975539, "flex": 4.32545628319, "them": 0.0941833269093, "insight": 2.46841452187, "load": 1.91765354188, "whi": 1.18068843047, "oppon": 1.66619624625, "fork": 3.51346842541, "inclin": 2.7027731439999996, "numi": 4.48517800806, "play": 0.38110439064199997, "mani": 0.0433157581221, "other": 0.00987474791976, "over": 0.0249367214957, "goal": 1.18830712273, "build": 0.491137452091, "algorithm": 3.33044239518, "linear": 2.63027764196, "team": 0.821902894886, "same": 0.112059649604, "graph": 3.6299309802199997, "link": 0.7661704068449999, "there": 0.0400978929255, "exist": 0.38165779408699996, "possibl": 0.348805474891, "say": 0.562154280552, "best": 0.459227932947, "exampl": 0.40868267499899996, "spend": 1.42534376116, "hope": 0.919824304455, "knowledg": 1.2232212893899999, "take": 0.130691962197, "lesson": 2.1594002686700002, "previous": 0.356602960063, "now": 0.149092945021, "farm": 1.48777115974, "strategi": 1.49112311818, "tri": 0.61759152916, "code": 1.35601909597, "per": 0.672821024072, "divers": 1.37926445519, "regress": 3.9359915164199997, "feel": 1.1428493419299999, "also": 0.0146571578, "sighal": 7.2746685411000005, "typic": 0.812774319158, "money": 0.964254518011, "staf": 3.4480053846300005, "task": 1.35748680661, "role": 0.44036410757399996, "cornerpoint": 7.2746685411000005, "rajiv": 5.29053717923, "the": 0.0, "area": 0.327954821122, "peopl": 0.193265578473, "challeng": 0.9392919688950001, "want": 0.6916366062549999, "convert": 1.1860360368, "vertic": 2.19439411974, "behind": 0.7345572374320001, "howev": 0.0903151173475, "share": 0.618760299747, "win": 1.01265652029, "calcul": 1.8131506592099997, "week": 0.5907388641619999, "maxim": 2.5594217052, "which": 0.00517841384543, "raw": 2.36536149914, "one": 0.0062553516455, "show": 0.236682766013, "known": 0.0824180805992, "custom": 1.2905032964799998, "see": 0.240921585492, "caterpillar": 4.591159448919999, "becaus": 0.139343158825, "imag": 0.99376210729, "mentor": 2.6971498864499996, "get": 0.579769005782, "like": 0.139053576545, "implement": 1.27437940907, "select": 0.704804687133, "portion": 1.1945273376899999, "part": 0.04239531098280001, "includ": 0.0188846813905, "identifi": 0.833722000472, "anyon": 1.68164835081, "shah": 3.30953571036, "numx": 3.36264553568, "pick": 1.59729226761, "this": 0.0037864490525, "schedul": 1.2987792057799998, "principl": 1.2389696463600002, "time": 0.0112115188626, "dissect": 4.15511091744, "back": 0.23166743089699998, "bit": 2.12032652634, "fan": 1.56967467926, "been": 0.023645982368400004, "first": 0.0075872898121599995, "most": 0.020747896295599998, "player": 1.26518548849, "particular": 0.323157393804, "fail": 0.656536611573, "along": 0.260344385917, "all": 0.011402632097799998, "store": 1.2374487335200002, "solv": 1.9836504770400003, "case": 0.395406268889, "feasibl": 2.88021938643, "ben": 1.9713636330500002, "that": 0.00397614837964, "sort": 1.64639361896, "lpsolv": 7.2746685411000005, "gan": 4.61631800855, "built": 0.690379535065, "object": 0.853933584803, "more": 0.017024931599999998, "and": 6.29901420636e-05, "while": 0.04324998379380001, "consist": 0.398873126426, "these": 0.0715336194008, "cat": 2.35468761528, "capabl": 1.2969341868100002, "made": 0.0680215260973, "could": 0.18595627229000003, "comment": 1.11826753454, "submit": 1.7528440529799998, "state": 0.0466100027668, "year": 0.047402238894600005, "can": 0.162341096394, "avail": 0.547454586289, "comput": 1.36806891594, "make": 0.07349765782289999, "way": 0.19809150993500002, "onli": 0.025324268329099998, "each": 0.173741689304, "size": 0.9138372060609999, "few": 0.275577913653, "find": 0.547781330288, "read": 0.83939268088, "packag": 2.0577584491900005, "pretti": 2.75684036527, "advanc": 0.6930212121780001, "common": 0.338325805271, "data": 1.2168205848, "muchimprov": 7.2746685411000005, "inlaw": 7.2746685411000005, "profit": 1.70216890671, "sinc": 0.0803681994577, "bio": 3.7456377879300002, "must": 0.653383947388, "might": 0.7683410765340001, "bookcas": 6.2068279111, "produc": 0.314320812003, "decis": 0.7701082216959999, "game": 0.9477062580210001, "use": 0.0292080197316, "score": 1.4559353207700003, "fantasi": 2.48566279349, "quarterback": 4.0741418549, "lineup": 3.2412327319700003, "urbana": 4.584967478669999, "learn": 0.842752064745, "when": 0.0205549888584}, "freq": {"after": 2, "hand": 2, "carpent": 3, "onc": 2, "relat": 1, "form": 1, "repo": 2, "assign": 1, "addit": 1, "would": 1, "cup": 1, "incom": 1, "brazil": 1, "dataset": 2, "function": 3, "knapsack": 1, "dog": 1, "python": 2, "well": 1, "further": 1, "approach": 1, "path": 1, "toy": 2, "illinoi": 1, "know": 1, "labor": 1, "stack": 2, "grown": 1, "instead": 1, "creat": 1, "defens": 1, "enjoy": 1, "multipl": 2, "how": 3, "present": 1, "increas": 2, "initi": 1, "end": 1, "found": 1, "will": 4, "event": 1, "snippet": 3, "alloc": 1, "wide": 2, "constraint": 13, "next": 3, "below": 1, "perform": 1, "but": 2, "maximum": 4, "need": 2, "our": 3, "background": 1, "final": 1, "germani": 1, "expect": 2, "point": 5, "likelihood": 1, "walk": 1, "sport": 2, "has": 4, "fun": 1, "region": 1, "optim": 21, "defeat": 1, "out": 3, "her": 1, "model": 3, "good": 1, "sure": 1, "algebra": 2, "julia": 3, "program": 1, "datarobot": 2, "not": 5, "far": 1, "solut": 1, "shown": 2, "champaign": 1, "then": 1, "complic": 2, "they": 2, "anoth": 1, "sale": 1, "last": 2, "choos": 1, "world": 1, "minimum": 3, "within": 1, "blog": 2, "ensur": 1, "simpl": 5, "provid": 2, "hockey": 1, "valu": 2, "either": 1, "such": 1, "sever": 1, "confer": 1, "math": 1, "lot": 3, "some": 2, "phd": 1, "small": 6, "both": 1, "baselin": 1, "call": 2, "result": 2, "classic": 1, "receiv": 1, "set": 7, "two": 1, "sophist": 2, "improv": 2, "from": 3, "fanduel": 1, "answer": 1, "allow": 1, "limit": 2, "whether": 1, "num": 23, "free": 1, "equat": 2, "for": 14, "predict": 7, "output": 1, "with": 8, "are": 9, "speak": 1, "better": 2, "month": 1, "look": 5, "popular": 2, "stay": 1, "varianc": 1, "numpi": 2, "veri": 3, "work": 2, "pars": 1, "focus": 1, "dirichlet": 1, "tackl": 1, "group": 1, "give": 1, "cap": 3, "guerrilla": 1, "step": 2, "total": 1, "ask": 1, "type": 1, "oppos": 1, "salari": 4, "scientist": 6, "machin": 1, "paper": 1, "tight": 1, "through": 2, "figur": 1, "effect": 1, "rout": 1, "what": 2, "highest": 1, "let": 4, "revenu": 1, "help": 4, "strive": 1, "larg": 7, "scienc": 3, "overlap": 2, "least": 1, "unusu": 1, "occur": 1, "hour": 3, "univers": 1, "sloan": 1, "post": 7, "here": 7, "were": 1, "footbal": 6, "onlin": 1, "much": 1, "about": 1, "problem": 10, "job": 1, "have": 7, "adam": 1, "price": 1, "simpli": 1, "guid": 1, "defin": 1, "haugh": 1, "where": 2, "start": 4, "run": 3, "flex": 1, "them": 1, "insight": 1, "load": 1, "whi": 2, "oppon": 1, "fork": 1, "inclin": 1, "numi": 2, "play": 1, "mani": 2, "other": 1, "over": 2, "goal": 1, "build": 3, "algorithm": 2, "linear": 2, "team": 14, "same": 3, "graph": 1, "link": 1, "there": 6, "exist": 1, "possibl": 4, "say": 1, "best": 8, "exampl": 3, "spend": 4, "hope": 1, "knowledg": 1, "take": 3, "lesson": 1, "previous": 1, "now": 1, "farm": 1, "strategi": 7, "tri": 5, "code": 9, "per": 2, "divers": 1, "regress": 1, "feel": 1, "also": 1, "sighal": 1, "typic": 1, "money": 1, "staf": 1, "task": 1, "role": 1, "cornerpoint": 1, "rajiv": 3, "the": 74, "area": 1, "peopl": 1, "challeng": 1, "want": 1, "convert": 1, "vertic": 1, "behind": 1, "howev": 1, "share": 1, "win": 3, "calcul": 1, "week": 2, "maxim": 4, "which": 5, "raw": 1, "one": 3, "show": 3, "known": 1, "custom": 1, "see": 1, "caterpillar": 1, "becaus": 1, "imag": 2, "mentor": 1, "get": 2, "like": 3, "implement": 2, "select": 2, "portion": 1, "part": 2, "includ": 2, "identifi": 1, "anyon": 1, "shah": 2, "numx": 3, "pick": 2, "this": 13, "schedul": 1, "principl": 1, "time": 4, "dissect": 1, "back": 1, "bit": 1, "fan": 1, "been": 1, "first": 2, "most": 3, "player": 10, "particular": 1, "fail": 1, "along": 1, "all": 2, "store": 1, "solv": 2, "case": 1, "feasibl": 2, "ben": 1, "that": 10, "sort": 1, "lpsolv": 1, "gan": 1, "built": 1, "object": 5, "more": 6, "and": 33, "while": 1, "consist": 3, "these": 1, "cat": 1, "capabl": 1, "made": 1, "could": 1, "comment": 1, "submit": 1, "state": 1, "year": 2, "can": 13, "avail": 2, "comput": 1, "make": 13, "way": 2, "onli": 2, "each": 4, "size": 2, "few": 2, "find": 4, "read": 1, "packag": 1, "pretti": 1, "advanc": 1, "common": 1, "data": 10, "muchimprov": 1, "inlaw": 1, "profit": 4, "sinc": 1, "bio": 1, "must": 1, "might": 1, "bookcas": 11, "produc": 1, "decis": 2, "game": 2, "use": 7, "score": 1, "fantasi": 4, "quarterback": 1, "lineup": 2, "urbana": 1, "learn": 1, "when": 2}, "idf": {"after": 1.02070207021, "hand": 1.6152202665600002, "carpent": 22.266479663400002, "onc": 1.4974533106999999, "relat": 1.23750876919, "form": 1.12755681818, "repo": 369.209302326, "assign": 3.83663605607, "addit": 1.24634950542, "would": 1.0828729281799998, "cup": 6.70156184044, "incom": 3.92, "brazil": 7.31275909719, "dataset": 193.609756098, "function": 2.495441685, "knapsack": 610.615384615, "dog": 6.26272189349, "python": 56.2978723404, "well": 1.0655748708, "further": 1.3618116315, "approach": 2.07556543339, "path": 4.6421052631599995, "toy": 15.383720930199999, "illinoi": 8.63295269168, "know": 2.59327017315, "labor": 5.12129032258, "stack": 19.6485148515, "grown": 5.78993435449, "instead": 1.59461631177, "creat": 1.2492917847, "defens": 3.19115577889, "enjoy": 3.3269069572500003, "multipl": 2.74813917258, "how": 1.60250328051, "present": 1.25551601423, "increas": 1.32024948025, "initi": 1.35, "end": 1.10680423871, "found": 1.11387076405, "will": 1.22481098596, "event": 1.5356935577500002, "snippet": 135.692307692, "alloc": 10.5558510638, "wide": 1.5598349381, "constraint": 15.0483412322, "next": 1.4950560316400001, "below": 2.25607503197, "perform": 1.5313977042500002, "but": 1.01632417899, "maximum": 4.80072573329, "need": 1.4372623574099999, "our": 2.35758835759, "background": 4.02739726027, "final": 1.34008609775, "germani": 2.61118421053, "expect": 2.20011086475, "point": 1.25990000794, "likelihood": 23.4852071006, "walk": 3.56363636364, "sport": 3.29651162791, "has": 1.0436497502, "fun": 12.8863636364, "region": 1.7647843486, "optim": 11.5377906977, "defeat": 2.87869446963, "out": 1.06016694491, "her": 1.7770315648099997, "model": 2.0905978404, "good": 1.51981619759, "sure": 7.453521126760001, "algebra": 41.4516971279, "julia": 20.9722589168, "program": 2.02139037433, "datarobot": 1443.27272727, "not": 1.01567398119, "far": 1.71022298826, "solut": 4.7278141751, "shown": 2.76923076923, "champaign": 283.5, "then": 1.08657860516, "complic": 5.6478121664900005, "they": 1.03017325287, "anoth": 1.13643521832, "sale": 3.4274611399, "last": 1.2117234010100002, "choos": 4.17899447223, "world": 1.11340206186, "minimum": 6.02962400304, "within": 1.2369302688, "blog": 14.1876675603, "ensur": 3.4127257093700005, "simpl": 3.3981164383599998, "provid": 1.21552714187, "hockey": 10.5981308411, "valu": 2.2777618364400003, "either": 1.5830092731099998, "such": 1.06151377374, "sever": 1.07241286139, "confer": 2.8324710080299997, "math": 22.0806675939, "lot": 4.40877534018, "some": 1.04036697248, "phd": 22.3605633803, "small": 1.3594793629, "both": 1.05215720061, "baselin": 57.7309090909, "call": 1.0676529926, "result": 1.14611608432, "classic": 2.4087391898, "receiv": 1.3054847463200001, "set": 1.18707940781, "two": 1.01379310345, "sophist": 10.0037807183, "improv": 2.04376930999, "from": 1.00056721497, "fanduel": 1443.27272727, "answer": 4.64890190337, "allow": 1.2716059271100002, "limit": 1.5186531471200002, "whether": 2.20683903253, "num": 1.00031504001, "free": 1.71818181818, "equat": 9.76984615385, "for": 1.00031504001, "predict": 5.18484650555, "output": 7.676982591880001, "with": 1.0011982089899998, "are": 1.02990593578, "speak": 2.89127663449, "better": 2.0065722952500002, "month": 1.5079787234, "look": 1.9086318826599997, "popular": 1.50769230769, "stay": 2.6986231514499996, "varianc": 51.3786407767, "numpi": 1443.27272727, "veri": 1.25880114177, "work": 1.11520089913, "pars": 145.651376147, "focus": 2.01012914662, "dirichlet": 547.448275862, "tackl": 19.8698372966, "group": 1.20996875238, "give": 1.3653250774, "cap": 9.041002277899999, "guerrilla": 19.5276752768, "step": 2.8279301745599996, "total": 1.5460122699399999, "ask": 2.1744966443, "type": 2.0281042411900003, "oppos": 2.51282051282, "salari": 10.2096463023, "scientist": 4.69426374926, "machin": 4.02433460076, "paper": 2.6628648104700003, "tight": 10.0100882724, "through": 1.07074930869, "figur": 2.0343413634, "effect": 1.3963060686000002, "rout": 3.1619199362700003, "what": 1.25343439128, "highest": 2.50212765957, "let": 3.48616600791, "revenu": 5.98416886544, "help": 1.39962972759, "strive": 21.9585062241, "larg": 1.18574949585, "scienc": 2.31969608416, "overlap": 12.0913937548, "least": 1.6165359943000002, "unusu": 4.68180477735, "occur": 1.7453825857499998, "hour": 2.25960717336, "univers": 1.24889867841, "sloan": 47.8192771084, "post": 2.23826307627, "here": 2.42307692308, "were": 1.02458857696, "footbal": 4.69426374926, "onlin": 2.6051854282900004, "much": 1.1942229577299999, "about": 1.06486015159, "problem": 1.76674827509, "job": 3.2539454806299997, "have": 1.0148948411399998, "adam": 4.43092380687, "price": 3.4838709677399997, "simpli": 2.5192002538900002, "guid": 2.49113447356, "defin": 2.72830383227, "haugh": 1443.27272727, "where": 1.06715063521, "start": 1.26673581744, "run": 1.55692850838, "flex": 75.6, "them": 1.09876115994, "insight": 11.8037174721, "load": 6.80497213888, "whi": 3.2566153846200003, "oppon": 5.292000000000001, "fork": 33.5644820296, "inclin": 14.9210526316, "numi": 88.6927374302, "play": 1.46390041494, "mani": 1.04426757877, "other": 1.00992366412, "over": 1.02525024217, "goal": 3.28152128979, "build": 1.6341739578, "algorithm": 27.9507042254, "linear": 13.8776223776, "team": 2.2748244734200003, "same": 1.11857958148, "graph": 37.7102137767, "link": 2.15151104486, "there": 1.04091266719, "exist": 1.4647107666799999, "possibl": 1.4173734488, "say": 1.7544480053, "best": 1.5828514456600002, "exampl": 1.50483412322, "spend": 4.15928739848, "hope": 2.50884955752, "knowledg": 3.3981164383599998, "take": 1.13961668222, "lesson": 8.66593886463, "previous": 1.42846859816, "now": 1.160780873, "farm": 4.4272169548199996, "strategi": 4.44208170118, "tri": 1.8544562551099997, "code": 3.8807137619199996, "per": 1.9597580545599997, "divers": 3.97197898424, "regress": 51.2129032258, "feel": 3.1356903021900004, "also": 1.01476510067, "sighal": 1443.27272727, "typic": 2.2541530597799997, "money": 2.62283165373, "staf": 31.437623762399998, "task": 3.88641370869, "role": 1.55327267391, "cornerpoint": 1443.27272727, "rajiv": 198.45, "the": 1.0, "area": 1.3881262568900001, "peopl": 1.21320495186, "challeng": 2.55816951337, "want": 1.99698113208, "convert": 3.2740771293099997, "vertic": 8.974561899380001, "behind": 2.0845588235299997, "howev": 1.0945191313299998, "share": 1.8566249561500001, "win": 2.75290445639, "calcul": 6.12972972973, "week": 1.80532181033, "maxim": 12.928338762200001, "which": 1.005191845, "raw": 10.6478873239, "one": 1.00627495722, "show": 1.26703910615, "known": 1.0859097127200001, "custom": 3.6346153846199996, "see": 1.27242125511, "caterpillar": 98.6086956522, "becaus": 1.1495184997499999, "imag": 2.70137825421, "mentor": 14.8373831776, "get": 1.78562591385, "like": 1.14918566775, "implement": 3.57648118946, "select": 2.02345144022, "portion": 3.3019966722099996, "part": 1.04330682789, "includ": 1.0190641247799999, "identifi": 2.30187037843, "anyon": 5.37440758294, "shah": 27.372413793099998, "numx": 28.8654545455, "pick": 4.939639079030001, "this": 1.00379362671, "schedul": 3.6648199445999996, "principl": 3.4520547945199995, "time": 1.01127460348, "dissect": 63.7590361446, "back": 1.26070038911, "bit": 8.33385826772, "fan": 4.805084745759999, "been": 1.0239277652399998, "first": 1.00761614623, "most": 1.02096463023, "player": 3.54375, "particular": 1.3814827706200001, "fail": 1.9281029876099998, "along": 1.2973768080399999, "all": 1.01146788991, "store": 3.44680851064, "solv": 7.26923076923, "case": 1.48498737256, "feasibl": 17.8181818182, "ben": 7.18046132972, "that": 1.00398406375, "sort": 5.188235294119999, "lpsolv": 1443.27272727, "gan": 101.121019108, "built": 1.99447236181, "object": 2.3488681757700003, "more": 1.0171706817, "and": 1.00006299213, "while": 1.0441988950299999, "consist": 1.4901445466499998, "these": 1.07415426252, "cat": 10.5348374253, "capabl": 3.6580645161300005, "made": 1.07038834951, "could": 1.2043695949, "comment": 3.05954904606, "submit": 5.770992366410001, "state": 1.0477133240899998, "year": 1.0485436893200002, "can": 1.17626139142, "avail": 1.7288467821, "comput": 3.9277585353800006, "make": 1.0762660158600001, "way": 1.2190739461, "onli": 1.0256476516600002, "each": 1.18974820144, "size": 2.49387370405, "few": 1.31729173581, "find": 1.7294117647099998, "read": 2.3149606299200003, "packag": 7.828402366860001, "pretti": 15.75, "advanc": 1.9997480791, "common": 1.4025974025999999, "data": 3.37643555934, "muchimprov": 1443.27272727, "inlaw": 1443.27272727, "profit": 5.48583275743, "sinc": 1.08368600683, "bio": 42.336000000000006, "must": 1.9220338983099996, "might": 2.1561863370900003, "bookcas": 496.125, "produc": 1.36932896326, "decis": 2.16, "game": 2.57978550536, "use": 1.0296387573799999, "score": 4.2884927066500005, "fantasi": 12.0090771558, "quarterback": 58.8, "lineup": 25.565217391300003, "urbana": 98.0, "learn": 2.32275054865, "when": 1.02076769755}}, "html": "<!DOCTYPE html>\n\n<html lang=\"en-US\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head profile=\"http://gmpg.org/xfn/11\">\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n<title>  Optimization 101 for Data Scientists</title>\n<link href=\"/wp-content/themes/kdn17/images/favicon.ico\" rel=\"shortcut icon\"/>\n<link href=\"/wp-content/themes/kdn17/style.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"/wp-content/themes/kdn17/js/jquery-1.9.1.min.js\" type=\"text/javascript\"></script>\n<script src=\"/aps/kda_all.js\" type=\"text/javascript\"></script>\n<link href=\"/feed/\" rel=\"alternate\" title=\"KDnuggets: Analytics, Big Data, Data Mining and Data Science Feed\" type=\"application/rss+xml\"/>\n<link href=\"//s.w.org\" rel=\"dns-prefetch\"/>\n<link href=\"https://www.kdnuggets.com/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/comments/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/2018/08/optimization-101-data-scientists.html/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Optimization 101 for Data Scientists Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-json/\" rel=\"https://api.w.org/\"/>\n<link href=\"https://www.kdnuggets.com/xmlrpc.php?rsd\" rel=\"EditURI\" title=\"RSD\" type=\"application/rsd+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-includes/wlwmanifest.xml\" rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\"/>\n<link href=\"https://www.kdnuggets.com/2018/08/github-python-data-science-spotlight.html\" rel=\"prev\" title=\"GitHub Python Data Science Spotlight: AutoML, NLP, Visualization, ML Workflows\"/>\n<link href=\"https://www.kdnuggets.com/2018/08/top-stories-2018-jul.html\" rel=\"next\" title=\"Top July Stories: Cartoon: Data Scientist was the sexiest job of the 21st century until \u2026; Does PCA really improve classification outcome? Causation in a nutshell\"/>\n<meta content=\"WordPress 4.9.10\" name=\"generator\">\n<link href=\"https://www.kdnuggets.com/2018/08/optimization-101-data-scientists.html\" rel=\"canonical\"/>\n<link href=\"https://www.kdnuggets.com/?p=83802\" rel=\"shortlink\"/>\n<link href=\"https://www.kdnuggets.com/2018/08/optimization-101-data-scientists.html\" rel=\"canonical\"/>\n<!-- BEGIN ExactMetrics v5.3.7 Universal Analytics - https://exactmetrics.com/ -->\n<script>\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-361129-1', 'auto');\n  ga('send', 'pageview');\n</script>\n<!-- END ExactMetrics Universal Analytics -->\n</meta></head>\n<body class=\"post-template-default single single-post postid-83802 single-format-standard\">\n<div class=\"main_wrapper\"><!-- publ: 8-Aug, 2018  -->\n<div id=\"wrapper\">\n<div id=\"header\">\n<div id=\"header_log\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<h1>KDnuggets</h1>\n<div class=\"text-container\">\n            \u00a0\u00a0<a href=\"/news/subscribe.html\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a> \u00a0|\n <a href=\"https://twitter.com/kdnuggets\" target=\"_blank\"><img alt=\"Twitter\" height=\"48\" src=\"/images/tw_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n <a href=\"https://www.facebook.com/kdnuggets\" target=\"_blank\"><img alt=\"Facebook\" height=\"48\" src=\"/images/fb_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n<a href=\"https://www.linkedin.com/groups/54257/\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"48\" src=\"/images/in_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \n\u00a0|\u00a0 <a href=\"/contact.html\"><b>Contact</b></a>\n</div>\n</div>\n<div class=\"search\">\n<form action=\"/\" id=\"searchform\" method=\"get\">\n<input id=\"s\" name=\"s\" placeholder=\"search KDnuggets\" type=\"text\" value=\"\"/>\n<input type=\"submit\" value=\"Search\"/></form>\n</div>\n<div href=\"#\" id=\"pull\">\n<img class=\"menu\" src=\"/images/menu-30.png\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<img class=\"search-icon\" src=\"/images/search-icon.png\">\n</img></img></div>\n<div id=\"pull-menu\">\n<div class=\"navigation\"><ul class=\"menu\" id=\"menu-menu\"><li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-1070\" id=\"menu-item-1070\"><a href=\"/software/index.html\" title=\"Data Science Software\">SOFTWARE</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13756\" id=\"menu-item-13756\"><a href=\"/news/index.html\" title=\"News\">News/Blog</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-46286\" id=\"menu-item-46286\"><a href=\"/news/top-stories.html\">Top stories</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-42152\" id=\"menu-item-42152\"><a href=\"https://www.kdnuggets.com/opinions/index.html\" title=\"Opinions\">Opinions</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-46415\" id=\"menu-item-46415\"><a href=\"https://www.kdnuggets.com/tutorials/index.html\">Tutorials</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13364\" id=\"menu-item-13364\"><a href=\"/jobs/index.html\" title=\"Jobs in Analytics, Data Science\">JOBS</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-63505\" id=\"menu-item-63505\"><a href=\"https://www.kdnuggets.com/companies/index.html\">Companies</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13366\" id=\"menu-item-13366\"><a href=\"/courses/index.html\">Courses</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-1499\" id=\"menu-item-1499\"><a href=\"https://www.kdnuggets.com/datasets/index.html\">Datasets</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-14286\" id=\"menu-item-14286\"><a href=\"https://www.kdnuggets.com/education/index.html\" title=\"Education in Analytics, Big Data, Data Science\">EDUCATION</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-51558\" id=\"menu-item-51558\"><a href=\"https://www.kdnuggets.com/education/analytics-data-mining-certificates.html\" title=\"Certificates in Analytics, Big Data, Data Science\">Certificates</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-14752\" id=\"menu-item-14752\"><a href=\"/meetings/index.html\">Meetings</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13721\" id=\"menu-item-13721\"><a href=\"/webcasts/index.html\" title=\"Webcasts and Webinars\">Webinars</a></li>\n</ul></div></div>\n</div> <!--#header end-->\n<div id=\"spacer\">\n         \u00a0\n      </div>\n<div id=\"content_wrapper\">\n<div id=\"ad_wrapper\">\n<script type=\"text/javascript\">\n\tjQuery(function() {\n   \t    var pull        = $('#pull');\n            menu        = $('#header .navigation ul');\n            menuImage = $('#header img.menu');\n            mobileMenu        = $('#pull-menu-mobile');\n            search = $('img.search-icon');\n            searchBar = $('div.search');\n            searchClick = false;\n            search.on('click', function() {\n                  searchBar.slideToggle();\n                  searchClick = true;\n            });  \n     \t    $(menuImage).on('click', function(e) {\n\t        //e.preventDefault();\n                if (!searchClick) {\n                  menu.slideToggle();\n                }\n                searchClick = false;\n\t    });\n           /* pullMobile.on('click', function(e) {\n              e.preventDefault();\n                if (!searchClick) {\n                  mobileMenu.slideToggle();\n                }\n                searchClick = false;\n\t    });*/\n            \n\t});\n\tkpath = '/'; kda_top(); kda_sid_init(); kda_sid_n=3;\n\t</script>\n</div> <div class=\"breadcumb\">\n<br/>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2018/index.html\">2018</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/08/index.html\">Aug</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/08/tutorials.html\">Tutorials, Overviews</a> \u00bb Optimization 101 for Data Scientists (\u00a0<a href=\"/2018/n31.html\">18:n31</a>\u00a0)    </div>\n<div class=\"single\" id=\"content\">\n<div id=\"post-header\">\n<h1 id=\"title\">Optimization 101 for Data Scientists</h1>\n<div class=\"pagi\">\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2018/08/github-python-data-science-spotlight.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"> <strong>Previous post</strong></img></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2018/08/top-stories-2018-jul.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/>\u00a0<br/>\u00a0\n    <div class=\"addthis_native_toolbox\"></div>\n</div>\n<div class=\"tag-data\">Tags: <a href=\"https://www.kdnuggets.com/tag/football\" rel=\"tag\">Football</a>, <a href=\"https://www.kdnuggets.com/tag/julia\" rel=\"tag\">Julia</a>, <a href=\"https://www.kdnuggets.com/tag/optimization\" rel=\"tag\">Optimization</a>, <a href=\"https://www.kdnuggets.com/tag/python\" rel=\"tag\">Python</a>, <a href=\"https://www.kdnuggets.com/tag/r\" rel=\"tag\">R</a>, <a href=\"https://www.kdnuggets.com/tag/sports\" rel=\"tag\">Sports</a></div>\n<br/>\n<p class=\"excerpt\">\n     We show how to use optimization strategies to make the best possible decision.\n  </p>\n</div>\n<div id=\"post-header-ad\">\n<script type=\"text/javascript\">kda_sid_write(1); kda_sid_n=2;</script>\n</div>\n<hr class=\"grey-line\"/><br/>\n<div class=\"post\" id=\"post-\">\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p><b>By\u00a0<a href=\"http://www.rajivshah.com\">Rajiv Shah</a>,\u00a0data scientist at <a href=\"http://www.datarobot.com\">DataRobot</a></b></p>\n<p>As a data scientist, you spend a lot of your time helping to make better decisions. You build predictive models to provide improved insights. You might be predicting whether an image is a cat or dog, store sales for the next month, or the likelihood if a part will fail. In this post, I won't help you with making better predictions, but instead how to make the <strong>best</strong> decision.</p>\n<p>The post strives to give you some background on optimization. It starts with a simply toy example show you the math behind an optimization calculation. After that, this post tackles a more sophisticated optimization problem, trying to pick the best team for fantasy football. The FanDuel image below is a very common sort of game that is widely played (ask your in-laws). The optimization strategies in this post were shown to consistently win! Along the way, I will show a few code snippets and provide links to working code in R, Python, and Julia. And if you do win money, feel free to share it :)</p>\n<p><center><br>\n<img alt=\"Fanduels\" class=\"alignnone size-full wp-image-84003\" height=\"487\" sizes=\"(max-width: 650px) 100vw, 650px\" src=\"https://www.kdnuggets.com/wp-content/uploads/fanduels3.jpg\" srcset=\"https://www.kdnuggets.com/wp-content/uploads/fanduels3.jpg 650w, https://www.kdnuggets.com/wp-content/uploads/fanduels3-300x225.jpg 300w\" width=\"650\"/></br></center>A simple example, which I found <a href=\"http://melaniewingard.weebly.com/uploads/3/7/5/5/37554047/09-30-16_section_3.5_linear_programming_and_optimization_continued.pdf\">online</a>, starts with a carpenter making bookcases in two sizes, large and small. It takes 6 hours to make a large bookcase and 2 hours to make a small one. The profit on a large bookcase is $50, and the profit on a small bookcase is $20. The carpenter can spend only 24 hours per week making bookcases and must make at least 2 of each size per week. Your job as a data scientist is to help your carpenter maximize her revenue.</p>\n<p>Your initial inclination could be that since the large bookcase is the most profitable, why not focus on them. In that case, you would profit (2*$20) + (3*$50) which is $190. That is a pretty good baseline, but not the best possible answer. It is time to get the algebra out and create equations that define the problem. First, we start with the constraints:</p>\n<div style=\"width: 98%; border: 1px solid #ccc; overflow: auto; padding-left: 10px; padding-bottom: 10px; padding-top: 10px;\">\n<pre> \r\nx&gt;=2   ## large bookcases\r\n\r\ny&gt;=2   ## small bookcases\r\n\r\n6x + 2y &lt;= 24 (labor constraint)\r\n</pre>\n</div>\n<p>\u00a0</p>\n<p>Our objective function which we are trying to maximize is:</p>\n<div style=\"widh: 98%; border: 1px solid #ccc; overflow: auto; padding-left: 10px; padding-bottom: 10px; padding-top: 10px;\">\n<pre> \r\nP = 50x + 20y\r\n</pre>\n</div>\n<p>\u00a0</p>\n<p>If we do the algebra by hand, we can convert out constraints to <b>y &lt;= 12 - 3x</b>. Then we graph all the constraints and find the feasible area for the portion of making small and large bookcases:</p>\n<p><center><img alt=\"Constraints Graph\" class=\"alignnone size-full wp-image-83805\" sizes=\"(max-width: 247px) 100vw, 247px\" src=\"https://www.kdnuggets.com/wp-content/uploads/constraints-graph.png\" srcset=\"https://www.kdnuggets.com/wp-content/uploads/constraints-graph.png 247w, https://www.kdnuggets.com/wp-content/uploads/constraints-graph-150x150.png 150w, https://www.kdnuggets.com/wp-content/uploads/constraints-graph-120x120.png 120w\" width=\"30%\"/></center>The next step is figuring out the optimal point. Using the corner-point principle of linear programming, the maximum and minimum values of the objective function each occur at one of the vertices of the feasible region. Looking here, the maximum values (2,6) is when we make 2 large bookcases and 6 small bookcases, which results in an income of $220.</p>\n<p>This is a very simple toy problem, typically there are many more constraints and the objective functions can get complicated. There are lots of classic problems in optimization such as routing algorithms to find the best path, scheduling algorithms to optimize staffing, or trying to find the best way to allocate a group of people to set of tasks. As a data scientist, you need to dissect what you are trying to maximize and identify the constraints in the form of equations. Once you can do this, we can hand this over to a computer to solve. So lets next walk through a bit more complicated example.</p>\n<p><strong>Fantasy Football</strong></p>\n<p>Over the last few years, fantasy sports have increasingly grown in popularity. One game is to pick a set of football players to make the best possible team. Each football player has a price and there is a salary cap limit. The challenge is to optimize your team to produce the highest total points while staying within a salary cap limit. This type of optimization problem is known as the knapsack problem or an assignment problem.</p>\n<p><strong>Simple Linear Optimization</strong></p>\n<p>Let's start by loading a dataset and taking a look at the raw data. You need to know both the salary as well as the expected points. Most football fans spend a lot of time trying to predict how many points a player will score. If you want to build a model for predicting the expected performance of a player, take a look at <a href=\"https://blog.datarobot.com/using-datarobot-to-predict-nba-player-performance\">Ben's blog post</a>.</p>\n<p><center><img alt=\"Qbs\" class=\"alignnone size-full wp-image-83807\" sizes=\"(max-width: 517px) 100vw, 517px\" src=\"https://www.kdnuggets.com/wp-content/uploads/qbs.jpg\" srcset=\"https://www.kdnuggets.com/wp-content/uploads/qbs.jpg 517w, https://www.kdnuggets.com/wp-content/uploads/qbs-300x180.jpg 300w\" width=\"70%\"/></center>The goal here is to build the best possible team for a salary cap, let's say $50,000. A team consists of a quarterback, running backs, wide receivers, tight ends, and a defense. We can use the <strong>lpSolve</strong> package in R to set up the problem. Here is a code snippet for setting up the constraints.</p>\n<p><center><img alt=\"Constraints\" class=\"alignnone size-full wp-image-83809\" sizes=\"(max-width: 497px) 100vw, 497px\" src=\"https://www.kdnuggets.com/wp-content/uploads/lpsolve-contraints.png\" srcset=\"https://www.kdnuggets.com/wp-content/uploads/lpsolve-contraints.png 497w, https://www.kdnuggets.com/wp-content/uploads/lpsolve-contraints-300x51.png 300w\" width=\"60%\"/></center>If you parse through this, you can see we have set a minimum and maximum for QB of 1 player. However, for the RB, we have allowed a maximum of 3 and a minimum of 2. This is not unusual in fantasy football, be because there is a role called a flex player, which anyone can choose, and they can either be a RB, WR, or TE. Now let's look at the code for the objective:</p>\n<p><center><img alt=\"Objective\" class=\"alignnone size-full wp-image-83810\" sizes=\"(max-width: 370px) 100vw, 370px\" src=\"https://www.kdnuggets.com/wp-content/uploads/objective.png\" srcset=\"https://www.kdnuggets.com/wp-content/uploads/objective.png 370w, https://www.kdnuggets.com/wp-content/uploads/objective-300x68.png 300w\" width=\"50%\"/></center>The code shows that we have set up the problem to maximize the objective of the most points and include our constraints. Once the code is run, it outputs an optimal team! I forked an existing repo and have made the R code and dataset are <a href=\"https://github.com/rajshah4/linear-optimization-fantasy-football\">available here.</a> A more sophisticated <a href=\"https://github.com/mattbrondum/Fantasy-Football-Optimization\">python</a> optimization repo is also available.</p>\n<p><center><img alt=\"Final team\" class=\"alignnone size-full wp-image-83811\" sizes=\"(max-width: 517px) 100vw, 517px\" src=\"https://www.kdnuggets.com/wp-content/uploads/finalteam.jpg\" srcset=\"https://www.kdnuggets.com/wp-content/uploads/finalteam.jpg 517w, https://www.kdnuggets.com/wp-content/uploads/finalteam-300x180.jpg 300w\" width=\"70%\"/></center><strong>Advanced steps</strong></p>\n<p>So far, we have built a very simple optimization to solve the problem. There are several other strategies to further improve the optimizer. First, the variance of our teams can be increased by using a strategy called <strong>stacking</strong>, where you make sure your QB and WR are on the same team. A simple optimization is a constraint for selecting a QB and WR from the same team. Another strategy is using an <strong>overlap</strong> constraint for selecting multiple lineups. An overlap constraint ensures a diversity of players and not the same set of players for each optimized team. This strategy is particularly effective when submitting multiple lineups. You can read more about these <a href=\"https://arxiv.org/pdf/1604.01455v2.pdf\">strategies here</a> and run the code in Julia <a href=\"https://github.com/dscotthunter/Fantasy-Hockey-IP-Code\">here</a>. A code snippet of the stacking constraint (this is for a hockey optimization):</p>\n<p><img alt=\"Goalie\" class=\"alignnone size-full wp-image-83812\" sizes=\"(max-width: 1012px) 100vw, 1012px\" src=\"https://www.kdnuggets.com/wp-content/uploads/goalie.png\" srcset=\"https://www.kdnuggets.com/wp-content/uploads/goalie.png 1012w, https://www.kdnuggets.com/wp-content/uploads/goalie-300x33.png 300w, https://www.kdnuggets.com/wp-content/uploads/goalie-768x85.png 768w\" width=\"100%\"/></p>\n<p>Last year, at Sloan sports conference, <a href=\"http://www.sloansportsconference.com/wp-content/uploads/2018/02/1001.pdf\">Haugh and Sighal</a> , presented a paper with additional optimization constraints. They include what an <strong>opponent\u2019s \u00a0team</strong> is likely to look like. After all, there are some players that are much more popular. Using this knowledge, you can predict the likely teams that will oppose your team. The approach here used Dirichlet regressions for modeling players. The result was a much-improved optimizer that was capable of consistently winning!</p>\n<p>I hope this post has shown you how optimization strategies can help you find the best possible solution.</p>\n<p><b>Bio</b>:\u00a0<a href=\"http://www.rajivshah.com\">Rajiv Shah</a> is a data scientist at <a href=\"http://www.datarobot.com\">DataRobot</a>, where he works with customers to make and implement predictions. Previously, Rajiv has been part of data science teams at Caterpillar and State Farm. He enjoys data science and spends time mentoring data scientists, speaking at events, and having fun with blog posts. He has a Ph.D. from the University of Illinois at Urbana Champaign.</p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"https://www.kdnuggets.com/2018/07/worldcup-data-science-lessons.html\">Why Germany did not defeat Brazil in the final, or Data Science lessons from the World Cup</a></li>\n<li><a href=\"https://www.kdnuggets.com/2017/07/guerrilla-guide-machine-learning-julia.html\">The Guerrilla Guide to Machine Learning with Julia</a></li>\n<li><a href=\"https://www.kdnuggets.com/2018/08/only-numpy-implementing-gans-adam-optimizer.html\">Only Numpy: Implementing GANs and Adam Optimizer using Numpy</a></li>\n</ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p><script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets'; \n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div>\n<div class=\"page-link\"></div>\n<div class=\"pagi\">\n<hr class=\"grey-line\"/>\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2018/08/github-python-data-science-spotlight.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"/> <strong>Previous post</strong></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2018/08/top-stories-2018-jul.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/><br/>\n<div>\n<hr class=\"grey-line\"/><br/>\n<h2>Top Stories Past 30 Days</h2>\n<table align=\"center\" cellpadding=\"3\" cellspacing=\"10\" class=\"latn\" width=\"100%\">\n<tr>\n<td valign=\"top\" width=\"50%\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Popular</b></th></tr>\n<tr><td>\n<ol class=\"three_ol\"><li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-1-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-2-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n<li> <a href=\"/2018/05/simplilearn-9-must-have-skills-data-scientist.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-3-simplilearn');\"><b>9 Must-have skills you need to become a Data Scientist, updated</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-4-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/03/another-10-free-must-read-books-for-machine-learning-and-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-5-another-10-books');\"><b>Another 10 Free Must-Read Books for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-6-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/best-data-visualization-techniques.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-7-best-data-viz');\"><b>Best Data Visualization Techniques for small and large data</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td> <td valign=\"top\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Shared</b></th></tr>\n<tr><td><ol class=\"three_ol\">\n<li> <a href=\"/2019/04/another-10-free-must-see-courses-machine-learning-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-1-another-10-courses');\"><b>Another 10 Free Must-See Courses for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-2-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/03/r-vs-python-data-visualization.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-3-r-py-viz');\"><b>R vs Python for Data Visualization</b></a>\n<li> <a href=\"/2019/03/deep-learning-toolset-overview.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-4-dl-toolset');\"><b>The Deep Learning Toolset \u2014 An Overview</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-5-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-6-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-7-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<!--#content end--></div>\n<div id=\"sidebar\">\n<div class=\"latn\">\n<h3><b><a href=\"/news/index.html\">Latest News</a></b></h3>\n<ul style=\"font-size:14px; margin-top:5px\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/datarobot-delivering-trusted-ai-microsoft.html\">Delivering Trusted AI with DataRobot and Microsoft</a><li> <a href=\"https://www.kdnuggets.com/2019/04/formulated-ai-data-production-landscape.html\">AI and the data production landscape</a><li> <a href=\"https://www.kdnuggets.com/2019/04/most-desired-skill-data-science.html\">The most desired skill in data science</a><li> <a href=\"https://www.kdnuggets.com/2019/04/projects-include-data-science-portfolio.html\">Projects to Include in a Data Science Portfolio</a><li> <a href=\"https://www.kdnuggets.com/2019/04/rework-meet-worlds-leading-ai-deep-learning-experts.html\">Meet the World\u2019s Leading AI &amp; Deep Learning ...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/problem-data-science-job-postings.html\">The problem with data science job postings</a></li></li></li></li></li></li></ul>\n</div>\n<div>\n<script type=\"text/javascript\">kda_sid_write(kda_sid_n);</script>\n</div>\n<br/><script src=\"/aps/sbm.js\" type=\"text/javascript\"></script>\n</div>\n</div><div class=\"breadcrumbs_bottom\">\n<div class=\"breadcumb\">\n<br>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2018/index.html\">2018</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/08/index.html\">Aug</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/08/tutorials.html\">Tutorials, Overviews</a> \u00bb Optimization 101 for Data Scientists (\u00a0<a href=\"/2018/n31.html\">18:n31</a>\u00a0)    </br></div>\n</div>\n<!--#content_wrapper end--></div>\n<br>\n<div id=\"footer\">\n<br/>\u00a9 2019 KDnuggets. <a href=\"/about/index.html\">About KDnuggets</a>. \u00a0<a href=\"/news/privacy-policy.html\">Privacy policy</a>. <a href=\"/terms-of-service.html\">Terms of Service</a><br/>\u00a0\n<div class=\"kd_bottom\">\n<div class=\"footer-container\">\n<div class=\"footer-news\">\n<a href=\"/news/subscribe.html\" onclick=\"_gaq.push(['_trackPageview','/x/bot/sub']);\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a>\n</div>\n<div class=\"footer-sm\">\n<a href=\"https://twitter.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/twt']);\" target=\"_blank\"><img height=\"32\" src=\"/images/tw_c48.png\" width=\"32\"/></a>\n<a href=\"https://facebook.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/fb']);\" target=\"_blank\"><img alt=\"Facebook\" height=\"32\" src=\"/images/fb_c48.png\" width=\"32\"/></a>\n<a href=\"https://www.linkedin.com/groups/54257\" onclick=\"_gaq.push(['_trackPageview','/x/bot/in']);\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"32\" src=\"/images/in_c48.png\" width=\"32\"/></a>\n</div>\n</div>\n<div class=\"close-footer\">X</div>\n</div>\n<script type=\"text/javascript\">\n  jQuery('.close-footer').click(\n      function(){       \n         jQuery('.kd_bottom').hide();\n      }\n   );\n</script> </div>\n<div class=\"clear\"><!--blank--></div>\n</br></div>\n<div style=\"display: none;\"><div id=\"boxzilla-box-82996-content\"><script type=\"text/javascript\">(function() {\n\tif (!window.mc4wp) {\n\t\twindow.mc4wp = {\n\t\t\tlisteners: [],\n\t\t\tforms    : {\n\t\t\t\ton: function (event, callback) {\n\t\t\t\t\twindow.mc4wp.listeners.push({\n\t\t\t\t\t\tevent   : event,\n\t\t\t\t\t\tcallback: callback\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})();\n</script><!-- MailChimp for WordPress v4.1.14 - https://wordpress.org/plugins/mailchimp-for-wp/ --><form class=\"mc4wp-form mc4wp-form-77281\" data-id=\"77281\" data-name=\"Subscribe to KDnuggets News\" id=\"mc4wp-form-1\" method=\"post\"><div class=\"mc4wp-form-fields\"><div class=\"header-container\">\n<img align=\"left\" src=\"/wp-content/uploads/envelope.png\"><a href=\"/news/subscribe.html\">Get KDnuggets, a leading newsletter on AI, \r\n  Data Science, and Machine Learning</a>\n</img></div>\n<div class=\"form-fields\">\n<div class=\"field-container\"><label>Email:</label><input maxlength=\"60\" name=\"EMAIL\" placeholder=\"Your email\" required=\"\" size=\"30\" type=\"email\"/></div>\n<div class=\"field-container submit-container\"><div class=\"form-button\" onclick=\"document.getElementById('mc4wp-form-1').submit()\">Sign Up</div></div>\n</div>\n<label style=\"display: none !important;\">Leave this field empty if you're human: <input autocomplete=\"off\" name=\"_mc4wp_honeypot\" tabindex=\"-1\" type=\"text\" value=\"\"/></label><input name=\"_mc4wp_timestamp\" type=\"hidden\" value=\"1556324941\"/><input name=\"_mc4wp_form_id\" type=\"hidden\" value=\"77281\"/><input name=\"_mc4wp_form_element_id\" type=\"hidden\" value=\"mc4wp-form-1\"/></div><div class=\"mc4wp-response\"></div></form><!-- / MailChimp for WordPress Plugin -->\n</div></div><script type=\"text/javascript\">(function() {function addEventListener(element,event,handler) {\n\tif(element.addEventListener) {\n\t\telement.addEventListener(event,handler, false);\n\t} else if(element.attachEvent){\n\t\telement.attachEvent('on'+event,handler);\n\t}\n}function maybePrefixUrlField() {\n\tif(this.value.trim() !== '' && this.value.indexOf('http') !== 0) {\n\t\tthis.value = \"http://\" + this.value;\n\t}\n}\n\nvar urlFields = document.querySelectorAll('.mc4wp-form input[type=\"url\"]');\nif( urlFields && urlFields.length > 0 ) {\n\tfor( var j=0; j < urlFields.length; j++ ) {\n\t\taddEventListener(urlFields[j],'blur',maybePrefixUrlField);\n\t}\n}/* test if browser supports date fields */\nvar testInput = document.createElement('input');\ntestInput.setAttribute('type', 'date');\nif( testInput.type !== 'date') {\n\n\t/* add placeholder & pattern to all date fields */\n\tvar dateFields = document.querySelectorAll('.mc4wp-form input[type=\"date\"]');\n\tfor(var i=0; i<dateFields.length; i++) {\n\t\tif(!dateFields[i].placeholder) {\n\t\t\tdateFields[i].placeholder = 'YYYY-MM-DD';\n\t\t}\n\t\tif(!dateFields[i].pattern) {\n\t\t\tdateFields[i].pattern = '[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])';\n\t\t}\n\t}\n}\n\n})();</script><script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_options = {\"testMode\":\"\",\"boxes\":[{\"id\":82996,\"icon\":\"&times;\",\"content\":\"\",\"css\":{\"background_color\":\"#eeee22\",\"width\":600,\"border_width\":2,\"border_style\":\"double\",\"position\":\"center\"},\"trigger\":{\"method\":\"time_on_page\",\"value\":\"3\"},\"animation\":\"fade\",\"cookie\":{\"triggered\":0,\"dismissed\":336},\"rehide\":true,\"position\":\"center\",\"screenWidthCondition\":{\"condition\":\"larger\",\"value\":500},\"closable\":true,\"post\":{\"id\":82996,\"title\":\"Subscribe to KDnuggets\",\"slug\":\"subscribe-to-kdnuggets\"}}]};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla/assets/js/script.min.js?ver=3.2.5\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_stats_config = {\"ajaxurl\":\"https:\\/\\/www.kdnuggets.com\\/wp-admin\\/admin-ajax.php?action=boxzilla_stats_track\"};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla-stats/assets/js/tracking.min.js?ver=1.0.4\" type=\"text/javascript\"></script>\n<script src=\"https://www.kdnuggets.com/wp-includes/js/wp-embed.min.js?ver=4.9.10\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar mc4wp_forms_config = [];\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/forms-api.min.js?ver=4.1.14\" type=\"text/javascript\"></script>\n<!--[if lte IE 9]>\n<script type='text/javascript' src='https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/third-party/placeholders.min.js?ver=4.1.14'></script>\n<![endif]-->\n<!--/.main_wrapper--></body></html>\n<script src=\"https://s7.addthis.com/js/300/addthis_widget.js#pubid=gpsaddthis\" type=\"text/javascript\"></script>\n\n\n<!-- Dynamic page generated in 0.620 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2019-04-26 20:29:01 -->\n<!-- Compression = gzip -->", "content_tokenized": ["comment", "rajiv", "shah", "data", "scientist", "datarobot", "data", "scientist", "spend", "lot", "time", "help", "make", "better", "decis", "build", "predict", "model", "provid", "improv", "insight", "might", "predict", "whether", "imag", "cat", "dog", "store", "sale", "for", "the", "next", "month", "the", "likelihood", "part", "will", "fail", "this", "post", "help", "with", "make", "better", "predict", "but", "instead", "how", "make", "the", "best", "decis", "the", "post", "strive", "give", "some", "background", "optim", "start", "with", "simpli", "toy", "exampl", "show", "the", "math", "behind", "optim", "calcul", "after", "that", "this", "post", "tackl", "more", "sophist", "optim", "problem", "tri", "pick", "the", "best", "team", "for", "fantasi", "footbal", "the", "fanduel", "imag", "below", "veri", "common", "sort", "game", "that", "wide", "play", "ask", "inlaw", "the", "optim", "strategi", "this", "post", "were", "shown", "consist", "win", "along", "the", "way", "will", "show", "few", "code", "snippet", "and", "provid", "link", "work", "code", "python", "and", "julia", "and", "win", "money", "feel", "free", "share", "simpl", "exampl", "which", "found", "onlin", "start", "with", "carpent", "make", "bookcas", "two", "size", "larg", "and", "small", "take", "num", "hour", "make", "larg", "bookcas", "and", "num", "hour", "make", "small", "one", "the", "profit", "larg", "bookcas", "num", "and", "the", "profit", "small", "bookcas", "num", "the", "carpent", "can", "spend", "onli", "num", "hour", "per", "week", "make", "bookcas", "and", "must", "make", "least", "num", "each", "size", "per", "week", "job", "data", "scientist", "help", "carpent", "maxim", "her", "revenu", "initi", "inclin", "could", "that", "sinc", "the", "larg", "bookcas", "the", "most", "profit", "whi", "not", "focus", "them", "that", "case", "would", "profit", "num", "num", "num", "num", "which", "num", "that", "pretti", "good", "baselin", "but", "not", "the", "best", "possibl", "answer", "time", "get", "the", "algebra", "out", "and", "creat", "equat", "that", "defin", "the", "problem", "first", "start", "with", "the", "constraint", "num", "larg", "bookcas", "num", "small", "bookcas", "numx", "numi", "num", "labor", "constraint", "our", "object", "function", "which", "are", "tri", "maxim", "numx", "numi", "the", "algebra", "hand", "can", "convert", "out", "constraint", "num", "numx", "then", "graph", "all", "the", "constraint", "and", "find", "the", "feasibl", "area", "for", "the", "portion", "make", "small", "and", "larg", "bookcas", "the", "next", "step", "figur", "out", "the", "optim", "point", "use", "the", "cornerpoint", "principl", "linear", "program", "the", "maximum", "and", "minimum", "valu", "the", "object", "function", "each", "occur", "one", "the", "vertic", "the", "feasibl", "region", "look", "here", "the", "maximum", "valu", "num", "when", "make", "num", "larg", "bookcas", "and", "num", "small", "bookcas", "which", "result", "incom", "num", "this", "veri", "simpl", "toy", "problem", "typic", "there", "are", "mani", "more", "constraint", "and", "the", "object", "function", "can", "get", "complic", "there", "are", "lot", "classic", "problem", "optim", "such", "rout", "algorithm", "find", "the", "best", "path", "schedul", "algorithm", "optim", "staf", "tri", "find", "the", "best", "way", "alloc", "group", "peopl", "set", "task", "data", "scientist", "need", "dissect", "what", "are", "tri", "maxim", "and", "identifi", "the", "constraint", "the", "form", "equat", "onc", "can", "this", "can", "hand", "this", "over", "comput", "solv", "let", "next", "walk", "through", "bit", "more", "complic", "exampl", "fantasi", "footbal", "over", "the", "last", "few", "year", "fantasi", "sport", "have", "increas", "grown", "popular", "one", "game", "pick", "set", "footbal", "player", "make", "the", "best", "possibl", "team", "each", "footbal", "player", "has", "price", "and", "there", "salari", "cap", "limit", "the", "challeng", "optim", "team", "produc", "the", "highest", "total", "point", "while", "stay", "within", "salari", "cap", "limit", "this", "type", "optim", "problem", "known", "the", "knapsack", "problem", "assign", "problem", "simpl", "linear", "optim", "let", "start", "load", "dataset", "and", "take", "look", "the", "raw", "data", "need", "know", "both", "the", "salari", "well", "the", "expect", "point", "most", "footbal", "fan", "spend", "lot", "time", "tri", "predict", "how", "mani", "point", "player", "will", "score", "want", "build", "model", "for", "predict", "the", "expect", "perform", "player", "take", "look", "ben", "blog", "post", "the", "goal", "here", "build", "the", "best", "possibl", "team", "for", "salari", "cap", "let", "say", "num", "team", "consist", "quarterback", "run", "back", "wide", "receiv", "tight", "end", "and", "defens", "can", "use", "the", "lpsolv", "packag", "set", "the", "problem", "here", "code", "snippet", "for", "set", "the", "constraint", "pars", "through", "this", "can", "see", "have", "set", "minimum", "and", "maximum", "for", "num", "player", "howev", "for", "the", "have", "allow", "maximum", "num", "and", "minimum", "num", "this", "not", "unusu", "fantasi", "footbal", "becaus", "there", "role", "call", "flex", "player", "which", "anyon", "can", "choos", "and", "they", "can", "either", "now", "let", "look", "the", "code", "for", "the", "object", "the", "code", "show", "that", "have", "set", "the", "problem", "maxim", "the", "object", "the", "most", "point", "and", "includ", "our", "constraint", "onc", "the", "code", "run", "output", "optim", "team", "fork", "exist", "repo", "and", "have", "made", "the", "code", "and", "dataset", "are", "avail", "here", "more", "sophist", "python", "optim", "repo", "also", "avail", "advanc", "step", "far", "have", "built", "veri", "simpl", "optim", "solv", "the", "problem", "there", "are", "sever", "other", "strategi", "further", "improv", "the", "optim", "first", "the", "varianc", "our", "team", "can", "increas", "use", "strategi", "call", "stack", "where", "make", "sure", "and", "are", "the", "same", "team", "simpl", "optim", "constraint", "for", "select", "and", "from", "the", "same", "team", "anoth", "strategi", "use", "overlap", "constraint", "for", "select", "multipl", "lineup", "overlap", "constraint", "ensur", "divers", "player", "and", "not", "the", "same", "set", "player", "for", "each", "optim", "team", "this", "strategi", "particular", "effect", "when", "submit", "multipl", "lineup", "can", "read", "more", "about", "these", "strategi", "here", "and", "run", "the", "code", "julia", "here", "code", "snippet", "the", "stack", "constraint", "this", "for", "hockey", "optim", "last", "year", "sloan", "sport", "confer", "haugh", "and", "sighal", "present", "paper", "with", "addit", "optim", "constraint", "they", "includ", "what", "oppon", "team", "like", "look", "like", "after", "all", "there", "are", "some", "player", "that", "are", "much", "more", "popular", "use", "this", "knowledg", "can", "predict", "the", "like", "team", "that", "will", "oppos", "team", "the", "approach", "here", "use", "dirichlet", "regress", "for", "model", "player", "the", "result", "muchimprov", "optim", "that", "capabl", "consist", "win", "hope", "this", "post", "has", "shown", "how", "optim", "strategi", "can", "help", "find", "the", "best", "possibl", "solut", "bio", "rajiv", "shah", "data", "scientist", "datarobot", "where", "work", "with", "custom", "make", "and", "implement", "predict", "previous", "rajiv", "has", "been", "part", "data", "scienc", "team", "caterpillar", "and", "state", "farm", "enjoy", "data", "scienc", "and", "spend", "time", "mentor", "data", "scientist", "speak", "event", "and", "have", "fun", "with", "blog", "post", "has", "phd", "from", "the", "univers", "illinoi", "urbana", "champaign", "relat", "whi", "germani", "not", "defeat", "brazil", "the", "final", "data", "scienc", "lesson", "from", "the", "world", "cup", "the", "guerrilla", "guid", "machin", "learn", "with", "julia", "onli", "numpi", "implement", "gan", "and", "adam", "optim", "use", "numpi"], "timestamp_scraper": 1556362767.431675, "title": "Optimization 101 for Data Scientists", "read_time": 374.09999999999997, "content_html": "<div class=\"post\" id=\"post-\">\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p><b>By\u00a0<a href=\"http://www.rajivshah.com\">Rajiv Shah</a>,\u00a0data scientist at <a href=\"http://www.datarobot.com\">DataRobot</a></b></p>\n<p>As a data scientist, you spend a lot of your time helping to make better decisions. You build predictive models to provide improved insights. You might be predicting whether an image is a cat or dog, store sales for the next month, or the likelihood if a part will fail. In this post, I won't help you with making better predictions, but instead how to make the <strong>best</strong> decision.</p>\n<p>The post strives to give you some background on optimization. It starts with a simply toy example show you the math behind an optimization calculation. After that, this post tackles a more sophisticated optimization problem, trying to pick the best team for fantasy football. The FanDuel image below is a very common sort of game that is widely played (ask your in-laws). The optimization strategies in this post were shown to consistently win! Along the way, I will show a few code snippets and provide links to working code in R, Python, and Julia. And if you do win money, feel free to share it :)</p>\n<p><center><br>\n<img alt=\"Fanduels\" class=\"alignnone size-full wp-image-84003\" height=\"487\" sizes=\"(max-width: 650px) 100vw, 650px\" src=\"https://www.kdnuggets.com/wp-content/uploads/fanduels3.jpg\" srcset=\"https://www.kdnuggets.com/wp-content/uploads/fanduels3.jpg 650w, https://www.kdnuggets.com/wp-content/uploads/fanduels3-300x225.jpg 300w\" width=\"650\"/></br></center>A simple example, which I found <a href=\"http://melaniewingard.weebly.com/uploads/3/7/5/5/37554047/09-30-16_section_3.5_linear_programming_and_optimization_continued.pdf\">online</a>, starts with a carpenter making bookcases in two sizes, large and small. It takes 6 hours to make a large bookcase and 2 hours to make a small one. The profit on a large bookcase is $50, and the profit on a small bookcase is $20. The carpenter can spend only 24 hours per week making bookcases and must make at least 2 of each size per week. Your job as a data scientist is to help your carpenter maximize her revenue.</p>\n<p>Your initial inclination could be that since the large bookcase is the most profitable, why not focus on them. In that case, you would profit (2*$20) + (3*$50) which is $190. That is a pretty good baseline, but not the best possible answer. It is time to get the algebra out and create equations that define the problem. First, we start with the constraints:</p>\n<div style=\"width: 98%; border: 1px solid #ccc; overflow: auto; padding-left: 10px; padding-bottom: 10px; padding-top: 10px;\">\n<pre> \r\nx&gt;=2   ## large bookcases\r\n\r\ny&gt;=2   ## small bookcases\r\n\r\n6x + 2y &lt;= 24 (labor constraint)\r\n</pre>\n</div>\n<p>\u00a0</p>\n<p>Our objective function which we are trying to maximize is:</p>\n<div style=\"widh: 98%; border: 1px solid #ccc; overflow: auto; padding-left: 10px; padding-bottom: 10px; padding-top: 10px;\">\n<pre> \r\nP = 50x + 20y\r\n</pre>\n</div>\n<p>\u00a0</p>\n<p>If we do the algebra by hand, we can convert out constraints to <b>y &lt;= 12 - 3x</b>. Then we graph all the constraints and find the feasible area for the portion of making small and large bookcases:</p>\n<p><center><img alt=\"Constraints Graph\" class=\"alignnone size-full wp-image-83805\" sizes=\"(max-width: 247px) 100vw, 247px\" src=\"https://www.kdnuggets.com/wp-content/uploads/constraints-graph.png\" srcset=\"https://www.kdnuggets.com/wp-content/uploads/constraints-graph.png 247w, https://www.kdnuggets.com/wp-content/uploads/constraints-graph-150x150.png 150w, https://www.kdnuggets.com/wp-content/uploads/constraints-graph-120x120.png 120w\" width=\"30%\"/></center>The next step is figuring out the optimal point. Using the corner-point principle of linear programming, the maximum and minimum values of the objective function each occur at one of the vertices of the feasible region. Looking here, the maximum values (2,6) is when we make 2 large bookcases and 6 small bookcases, which results in an income of $220.</p>\n<p>This is a very simple toy problem, typically there are many more constraints and the objective functions can get complicated. There are lots of classic problems in optimization such as routing algorithms to find the best path, scheduling algorithms to optimize staffing, or trying to find the best way to allocate a group of people to set of tasks. As a data scientist, you need to dissect what you are trying to maximize and identify the constraints in the form of equations. Once you can do this, we can hand this over to a computer to solve. So lets next walk through a bit more complicated example.</p>\n<p><strong>Fantasy Football</strong></p>\n<p>Over the last few years, fantasy sports have increasingly grown in popularity. One game is to pick a set of football players to make the best possible team. Each football player has a price and there is a salary cap limit. The challenge is to optimize your team to produce the highest total points while staying within a salary cap limit. This type of optimization problem is known as the knapsack problem or an assignment problem.</p>\n<p><strong>Simple Linear Optimization</strong></p>\n<p>Let's start by loading a dataset and taking a look at the raw data. You need to know both the salary as well as the expected points. Most football fans spend a lot of time trying to predict how many points a player will score. If you want to build a model for predicting the expected performance of a player, take a look at <a href=\"https://blog.datarobot.com/using-datarobot-to-predict-nba-player-performance\">Ben's blog post</a>.</p>\n<p><center><img alt=\"Qbs\" class=\"alignnone size-full wp-image-83807\" sizes=\"(max-width: 517px) 100vw, 517px\" src=\"https://www.kdnuggets.com/wp-content/uploads/qbs.jpg\" srcset=\"https://www.kdnuggets.com/wp-content/uploads/qbs.jpg 517w, https://www.kdnuggets.com/wp-content/uploads/qbs-300x180.jpg 300w\" width=\"70%\"/></center>The goal here is to build the best possible team for a salary cap, let's say $50,000. A team consists of a quarterback, running backs, wide receivers, tight ends, and a defense. We can use the <strong>lpSolve</strong> package in R to set up the problem. Here is a code snippet for setting up the constraints.</p>\n<p><center><img alt=\"Constraints\" class=\"alignnone size-full wp-image-83809\" sizes=\"(max-width: 497px) 100vw, 497px\" src=\"https://www.kdnuggets.com/wp-content/uploads/lpsolve-contraints.png\" srcset=\"https://www.kdnuggets.com/wp-content/uploads/lpsolve-contraints.png 497w, https://www.kdnuggets.com/wp-content/uploads/lpsolve-contraints-300x51.png 300w\" width=\"60%\"/></center>If you parse through this, you can see we have set a minimum and maximum for QB of 1 player. However, for the RB, we have allowed a maximum of 3 and a minimum of 2. This is not unusual in fantasy football, be because there is a role called a flex player, which anyone can choose, and they can either be a RB, WR, or TE. Now let's look at the code for the objective:</p>\n<p><center><img alt=\"Objective\" class=\"alignnone size-full wp-image-83810\" sizes=\"(max-width: 370px) 100vw, 370px\" src=\"https://www.kdnuggets.com/wp-content/uploads/objective.png\" srcset=\"https://www.kdnuggets.com/wp-content/uploads/objective.png 370w, https://www.kdnuggets.com/wp-content/uploads/objective-300x68.png 300w\" width=\"50%\"/></center>The code shows that we have set up the problem to maximize the objective of the most points and include our constraints. Once the code is run, it outputs an optimal team! I forked an existing repo and have made the R code and dataset are <a href=\"https://github.com/rajshah4/linear-optimization-fantasy-football\">available here.</a> A more sophisticated <a href=\"https://github.com/mattbrondum/Fantasy-Football-Optimization\">python</a> optimization repo is also available.</p>\n<p><center><img alt=\"Final team\" class=\"alignnone size-full wp-image-83811\" sizes=\"(max-width: 517px) 100vw, 517px\" src=\"https://www.kdnuggets.com/wp-content/uploads/finalteam.jpg\" srcset=\"https://www.kdnuggets.com/wp-content/uploads/finalteam.jpg 517w, https://www.kdnuggets.com/wp-content/uploads/finalteam-300x180.jpg 300w\" width=\"70%\"/></center><strong>Advanced steps</strong></p>\n<p>So far, we have built a very simple optimization to solve the problem. There are several other strategies to further improve the optimizer. First, the variance of our teams can be increased by using a strategy called <strong>stacking</strong>, where you make sure your QB and WR are on the same team. A simple optimization is a constraint for selecting a QB and WR from the same team. Another strategy is using an <strong>overlap</strong> constraint for selecting multiple lineups. An overlap constraint ensures a diversity of players and not the same set of players for each optimized team. This strategy is particularly effective when submitting multiple lineups. You can read more about these <a href=\"https://arxiv.org/pdf/1604.01455v2.pdf\">strategies here</a> and run the code in Julia <a href=\"https://github.com/dscotthunter/Fantasy-Hockey-IP-Code\">here</a>. A code snippet of the stacking constraint (this is for a hockey optimization):</p>\n<p><img alt=\"Goalie\" class=\"alignnone size-full wp-image-83812\" sizes=\"(max-width: 1012px) 100vw, 1012px\" src=\"https://www.kdnuggets.com/wp-content/uploads/goalie.png\" srcset=\"https://www.kdnuggets.com/wp-content/uploads/goalie.png 1012w, https://www.kdnuggets.com/wp-content/uploads/goalie-300x33.png 300w, https://www.kdnuggets.com/wp-content/uploads/goalie-768x85.png 768w\" width=\"100%\"/></p>\n<p>Last year, at Sloan sports conference, <a href=\"http://www.sloansportsconference.com/wp-content/uploads/2018/02/1001.pdf\">Haugh and Sighal</a> , presented a paper with additional optimization constraints. They include what an <strong>opponent\u2019s \u00a0team</strong> is likely to look like. After all, there are some players that are much more popular. Using this knowledge, you can predict the likely teams that will oppose your team. The approach here used Dirichlet regressions for modeling players. The result was a much-improved optimizer that was capable of consistently winning!</p>\n<p>I hope this post has shown you how optimization strategies can help you find the best possible solution.</p>\n<p><b>Bio</b>:\u00a0<a href=\"http://www.rajivshah.com\">Rajiv Shah</a> is a data scientist at <a href=\"http://www.datarobot.com\">DataRobot</a>, where he works with customers to make and implement predictions. Previously, Rajiv has been part of data science teams at Caterpillar and State Farm. He enjoys data science and spends time mentoring data scientists, speaking at events, and having fun with blog posts. He has a Ph.D. from the University of Illinois at Urbana Champaign.</p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"https://www.kdnuggets.com/2018/07/worldcup-data-science-lessons.html\">Why Germany did not defeat Brazil in the final, or Data Science lessons from the World Cup</a></li>\n<li><a href=\"https://www.kdnuggets.com/2017/07/guerrilla-guide-machine-learning-julia.html\">The Guerrilla Guide to Machine Learning with Julia</a></li>\n<li><a href=\"https://www.kdnuggets.com/2018/08/only-numpy-implementing-gans-adam-optimizer.html\">Only Numpy: Implementing GANs and Adam Optimizer using Numpy</a></li>\n</ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p><script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets'; \n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div> ", "website": "kdnuggets"}