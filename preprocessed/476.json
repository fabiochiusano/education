{"content": "By Ahmed Gad , KDnuggets Contributor. comments \u00a0 Introduction \u00a0 You might worked with several languages such as Java, C++, and Python and created a number of projects but unfortunately these projects are buried and no one knows about. Why not making these projects alive by making them available online? This tutorial will explain the steps required to package your Python projects, distribute them in distribution formats using steptools, upload them into the Python Package Index (PyPI) repository using twine, and finally installation using Python installers such as pip and conda. The platform used in this tutorial is Linux Ubuntu 18.04 with Python 3.6.5. But you can still use other platforms such as Windows with little or no difference in the commands used. This tutorial has the following steps: 1. Creating a Simple Python Project. 2.\u00a0How Python Locates Libraries? 3.\u00a0Manual Installation by Copying Project Files to\u00a0 site-packages. 4.\u00a0How Python Installers Locate Libraries? 5.\u00a0Preparing the Package and its Files ( __init__.py \u00a0and\u00a0 setup.py ). 6.\u00a0Distributing the Package. 7.\u00a0Uploading the Distribution Files Online to Test PyPI. 8.\u00a0Installing the Distributed Package from Test PyPI. 9.\u00a0Importing and Using the Installed Package. 10. Using PyPI rather than Test PyPI. \u00a0 1. Creating a Simple Python Project \u00a0 Let us create a very simple project and distribute it. To be able to package and distribute any Python project, there must be an associated folder containing all of the required files for the project. The folder name will be later the project name. This project will have just a single level containing a single Python file. The project structure is as follows: The used project/folder name is\u00a0 \u201cprintmsg\u201d \u00a0to reflect its use. That folder is saved into the Desktop. The Python file inside it is named\u00a0 \u201cprint_msg_file.py\u201d . The Python file contains a function and a variable. The function is named\u00a0 \u201cprint_msg_func\u201d \u00a0which will print a message once called. The variable is named \u201cversion\u201d which holds the version of the project. Here is the implementation inside the\u00a0 \u201cprint_msg_file.py\u201d \u00a0file. The\u00a0 \u201cprint_msg_func\u201d function prints a hello message when called. Due to the\u00a0 if \u00a0statement, the file will automatically call the function once executed directly as the main program. But it will not if that file is imported into another file. version\u00a0=\u00a0\"1.0\"\u00a0\u00a0\r \u00a0\u00a0\r def\u00a0:\u00a0\u00a0\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r \u00a0\u00a0\r if\u00a0__name__\u00a0==\u00a0\"__main__\":\u00a0\u00a0\r \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r Next is to execute that file to know that everything is running well such as Python being installed properly. A Python file is to be executed from either the Linux terminal or Windows Command Prompt by issuing the python command followed by the location of the file. Figure 1 shows how to run the Python file using both Windows and Ubuntu. \u00a0 Figure 1 The CMD/terminal are opened in the\u00a0 \u201cprintmsg\u201d \u00a0directory and its contents are displayed to ensure the target file\u00a0 \u201cprint_msg_file.py\u201d \u00a0is already existing. Then the python command is issued to run the file. After making sure everything is working, it is possible to import that project into another Python file in order to be able to call its content. If a file to be imported into another, the legacy way for doing this is to create another file in the same directory of that file. For example, another Python file named\u00a0 \u201csecond_file.py\u201d \u00a0is to import the project and call its function as follows: import\u00a0print_msg_file\u00a0\u00a0\r \u00a0\u00a0\r At first, the project is imported as in line 1. Then it is used to call its function in line 2. After opening the terminal and setting its current directory to the printmsg folder, the new file\u00a0 \u201cinside_project.py\u201d \u00a0can be executed as in figure 2. The function got called successfully. \u00a0 Figure 2 Because the imported module is in the same directory of the script it is called from, the process is straightforward. Just type the name of the module in an import statement. There is an important question. What if the script calling the file is in a different directory than the module it would like to import? Let us try to create another Python file not located in the same directory of the imported module and try to import the module again. The file is named \u201c outside_project.py \u201d which is located into the desktop. In other words, that file is located one level up to the module. It has the same code used in the previous file\u00a0 \u201cinside_project.py\u201d \u00a0After running this file from the terminal, the result is shown in figure 3. \u00a0 Figure 3 The module is not found because the file and the module to be imported are in different directories. The file is located in \u201c~/Desktop/\u201d directory and the module is located in \u201c~/Desktop/printmsg/\u201d directory. To solve that issue, the\u00a0 printmsg \u00a0is appended to the name of the module to make the interpreter knows where it can find the module. The code will be as follows: import\u00a0printmsg.print_msg_file\u00a0\u00a0\r \u00a0\u00a0\r The result of executing the \u201coutside_project.py\u201d file is shown in figure 4. \u00a0 Figure 4 But appending the folder name in the path from the file to the module it imports is tiresome specially if the file is away from the module in more than one levels. To solve this issue, let us have a brief overview about how Python interpreter locates imported libraries. \u00a0 2. How Python Locates Libraries? \u00a0 When Python interpreter encounters an import statement, it searches in some of its directories for that imported library. If it is not found in any of those directories, then it will raise an error as in figure 3. There are multiple sources of such paths that is searched for a given library. For example, paths can be inside the\u00a0 PYTHONHOME \u00a0or\u00a0 PYTHONPATH \u00a0environment variables, current script directory, and the\u00a0 site-packages \u00a0directory. The list of all directories that Python searches in are listed in the path property of the sys built-in module. It can be printed as follows: import\u00a0sys\u00a0\u00a0\r \r The sys.path list is printed using the terminal and result is shown in figure 5. \u00a0 Figure 5 In our example, the module is not located in any of the directories listed in\u00a0 sys.path \u00a0and this is why an exception is thrown. We can fix that by moving the library into one of these paths. The directory that will be used is the\u00a0 site-packages \u00a0directory. The reason is that the installed libraries using pip or conda are added to that directory. Let us see how to add our project into that directory. \u00a0 3. Manual Installation by Copying Project Files to site-packages \u00a0 In figure 5, the site-packages directory is listed as a search path for imported libraries. By simply copying and pasting the project directory \u201c printmsg \u201d inside the site-packages directory, the print_msg_file module can be imported. Figure 6 shows that the printmsg project is copied into site-packages. \u00a0 Figure 6 Based on the previous two lines of code listed below, the \u201c outside_project.py \u201d file can now successfully import the project and print the output as in figure 4. In this case, the imported module print_msg_file is prepended by the directory of the project \u201c printmsg \u201d but this will be valid wherever the \u201c outside_project.py \u201d file is located. import\u00a0printmsg.print_msg_file\u00a0\u00a0\r \r \r \u00a0 4. How Python Installers Locate Libraries? \u00a0 Up to this point, in order to import the project successfully it should be copied manually inside the\u00a0 site-packages \u00a0directory. Before doing that, the project should be transferred to the machine by anyway such as being downloaded from any file hosting server. But all of work is manual. Some users will find such work is tiresome to do for every library they are to install. As a result, there is alternative way for installing libraries. Some installers are available to receive the library name and they take care of downloading and installing it automatically.\u00a0 But how to make our own libraries accessible by these installers? \u00a0These installers searches for the libraries inside software repositories such as Python Package Index (PyPI). Once found, they download and install it automatically. So, rather than asking how to make our own libraries accessible by Python installers, the question should now be how to upload our own libraries to such repositories? This is because by uploading these libraries to such repositories, they will implicitly be accessible by the Python installers. Such software repositories accept the libraries in distribution formats such as Wheel built distribution. So, our question now should be how to prepare our project into Wheel distribution format? In order to generate the Wheel distribution format, there are a number of files to be packaged together. These files include the actual project Python files, any supplemental files required by those files, and also some helper files to give some sort of details about your project. So, the sequence to be followed is to prepare the package files, generate the distribution files, and upload such files to the Python package repository (PyPI). These points will be covered in the next sections.", "title_html": "<h1 id=\"title\">Packaging and Distributing Your Python Project to PyPI for Installation Using pip</h1> ", "url": "https://www.kdnuggets.com/2018/06/packaging-distributing-python-project-pypi-pip.html", "tfidf": {"tfidf": {"after": 3.06210621063, "base": 1.14628158845, "can": 9.41009113136, "hold": 1.6551292744, "this": 12.04552352052, "here": 2.42307692308, "project": 49.09741550700001, "pip": 271.384615384, "veri": 1.25880114177, "new": 1.0178880554, "sitepackag": 7938.0, "would": 1.0828729281799998, "onlin": 5.210370856580001, "number": 2.20285833218, "follow": 7.324808858429999, "togeth": 1.58095996813, "contain": 4.79444332596, "care": 2.49426551453, "about": 3.19458045477, "function": 17.468091795, "contributor": 14.4721969006, "buri": 5.13122171946, "python": 1745.2340425523998, "just": 2.67160286074, "well": 1.0655748708, "work": 4.46080359652, "simpli": 2.5192002538900002, "path": 27.852631578959997, "statement": 10.26686785944, "onc": 4.492359932099999, "printmsgfilepi": 2976.75, "know": 7.779810519450001, "wherev": 21.867768595, "automat": 20.362548097470004, "where": 1.06715063521, "save": 2.8178913737999998, "creat": 7.4957507082, "printmsg": 6945.75, "ahm": 30.3556405354, "multipl": 2.74813917258, "run": 6.22771403352, "how": 17.62753608561, "test": 7.97121338913, "singl": 3.21897810218, "them": 3.29628347982, "word": 1.7965372864099998, "anyway": 23.244509516799997, "simpl": 10.19434931508, "whi": 6.513230769240001, "sys": 1984.5, "printmsgprintmsgfil": 1984.5, "explain": 2.60049140049, "execut": 11.1818565995, "order": 3.7387550043299997, "due": 1.23789473684, "found": 3.34161229215, "given": 1.35426085473, "desktop": 182.4827586207, "hello": 44.4705882353, "abl": 3.6417020300400003, "tutori": 178.3820224719, "target": 3.2189781021900004, "will": 15.92254281748, "associ": 1.3263157894700002, "overview": 12.6805111821, "open": 2.49113447356, "actual": 1.87482286254, "syspath": 1984.5, "special": 1.4881889763799998, "display": 2.93456561922, "next": 2.9901120632800002, "below": 2.25607503197, "distribut": 32.875237273559996, "success": 3.9600897979500003, "our": 16.50311850313, "reflect": 2.3443591258099996, "exist": 1.4647107666799999, "final": 1.34008609775, "fix": 4.4346368715099995, "point": 2.51980001588, "num": 34.010711360340004, "steptool": 992.25, "messag": 9.93491864832, "level": 4.96331804919, "exampl": 4.51450236966, "twine": 278.526315789, "has": 2.0872995004, "generat": 4.10550814584, "softwar": 20.5248868778, "take": 1.13961668222, "termin": 19.45588235296, "previous": 2.85693719632, "now": 3.4823426189999998, "tri": 3.7089125102199993, "rais": 1.9733996271, "name": 14.327525164810002, "code": 11.64214128576, "prompt": 4.44456886898, "format": 10.125, "than": 4.131147541, "sure": 7.453521126760001, "possibl": 1.4173734488, "output": 7.676982591880001, "issu": 5.75686701116, "also": 1.01476510067, "tiresom": 661.5, "reason": 1.72340425532, "everyth": 9.6393442623, "cmdtermin": 992.25, "not": 6.09404388714, "supplement": 7.13848920863, "encount": 4.13976531943, "print": 16.4859813084, "the": 129.0, "altern": 2.1390460792200003, "secondfilepi": 992.25, "thrown": 12.109839816900001, "past": 2.01702452039, "projectfold": 992.25, "shown": 8.30769230769, "printmsgfil": 2976.75, "which": 3.015575535, "then": 3.25973581548, "index": 13.993829881, "they": 4.12069301148, "anoth": 6.81861130992, "instal": 71.95706106874, "case": 1.48498737256, "let": 13.94466403164, "pypi": 6945.75, "variabl": 26.241322314059996, "manual": 30.91723466408, "def": 81.83505154640001, "section": 2.1284354471099998, "away": 1.85142857143, "what": 1.25343439128, "ensur": 3.4127257093700005, "setuppi": 992.25, "alreadi": 1.9551724137900002, "other": 2.01984732824, "introduct": 2.7808723068799996, "one": 4.02509982888, "show": 2.5340782123, "two": 1.01379310345, "either": 1.5830092731099998, "window": 17.594384927969998, "got": 3.61969904241, "see": 1.27242125511, "such": 13.79967905862, "becaus": 3.4485554992499994, "sever": 1.07241286139, "those": 2.39096385542, "transfer": 2.72549356223, "still": 1.1866357724799999, "like": 1.14918566775, "implement": 3.57648118946, "some": 5.2018348624, "sourc": 1.69760479042, "should": 6.657301603960001, "add": 4.61243463103, "except": 1.71948445792, "locat": 20.76964878742, "built": 1.99447236181, "process": 1.69524826482, "append": 110.25, "import": 34.845179807620006, "file": 177.23800475048998, "content": 7.0843373494, "repositori": 269.84702549580004, "receiv": 1.3054847463200001, "desktopprintmsg": 992.25, "use": 16.474220118079998, "straightforward": 27.7552447552, "languag": 2.29488291414, "helper": 79.38, "access": 5.6204861930700005, "ani": 5.6691901157, "question": 6.612244897949999, "directori": 354.440930232, "modul": 288.0384204915, "result": 4.58446433728, "ubuntu": 1058.4, "initpi": 992.25, "detail": 2.26186066391, "differ": 3.7096347067499997, "structur": 2.0580762250499998, "but": 7.11426925293, "gad": 236.955223881, "prepend": 793.8, "printmsgfunc": 1984.5, "environ": 3.43561999567, "server": 38.071942446, "for": 10.003150400100001, "aliv": 7.527738264580001, "brief": 3.39013452915, "java": 31.625498008, "builtin": 992.25, "all": 3.03440366973, "version": 6.025047438329999, "with": 3.003594626969999, "program": 2.02139037433, "unfortun": 9.966101694919999, "there": 5.20456333595, "are": 10.299059357800001, "includ": 1.0190641247799999, "solv": 14.53846153846, "command": 10.66756257348, "current": 3.0651607298, "that": 18.0717131475, "sort": 5.188235294119999, "both": 1.05215720061, "call": 9.6088769334, "more": 1.0171706817, "and": 28.001763779639997, "list": 8.17928902626, "type": 2.0281042411900003, "valid": 6.61224489796, "these": 8.59323410016, "prepar": 7.29037195776, "legaci": 5.89966555184, "later": 1.08650424309, "script": 24.897020386830004, "befor": 1.10036041031, "librari": 50.97059817515, "again": 1.50883862384, "download": 43.937269372799996, "platform": 12.466431095399999, "avail": 3.4576935642, "linux": 130.131147541, "littl": 1.5499365420299998, "give": 1.3653250774, "make": 6.457596095160001, "set": 1.18707940781, "way": 2.4381478922, "proper": 3.3388012618299996, "same": 4.47431832592, "folder": 844.468085105, "search": 16.26972740315, "step": 5.655860349119999, "upload": 389.11764705900003, "error": 6.04109589041, "packag": 86.11242603546, "outsideprojectpi": 3969.0, "move": 1.29125660838, "ask": 2.1744966443, "comment": 3.05954904606, "conda": 1984.5, "accept": 1.7377408056, "sequenc": 6.07112810707, "rather": 3.11385701676, "machin": 4.02433460076, "into": 10.150246147899999, "wheel": 26.878103837460003, "must": 1.9220338983099996, "might": 2.1561863370900003, "insid": 16.437618636779998, "requir": 4.58534706846, "from": 7.00397050479, "figur": 30.515120450999998, "direct": 1.22226499346, "insideprojectpi": 1984.5, "first": 1.00761614623, "everi": 1.47917637194, "copi": 19.1878172589, "implicit": 21.1962616822, "when": 2.0415353951, "have": 2.0297896822799997, "interpret": 9.645200486039998, "properti": 2.5949656750599996, "main": 2.50607734806, "host": 2.7092150170599996, "find": 3.4588235294199996, "line": 4.254779346089999, "kdnugget": 992.25, "cover": 1.69380134429, "user": 7.71053909665, "own": 3.5353325415600003}, "logtfidf": {"after": 0.061472083944299996, "base": 0.13652330228700002, "can": 1.298728771152, "hold": 0.503879117196, "this": 0.04543738863, "here": 0.8850381883700001, "project": 15.724852805396, "pip": 9.82077975822, "veri": 0.230159793238, "new": 0.0177299468511, "sitepackag": 55.19980073328, "would": 0.0796176279647, "onlin": 1.915007708714, "number": 0.1932171568372, "follow": 0.3174983776594, "togeth": 0.458032237308, "contain": 1.406535954708, "care": 0.9139943029109999, "about": 0.18853043242380002, "function": 6.401260191157999, "contributor": 2.67222935363, "buri": 1.6353437827700001, "python": 124.95035903175999, "just": 0.579062868218, "well": 0.0635144383156, "work": 0.436138269092, "simpli": 0.923941491586, "path": 9.211007903099999, "statement": 3.6909291274500005, "onc": 1.211297617065, "printmsgfilepi": 20.69992527498, "know": 2.8587590831939997, "wherev": 3.08501379908, "automat": 5.7452551419599995, "where": 0.0649921387457, "save": 1.03598886547, "creat": 1.335460911084, "printmsg": 48.299825641620004, "ahm": 3.4129823498400005, "multipl": 1.01092401812, "run": 1.770859902156, "how": 5.18723652623, "test": 2.931673311309, "singl": 0.951833538118, "them": 0.2825499807279, "word": 0.585861082385, "anyway": 3.1460689543299996, "simpl": 3.66966386817, "whi": 2.36137686094, "sys": 13.79995018332, "printmsgprintmsgfil": 13.79995018332, "explain": 0.955700427358, "execut": 4.02427302932, "order": 0.6604211423790001, "due": 0.21341214386399998, "found": 0.323523372144, "given": 0.303255810831, "desktop": 12.32413021974, "hello": 3.7948280321199994, "abl": 1.19860796495, "tutori": 12.2559454665, "target": 1.1690639496200002, "will": 2.6362249538950002, "associ": 0.28240501535100004, "overview": 2.54006626224, "open": 0.439182076058, "actual": 0.628514181648, "syspath": 13.79995018332, "special": 0.39755992860100003, "display": 1.07655944206, "next": 0.804327370998, "below": 0.813626591936, "distribut": 12.09375669756, "success": 0.8329632377759999, "our": 6.003474499274001, "reflect": 0.85201207065, "exist": 0.38165779408699996, "final": 0.292733863948, "fix": 1.48944573451, "point": 0.46206471806599997, "num": 0.010709673443498002, "steptool": 6.89997509166, "messag": 3.2058170140400004, "level": 1.510386569829, "exampl": 1.2260480249969998, "twine": 5.62951254607, "has": 0.0854478897096, "generat": 1.438364683472, "softwar": 4.65698192666, "take": 0.130691962197, "termin": 6.3274203912800004, "previous": 0.713205920126, "now": 0.44727883506300004, "tri": 1.23518305832, "rais": 0.6797577544760001, "name": 1.2640311629959002, "code": 4.06805728791, "prompt": 1.4916828719100002, "format": 3.7148530074919996, "than": 0.1290434488728, "sure": 2.0086865552, "possibl": 0.348805474891, "output": 2.03822657827, "issu": 1.456396175736, "also": 0.0146571578, "tiresom": 11.602725606, "reason": 0.544301552962, "everyth": 3.14541180634, "cmdtermin": 6.89997509166, "not": 0.093314478045, "supplement": 1.96550115853, "encount": 1.4206391000999998, "print": 5.96536244835, "the": 0.0, "altern": 0.760359972282, "secondfilepi": 6.89997509166, "thrown": 2.4940183301400003, "past": 0.7016234157610001, "projectfold": 6.89997509166, "shown": 3.05570874297, "printmsgfil": 20.69992527498, "which": 0.01553524153629, "then": 0.24910159569269996, "index": 3.89093865824, "they": 0.1189079790704, "anoth": 0.7673781699119999, "instal": 25.300981170100002, "case": 0.395406268889, "let": 4.995210269119999, "pypi": 48.299825641620004, "variabl": 6.506169201600001, "manual": 8.18007769364, "def": 4.40470565484, "section": 0.755387177948, "away": 0.615957541869, "what": 0.225887296827, "ensur": 1.22751130026, "setuppi": 6.89997509166, "alreadi": 0.670478380747, "other": 0.01974949583952, "introduct": 1.02276465794, "one": 0.025021406582, "show": 0.473365532026, "two": 0.0136988443582, "either": 0.459327638815, "window": 5.306902572870001, "got": 1.2863908849299999, "see": 0.240921585492, "such": 0.776047711478, "becaus": 0.418029476475, "sever": 0.06991112039689999, "those": 0.35709878174599996, "transfer": 1.00264953547, "still": 0.17112222142900002, "like": 0.139053576545, "implement": 1.27437940907, "some": 0.1978675453225, "sourc": 0.529218310751, "should": 2.037679507032, "add": 1.52875583713, "except": 0.54202451213, "locat": 6.091063818736, "built": 0.690379535065, "process": 0.527829199025, "append": 8.019206667539999, "import": 7.613275203716, "file": 62.38525669980999, "content": 2.52947831908, "repositori": 22.83657454182, "receiv": 0.266574424922, "desktopprintmsg": 6.89997509166, "use": 0.4673283157056, "straightforward": 3.3234248225200003, "languag": 0.8306818244059999, "helper": 4.37424644735, "access": 1.883417648148, "ani": 0.6280417918300001, "question": 2.3709327870420003, "directori": 64.61970896016, "modul": 48.107969038220006, "result": 0.545515633524, "ubuntu": 12.54273286448, "initpi": 6.89997509166, "detail": 0.816187777173, "differ": 0.6369633639360001, "structur": 0.7217716751350001, "but": 0.1133466045033, "gad": 5.46787119451, "prepend": 6.676831540349999, "printmsgfunc": 13.79995018332, "environ": 1.2341974030299998, "server": 3.6394775921, "for": 0.0031499039539700006, "aliv": 2.0185946334200002, "brief": 1.22086960472, "java": 3.45396369421, "builtin": 6.89997509166, "all": 0.03420789629339999, "version": 2.0919391927769997, "with": 0.00359247514017, "program": 0.7037855787649999, "unfortun": 2.29918950399, "there": 0.2004894646275, "are": 0.294674735827, "includ": 0.0188846813905, "solv": 3.9673009540800006, "command": 3.9236529630000003, "current": 0.8539056556900001, "that": 0.07157067083351999, "sort": 1.64639361896, "both": 0.050842533389300004, "call": 0.5891649700392, "more": 0.017024931599999998, "and": 0.0017637239777808, "list": 1.8590745690360002, "type": 0.707101485387, "valid": 1.8889232176800002, "these": 0.5722689552064, "prepar": 2.6638268371860003, "legaci": 1.77489566318, "later": 0.0829654259878, "script": 6.348407533379999, "befor": 0.0956377718795, "librari": 18.749389637916998, "again": 0.411340231612, "download": 8.0524518957, "platform": 3.6597846778400003, "avail": 1.094909172578, "linux": 8.35079117722, "littl": 0.438213989466, "give": 0.311392552224, "make": 0.44098594693739995, "set": 0.171496011289, "way": 0.39618301987000004, "proper": 1.2056118389200001, "same": 0.448238598416, "folder": 25.646345158150005, "search": 5.899341270449999, "step": 2.07909011396, "upload": 21.7722191003, "error": 1.7985854343, "packag": 22.635342941090006, "outsideprojectpi": 27.59990036664, "move": 0.255615859253, "ask": 0.776797209847, "comment": 1.11826753454, "conda": 13.79995018332, "accept": 0.552585882007, "sequenc": 1.8035444374, "rather": 0.885429951078, "machin": 1.39235958062, "into": 0.149128632287, "wheel": 6.57809904822, "must": 0.653383947388, "might": 0.7683410765340001, "insid": 6.04687834878, "requir": 1.272760532025, "from": 0.0039693791820619995, "figur": 10.652581682400001, "direct": 0.200705689496, "insideprojectpi": 13.79995018332, "first": 0.0075872898121599995, "everi": 0.391485427421, "copi": 6.7241882372, "implicit": 3.0538248303900004, "when": 0.0411099777168, "have": 0.0295700046824, "interpret": 3.5035444320000004, "properti": 0.953573289192, "main": 0.451143081176, "host": 0.996658931332, "find": 1.095562660576, "line": 1.048291843356, "kdnugget": 6.89997509166, "cover": 0.526975319156, "user": 2.04258810688, "own": 0.492585232263}, "logidf": {"after": 0.020490694648099998, "base": 0.13652330228700002, "can": 0.162341096394, "hold": 0.503879117196, "this": 0.0037864490525, "here": 0.8850381883700001, "project": 0.561601885907, "pip": 4.91038987911, "veri": 0.230159793238, "new": 0.0177299468511, "sitepackag": 6.89997509166, "would": 0.0796176279647, "onlin": 0.957503854357, "number": 0.0966085784186, "follow": 0.045356911094199995, "togeth": 0.458032237308, "contain": 0.468845318236, "care": 0.9139943029109999, "about": 0.0628434774746, "function": 0.914465741594, "contributor": 2.67222935363, "buri": 1.6353437827700001, "python": 4.03065674296, "just": 0.289531434109, "well": 0.0635144383156, "work": 0.109034567273, "simpli": 0.923941491586, "path": 1.5351679838499999, "statement": 1.2303097091500002, "onc": 0.403765872355, "printmsgfilepi": 6.89997509166, "know": 0.952919694398, "wherev": 3.08501379908, "automat": 1.9150850473199998, "where": 0.0649921387457, "save": 1.03598886547, "creat": 0.222576818514, "printmsg": 6.89997509166, "ahm": 3.4129823498400005, "multipl": 1.01092401812, "run": 0.442714975539, "how": 0.47156695693000006, "test": 0.977224437103, "singl": 0.475916769059, "them": 0.0941833269093, "word": 0.585861082385, "anyway": 3.1460689543299996, "simpl": 1.2232212893899999, "whi": 1.18068843047, "sys": 6.89997509166, "printmsgprintmsgfil": 6.89997509166, "explain": 0.955700427358, "execut": 0.804854605864, "order": 0.22014038079300002, "due": 0.21341214386399998, "found": 0.107841124048, "given": 0.303255810831, "desktop": 4.10804340658, "hello": 3.7948280321199994, "abl": 0.599303982475, "tutori": 4.0853151555, "target": 1.1690639496200002, "will": 0.202786534915, "associ": 0.28240501535100004, "overview": 2.54006626224, "open": 0.219591038029, "actual": 0.628514181648, "syspath": 6.89997509166, "special": 0.39755992860100003, "display": 1.07655944206, "next": 0.402163685499, "below": 0.813626591936, "distribut": 1.00781305813, "success": 0.27765441259199997, "our": 0.8576392141820001, "reflect": 0.85201207065, "exist": 0.38165779408699996, "final": 0.292733863948, "fix": 1.48944573451, "point": 0.23103235903299998, "num": 0.00031499039539700004, "steptool": 6.89997509166, "messag": 1.6029085070200002, "level": 0.503462189943, "exampl": 0.40868267499899996, "twine": 5.62951254607, "has": 0.0427239448548, "generat": 0.719182341736, "softwar": 2.32849096333, "take": 0.130691962197, "termin": 1.5818550978200001, "previous": 0.356602960063, "now": 0.149092945021, "tri": 0.61759152916, "rais": 0.6797577544760001, "name": 0.09723316638430002, "code": 1.35601909597, "prompt": 1.4916828719100002, "format": 0.9287132518729999, "than": 0.0322608622182, "sure": 2.0086865552, "possibl": 0.348805474891, "output": 2.03822657827, "issu": 0.364099043934, "also": 0.0146571578, "tiresom": 5.801362803, "reason": 0.544301552962, "everyth": 1.57270590317, "cmdtermin": 6.89997509166, "not": 0.0155524130075, "supplement": 1.96550115853, "encount": 1.4206391000999998, "print": 1.19307248967, "the": 0.0, "altern": 0.760359972282, "secondfilepi": 6.89997509166, "thrown": 2.4940183301400003, "past": 0.7016234157610001, "projectfold": 6.89997509166, "shown": 1.01856958099, "printmsgfil": 6.89997509166, "which": 0.00517841384543, "then": 0.08303386523089999, "index": 1.94546932912, "they": 0.0297269947676, "anoth": 0.127896361652, "instal": 1.3316305879, "case": 0.395406268889, "let": 1.2488025672799998, "pypi": 6.89997509166, "variabl": 2.1687230672, "manual": 2.04501942341, "def": 4.40470565484, "section": 0.755387177948, "away": 0.615957541869, "what": 0.225887296827, "ensur": 1.22751130026, "setuppi": 6.89997509166, "alreadi": 0.670478380747, "other": 0.00987474791976, "introduct": 1.02276465794, "one": 0.0062553516455, "show": 0.236682766013, "two": 0.0136988443582, "either": 0.459327638815, "window": 1.7689675242900003, "got": 1.2863908849299999, "see": 0.240921585492, "such": 0.059695977806, "becaus": 0.139343158825, "sever": 0.06991112039689999, "those": 0.17854939087299998, "transfer": 1.00264953547, "still": 0.17112222142900002, "like": 0.139053576545, "implement": 1.27437940907, "some": 0.0395735090645, "sourc": 0.529218310751, "should": 0.509419876758, "add": 1.52875583713, "except": 0.54202451213, "locat": 0.46854337067199997, "built": 0.690379535065, "process": 0.527829199025, "append": 4.0096033337699994, "import": 0.292818277066, "file": 1.32734588723, "content": 1.26473915954, "repositori": 3.8060957569699996, "receiv": 0.266574424922, "desktopprintmsg": 6.89997509166, "use": 0.0292080197316, "straightforward": 3.3234248225200003, "languag": 0.8306818244059999, "helper": 4.37424644735, "access": 0.627805882716, "ani": 0.125608358366, "question": 0.790310929014, "directori": 2.6924878733399997, "modul": 2.82988053166, "result": 0.136378908381, "ubuntu": 6.27136643224, "initpi": 6.89997509166, "detail": 0.816187777173, "differ": 0.212321121312, "structur": 0.7217716751350001, "but": 0.0161923720719, "gad": 5.46787119451, "prepend": 6.676831540349999, "printmsgfunc": 6.89997509166, "environ": 1.2341974030299998, "server": 3.6394775921, "for": 0.00031499039539700004, "aliv": 2.0185946334200002, "brief": 1.22086960472, "java": 3.45396369421, "builtin": 6.89997509166, "all": 0.011402632097799998, "version": 0.697313064259, "with": 0.00119749171339, "program": 0.7037855787649999, "unfortun": 2.29918950399, "there": 0.0400978929255, "are": 0.0294674735827, "includ": 0.0188846813905, "solv": 1.9836504770400003, "command": 0.9809132407500001, "current": 0.42695282784500005, "that": 0.00397614837964, "sort": 1.64639361896, "both": 0.050842533389300004, "call": 0.0654627744488, "more": 0.017024931599999998, "and": 6.29901420636e-05, "list": 0.309845761506, "type": 0.707101485387, "valid": 1.8889232176800002, "these": 0.0715336194008, "prepar": 0.8879422790620001, "legaci": 1.77489566318, "later": 0.0829654259878, "script": 2.1161358444599996, "befor": 0.0956377718795, "librari": 0.986809980943, "again": 0.411340231612, "download": 2.6841506319, "platform": 1.8298923389200001, "avail": 0.547454586289, "linux": 4.17539558861, "littl": 0.438213989466, "give": 0.311392552224, "make": 0.07349765782289999, "set": 0.171496011289, "way": 0.19809150993500002, "proper": 1.2056118389200001, "same": 0.112059649604, "folder": 5.129269031630001, "search": 1.1798682540899998, "step": 1.03954505698, "upload": 4.35444382006, "error": 1.7985854343, "packag": 2.0577584491900005, "outsideprojectpi": 6.89997509166, "move": 0.255615859253, "ask": 0.776797209847, "comment": 1.11826753454, "conda": 6.89997509166, "accept": 0.552585882007, "sequenc": 1.8035444374, "rather": 0.442714975539, "machin": 1.39235958062, "into": 0.0149128632287, "wheel": 2.1926996827400003, "must": 0.653383947388, "might": 0.7683410765340001, "insid": 1.00781305813, "requir": 0.424253510675, "from": 0.000567054168866, "figur": 0.7101721121600001, "direct": 0.200705689496, "insideprojectpi": 6.89997509166, "first": 0.0075872898121599995, "everi": 0.391485427421, "copi": 1.34483764744, "implicit": 3.0538248303900004, "when": 0.0205549888584, "have": 0.0147850023412, "interpret": 1.1678481440000001, "properti": 0.953573289192, "main": 0.225571540588, "host": 0.996658931332, "find": 0.547781330288, "line": 0.349430614452, "kdnugget": 6.89997509166, "cover": 0.526975319156, "user": 2.04258810688, "own": 0.164195077421}, "freq": {"after": 3, "base": 1, "can": 8, "hold": 1, "this": 12, "here": 1, "project": 28, "pip": 2, "veri": 1, "new": 1, "sitepackag": 8, "would": 1, "onlin": 2, "number": 2, "follow": 7, "togeth": 1, "contain": 3, "care": 1, "about": 3, "function": 7, "contributor": 1, "buri": 1, "python": 31, "just": 2, "well": 1, "work": 4, "simpli": 1, "path": 6, "statement": 3, "onc": 3, "printmsgfilepi": 3, "know": 3, "wherev": 1, "automat": 3, "where": 1, "save": 1, "creat": 6, "printmsg": 7, "ahm": 1, "multipl": 1, "run": 4, "how": 11, "test": 3, "singl": 2, "them": 3, "word": 1, "anyway": 1, "simpl": 3, "whi": 2, "sys": 2, "printmsgprintmsgfil": 2, "explain": 1, "execut": 5, "order": 3, "due": 1, "found": 3, "given": 1, "desktop": 3, "hello": 1, "abl": 2, "tutori": 3, "target": 1, "will": 13, "associ": 1, "overview": 1, "open": 2, "actual": 1, "syspath": 2, "special": 1, "display": 1, "next": 2, "below": 1, "distribut": 12, "success": 3, "our": 7, "reflect": 1, "exist": 1, "final": 1, "fix": 1, "point": 2, "num": 34, "steptool": 1, "messag": 2, "level": 3, "exampl": 3, "twine": 1, "has": 2, "generat": 2, "softwar": 2, "take": 1, "termin": 4, "previous": 2, "now": 3, "tri": 2, "rais": 1, "name": 13, "code": 3, "prompt": 1, "format": 4, "than": 4, "sure": 1, "possibl": 1, "output": 1, "issu": 4, "also": 1, "tiresom": 2, "reason": 1, "everyth": 2, "cmdtermin": 1, "not": 6, "supplement": 1, "encount": 1, "print": 5, "the": 129, "altern": 1, "secondfilepi": 1, "thrown": 1, "past": 1, "projectfold": 1, "shown": 3, "printmsgfil": 3, "which": 3, "then": 3, "index": 2, "they": 4, "anoth": 6, "instal": 19, "case": 1, "let": 4, "pypi": 7, "variabl": 3, "manual": 4, "def": 1, "section": 1, "away": 1, "what": 1, "ensur": 1, "setuppi": 1, "alreadi": 1, "other": 2, "introduct": 1, "one": 4, "show": 2, "two": 1, "either": 1, "window": 3, "got": 1, "see": 1, "such": 13, "becaus": 3, "sever": 1, "those": 2, "transfer": 1, "still": 1, "like": 1, "implement": 1, "some": 5, "sourc": 1, "should": 4, "add": 1, "except": 1, "locat": 13, "built": 1, "process": 1, "append": 2, "import": 26, "file": 47, "content": 2, "repositori": 6, "receiv": 1, "desktopprintmsg": 1, "use": 16, "straightforward": 1, "languag": 1, "helper": 1, "access": 3, "ani": 5, "question": 3, "directori": 24, "modul": 17, "result": 4, "ubuntu": 2, "initpi": 1, "detail": 1, "differ": 3, "structur": 1, "but": 7, "gad": 1, "prepend": 1, "printmsgfunc": 2, "environ": 1, "server": 1, "for": 10, "aliv": 1, "brief": 1, "java": 1, "builtin": 1, "all": 3, "version": 3, "with": 3, "program": 1, "unfortun": 1, "there": 5, "are": 10, "includ": 1, "solv": 2, "command": 4, "current": 2, "that": 18, "sort": 1, "both": 1, "call": 9, "more": 1, "and": 28, "list": 6, "type": 1, "valid": 1, "these": 8, "prepar": 3, "legaci": 1, "later": 1, "script": 3, "befor": 1, "librari": 19, "again": 1, "download": 3, "platform": 2, "avail": 2, "linux": 2, "littl": 1, "give": 1, "make": 6, "set": 1, "way": 2, "proper": 1, "same": 4, "folder": 5, "search": 5, "step": 2, "upload": 5, "error": 1, "packag": 11, "outsideprojectpi": 4, "move": 1, "ask": 1, "comment": 1, "conda": 2, "accept": 1, "sequenc": 1, "rather": 2, "machin": 1, "into": 10, "wheel": 3, "must": 1, "might": 1, "insid": 6, "requir": 3, "from": 7, "figur": 15, "direct": 1, "insideprojectpi": 2, "first": 1, "everi": 1, "copi": 5, "implicit": 1, "when": 2, "have": 2, "interpret": 3, "properti": 1, "main": 2, "host": 1, "find": 2, "line": 3, "kdnugget": 1, "cover": 1, "user": 1, "own": 3}, "idf": {"after": 1.02070207021, "base": 1.14628158845, "can": 1.17626139142, "hold": 1.6551292744, "this": 1.00379362671, "here": 2.42307692308, "project": 1.7534791252500002, "pip": 135.692307692, "veri": 1.25880114177, "new": 1.0178880554, "sitepackag": 992.25, "would": 1.0828729281799998, "onlin": 2.6051854282900004, "number": 1.10142916609, "follow": 1.04640126549, "togeth": 1.58095996813, "contain": 1.59814777532, "care": 2.49426551453, "about": 1.06486015159, "function": 2.495441685, "contributor": 14.4721969006, "buri": 5.13122171946, "python": 56.2978723404, "just": 1.33580143037, "well": 1.0655748708, "work": 1.11520089913, "simpli": 2.5192002538900002, "path": 4.6421052631599995, "statement": 3.42228928648, "onc": 1.4974533106999999, "printmsgfilepi": 992.25, "know": 2.59327017315, "wherev": 21.867768595, "automat": 6.787516032490001, "where": 1.06715063521, "save": 2.8178913737999998, "creat": 1.2492917847, "printmsg": 992.25, "ahm": 30.3556405354, "multipl": 2.74813917258, "run": 1.55692850838, "how": 1.60250328051, "test": 2.65707112971, "singl": 1.60948905109, "them": 1.09876115994, "word": 1.7965372864099998, "anyway": 23.244509516799997, "simpl": 3.3981164383599998, "whi": 3.2566153846200003, "sys": 992.25, "printmsgprintmsgfil": 992.25, "explain": 2.60049140049, "execut": 2.2363713199, "order": 1.24625166811, "due": 1.23789473684, "found": 1.11387076405, "given": 1.35426085473, "desktop": 60.827586206899994, "hello": 44.4705882353, "abl": 1.8208510150200001, "tutori": 59.4606741573, "target": 3.2189781021900004, "will": 1.22481098596, "associ": 1.3263157894700002, "overview": 12.6805111821, "open": 1.24556723678, "actual": 1.87482286254, "syspath": 992.25, "special": 1.4881889763799998, "display": 2.93456561922, "next": 1.4950560316400001, "below": 2.25607503197, "distribut": 2.7396031061299997, "success": 1.32002993265, "our": 2.35758835759, "reflect": 2.3443591258099996, "exist": 1.4647107666799999, "final": 1.34008609775, "fix": 4.4346368715099995, "point": 1.25990000794, "num": 1.00031504001, "steptool": 992.25, "messag": 4.96745932416, "level": 1.6544393497299998, "exampl": 1.50483412322, "twine": 278.526315789, "has": 1.0436497502, "generat": 2.05275407292, "softwar": 10.2624434389, "take": 1.13961668222, "termin": 4.86397058824, "previous": 1.42846859816, "now": 1.160780873, "tri": 1.8544562551099997, "rais": 1.9733996271, "name": 1.10211732037, "code": 3.8807137619199996, "prompt": 4.44456886898, "format": 2.53125, "than": 1.03278688525, "sure": 7.453521126760001, "possibl": 1.4173734488, "output": 7.676982591880001, "issu": 1.43921675279, "also": 1.01476510067, "tiresom": 330.75, "reason": 1.72340425532, "everyth": 4.81967213115, "cmdtermin": 992.25, "not": 1.01567398119, "supplement": 7.13848920863, "encount": 4.13976531943, "print": 3.29719626168, "the": 1.0, "altern": 2.1390460792200003, "secondfilepi": 992.25, "thrown": 12.109839816900001, "past": 2.01702452039, "projectfold": 992.25, "shown": 2.76923076923, "printmsgfil": 992.25, "which": 1.005191845, "then": 1.08657860516, "index": 6.9969149405, "they": 1.03017325287, "anoth": 1.13643521832, "instal": 3.78721374046, "case": 1.48498737256, "let": 3.48616600791, "pypi": 992.25, "variabl": 8.747107438019999, "manual": 7.72930866602, "def": 81.83505154640001, "section": 2.1284354471099998, "away": 1.85142857143, "what": 1.25343439128, "ensur": 3.4127257093700005, "setuppi": 992.25, "alreadi": 1.9551724137900002, "other": 1.00992366412, "introduct": 2.7808723068799996, "one": 1.00627495722, "show": 1.26703910615, "two": 1.01379310345, "either": 1.5830092731099998, "window": 5.86479497599, "got": 3.61969904241, "see": 1.27242125511, "such": 1.06151377374, "becaus": 1.1495184997499999, "sever": 1.07241286139, "those": 1.19548192771, "transfer": 2.72549356223, "still": 1.1866357724799999, "like": 1.14918566775, "implement": 3.57648118946, "some": 1.04036697248, "sourc": 1.69760479042, "should": 1.6643254009900001, "add": 4.61243463103, "except": 1.71948445792, "locat": 1.59766529134, "built": 1.99447236181, "process": 1.69524826482, "append": 55.125, "import": 1.3401992233700002, "file": 3.7710213776699995, "content": 3.5421686747, "repositori": 44.974504249300004, "receiv": 1.3054847463200001, "desktopprintmsg": 992.25, "use": 1.0296387573799999, "straightforward": 27.7552447552, "languag": 2.29488291414, "helper": 79.38, "access": 1.8734953976900002, "ani": 1.13383802314, "question": 2.20408163265, "directori": 14.768372093, "modul": 16.9434364995, "result": 1.14611608432, "ubuntu": 529.2, "initpi": 992.25, "detail": 2.26186066391, "differ": 1.23654490225, "structur": 2.0580762250499998, "but": 1.01632417899, "gad": 236.955223881, "prepend": 793.8, "printmsgfunc": 992.25, "environ": 3.43561999567, "server": 38.071942446, "for": 1.00031504001, "aliv": 7.527738264580001, "brief": 3.39013452915, "java": 31.625498008, "builtin": 992.25, "all": 1.01146788991, "version": 2.0083491461099996, "with": 1.0011982089899998, "program": 2.02139037433, "unfortun": 9.966101694919999, "there": 1.04091266719, "are": 1.02990593578, "includ": 1.0190641247799999, "solv": 7.26923076923, "command": 2.66689064337, "current": 1.5325803649, "that": 1.00398406375, "sort": 5.188235294119999, "both": 1.05215720061, "call": 1.0676529926, "more": 1.0171706817, "and": 1.00006299213, "list": 1.36321483771, "type": 2.0281042411900003, "valid": 6.61224489796, "these": 1.07415426252, "prepar": 2.43012398592, "legaci": 5.89966555184, "later": 1.08650424309, "script": 8.299006795610001, "befor": 1.10036041031, "librari": 2.68266306185, "again": 1.50883862384, "download": 14.6457564576, "platform": 6.2332155476999995, "avail": 1.7288467821, "linux": 65.0655737705, "littl": 1.5499365420299998, "give": 1.3653250774, "make": 1.0762660158600001, "set": 1.18707940781, "way": 1.2190739461, "proper": 3.3388012618299996, "same": 1.11857958148, "folder": 168.893617021, "search": 3.2539454806299997, "step": 2.8279301745599996, "upload": 77.82352941180001, "error": 6.04109589041, "packag": 7.828402366860001, "outsideprojectpi": 992.25, "move": 1.29125660838, "ask": 2.1744966443, "comment": 3.05954904606, "conda": 992.25, "accept": 1.7377408056, "sequenc": 6.07112810707, "rather": 1.55692850838, "machin": 4.02433460076, "into": 1.01502461479, "wheel": 8.95936794582, "must": 1.9220338983099996, "might": 2.1561863370900003, "insid": 2.7396031061299997, "requir": 1.52844902282, "from": 1.00056721497, "figur": 2.0343413634, "direct": 1.22226499346, "insideprojectpi": 992.25, "first": 1.00761614623, "everi": 1.47917637194, "copi": 3.8375634517800004, "implicit": 21.1962616822, "when": 1.02076769755, "have": 1.0148948411399998, "interpret": 3.2150668286799995, "properti": 2.5949656750599996, "main": 1.25303867403, "host": 2.7092150170599996, "find": 1.7294117647099998, "line": 1.4182597820299998, "kdnugget": 992.25, "cover": 1.69380134429, "user": 7.71053909665, "own": 1.17844418052}}, "html": "<!DOCTYPE html>\n\n<html lang=\"en-US\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head profile=\"http://gmpg.org/xfn/11\">\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n<title>  Packaging and Distributing Your Python Project to PyPI for Installation Using pip</title>\n<link href=\"/wp-content/themes/kdn17/images/favicon.ico\" rel=\"shortcut icon\"/>\n<link href=\"/wp-content/themes/kdn17/style.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"/wp-content/themes/kdn17/js/jquery-1.9.1.min.js\" type=\"text/javascript\"></script>\n<script src=\"/aps/kda_all.js\" type=\"text/javascript\"></script>\n<link href=\"/feed/\" rel=\"alternate\" title=\"KDnuggets: Analytics, Big Data, Data Mining and Data Science Feed\" type=\"application/rss+xml\"/>\n<link href=\"//s.w.org\" rel=\"dns-prefetch\"/>\n<link href=\"https://www.kdnuggets.com/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/comments/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/2018/06/packaging-distributing-python-project-pypi-pip.html/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Packaging and Distributing Your Python Project to PyPI for Installation Using pip Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-json/\" rel=\"https://api.w.org/\"/>\n<link href=\"https://www.kdnuggets.com/xmlrpc.php?rsd\" rel=\"EditURI\" title=\"RSD\" type=\"application/rsd+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-includes/wlwmanifest.xml\" rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\"/>\n<link href=\"https://www.kdnuggets.com/2018/06/oreilly-special-kdnuggets-offer-strata-ny.html\" rel=\"prev\" title=\"Special KDnuggets offer for Strata NY\"/>\n<link href=\"https://www.kdnuggets.com/2018/06/top-news-week-0604-0610.html\" rel=\"next\" title=\"Top Stories, Jun 4-10: Did Python declare victory over R?; The Keras 4 Step Workflow\"/>\n<meta content=\"WordPress 4.9.10\" name=\"generator\">\n<link href=\"https://www.kdnuggets.com/2018/06/packaging-distributing-python-project-pypi-pip.html\" rel=\"canonical\"/>\n<link href=\"https://www.kdnuggets.com/?p=81767\" rel=\"shortlink\"/>\n<link href=\"https://www.kdnuggets.com/2018/06/packaging-distributing-python-project-pypi-pip.html\" rel=\"canonical\"/>\n<!-- BEGIN ExactMetrics v5.3.7 Universal Analytics - https://exactmetrics.com/ -->\n<script>\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-361129-1', 'auto');\n  ga('send', 'pageview');\n</script>\n<!-- END ExactMetrics Universal Analytics -->\n</meta></head>\n<body class=\"post-template-default single single-post postid-81767 single-format-standard\">\n<div class=\"main_wrapper\"><!-- publ: 11-Jun, 2018  -->\n<div id=\"wrapper\">\n<div id=\"header\">\n<div id=\"header_log\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<h1>KDnuggets</h1>\n<div class=\"text-container\">\n            \u00a0\u00a0<a href=\"/news/subscribe.html\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a> \u00a0|\n <a href=\"https://twitter.com/kdnuggets\" target=\"_blank\"><img alt=\"Twitter\" height=\"48\" src=\"/images/tw_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n <a href=\"https://www.facebook.com/kdnuggets\" target=\"_blank\"><img alt=\"Facebook\" height=\"48\" src=\"/images/fb_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n<a href=\"https://www.linkedin.com/groups/54257/\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"48\" src=\"/images/in_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \n\u00a0|\u00a0 <a href=\"/contact.html\"><b>Contact</b></a>\n</div>\n</div>\n<div class=\"search\">\n<form action=\"/\" id=\"searchform\" method=\"get\">\n<input id=\"s\" name=\"s\" placeholder=\"search KDnuggets\" type=\"text\" value=\"\"/>\n<input type=\"submit\" value=\"Search\"/></form>\n</div>\n<div href=\"#\" id=\"pull\">\n<img class=\"menu\" src=\"/images/menu-30.png\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<img class=\"search-icon\" src=\"/images/search-icon.png\">\n</img></img></div>\n<div id=\"pull-menu\">\n<div class=\"navigation\"><ul class=\"menu\" id=\"menu-menu\"><li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-1070\" id=\"menu-item-1070\"><a href=\"/software/index.html\" title=\"Data Science Software\">SOFTWARE</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13756\" id=\"menu-item-13756\"><a href=\"/news/index.html\" title=\"News\">News/Blog</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-46286\" id=\"menu-item-46286\"><a href=\"/news/top-stories.html\">Top stories</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-42152\" id=\"menu-item-42152\"><a href=\"https://www.kdnuggets.com/opinions/index.html\" title=\"Opinions\">Opinions</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-46415\" id=\"menu-item-46415\"><a href=\"https://www.kdnuggets.com/tutorials/index.html\">Tutorials</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13364\" id=\"menu-item-13364\"><a href=\"/jobs/index.html\" title=\"Jobs in Analytics, Data Science\">JOBS</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-63505\" id=\"menu-item-63505\"><a href=\"https://www.kdnuggets.com/companies/index.html\">Companies</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13366\" id=\"menu-item-13366\"><a href=\"/courses/index.html\">Courses</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-1499\" id=\"menu-item-1499\"><a href=\"https://www.kdnuggets.com/datasets/index.html\">Datasets</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-14286\" id=\"menu-item-14286\"><a href=\"https://www.kdnuggets.com/education/index.html\" title=\"Education in Analytics, Big Data, Data Science\">EDUCATION</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-51558\" id=\"menu-item-51558\"><a href=\"https://www.kdnuggets.com/education/analytics-data-mining-certificates.html\" title=\"Certificates in Analytics, Big Data, Data Science\">Certificates</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-14752\" id=\"menu-item-14752\"><a href=\"/meetings/index.html\">Meetings</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13721\" id=\"menu-item-13721\"><a href=\"/webcasts/index.html\" title=\"Webcasts and Webinars\">Webinars</a></li>\n</ul></div></div>\n</div> <!--#header end-->\n<div id=\"spacer\">\n         \u00a0\n      </div>\n<div id=\"content_wrapper\">\n<div id=\"ad_wrapper\">\n<script type=\"text/javascript\">\n\tjQuery(function() {\n   \t    var pull        = $('#pull');\n            menu        = $('#header .navigation ul');\n            menuImage = $('#header img.menu');\n            mobileMenu        = $('#pull-menu-mobile');\n            search = $('img.search-icon');\n            searchBar = $('div.search');\n            searchClick = false;\n            search.on('click', function() {\n                  searchBar.slideToggle();\n                  searchClick = true;\n            });  \n     \t    $(menuImage).on('click', function(e) {\n\t        //e.preventDefault();\n                if (!searchClick) {\n                  menu.slideToggle();\n                }\n                searchClick = false;\n\t    });\n           /* pullMobile.on('click', function(e) {\n              e.preventDefault();\n                if (!searchClick) {\n                  mobileMenu.slideToggle();\n                }\n                searchClick = false;\n\t    });*/\n            \n\t});\n\tkpath = '/'; kda_top(); kda_sid_init(); kda_sid_n=3;\n\t</script>\n</div> <div class=\"breadcumb\">\n<br/>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2018/index.html\">2018</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/06/index.html\">Jun</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/06/tutorials.html\">Tutorials, Overviews</a> \u00bb Packaging and Distributing Your Python Project to PyPI for Installation Using pip (\u00a0<a href=\"/2018/n23.html\">18:n23</a>\u00a0)    </div>\n<div class=\"single\" id=\"content\">\n<div id=\"post-header\">\n<h1 id=\"title\">Packaging and Distributing Your Python Project to PyPI for Installation Using pip</h1>\n<div class=\"pagi\">\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2018/06/oreilly-special-kdnuggets-offer-strata-ny.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"> <strong>Previous post</strong></img></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2018/06/top-news-week-0604-0610.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/>\u00a0<br/>\u00a0\n    <div class=\"addthis_native_toolbox\"></div>\n</div>\n<div class=\"tag-data\">Tags: <a href=\"https://www.kdnuggets.com/tag/distribution\" rel=\"tag\">Distribution</a>, <a href=\"https://www.kdnuggets.com/tag/python\" rel=\"tag\">Python</a></div>\n<br/>\n<p class=\"excerpt\">\n     This tutorial will explain the steps required to package your Python projects, distribute them in distribution formats using steptools, upload them into the Python Package Index (PyPI) repository using twine, and finally installation using Python installers such as pip and conda.\n  </p>\n</div>\n<div id=\"post-header-ad\">\n<script type=\"text/javascript\">kda_sid_write(1); kda_sid_n=2;</script>\n</div>\n<hr class=\"grey-line\"/><br/>\n<div class=\"post\" id=\"post-\">\n<div class=\"author-link\"><b>By <a href=\"https://www.kdnuggets.com/author/ahmed-gad\" rel=\"author\" title=\"Posts by Ahmed Gad\">Ahmed Gad</a>, KDnuggets Contributor.</b></div>\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"/2018/06/packaging-distributing-python-project-pypi-pip.html?page=2#comments\">comments</a></div>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://media.licdn.com/media/gcrc/dms/image/C4E12AQHtqX8jbADS0A/article-cover_image-shrink_720_1280/0?e=2127686400&amp;v=beta&amp;t=yRUiucepzDI9bD1ovdGysIp-EW70Y2tKOJPSz545CvI\" width=\"90%\"><br>\n\u00a0</br></img></p>\n<h3>Introduction</h3>\n<p>\u00a0<br>\nYou might worked with several languages such as Java, C++, and Python and created a number of projects but unfortunately these projects are buried and no one knows about. Why not making these projects alive by making them available online? This tutorial will explain the steps required to package your Python projects, distribute them in distribution formats using steptools, upload them into the Python Package Index (PyPI) repository using twine, and finally installation using Python installers such as pip and conda.</br></p>\n<p>The platform used in this tutorial is Linux Ubuntu 18.04 with Python 3.6.5. But you can still use other platforms such as Windows with little or no difference in the commands used.</p>\n<p>This tutorial has the following steps:</p>\n<p>1. Creating a Simple Python Project.</p>\n<p>2.\u00a0How Python Locates Libraries?</p>\n<p>3.\u00a0Manual Installation by Copying Project Files to\u00a0<strong>site-packages.</strong></p>\n<p>4.\u00a0How Python Installers Locate Libraries?</p>\n<p>5.\u00a0Preparing the Package and its Files (<strong>__init__.py</strong>\u00a0and\u00a0<strong>setup.py</strong>).</p>\n<p>6.\u00a0Distributing the Package.</p>\n<p>7.\u00a0Uploading the Distribution Files Online to Test PyPI.</p>\n<p>8.\u00a0Installing the Distributed Package from Test PyPI.</p>\n<p>9.\u00a0Importing and Using the Installed Package.</p>\n<p>10. Using PyPI rather than Test PyPI.</p>\n<p>\u00a0</p>\n<h3>1. Creating a Simple Python Project</h3>\n<p>\u00a0<br>\nLet us create a very simple project and distribute it. To be able to package and distribute any Python project, there must be an associated folder containing all of the required files for the project. The folder name will be later the project name.</br></p>\n<p>This project will have just a single level containing a single Python file. The project structure is as follows:</p>\n<p><img class=\"aligncenter\" data-media-urn=\"urn:li:digitalmediaAsset:C4E12AQGQxHmTM3_GDQ\" src=\"https://media.licdn.com/dms/image/C4E12AQGQxHmTM3_GDQ/article-inline_image-shrink_400_744/0?e=2127686400&amp;v=beta&amp;t=1pi9IRlXZIEOZJoz91omt6uxyObNc-ecduZf_o1AoAc\" width=\"250\"/></p>\n<p>The used project/folder name is\u00a0<strong>\u201cprintmsg\u201d</strong>\u00a0to reflect its use. That folder is saved into the Desktop. The Python file inside it is named\u00a0<strong>\u201cprint_msg_file.py\u201d</strong>. The Python file contains a function and a variable. The function is named\u00a0<strong>\u201cprint_msg_func\u201d</strong>\u00a0which will print a message once called. The variable is named \u201cversion\u201d which holds the version of the project.</p>\n<p>Here is the implementation inside the\u00a0<strong>\u201cprint_msg_file.py\u201d</strong>\u00a0file. The\u00a0<strong>\u201cprint_msg_func\u201d</strong>function prints a hello message when called. Due to the\u00a0<strong>if</strong>\u00a0statement, the file will automatically call the function once executed directly as the main program. But it will not if that file is imported into another file.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>version\u00a0=\u00a0\"1.0\"\u00a0\u00a0\r\n\u00a0\u00a0\r\ndef\u00a0print_msg_func():\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0print(\"Hello\u00a0Python\u00a0Packaging\")\u00a0\u00a0\r\n\u00a0\u00a0\r\nif\u00a0__name__\u00a0==\u00a0\"__main__\":\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0print_msg_func()\u00a0\u00a0\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Next is to execute that file to know that everything is running well such as Python being installed properly. A Python file is to be executed from either the Linux terminal or Windows Command Prompt by issuing the python command followed by the location of the file. Figure 1 shows how to run the Python file using both Windows and Ubuntu.</p>\n<p>\u00a0<br/>\n<strong>Figure 1</strong><br/>\n<img class=\"aligncenter\" data-media-urn=\"urn:li:digitalmediaAsset:C4E12AQHkuAg4tfAPRA\" src=\"https://media.licdn.com/dms/image/C4E12AQHkuAg4tfAPRA/article-inline_image-shrink_1500_2232/0?e=2127686400&amp;v=beta&amp;t=Z5r9qx715JLIDP3LO42lzhy_N7Ipq0EgKzCvKA_FX1E\" width=\"99%\"/><br/>\nThe CMD/terminal are opened in the\u00a0<strong>\u201cprintmsg\u201d</strong>\u00a0directory and its contents are displayed to ensure the target file\u00a0<strong>\u201cprint_msg_file.py\u201d</strong>\u00a0is already existing. Then the python command is issued to run the file.</p>\n<p>After making sure everything is working, it is possible to import that project into another Python file in order to be able to call its content. If a file to be imported into another, the legacy way for doing this is to create another file in the same directory of that file. For example, another Python file named\u00a0<strong>\u201csecond_file.py\u201d</strong>\u00a0is to import the project and call its function as follows:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>import\u00a0print_msg_file\u00a0\u00a0\r\nprint_msg_file.print_msg_func()\u00a0\u00a0\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>At first, the project is imported as in line 1. Then it is used to call its function in line 2. After opening the terminal and setting its current directory to the printmsg folder, the new file\u00a0<strong>\u201cinside_project.py\u201d</strong>\u00a0can be executed as in figure 2. The function got called successfully.</p>\n<p>\u00a0<br/>\n<strong>Figure 2</strong><br/>\n<img class=\"aligncenter\" data-media-urn=\"urn:li:digitalmediaAsset:C4E12AQF6z61TcVAFbA\" src=\"https://media.licdn.com/dms/image/C4E12AQF6z61TcVAFbA/article-inline_image-shrink_400_744/0?e=2127686400&amp;v=beta&amp;t=HTE8LfWrWifFiw1Eo5w79w4ht5gqMGZWMQiKmagEJfE\" width=\"99%\"/><br/>\nBecause the imported module is in the same directory of the script it is called from, the process is straightforward. Just type the name of the module in an import statement. There is an important question. What if the script calling the file is in a different directory than the module it would like to import? Let us try to create another Python file not located in the same directory of the imported module and try to import the module again. The file is named \u201c<strong>outside_project.py</strong>\u201d which is located into the desktop. In other words, that file is located one level up to the module. It has the same code used in the previous file\u00a0<strong>\u201cinside_project.py\u201d</strong>\u00a0After running this file from the terminal, the result is shown in figure 3.</p>\n<p>\u00a0<br/>\n<strong>Figure 3</strong><br/>\n<img class=\"aligncenter\" data-media-urn=\"urn:li:digitalmediaAsset:C4E12AQEq0cIO56zjQA\" src=\"https://media.licdn.com/dms/image/C4E12AQEq0cIO56zjQA/article-inline_image-shrink_400_744/0?e=2127686400&amp;v=beta&amp;t=6Yr3Jx5beC7ihxoVCkeQzdGjx1BhQSH0jmH1PhMwojI\" width=\"99%\"/><br/>\nThe module is not found because the file and the module to be imported are in different directories. The file is located in \u201c~/Desktop/\u201d directory and the module is located in \u201c~/Desktop/printmsg/\u201d directory. To solve that issue, the\u00a0<strong>printmsg</strong>\u00a0is appended to the name of the module to make the interpreter knows where it can find the module. The code will be as follows:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>import\u00a0printmsg.print_msg_file\u00a0\u00a0\r\nprintmsg.print_msg_file.print_msg_func()\u00a0\u00a0\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>The result of executing the \u201coutside_project.py\u201d file is shown in figure 4.</p>\n<p>\u00a0<br/>\n<strong>Figure 4</strong><br/>\n<img class=\"aligncenter\" data-media-urn=\"urn:li:digitalmediaAsset:C4E12AQGgYwu2wUJVzw\" src=\"https://media.licdn.com/dms/image/C4E12AQGgYwu2wUJVzw/article-inline_image-shrink_400_744/0?e=2127686400&amp;v=beta&amp;t=6MdLKNFEt3rRnx7ufsC1VXj4Zcobhdg6617EfUYtpW0\" width=\"99%\"/><br/>\nBut appending the folder name in the path from the file to the module it imports is tiresome specially if the file is away from the module in more than one levels. To solve this issue, let us have a brief overview about how Python interpreter locates imported libraries.</p>\n<p>\u00a0</p>\n<h3>2. How Python Locates Libraries?</h3>\n<p>\u00a0<br/>\nWhen Python interpreter encounters an import statement, it searches in some of its directories for that imported library. If it is not found in any of those directories, then it will raise an error as in figure 3.</p>\n<p>There are multiple sources of such paths that is searched for a given library. For example, paths can be inside the\u00a0<em>PYTHONHOME</em>\u00a0or\u00a0<em>PYTHONPATH</em>\u00a0environment variables, current script directory, and the\u00a0<strong>site-packages</strong>\u00a0directory. The list of all directories that Python searches in are listed in the <strong>path</strong> property of the <strong>sys</strong> built-in module. It can be printed as follows:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>import\u00a0sys\u00a0\u00a0\r\nprint(sys.path)\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>The sys.path list is printed using the terminal and result is shown in figure 5.</p>\n<p>\u00a0<br/>\n<strong>Figure 5</strong><br/>\n<img class=\"aligncenter\" data-media-urn=\"urn:li:digitalmediaAsset:C4E12AQEGxMpiDw_mwA\" src=\"https://media.licdn.com/dms/image/C4E12AQEGxMpiDw_mwA/article-inline_image-shrink_1500_2232/0?e=2127686400&amp;v=beta&amp;t=y92KRt8otQFsKy12Hg42zA9PiX9wOe-8zduuW5afQmE\" width=\"99%\"/><br/>\nIn our example, the module is not located in any of the directories listed in\u00a0<strong>sys.path</strong>\u00a0and this is why an exception is thrown. We can fix that by moving the library into one of these paths. The directory that will be used is the\u00a0<strong>site-packages</strong>\u00a0directory. The reason is that the installed libraries using <strong>pip</strong> or <strong>conda</strong> are added to that directory. Let us see how to add our project into that directory.</p>\n<p>\u00a0</p>\n<h3>3. Manual Installation by Copying Project Files to site-packages</h3>\n<p>\u00a0<br/>\nIn figure 5, the site-packages directory is listed as a search path for imported libraries. By simply copying and pasting the project directory \u201c<strong>printmsg</strong>\u201d inside the site-packages directory, the <strong>print_msg_file</strong> module can be imported. Figure 6 shows that the <strong>printmsg</strong> project is copied into site-packages.</p>\n<p>\u00a0<br/>\n<strong>Figure 6</strong><br/>\n<img class=\"aligncenter\" data-media-urn=\"urn:li:digitalmediaAsset:C4E12AQGJLceMUwhU-g\" src=\"https://media.licdn.com/dms/image/C4E12AQGJLceMUwhU-g/article-inline_image-shrink_1000_1488/0?e=2127686400&amp;v=beta&amp;t=4QcRjCOlVTm0mD7F8A9ZUCuVsR0pj3wSvZW52fdtSa0\" width=\"99%\"/><br/>\nBased on the previous two lines of code listed below, the \u201c<strong>outside_project.py</strong>\u201d file can now successfully import the project and print the output as in figure 4. In this case, the imported module <strong>print_msg_file</strong> is prepended by the directory of the project \u201c<strong>printmsg</strong>\u201d but this will be valid wherever the \u201c<strong>outside_project.py</strong>\u201d file is located.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>import\u00a0printmsg.print_msg_file\u00a0\u00a0\r\n\r\nprintmsg.print_msg_file.print_msg_func()\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>\u00a0</p>\n<h3>4. How Python Installers Locate Libraries?</h3>\n<p>\u00a0<br/>\nUp to this point, in order to import the project successfully it should be copied manually inside the\u00a0<strong>site-packages</strong>\u00a0directory. Before doing that, the project should be transferred to the machine by anyway such as being downloaded from any file hosting server. But all of work is manual. Some users will find such work is tiresome to do for every library they are to install. As a result, there is alternative way for installing libraries.</p>\n<p>Some installers are available to receive the library name and they take care of downloading and installing it automatically.\u00a0<strong>But how to make our own libraries accessible by these installers?</strong>\u00a0These installers searches for the libraries inside software repositories such as Python Package Index (PyPI). Once found, they download and install it automatically. So, rather than asking how to make our own libraries accessible by Python installers, the question should now be how to upload our own libraries to such repositories? This is because by uploading these libraries to such repositories, they will implicitly be accessible by the Python installers. Such software repositories accept the libraries in distribution formats such as Wheel built distribution. So, our question now should be how to prepare our project into Wheel distribution format? In order to generate the Wheel distribution format, there are a number of files to be packaged together. These files include the actual project Python files, any supplemental files required by those files, and also some helper files to give some sort of details about your project. So, the sequence to be followed is to prepare the package files, generate the distribution files, and upload such files to the Python package repository (PyPI). These points will be covered in the next sections.</p>\n</div>\n<div class=\"page-link\"><p>Pages: 1 <a href=\"https://www.kdnuggets.com/2018/06/packaging-distributing-python-project-pypi-pip.html/2\">2</a></p></div>\n<div class=\"pagi\">\n<hr class=\"grey-line\"/>\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2018/06/oreilly-special-kdnuggets-offer-strata-ny.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"/> <strong>Previous post</strong></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2018/06/top-news-week-0604-0610.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/><br/>\n<div>\n<hr class=\"grey-line\"/><br/>\n<h2>Top Stories Past 30 Days</h2>\n<table align=\"center\" cellpadding=\"3\" cellspacing=\"10\" class=\"latn\" width=\"100%\">\n<tr>\n<td valign=\"top\" width=\"50%\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Popular</b></th></tr>\n<tr><td>\n<ol class=\"three_ol\"><li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-1-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-2-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n<li> <a href=\"/2018/05/simplilearn-9-must-have-skills-data-scientist.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-3-simplilearn');\"><b>9 Must-have skills you need to become a Data Scientist, updated</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-4-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/03/another-10-free-must-read-books-for-machine-learning-and-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-5-another-10-books');\"><b>Another 10 Free Must-Read Books for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-6-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/best-data-visualization-techniques.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-7-best-data-viz');\"><b>Best Data Visualization Techniques for small and large data</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td> <td valign=\"top\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Shared</b></th></tr>\n<tr><td><ol class=\"three_ol\">\n<li> <a href=\"/2019/04/another-10-free-must-see-courses-machine-learning-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-1-another-10-courses');\"><b>Another 10 Free Must-See Courses for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-2-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/03/r-vs-python-data-visualization.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-3-r-py-viz');\"><b>R vs Python for Data Visualization</b></a>\n<li> <a href=\"/2019/03/deep-learning-toolset-overview.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-4-dl-toolset');\"><b>The Deep Learning Toolset \u2014 An Overview</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-5-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-6-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-7-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<!--#content end--></div>\n<div id=\"sidebar\">\n<div class=\"latn\">\n<h3><b><a href=\"/news/index.html\">Latest News</a></b></h3>\n<ul style=\"font-size:14px; margin-top:5px\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/kdnuggets-editor.html\">Looking for a KDnuggets Editor</a><li> <a href=\"https://www.kdnuggets.com/2019/04/datarobot-delivering-trusted-ai-microsoft.html\">Delivering Trusted AI with DataRobot and Microsoft</a><li> <a href=\"https://www.kdnuggets.com/2019/04/formulated-ai-data-production-landscape.html\">AI and the data production landscape</a><li> <a href=\"https://www.kdnuggets.com/2019/04/most-desired-skill-data-science.html\">The most desired skill in data science</a><li> <a href=\"https://www.kdnuggets.com/2019/04/projects-include-data-science-portfolio.html\">Projects to Include in a Data Science Portfolio</a><li> <a href=\"https://www.kdnuggets.com/2019/04/rework-meet-worlds-leading-ai-deep-learning-experts.html\">Meet the World\u2019s Leading AI &amp; Deep Learning ...</a></li></li></li></li></li></li></ul>\n</div>\n<div>\n<script type=\"text/javascript\">kda_sid_write(kda_sid_n);</script>\n</div>\n<br/><script src=\"/aps/sbm.js\" type=\"text/javascript\"></script>\n<div class=\"latn\" style=\"margin-top: 15px;\">\n<h3><b>More Recent Stories</b></h3>\n<ul class=\"next-posts\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/rework-meet-worlds-leading-ai-deep-learning-experts.html\">Meet the World\u2019s Leading AI &amp; Deep Learning Experts</a><li> <a href=\"https://www.kdnuggets.com/2019/04/problem-data-science-job-postings.html\">The problem with data science job postings</a><li> <a href=\"https://www.kdnuggets.com/2019/04/graduating-gans-understanding-generative-adversarial-networks.html\">Graduating in GANs: Going From Understanding Generative Advers...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/datax-join-new-generation-ai-technologists.html\">Join the new generation of AI technologists</a><li> <a href=\"https://www.kdnuggets.com/2019/04/top-tweets-apr17-apr23.html\">Top tweets, Apr 17\u201323: The History of Artificial #NeuralN...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/activestate-top-10-python-use-cases.html\">Top 10 Python Use Cases</a><li> <a href=\"https://www.kdnuggets.com/2019/04/future-generative-adversarial-networks.html\">Generative Adversarial Networks \u2013 Key Milestones and Sta...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/attention-craving-rnn-building-transformer-networks.html\">Attention Craving RNNS: Building Up To Transformer Networks</a><li> <a href=\"https://www.kdnuggets.com/jobs/19/04-24-fors-marsh-group-lead-data-scientist.html\">Fors Marsh Group: Lead Data Scientist [Arlington, VA]</a><li> <a href=\"https://www.kdnuggets.com/2019/n16.html\">KDnuggets 19:n16, Apr 24: Data Visualization in Python with...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/paw-mega-paw-las-vegas-lower-rates-end-friday.html\">Lower Rates End Friday for Mega-PAW Vegas \u2013 the Largest Pred...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/top-news-week-0415-0421.html\">Top Stories, Apr 15-21: Data Visualization in Python: Matplotl...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/wharton-customer-analytics-initiative-conference.html\">Wharton Customer Analytics Initiative Annual Conference in Phi...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/machine-learning-graph-analytics.html\">Machine Learning and Deep Link Graph Analytics: A Powerful Com...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/best-masters-data-science-analytics-online.html\">2019 Best Masters in Data Science and Analytics \u2013 Online</a><li> <a href=\"https://www.kdnuggets.com/2019/04/worth-studying-data-science-masters.html\">Was it Worth Studying a Data Science Masters?</a><li> <a href=\"https://www.kdnuggets.com/2019/04/approach-pre-trained-deep-learning-models-caution.html\">Approach pre-trained deep learning models with caution</a><li> <a href=\"https://www.kdnuggets.com/2019/04/coursera-earn-deep-learning-certificate.html\">Earn a Deep Learning Certificate</a><li> <a href=\"https://www.kdnuggets.com/2019/04/octoparse-scrape-data-website.html\">Easy Way to Scrape Data from Website By Yourself</a><li> <a href=\"https://www.kdnuggets.com/2019/04/ai-environment.html\">AI Supporting The Earth</a></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></ul>\n</div>\n</div><div class=\"breadcrumbs_bottom\">\n<div class=\"breadcumb\">\n<br>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2018/index.html\">2018</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/06/index.html\">Jun</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/06/tutorials.html\">Tutorials, Overviews</a> \u00bb Packaging and Distributing Your Python Project to PyPI for Installation Using pip (\u00a0<a href=\"/2018/n23.html\">18:n23</a>\u00a0)    </br></div>\n</div>\n<!--#content_wrapper end--></div>\n<br>\n<div id=\"footer\">\n<br/>\u00a9 2019 KDnuggets. <a href=\"/about/index.html\">About KDnuggets</a>. \u00a0<a href=\"/news/privacy-policy.html\">Privacy policy</a>. <a href=\"/terms-of-service.html\">Terms of Service</a><br/>\u00a0\n<div class=\"kd_bottom\">\n<div class=\"footer-container\">\n<div class=\"footer-news\">\n<a href=\"/news/subscribe.html\" onclick=\"_gaq.push(['_trackPageview','/x/bot/sub']);\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a>\n</div>\n<div class=\"footer-sm\">\n<a href=\"https://twitter.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/twt']);\" target=\"_blank\"><img height=\"32\" src=\"/images/tw_c48.png\" width=\"32\"/></a>\n<a href=\"https://facebook.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/fb']);\" target=\"_blank\"><img alt=\"Facebook\" height=\"32\" src=\"/images/fb_c48.png\" width=\"32\"/></a>\n<a href=\"https://www.linkedin.com/groups/54257\" onclick=\"_gaq.push(['_trackPageview','/x/bot/in']);\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"32\" src=\"/images/in_c48.png\" width=\"32\"/></a>\n</div>\n</div>\n<div class=\"close-footer\">X</div>\n</div>\n<script type=\"text/javascript\">\n  jQuery('.close-footer').click(\n      function(){       \n         jQuery('.kd_bottom').hide();\n      }\n   );\n</script> </div>\n<div class=\"clear\"><!--blank--></div>\n</br></div>\n<div style=\"display: none;\"><div id=\"boxzilla-box-82996-content\"><script type=\"text/javascript\">(function() {\n\tif (!window.mc4wp) {\n\t\twindow.mc4wp = {\n\t\t\tlisteners: [],\n\t\t\tforms    : {\n\t\t\t\ton: function (event, callback) {\n\t\t\t\t\twindow.mc4wp.listeners.push({\n\t\t\t\t\t\tevent   : event,\n\t\t\t\t\t\tcallback: callback\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})();\n</script><!-- MailChimp for WordPress v4.1.14 - https://wordpress.org/plugins/mailchimp-for-wp/ --><form class=\"mc4wp-form mc4wp-form-77281\" data-id=\"77281\" data-name=\"Subscribe to KDnuggets News\" id=\"mc4wp-form-1\" method=\"post\"><div class=\"mc4wp-form-fields\"><div class=\"header-container\">\n<img align=\"left\" src=\"/wp-content/uploads/envelope.png\"><a href=\"/news/subscribe.html\">Get KDnuggets, a leading newsletter on AI, \r\n  Data Science, and Machine Learning</a>\n</img></div>\n<div class=\"form-fields\">\n<div class=\"field-container\"><label>Email:</label><input maxlength=\"60\" name=\"EMAIL\" placeholder=\"Your email\" required=\"\" size=\"30\" type=\"email\"/></div>\n<div class=\"field-container submit-container\"><div class=\"form-button\" onclick=\"document.getElementById('mc4wp-form-1').submit()\">Sign Up</div></div>\n</div>\n<div>\n<br/><span style=\"font-size:9px\">By subscribing, you agree to KDnuggets <a href=\"https://www.kdnuggets.com/news/privacy-policy.html\">privacy policy</a></span>\n</div>\n<label style=\"display: none !important;\">Leave this field empty if you're human: <input autocomplete=\"off\" name=\"_mc4wp_honeypot\" tabindex=\"-1\" type=\"text\" value=\"\"/></label><input name=\"_mc4wp_timestamp\" type=\"hidden\" value=\"1556417519\"/><input name=\"_mc4wp_form_id\" type=\"hidden\" value=\"77281\"/><input name=\"_mc4wp_form_element_id\" type=\"hidden\" value=\"mc4wp-form-1\"/></div><div class=\"mc4wp-response\"></div></form><!-- / MailChimp for WordPress Plugin -->\n</div></div><script type=\"text/javascript\">(function() {function addEventListener(element,event,handler) {\n\tif(element.addEventListener) {\n\t\telement.addEventListener(event,handler, false);\n\t} else if(element.attachEvent){\n\t\telement.attachEvent('on'+event,handler);\n\t}\n}function maybePrefixUrlField() {\n\tif(this.value.trim() !== '' && this.value.indexOf('http') !== 0) {\n\t\tthis.value = \"http://\" + this.value;\n\t}\n}\n\nvar urlFields = document.querySelectorAll('.mc4wp-form input[type=\"url\"]');\nif( urlFields && urlFields.length > 0 ) {\n\tfor( var j=0; j < urlFields.length; j++ ) {\n\t\taddEventListener(urlFields[j],'blur',maybePrefixUrlField);\n\t}\n}/* test if browser supports date fields */\nvar testInput = document.createElement('input');\ntestInput.setAttribute('type', 'date');\nif( testInput.type !== 'date') {\n\n\t/* add placeholder & pattern to all date fields */\n\tvar dateFields = document.querySelectorAll('.mc4wp-form input[type=\"date\"]');\n\tfor(var i=0; i<dateFields.length; i++) {\n\t\tif(!dateFields[i].placeholder) {\n\t\t\tdateFields[i].placeholder = 'YYYY-MM-DD';\n\t\t}\n\t\tif(!dateFields[i].pattern) {\n\t\t\tdateFields[i].pattern = '[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])';\n\t\t}\n\t}\n}\n\n})();</script><script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_options = {\"testMode\":\"\",\"boxes\":[{\"id\":82996,\"icon\":\"&times;\",\"content\":\"\",\"css\":{\"background_color\":\"#eeee22\",\"width\":600,\"border_width\":2,\"border_style\":\"double\",\"position\":\"center\"},\"trigger\":{\"method\":\"time_on_page\",\"value\":\"3\"},\"animation\":\"fade\",\"cookie\":{\"triggered\":0,\"dismissed\":336},\"rehide\":true,\"position\":\"center\",\"screenWidthCondition\":{\"condition\":\"larger\",\"value\":500},\"closable\":true,\"post\":{\"id\":82996,\"title\":\"Subscribe to KDnuggets\",\"slug\":\"subscribe-to-kdnuggets\"}}]};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla/assets/js/script.min.js?ver=3.2.5\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_stats_config = {\"ajaxurl\":\"https:\\/\\/www.kdnuggets.com\\/wp-admin\\/admin-ajax.php?action=boxzilla_stats_track\"};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla-stats/assets/js/tracking.min.js?ver=1.0.4\" type=\"text/javascript\"></script>\n<script src=\"https://www.kdnuggets.com/wp-includes/js/wp-embed.min.js?ver=4.9.10\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar mc4wp_forms_config = [];\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/forms-api.min.js?ver=4.1.14\" type=\"text/javascript\"></script>\n<!--[if lte IE 9]>\n<script type='text/javascript' src='https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/third-party/placeholders.min.js?ver=4.1.14'></script>\n<![endif]-->\n<!--/.main_wrapper--></div>\n<script src=\"https://s7.addthis.com/js/300/addthis_widget.js#pubid=gpsaddthis\" type=\"text/javascript\"></script>\n</body>\n</html>\n<!-- Dynamic page generated in 0.713 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2019-04-27 22:11:59 -->\n<!-- Compression = gzip -->", "content_tokenized": ["ahm", "gad", "kdnugget", "contributor", "comment", "introduct", "might", "work", "with", "sever", "languag", "such", "java", "and", "python", "and", "creat", "number", "project", "but", "unfortun", "these", "project", "are", "buri", "and", "one", "know", "about", "whi", "not", "make", "these", "project", "aliv", "make", "them", "avail", "onlin", "this", "tutori", "will", "explain", "the", "step", "requir", "packag", "python", "project", "distribut", "them", "distribut", "format", "use", "steptool", "upload", "them", "into", "the", "python", "packag", "index", "pypi", "repositori", "use", "twine", "and", "final", "instal", "use", "python", "instal", "such", "pip", "and", "conda", "the", "platform", "use", "this", "tutori", "linux", "ubuntu", "num", "with", "python", "num", "but", "can", "still", "use", "other", "platform", "such", "window", "with", "littl", "differ", "the", "command", "use", "this", "tutori", "has", "the", "follow", "step", "num", "creat", "simpl", "python", "project", "num", "how", "python", "locat", "librari", "num", "manual", "instal", "copi", "project", "file", "sitepackag", "num", "how", "python", "instal", "locat", "librari", "num", "prepar", "the", "packag", "and", "file", "initpi", "and", "setuppi", "num", "distribut", "the", "packag", "num", "upload", "the", "distribut", "file", "onlin", "test", "pypi", "num", "instal", "the", "distribut", "packag", "from", "test", "pypi", "num", "import", "and", "use", "the", "instal", "packag", "num", "use", "pypi", "rather", "than", "test", "pypi", "num", "creat", "simpl", "python", "project", "let", "creat", "veri", "simpl", "project", "and", "distribut", "abl", "packag", "and", "distribut", "ani", "python", "project", "there", "must", "associ", "folder", "contain", "all", "the", "requir", "file", "for", "the", "project", "the", "folder", "name", "will", "later", "the", "project", "name", "this", "project", "will", "have", "just", "singl", "level", "contain", "singl", "python", "file", "the", "project", "structur", "follow", "the", "use", "projectfold", "name", "printmsg", "reflect", "use", "that", "folder", "save", "into", "the", "desktop", "the", "python", "file", "insid", "name", "printmsgfilepi", "the", "python", "file", "contain", "function", "and", "variabl", "the", "function", "name", "printmsgfunc", "which", "will", "print", "messag", "onc", "call", "the", "variabl", "name", "version", "which", "hold", "the", "version", "the", "project", "here", "the", "implement", "insid", "the", "printmsgfilepi", "file", "the", "printmsgfunc", "function", "print", "hello", "messag", "when", "call", "due", "the", "statement", "the", "file", "will", "automat", "call", "the", "function", "onc", "execut", "direct", "the", "main", "program", "but", "will", "not", "that", "file", "import", "into", "anoth", "file", "version", "num", "def", "name", "main", "next", "execut", "that", "file", "know", "that", "everyth", "run", "well", "such", "python", "instal", "proper", "python", "file", "execut", "from", "either", "the", "linux", "termin", "window", "command", "prompt", "issu", "the", "python", "command", "follow", "the", "locat", "the", "file", "figur", "num", "show", "how", "run", "the", "python", "file", "use", "both", "window", "and", "ubuntu", "figur", "num", "the", "cmdtermin", "are", "open", "the", "printmsg", "directori", "and", "content", "are", "display", "ensur", "the", "target", "file", "printmsgfilepi", "alreadi", "exist", "then", "the", "python", "command", "issu", "run", "the", "file", "after", "make", "sure", "everyth", "work", "possibl", "import", "that", "project", "into", "anoth", "python", "file", "order", "abl", "call", "content", "file", "import", "into", "anoth", "the", "legaci", "way", "for", "this", "creat", "anoth", "file", "the", "same", "directori", "that", "file", "for", "exampl", "anoth", "python", "file", "name", "secondfilepi", "import", "the", "project", "and", "call", "function", "follow", "import", "printmsgfil", "first", "the", "project", "import", "line", "num", "then", "use", "call", "function", "line", "num", "after", "open", "the", "termin", "and", "set", "current", "directori", "the", "printmsg", "folder", "the", "new", "file", "insideprojectpi", "can", "execut", "figur", "num", "the", "function", "got", "call", "success", "figur", "num", "becaus", "the", "import", "modul", "the", "same", "directori", "the", "script", "call", "from", "the", "process", "straightforward", "just", "type", "the", "name", "the", "modul", "import", "statement", "there", "import", "question", "what", "the", "script", "call", "the", "file", "differ", "directori", "than", "the", "modul", "would", "like", "import", "let", "tri", "creat", "anoth", "python", "file", "not", "locat", "the", "same", "directori", "the", "import", "modul", "and", "tri", "import", "the", "modul", "again", "the", "file", "name", "outsideprojectpi", "which", "locat", "into", "the", "desktop", "other", "word", "that", "file", "locat", "one", "level", "the", "modul", "has", "the", "same", "code", "use", "the", "previous", "file", "insideprojectpi", "after", "run", "this", "file", "from", "the", "termin", "the", "result", "shown", "figur", "num", "figur", "num", "the", "modul", "not", "found", "becaus", "the", "file", "and", "the", "modul", "import", "are", "differ", "directori", "the", "file", "locat", "desktop", "directori", "and", "the", "modul", "locat", "desktopprintmsg", "directori", "solv", "that", "issu", "the", "printmsg", "append", "the", "name", "the", "modul", "make", "the", "interpret", "know", "where", "can", "find", "the", "modul", "the", "code", "will", "follow", "import", "printmsgprintmsgfil", "the", "result", "execut", "the", "outsideprojectpi", "file", "shown", "figur", "num", "figur", "num", "but", "append", "the", "folder", "name", "the", "path", "from", "the", "file", "the", "modul", "import", "tiresom", "special", "the", "file", "away", "from", "the", "modul", "more", "than", "one", "level", "solv", "this", "issu", "let", "have", "brief", "overview", "about", "how", "python", "interpret", "locat", "import", "librari", "num", "how", "python", "locat", "librari", "when", "python", "interpret", "encount", "import", "statement", "search", "some", "directori", "for", "that", "import", "librari", "not", "found", "ani", "those", "directori", "then", "will", "rais", "error", "figur", "num", "there", "are", "multipl", "sourc", "such", "path", "that", "search", "for", "given", "librari", "for", "exampl", "path", "can", "insid", "the", "environ", "variabl", "current", "script", "directori", "and", "the", "sitepackag", "directori", "the", "list", "all", "directori", "that", "python", "search", "are", "list", "the", "path", "properti", "the", "sys", "builtin", "modul", "can", "print", "follow", "import", "sys", "the", "syspath", "list", "print", "use", "the", "termin", "and", "result", "shown", "figur", "num", "figur", "num", "our", "exampl", "the", "modul", "not", "locat", "ani", "the", "directori", "list", "syspath", "and", "this", "whi", "except", "thrown", "can", "fix", "that", "move", "the", "librari", "into", "one", "these", "path", "the", "directori", "that", "will", "use", "the", "sitepackag", "directori", "the", "reason", "that", "the", "instal", "librari", "use", "pip", "conda", "are", "that", "directori", "let", "see", "how", "add", "our", "project", "into", "that", "directori", "num", "manual", "instal", "copi", "project", "file", "sitepackag", "figur", "num", "the", "sitepackag", "directori", "list", "search", "path", "for", "import", "librari", "simpli", "copi", "and", "past", "the", "project", "directori", "printmsg", "insid", "the", "sitepackag", "directori", "the", "printmsgfil", "modul", "can", "import", "figur", "num", "show", "that", "the", "printmsg", "project", "copi", "into", "sitepackag", "figur", "num", "base", "the", "previous", "two", "line", "code", "list", "below", "the", "outsideprojectpi", "file", "can", "now", "success", "import", "the", "project", "and", "print", "the", "output", "figur", "num", "this", "case", "the", "import", "modul", "printmsgfil", "prepend", "the", "directori", "the", "project", "printmsg", "but", "this", "will", "valid", "wherev", "the", "outsideprojectpi", "file", "locat", "import", "printmsgprintmsgfil", "num", "how", "python", "instal", "locat", "librari", "this", "point", "order", "import", "the", "project", "success", "should", "copi", "manual", "insid", "the", "sitepackag", "directori", "befor", "that", "the", "project", "should", "transfer", "the", "machin", "anyway", "such", "download", "from", "ani", "file", "host", "server", "but", "all", "work", "manual", "some", "user", "will", "find", "such", "work", "tiresom", "for", "everi", "librari", "they", "are", "instal", "result", "there", "altern", "way", "for", "instal", "librari", "some", "instal", "are", "avail", "receiv", "the", "librari", "name", "and", "they", "take", "care", "download", "and", "instal", "automat", "but", "how", "make", "our", "own", "librari", "access", "these", "instal", "these", "instal", "search", "for", "the", "librari", "insid", "softwar", "repositori", "such", "python", "packag", "index", "pypi", "onc", "found", "they", "download", "and", "instal", "automat", "rather", "than", "ask", "how", "make", "our", "own", "librari", "access", "python", "instal", "the", "question", "should", "now", "how", "upload", "our", "own", "librari", "such", "repositori", "this", "becaus", "upload", "these", "librari", "such", "repositori", "they", "will", "implicit", "access", "the", "python", "instal", "such", "softwar", "repositori", "accept", "the", "librari", "distribut", "format", "such", "wheel", "built", "distribut", "our", "question", "now", "should", "how", "prepar", "our", "project", "into", "wheel", "distribut", "format", "order", "generat", "the", "wheel", "distribut", "format", "there", "are", "number", "file", "packag", "togeth", "these", "file", "includ", "the", "actual", "project", "python", "file", "ani", "supplement", "file", "requir", "those", "file", "and", "also", "some", "helper", "file", "give", "some", "sort", "detail", "about", "project", "the", "sequenc", "follow", "prepar", "the", "packag", "file", "generat", "the", "distribut", "file", "and", "upload", "such", "file", "the", "python", "packag", "repositori", "pypi", "these", "point", "will", "cover", "the", "next", "section"], "timestamp_scraper": 1556479567.911425, "title": "Packaging and Distributing Your Python Project to PyPI for Installation Using pip", "read_time": 444.29999999999995, "content_html": "<div class=\"post\" id=\"post-\">\n<div class=\"author-link\"><b>By <a href=\"https://www.kdnuggets.com/author/ahmed-gad\" rel=\"author\" title=\"Posts by Ahmed Gad\">Ahmed Gad</a>, KDnuggets Contributor.</b></div>\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"/2018/06/packaging-distributing-python-project-pypi-pip.html?page=2#comments\">comments</a></div>\n<p><img alt=\"Image\" class=\"aligncenter\" src=\"https://media.licdn.com/media/gcrc/dms/image/C4E12AQHtqX8jbADS0A/article-cover_image-shrink_720_1280/0?e=2127686400&amp;v=beta&amp;t=yRUiucepzDI9bD1ovdGysIp-EW70Y2tKOJPSz545CvI\" width=\"90%\"><br>\n\u00a0</br></img></p>\n<h3>Introduction</h3>\n<p>\u00a0<br>\nYou might worked with several languages such as Java, C++, and Python and created a number of projects but unfortunately these projects are buried and no one knows about. Why not making these projects alive by making them available online? This tutorial will explain the steps required to package your Python projects, distribute them in distribution formats using steptools, upload them into the Python Package Index (PyPI) repository using twine, and finally installation using Python installers such as pip and conda.</br></p>\n<p>The platform used in this tutorial is Linux Ubuntu 18.04 with Python 3.6.5. But you can still use other platforms such as Windows with little or no difference in the commands used.</p>\n<p>This tutorial has the following steps:</p>\n<p>1. Creating a Simple Python Project.</p>\n<p>2.\u00a0How Python Locates Libraries?</p>\n<p>3.\u00a0Manual Installation by Copying Project Files to\u00a0<strong>site-packages.</strong></p>\n<p>4.\u00a0How Python Installers Locate Libraries?</p>\n<p>5.\u00a0Preparing the Package and its Files (<strong>__init__.py</strong>\u00a0and\u00a0<strong>setup.py</strong>).</p>\n<p>6.\u00a0Distributing the Package.</p>\n<p>7.\u00a0Uploading the Distribution Files Online to Test PyPI.</p>\n<p>8.\u00a0Installing the Distributed Package from Test PyPI.</p>\n<p>9.\u00a0Importing and Using the Installed Package.</p>\n<p>10. Using PyPI rather than Test PyPI.</p>\n<p>\u00a0</p>\n<h3>1. Creating a Simple Python Project</h3>\n<p>\u00a0<br>\nLet us create a very simple project and distribute it. To be able to package and distribute any Python project, there must be an associated folder containing all of the required files for the project. The folder name will be later the project name.</br></p>\n<p>This project will have just a single level containing a single Python file. The project structure is as follows:</p>\n<p><img class=\"aligncenter\" data-media-urn=\"urn:li:digitalmediaAsset:C4E12AQGQxHmTM3_GDQ\" src=\"https://media.licdn.com/dms/image/C4E12AQGQxHmTM3_GDQ/article-inline_image-shrink_400_744/0?e=2127686400&amp;v=beta&amp;t=1pi9IRlXZIEOZJoz91omt6uxyObNc-ecduZf_o1AoAc\" width=\"250\"/></p>\n<p>The used project/folder name is\u00a0<strong>\u201cprintmsg\u201d</strong>\u00a0to reflect its use. That folder is saved into the Desktop. The Python file inside it is named\u00a0<strong>\u201cprint_msg_file.py\u201d</strong>. The Python file contains a function and a variable. The function is named\u00a0<strong>\u201cprint_msg_func\u201d</strong>\u00a0which will print a message once called. The variable is named \u201cversion\u201d which holds the version of the project.</p>\n<p>Here is the implementation inside the\u00a0<strong>\u201cprint_msg_file.py\u201d</strong>\u00a0file. The\u00a0<strong>\u201cprint_msg_func\u201d</strong>function prints a hello message when called. Due to the\u00a0<strong>if</strong>\u00a0statement, the file will automatically call the function once executed directly as the main program. But it will not if that file is imported into another file.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>version\u00a0=\u00a0\"1.0\"\u00a0\u00a0\r\n\u00a0\u00a0\r\ndef\u00a0print_msg_func():\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0print(\"Hello\u00a0Python\u00a0Packaging\")\u00a0\u00a0\r\n\u00a0\u00a0\r\nif\u00a0__name__\u00a0==\u00a0\"__main__\":\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0print_msg_func()\u00a0\u00a0\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Next is to execute that file to know that everything is running well such as Python being installed properly. A Python file is to be executed from either the Linux terminal or Windows Command Prompt by issuing the python command followed by the location of the file. Figure 1 shows how to run the Python file using both Windows and Ubuntu.</p>\n<p>\u00a0<br/>\n<strong>Figure 1</strong><br/>\n<img class=\"aligncenter\" data-media-urn=\"urn:li:digitalmediaAsset:C4E12AQHkuAg4tfAPRA\" src=\"https://media.licdn.com/dms/image/C4E12AQHkuAg4tfAPRA/article-inline_image-shrink_1500_2232/0?e=2127686400&amp;v=beta&amp;t=Z5r9qx715JLIDP3LO42lzhy_N7Ipq0EgKzCvKA_FX1E\" width=\"99%\"/><br/>\nThe CMD/terminal are opened in the\u00a0<strong>\u201cprintmsg\u201d</strong>\u00a0directory and its contents are displayed to ensure the target file\u00a0<strong>\u201cprint_msg_file.py\u201d</strong>\u00a0is already existing. Then the python command is issued to run the file.</p>\n<p>After making sure everything is working, it is possible to import that project into another Python file in order to be able to call its content. If a file to be imported into another, the legacy way for doing this is to create another file in the same directory of that file. For example, another Python file named\u00a0<strong>\u201csecond_file.py\u201d</strong>\u00a0is to import the project and call its function as follows:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>import\u00a0print_msg_file\u00a0\u00a0\r\nprint_msg_file.print_msg_func()\u00a0\u00a0\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>At first, the project is imported as in line 1. Then it is used to call its function in line 2. After opening the terminal and setting its current directory to the printmsg folder, the new file\u00a0<strong>\u201cinside_project.py\u201d</strong>\u00a0can be executed as in figure 2. The function got called successfully.</p>\n<p>\u00a0<br/>\n<strong>Figure 2</strong><br/>\n<img class=\"aligncenter\" data-media-urn=\"urn:li:digitalmediaAsset:C4E12AQF6z61TcVAFbA\" src=\"https://media.licdn.com/dms/image/C4E12AQF6z61TcVAFbA/article-inline_image-shrink_400_744/0?e=2127686400&amp;v=beta&amp;t=HTE8LfWrWifFiw1Eo5w79w4ht5gqMGZWMQiKmagEJfE\" width=\"99%\"/><br/>\nBecause the imported module is in the same directory of the script it is called from, the process is straightforward. Just type the name of the module in an import statement. There is an important question. What if the script calling the file is in a different directory than the module it would like to import? Let us try to create another Python file not located in the same directory of the imported module and try to import the module again. The file is named \u201c<strong>outside_project.py</strong>\u201d which is located into the desktop. In other words, that file is located one level up to the module. It has the same code used in the previous file\u00a0<strong>\u201cinside_project.py\u201d</strong>\u00a0After running this file from the terminal, the result is shown in figure 3.</p>\n<p>\u00a0<br/>\n<strong>Figure 3</strong><br/>\n<img class=\"aligncenter\" data-media-urn=\"urn:li:digitalmediaAsset:C4E12AQEq0cIO56zjQA\" src=\"https://media.licdn.com/dms/image/C4E12AQEq0cIO56zjQA/article-inline_image-shrink_400_744/0?e=2127686400&amp;v=beta&amp;t=6Yr3Jx5beC7ihxoVCkeQzdGjx1BhQSH0jmH1PhMwojI\" width=\"99%\"/><br/>\nThe module is not found because the file and the module to be imported are in different directories. The file is located in \u201c~/Desktop/\u201d directory and the module is located in \u201c~/Desktop/printmsg/\u201d directory. To solve that issue, the\u00a0<strong>printmsg</strong>\u00a0is appended to the name of the module to make the interpreter knows where it can find the module. The code will be as follows:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>import\u00a0printmsg.print_msg_file\u00a0\u00a0\r\nprintmsg.print_msg_file.print_msg_func()\u00a0\u00a0\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>The result of executing the \u201coutside_project.py\u201d file is shown in figure 4.</p>\n<p>\u00a0<br/>\n<strong>Figure 4</strong><br/>\n<img class=\"aligncenter\" data-media-urn=\"urn:li:digitalmediaAsset:C4E12AQGgYwu2wUJVzw\" src=\"https://media.licdn.com/dms/image/C4E12AQGgYwu2wUJVzw/article-inline_image-shrink_400_744/0?e=2127686400&amp;v=beta&amp;t=6MdLKNFEt3rRnx7ufsC1VXj4Zcobhdg6617EfUYtpW0\" width=\"99%\"/><br/>\nBut appending the folder name in the path from the file to the module it imports is tiresome specially if the file is away from the module in more than one levels. To solve this issue, let us have a brief overview about how Python interpreter locates imported libraries.</p>\n<p>\u00a0</p>\n<h3>2. How Python Locates Libraries?</h3>\n<p>\u00a0<br/>\nWhen Python interpreter encounters an import statement, it searches in some of its directories for that imported library. If it is not found in any of those directories, then it will raise an error as in figure 3.</p>\n<p>There are multiple sources of such paths that is searched for a given library. For example, paths can be inside the\u00a0<em>PYTHONHOME</em>\u00a0or\u00a0<em>PYTHONPATH</em>\u00a0environment variables, current script directory, and the\u00a0<strong>site-packages</strong>\u00a0directory. The list of all directories that Python searches in are listed in the <strong>path</strong> property of the <strong>sys</strong> built-in module. It can be printed as follows:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>import\u00a0sys\u00a0\u00a0\r\nprint(sys.path)\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>The sys.path list is printed using the terminal and result is shown in figure 5.</p>\n<p>\u00a0<br/>\n<strong>Figure 5</strong><br/>\n<img class=\"aligncenter\" data-media-urn=\"urn:li:digitalmediaAsset:C4E12AQEGxMpiDw_mwA\" src=\"https://media.licdn.com/dms/image/C4E12AQEGxMpiDw_mwA/article-inline_image-shrink_1500_2232/0?e=2127686400&amp;v=beta&amp;t=y92KRt8otQFsKy12Hg42zA9PiX9wOe-8zduuW5afQmE\" width=\"99%\"/><br/>\nIn our example, the module is not located in any of the directories listed in\u00a0<strong>sys.path</strong>\u00a0and this is why an exception is thrown. We can fix that by moving the library into one of these paths. The directory that will be used is the\u00a0<strong>site-packages</strong>\u00a0directory. The reason is that the installed libraries using <strong>pip</strong> or <strong>conda</strong> are added to that directory. Let us see how to add our project into that directory.</p>\n<p>\u00a0</p>\n<h3>3. Manual Installation by Copying Project Files to site-packages</h3>\n<p>\u00a0<br/>\nIn figure 5, the site-packages directory is listed as a search path for imported libraries. By simply copying and pasting the project directory \u201c<strong>printmsg</strong>\u201d inside the site-packages directory, the <strong>print_msg_file</strong> module can be imported. Figure 6 shows that the <strong>printmsg</strong> project is copied into site-packages.</p>\n<p>\u00a0<br/>\n<strong>Figure 6</strong><br/>\n<img class=\"aligncenter\" data-media-urn=\"urn:li:digitalmediaAsset:C4E12AQGJLceMUwhU-g\" src=\"https://media.licdn.com/dms/image/C4E12AQGJLceMUwhU-g/article-inline_image-shrink_1000_1488/0?e=2127686400&amp;v=beta&amp;t=4QcRjCOlVTm0mD7F8A9ZUCuVsR0pj3wSvZW52fdtSa0\" width=\"99%\"/><br/>\nBased on the previous two lines of code listed below, the \u201c<strong>outside_project.py</strong>\u201d file can now successfully import the project and print the output as in figure 4. In this case, the imported module <strong>print_msg_file</strong> is prepended by the directory of the project \u201c<strong>printmsg</strong>\u201d but this will be valid wherever the \u201c<strong>outside_project.py</strong>\u201d file is located.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>import\u00a0printmsg.print_msg_file\u00a0\u00a0\r\n\r\nprintmsg.print_msg_file.print_msg_func()\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>\u00a0</p>\n<h3>4. How Python Installers Locate Libraries?</h3>\n<p>\u00a0<br/>\nUp to this point, in order to import the project successfully it should be copied manually inside the\u00a0<strong>site-packages</strong>\u00a0directory. Before doing that, the project should be transferred to the machine by anyway such as being downloaded from any file hosting server. But all of work is manual. Some users will find such work is tiresome to do for every library they are to install. As a result, there is alternative way for installing libraries.</p>\n<p>Some installers are available to receive the library name and they take care of downloading and installing it automatically.\u00a0<strong>But how to make our own libraries accessible by these installers?</strong>\u00a0These installers searches for the libraries inside software repositories such as Python Package Index (PyPI). Once found, they download and install it automatically. So, rather than asking how to make our own libraries accessible by Python installers, the question should now be how to upload our own libraries to such repositories? This is because by uploading these libraries to such repositories, they will implicitly be accessible by the Python installers. Such software repositories accept the libraries in distribution formats such as Wheel built distribution. So, our question now should be how to prepare our project into Wheel distribution format? In order to generate the Wheel distribution format, there are a number of files to be packaged together. These files include the actual project Python files, any supplemental files required by those files, and also some helper files to give some sort of details about your project. So, the sequence to be followed is to prepare the package files, generate the distribution files, and upload such files to the Python package repository (PyPI). These points will be covered in the next sections.</p>\n</div> ", "website": "kdnuggets"}