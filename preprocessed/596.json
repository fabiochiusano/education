{"content": "comments By Jason Carpenter , University of San Francisco Time is precious. There is absolutely no reason to be wasting it waiting for your function to be applied to your pandas series (1 column) or dataframe (>1 columns). Don\u2019t get me wrong, pandas is an amazing tool for python users, and a majority of the time pandas operations are very quick. Here, I wish to take the pandas\u00a0 apply \u00a0function under close inspection. This function is incredibly useful, because it lets you easily apply any function that you\u2019ve specified to your pandas series or dataframe. But there is a cost\u200a\u2014\u200athe apply function essentially acts as a for loop, and\u00a0 a slow one at that . This means that the apply function is a linear operation, processing your function at  complexity. Experienced users of pandas and python may be well aware of the options available to increase the speed of their transformations: vectorize your function, compile it with\u00a0 cython \u00a0or\u00a0 numba , or use a parallel processing library such as\u00a0 dask \u00a0or\u00a0 multiprocessing . But there is likely a broad category of python users who are either unaware of these options, don\u2019t know how to use them, or don\u2019t want to take the time to add the appropriate function calls to speed up their operations. What do you\u00a0do? \u00a0 swiftapply \u00a0 It\u2019s highly effective! Swiftapply, available on pip from the\u00a0 swifter \u00a0 package , makes it\u00a0 easy \u00a0to apply any function to your pandas series or dataframe in the\u00a0 fastest\u00a0 available manner. What does this mean? First, swiftapply tries to run your operation in a vectorized fashion. Failing that, it automatically decides whether it is faster to perform dask parallel processing or use a simple pandas apply. So, how do we use it? First, let\u2019s install swifter at the command line. $ pip install swifter Next, import the function into your python notebook or\u00a0.py file. from swifter import swiftapply Now, you are ready to use swiftapply. myDF['outCol'] =  \u00a0 Examples \u00a0 This notebook \u00a0gives a couple examples of swiftapply usage on a >71 million rows SF Bay Area Bikeshare data set, but I will also provide examples inline here. All applied functions are in bold. Example 1 (vectorized): def bikes_proportion (x, max_x):\r return x * 1.0 / max_x\r \r data['bike_prop'] = swiftapply (data['bikes_available'],\r bikes_proportion ,\r max_x=) Example 2 (tries vectorized -> fails -> uses dask parallel processing instead): def convert_to_human (datetime):\r return datetime.weekday_name + ', the ' +  + 'th day of ' +  + ', ' + \r \r data['humanreadable_date'] = swiftapply (data['date'],\r convert_to_human ) Example 3 (how to make non-vectorized code (13.8s) into vectorized code (231ms)): # Parallel processing b/c if-else statement makes it non-vectorized\r def gt_5_bikes (x):\r if x > 5:\r return True\r else:\r return False\r \r # computes in 13.8s\r data['gt_5_bikes'] = swiftapply (data['bikes_available'], gt_5_bikes )\r \r # Vectorized version\r def gt_5_bikes_vectorized (x):\r return \r \r # computes in 231ms\r data['gt_5_bikes_vec'] = swiftapply (data['bikes_available'], \r gt_5_bikes_vectorized ) \u00a0 Benchmarks \u00a0 This notebook \u00a0contains benchmarks using 4 different functions on the same >71 million rows data set. Swiftapply vectorizes when possible for \u2265100x speed\u00a0increase The first benchmark I will discuss is the pd.to_datetime function. Looking at the figures above (time in seconds v. number of rows), and below (log10 of both quantities), it becomes clear that using a pandas apply of pd.to_datetime is an incredibly slow operation (> 1 hour) on a data set of this size. Instead, it would be better to use the vectorized form of the operation, since it is a vectorized function. Swiftapply automatically does this, when possible. df['date']. apply ( pd.to_datetime ) # very slow\r \r pd.to_datetime (df['date']) # vectorized - very fast\r \r swiftapply (df['date'], pd.to_datetime ) # also vectorized - very fast Below, I\u2019ve included the log10-log10 plot of time (seconds) v. rows so that we can interpret the measurable difference in performance. Remember, this means that every tickmark represents a 10x change in the value. That means that the difference between pandas and dask is 10x, and the difference between pandas and swiftapply/vectorized is 100x. X is 1, 10, 100, 1000,\u00a0\u2026 In the event that you wish to apply a function that is not vectorizable, like  function in example 2, then a choice must be made. Should we use parallel processing (which has some overhead), or a simple pandas apply (which only utilizes 1 CPU, but has no overhead)? Looking at the below figure (log10 scale), we can see that in these situations, swiftapply uses pandas apply when it is faster (smaller data sets), and converges to dask parallel processing when that is faster (large data sets). In this manner, the user doesn\u2019t have to think about which method to use, regardless of size of the data set. Swiftapply converges to pandas apply on small datasets and dask parallel processing on large\u00a0ones Admittedly, the difference between swiftapply/dask and pandas doesn\u2019t look very impressive in the above plot when the number of rows is high (log10 rows > 5). However, when we convert it to normal scale below, we see the true performance gain. Even with this slow non-vectorizable function, swiftapply\u2019s utilization of dask parallel processing increases speed by 3x. This adaptive functionality makes swiftapply an efficient, easy to use apply function for all situations. Please leave a comment if there\u2019s any functionality you\u2019d like to see added, or if you have any feedback. If you wish to use or contribute to the package, here is the github repository: /jmcarpenter2/swifter LinkedIn:\u00a0 /in/jasonmcarpenter/ Twitter:\u00a0 /jcarpenter542 \u00a0 Bio: Jason Carpenter is a Master's Candidate in Data Science at University of San Francisco, and a Machine Learning Engineer Intern at Manifold. Original . Reposted with permission. Related: Quick Feature Engineering with Dates Using fast.ai Using Excel with Pandas Understanding Feature Engineering: Deep Learning Methods for Text Data", "title_html": "<h1 id=\"title\">Swiftapply\u200a \u2013 Automatically efficient pandas apply operations</h1> ", "url": "https://www.kdnuggets.com/2018/04/swiftapply-automatically-efficient-pandas-apply-operations.html", "tfidf": {"tfidf": {"carpent": 44.532959326800004, "francisco": 10.5875291764, "hour": 2.25960717336, "who": 1.06279287723, "decid": 1.9257641921400002, "univers": 2.49779735682, "awar": 4.27693965517, "permiss": 6.280063291139999, "numm": 37.7550535078, "here": 7.26923076924, "lognum": 3175.2000000000003, "form": 1.12755681818, "rememb": 4.88793103448, "fastai": 1587.6, "speed": 15.481228668960002, "swiftappli": 26989.199999999997, "comput": 7.855517070760001, "panda": 1788.845070416, "categori": 3.98194130926, "datafram": 4762.799999999999, "number": 2.20285833218, "contain": 1.59814777532, "parallel": 36.63340063456, "dataset": 193.609756098, "about": 1.06486015159, "function": 52.404275385, "numba": 1587.6, "usag": 6.427530364369999, "python": 225.1914893616, "manner": 7.8632986627, "adapt": 3.32272917539, "understand": 2.96858638743, "precious": 23.1428571429, "abov": 3.80765079746, "text": 3.12827586207, "regardless": 6.35294117647, "statement": 3.42228928648, "know": 2.59327017315, "them": 1.09876115994, "fastest": 14.4065335753, "contribut": 1.9255306246200001, "automat": 13.575032064980002, "overhead": 48.109090908999995, "complex": 2.34021226415, "instead": 3.18923262354, "jmcarpenternumswift": 1587.6, "swifter": 2540.16, "plot": 10.767039674460001, "run": 1.55692850838, "how": 4.80750984153, "repost": 933.882352941, "million": 3.4558119286, "seri": 4.39534883721, "\u2265numx": 1587.6, "look": 5.725895647979999, "increas": 3.9607484407499998, "would": 1.0828729281799998, "can": 2.35252278284, "converg": 30.5895953758, "for": 6.00189024006, "pip": 271.384615384, "benchmark": 155.6470588236, "deep": 3.6279707495399998, "will": 2.44962197192, "the": 34.0, "dask": 11113.199999999999, "wast": 7.499291450169999, "datetimeweekdaynam": 1587.6, "second": 2.2261796256, "linear": 13.8776223776, "broad": 4.27693965517, "next": 1.4950560316400001, "below": 9.02430012788, "repres": 1.46972782818, "perform": 4.59419311275, "but": 4.06529671596, "there": 4.16365066876, "command": 2.66689064337, "jason": 23.159737418000002, "outcol": 1587.6, "humanreadabled": 1587.6, "amaz": 15.250720461099998, "num": 20.006300800200002, "inlin": 100.481012658, "exampl": 10.53383886254, "has": 2.0872995004, "date": 8.15408320495, "ifels": 1587.6, "inspect": 11.7512953368, "impress": 3.90457452041, "linkedin": 610.615384615, "use": 17.503858875459997, "now": 1.160780873, "tri": 3.7089125102199993, "code": 7.761427523839999, "see": 3.81726376533, "high": 2.2955465587, "specifi": 6.920662598080001, "bikeprop": 1587.6, "admit": 4.03046458492, "under": 1.0781663837, "nonvectoriz": 1587.6, "absolut": 5.3472549680000006, "also": 2.02953020134, "coupl": 3.2572835453400004, "readi": 5.15789473684, "reason": 1.72340425532, "mean": 5.79627601316, "lognumlognum": 1587.6, "some": 1.04036697248, "fashion": 4.85207823961, "row": 33.29465221950001, "major": 1.14852058164, "may": 1.05201775893, "becom": 1.12492028626, "candid": 4.51279135873, "event": 1.5356935577500002, "quick": 4.41, "pleas": 9.12938470385, "easi": 10.5875291764, "notebook": 120.5772151899, "want": 1.99698113208, "better": 2.0065722952500002, "convert": 3.2740771293099997, "jcarpenternum": 1587.6, "sinc": 1.08368600683, "act": 1.4318181818200002, "manifold": 66.42677824270001, "howev": 1.0945191313299998, "effect": 1.3963060686000002, "let": 6.97233201582, "scienc": 2.31969608416, "bold": 13.341176470599999, "area": 1.3881262568900001, "def": 327.34020618560004, "github": 1587.6, "wish": 11.03266157055, "cython": 1587.6, "which": 3.015575535, "what": 2.50686878256, "featur": 3.05425163524, "bikesproport": 3175.2, "vectoriz": 1587.6, "swiftapplydask": 1587.6, "simpl": 6.7962328767199995, "normal": 2.61075481006, "appli": 34.458110259, "whether": 2.20683903253, "provid": 1.21552714187, "one": 2.01254991444, "valu": 2.2777618364400003, "converttohuman": 3175.2, "either": 1.5830092731099998, "bikesavail": 4762.799999999999, "compil": 5.696447793330001, "such": 1.06151377374, "becaus": 1.1495184997499999, "loop": 13.5114893617, "get": 1.78562591385, "option": 8.09793420046, "like": 3.44755700325, "fast": 9.7458563536, "maxx": 1536.3870967740002, "small": 1.3594793629, "should": 1.6643254009900001, "add": 4.61243463103, "file": 3.7710213776699995, "process": 15.25723438338, "both": 1.05215720061, "transform": 3.42007755278, "tickmark": 1587.6, "that": 13.05179282875, "version": 2.0083491461099996, "includ": 1.0190641247799999, "twitter": 33.213389121300004, "repositori": 44.974504249300004, "pdtodatetim": 7938.0, "well": 1.0655748708, "numx": 115.461818182, "set": 7.12247644686, "wait": 4.55421686747, "ani": 4.53535209256, "choic": 3.1319786940200003, "time": 5.0563730174, "from": 2.00113442994, "engin": 7.414072229129999, "relat": 1.23750876919, "chang": 1.1808985421, "gtnumbikesvector": 3175.2, "unawar": 16.746835443, "vector": 284.887438825, "smaller": 2.59369384088, "differ": 6.182724511249999, "same": 1.11857958148, "els": 5.44444444444, "between": 3.1036100612399995, "multiprocess": 756.0, "return": 6.97662155035, "incred": 36.454649827800004, "excel": 4.84467500763, "swiftapplyvector": 1587.6, "fail": 3.8562059752199995, "all": 2.02293577982, "slow": 16.19173890872, "nonvector": 3175.2, "with": 5.005991044949999, "mydf": 1587.6, "think": 2.90715986083, "are": 4.11962374312, "gtnumbikesvec": 1587.6, "true": 5.11139729556, "appropri": 4.31413043478, "day": 1.18371607516, "feedback": 24.652173913000002, "experienc": 3.5564516129, "take": 2.27923336444, "call": 1.0676529926, "injasonmcarpent": 1587.6, "and": 11.000692913429999, "veri": 6.29400570885, "essenti": 2.9280708225700005, "intern": 1.30355530011, "discuss": 2.19676214197, "these": 2.14830852504, "gain": 1.84819557625, "util": 9.31963604344, "made": 1.07038834951, "faster": 22.84316546763, "gtnumbik": 4762.799999999999, "master": 3.15125049623, "column": 14.156041016500001, "librari": 2.68266306185, "close": 1.2848818387799998, "then": 1.08657860516, "doe": 3.4116256581, "even": 1.16461267606, "avail": 5.1865403463, "bikeshar": 1587.6, "give": 1.3653250774, "make": 4.305064063440001, "easili": 3.6938110749199997, "onli": 1.0256476516600002, "possibl": 2.8347468976, "size": 4.9877474081, "situat": 4.13222280062, "clear": 1.85423966363, "this": 11.04172989381, "packag": 15.656804733720001, "comment": 6.11909809212, "data": 54.02296894944, "oper": 9.32876309862, "fals": 6.21613155834, "their": 2.0309581681, "method": 5.1428571428600005, "scale": 7.493981590739999, "machin": 4.02433460076, "into": 2.03004922958, "bio": 42.336000000000006, "instal": 7.57442748092, "must": 1.9220338983099996, "origin": 1.13724928367, "learn": 4.6455010973, "cost": 2.31935719503, "quantiti": 7.23280182232, "figur": 4.0686827268, "datetim": 1587.6, "import": 2.6803984467400004, "first": 3.0228484386899996, "everi": 1.47917637194, "leav": 1.6615384615399997, "have": 2.0297896822799997, "tool": 4.99716713881, "interpret": 3.2150668286799995, "not": 1.01567398119, "measur": 2.41093394077, "larg": 2.3714989917, "user": 30.8421563866, "bay": 4.629921259840001, "line": 1.4182597820299998, "san": 6.60262008734, "when": 6.124606185299999, "wrong": 5.478260869570001, "effici": 5.09335899904}, "logtfidf": {"carpent": 6.2061647869800005, "francisco": 3.3330592702999997, "hour": 0.815190981077, "who": 0.0609002329859, "decid": 0.655322871893, "univers": 0.444524211372, "awar": 1.45323772, "permiss": 1.8373800586400002, "numm": 5.87594430786, "here": 2.6551145651100003, "lognum": 20.8935408384, "form": 0.120053184191, "rememb": 1.5867691126199999, "fastai": 7.369978720910001, "speed": 5.413335501080001, "swiftappli": 125.28963825547001, "comput": 2.73613783188, "panda": 75.46778810079999, "categori": 1.38176946652, "datafram": 22.10993616273, "number": 0.1932171568372, "contain": 0.468845318236, "parallel": 12.17215094576, "dataset": 5.26584456664, "about": 0.0628434774746, "function": 19.203780573474, "numba": 7.369978720910001, "usag": 1.86059038428, "python": 16.12262697184, "manner": 2.73811803006, "adapt": 1.2007864860200002, "understand": 1.0880858756799998, "precious": 3.14168618618, "abov": 1.287730459632, "text": 1.14048200999, "regardless": 1.8489178830700002, "statement": 1.2303097091500002, "know": 0.952919694398, "them": 0.0941833269093, "fastest": 2.66768182419, "contribut": 0.655201578909, "automat": 3.8301700946399997, "overhead": 6.36064795776, "complex": 0.8502416364309999, "instead": 0.9332663008300001, "jmcarpenternumswift": 7.369978720910001, "swifter": 25.81475195612, "plot": 3.36668481018, "run": 0.442714975539, "how": 1.4147008707900002, "repost": 6.83935046985, "million": 1.0938205001880001, "seri": 1.1458038320939998, "\u2265numx": 7.369978720910001, "look": 1.9391600808, "increas": 0.833462156787, "would": 0.0796176279647, "can": 0.324682192788, "converg": 5.455025500360001, "for": 0.0018899423723820002, "pip": 9.82077975822, "benchmark": 11.84693613585, "deep": 1.2886734698, "will": 0.40557306983, "the": 0.0, "dask": 51.58985104637001, "wast": 2.01480854277, "datetimeweekdaynam": 7.369978720910001, "second": 0.21427952675999998, "linear": 2.63027764196, "broad": 1.45323772, "next": 0.402163685499, "below": 3.254506367744, "repres": 0.38507723275, "perform": 1.27854255174, "but": 0.0647694882876, "there": 0.160391571702, "command": 0.9809132407500001, "jason": 4.89853626868, "outcol": 7.369978720910001, "humanreadabled": 7.369978720910001, "amaz": 2.7246267452900006, "num": 0.006299807907940001, "inlin": 4.609968780880001, "exampl": 2.8607787249929997, "has": 0.0854478897096, "date": 2.445404480485, "ifels": 7.369978720910001, "inspect": 2.46396347594, "impress": 1.3621488197100002, "linkedin": 6.414467275880001, "use": 0.4965363354372, "now": 0.149092945021, "tri": 1.23518305832, "code": 2.71203819194, "see": 0.722764756476, "high": 0.27564757308000004, "specifi": 1.93451151621, "bikeprop": 7.369978720910001, "admit": 1.39388165093, "under": 0.07526180538319999, "nonvectoriz": 7.369978720910001, "absolut": 1.67658333914, "also": 0.0293143156, "coupl": 1.18089357972, "readi": 1.6405284994999998, "reason": 0.544301552962, "mean": 1.48368513408, "lognumlognum": 7.369978720910001, "some": 0.0395735090645, "fashion": 1.57940711618, "row": 10.2818239251, "major": 0.138474663439, "may": 0.050709995284400004, "becom": 0.11771217648900001, "candid": 1.50691588861, "event": 0.428982108147, "quick": 1.581455017798, "pleas": 2.21149829955, "easi": 3.3330592702999997, "notebook": 11.081034147, "want": 0.6916366062549999, "better": 0.6964279406, "convert": 1.1860360368, "jcarpenternum": 7.369978720910001, "sinc": 0.0803681994577, "act": 0.358945092473, "manifold": 4.19610026197, "howev": 0.0903151173475, "effect": 0.333830227158, "let": 2.4976051345599997, "scienc": 0.841436178891, "bold": 2.5908552278, "area": 0.327954821122, "def": 17.61882261936, "github": 7.369978720910001, "wish": 3.90674345505, "cython": 7.369978720910001, "which": 0.01553524153629, "what": 0.451774593654, "featur": 0.846774836284, "bikesproport": 14.739957441820001, "vectoriz": 7.369978720910001, "swiftapplydask": 7.369978720910001, "simpl": 2.4464425787799997, "normal": 0.959639378783, "appli": 12.47541284718, "whether": 0.791561189647, "provid": 0.19517784432500002, "one": 0.012510703291, "valu": 0.823193310148, "converttohuman": 14.739957441820001, "either": 0.459327638815, "bikesavail": 22.10993616273, "compil": 1.7398427864200001, "such": 0.059695977806, "becaus": 0.139343158825, "loop": 2.60354038732, "get": 0.579769005782, "option": 2.79692362322, "like": 0.417160729635, "fast": 3.1673900494800002, "maxx": 18.715729828259995, "small": 0.307101805059, "should": 0.509419876758, "add": 1.52875583713, "file": 1.32734588723, "process": 4.750462791225, "both": 0.050842533389300004, "transform": 1.22966322707, "tickmark": 7.369978720910001, "that": 0.05168992893532, "version": 0.697313064259, "includ": 0.0188846813905, "twitter": 3.50295308141, "repositori": 3.8060957569699996, "pdtodatetim": 36.849893604550005, "well": 0.0635144383156, "numx": 13.45058214272, "set": 1.0289760677339999, "wait": 1.51605358782, "ani": 0.502433433464, "choic": 1.14166497543, "time": 0.056057594313, "from": 0.001134108337732, "engin": 2.7143026748279997, "relat": 0.21310030165399999, "chang": 0.166275625058, "gtnumbikesvector": 14.739957441820001, "unawar": 2.81820931165, "vector": 35.796187657669996, "smaller": 0.9530830530519999, "differ": 1.0616056065600001, "same": 0.112059649604, "els": 1.6945957207700002, "between": 0.10186104349589999, "multiprocess": 6.6280413761800006, "return": 1.6656343429600002, "incred": 5.805843674099999, "excel": 1.5778801652, "swiftapplyvector": 7.369978720910001, "fail": 1.313073223146, "all": 0.022805264195599997, "slow": 5.5928272286, "nonvector": 14.739957441820001, "with": 0.00598745856695, "mydf": 7.369978720910001, "think": 1.06717661175, "are": 0.1178698943308, "gtnumbikesvec": 7.369978720910001, "true": 1.876651259268, "appropri": 1.4618957827399999, "day": 0.16865870631700003, "feedback": 3.2048650877999996, "experienc": 1.26876330984, "take": 0.261383924394, "call": 0.0654627744488, "injasonmcarpent": 7.369978720910001, "and": 0.0006928915626996, "veri": 1.15079896619, "essenti": 1.07434378384, "intern": 0.265095377816, "discuss": 0.78698452262, "these": 0.1430672388016, "gain": 0.6142097989249999, "util": 3.0779527924799996, "made": 0.0680215260973, "faster": 6.09011903901, "gtnumbik": 22.10993616273, "master": 1.14779935699, "column": 3.91398855876, "librari": 0.986809980943, "close": 0.250666759864, "then": 0.08303386523089999, "doe": 1.0680834594339998, "even": 0.152388564834, "avail": 1.642363758867, "bikeshar": 7.369978720910001, "give": 0.311392552224, "make": 0.29399063129159997, "easili": 1.3066587367, "onli": 0.025324268329099998, "possibl": 0.697610949782, "size": 1.8276744121219999, "situat": 1.45133658003, "clear": 0.617474727198, "this": 0.0416509395775, "packag": 4.115516898380001, "comment": 2.23653506908, "data": 19.4691293568, "oper": 2.648057786082, "fals": 1.8271477773099998, "their": 0.030721010245400002, "method": 1.888923217682, "scale": 2.64190612656, "machin": 1.39235958062, "into": 0.0298257264574, "bio": 3.7456377879300002, "instal": 2.6632611758, "must": 0.653383947388, "origin": 0.128612437587, "learn": 1.68550412949, "cost": 0.84129007618, "quantiti": 1.9786264883900002, "figur": 1.4203442243200002, "datetim": 7.369978720910001, "import": 0.585636554132, "first": 0.02276186943648, "everi": 0.391485427421, "leav": 0.507743957229, "have": 0.0295700046824, "tool": 1.60887117963, "interpret": 1.1678481440000001, "not": 0.0155524130075, "measur": 0.880014199726, "larg": 0.34075012121200005, "user": 8.17035242752, "bay": 1.5325398614399999, "line": 0.349430614452, "san": 2.3886387452599998, "when": 0.1233299331504, "wrong": 1.70078769102, "effici": 1.62793753414}, "logidf": {"carpent": 3.1030823934900003, "francisco": 1.6665296351499999, "hour": 0.815190981077, "who": 0.0609002329859, "decid": 0.655322871893, "univers": 0.222262105686, "awar": 1.45323772, "permiss": 1.8373800586400002, "numm": 2.93797215393, "here": 0.8850381883700001, "lognum": 6.964513612799999, "form": 0.120053184191, "rememb": 1.5867691126199999, "fastai": 7.369978720910001, "speed": 1.3533338752700002, "swiftappli": 7.369978720910001, "comput": 1.36806891594, "panda": 4.7167367562999996, "categori": 1.38176946652, "datafram": 7.369978720910001, "number": 0.0966085784186, "contain": 0.468845318236, "parallel": 1.52151886822, "dataset": 5.26584456664, "about": 0.0628434774746, "function": 0.914465741594, "numba": 7.369978720910001, "usag": 1.86059038428, "python": 4.03065674296, "manner": 1.36905901503, "adapt": 1.2007864860200002, "understand": 1.0880858756799998, "precious": 3.14168618618, "abov": 0.643865229816, "text": 1.14048200999, "regardless": 1.8489178830700002, "statement": 1.2303097091500002, "know": 0.952919694398, "them": 0.0941833269093, "fastest": 2.66768182419, "contribut": 0.655201578909, "automat": 1.9150850473199998, "overhead": 3.18032397888, "complex": 0.8502416364309999, "instead": 0.46663315041500003, "jmcarpenternumswift": 7.369978720910001, "swifter": 6.45368798903, "plot": 1.68334240509, "run": 0.442714975539, "how": 0.47156695693000006, "repost": 6.83935046985, "million": 0.5469102500940001, "seri": 0.38193461069799994, "\u2265numx": 7.369978720910001, "look": 0.6463866936, "increas": 0.277820718929, "would": 0.0796176279647, "can": 0.162341096394, "converg": 2.7275127501800003, "for": 0.00031499039539700004, "pip": 4.91038987911, "benchmark": 3.9489787119499997, "deep": 1.2886734698, "will": 0.202786534915, "the": 0.0, "dask": 7.369978720910001, "wast": 2.01480854277, "datetimeweekdaynam": 7.369978720910001, "second": 0.10713976337999999, "linear": 2.63027764196, "broad": 1.45323772, "next": 0.402163685499, "below": 0.813626591936, "repres": 0.38507723275, "perform": 0.42618085058, "but": 0.0161923720719, "there": 0.0400978929255, "command": 0.9809132407500001, "jason": 2.44926813434, "outcol": 7.369978720910001, "humanreadabled": 7.369978720910001, "amaz": 2.7246267452900006, "num": 0.00031499039539700004, "inlin": 4.609968780880001, "exampl": 0.40868267499899996, "has": 0.0427239448548, "date": 0.489080896097, "ifels": 7.369978720910001, "inspect": 2.46396347594, "impress": 1.3621488197100002, "linkedin": 6.414467275880001, "use": 0.0292080197316, "now": 0.149092945021, "tri": 0.61759152916, "code": 1.35601909597, "see": 0.240921585492, "high": 0.13782378654000002, "specifi": 1.93451151621, "bikeprop": 7.369978720910001, "admit": 1.39388165093, "under": 0.07526180538319999, "nonvectoriz": 7.369978720910001, "absolut": 1.67658333914, "also": 0.0146571578, "coupl": 1.18089357972, "readi": 1.6405284994999998, "reason": 0.544301552962, "mean": 0.37092128352, "lognumlognum": 7.369978720910001, "some": 0.0395735090645, "fashion": 1.57940711618, "row": 1.71363732085, "major": 0.138474663439, "may": 0.050709995284400004, "becom": 0.11771217648900001, "candid": 1.50691588861, "event": 0.428982108147, "quick": 0.790727508899, "pleas": 2.21149829955, "easi": 1.6665296351499999, "notebook": 3.693678049, "want": 0.6916366062549999, "better": 0.6964279406, "convert": 1.1860360368, "jcarpenternum": 7.369978720910001, "sinc": 0.0803681994577, "act": 0.358945092473, "manifold": 4.19610026197, "howev": 0.0903151173475, "effect": 0.333830227158, "let": 1.2488025672799998, "scienc": 0.841436178891, "bold": 2.5908552278, "area": 0.327954821122, "def": 4.40470565484, "github": 7.369978720910001, "wish": 1.30224781835, "cython": 7.369978720910001, "which": 0.00517841384543, "what": 0.225887296827, "featur": 0.423387418142, "bikesproport": 7.369978720910001, "vectoriz": 7.369978720910001, "swiftapplydask": 7.369978720910001, "simpl": 1.2232212893899999, "normal": 0.959639378783, "appli": 0.8316941898119999, "whether": 0.791561189647, "provid": 0.19517784432500002, "one": 0.0062553516455, "valu": 0.823193310148, "converttohuman": 7.369978720910001, "either": 0.459327638815, "bikesavail": 7.369978720910001, "compil": 1.7398427864200001, "such": 0.059695977806, "becaus": 0.139343158825, "loop": 2.60354038732, "get": 0.579769005782, "option": 1.39846181161, "like": 0.139053576545, "fast": 1.5836950247400001, "maxx": 6.238576609419999, "small": 0.307101805059, "should": 0.509419876758, "add": 1.52875583713, "file": 1.32734588723, "process": 0.527829199025, "both": 0.050842533389300004, "transform": 1.22966322707, "tickmark": 7.369978720910001, "that": 0.00397614837964, "version": 0.697313064259, "includ": 0.0188846813905, "twitter": 3.50295308141, "repositori": 3.8060957569699996, "pdtodatetim": 7.369978720910001, "well": 0.0635144383156, "numx": 3.36264553568, "set": 0.171496011289, "wait": 1.51605358782, "ani": 0.125608358366, "choic": 1.14166497543, "time": 0.0112115188626, "from": 0.000567054168866, "engin": 0.904767558276, "relat": 0.21310030165399999, "chang": 0.166275625058, "gtnumbikesvector": 7.369978720910001, "unawar": 2.81820931165, "vector": 3.25419887797, "smaller": 0.9530830530519999, "differ": 0.212321121312, "same": 0.112059649604, "els": 1.6945957207700002, "between": 0.033953681165299995, "multiprocess": 6.6280413761800006, "return": 0.333126868592, "incred": 2.9029218370499996, "excel": 1.5778801652, "swiftapplyvector": 7.369978720910001, "fail": 0.656536611573, "all": 0.011402632097799998, "slow": 1.39820680715, "nonvector": 7.369978720910001, "with": 0.00119749171339, "mydf": 7.369978720910001, "think": 1.06717661175, "are": 0.0294674735827, "gtnumbikesvec": 7.369978720910001, "true": 0.938325629634, "appropri": 1.4618957827399999, "day": 0.16865870631700003, "feedback": 3.2048650877999996, "experienc": 1.26876330984, "take": 0.130691962197, "call": 0.0654627744488, "injasonmcarpent": 7.369978720910001, "and": 6.29901420636e-05, "veri": 0.230159793238, "essenti": 1.07434378384, "intern": 0.265095377816, "discuss": 0.78698452262, "these": 0.0715336194008, "gain": 0.6142097989249999, "util": 1.5389763962399998, "made": 0.0680215260973, "faster": 2.03003967967, "gtnumbik": 7.369978720910001, "master": 1.14779935699, "column": 1.95699427938, "librari": 0.986809980943, "close": 0.250666759864, "then": 0.08303386523089999, "doe": 0.5340417297169999, "even": 0.152388564834, "avail": 0.547454586289, "bikeshar": 7.369978720910001, "give": 0.311392552224, "make": 0.07349765782289999, "easili": 1.3066587367, "onli": 0.025324268329099998, "possibl": 0.348805474891, "size": 0.9138372060609999, "situat": 0.725668290015, "clear": 0.617474727198, "this": 0.0037864490525, "packag": 2.0577584491900005, "comment": 1.11826753454, "data": 1.2168205848, "oper": 0.441342964347, "fals": 1.8271477773099998, "their": 0.015360505122700001, "method": 0.944461608841, "scale": 1.32095306328, "machin": 1.39235958062, "into": 0.0149128632287, "bio": 3.7456377879300002, "instal": 1.3316305879, "must": 0.653383947388, "origin": 0.128612437587, "learn": 0.842752064745, "cost": 0.84129007618, "quantiti": 1.9786264883900002, "figur": 0.7101721121600001, "datetim": 7.369978720910001, "import": 0.292818277066, "first": 0.0075872898121599995, "everi": 0.391485427421, "leav": 0.507743957229, "have": 0.0147850023412, "tool": 1.60887117963, "interpret": 1.1678481440000001, "not": 0.0155524130075, "measur": 0.880014199726, "larg": 0.17037506060600002, "user": 2.04258810688, "bay": 1.5325398614399999, "line": 0.349430614452, "san": 1.1943193726299999, "when": 0.0205549888584, "wrong": 1.70078769102, "effici": 1.62793753414}, "freq": {"carpent": 2, "francisco": 2, "hour": 1, "who": 1, "decid": 1, "univers": 2, "awar": 1, "permiss": 1, "numm": 2, "here": 3, "lognum": 3, "form": 1, "rememb": 1, "fastai": 1, "speed": 4, "swiftappli": 17, "comput": 2, "panda": 16, "categori": 1, "datafram": 3, "number": 2, "contain": 1, "parallel": 8, "dataset": 1, "about": 1, "function": 21, "numba": 1, "usag": 1, "python": 4, "manner": 2, "adapt": 1, "understand": 1, "precious": 1, "abov": 2, "text": 1, "regardless": 1, "statement": 1, "know": 1, "them": 1, "fastest": 1, "contribut": 1, "automat": 2, "overhead": 2, "complex": 1, "instead": 2, "jmcarpenternumswift": 1, "swifter": 4, "plot": 2, "run": 1, "how": 3, "repost": 1, "million": 2, "seri": 3, "\u2265numx": 1, "look": 3, "increas": 3, "would": 1, "can": 2, "converg": 2, "for": 6, "pip": 2, "benchmark": 3, "deep": 1, "will": 2, "the": 34, "dask": 7, "wast": 1, "datetimeweekdaynam": 1, "second": 2, "linear": 1, "broad": 1, "next": 1, "below": 4, "repres": 1, "perform": 3, "but": 4, "there": 4, "command": 1, "jason": 2, "outcol": 1, "humanreadabled": 1, "amaz": 1, "num": 20, "inlin": 1, "exampl": 7, "has": 2, "date": 5, "ifels": 1, "inspect": 1, "impress": 1, "linkedin": 1, "use": 17, "now": 1, "tri": 2, "code": 2, "see": 3, "high": 2, "specifi": 1, "bikeprop": 1, "admit": 1, "under": 1, "nonvectoriz": 1, "absolut": 1, "also": 2, "coupl": 1, "readi": 1, "reason": 1, "mean": 4, "lognumlognum": 1, "some": 1, "fashion": 1, "row": 6, "major": 1, "may": 1, "becom": 1, "candid": 1, "event": 1, "quick": 2, "pleas": 1, "easi": 2, "notebook": 3, "want": 1, "better": 1, "convert": 1, "jcarpenternum": 1, "sinc": 1, "act": 1, "manifold": 1, "howev": 1, "effect": 1, "let": 2, "scienc": 1, "bold": 1, "area": 1, "def": 4, "github": 1, "wish": 3, "cython": 1, "which": 3, "what": 2, "featur": 2, "bikesproport": 2, "vectoriz": 1, "swiftapplydask": 1, "simpl": 2, "normal": 1, "appli": 15, "whether": 1, "provid": 1, "one": 2, "valu": 1, "converttohuman": 2, "either": 1, "bikesavail": 3, "compil": 1, "such": 1, "becaus": 1, "loop": 1, "get": 1, "option": 2, "like": 3, "fast": 2, "maxx": 3, "small": 1, "should": 1, "add": 1, "file": 1, "process": 9, "both": 1, "transform": 1, "tickmark": 1, "that": 13, "version": 1, "includ": 1, "twitter": 1, "repositori": 1, "pdtodatetim": 5, "well": 1, "numx": 4, "set": 6, "wait": 1, "ani": 4, "choic": 1, "time": 5, "from": 2, "engin": 3, "relat": 1, "chang": 1, "gtnumbikesvector": 2, "unawar": 1, "vector": 11, "smaller": 1, "differ": 5, "same": 1, "els": 1, "between": 3, "multiprocess": 1, "return": 5, "incred": 2, "excel": 1, "swiftapplyvector": 1, "fail": 2, "all": 2, "slow": 4, "nonvector": 2, "with": 5, "mydf": 1, "think": 1, "are": 4, "gtnumbikesvec": 1, "true": 2, "appropri": 1, "day": 1, "feedback": 1, "experienc": 1, "take": 2, "call": 1, "injasonmcarpent": 1, "and": 11, "veri": 5, "essenti": 1, "intern": 1, "discuss": 1, "these": 2, "gain": 1, "util": 2, "made": 1, "faster": 3, "gtnumbik": 3, "master": 1, "column": 2, "librari": 1, "close": 1, "then": 1, "doe": 2, "even": 1, "avail": 3, "bikeshar": 1, "give": 1, "make": 4, "easili": 1, "onli": 1, "possibl": 2, "size": 2, "situat": 2, "clear": 1, "this": 11, "packag": 2, "comment": 2, "data": 16, "oper": 6, "fals": 1, "their": 2, "method": 2, "scale": 2, "machin": 1, "into": 2, "bio": 1, "instal": 2, "must": 1, "origin": 1, "learn": 2, "cost": 1, "quantiti": 1, "figur": 2, "datetim": 1, "import": 2, "first": 3, "everi": 1, "leav": 1, "have": 2, "tool": 1, "interpret": 1, "not": 1, "measur": 1, "larg": 2, "user": 4, "bay": 1, "line": 1, "san": 2, "when": 6, "wrong": 1, "effici": 1}, "idf": {"carpent": 22.266479663400002, "francisco": 5.2937645882, "hour": 2.25960717336, "who": 1.06279287723, "decid": 1.9257641921400002, "univers": 1.24889867841, "awar": 4.27693965517, "permiss": 6.280063291139999, "numm": 18.8775267539, "here": 2.42307692308, "lognum": 1058.4, "form": 1.12755681818, "rememb": 4.88793103448, "fastai": 1587.6, "speed": 3.8703071672400005, "swiftappli": 1587.6, "comput": 3.9277585353800006, "panda": 111.802816901, "categori": 3.98194130926, "datafram": 1587.6, "number": 1.10142916609, "contain": 1.59814777532, "parallel": 4.57917507932, "dataset": 193.609756098, "about": 1.06486015159, "function": 2.495441685, "numba": 1587.6, "usag": 6.427530364369999, "python": 56.2978723404, "manner": 3.93164933135, "adapt": 3.32272917539, "understand": 2.96858638743, "precious": 23.1428571429, "abov": 1.90382539873, "text": 3.12827586207, "regardless": 6.35294117647, "statement": 3.42228928648, "know": 2.59327017315, "them": 1.09876115994, "fastest": 14.4065335753, "contribut": 1.9255306246200001, "automat": 6.787516032490001, "overhead": 24.054545454499998, "complex": 2.34021226415, "instead": 1.59461631177, "jmcarpenternumswift": 1587.6, "swifter": 635.04, "plot": 5.383519837230001, "run": 1.55692850838, "how": 1.60250328051, "repost": 933.882352941, "million": 1.7279059643, "seri": 1.46511627907, "\u2265numx": 1587.6, "look": 1.9086318826599997, "increas": 1.32024948025, "would": 1.0828729281799998, "can": 1.17626139142, "converg": 15.2947976879, "for": 1.00031504001, "pip": 135.692307692, "benchmark": 51.8823529412, "deep": 3.6279707495399998, "will": 1.22481098596, "the": 1.0, "dask": 1587.6, "wast": 7.499291450169999, "datetimeweekdaynam": 1587.6, "second": 1.1130898128, "linear": 13.8776223776, "broad": 4.27693965517, "next": 1.4950560316400001, "below": 2.25607503197, "repres": 1.46972782818, "perform": 1.5313977042500002, "but": 1.01632417899, "there": 1.04091266719, "command": 2.66689064337, "jason": 11.579868709000001, "outcol": 1587.6, "humanreadabled": 1587.6, "amaz": 15.250720461099998, "num": 1.00031504001, "inlin": 100.481012658, "exampl": 1.50483412322, "has": 1.0436497502, "date": 1.63081664099, "ifels": 1587.6, "inspect": 11.7512953368, "impress": 3.90457452041, "linkedin": 610.615384615, "use": 1.0296387573799999, "now": 1.160780873, "tri": 1.8544562551099997, "code": 3.8807137619199996, "see": 1.27242125511, "high": 1.14777327935, "specifi": 6.920662598080001, "bikeprop": 1587.6, "admit": 4.03046458492, "under": 1.0781663837, "nonvectoriz": 1587.6, "absolut": 5.3472549680000006, "also": 1.01476510067, "coupl": 3.2572835453400004, "readi": 5.15789473684, "reason": 1.72340425532, "mean": 1.44906900329, "lognumlognum": 1587.6, "some": 1.04036697248, "fashion": 4.85207823961, "row": 5.549108703250001, "major": 1.14852058164, "may": 1.05201775893, "becom": 1.12492028626, "candid": 4.51279135873, "event": 1.5356935577500002, "quick": 2.205, "pleas": 9.12938470385, "easi": 5.2937645882, "notebook": 40.1924050633, "want": 1.99698113208, "better": 2.0065722952500002, "convert": 3.2740771293099997, "jcarpenternum": 1587.6, "sinc": 1.08368600683, "act": 1.4318181818200002, "manifold": 66.42677824270001, "howev": 1.0945191313299998, "effect": 1.3963060686000002, "let": 3.48616600791, "scienc": 2.31969608416, "bold": 13.341176470599999, "area": 1.3881262568900001, "def": 81.83505154640001, "github": 1587.6, "wish": 3.67755385685, "cython": 1587.6, "which": 1.005191845, "what": 1.25343439128, "featur": 1.52712581762, "bikesproport": 1587.6, "vectoriz": 1587.6, "swiftapplydask": 1587.6, "simpl": 3.3981164383599998, "normal": 2.61075481006, "appli": 2.2972073506, "whether": 2.20683903253, "provid": 1.21552714187, "one": 1.00627495722, "valu": 2.2777618364400003, "converttohuman": 1587.6, "either": 1.5830092731099998, "bikesavail": 1587.6, "compil": 5.696447793330001, "such": 1.06151377374, "becaus": 1.1495184997499999, "loop": 13.5114893617, "get": 1.78562591385, "option": 4.04896710023, "like": 1.14918566775, "fast": 4.8729281768, "maxx": 512.129032258, "small": 1.3594793629, "should": 1.6643254009900001, "add": 4.61243463103, "file": 3.7710213776699995, "process": 1.69524826482, "both": 1.05215720061, "transform": 3.42007755278, "tickmark": 1587.6, "that": 1.00398406375, "version": 2.0083491461099996, "includ": 1.0190641247799999, "twitter": 33.213389121300004, "repositori": 44.974504249300004, "pdtodatetim": 1587.6, "well": 1.0655748708, "numx": 28.8654545455, "set": 1.18707940781, "wait": 4.55421686747, "ani": 1.13383802314, "choic": 3.1319786940200003, "time": 1.01127460348, "from": 1.00056721497, "engin": 2.47135740971, "relat": 1.23750876919, "chang": 1.1808985421, "gtnumbikesvector": 1587.6, "unawar": 16.746835443, "vector": 25.898858075, "smaller": 2.59369384088, "differ": 1.23654490225, "same": 1.11857958148, "els": 5.44444444444, "between": 1.03453668708, "multiprocess": 756.0, "return": 1.39532431007, "incred": 18.227324913900002, "excel": 4.84467500763, "swiftapplyvector": 1587.6, "fail": 1.9281029876099998, "all": 1.01146788991, "slow": 4.04793472718, "nonvector": 1587.6, "with": 1.0011982089899998, "mydf": 1587.6, "think": 2.90715986083, "are": 1.02990593578, "gtnumbikesvec": 1587.6, "true": 2.55569864778, "appropri": 4.31413043478, "day": 1.18371607516, "feedback": 24.652173913000002, "experienc": 3.5564516129, "take": 1.13961668222, "call": 1.0676529926, "injasonmcarpent": 1587.6, "and": 1.00006299213, "veri": 1.25880114177, "essenti": 2.9280708225700005, "intern": 1.30355530011, "discuss": 2.19676214197, "these": 1.07415426252, "gain": 1.84819557625, "util": 4.65981802172, "made": 1.07038834951, "faster": 7.61438848921, "gtnumbik": 1587.6, "master": 3.15125049623, "column": 7.078020508250001, "librari": 2.68266306185, "close": 1.2848818387799998, "then": 1.08657860516, "doe": 1.70581282905, "even": 1.16461267606, "avail": 1.7288467821, "bikeshar": 1587.6, "give": 1.3653250774, "make": 1.0762660158600001, "easili": 3.6938110749199997, "onli": 1.0256476516600002, "possibl": 1.4173734488, "size": 2.49387370405, "situat": 2.06611140031, "clear": 1.85423966363, "this": 1.00379362671, "packag": 7.828402366860001, "comment": 3.05954904606, "data": 3.37643555934, "oper": 1.55479384977, "fals": 6.21613155834, "their": 1.01547908405, "method": 2.5714285714300003, "scale": 3.7469907953699995, "machin": 4.02433460076, "into": 1.01502461479, "bio": 42.336000000000006, "instal": 3.78721374046, "must": 1.9220338983099996, "origin": 1.13724928367, "learn": 2.32275054865, "cost": 2.31935719503, "quantiti": 7.23280182232, "figur": 2.0343413634, "datetim": 1587.6, "import": 1.3401992233700002, "first": 1.00761614623, "everi": 1.47917637194, "leav": 1.6615384615399997, "have": 1.0148948411399998, "tool": 4.99716713881, "interpret": 3.2150668286799995, "not": 1.01567398119, "measur": 2.41093394077, "larg": 1.18574949585, "user": 7.71053909665, "bay": 4.629921259840001, "line": 1.4182597820299998, "san": 3.30131004367, "when": 1.02076769755, "wrong": 5.478260869570001, "effici": 5.09335899904}}, "html": "<!DOCTYPE html>\n\n<html lang=\"en-US\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head profile=\"http://gmpg.org/xfn/11\">\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n<title>  Swiftapply\u200a \u2013 Automatically efficient pandas apply operations</title>\n<link href=\"/wp-content/themes/kdn17/images/favicon.ico\" rel=\"shortcut icon\"/>\n<link href=\"/wp-content/themes/kdn17/style.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"/wp-content/themes/kdn17/js/jquery-1.9.1.min.js\" type=\"text/javascript\"></script>\n<script src=\"/aps/kda_all.js\" type=\"text/javascript\"></script>\n<link href=\"/feed/\" rel=\"alternate\" title=\"KDnuggets: Analytics, Big Data, Data Mining and Data Science Feed\" type=\"application/rss+xml\"/>\n<link href=\"//s.w.org\" rel=\"dns-prefetch\"/>\n<link href=\"https://www.kdnuggets.com/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/comments/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/2018/04/swiftapply-automatically-efficient-pandas-apply-operations.html/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Swiftapply\u200a \u2013 Automatically efficient pandas apply operations Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-json/\" rel=\"https://api.w.org/\"/>\n<link href=\"https://www.kdnuggets.com/xmlrpc.php?rsd\" rel=\"EditURI\" title=\"RSD\" type=\"application/rsd+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-includes/wlwmanifest.xml\" rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\"/>\n<link href=\"https://www.kdnuggets.com/2018/04/paw-low-prices-mega-paw-end-friday-las-vegas.html\" rel=\"prev\" title=\"Low Prices for Mega-PAW End Friday \u2013 Predictive Analytics World &amp; Deep Learning World in Vegas\"/>\n<link href=\"https://www.kdnuggets.com/2018/04/kdnuggets-recognized-top-data-science-influencer-2018.html\" rel=\"next\" title=\"KDnuggets Recognized as a Top Data Science Influencer for 2018\"/>\n<meta content=\"WordPress 4.9.10\" name=\"generator\">\n<link href=\"https://www.kdnuggets.com/2018/04/swiftapply-automatically-efficient-pandas-apply-operations.html\" rel=\"canonical\"/>\n<link href=\"https://www.kdnuggets.com/?p=80319\" rel=\"shortlink\"/>\n<link href=\"https://www.kdnuggets.com/2018/04/swiftapply-automatically-efficient-pandas-apply-operations.html\" rel=\"canonical\"/>\n<!-- BEGIN ExactMetrics v5.3.7 Universal Analytics - https://exactmetrics.com/ -->\n<script>\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-361129-1', 'auto');\n  ga('send', 'pageview');\n</script>\n<!-- END ExactMetrics Universal Analytics -->\n</meta></head>\n<body class=\"post-template-default single single-post postid-80319 single-format-standard\">\n<div class=\"main_wrapper\"><!-- publ: 24-Apr, 2018  -->\n<div id=\"wrapper\">\n<div id=\"header\">\n<div id=\"header_log\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<h1>KDnuggets</h1>\n<div class=\"text-container\">\n            \u00a0\u00a0<a href=\"/news/subscribe.html\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a> \u00a0|\n <a href=\"https://twitter.com/kdnuggets\" target=\"_blank\"><img alt=\"Twitter\" height=\"48\" src=\"/images/tw_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n <a href=\"https://www.facebook.com/kdnuggets\" target=\"_blank\"><img alt=\"Facebook\" height=\"48\" src=\"/images/fb_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n<a href=\"https://www.linkedin.com/groups/54257/\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"48\" src=\"/images/in_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \n\u00a0|\u00a0 <a href=\"/contact.html\"><b>Contact</b></a>\n</div>\n</div>\n<div class=\"search\">\n<form action=\"/\" id=\"searchform\" method=\"get\">\n<input id=\"s\" name=\"s\" placeholder=\"search KDnuggets\" type=\"text\" value=\"\"/>\n<input type=\"submit\" value=\"Search\"/></form>\n</div>\n<div href=\"#\" id=\"pull\">\n<img class=\"menu\" src=\"/images/menu-30.png\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<img class=\"search-icon\" src=\"/images/search-icon.png\">\n</img></img></div>\n<div id=\"pull-menu\">\n<div class=\"navigation\"><ul class=\"menu\" id=\"menu-menu\"><li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-1070\" id=\"menu-item-1070\"><a href=\"/software/index.html\" title=\"Data Science Software\">SOFTWARE</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13756\" id=\"menu-item-13756\"><a href=\"/news/index.html\" title=\"News\">News/Blog</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-46286\" id=\"menu-item-46286\"><a href=\"/news/top-stories.html\">Top stories</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-42152\" id=\"menu-item-42152\"><a href=\"https://www.kdnuggets.com/opinions/index.html\" title=\"Opinions\">Opinions</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-46415\" id=\"menu-item-46415\"><a href=\"https://www.kdnuggets.com/tutorials/index.html\">Tutorials</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13364\" id=\"menu-item-13364\"><a href=\"/jobs/index.html\" title=\"Jobs in Analytics, Data Science\">JOBS</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-63505\" id=\"menu-item-63505\"><a href=\"https://www.kdnuggets.com/companies/index.html\">Companies</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13366\" id=\"menu-item-13366\"><a href=\"/courses/index.html\">Courses</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-1499\" id=\"menu-item-1499\"><a href=\"https://www.kdnuggets.com/datasets/index.html\">Datasets</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-14286\" id=\"menu-item-14286\"><a href=\"https://www.kdnuggets.com/education/index.html\" title=\"Education in Analytics, Big Data, Data Science\">EDUCATION</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-51558\" id=\"menu-item-51558\"><a href=\"https://www.kdnuggets.com/education/analytics-data-mining-certificates.html\" title=\"Certificates in Analytics, Big Data, Data Science\">Certificates</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-14752\" id=\"menu-item-14752\"><a href=\"/meetings/index.html\">Meetings</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13721\" id=\"menu-item-13721\"><a href=\"/webcasts/index.html\" title=\"Webcasts and Webinars\">Webinars</a></li>\n</ul></div></div>\n</div> <!--#header end-->\n<div id=\"spacer\">\n         \u00a0\n      </div>\n<div id=\"content_wrapper\">\n<div id=\"ad_wrapper\">\n<script type=\"text/javascript\">\n\tjQuery(function() {\n   \t    var pull        = $('#pull');\n            menu        = $('#header .navigation ul');\n            menuImage = $('#header img.menu');\n            mobileMenu        = $('#pull-menu-mobile');\n            search = $('img.search-icon');\n            searchBar = $('div.search');\n            searchClick = false;\n            search.on('click', function() {\n                  searchBar.slideToggle();\n                  searchClick = true;\n            });  \n     \t    $(menuImage).on('click', function(e) {\n\t        //e.preventDefault();\n                if (!searchClick) {\n                  menu.slideToggle();\n                }\n                searchClick = false;\n\t    });\n           /* pullMobile.on('click', function(e) {\n              e.preventDefault();\n                if (!searchClick) {\n                  mobileMenu.slideToggle();\n                }\n                searchClick = false;\n\t    });*/\n            \n\t});\n\tkpath = '/'; kda_top(); kda_sid_init(); kda_sid_n=3;\n\t</script>\n</div> <div class=\"breadcumb\">\n<br/>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2018/index.html\">2018</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/04/index.html\">Apr</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/04/tutorials.html\">Tutorials, Overviews</a> \u00bb Swiftapply\u200a \u2013 Automatically efficient pandas apply operations (\u00a0<a href=\"/2018/n18.html\">18:n18</a>\u00a0)    </div>\n<div class=\"single\" id=\"content\">\n<div id=\"post-header\">\n<h1 id=\"title\">Swiftapply\u200a \u2013 Automatically efficient pandas apply operations</h1>\n<div class=\"pagi\">\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2018/04/paw-low-prices-mega-paw-end-friday-las-vegas.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"> <strong>Previous post</strong></img></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2018/04/kdnuggets-recognized-top-data-science-influencer-2018.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/>\u00a0<br/>\u00a0\n    <div class=\"addthis_native_toolbox\"></div>\n</div>\n<div class=\"tag-data\">Tags: <a href=\"https://www.kdnuggets.com/tag/pandas\" rel=\"tag\">Pandas</a>, <a href=\"https://www.kdnuggets.com/tag/python\" rel=\"tag\">Python</a></div>\n<br/>\n<p class=\"excerpt\">\n     Using Swiftapply, easily apply any function to a pandas dataframe in the fastest available manner.\n  </p>\n</div>\n<div id=\"post-header-ad\">\n<script type=\"text/javascript\">kda_sid_write(1); kda_sid_n=2;</script>\n</div>\n<hr class=\"grey-line\"/><br/>\n<div class=\"post\" id=\"post-\">\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p><b>By <a href=\"https://www.linkedin.com/in/jasonmcarpenter/\" rel=\"noopener noreferrer\" target=\"_blank\">Jason Carpenter</a>, University of San Francisco</b></p>\n<p>Time is precious. There is absolutely no reason to be wasting it waiting for your function to be applied to your pandas series (1 column) or dataframe (&gt;1 columns). Don\u2019t get me wrong, pandas is an amazing tool for python users, and a majority of the time pandas operations are very quick.</p>\n<p>Here, I wish to take the pandas\u00a0<a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.apply.html\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>apply</strong></a>\u00a0function under close inspection. This function is incredibly useful, because it lets you easily apply any function that you\u2019ve specified to your pandas series or dataframe. But there is a cost\u200a\u2014\u200athe apply function essentially acts as a for loop, and\u00a0<a href=\"https://ys-l.github.io/posts/2015/08/28/how-not-to-use-pandas-apply/\" rel=\"noopener noreferrer\" target=\"_blank\">a slow one at that</a>. This means that the apply function is a linear operation, processing your function at O(n) complexity.</p>\n<p>Experienced users of pandas and python may be well aware of the options available to increase the speed of their transformations: vectorize your function, compile it with\u00a0<a href=\"http://cython.org/\" rel=\"noopener noreferrer\" target=\"_blank\">cython</a>\u00a0or\u00a0<a href=\"https://numba.pydata.org/\" rel=\"noopener noreferrer\" target=\"_blank\">numba</a>, or use a parallel processing library such as\u00a0<a href=\"https://dask.pydata.org/en/latest/\" rel=\"noopener noreferrer\" target=\"_blank\">dask</a>\u00a0or\u00a0<a href=\"https://docs.python.org/3.4/library/multiprocessing.html?highlight=process\" rel=\"noopener noreferrer\" target=\"_blank\">multiprocessing</a>. But there is likely a broad category of python users who are either unaware of these options, don\u2019t know how to use them, or don\u2019t want to take the time to add the appropriate function calls to speed up their operations.</p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*A_ULZ1INKLpURq2nL4eAog.png\" width=\"50%\"><br>\n<font size=\"-1\">What do you\u00a0do?</font></br></img></center></p>\n<p>\u00a0</p>\n<h3><strong>swiftapply</strong></h3>\n<p>\u00a0<br>\n<em>It\u2019s highly effective!</em></br></p>\n<p>Swiftapply, available on pip from the\u00a0<a href=\"https://github.com/jmcarpenter2/swifter\" rel=\"noopener noreferrer\" target=\"_blank\">swifter<strong>\u00a0</strong>package</a>, makes it\u00a0<em>easy</em>\u00a0to apply any function to your pandas series or dataframe in the\u00a0<em>fastest\u00a0</em>available manner.</p>\n<p>What does this mean? First, swiftapply tries to run your operation in a vectorized fashion. Failing that, it automatically decides whether it is faster to perform dask parallel processing or use a simple pandas apply.</p>\n<p>So, how do we use it? First, let\u2019s install swifter at the command line.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>$ pip install swifter</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Next, import the function into your python notebook or\u00a0.py file.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>from swifter import swiftapply</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Now, you are ready to use swiftapply.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>myDF['outCol'] = swiftapply(myDF['inCol'], anyfunction)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>\u00a0</p>\n<h3>Examples</h3>\n<p>\u00a0<br/>\n<a href=\"https://nbviewer.jupyter.org/github/jmcarpenter2/swifter/blob/master/examples/swiftapply_examples.ipynb\" rel=\"noopener noreferrer\" target=\"_blank\">This notebook</a>\u00a0gives a couple examples of swiftapply usage on a &gt;71 million rows SF Bay Area Bikeshare data set, but I will also provide examples inline here. All applied functions are in bold.</p>\n<p>Example 1 (vectorized):</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>def <strong>bikes_proportion</strong>(x, max_x):\r\n    return x * 1.0 / max_x\r\n\r\ndata['bike_prop'] = <strong>swiftapply</strong>(data['bikes_available'],\r\n                    <strong>bikes_proportion</strong>,\r\n                    max_x=np.max(data['bikes_available']))</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Example 2 (tries vectorized -&gt; fails -&gt; uses dask parallel processing instead):</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>def <strong>convert_to_human</strong>(datetime):\r\n    return datetime.weekday_name + ', the ' + str(datetime.day) + 'th day of ' + datetime.strftime(\"%B\") + ', ' + str(datetime.year)\r\n\r\ndata['humanreadable_date'] = <strong>swiftapply</strong>(data['date'],\r\n                             <strong>convert_to_human</strong>)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Example 3 (how to make non-vectorized code (13.8s) into vectorized code (231ms)):</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre># Parallel processing b/c if-else statement makes it non-vectorized\r\ndef <strong>gt_5_bikes</strong>(x):\r\n    if x &gt; 5:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n<em># computes in 13.8s\r\n</em>data['gt_5_bikes'] = <strong>swiftapply</strong>(data['bikes_available'], <strong>gt_5_bikes</strong>)\r\n\r\n# Vectorized version\r\ndef <strong>gt_5_bikes_vectorized</strong>(x):\r\n    return np.where(x &gt; 5, True, False)\r\n\r\n<em># computes in 231ms\r\n</em>data['gt_5_bikes_vec'] = <strong>swiftapply</strong>(data['bikes_available'], \r\n                         <strong>gt_5_bikes_vectorized</strong>)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>\u00a0</p>\n<h3>Benchmarks</h3>\n<p>\u00a0<br/>\n<a href=\"https://nbviewer.jupyter.org/github/jmcarpenter2/swifter/blob/master/examples/swiftapply_speedcomparison.ipynb\" rel=\"noopener noreferrer\" target=\"_blank\">This notebook</a>\u00a0contains benchmarks using 4 different functions on the same &gt;71 million rows data set.</p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*jyI1mSzTBu4suXkUqAsikw.png\" width=\"70%\"/><br/>\n<font size=\"-1\">Swiftapply vectorizes when possible for \u2265100x speed\u00a0increase</font></center></p>\n<p>The first benchmark I will discuss is the pd.to_datetime function. Looking at the figures above (time in seconds v. number of rows), and below (log10 of both quantities), it becomes clear that using a pandas apply of pd.to_datetime is an incredibly slow operation (&gt; 1 hour) on a data set of this size. Instead, it would be better to use the vectorized form of the operation, since it is a vectorized function. Swiftapply automatically does this, when possible.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>df['date'].<strong>apply</strong>(<strong>pd.to_datetime</strong>) # very slow\r\n\r\n<strong>pd.to_datetime</strong>(df['date']) # vectorized - very fast\r\n\r\n<strong>swiftapply</strong>(df['date'], <strong>pd.to_datetime</strong>) # also vectorized - very fast</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Below, I\u2019ve included the log10-log10 plot of time (seconds) v. rows so that we can interpret the measurable difference in performance. Remember, this means that every tickmark represents a 10x change in the value. That means that the difference between pandas and dask is 10x, and the difference between pandas and swiftapply/vectorized is 100x.</p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*FUhv0f_JCrhKIi35yYLrGg.png\" width=\"70%\"/><br/>\n<font size=\"-1\">X is 1, 10, 100, 1000,\u00a0\u2026</font></center></p>\n<p>In the event that you wish to apply a function that is not vectorizable, like convert_to_human(datetime) function in example 2, then a choice must be made. Should we use parallel processing (which has some overhead), or a simple pandas apply (which only utilizes 1 CPU, but has no overhead)?</p>\n<p>Looking at the below figure (log10 scale), we can see that in these situations, swiftapply uses pandas apply when it is faster (smaller data sets), and converges to dask parallel processing when that is faster (large data sets). In this manner, the user doesn\u2019t have to think about which method to use, regardless of size of the data set.</p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*w3ZoFCM7bmhvA4OcXuHwVQ.png\" width=\"70%\"/><br/>\n<font size=\"-1\">Swiftapply converges to pandas apply on small datasets and dask parallel processing on large\u00a0ones</font></center></p>\n<p>Admittedly, the difference between swiftapply/dask and pandas doesn\u2019t look very impressive in the above plot when the number of rows is high (log10 rows &gt; 5). However, when we convert it to normal scale below, we see the true performance gain. Even with this slow non-vectorizable function, swiftapply\u2019s utilization of dask parallel processing increases speed by 3x.</p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*Ept6ODYsW1QJrHnjMXhfIw.png\" width=\"70%\"/><br/>\n<font size=\"-1\">This adaptive functionality makes swiftapply an efficient, easy to use apply function for all situations.</font></center></p>\n<p>Please leave a comment if there\u2019s any functionality you\u2019d like to see added, or if you have any feedback.</p>\n<p>If you wish to use or contribute to the package, here is the github repository: <a href=\"https://github.com/jmcarpenter2/swifter\" rel=\"noopener noreferrer\" target=\"_blank\">https://github.com/jmcarpenter2/swifter</a></p>\n<p>LinkedIn:\u00a0<a href=\"https://www.linkedin.com/in/jasonmcarpenter/\" rel=\"noopener noreferrer\" target=\"_blank\">https://www.linkedin.com/in/jasonmcarpenter/</a></p>\n<p>Twitter:\u00a0<a href=\"https://twitter.com/jcarpenter542\" rel=\"noopener noreferrer\" target=\"_blank\">https://twitter.com/jcarpenter542</a></p>\n<p>\u00a0<br/>\n<b>Bio: <a href=\"https://www.linkedin.com/in/jasonmcarpenter/\" rel=\"noopener noreferrer\" target=\"_blank\">Jason Carpenter</a></b> is a Master's Candidate in Data Science at University of San Francisco, and a Machine Learning Engineer Intern at Manifold.</p>\n<p><a href=\"https://medium.com/@jmcarpenter2/swiftapply-automatically-efficient-pandas-apply-operations-50e1058909f9\" rel=\"noopener noreferrer\" target=\"_blank\">Original</a>. Reposted with permission.</p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2018/03/feature-engineering-dates-fastai.html\">Quick Feature Engineering with Dates Using fast.ai</a>\n<li><a href=\"/2018/01/using-excel-pandas.html\">Using Excel with Pandas</a>\n<li><a href=\"/2018/03/understanding-feature-engineering-deep-learning-methods-text-data.html\">Understanding Feature Engineering: Deep Learning Methods for Text Data</a>\n</li></li></li></ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p> <script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets';\n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div>\n<div class=\"page-link\"></div>\n<div class=\"pagi\">\n<hr class=\"grey-line\"/>\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2018/04/paw-low-prices-mega-paw-end-friday-las-vegas.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"/> <strong>Previous post</strong></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2018/04/kdnuggets-recognized-top-data-science-influencer-2018.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/><br/>\n<div>\n<hr class=\"grey-line\"/><br/>\n<h2>Top Stories Past 30 Days</h2>\n<table align=\"center\" cellpadding=\"3\" cellspacing=\"10\" class=\"latn\" width=\"100%\">\n<tr>\n<td valign=\"top\" width=\"50%\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Popular</b></th></tr>\n<tr><td>\n<ol class=\"three_ol\"><li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-1-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-2-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n<li> <a href=\"/2018/05/simplilearn-9-must-have-skills-data-scientist.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-3-simplilearn');\"><b>9 Must-have skills you need to become a Data Scientist, updated</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-4-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/03/another-10-free-must-read-books-for-machine-learning-and-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-5-another-10-books');\"><b>Another 10 Free Must-Read Books for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-6-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/best-data-visualization-techniques.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-7-best-data-viz');\"><b>Best Data Visualization Techniques for small and large data</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td> <td valign=\"top\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Shared</b></th></tr>\n<tr><td><ol class=\"three_ol\">\n<li> <a href=\"/2019/04/another-10-free-must-see-courses-machine-learning-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-1-another-10-courses');\"><b>Another 10 Free Must-See Courses for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-2-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/03/r-vs-python-data-visualization.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-3-r-py-viz');\"><b>R vs Python for Data Visualization</b></a>\n<li> <a href=\"/2019/03/deep-learning-toolset-overview.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-4-dl-toolset');\"><b>The Deep Learning Toolset \u2014 An Overview</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-5-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-6-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-7-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<!--#content end--></div>\n<div id=\"sidebar\">\n<div class=\"latn\">\n<h3><b><a href=\"/news/index.html\">Latest News</a></b></h3>\n<ul style=\"font-size:14px; margin-top:5px\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/datarobot-delivering-trusted-ai-microsoft.html\">Delivering Trusted AI with DataRobot and Microsoft</a><li> <a href=\"https://www.kdnuggets.com/2019/04/formulated-ai-data-production-landscape.html\">AI and the data production landscape</a><li> <a href=\"https://www.kdnuggets.com/2019/04/most-desired-skill-data-science.html\">The most desired skill in data science</a><li> <a href=\"https://www.kdnuggets.com/2019/04/projects-include-data-science-portfolio.html\">Projects to Include in a Data Science Portfolio</a><li> <a href=\"https://www.kdnuggets.com/2019/04/rework-meet-worlds-leading-ai-deep-learning-experts.html\">Meet the World\u2019s Leading AI &amp; Deep Learning ...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/problem-data-science-job-postings.html\">The problem with data science job postings</a></li></li></li></li></li></li></ul>\n</div>\n<div>\n<script type=\"text/javascript\">kda_sid_write(kda_sid_n);</script>\n</div>\n<br/><script src=\"/aps/sbm.js\" type=\"text/javascript\"></script>\n</div>\n</div><div class=\"breadcrumbs_bottom\">\n<div class=\"breadcumb\">\n<br>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2018/index.html\">2018</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/04/index.html\">Apr</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/04/tutorials.html\">Tutorials, Overviews</a> \u00bb Swiftapply\u200a \u2013 Automatically efficient pandas apply operations (\u00a0<a href=\"/2018/n18.html\">18:n18</a>\u00a0)    </br></div>\n</div>\n<!--#content_wrapper end--></div>\n<br>\n<div id=\"footer\">\n<br/>\u00a9 2019 KDnuggets. <a href=\"/about/index.html\">About KDnuggets</a>. \u00a0<a href=\"/news/privacy-policy.html\">Privacy policy</a>. <a href=\"/terms-of-service.html\">Terms of Service</a><br/>\u00a0\n<div class=\"kd_bottom\">\n<div class=\"footer-container\">\n<div class=\"footer-news\">\n<a href=\"/news/subscribe.html\" onclick=\"_gaq.push(['_trackPageview','/x/bot/sub']);\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a>\n</div>\n<div class=\"footer-sm\">\n<a href=\"https://twitter.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/twt']);\" target=\"_blank\"><img height=\"32\" src=\"/images/tw_c48.png\" width=\"32\"/></a>\n<a href=\"https://facebook.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/fb']);\" target=\"_blank\"><img alt=\"Facebook\" height=\"32\" src=\"/images/fb_c48.png\" width=\"32\"/></a>\n<a href=\"https://www.linkedin.com/groups/54257\" onclick=\"_gaq.push(['_trackPageview','/x/bot/in']);\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"32\" src=\"/images/in_c48.png\" width=\"32\"/></a>\n</div>\n</div>\n<div class=\"close-footer\">X</div>\n</div>\n<script type=\"text/javascript\">\n  jQuery('.close-footer').click(\n      function(){       \n         jQuery('.kd_bottom').hide();\n      }\n   );\n</script> </div>\n<div class=\"clear\"><!--blank--></div>\n</br></div>\n<div style=\"display: none;\"><div id=\"boxzilla-box-82996-content\"><script type=\"text/javascript\">(function() {\n\tif (!window.mc4wp) {\n\t\twindow.mc4wp = {\n\t\t\tlisteners: [],\n\t\t\tforms    : {\n\t\t\t\ton: function (event, callback) {\n\t\t\t\t\twindow.mc4wp.listeners.push({\n\t\t\t\t\t\tevent   : event,\n\t\t\t\t\t\tcallback: callback\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})();\n</script><!-- MailChimp for WordPress v4.1.14 - https://wordpress.org/plugins/mailchimp-for-wp/ --><form class=\"mc4wp-form mc4wp-form-77281\" data-id=\"77281\" data-name=\"Subscribe to KDnuggets News\" id=\"mc4wp-form-1\" method=\"post\"><div class=\"mc4wp-form-fields\"><div class=\"header-container\">\n<img align=\"left\" src=\"/wp-content/uploads/envelope.png\"><a href=\"/news/subscribe.html\">Get KDnuggets, a leading newsletter on AI, \r\n  Data Science, and Machine Learning</a>\n</img></div>\n<div class=\"form-fields\">\n<div class=\"field-container\"><label>Email:</label><input maxlength=\"60\" name=\"EMAIL\" placeholder=\"Your email\" required=\"\" size=\"30\" type=\"email\"/></div>\n<div class=\"field-container submit-container\"><div class=\"form-button\" onclick=\"document.getElementById('mc4wp-form-1').submit()\">Sign Up</div></div>\n</div>\n<label style=\"display: none !important;\">Leave this field empty if you're human: <input autocomplete=\"off\" name=\"_mc4wp_honeypot\" tabindex=\"-1\" type=\"text\" value=\"\"/></label><input name=\"_mc4wp_timestamp\" type=\"hidden\" value=\"1556329399\"/><input name=\"_mc4wp_form_id\" type=\"hidden\" value=\"77281\"/><input name=\"_mc4wp_form_element_id\" type=\"hidden\" value=\"mc4wp-form-1\"/></div><div class=\"mc4wp-response\"></div></form><!-- / MailChimp for WordPress Plugin -->\n</div></div><script type=\"text/javascript\">(function() {function addEventListener(element,event,handler) {\n\tif(element.addEventListener) {\n\t\telement.addEventListener(event,handler, false);\n\t} else if(element.attachEvent){\n\t\telement.attachEvent('on'+event,handler);\n\t}\n}function maybePrefixUrlField() {\n\tif(this.value.trim() !== '' && this.value.indexOf('http') !== 0) {\n\t\tthis.value = \"http://\" + this.value;\n\t}\n}\n\nvar urlFields = document.querySelectorAll('.mc4wp-form input[type=\"url\"]');\nif( urlFields && urlFields.length > 0 ) {\n\tfor( var j=0; j < urlFields.length; j++ ) {\n\t\taddEventListener(urlFields[j],'blur',maybePrefixUrlField);\n\t}\n}/* test if browser supports date fields */\nvar testInput = document.createElement('input');\ntestInput.setAttribute('type', 'date');\nif( testInput.type !== 'date') {\n\n\t/* add placeholder & pattern to all date fields */\n\tvar dateFields = document.querySelectorAll('.mc4wp-form input[type=\"date\"]');\n\tfor(var i=0; i<dateFields.length; i++) {\n\t\tif(!dateFields[i].placeholder) {\n\t\t\tdateFields[i].placeholder = 'YYYY-MM-DD';\n\t\t}\n\t\tif(!dateFields[i].pattern) {\n\t\t\tdateFields[i].pattern = '[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])';\n\t\t}\n\t}\n}\n\n})();</script><script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_options = {\"testMode\":\"\",\"boxes\":[{\"id\":82996,\"icon\":\"&times;\",\"content\":\"\",\"css\":{\"background_color\":\"#eeee22\",\"width\":600,\"border_width\":2,\"border_style\":\"double\",\"position\":\"center\"},\"trigger\":{\"method\":\"time_on_page\",\"value\":\"3\"},\"animation\":\"fade\",\"cookie\":{\"triggered\":0,\"dismissed\":336},\"rehide\":true,\"position\":\"center\",\"screenWidthCondition\":{\"condition\":\"larger\",\"value\":500},\"closable\":true,\"post\":{\"id\":82996,\"title\":\"Subscribe to KDnuggets\",\"slug\":\"subscribe-to-kdnuggets\"}}]};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla/assets/js/script.min.js?ver=3.2.5\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_stats_config = {\"ajaxurl\":\"https:\\/\\/www.kdnuggets.com\\/wp-admin\\/admin-ajax.php?action=boxzilla_stats_track\"};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla-stats/assets/js/tracking.min.js?ver=1.0.4\" type=\"text/javascript\"></script>\n<script src=\"https://www.kdnuggets.com/wp-includes/js/wp-embed.min.js?ver=4.9.10\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar mc4wp_forms_config = [];\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/forms-api.min.js?ver=4.1.14\" type=\"text/javascript\"></script>\n<!--[if lte IE 9]>\n<script type='text/javascript' src='https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/third-party/placeholders.min.js?ver=4.1.14'></script>\n<![endif]-->\n<!--/.main_wrapper--></body></html>\n<script src=\"https://s7.addthis.com/js/300/addthis_widget.js#pubid=gpsaddthis\" type=\"text/javascript\"></script>\n\n\n<!-- Dynamic page generated in 0.613 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2019-04-26 21:43:19 -->\n<!-- Compression = gzip -->", "content_tokenized": ["comment", "jason", "carpent", "univers", "san", "francisco", "time", "precious", "there", "absolut", "reason", "wast", "wait", "for", "function", "appli", "panda", "seri", "num", "column", "datafram", "num", "column", "get", "wrong", "panda", "amaz", "tool", "for", "python", "user", "and", "major", "the", "time", "panda", "oper", "are", "veri", "quick", "here", "wish", "take", "the", "panda", "appli", "function", "under", "close", "inspect", "this", "function", "incred", "use", "becaus", "let", "easili", "appli", "ani", "function", "that", "specifi", "panda", "seri", "datafram", "but", "there", "cost", "the", "appli", "function", "essenti", "act", "for", "loop", "and", "slow", "one", "that", "this", "mean", "that", "the", "appli", "function", "linear", "oper", "process", "function", "complex", "experienc", "user", "panda", "and", "python", "may", "well", "awar", "the", "option", "avail", "increas", "the", "speed", "their", "transform", "vector", "function", "compil", "with", "cython", "numba", "use", "parallel", "process", "librari", "such", "dask", "multiprocess", "but", "there", "like", "broad", "categori", "python", "user", "who", "are", "either", "unawar", "these", "option", "know", "how", "use", "them", "want", "take", "the", "time", "add", "the", "appropri", "function", "call", "speed", "their", "oper", "what", "swiftappli", "high", "effect", "swiftappli", "avail", "pip", "from", "the", "swifter", "packag", "make", "easi", "appli", "ani", "function", "panda", "seri", "datafram", "the", "fastest", "avail", "manner", "what", "doe", "this", "mean", "first", "swiftappli", "tri", "run", "oper", "vector", "fashion", "fail", "that", "automat", "decid", "whether", "faster", "perform", "dask", "parallel", "process", "use", "simpl", "panda", "appli", "how", "use", "first", "let", "instal", "swifter", "the", "command", "line", "pip", "instal", "swifter", "next", "import", "the", "function", "into", "python", "notebook", "file", "from", "swifter", "import", "swiftappli", "now", "are", "readi", "use", "swiftappli", "mydf", "outcol", "exampl", "this", "notebook", "give", "coupl", "exampl", "swiftappli", "usag", "num", "million", "row", "bay", "area", "bikeshar", "data", "set", "but", "will", "also", "provid", "exampl", "inlin", "here", "all", "appli", "function", "are", "bold", "exampl", "num", "vector", "def", "bikesproport", "maxx", "return", "num", "maxx", "data", "bikeprop", "swiftappli", "data", "bikesavail", "bikesproport", "maxx", "exampl", "num", "tri", "vector", "fail", "use", "dask", "parallel", "process", "instead", "def", "converttohuman", "datetim", "return", "datetimeweekdaynam", "the", "day", "data", "humanreadabled", "swiftappli", "data", "date", "converttohuman", "exampl", "num", "how", "make", "nonvector", "code", "num", "into", "vector", "code", "numm", "parallel", "process", "ifels", "statement", "make", "nonvector", "def", "gtnumbik", "num", "return", "true", "els", "return", "fals", "comput", "num", "data", "gtnumbik", "swiftappli", "data", "bikesavail", "gtnumbik", "vector", "version", "def", "gtnumbikesvector", "return", "comput", "numm", "data", "gtnumbikesvec", "swiftappli", "data", "bikesavail", "gtnumbikesvector", "benchmark", "this", "notebook", "contain", "benchmark", "use", "num", "differ", "function", "the", "same", "num", "million", "row", "data", "set", "swiftappli", "vector", "when", "possibl", "for", "\u2265numx", "speed", "increas", "the", "first", "benchmark", "will", "discuss", "the", "pdtodatetim", "function", "look", "the", "figur", "abov", "time", "second", "number", "row", "and", "below", "lognum", "both", "quantiti", "becom", "clear", "that", "use", "panda", "appli", "pdtodatetim", "incred", "slow", "oper", "num", "hour", "data", "set", "this", "size", "instead", "would", "better", "use", "the", "vector", "form", "the", "oper", "sinc", "vector", "function", "swiftappli", "automat", "doe", "this", "when", "possibl", "date", "appli", "pdtodatetim", "veri", "slow", "pdtodatetim", "date", "vector", "veri", "fast", "swiftappli", "date", "pdtodatetim", "also", "vector", "veri", "fast", "below", "includ", "the", "lognumlognum", "plot", "time", "second", "row", "that", "can", "interpret", "the", "measur", "differ", "perform", "rememb", "this", "mean", "that", "everi", "tickmark", "repres", "numx", "chang", "the", "valu", "that", "mean", "that", "the", "differ", "between", "panda", "and", "dask", "numx", "and", "the", "differ", "between", "panda", "and", "swiftapplyvector", "numx", "num", "num", "num", "num", "the", "event", "that", "wish", "appli", "function", "that", "not", "vectoriz", "like", "function", "exampl", "num", "then", "choic", "must", "made", "should", "use", "parallel", "process", "which", "has", "some", "overhead", "simpl", "panda", "appli", "which", "onli", "util", "num", "but", "has", "overhead", "look", "the", "below", "figur", "lognum", "scale", "can", "see", "that", "these", "situat", "swiftappli", "use", "panda", "appli", "when", "faster", "smaller", "data", "set", "and", "converg", "dask", "parallel", "process", "when", "that", "faster", "larg", "data", "set", "this", "manner", "the", "user", "have", "think", "about", "which", "method", "use", "regardless", "size", "the", "data", "set", "swiftappli", "converg", "panda", "appli", "small", "dataset", "and", "dask", "parallel", "process", "larg", "one", "admit", "the", "differ", "between", "swiftapplydask", "and", "panda", "look", "veri", "impress", "the", "abov", "plot", "when", "the", "number", "row", "high", "lognum", "row", "num", "howev", "when", "convert", "normal", "scale", "below", "see", "the", "true", "perform", "gain", "even", "with", "this", "slow", "nonvectoriz", "function", "swiftappli", "util", "dask", "parallel", "process", "increas", "speed", "numx", "this", "adapt", "function", "make", "swiftappli", "effici", "easi", "use", "appli", "function", "for", "all", "situat", "pleas", "leav", "comment", "there", "ani", "function", "like", "see", "have", "ani", "feedback", "wish", "use", "contribut", "the", "packag", "here", "the", "github", "repositori", "jmcarpenternumswift", "linkedin", "injasonmcarpent", "twitter", "jcarpenternum", "bio", "jason", "carpent", "master", "candid", "data", "scienc", "univers", "san", "francisco", "and", "machin", "learn", "engin", "intern", "manifold", "origin", "repost", "with", "permiss", "relat", "quick", "featur", "engin", "with", "date", "use", "fastai", "use", "excel", "with", "panda", "understand", "featur", "engin", "deep", "learn", "method", "for", "text", "data"], "timestamp_scraper": 1556371000.934892, "title": "Swiftapply\u200a \u2013 Automatically efficient pandas apply operations", "read_time": 290.4, "content_html": "<div class=\"post\" id=\"post-\">\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p><b>By <a href=\"https://www.linkedin.com/in/jasonmcarpenter/\" rel=\"noopener noreferrer\" target=\"_blank\">Jason Carpenter</a>, University of San Francisco</b></p>\n<p>Time is precious. There is absolutely no reason to be wasting it waiting for your function to be applied to your pandas series (1 column) or dataframe (&gt;1 columns). Don\u2019t get me wrong, pandas is an amazing tool for python users, and a majority of the time pandas operations are very quick.</p>\n<p>Here, I wish to take the pandas\u00a0<a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.apply.html\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>apply</strong></a>\u00a0function under close inspection. This function is incredibly useful, because it lets you easily apply any function that you\u2019ve specified to your pandas series or dataframe. But there is a cost\u200a\u2014\u200athe apply function essentially acts as a for loop, and\u00a0<a href=\"https://ys-l.github.io/posts/2015/08/28/how-not-to-use-pandas-apply/\" rel=\"noopener noreferrer\" target=\"_blank\">a slow one at that</a>. This means that the apply function is a linear operation, processing your function at O(n) complexity.</p>\n<p>Experienced users of pandas and python may be well aware of the options available to increase the speed of their transformations: vectorize your function, compile it with\u00a0<a href=\"http://cython.org/\" rel=\"noopener noreferrer\" target=\"_blank\">cython</a>\u00a0or\u00a0<a href=\"https://numba.pydata.org/\" rel=\"noopener noreferrer\" target=\"_blank\">numba</a>, or use a parallel processing library such as\u00a0<a href=\"https://dask.pydata.org/en/latest/\" rel=\"noopener noreferrer\" target=\"_blank\">dask</a>\u00a0or\u00a0<a href=\"https://docs.python.org/3.4/library/multiprocessing.html?highlight=process\" rel=\"noopener noreferrer\" target=\"_blank\">multiprocessing</a>. But there is likely a broad category of python users who are either unaware of these options, don\u2019t know how to use them, or don\u2019t want to take the time to add the appropriate function calls to speed up their operations.</p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*A_ULZ1INKLpURq2nL4eAog.png\" width=\"50%\"><br>\n<font size=\"-1\">What do you\u00a0do?</font></br></img></center></p>\n<p>\u00a0</p>\n<h3><strong>swiftapply</strong></h3>\n<p>\u00a0<br>\n<em>It\u2019s highly effective!</em></br></p>\n<p>Swiftapply, available on pip from the\u00a0<a href=\"https://github.com/jmcarpenter2/swifter\" rel=\"noopener noreferrer\" target=\"_blank\">swifter<strong>\u00a0</strong>package</a>, makes it\u00a0<em>easy</em>\u00a0to apply any function to your pandas series or dataframe in the\u00a0<em>fastest\u00a0</em>available manner.</p>\n<p>What does this mean? First, swiftapply tries to run your operation in a vectorized fashion. Failing that, it automatically decides whether it is faster to perform dask parallel processing or use a simple pandas apply.</p>\n<p>So, how do we use it? First, let\u2019s install swifter at the command line.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>$ pip install swifter</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Next, import the function into your python notebook or\u00a0.py file.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>from swifter import swiftapply</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Now, you are ready to use swiftapply.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>myDF['outCol'] = swiftapply(myDF['inCol'], anyfunction)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>\u00a0</p>\n<h3>Examples</h3>\n<p>\u00a0<br/>\n<a href=\"https://nbviewer.jupyter.org/github/jmcarpenter2/swifter/blob/master/examples/swiftapply_examples.ipynb\" rel=\"noopener noreferrer\" target=\"_blank\">This notebook</a>\u00a0gives a couple examples of swiftapply usage on a &gt;71 million rows SF Bay Area Bikeshare data set, but I will also provide examples inline here. All applied functions are in bold.</p>\n<p>Example 1 (vectorized):</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>def <strong>bikes_proportion</strong>(x, max_x):\r\n    return x * 1.0 / max_x\r\n\r\ndata['bike_prop'] = <strong>swiftapply</strong>(data['bikes_available'],\r\n                    <strong>bikes_proportion</strong>,\r\n                    max_x=np.max(data['bikes_available']))</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Example 2 (tries vectorized -&gt; fails -&gt; uses dask parallel processing instead):</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>def <strong>convert_to_human</strong>(datetime):\r\n    return datetime.weekday_name + ', the ' + str(datetime.day) + 'th day of ' + datetime.strftime(\"%B\") + ', ' + str(datetime.year)\r\n\r\ndata['humanreadable_date'] = <strong>swiftapply</strong>(data['date'],\r\n                             <strong>convert_to_human</strong>)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Example 3 (how to make non-vectorized code (13.8s) into vectorized code (231ms)):</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre># Parallel processing b/c if-else statement makes it non-vectorized\r\ndef <strong>gt_5_bikes</strong>(x):\r\n    if x &gt; 5:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n<em># computes in 13.8s\r\n</em>data['gt_5_bikes'] = <strong>swiftapply</strong>(data['bikes_available'], <strong>gt_5_bikes</strong>)\r\n\r\n# Vectorized version\r\ndef <strong>gt_5_bikes_vectorized</strong>(x):\r\n    return np.where(x &gt; 5, True, False)\r\n\r\n<em># computes in 231ms\r\n</em>data['gt_5_bikes_vec'] = <strong>swiftapply</strong>(data['bikes_available'], \r\n                         <strong>gt_5_bikes_vectorized</strong>)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>\u00a0</p>\n<h3>Benchmarks</h3>\n<p>\u00a0<br/>\n<a href=\"https://nbviewer.jupyter.org/github/jmcarpenter2/swifter/blob/master/examples/swiftapply_speedcomparison.ipynb\" rel=\"noopener noreferrer\" target=\"_blank\">This notebook</a>\u00a0contains benchmarks using 4 different functions on the same &gt;71 million rows data set.</p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*jyI1mSzTBu4suXkUqAsikw.png\" width=\"70%\"/><br/>\n<font size=\"-1\">Swiftapply vectorizes when possible for \u2265100x speed\u00a0increase</font></center></p>\n<p>The first benchmark I will discuss is the pd.to_datetime function. Looking at the figures above (time in seconds v. number of rows), and below (log10 of both quantities), it becomes clear that using a pandas apply of pd.to_datetime is an incredibly slow operation (&gt; 1 hour) on a data set of this size. Instead, it would be better to use the vectorized form of the operation, since it is a vectorized function. Swiftapply automatically does this, when possible.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>df['date'].<strong>apply</strong>(<strong>pd.to_datetime</strong>) # very slow\r\n\r\n<strong>pd.to_datetime</strong>(df['date']) # vectorized - very fast\r\n\r\n<strong>swiftapply</strong>(df['date'], <strong>pd.to_datetime</strong>) # also vectorized - very fast</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>Below, I\u2019ve included the log10-log10 plot of time (seconds) v. rows so that we can interpret the measurable difference in performance. Remember, this means that every tickmark represents a 10x change in the value. That means that the difference between pandas and dask is 10x, and the difference between pandas and swiftapply/vectorized is 100x.</p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*FUhv0f_JCrhKIi35yYLrGg.png\" width=\"70%\"/><br/>\n<font size=\"-1\">X is 1, 10, 100, 1000,\u00a0\u2026</font></center></p>\n<p>In the event that you wish to apply a function that is not vectorizable, like convert_to_human(datetime) function in example 2, then a choice must be made. Should we use parallel processing (which has some overhead), or a simple pandas apply (which only utilizes 1 CPU, but has no overhead)?</p>\n<p>Looking at the below figure (log10 scale), we can see that in these situations, swiftapply uses pandas apply when it is faster (smaller data sets), and converges to dask parallel processing when that is faster (large data sets). In this manner, the user doesn\u2019t have to think about which method to use, regardless of size of the data set.</p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*w3ZoFCM7bmhvA4OcXuHwVQ.png\" width=\"70%\"/><br/>\n<font size=\"-1\">Swiftapply converges to pandas apply on small datasets and dask parallel processing on large\u00a0ones</font></center></p>\n<p>Admittedly, the difference between swiftapply/dask and pandas doesn\u2019t look very impressive in the above plot when the number of rows is high (log10 rows &gt; 5). However, when we convert it to normal scale below, we see the true performance gain. Even with this slow non-vectorizable function, swiftapply\u2019s utilization of dask parallel processing increases speed by 3x.</p>\n<p><center><img src=\"https://cdn-images-1.medium.com/max/800/1*Ept6ODYsW1QJrHnjMXhfIw.png\" width=\"70%\"/><br/>\n<font size=\"-1\">This adaptive functionality makes swiftapply an efficient, easy to use apply function for all situations.</font></center></p>\n<p>Please leave a comment if there\u2019s any functionality you\u2019d like to see added, or if you have any feedback.</p>\n<p>If you wish to use or contribute to the package, here is the github repository: <a href=\"https://github.com/jmcarpenter2/swifter\" rel=\"noopener noreferrer\" target=\"_blank\">https://github.com/jmcarpenter2/swifter</a></p>\n<p>LinkedIn:\u00a0<a href=\"https://www.linkedin.com/in/jasonmcarpenter/\" rel=\"noopener noreferrer\" target=\"_blank\">https://www.linkedin.com/in/jasonmcarpenter/</a></p>\n<p>Twitter:\u00a0<a href=\"https://twitter.com/jcarpenter542\" rel=\"noopener noreferrer\" target=\"_blank\">https://twitter.com/jcarpenter542</a></p>\n<p>\u00a0<br/>\n<b>Bio: <a href=\"https://www.linkedin.com/in/jasonmcarpenter/\" rel=\"noopener noreferrer\" target=\"_blank\">Jason Carpenter</a></b> is a Master's Candidate in Data Science at University of San Francisco, and a Machine Learning Engineer Intern at Manifold.</p>\n<p><a href=\"https://medium.com/@jmcarpenter2/swiftapply-automatically-efficient-pandas-apply-operations-50e1058909f9\" rel=\"noopener noreferrer\" target=\"_blank\">Original</a>. Reposted with permission.</p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2018/03/feature-engineering-dates-fastai.html\">Quick Feature Engineering with Dates Using fast.ai</a>\n<li><a href=\"/2018/01/using-excel-pandas.html\">Using Excel with Pandas</a>\n<li><a href=\"/2018/03/understanding-feature-engineering-deep-learning-methods-text-data.html\">Understanding Feature Engineering: Deep Learning Methods for Text Data</a>\n</li></li></li></ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p> <script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets';\n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div> ", "website": "kdnuggets"}