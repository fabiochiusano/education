{"content": "comments By George Seif , AI / Machine Learning Engineer Quality code. Lots of people talk about it, but few actually do it right. Most people who code naturally know what quality code should look or\u00a0 feel\u00a0 like. It should be very easy to read and understand quickly, there shouldn\u2019t be any major faults, edge cases should be handled, and it should be \u201cself documenting\u201d. Still, many people miss the mark when trying (hopefully) to write quality code. The cause of the mistakes are understandable in many cases. It can be challenging to predict how people will interpret your code, whether they will find it easy to read or an absolute nightmare. Not only that, once your project gets very big even\u00a0 you \u00a0might not be able to read it! In such a case, it\u2019s always good to establish some principals that you can rely on. Some go-to rules that you can always reference whenever you\u2019re designing or writing code. The following 5 clean coding principals are the ones I code by! They\u2019ve given me a massive productivity boost in my work and helped both myself and my colleagues be able to easily interpret and expand the code base which I\u2019ve worked on. Hopefully they help you code faster and better too! \u00a0 If it isn\u2019t tested, it\u2019s\u00a0broken \u00a0 Test, test, test. We know we should always do it, but sometimes we cut corners so we can push the project out faster. But without thorough testing, how will you 100% \u00a0fully know that the code works? Yes there are very simple pieces of code, but one is always surprised when that crazy edge case comes up that you thought you didn\u2019t need to test for! Do yourself and everyone on your team a favour and regularly test the code you write. You\u2019ll want to test in a\u00a0 coarse to fine\u00a0 style. Start small with unit tests to make sure every small part works on its own. Then slowly start testing the different subsystems together working your way up towards testing the whole new system end to end. Testing in this way allows you to easily track where the system breaks, since you can easily verify each individual component or the small subsystems as the source of any issues. \u00a0 Choose meaningful names \u00a0 This is what makes code self-documenting. When you read over your old code, you shouldn\u2019t have to look over every little comment and run every small piece of code to figure out what it all does! The code should\u00a0 roughly \u00a0read like plain English. This is especially true for variable names, classes, and functions. Those three items should always have names that are self-explanatory. Rather than use a default name like \u201cx\u201d for example, call it \u201cwidth\u201d or \u201cdistance\u201d or whatever the variable is supposed to represent in \u201cread-world\u201d terms. Coding in \u201creal-world\u201d terms will help make your code read in that way \u00a0 Classes and functions should be small and obey the Single Responsibility Principle (SRP) \u00a0 Small classes and functions make code approximately 9832741892374 times easier to read... But seriously they really do. First off, they allow for very isolated unit testing. If the piece of code you are testing is small, it\u2019s easy to source and debug any issues that come up in the test or during deployment. Small classes and functions also allow for better readability. Instead of having a giant block of code with many loops and variables, you can reduce that block to a function that runs several\u00a0 smaller \u00a0functions. You can then name each of those functions according to what they do and voila, human readable code! SRP gives you similar benefits. One responsibility means you only have to test a handful of edge cases and those cases are quite easy to debug. In addition it\u2019s quite easy to name the function so it has real-world meaning. Since it only has one single purpose, it\u2019ll just be named after it\u2019s purpose, rather than trying to name a function that\u2019s trying to accomplish so many different things. \u00a0 Catch and handle exceptions, even if you don\u2019t think you need\u00a0to \u00a0 Exceptions in code are usually edges case or errors that we would like to handle in our own specific way. For example, normally when an error is raised the program will stop; this definitely will not work for code we have deployed to production that is serving users! We\u2019ll want to handle that error separately, perhaps try to see if it\u2019s super critical or if we should just pass over it. You should always be catching and handling exceptions specifically, even if you don\u2019t think you need to. Better to be safe than sorry. Exception handling will give you a better sense of order and control over your code, since you know\u00a0 specifically \u00a0what will happen if a certain exception is triggered or a piece of code fails. Having a deeper understand of your code like this makes it easier to debug and makes your code more fault tolerant. \u00a0 Logs, logs,\u00a0logs \u00a0 Log it. What you may ask?\u00a0\u2026. Everything that\u2019s what! There\u2019s no such thing as too much logs! Logs are your absolute number 1 source for debugging your code and monitoring your application when it\u2019s in production. You should be logging every major \u201cstep\u201d your program takes, any important calculations it makes, any errors, exceptions, or out of the ordinary results. It may also be useful to log the date and time that these events occur for easy tracking. All of this will make it easy to trace exactly which\u00a0 step in the pipeline the program failed . Many common programming languages such as Python come with their own logging libraries that have some very useful functions you can play with. If your application is to run as a SaaS app, then you may want to consider off-device, centralised logging. This way if one of your servers dies you can easily recover the logs! \u00a0 TL;DR \u00a0 (1) If it isn\u2019t tested, it\u2019s broken (2) Choose meaningful names (3) Classes and functions should be small and obey the Single Responsibility Principle (SRP) (4) Catch and handle exceptions, even if you don\u2019t think you need to (5) Logs, logs, logs \u00a0 Like to read about\u00a0tech? Follow me on\u00a0 twitter \u00a0where I post all about the latest and greatest tech! Thanks to\u00a0 David Smooke . \u00a0 Bio: George Seif is a Certified Nerd and AI / Machine Learning Engineer. Original . Reposted with permission. Related: 5 Quick and Easy Data Visualizations in Python with Code The 5 Clustering Algorithms Data Scientists Need to Know Selecting the Best Machine Learning Algorithm for Your Regression Problem", "title_html": "<h1 id=\"title\">5 \u201cClean Code\u201d Tips That Will Dramatically Improve Your Productivity</h1> ", "url": "https://www.kdnuggets.com/2018/10/5-clean-code-tips-dramatically-improve-productivity.html", "tfidf": {"tfidf": {"after": 1.02070207021, "approxim": 2.2132998745299997, "natur": 1.5392670157100001, "boost": 9.16099249856, "understand": 8.90575916229, "who": 1.06279287723, "base": 1.14628158845, "onc": 1.4974533106999999, "too": 3.6317053643, "occur": 1.7453825857499998, "post": 2.23826307627, "play": 1.46390041494, "corner": 5.873473917869999, "project": 3.5069582505000003, "scientist": 4.69426374926, "thank": 6.00681044268, "data": 6.75287111868, "visual": 5.22752716497, "new": 1.0178880554, "clean": 6.86975335353, "addit": 1.24634950542, "regress": 51.2129032258, "human": 1.8965476048299998, "much": 1.1942229577299999, "togeth": 1.58095996813, "than": 3.0983606557499996, "the": 30.0, "specif": 5.615847187829999, "about": 3.19458045477, "function": 27.449858534999997, "deploy": 14.83738317758, "obey": 41.34375, "sens": 2.8365195640499996, "thing": 4.813096862219999, "log": 191.4418604658, "sure": 7.453521126760001, "python": 112.5957446808, "just": 2.67160286074, "seif": 2268.0, "product": 4.86794766966, "onli": 3.0769429549800007, "thought": 1.9854927463699998, "write": 6.172628304810001, "catch": 24.76755070203, "dure": 1.0503473370799998, "slowli": 6.080428954419999, "permiss": 6.280063291139999, "establish": 1.34622233528, "know": 12.96635086575, "readworld": 1134.0, "recov": 4.11188811189, "out": 3.18050083473, "whether": 2.20683903253, "term": 2.79040337464, "princip": 6.7157360405999995, "width": 17.294117647100002, "origin": 1.13724928367, "instead": 1.59461631177, "massiv": 4.22571200426, "start": 2.53347163488, "whenev": 11.622254758399999, "readabl": 149.7735849056, "run": 4.6707855251399995, "how": 3.20500656102, "test": 45.170209205069995, "singl": 4.82846715327, "repost": 933.882352941, "favour": 4.57521613833, "self": 11.972850678699999, "thorough": 10.956521739100001, "quit": 5.769943667100001, "deeper": 15.0769230769, "especi": 1.66712170534, "giant": 6.23566378633, "can": 10.58635252278, "end": 2.21360847742, "georg": 3.7558552164599996, "given": 1.35426085473, "nerd": 260.262295082, "track": 6.255319148940001, "abl": 3.6417020300400003, "critic": 1.67010309278, "will": 11.02329887364, "over": 4.10100096868, "event": 1.5356935577500002, "consid": 1.2397313759200002, "date": 1.63081664099, "individu": 1.8004082558400003, "trigger": 7.91820448878, "see": 1.27242125511, "unit": 2.30789358918, "monitor": 6.05723006486, "algorithm": 55.9014084508, "read": 18.519685039360002, "select": 2.02345144022, "team": 2.2748244734200003, "server": 38.071942446, "but": 5.0816208949499995, "without": 1.29547123623, "definit": 3.24, "need": 7.186311787049999, "exact": 3.46864758575, "there": 3.12273800157, "off": 1.5121440137200002, "issu": 2.87843350558, "these": 1.07415426252, "nightmar": 31.625498008, "num": 11.00346544011, "applic": 6.85344269372, "die": 1.66537291514, "best": 1.5828514456600002, "exampl": 3.00966824644, "big": 2.7400759406299997, "has": 2.0872995004, "have": 7.104263887979998, "stop": 2.1783754116400003, "voila": 1134.0, "realworld": 2268.0, "pass": 1.61818367139, "saa": 360.818181818, "follow": 2.09280253098, "default": 21.1398135819, "tri": 7.417825020439999, "sorri": 39.3945409429, "name": 9.919055883330001, "code": 120.30212661951998, "mistak": 8.71350164654, "usual": 1.72508964468, "coars": 58.1538461538, "good": 1.51981619759, "alway": 12.404740200540001, "plain": 5.49913404919, "realli": 4.7476076555, "number": 1.10142916609, "break": 2.42863698944, "mark": 1.5079787234, "reli": 4.16146788991, "absolut": 10.694509936000001, "also": 2.02953020134, "mani": 5.22133789385, "everyth": 4.81967213115, "mean": 2.89813800658, "style": 2.37807070102, "not": 3.04702194357, "suppos": 4.23021582734, "major": 2.29704116328, "compon": 4.09491875161, "accomplish": 5.17302052786, "surpris": 4.36633663366, "may": 3.15605327679, "perhap": 3.14812611541, "use": 3.0889162721399996, "happen": 2.96359902931, "broken": 8.93918918918, "they": 6.18103951722, "easi": 42.3501167056, "challeng": 2.55816951337, "those": 3.58644578313, "handl": 27.460340993330004, "want": 5.99094339624, "english": 1.7432744043000001, "problem": 1.76674827509, "separ": 1.6012102874399998, "system": 2.77479681902, "colleagu": 8.23443983402, "crazi": 21.3387096774, "class": 10.582588988149999, "choos": 8.35798894446, "piec": 12.96529195592, "actual": 1.87482286254, "work": 6.69120539478, "still": 1.1866357724799999, "ordinari": 6.920662598080001, "which": 2.01038369, "what": 8.77404073896, "such": 3.18454132122, "item": 5.07869481766, "respons": 4.520072126790001, "simpl": 3.3981164383599998, "meaning": 43.6153846154, "refer": 1.30024570025, "three": 1.06621893889, "calcul": 6.12972972973, "one": 5.031374786100001, "purpos": 4.46833661694, "take": 1.13961668222, "hope": 5.01769911504, "accord": 1.27589809531, "rais": 1.9733996271, "order": 1.24625166811, "should": 19.97190481188, "shouldn": 2268.0, "sever": 1.07241286139, "hand": 1.6152202665600002, "sourc": 5.09281437126, "talk": 3.0303493033, "loop": 13.5114893617, "get": 1.78562591385, "easier": 15.68, "like": 6.8951140065, "myself": 14.5517873511, "lot": 4.40877534018, "some": 3.1211009174399997, "push": 3.75141776938, "small": 12.2353142661, "control": 1.46959178006, "both": 1.05215720061, "except": 12.03639120544, "super": 7.380753138080001, "part": 1.04330682789, "document": 2.5409731114, "fault": 27.926121371999997, "that": 18.0717131475, "twitter": 33.213389121300004, "rule": 1.7415533128599998, "whatev": 7.6473988439300005, "offdevic": 1134.0, "languag": 2.29488291414, "caus": 1.38521943984, "ani": 5.6691901157, "when": 5.10383848775, "principl": 6.904109589039999, "think": 8.721479582490002, "time": 2.02254920696, "step": 5.655860349119999, "engin": 4.94271481942, "relat": 1.23750876919, "verifi": 14.2258064516, "similar": 1.37514075357, "edg": 17.82818641212, "smaller": 2.59369384088, "goto": 288.654545455, "differ": 2.4730898045, "variabl": 26.241322314059996, "certifi": 12.782608695699999, "peopl": 4.85281980744, "user": 7.71053909665, "most": 1.02096463023, "safe": 5.02723242559, "certain": 1.8077886586200003, "for": 10.003150400100001, "predict": 5.18484650555, "quick": 4.41, "fail": 3.8562059752199995, "all": 3.03440366973, "everyon": 6.3964544722, "fulli": 2.79015817223, "our": 2.35758835759, "with": 6.007189253939998, "program": 8.08556149732, "trace": 4.4408391608399995, "expand": 2.2260235558000003, "are": 8.23924748624, "true": 2.55569864778, "better": 8.026289181000001, "case": 10.394911607920001, "distanc": 3.4754816112099998, "normal": 2.61075481006, "debug": 721.636363636, "look": 3.8172637653199994, "isol": 4.86397058824, "call": 1.0676529926, "cluster": 12.5007874016, "regular": 2.09418282548, "more": 1.0171706817, "and": 30.0018897639, "reduc": 1.98698372966, "veri": 6.29400570885, "toward": 1.6303142329, "rough": 3.29582727839, "greatest": 3.00738776283, "benefit": 3.06841901817, "yourself": 26.592964824099997, "subsystem": 186.7764705882, "faster": 15.22877697842, "fine": 4.02229541424, "result": 1.14611608432, "librari": 2.68266306185, "toler": 7.751953125, "cut": 2.4663663197099996, "then": 3.25973581548, "smook": 1134.0, "serv": 1.4668760972, "doe": 1.70581282905, "miss": 3.53664513255, "selfexplanatori": 1134.0, "old": 1.52844902282, "littl": 1.5499365420299998, "give": 2.7306501548, "make": 8.610128126880001, "way": 6.0953697305, "whole": 2.29488291414, "feel": 3.1356903021900004, "each": 2.37949640288, "their": 1.01547908405, "few": 1.31729173581, "this": 7.02655538697, "design": 1.45825296225, "error": 24.16438356164, "selfdocu": 1134.0, "serious": 2.583984375, "centralis": 49.6125, "common": 1.4025974025999999, "ask": 2.1744966443, "comment": 6.11909809212, "block": 6.40548718984, "qualiti": 8.798817661200001, "rather": 3.11385701676, "machin": 12.073003802279999, "repres": 1.46972782818, "sometim": 1.7126213592200001, "bio": 42.336000000000006, "come": 3.9849397590299995, "would": 1.0828729281799998, "might": 2.1561863370900003, "yes": 14.1876675603, "sinc": 3.2510580204900004, "right": 1.4054532577899999, "david": 1.84970290108, "where": 2.13430127042, "figur": 2.0343413634, "import": 1.3401992233700002, "first": 1.00761614623, "everi": 5.91670548776, "app": 35.837471783299996, "allow": 3.8148177813300004, "latest": 7.078020508250001, "interpret": 6.430133657359999, "help": 4.19888918277, "easili": 14.775244299679999, "find": 1.7294117647099998, "learn": 6.968251645950001, "pipelin": 32.1376518219, "even": 4.65845070424, "tech": 38.347826087, "own": 3.5353325415600003}, "logtfidf": {"after": 0.020490694648099998, "approxim": 0.7944845577770001, "natur": 0.431306339292, "boost": 2.2149545241900004, "understand": 3.264257627039999, "who": 0.0609002329859, "base": 0.13652330228700002, "onc": 0.403765872355, "too": 1.1931103094439999, "occur": 0.556973778473, "post": 0.8057001527009999, "play": 0.38110439064199997, "corner": 1.77044626763, "project": 1.123203771814, "scientist": 1.54634128444, "thank": 1.7928938993, "data": 2.4336411696, "visual": 1.6539383488600001, "new": 0.0177299468511, "clean": 1.9271282036300001, "addit": 0.220218882972, "regress": 3.9359915164199997, "human": 0.640035183243, "much": 0.17749572930100002, "togeth": 0.458032237308, "than": 0.0967825866546, "the": 0.0, "specif": 1.8809405026230002, "about": 0.18853043242380002, "function": 10.059123157534, "deploy": 4.00800541178, "obey": 6.05754816152, "sens": 1.04257779501, "thing": 1.7563870693599999, "log": 36.61737565094, "sure": 2.0086865552, "python": 8.06131348592, "just": 0.579062868218, "seif": 14.067012968579998, "product": 1.452180409608, "onli": 0.0759728049873, "thought": 0.685867118283, "write": 2.164537319631, "catch": 6.3327662049299995, "dure": 0.0491209066894, "slowli": 1.8050752452, "permiss": 1.8373800586400002, "establish": 0.297302399813, "know": 4.764598471989999, "readworld": 7.033506484289999, "recov": 1.41388231764, "out": 0.1752791727579, "whether": 0.791561189647, "term": 0.6660779670920001, "princip": 2.42261250964, "width": 2.85036642328, "origin": 0.128612437587, "instead": 0.46663315041500003, "massiv": 1.44118776833, "start": 0.472886738582, "whenev": 2.45292177377, "readabl": 8.63195507846, "run": 1.328144926617, "how": 0.9431339138600001, "test": 16.612815430751, "singl": 1.427750307177, "repost": 6.83935046985, "favour": 1.5206539409600002, "self": 2.48264164316, "thorough": 2.39393487158, "quit": 2.11903027368, "deeper": 2.7131653017699997, "especi": 0.511098609709, "giant": 1.83028503479, "can": 1.4610698675459999, "end": 0.202953597236, "georg": 1.260337665552, "given": 0.303255810831, "nerd": 5.561689949730001, "track": 2.28056997014, "abl": 1.19860796495, "critic": 0.512885356729, "will": 1.825078814235, "over": 0.0997468859828, "event": 0.428982108147, "consid": 0.214894723824, "date": 0.489080896097, "individu": 0.588013447985, "trigger": 2.06916447416, "see": 0.240921585492, "unit": 0.286376123634, "monitor": 1.80125261058, "algorithm": 6.66088479036, "read": 6.71514144704, "select": 0.704804687133, "team": 0.821902894886, "server": 3.6394775921, "but": 0.0809618603595, "without": 0.258874517941, "definit": 1.1755733298, "need": 1.81370081721, "exact": 1.2437647732500001, "there": 0.12029367877649999, "off": 0.41352852038800003, "issu": 0.728198087868, "these": 0.0715336194008, "nightmar": 3.45396369421, "num": 0.0034648943493670007, "applic": 2.46320785698, "die": 0.510049071409, "best": 0.459227932947, "exampl": 0.8173653499979999, "big": 1.00798563557, "has": 0.0854478897096, "have": 0.1034950163884, "stop": 0.778579374963, "voila": 7.033506484289999, "realworld": 14.067012968579998, "pass": 0.48130432974, "saa": 5.8883741799800005, "follow": 0.09071382218839999, "default": 3.0511581621399997, "tri": 2.47036611664, "sorri": 3.6736272519599997, "name": 0.8750984974587002, "code": 42.03659197507, "mistak": 2.1648737360799997, "usual": 0.545279017064, "coars": 4.06309201872, "good": 0.418589404907, "alway": 4.3579152274320005, "plain": 1.70459063424, "realli": 1.5576408397, "number": 0.0966085784186, "break": 0.88733019029, "mark": 0.410770160338, "reli": 1.42586787018, "absolut": 3.35316667828, "also": 0.0293143156, "mani": 0.2165787906105, "everyth": 1.57270590317, "mean": 0.74184256704, "style": 0.866289529121, "not": 0.0466572390225, "suppos": 1.44225301477, "major": 0.276949326878, "compon": 1.40974687623, "accomplish": 1.64345675928, "surpris": 1.47392435861, "may": 0.1521299858532, "perhap": 1.14680739183, "use": 0.0876240591948, "happen": 1.08640441802, "broken": 2.99459541958, "they": 0.1783619686056, "easi": 13.332237081199999, "challeng": 0.9392919688950001, "those": 0.5356481726189999, "handl": 9.56782868321, "want": 2.0749098187649997, "english": 0.555765186335, "problem": 0.569140724273, "separ": 0.470759772949, "system": 0.65486069117, "colleagu": 2.10832533873, "crazi": 3.0605227790700003, "class": 3.7488609496650005, "choos": 2.86014132144, "piec": 4.70392630556, "actual": 0.628514181648, "work": 0.654207403638, "still": 0.17112222142900002, "ordinari": 1.93451151621, "which": 0.01035682769086, "what": 1.581211077789, "such": 0.179087933418, "item": 1.62505430292, "respons": 1.229746986909, "simpl": 1.2232212893899999, "meaning": 6.16452553142, "refer": 0.262553246798, "three": 0.06411868822490001, "calcul": 1.8131506592099997, "one": 0.0312767582275, "purpos": 1.607738074644, "take": 0.130691962197, "hope": 1.83964860891, "accord": 0.243650319127, "rais": 0.6797577544760001, "order": 0.22014038079300002, "should": 6.1130385210960005, "shouldn": 14.067012968579998, "sever": 0.06991112039689999, "hand": 0.479471335336, "sourc": 1.587654932253, "talk": 1.10867789449, "loop": 2.60354038732, "get": 0.579769005782, "easier": 4.11847766872, "like": 0.83432145927, "myself": 2.67771382807, "lot": 1.4835969502500002, "some": 0.11872052719350001, "push": 1.32213384036, "small": 2.763916245531, "control": 0.38498466158600003, "both": 0.050842533389300004, "except": 3.79417158491, "super": 1.9988756846400002, "part": 0.04239531098280001, "document": 0.932547122383, "fault": 5.2728306403, "that": 0.07157067083351999, "twitter": 3.50295308141, "rule": 0.554777423537, "whatev": 2.0343655696200003, "offdevic": 7.033506484289999, "languag": 0.8306818244059999, "caus": 0.325858567406, "ani": 0.6280417918300001, "when": 0.102774944292, "principl": 2.4779392927200004, "think": 3.2015298352499997, "time": 0.0224230377252, "step": 2.07909011396, "engin": 1.809535116552, "relat": 0.21310030165399999, "verifi": 2.65505767096, "similar": 0.318556092114, "edg": 5.977945400199999, "smaller": 0.9530830530519999, "goto": 5.66523062867, "differ": 0.424642242624, "variabl": 6.506169201600001, "certifi": 2.54808555141, "peopl": 0.773062313892, "user": 2.04258810688, "most": 0.020747896295599998, "safe": 1.61486961909, "certain": 0.592104362781, "for": 0.0031499039539700006, "predict": 1.6457402376899999, "quick": 1.581455017798, "fail": 1.313073223146, "all": 0.03420789629339999, "everyon": 1.8557438481400002, "fulli": 1.02609828678, "our": 0.8576392141820001, "with": 0.00718495028034, "program": 2.8151423150599997, "trace": 1.49084335877, "expand": 0.80021683492, "are": 0.2357397886616, "true": 0.938325629634, "better": 2.7857117624, "case": 2.767843882223, "distanc": 1.24573306257, "normal": 0.959639378783, "debug": 20.78090799768, "look": 1.2927733872, "isol": 1.5818550978200001, "call": 0.0654627744488, "cluster": 2.52579163445, "regular": 0.739163417847, "more": 0.017024931599999998, "and": 0.001889704261908, "reduc": 0.686617775143, "veri": 1.15079896619, "toward": 0.48877277716000006, "rough": 1.1926572072700001, "greatest": 1.10107184908, "benefit": 1.12116245116, "yourself": 3.28064670051, "subsystem": 9.0735307537, "faster": 4.06007935934, "fine": 1.39185273824, "result": 0.136378908381, "librari": 0.986809980943, "toler": 2.0479448277400003, "cut": 0.90274594185, "then": 0.24910159569269996, "smook": 7.033506484289999, "serv": 0.383135035608, "doe": 0.5340417297169999, "miss": 1.2631785751200002, "selfexplanatori": 7.033506484289999, "old": 0.424253510675, "littl": 0.438213989466, "give": 0.622785104448, "make": 0.5879812625831999, "way": 0.9904575496750001, "whole": 0.8306818244059999, "feel": 1.1428493419299999, "each": 0.347483378608, "their": 0.015360505122700001, "few": 0.275577913653, "this": 0.026505143367499998, "design": 0.377239118022, "error": 7.1943417372, "selfdocu": 7.033506484289999, "serious": 0.949332539075, "centralis": 3.9042428181099997, "common": 0.338325805271, "ask": 0.776797209847, "comment": 2.23653506908, "block": 2.32801563176, "qualiti": 3.2280152013300003, "rather": 0.885429951078, "machin": 4.17707874186, "repres": 0.38507723275, "sometim": 0.538025155343, "bio": 3.7456377879300002, "come": 0.8517297195900001, "would": 0.0796176279647, "might": 0.7683410765340001, "yes": 2.65237310559, "sinc": 0.2411045983731, "right": 0.34035985417, "david": 0.615025032185, "where": 0.1299842774914, "figur": 0.7101721121600001, "import": 0.292818277066, "first": 0.0075872898121599995, "everi": 1.565941709684, "app": 3.57899404386, "allow": 0.720841833567, "latest": 1.95699427938, "interpret": 2.3356962880000003, "help": 1.008623164032, "easili": 5.2266349468, "find": 0.547781330288, "learn": 2.528256194235, "pipelin": 3.47002829672, "even": 0.609554259336, "tech": 5.907101319040001, "own": 0.492585232263}, "logidf": {"after": 0.020490694648099998, "approxim": 0.7944845577770001, "natur": 0.431306339292, "boost": 2.2149545241900004, "understand": 1.0880858756799998, "who": 0.0609002329859, "base": 0.13652330228700002, "onc": 0.403765872355, "too": 0.5965551547219999, "occur": 0.556973778473, "post": 0.8057001527009999, "play": 0.38110439064199997, "corner": 1.77044626763, "project": 0.561601885907, "scientist": 1.54634128444, "thank": 1.7928938993, "data": 1.2168205848, "visual": 1.6539383488600001, "new": 0.0177299468511, "clean": 1.9271282036300001, "addit": 0.220218882972, "regress": 3.9359915164199997, "human": 0.640035183243, "much": 0.17749572930100002, "togeth": 0.458032237308, "than": 0.0322608622182, "the": 0.0, "specif": 0.626980167541, "about": 0.0628434774746, "function": 0.914465741594, "deploy": 2.00400270589, "obey": 3.02877408076, "sens": 1.04257779501, "thing": 0.8781935346799999, "log": 2.61552683221, "sure": 2.0086865552, "python": 4.03065674296, "just": 0.289531434109, "seif": 7.033506484289999, "product": 0.484060136536, "onli": 0.025324268329099998, "thought": 0.685867118283, "write": 0.721512439877, "catch": 2.11092206831, "dure": 0.0491209066894, "slowli": 1.8050752452, "permiss": 1.8373800586400002, "establish": 0.297302399813, "know": 0.952919694398, "readworld": 7.033506484289999, "recov": 1.41388231764, "out": 0.0584263909193, "whether": 0.791561189647, "term": 0.33303898354600003, "princip": 1.21130625482, "width": 2.85036642328, "origin": 0.128612437587, "instead": 0.46663315041500003, "massiv": 1.44118776833, "start": 0.236443369291, "whenev": 2.45292177377, "readabl": 4.31597753923, "run": 0.442714975539, "how": 0.47156695693000006, "test": 0.977224437103, "singl": 0.475916769059, "repost": 6.83935046985, "favour": 1.5206539409600002, "self": 2.48264164316, "thorough": 2.39393487158, "quit": 1.05951513684, "deeper": 2.7131653017699997, "especi": 0.511098609709, "giant": 1.83028503479, "can": 0.162341096394, "end": 0.101476798618, "georg": 0.630168832776, "given": 0.303255810831, "nerd": 5.561689949730001, "track": 1.14028498507, "abl": 0.599303982475, "critic": 0.512885356729, "will": 0.202786534915, "over": 0.0249367214957, "event": 0.428982108147, "consid": 0.214894723824, "date": 0.489080896097, "individu": 0.588013447985, "trigger": 2.06916447416, "see": 0.240921585492, "unit": 0.143188061817, "monitor": 1.80125261058, "algorithm": 3.33044239518, "read": 0.83939268088, "select": 0.704804687133, "team": 0.821902894886, "server": 3.6394775921, "but": 0.0161923720719, "without": 0.258874517941, "definit": 1.1755733298, "need": 0.362740163442, "exact": 1.2437647732500001, "there": 0.0400978929255, "off": 0.41352852038800003, "issu": 0.364099043934, "these": 0.0715336194008, "nightmar": 3.45396369421, "num": 0.00031499039539700004, "applic": 1.23160392849, "die": 0.510049071409, "best": 0.459227932947, "exampl": 0.40868267499899996, "big": 1.00798563557, "has": 0.0427239448548, "have": 0.0147850023412, "stop": 0.778579374963, "voila": 7.033506484289999, "realworld": 7.033506484289999, "pass": 0.48130432974, "saa": 5.8883741799800005, "follow": 0.045356911094199995, "default": 3.0511581621399997, "tri": 0.61759152916, "sorri": 3.6736272519599997, "name": 0.09723316638430002, "code": 1.35601909597, "mistak": 2.1648737360799997, "usual": 0.545279017064, "coars": 4.06309201872, "good": 0.418589404907, "alway": 0.726319204572, "plain": 1.70459063424, "realli": 1.5576408397, "number": 0.0966085784186, "break": 0.88733019029, "mark": 0.410770160338, "reli": 1.42586787018, "absolut": 1.67658333914, "also": 0.0146571578, "mani": 0.0433157581221, "everyth": 1.57270590317, "mean": 0.37092128352, "style": 0.866289529121, "not": 0.0155524130075, "suppos": 1.44225301477, "major": 0.138474663439, "compon": 1.40974687623, "accomplish": 1.64345675928, "surpris": 1.47392435861, "may": 0.050709995284400004, "perhap": 1.14680739183, "use": 0.0292080197316, "happen": 1.08640441802, "broken": 1.49729770979, "they": 0.0297269947676, "easi": 1.6665296351499999, "challeng": 0.9392919688950001, "those": 0.17854939087299998, "handl": 1.36683266903, "want": 0.6916366062549999, "english": 0.555765186335, "problem": 0.569140724273, "separ": 0.470759772949, "system": 0.327430345585, "colleagu": 2.10832533873, "crazi": 3.0605227790700003, "class": 0.7497721899330001, "choos": 1.43007066072, "piec": 1.17598157639, "actual": 0.628514181648, "work": 0.109034567273, "still": 0.17112222142900002, "ordinari": 1.93451151621, "which": 0.00517841384543, "what": 0.225887296827, "such": 0.059695977806, "item": 1.62505430292, "respons": 0.40991566230300003, "simpl": 1.2232212893899999, "meaning": 3.08226276571, "refer": 0.262553246798, "three": 0.06411868822490001, "calcul": 1.8131506592099997, "one": 0.0062553516455, "purpos": 0.803869037322, "take": 0.130691962197, "hope": 0.919824304455, "accord": 0.243650319127, "rais": 0.6797577544760001, "order": 0.22014038079300002, "should": 0.509419876758, "shouldn": 7.033506484289999, "sever": 0.06991112039689999, "hand": 0.479471335336, "sourc": 0.529218310751, "talk": 1.10867789449, "loop": 2.60354038732, "get": 0.579769005782, "easier": 2.05923883436, "like": 0.139053576545, "myself": 2.67771382807, "lot": 1.4835969502500002, "some": 0.0395735090645, "push": 1.32213384036, "small": 0.307101805059, "control": 0.38498466158600003, "both": 0.050842533389300004, "except": 0.54202451213, "super": 1.9988756846400002, "part": 0.04239531098280001, "document": 0.932547122383, "fault": 2.63641532015, "that": 0.00397614837964, "twitter": 3.50295308141, "rule": 0.554777423537, "whatev": 2.0343655696200003, "offdevic": 7.033506484289999, "languag": 0.8306818244059999, "caus": 0.325858567406, "ani": 0.125608358366, "when": 0.0205549888584, "principl": 1.2389696463600002, "think": 1.06717661175, "time": 0.0112115188626, "step": 1.03954505698, "engin": 0.904767558276, "relat": 0.21310030165399999, "verifi": 2.65505767096, "similar": 0.318556092114, "edg": 1.4944863500499999, "smaller": 0.9530830530519999, "goto": 5.66523062867, "differ": 0.212321121312, "variabl": 2.1687230672, "certifi": 2.54808555141, "peopl": 0.193265578473, "user": 2.04258810688, "most": 0.020747896295599998, "safe": 1.61486961909, "certain": 0.592104362781, "for": 0.00031499039539700004, "predict": 1.6457402376899999, "quick": 0.790727508899, "fail": 0.656536611573, "all": 0.011402632097799998, "everyon": 1.8557438481400002, "fulli": 1.02609828678, "our": 0.8576392141820001, "with": 0.00119749171339, "program": 0.7037855787649999, "trace": 1.49084335877, "expand": 0.80021683492, "are": 0.0294674735827, "true": 0.938325629634, "better": 0.6964279406, "case": 0.395406268889, "distanc": 1.24573306257, "normal": 0.959639378783, "debug": 5.19522699942, "look": 0.6463866936, "isol": 1.5818550978200001, "call": 0.0654627744488, "cluster": 2.52579163445, "regular": 0.739163417847, "more": 0.017024931599999998, "and": 6.29901420636e-05, "reduc": 0.686617775143, "veri": 0.230159793238, "toward": 0.48877277716000006, "rough": 1.1926572072700001, "greatest": 1.10107184908, "benefit": 1.12116245116, "yourself": 3.28064670051, "subsystem": 4.53676537685, "faster": 2.03003967967, "fine": 1.39185273824, "result": 0.136378908381, "librari": 0.986809980943, "toler": 2.0479448277400003, "cut": 0.90274594185, "then": 0.08303386523089999, "smook": 7.033506484289999, "serv": 0.383135035608, "doe": 0.5340417297169999, "miss": 1.2631785751200002, "selfexplanatori": 7.033506484289999, "old": 0.424253510675, "littl": 0.438213989466, "give": 0.311392552224, "make": 0.07349765782289999, "way": 0.19809150993500002, "whole": 0.8306818244059999, "feel": 1.1428493419299999, "each": 0.173741689304, "their": 0.015360505122700001, "few": 0.275577913653, "this": 0.0037864490525, "design": 0.377239118022, "error": 1.7985854343, "selfdocu": 7.033506484289999, "serious": 0.949332539075, "centralis": 3.9042428181099997, "common": 0.338325805271, "ask": 0.776797209847, "comment": 1.11826753454, "block": 1.16400781588, "qualiti": 1.07600506711, "rather": 0.442714975539, "machin": 1.39235958062, "repres": 0.38507723275, "sometim": 0.538025155343, "bio": 3.7456377879300002, "come": 0.28390990653000003, "would": 0.0796176279647, "might": 0.7683410765340001, "yes": 2.65237310559, "sinc": 0.0803681994577, "right": 0.34035985417, "david": 0.615025032185, "where": 0.0649921387457, "figur": 0.7101721121600001, "import": 0.292818277066, "first": 0.0075872898121599995, "everi": 0.391485427421, "app": 3.57899404386, "allow": 0.24028061118900002, "latest": 1.95699427938, "interpret": 1.1678481440000001, "help": 0.336207721344, "easili": 1.3066587367, "find": 0.547781330288, "learn": 0.842752064745, "pipelin": 3.47002829672, "even": 0.152388564834, "tech": 2.9535506595200003, "own": 0.164195077421}, "freq": {"after": 1, "approxim": 1, "natur": 1, "boost": 1, "understand": 3, "who": 1, "base": 1, "onc": 1, "too": 2, "occur": 1, "post": 1, "play": 1, "corner": 1, "project": 2, "scientist": 1, "thank": 1, "data": 2, "visual": 1, "new": 1, "clean": 1, "addit": 1, "regress": 1, "human": 1, "much": 1, "togeth": 1, "than": 3, "the": 30, "specif": 3, "about": 3, "function": 11, "deploy": 2, "obey": 2, "sens": 1, "thing": 2, "log": 14, "sure": 1, "python": 2, "just": 2, "seif": 2, "product": 3, "onli": 3, "thought": 1, "write": 3, "catch": 3, "dure": 1, "slowli": 1, "permiss": 1, "establish": 1, "know": 5, "readworld": 1, "recov": 1, "out": 3, "whether": 1, "term": 2, "princip": 2, "width": 1, "origin": 1, "instead": 1, "massiv": 1, "start": 2, "whenev": 1, "readabl": 2, "run": 3, "how": 2, "test": 17, "singl": 3, "repost": 1, "favour": 1, "self": 1, "thorough": 1, "quit": 2, "deeper": 1, "especi": 1, "giant": 1, "can": 9, "end": 2, "georg": 2, "given": 1, "nerd": 1, "track": 2, "abl": 2, "critic": 1, "will": 9, "over": 4, "event": 1, "consid": 1, "date": 1, "individu": 1, "trigger": 1, "see": 1, "unit": 2, "monitor": 1, "algorithm": 2, "read": 8, "select": 1, "team": 1, "server": 1, "but": 5, "without": 1, "definit": 1, "need": 5, "exact": 1, "there": 3, "off": 1, "issu": 2, "these": 1, "nightmar": 1, "num": 11, "applic": 2, "die": 1, "best": 1, "exampl": 2, "big": 1, "has": 2, "have": 7, "stop": 1, "voila": 1, "realworld": 2, "pass": 1, "saa": 1, "follow": 2, "default": 1, "tri": 4, "sorri": 1, "name": 9, "code": 31, "mistak": 1, "usual": 1, "coars": 1, "good": 1, "alway": 6, "plain": 1, "realli": 1, "number": 1, "break": 1, "mark": 1, "reli": 1, "absolut": 2, "also": 2, "mani": 5, "everyth": 1, "mean": 2, "style": 1, "not": 3, "suppos": 1, "major": 2, "compon": 1, "accomplish": 1, "surpris": 1, "may": 3, "perhap": 1, "use": 3, "happen": 1, "broken": 2, "they": 6, "easi": 8, "challeng": 1, "those": 3, "handl": 7, "want": 3, "english": 1, "problem": 1, "separ": 1, "system": 2, "colleagu": 1, "crazi": 1, "class": 5, "choos": 2, "piec": 4, "actual": 1, "work": 6, "still": 1, "ordinari": 1, "which": 2, "what": 7, "such": 3, "item": 1, "respons": 3, "simpl": 1, "meaning": 2, "refer": 1, "three": 1, "calcul": 1, "one": 5, "purpos": 2, "take": 1, "hope": 2, "accord": 1, "rais": 1, "order": 1, "should": 12, "shouldn": 2, "sever": 1, "hand": 1, "sourc": 3, "talk": 1, "loop": 1, "get": 1, "easier": 2, "like": 6, "myself": 1, "lot": 1, "some": 3, "push": 1, "small": 9, "control": 1, "both": 1, "except": 7, "super": 1, "part": 1, "document": 1, "fault": 2, "that": 18, "twitter": 1, "rule": 1, "whatev": 1, "offdevic": 1, "languag": 1, "caus": 1, "ani": 5, "when": 5, "principl": 2, "think": 3, "time": 2, "step": 2, "engin": 2, "relat": 1, "verifi": 1, "similar": 1, "edg": 4, "smaller": 1, "goto": 1, "differ": 2, "variabl": 3, "certifi": 1, "peopl": 4, "user": 1, "most": 1, "safe": 1, "certain": 1, "for": 10, "predict": 1, "quick": 2, "fail": 2, "all": 3, "everyon": 1, "fulli": 1, "our": 1, "with": 6, "program": 4, "trace": 1, "expand": 1, "are": 8, "true": 1, "better": 4, "case": 7, "distanc": 1, "normal": 1, "debug": 4, "look": 2, "isol": 1, "call": 1, "cluster": 1, "regular": 1, "more": 1, "and": 30, "reduc": 1, "veri": 5, "toward": 1, "rough": 1, "greatest": 1, "benefit": 1, "yourself": 1, "subsystem": 2, "faster": 2, "fine": 1, "result": 1, "librari": 1, "toler": 1, "cut": 1, "then": 3, "smook": 1, "serv": 1, "doe": 1, "miss": 1, "selfexplanatori": 1, "old": 1, "littl": 1, "give": 2, "make": 8, "way": 5, "whole": 1, "feel": 1, "each": 2, "their": 1, "few": 1, "this": 7, "design": 1, "error": 4, "selfdocu": 1, "serious": 1, "centralis": 1, "common": 1, "ask": 1, "comment": 2, "block": 2, "qualiti": 3, "rather": 2, "machin": 3, "repres": 1, "sometim": 1, "bio": 1, "come": 3, "would": 1, "might": 1, "yes": 1, "sinc": 3, "right": 1, "david": 1, "where": 2, "figur": 1, "import": 1, "first": 1, "everi": 4, "app": 1, "allow": 3, "latest": 1, "interpret": 2, "help": 3, "easili": 4, "find": 1, "learn": 3, "pipelin": 1, "even": 4, "tech": 2, "own": 3}, "idf": {"after": 1.02070207021, "approxim": 2.2132998745299997, "natur": 1.5392670157100001, "boost": 9.16099249856, "understand": 2.96858638743, "who": 1.06279287723, "base": 1.14628158845, "onc": 1.4974533106999999, "too": 1.81585268215, "occur": 1.7453825857499998, "post": 2.23826307627, "play": 1.46390041494, "corner": 5.873473917869999, "project": 1.7534791252500002, "scientist": 4.69426374926, "thank": 6.00681044268, "data": 3.37643555934, "visual": 5.22752716497, "new": 1.0178880554, "clean": 6.86975335353, "addit": 1.24634950542, "regress": 51.2129032258, "human": 1.8965476048299998, "much": 1.1942229577299999, "togeth": 1.58095996813, "than": 1.03278688525, "the": 1.0, "specif": 1.8719490626099997, "about": 1.06486015159, "function": 2.495441685, "deploy": 7.41869158879, "obey": 20.671875, "sens": 2.8365195640499996, "thing": 2.4065484311099996, "log": 13.6744186047, "sure": 7.453521126760001, "python": 56.2978723404, "just": 1.33580143037, "seif": 1134.0, "product": 1.62264922322, "onli": 1.0256476516600002, "thought": 1.9854927463699998, "write": 2.0575427682700003, "catch": 8.25585023401, "dure": 1.0503473370799998, "slowli": 6.080428954419999, "permiss": 6.280063291139999, "establish": 1.34622233528, "know": 2.59327017315, "readworld": 1134.0, "recov": 4.11188811189, "out": 1.06016694491, "whether": 2.20683903253, "term": 1.39520168732, "princip": 3.3578680202999998, "width": 17.294117647100002, "origin": 1.13724928367, "instead": 1.59461631177, "massiv": 4.22571200426, "start": 1.26673581744, "whenev": 11.622254758399999, "readabl": 74.8867924528, "run": 1.55692850838, "how": 1.60250328051, "test": 2.65707112971, "singl": 1.60948905109, "repost": 933.882352941, "favour": 4.57521613833, "self": 11.972850678699999, "thorough": 10.956521739100001, "quit": 2.8849718335500003, "deeper": 15.0769230769, "especi": 1.66712170534, "giant": 6.23566378633, "can": 1.17626139142, "end": 1.10680423871, "georg": 1.8779276082299998, "given": 1.35426085473, "nerd": 260.262295082, "track": 3.1276595744700004, "abl": 1.8208510150200001, "critic": 1.67010309278, "will": 1.22481098596, "over": 1.02525024217, "event": 1.5356935577500002, "consid": 1.2397313759200002, "date": 1.63081664099, "individu": 1.8004082558400003, "trigger": 7.91820448878, "see": 1.27242125511, "unit": 1.15394679459, "monitor": 6.05723006486, "algorithm": 27.9507042254, "read": 2.3149606299200003, "select": 2.02345144022, "team": 2.2748244734200003, "server": 38.071942446, "but": 1.01632417899, "without": 1.29547123623, "definit": 3.24, "need": 1.4372623574099999, "exact": 3.46864758575, "there": 1.04091266719, "off": 1.5121440137200002, "issu": 1.43921675279, "these": 1.07415426252, "nightmar": 31.625498008, "num": 1.00031504001, "applic": 3.42672134686, "die": 1.66537291514, "best": 1.5828514456600002, "exampl": 1.50483412322, "big": 2.7400759406299997, "has": 1.0436497502, "have": 1.0148948411399998, "stop": 2.1783754116400003, "voila": 1134.0, "realworld": 1134.0, "pass": 1.61818367139, "saa": 360.818181818, "follow": 1.04640126549, "default": 21.1398135819, "tri": 1.8544562551099997, "sorri": 39.3945409429, "name": 1.10211732037, "code": 3.8807137619199996, "mistak": 8.71350164654, "usual": 1.72508964468, "coars": 58.1538461538, "good": 1.51981619759, "alway": 2.06745670009, "plain": 5.49913404919, "realli": 4.7476076555, "number": 1.10142916609, "break": 2.42863698944, "mark": 1.5079787234, "reli": 4.16146788991, "absolut": 5.3472549680000006, "also": 1.01476510067, "mani": 1.04426757877, "everyth": 4.81967213115, "mean": 1.44906900329, "style": 2.37807070102, "not": 1.01567398119, "suppos": 4.23021582734, "major": 1.14852058164, "compon": 4.09491875161, "accomplish": 5.17302052786, "surpris": 4.36633663366, "may": 1.05201775893, "perhap": 3.14812611541, "use": 1.0296387573799999, "happen": 2.96359902931, "broken": 4.46959459459, "they": 1.03017325287, "easi": 5.2937645882, "challeng": 2.55816951337, "those": 1.19548192771, "handl": 3.9229058561900003, "want": 1.99698113208, "english": 1.7432744043000001, "problem": 1.76674827509, "separ": 1.6012102874399998, "system": 1.38739840951, "colleagu": 8.23443983402, "crazi": 21.3387096774, "class": 2.11651779763, "choos": 4.17899447223, "piec": 3.24132298898, "actual": 1.87482286254, "work": 1.11520089913, "still": 1.1866357724799999, "ordinari": 6.920662598080001, "which": 1.005191845, "what": 1.25343439128, "such": 1.06151377374, "item": 5.07869481766, "respons": 1.5066907089300001, "simpl": 3.3981164383599998, "meaning": 21.8076923077, "refer": 1.30024570025, "three": 1.06621893889, "calcul": 6.12972972973, "one": 1.00627495722, "purpos": 2.23416830847, "take": 1.13961668222, "hope": 2.50884955752, "accord": 1.27589809531, "rais": 1.9733996271, "order": 1.24625166811, "should": 1.6643254009900001, "shouldn": 1134.0, "sever": 1.07241286139, "hand": 1.6152202665600002, "sourc": 1.69760479042, "talk": 3.0303493033, "loop": 13.5114893617, "get": 1.78562591385, "easier": 7.84, "like": 1.14918566775, "myself": 14.5517873511, "lot": 4.40877534018, "some": 1.04036697248, "push": 3.75141776938, "small": 1.3594793629, "control": 1.46959178006, "both": 1.05215720061, "except": 1.71948445792, "super": 7.380753138080001, "part": 1.04330682789, "document": 2.5409731114, "fault": 13.963060685999999, "that": 1.00398406375, "twitter": 33.213389121300004, "rule": 1.7415533128599998, "whatev": 7.6473988439300005, "offdevic": 1134.0, "languag": 2.29488291414, "caus": 1.38521943984, "ani": 1.13383802314, "when": 1.02076769755, "principl": 3.4520547945199995, "think": 2.90715986083, "time": 1.01127460348, "step": 2.8279301745599996, "engin": 2.47135740971, "relat": 1.23750876919, "verifi": 14.2258064516, "similar": 1.37514075357, "edg": 4.45704660303, "smaller": 2.59369384088, "goto": 288.654545455, "differ": 1.23654490225, "variabl": 8.747107438019999, "certifi": 12.782608695699999, "peopl": 1.21320495186, "user": 7.71053909665, "most": 1.02096463023, "safe": 5.02723242559, "certain": 1.8077886586200003, "for": 1.00031504001, "predict": 5.18484650555, "quick": 2.205, "fail": 1.9281029876099998, "all": 1.01146788991, "everyon": 6.3964544722, "fulli": 2.79015817223, "our": 2.35758835759, "with": 1.0011982089899998, "program": 2.02139037433, "trace": 4.4408391608399995, "expand": 2.2260235558000003, "are": 1.02990593578, "true": 2.55569864778, "better": 2.0065722952500002, "case": 1.48498737256, "distanc": 3.4754816112099998, "normal": 2.61075481006, "debug": 180.409090909, "look": 1.9086318826599997, "isol": 4.86397058824, "call": 1.0676529926, "cluster": 12.5007874016, "regular": 2.09418282548, "more": 1.0171706817, "and": 1.00006299213, "reduc": 1.98698372966, "veri": 1.25880114177, "toward": 1.6303142329, "rough": 3.29582727839, "greatest": 3.00738776283, "benefit": 3.06841901817, "yourself": 26.592964824099997, "subsystem": 93.3882352941, "faster": 7.61438848921, "fine": 4.02229541424, "result": 1.14611608432, "librari": 2.68266306185, "toler": 7.751953125, "cut": 2.4663663197099996, "then": 1.08657860516, "smook": 1134.0, "serv": 1.4668760972, "doe": 1.70581282905, "miss": 3.53664513255, "selfexplanatori": 1134.0, "old": 1.52844902282, "littl": 1.5499365420299998, "give": 1.3653250774, "make": 1.0762660158600001, "way": 1.2190739461, "whole": 2.29488291414, "feel": 3.1356903021900004, "each": 1.18974820144, "their": 1.01547908405, "few": 1.31729173581, "this": 1.00379362671, "design": 1.45825296225, "error": 6.04109589041, "selfdocu": 1134.0, "serious": 2.583984375, "centralis": 49.6125, "common": 1.4025974025999999, "ask": 2.1744966443, "comment": 3.05954904606, "block": 3.20274359492, "qualiti": 2.9329392204, "rather": 1.55692850838, "machin": 4.02433460076, "repres": 1.46972782818, "sometim": 1.7126213592200001, "bio": 42.336000000000006, "come": 1.32831325301, "would": 1.0828729281799998, "might": 2.1561863370900003, "yes": 14.1876675603, "sinc": 1.08368600683, "right": 1.4054532577899999, "david": 1.84970290108, "where": 1.06715063521, "figur": 2.0343413634, "import": 1.3401992233700002, "first": 1.00761614623, "everi": 1.47917637194, "app": 35.837471783299996, "allow": 1.2716059271100002, "latest": 7.078020508250001, "interpret": 3.2150668286799995, "help": 1.39962972759, "easili": 3.6938110749199997, "find": 1.7294117647099998, "learn": 2.32275054865, "pipelin": 32.1376518219, "even": 1.16461267606, "tech": 19.1739130435, "own": 1.17844418052}}, "html": "<!DOCTYPE html>\n\n<html lang=\"en-US\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head profile=\"http://gmpg.org/xfn/11\">\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n<title>  5 \u201cClean Code\u201d Tips That Will Dramatically Improve Your Productivity</title>\n<link href=\"/wp-content/themes/kdn17/images/favicon.ico\" rel=\"shortcut icon\"/>\n<link href=\"/wp-content/themes/kdn17/style.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"/wp-content/themes/kdn17/js/jquery-1.9.1.min.js\" type=\"text/javascript\"></script>\n<script src=\"/aps/kda_all.js\" type=\"text/javascript\"></script>\n<link href=\"/feed/\" rel=\"alternate\" title=\"KDnuggets: Analytics, Big Data, Data Mining and Data Science Feed\" type=\"application/rss+xml\"/>\n<link href=\"//s.w.org\" rel=\"dns-prefetch\"/>\n<link href=\"https://www.kdnuggets.com/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/comments/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/2018/10/5-clean-code-tips-dramatically-improve-productivity.html/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb 5 \u201cClean Code\u201d Tips That Will Dramatically Improve Your Productivity Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-json/\" rel=\"https://api.w.org/\"/>\n<link href=\"https://www.kdnuggets.com/xmlrpc.php?rsd\" rel=\"EditURI\" title=\"RSD\" type=\"application/rsd+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-includes/wlwmanifest.xml\" rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\"/>\n<link href=\"https://www.kdnuggets.com/2018/10/datarobot-learn-top-things-ai-vendor.html\" rel=\"prev\" title=\"Learn the top things to look for in an AI Vendor\"/>\n<link href=\"https://www.kdnuggets.com/2018/10/top-news-week-1008-1014.html\" rel=\"next\" title=\"Top Stories, Oct 8-14: 10 Best Mobile Apps for Data Scientist / Data Analysts; BIG, small or Right Data: Which is the proper focus?\"/>\n<meta content=\"WordPress 4.9.10\" name=\"generator\">\n<link href=\"https://www.kdnuggets.com/2018/10/5-clean-code-tips-dramatically-improve-productivity.html\" rel=\"canonical\"/>\n<link href=\"https://www.kdnuggets.com/?p=86309\" rel=\"shortlink\"/>\n<link href=\"https://www.kdnuggets.com/2018/10/5-clean-code-tips-dramatically-improve-productivity.html\" rel=\"canonical\"/>\n<!-- BEGIN ExactMetrics v5.3.7 Universal Analytics - https://exactmetrics.com/ -->\n<script>\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-361129-1', 'auto');\n  ga('send', 'pageview');\n</script>\n<!-- END ExactMetrics Universal Analytics -->\n</meta></head>\n<body class=\"post-template-default single single-post postid-86309 single-format-standard\">\n<div class=\"main_wrapper\"><!-- publ: 15-Oct, 2018  -->\n<div id=\"wrapper\">\n<div id=\"header\">\n<div id=\"header_log\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<h1>KDnuggets</h1>\n<div class=\"text-container\">\n            \u00a0\u00a0<a href=\"/news/subscribe.html\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a> \u00a0|\n <a href=\"https://twitter.com/kdnuggets\" target=\"_blank\"><img alt=\"Twitter\" height=\"48\" src=\"/images/tw_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n <a href=\"https://www.facebook.com/kdnuggets\" target=\"_blank\"><img alt=\"Facebook\" height=\"48\" src=\"/images/fb_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n<a href=\"https://www.linkedin.com/groups/54257/\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"48\" src=\"/images/in_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \n\u00a0|\u00a0 <a href=\"/contact.html\"><b>Contact</b></a>\n</div>\n</div>\n<div class=\"search\">\n<form action=\"/\" id=\"searchform\" method=\"get\">\n<input id=\"s\" name=\"s\" placeholder=\"search KDnuggets\" type=\"text\" value=\"\"/>\n<input type=\"submit\" value=\"Search\"/></form>\n</div>\n<div href=\"#\" id=\"pull\">\n<img class=\"menu\" src=\"/images/menu-30.png\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<img class=\"search-icon\" src=\"/images/search-icon.png\">\n</img></img></div>\n<div id=\"pull-menu\">\n<div class=\"navigation\"><ul class=\"menu\" id=\"menu-menu\"><li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-1070\" id=\"menu-item-1070\"><a href=\"/software/index.html\" title=\"Data Science Software\">SOFTWARE</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13756\" id=\"menu-item-13756\"><a href=\"/news/index.html\" title=\"News\">News/Blog</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-46286\" id=\"menu-item-46286\"><a href=\"/news/top-stories.html\">Top stories</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-42152\" id=\"menu-item-42152\"><a href=\"https://www.kdnuggets.com/opinions/index.html\" title=\"Opinions\">Opinions</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-46415\" id=\"menu-item-46415\"><a href=\"https://www.kdnuggets.com/tutorials/index.html\">Tutorials</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13364\" id=\"menu-item-13364\"><a href=\"/jobs/index.html\" title=\"Jobs in Analytics, Data Science\">JOBS</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-63505\" id=\"menu-item-63505\"><a href=\"https://www.kdnuggets.com/companies/index.html\">Companies</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13366\" id=\"menu-item-13366\"><a href=\"/courses/index.html\">Courses</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-1499\" id=\"menu-item-1499\"><a href=\"https://www.kdnuggets.com/datasets/index.html\">Datasets</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-14286\" id=\"menu-item-14286\"><a href=\"https://www.kdnuggets.com/education/index.html\" title=\"Education in Analytics, Big Data, Data Science\">EDUCATION</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-51558\" id=\"menu-item-51558\"><a href=\"https://www.kdnuggets.com/education/analytics-data-mining-certificates.html\" title=\"Certificates in Analytics, Big Data, Data Science\">Certificates</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-14752\" id=\"menu-item-14752\"><a href=\"/meetings/index.html\">Meetings</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13721\" id=\"menu-item-13721\"><a href=\"/webcasts/index.html\" title=\"Webcasts and Webinars\">Webinars</a></li>\n</ul></div></div>\n</div> <!--#header end-->\n<div id=\"spacer\">\n         \u00a0\n      </div>\n<div id=\"content_wrapper\">\n<div id=\"ad_wrapper\">\n<script type=\"text/javascript\">\n\tjQuery(function() {\n   \t    var pull        = $('#pull');\n            menu        = $('#header .navigation ul');\n            menuImage = $('#header img.menu');\n            mobileMenu        = $('#pull-menu-mobile');\n            search = $('img.search-icon');\n            searchBar = $('div.search');\n            searchClick = false;\n            search.on('click', function() {\n                  searchBar.slideToggle();\n                  searchClick = true;\n            });  \n     \t    $(menuImage).on('click', function(e) {\n\t        //e.preventDefault();\n                if (!searchClick) {\n                  menu.slideToggle();\n                }\n                searchClick = false;\n\t    });\n           /* pullMobile.on('click', function(e) {\n              e.preventDefault();\n                if (!searchClick) {\n                  mobileMenu.slideToggle();\n                }\n                searchClick = false;\n\t    });*/\n            \n\t});\n\tkpath = '/'; kda_top(); kda_sid_init(); kda_sid_n=3;\n\t</script>\n</div> <div class=\"breadcumb\">\n<br/>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2018/index.html\">2018</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/10/index.html\">Oct</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/10/tutorials.html\">Tutorials, Overviews</a> \u00bb 5 \u201cClean Code\u201d Tips That Will Dramatically Improve Your Productivity (\u00a0<a href=\"/2018/n39.html\">18:n39</a>\u00a0)    </div>\n<div class=\"single\" id=\"content\">\n<div id=\"post-header\">\n<h1 id=\"title\">5 \u201cClean Code\u201d Tips That Will Dramatically Improve Your Productivity</h1>\n<div class=\"pagi\">\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2018/10/datarobot-learn-top-things-ai-vendor.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"> <strong>Previous post</strong></img></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2018/10/top-news-week-1008-1014.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/>\u00a0<br/>\u00a0\n    <div class=\"addthis_native_toolbox\"></div>\n</div>\n<div class=\"tag-data\">Tags: <a href=\"https://www.kdnuggets.com/tag/efficiency\" rel=\"tag\">Efficiency</a>, <a href=\"https://www.kdnuggets.com/tag/programming\" rel=\"tag\">Programming</a></div>\n<br/>\n<p class=\"excerpt\">\n     TL;DR: If it isn\u2019t tested, it\u2019s broken; Choose meaningful names; Classes and functions should be small and obey the Single Responsibility Principle (SRP); Catch and handle exceptions, even if you don\u2019t think you need to; Logs, logs, logs\n  </p>\n</div>\n<div id=\"post-header-ad\">\n<script type=\"text/javascript\">kda_sid_write(1); kda_sid_n=2;</script>\n</div>\n<hr class=\"grey-line\"/><br/>\n<div class=\"post\" id=\"post-\">\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p><b>By <a href=\"https://towardsdatascience.com/@george.seif94\" rel=\"noopener noreferrer\" target=\"_blank\">George Seif</a>, AI / Machine Learning Engineer</b></p>\n<p><img alt=\"Header image\" class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/fit/t/800/240/0*5FpYFV2ihl7VNKmG.jpg\" width=\"99%\"/></p>\n<p>Quality code. Lots of people talk about it, but few actually do it right.</p>\n<p>Most people who code naturally know what quality code should look or\u00a0<em>feel\u00a0</em>like. It should be very easy to read and understand quickly, there shouldn\u2019t be any major faults, edge cases should be handled, and it should be \u201cself documenting\u201d. Still, many people miss the mark when trying (hopefully) to write quality code.</p>\n<p>The cause of the mistakes are understandable in many cases. It can be challenging to predict how people will interpret your code, whether they will find it easy to read or an absolute nightmare. Not only that, once your project gets very big even\u00a0<strong>you</strong>\u00a0might not be able to read it!</p>\n<p>In such a case, it\u2019s always good to establish some principals that you can rely on. Some go-to rules that you can always reference whenever you\u2019re designing or writing code.</p>\n<p>The following 5 clean coding principals are the ones I code by! They\u2019ve given me a massive productivity boost in my work and helped both myself and my colleagues be able to easily interpret and expand the code base which I\u2019ve worked on. Hopefully they help you code faster and better too!</p>\n<p>\u00a0</p>\n<h3><strong>If it isn\u2019t tested, it\u2019s\u00a0broken</strong></h3>\n<p>\u00a0<br>\nTest, test, test. We know we should always do it, but sometimes we cut corners so we can push the project out faster. But without thorough testing, how will you <strong>100%</strong>\u00a0fully know that the code works? Yes there are very simple pieces of code, but one is always surprised when that crazy edge case comes up that you thought you didn\u2019t need to test for!</br></p>\n<p>Do yourself and everyone on your team a favour and regularly test the code you write. You\u2019ll want to test in a\u00a0<em>coarse to fine\u00a0</em>style. Start small with unit tests to make sure every small part works on its own. Then slowly start testing the different subsystems together working your way up towards testing the whole new system end to end. Testing in this way allows you to easily track where the system breaks, since you can easily verify each individual component or the small subsystems as the source of any issues.</p>\n<p>\u00a0</p>\n<h3>Choose meaningful names</h3>\n<p>\u00a0<br>\nThis is what makes code self-documenting. When you read over your old code, you shouldn\u2019t have to look over every little comment and run every small piece of code to figure out what it all does!</br></p>\n<p>The code should\u00a0<em>roughly</em>\u00a0read like plain English. This is especially true for variable names, classes, and functions. Those three items should always have names that are self-explanatory. Rather than use a default name like \u201cx\u201d for example, call it \u201cwidth\u201d or \u201cdistance\u201d or whatever the variable is supposed to represent in \u201cread-world\u201d terms. Coding in \u201creal-world\u201d terms will help make your code read in that way</p>\n<p>\u00a0</p>\n<h3><strong>Classes and functions should be small and obey the Single Responsibility Principle (SRP)</strong></h3>\n<p>\u00a0<br>\nSmall classes and functions make code approximately 9832741892374 times easier to read...</br></p>\n<p>But seriously they really do. First off, they allow for very isolated unit testing. If the piece of code you are testing is small, it\u2019s easy to source and debug any issues that come up in the test or during deployment. Small classes and functions also allow for better readability. Instead of having a giant block of code with many loops and variables, you can reduce that block to a function that runs several\u00a0<em>smaller</em>\u00a0functions. You can then name each of those functions according to what they do and voila, human readable code!</p>\n<p>SRP gives you similar benefits. One responsibility means you only have to test a handful of edge cases and those cases are quite easy to debug. In addition it\u2019s quite easy to name the function so it has real-world meaning. Since it only has one single purpose, it\u2019ll just be named after it\u2019s purpose, rather than trying to name a function that\u2019s trying to accomplish so many different things.</p>\n<p>\u00a0</p>\n<h3>Catch and handle exceptions, even if you don\u2019t think you need\u00a0to</h3>\n<p>\u00a0<br>\nExceptions in code are usually edges case or errors that we would like to handle in our own specific way. For example, normally when an error is raised the program will stop; this definitely will not work for code we have deployed to production that is serving users! We\u2019ll want to handle that error separately, perhaps try to see if it\u2019s super critical or if we should just pass over it.</br></p>\n<p>You should always be catching and handling exceptions specifically, even if you don\u2019t think you need to. Better to be safe than sorry. Exception handling will give you a better sense of order and control over your code, since you know\u00a0<em>specifically</em>\u00a0what will happen if a certain exception is triggered or a piece of code fails. Having a deeper understand of your code like this makes it easier to debug and makes your code more fault tolerant.</p>\n<p>\u00a0</p>\n<h3>Logs, logs,\u00a0logs</h3>\n<p>\u00a0<br/>\nLog it. What you may ask?\u00a0\u2026. Everything that\u2019s what! There\u2019s no such thing as too much logs!</p>\n<p>Logs are your absolute number 1 source for debugging your code and monitoring your application when it\u2019s in production. You should be logging every major \u201cstep\u201d your program takes, any important calculations it makes, any errors, exceptions, or out of the ordinary results. It may also be useful to log the date and time that these events occur for easy tracking. All of this will make it easy to trace exactly which\u00a0<em>step in the pipeline the program failed</em>.</p>\n<p>Many common programming languages such as Python come with their own logging libraries that have some very useful functions you can play with. If your application is to run as a SaaS app, then you may want to consider off-device, centralised logging. This way if one of your servers dies you can easily recover the logs!</p>\n<p>\u00a0</p>\n<h3>TL;DR</h3>\n<p>\u00a0<br/>\n(1) If it isn\u2019t tested, it\u2019s broken<br/>\n(2) Choose meaningful names<br/>\n(3) Classes and functions should be small and obey the Single Responsibility Principle (SRP)<br/>\n(4) Catch and handle exceptions, even if you don\u2019t think you need to<br/>\n(5) Logs, logs, logs</p>\n<p>\u00a0<br/>\n<b>Like to read about\u00a0tech?</b></p>\n<p>Follow me on\u00a0<a href=\"https://twitter.com/GeorgeSeif94\" rel=\"noopener noreferrer\" target=\"_blank\">twitter</a>\u00a0where I post all about the latest and greatest tech!</p>\n<p>Thanks to\u00a0<a data-action-source=\"post_page\" href=\"https://medium.com/@DavidSmooke?source=post_page\" rel=\"noopener noreferrer\" target=\"_blank\">David Smooke</a>.</p>\n<p>\u00a0<br/>\n<b>Bio: <a href=\"https://towardsdatascience.com/@george.seif94\" rel=\"noopener noreferrer\" target=\"_blank\">George Seif</a></b> is a Certified Nerd and AI / Machine Learning Engineer.</p>\n<p><a href=\"https://medium.com/@george.seif94/these-5-clean-code-tips-will-dramatically-improve-your-productivity-b20c152783b\" rel=\"noopener noreferrer\" target=\"_blank\">Original</a>. Reposted with permission.</p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2018/07/5-quick-easy-data-visualizations-python-code.html\">5 Quick and Easy Data Visualizations in Python with Code</a>\n<li><a href=\"/2018/06/5-clustering-algorithms-data-scientists-need-know.html\">The 5 Clustering Algorithms Data Scientists Need to Know</a>\n<li><a href=\"/2018/08/selecting-best-machine-learning-algorithm-regression-problem.html\">Selecting the Best Machine Learning Algorithm for Your Regression Problem</a>\n</li></li></li></ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p> <script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets';\n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div>\n<div class=\"page-link\"></div>\n<div class=\"pagi\">\n<hr class=\"grey-line\"/>\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2018/10/datarobot-learn-top-things-ai-vendor.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"/> <strong>Previous post</strong></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2018/10/top-news-week-1008-1014.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/><br/>\n<div>\n<hr class=\"grey-line\"/><br/>\n<h2>Top Stories Past 30 Days</h2>\n<table align=\"center\" cellpadding=\"3\" cellspacing=\"10\" class=\"latn\" width=\"100%\">\n<tr>\n<td valign=\"top\" width=\"50%\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Popular</b></th></tr>\n<tr><td>\n<ol class=\"three_ol\"><li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-1-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-2-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n<li> <a href=\"/2018/05/simplilearn-9-must-have-skills-data-scientist.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-3-simplilearn');\"><b>9 Must-have skills you need to become a Data Scientist, updated</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-4-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/03/another-10-free-must-read-books-for-machine-learning-and-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-5-another-10-books');\"><b>Another 10 Free Must-Read Books for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-6-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/best-data-visualization-techniques.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-7-best-data-viz');\"><b>Best Data Visualization Techniques for small and large data</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td> <td valign=\"top\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Shared</b></th></tr>\n<tr><td><ol class=\"three_ol\">\n<li> <a href=\"/2019/04/another-10-free-must-see-courses-machine-learning-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-1-another-10-courses');\"><b>Another 10 Free Must-See Courses for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-2-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/03/r-vs-python-data-visualization.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-3-r-py-viz');\"><b>R vs Python for Data Visualization</b></a>\n<li> <a href=\"/2019/03/deep-learning-toolset-overview.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-4-dl-toolset');\"><b>The Deep Learning Toolset \u2014 An Overview</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-5-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-6-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-7-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<!--#content end--></div>\n<div id=\"sidebar\">\n<div class=\"latn\">\n<h3><b><a href=\"/news/index.html\">Latest News</a></b></h3>\n<ul style=\"font-size:14px; margin-top:5px\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/datarobot-delivering-trusted-ai-microsoft.html\">Delivering Trusted AI with DataRobot and Microsoft</a><li> <a href=\"https://www.kdnuggets.com/2019/04/formulated-ai-data-production-landscape.html\">AI and the data production landscape</a><li> <a href=\"https://www.kdnuggets.com/2019/04/most-desired-skill-data-science.html\">The most desired skill in data science</a><li> <a href=\"https://www.kdnuggets.com/2019/04/projects-include-data-science-portfolio.html\">Projects to Include in a Data Science Portfolio</a><li> <a href=\"https://www.kdnuggets.com/2019/04/rework-meet-worlds-leading-ai-deep-learning-experts.html\">Meet the World\u2019s Leading AI &amp; Deep Learning ...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/problem-data-science-job-postings.html\">The problem with data science job postings</a></li></li></li></li></li></li></ul>\n</div>\n<div>\n<script type=\"text/javascript\">kda_sid_write(kda_sid_n);</script>\n</div>\n<br/><script src=\"/aps/sbm.js\" type=\"text/javascript\"></script>\n</div>\n</div><div class=\"breadcrumbs_bottom\">\n<div class=\"breadcumb\">\n<br>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2018/index.html\">2018</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/10/index.html\">Oct</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/10/tutorials.html\">Tutorials, Overviews</a> \u00bb 5 \u201cClean Code\u201d Tips That Will Dramatically Improve Your Productivity (\u00a0<a href=\"/2018/n39.html\">18:n39</a>\u00a0)    </br></div>\n</div>\n<!--#content_wrapper end--></div>\n<br>\n<div id=\"footer\">\n<br/>\u00a9 2019 KDnuggets. <a href=\"/about/index.html\">About KDnuggets</a>. \u00a0<a href=\"/news/privacy-policy.html\">Privacy policy</a>. <a href=\"/terms-of-service.html\">Terms of Service</a><br/>\u00a0\n<div class=\"kd_bottom\">\n<div class=\"footer-container\">\n<div class=\"footer-news\">\n<a href=\"/news/subscribe.html\" onclick=\"_gaq.push(['_trackPageview','/x/bot/sub']);\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a>\n</div>\n<div class=\"footer-sm\">\n<a href=\"https://twitter.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/twt']);\" target=\"_blank\"><img height=\"32\" src=\"/images/tw_c48.png\" width=\"32\"/></a>\n<a href=\"https://facebook.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/fb']);\" target=\"_blank\"><img alt=\"Facebook\" height=\"32\" src=\"/images/fb_c48.png\" width=\"32\"/></a>\n<a href=\"https://www.linkedin.com/groups/54257\" onclick=\"_gaq.push(['_trackPageview','/x/bot/in']);\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"32\" src=\"/images/in_c48.png\" width=\"32\"/></a>\n</div>\n</div>\n<div class=\"close-footer\">X</div>\n</div>\n<script type=\"text/javascript\">\n  jQuery('.close-footer').click(\n      function(){       \n         jQuery('.kd_bottom').hide();\n      }\n   );\n</script> </div>\n<div class=\"clear\"><!--blank--></div>\n</br></div>\n<div style=\"display: none;\"><div id=\"boxzilla-box-82996-content\"><script type=\"text/javascript\">(function() {\n\tif (!window.mc4wp) {\n\t\twindow.mc4wp = {\n\t\t\tlisteners: [],\n\t\t\tforms    : {\n\t\t\t\ton: function (event, callback) {\n\t\t\t\t\twindow.mc4wp.listeners.push({\n\t\t\t\t\t\tevent   : event,\n\t\t\t\t\t\tcallback: callback\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})();\n</script><!-- MailChimp for WordPress v4.1.14 - https://wordpress.org/plugins/mailchimp-for-wp/ --><form class=\"mc4wp-form mc4wp-form-77281\" data-id=\"77281\" data-name=\"Subscribe to KDnuggets News\" id=\"mc4wp-form-1\" method=\"post\"><div class=\"mc4wp-form-fields\"><div class=\"header-container\">\n<img align=\"left\" src=\"/wp-content/uploads/envelope.png\"><a href=\"/news/subscribe.html\">Get KDnuggets, a leading newsletter on AI, \r\n  Data Science, and Machine Learning</a>\n</img></div>\n<div class=\"form-fields\">\n<div class=\"field-container\"><label>Email:</label><input maxlength=\"60\" name=\"EMAIL\" placeholder=\"Your email\" required=\"\" size=\"30\" type=\"email\"/></div>\n<div class=\"field-container submit-container\"><div class=\"form-button\" onclick=\"document.getElementById('mc4wp-form-1').submit()\">Sign Up</div></div>\n</div>\n<label style=\"display: none !important;\">Leave this field empty if you're human: <input autocomplete=\"off\" name=\"_mc4wp_honeypot\" tabindex=\"-1\" type=\"text\" value=\"\"/></label><input name=\"_mc4wp_timestamp\" type=\"hidden\" value=\"1556351814\"/><input name=\"_mc4wp_form_id\" type=\"hidden\" value=\"77281\"/><input name=\"_mc4wp_form_element_id\" type=\"hidden\" value=\"mc4wp-form-1\"/></div><div class=\"mc4wp-response\"></div></form><!-- / MailChimp for WordPress Plugin -->\n</div></div><script type=\"text/javascript\">(function() {function addEventListener(element,event,handler) {\n\tif(element.addEventListener) {\n\t\telement.addEventListener(event,handler, false);\n\t} else if(element.attachEvent){\n\t\telement.attachEvent('on'+event,handler);\n\t}\n}function maybePrefixUrlField() {\n\tif(this.value.trim() !== '' && this.value.indexOf('http') !== 0) {\n\t\tthis.value = \"http://\" + this.value;\n\t}\n}\n\nvar urlFields = document.querySelectorAll('.mc4wp-form input[type=\"url\"]');\nif( urlFields && urlFields.length > 0 ) {\n\tfor( var j=0; j < urlFields.length; j++ ) {\n\t\taddEventListener(urlFields[j],'blur',maybePrefixUrlField);\n\t}\n}/* test if browser supports date fields */\nvar testInput = document.createElement('input');\ntestInput.setAttribute('type', 'date');\nif( testInput.type !== 'date') {\n\n\t/* add placeholder & pattern to all date fields */\n\tvar dateFields = document.querySelectorAll('.mc4wp-form input[type=\"date\"]');\n\tfor(var i=0; i<dateFields.length; i++) {\n\t\tif(!dateFields[i].placeholder) {\n\t\t\tdateFields[i].placeholder = 'YYYY-MM-DD';\n\t\t}\n\t\tif(!dateFields[i].pattern) {\n\t\t\tdateFields[i].pattern = '[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])';\n\t\t}\n\t}\n}\n\n})();</script><script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_options = {\"testMode\":\"\",\"boxes\":[{\"id\":82996,\"icon\":\"&times;\",\"content\":\"\",\"css\":{\"background_color\":\"#eeee22\",\"width\":600,\"border_width\":2,\"border_style\":\"double\",\"position\":\"center\"},\"trigger\":{\"method\":\"time_on_page\",\"value\":\"3\"},\"animation\":\"fade\",\"cookie\":{\"triggered\":0,\"dismissed\":336},\"rehide\":true,\"position\":\"center\",\"screenWidthCondition\":{\"condition\":\"larger\",\"value\":500},\"closable\":true,\"post\":{\"id\":82996,\"title\":\"Subscribe to KDnuggets\",\"slug\":\"subscribe-to-kdnuggets\"}}]};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla/assets/js/script.min.js?ver=3.2.5\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_stats_config = {\"ajaxurl\":\"https:\\/\\/www.kdnuggets.com\\/wp-admin\\/admin-ajax.php?action=boxzilla_stats_track\"};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla-stats/assets/js/tracking.min.js?ver=1.0.4\" type=\"text/javascript\"></script>\n<script src=\"https://www.kdnuggets.com/wp-includes/js/wp-embed.min.js?ver=4.9.10\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar mc4wp_forms_config = [];\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/forms-api.min.js?ver=4.1.14\" type=\"text/javascript\"></script>\n<!--[if lte IE 9]>\n<script type='text/javascript' src='https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/third-party/placeholders.min.js?ver=4.1.14'></script>\n<![endif]-->\n<!--/.main_wrapper--></body></html>\n<script src=\"https://s7.addthis.com/js/300/addthis_widget.js#pubid=gpsaddthis\" type=\"text/javascript\"></script>\n\n\n<!-- Dynamic page generated in 0.733 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2019-04-27 03:56:54 -->\n<!-- Compression = gzip -->", "content_tokenized": ["comment", "georg", "seif", "machin", "learn", "engin", "qualiti", "code", "lot", "peopl", "talk", "about", "but", "few", "actual", "right", "most", "peopl", "who", "code", "natur", "know", "what", "qualiti", "code", "should", "look", "feel", "like", "should", "veri", "easi", "read", "and", "understand", "quick", "there", "shouldn", "ani", "major", "fault", "edg", "case", "should", "handl", "and", "should", "self", "document", "still", "mani", "peopl", "miss", "the", "mark", "when", "tri", "hope", "write", "qualiti", "code", "the", "caus", "the", "mistak", "are", "understand", "mani", "case", "can", "challeng", "predict", "how", "peopl", "will", "interpret", "code", "whether", "they", "will", "find", "easi", "read", "absolut", "nightmar", "not", "onli", "that", "onc", "project", "get", "veri", "big", "even", "might", "not", "abl", "read", "such", "case", "alway", "good", "establish", "some", "princip", "that", "can", "reli", "some", "goto", "rule", "that", "can", "alway", "refer", "whenev", "design", "write", "code", "the", "follow", "num", "clean", "code", "princip", "are", "the", "one", "code", "they", "given", "massiv", "product", "boost", "work", "and", "help", "both", "myself", "and", "colleagu", "abl", "easili", "interpret", "and", "expand", "the", "code", "base", "which", "work", "hope", "they", "help", "code", "faster", "and", "better", "too", "test", "broken", "test", "test", "test", "know", "should", "alway", "but", "sometim", "cut", "corner", "can", "push", "the", "project", "out", "faster", "but", "without", "thorough", "test", "how", "will", "num", "fulli", "know", "that", "the", "code", "work", "yes", "there", "are", "veri", "simpl", "piec", "code", "but", "one", "alway", "surpris", "when", "that", "crazi", "edg", "case", "come", "that", "thought", "need", "test", "for", "yourself", "and", "everyon", "team", "favour", "and", "regular", "test", "the", "code", "write", "want", "test", "coars", "fine", "style", "start", "small", "with", "unit", "test", "make", "sure", "everi", "small", "part", "work", "own", "then", "slowli", "start", "test", "the", "differ", "subsystem", "togeth", "work", "way", "toward", "test", "the", "whole", "new", "system", "end", "end", "test", "this", "way", "allow", "easili", "track", "where", "the", "system", "break", "sinc", "can", "easili", "verifi", "each", "individu", "compon", "the", "small", "subsystem", "the", "sourc", "ani", "issu", "choos", "meaning", "name", "this", "what", "make", "code", "selfdocu", "when", "read", "over", "old", "code", "shouldn", "have", "look", "over", "everi", "littl", "comment", "and", "run", "everi", "small", "piec", "code", "figur", "out", "what", "all", "doe", "the", "code", "should", "rough", "read", "like", "plain", "english", "this", "especi", "true", "for", "variabl", "name", "class", "and", "function", "those", "three", "item", "should", "alway", "have", "name", "that", "are", "selfexplanatori", "rather", "than", "use", "default", "name", "like", "for", "exampl", "call", "width", "distanc", "whatev", "the", "variabl", "suppos", "repres", "readworld", "term", "code", "realworld", "term", "will", "help", "make", "code", "read", "that", "way", "class", "and", "function", "should", "small", "and", "obey", "the", "singl", "respons", "principl", "small", "class", "and", "function", "make", "code", "approxim", "num", "time", "easier", "read", "but", "serious", "they", "realli", "first", "off", "they", "allow", "for", "veri", "isol", "unit", "test", "the", "piec", "code", "are", "test", "small", "easi", "sourc", "and", "debug", "ani", "issu", "that", "come", "the", "test", "dure", "deploy", "small", "class", "and", "function", "also", "allow", "for", "better", "readabl", "instead", "have", "giant", "block", "code", "with", "mani", "loop", "and", "variabl", "can", "reduc", "that", "block", "function", "that", "run", "sever", "smaller", "function", "can", "then", "name", "each", "those", "function", "accord", "what", "they", "and", "voila", "human", "readabl", "code", "give", "similar", "benefit", "one", "respons", "mean", "onli", "have", "test", "hand", "edg", "case", "and", "those", "case", "are", "quit", "easi", "debug", "addit", "quit", "easi", "name", "the", "function", "has", "realworld", "mean", "sinc", "onli", "has", "one", "singl", "purpos", "just", "name", "after", "purpos", "rather", "than", "tri", "name", "function", "that", "tri", "accomplish", "mani", "differ", "thing", "catch", "and", "handl", "except", "even", "think", "need", "except", "code", "are", "usual", "edg", "case", "error", "that", "would", "like", "handl", "our", "own", "specif", "way", "for", "exampl", "normal", "when", "error", "rais", "the", "program", "will", "stop", "this", "definit", "will", "not", "work", "for", "code", "have", "deploy", "product", "that", "serv", "user", "want", "handl", "that", "error", "separ", "perhap", "tri", "see", "super", "critic", "should", "just", "pass", "over", "should", "alway", "catch", "and", "handl", "except", "specif", "even", "think", "need", "better", "safe", "than", "sorri", "except", "handl", "will", "give", "better", "sens", "order", "and", "control", "over", "code", "sinc", "know", "specif", "what", "will", "happen", "certain", "except", "trigger", "piec", "code", "fail", "have", "deeper", "understand", "code", "like", "this", "make", "easier", "debug", "and", "make", "code", "more", "fault", "toler", "log", "log", "log", "log", "what", "may", "ask", "everyth", "that", "what", "there", "such", "thing", "too", "much", "log", "log", "are", "absolut", "number", "num", "sourc", "for", "debug", "code", "and", "monitor", "applic", "when", "product", "should", "log", "everi", "major", "step", "program", "take", "ani", "import", "calcul", "make", "ani", "error", "except", "out", "the", "ordinari", "result", "may", "also", "use", "log", "the", "date", "and", "time", "that", "these", "event", "occur", "for", "easi", "track", "all", "this", "will", "make", "easi", "trace", "exact", "which", "step", "the", "pipelin", "the", "program", "fail", "mani", "common", "program", "languag", "such", "python", "come", "with", "their", "own", "log", "librari", "that", "have", "some", "veri", "use", "function", "can", "play", "with", "applic", "run", "saa", "app", "then", "may", "want", "consid", "offdevic", "centralis", "log", "this", "way", "one", "server", "die", "can", "easili", "recov", "the", "log", "num", "test", "broken", "num", "choos", "meaning", "name", "num", "class", "and", "function", "should", "small", "and", "obey", "the", "singl", "respons", "principl", "num", "catch", "and", "handl", "except", "even", "think", "need", "num", "log", "log", "log", "like", "read", "about", "tech", "follow", "twitter", "where", "post", "all", "about", "the", "latest", "and", "greatest", "tech", "thank", "david", "smook", "bio", "georg", "seif", "certifi", "nerd", "and", "machin", "learn", "engin", "origin", "repost", "with", "permiss", "relat", "num", "quick", "and", "easi", "data", "visual", "python", "with", "code", "the", "num", "cluster", "algorithm", "data", "scientist", "need", "know", "select", "the", "best", "machin", "learn", "algorithm", "for", "regress", "problem"], "timestamp_scraper": 1556363969.701922, "title": "5 \u201cClean Code\u201d Tips That Will Dramatically Improve Your Productivity", "read_time": 333.9, "content_html": "<div class=\"post\" id=\"post-\">\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p><b>By <a href=\"https://towardsdatascience.com/@george.seif94\" rel=\"noopener noreferrer\" target=\"_blank\">George Seif</a>, AI / Machine Learning Engineer</b></p>\n<p><img alt=\"Header image\" class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/fit/t/800/240/0*5FpYFV2ihl7VNKmG.jpg\" width=\"99%\"/></p>\n<p>Quality code. Lots of people talk about it, but few actually do it right.</p>\n<p>Most people who code naturally know what quality code should look or\u00a0<em>feel\u00a0</em>like. It should be very easy to read and understand quickly, there shouldn\u2019t be any major faults, edge cases should be handled, and it should be \u201cself documenting\u201d. Still, many people miss the mark when trying (hopefully) to write quality code.</p>\n<p>The cause of the mistakes are understandable in many cases. It can be challenging to predict how people will interpret your code, whether they will find it easy to read or an absolute nightmare. Not only that, once your project gets very big even\u00a0<strong>you</strong>\u00a0might not be able to read it!</p>\n<p>In such a case, it\u2019s always good to establish some principals that you can rely on. Some go-to rules that you can always reference whenever you\u2019re designing or writing code.</p>\n<p>The following 5 clean coding principals are the ones I code by! They\u2019ve given me a massive productivity boost in my work and helped both myself and my colleagues be able to easily interpret and expand the code base which I\u2019ve worked on. Hopefully they help you code faster and better too!</p>\n<p>\u00a0</p>\n<h3><strong>If it isn\u2019t tested, it\u2019s\u00a0broken</strong></h3>\n<p>\u00a0<br>\nTest, test, test. We know we should always do it, but sometimes we cut corners so we can push the project out faster. But without thorough testing, how will you <strong>100%</strong>\u00a0fully know that the code works? Yes there are very simple pieces of code, but one is always surprised when that crazy edge case comes up that you thought you didn\u2019t need to test for!</br></p>\n<p>Do yourself and everyone on your team a favour and regularly test the code you write. You\u2019ll want to test in a\u00a0<em>coarse to fine\u00a0</em>style. Start small with unit tests to make sure every small part works on its own. Then slowly start testing the different subsystems together working your way up towards testing the whole new system end to end. Testing in this way allows you to easily track where the system breaks, since you can easily verify each individual component or the small subsystems as the source of any issues.</p>\n<p>\u00a0</p>\n<h3>Choose meaningful names</h3>\n<p>\u00a0<br>\nThis is what makes code self-documenting. When you read over your old code, you shouldn\u2019t have to look over every little comment and run every small piece of code to figure out what it all does!</br></p>\n<p>The code should\u00a0<em>roughly</em>\u00a0read like plain English. This is especially true for variable names, classes, and functions. Those three items should always have names that are self-explanatory. Rather than use a default name like \u201cx\u201d for example, call it \u201cwidth\u201d or \u201cdistance\u201d or whatever the variable is supposed to represent in \u201cread-world\u201d terms. Coding in \u201creal-world\u201d terms will help make your code read in that way</p>\n<p>\u00a0</p>\n<h3><strong>Classes and functions should be small and obey the Single Responsibility Principle (SRP)</strong></h3>\n<p>\u00a0<br>\nSmall classes and functions make code approximately 9832741892374 times easier to read...</br></p>\n<p>But seriously they really do. First off, they allow for very isolated unit testing. If the piece of code you are testing is small, it\u2019s easy to source and debug any issues that come up in the test or during deployment. Small classes and functions also allow for better readability. Instead of having a giant block of code with many loops and variables, you can reduce that block to a function that runs several\u00a0<em>smaller</em>\u00a0functions. You can then name each of those functions according to what they do and voila, human readable code!</p>\n<p>SRP gives you similar benefits. One responsibility means you only have to test a handful of edge cases and those cases are quite easy to debug. In addition it\u2019s quite easy to name the function so it has real-world meaning. Since it only has one single purpose, it\u2019ll just be named after it\u2019s purpose, rather than trying to name a function that\u2019s trying to accomplish so many different things.</p>\n<p>\u00a0</p>\n<h3>Catch and handle exceptions, even if you don\u2019t think you need\u00a0to</h3>\n<p>\u00a0<br>\nExceptions in code are usually edges case or errors that we would like to handle in our own specific way. For example, normally when an error is raised the program will stop; this definitely will not work for code we have deployed to production that is serving users! We\u2019ll want to handle that error separately, perhaps try to see if it\u2019s super critical or if we should just pass over it.</br></p>\n<p>You should always be catching and handling exceptions specifically, even if you don\u2019t think you need to. Better to be safe than sorry. Exception handling will give you a better sense of order and control over your code, since you know\u00a0<em>specifically</em>\u00a0what will happen if a certain exception is triggered or a piece of code fails. Having a deeper understand of your code like this makes it easier to debug and makes your code more fault tolerant.</p>\n<p>\u00a0</p>\n<h3>Logs, logs,\u00a0logs</h3>\n<p>\u00a0<br/>\nLog it. What you may ask?\u00a0\u2026. Everything that\u2019s what! There\u2019s no such thing as too much logs!</p>\n<p>Logs are your absolute number 1 source for debugging your code and monitoring your application when it\u2019s in production. You should be logging every major \u201cstep\u201d your program takes, any important calculations it makes, any errors, exceptions, or out of the ordinary results. It may also be useful to log the date and time that these events occur for easy tracking. All of this will make it easy to trace exactly which\u00a0<em>step in the pipeline the program failed</em>.</p>\n<p>Many common programming languages such as Python come with their own logging libraries that have some very useful functions you can play with. If your application is to run as a SaaS app, then you may want to consider off-device, centralised logging. This way if one of your servers dies you can easily recover the logs!</p>\n<p>\u00a0</p>\n<h3>TL;DR</h3>\n<p>\u00a0<br/>\n(1) If it isn\u2019t tested, it\u2019s broken<br/>\n(2) Choose meaningful names<br/>\n(3) Classes and functions should be small and obey the Single Responsibility Principle (SRP)<br/>\n(4) Catch and handle exceptions, even if you don\u2019t think you need to<br/>\n(5) Logs, logs, logs</p>\n<p>\u00a0<br/>\n<b>Like to read about\u00a0tech?</b></p>\n<p>Follow me on\u00a0<a href=\"https://twitter.com/GeorgeSeif94\" rel=\"noopener noreferrer\" target=\"_blank\">twitter</a>\u00a0where I post all about the latest and greatest tech!</p>\n<p>Thanks to\u00a0<a data-action-source=\"post_page\" href=\"https://medium.com/@DavidSmooke?source=post_page\" rel=\"noopener noreferrer\" target=\"_blank\">David Smooke</a>.</p>\n<p>\u00a0<br/>\n<b>Bio: <a href=\"https://towardsdatascience.com/@george.seif94\" rel=\"noopener noreferrer\" target=\"_blank\">George Seif</a></b> is a Certified Nerd and AI / Machine Learning Engineer.</p>\n<p><a href=\"https://medium.com/@george.seif94/these-5-clean-code-tips-will-dramatically-improve-your-productivity-b20c152783b\" rel=\"noopener noreferrer\" target=\"_blank\">Original</a>. Reposted with permission.</p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2018/07/5-quick-easy-data-visualizations-python-code.html\">5 Quick and Easy Data Visualizations in Python with Code</a>\n<li><a href=\"/2018/06/5-clustering-algorithms-data-scientists-need-know.html\">The 5 Clustering Algorithms Data Scientists Need to Know</a>\n<li><a href=\"/2018/08/selecting-best-machine-learning-algorithm-regression-problem.html\">Selecting the Best Machine Learning Algorithm for Your Regression Problem</a>\n</li></li></li></ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p> <script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets';\n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div> ", "website": "kdnuggets"}