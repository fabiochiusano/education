{"content": "By Matthew Mayo , KDnuggets. comments Are you familiar with Scikit-learn Pipelines? They are an extremely simple yet very useful tool for managing machine learning workflows. A typical machine learning task generally involves data preparation to varying degrees. We won't get into the wide array of activities which make up data preparation here, but there are many . Such tasks are known for taking up a large proportion of time spent on any given machine learning task. After a dataset is cleaned up from a potential initial state of massive disarray, however, there are still several less-intensive yet no less-important transformative data preprocessing steps such as feature extraction , feature scaling , and dimensionality reduction , to name just a few. Maybe your preprocessing requires only one of these tansformations, such as some form of scaling. But maybe you need to string a number of transformations together, and ultimately finish off with an estimator of some sort. This is where Scikit-learn Pipelines can be helpful. Scikit-learn's Pipeline class is designed as a manageable way to apply a series of data transformations followed by the application of an estimator . In fact, that's really all it is: Pipeline of transforms with a final estimator. That's it. Ultimately, this simple tool is useful for: Convenience in creating a coherent and easy-to-understand workflow Enforcing workflow implementation and the desired order of step applications Reproducibility Value in persistence of entire pipeline objects (goes to reproducibility and convenience) So let's have a quick look at Pipelines. Specifically, here is what we will do. Build 3 pipelines , each with a different estimator (classification algorithm), using default hyperparameters: Logisitic Regression Support Vector Machine Decision Tree To demonstrate pipeline transforms , will perform: feature scaling dimensionality reduction, using PCA to project data onto 2 dimensional space We will then end with fitting to our final estimators . Afterward, and almost completely unrelated, in order to make this a little more like a full-fledged workflow (it still isn't, but closer), we will: Followup with scoring test data Compare pipeline model accuracies Identify the \"best\" model, meaning that which has the highest accuracy on our test data Persist (save to file) the entire pipeline of the \"best\" model Granted, given that we will use default hyperparameters, this likely won't result in the most accurate possible models, but it will provide a sense of how to use simple pipelines. We will come back to the question of more complex modeling, hyperparameter tuning, and model evaluation afterward. Oh, and for additional simplicity, we are using the iris dataset. The code is well-commented, and should be easy to follow. Let's run our script and see what happens. $ python3 pipelines.py Logistic Regression pipeline test accuracy: 0.933\r Support Vector Machine pipeline test accuracy: 0.900\r Decision Tree pipeline test accuracy: 0.867\r Classifier with best accuracy: Logistic Regression\r Saved Logistic Regression pipeline to file So there you have it; a simple implementation of Scikit-learn pipelines. In this particular case, our logistic regression-based pipeline with default parameters scored the highest accuracy. As mentioned above, however, these results likely don't represent our best efforts. What if we did want to test out a series of different hyperparameters? Can we use grid search? Can we incorporate automated methods for tuning these hyperparameters? Can AutoML fit in to this picture somewhere? What about using cross-validation? Over the next couple of posts we will take a look at these additional issues, and see how these simple pieces fit together to make pipelines much more powerful than they may first appear to be given our initial example. \u00a0 Related: 7 Steps to Mastering Data Preparation with Python Machine Learning Workflows in Python from Scratch Part 1: Data Preparation Machine Learning Workflows in Python from Scratch Part 2: k-means Clustering", "title_html": "<h1 id=\"title\">Managing Machine Learning Workflows with Scikit-learn Pipelines Part 1: A Gentle Introduction</h1> ", "url": "https://www.kdnuggets.com/2017/12/managing-machine-learning-workflows-scikit-learn-pipelines-part-1.html", "tfidf": {"tfidf": {"after": 1.02070207021, "relat": 1.23750876919, "matthew": 6.908616187989999, "fact": 1.73375559681, "spent": 3.00795755968, "coher": 21.9585062241, "fit": 10.11210191082, "here": 4.84615384616, "typic": 2.2541530597799997, "lessimport": 1221.23076923, "form": 1.12755681818, "veri": 1.25880114177, "wide": 1.5598349381, "differ": 2.4730898045, "space": 2.39818731118, "clean": 6.86975335353, "addit": 2.49269901084, "paramet": 17.256521739100002, "script": 8.299006795610001, "number": 1.10142916609, "evalu": 6.9509632224199995, "the": 13.0, "dataset": 387.219512196, "about": 1.06486015159, "class": 2.11651779763, "onto": 4.47589512264, "pictur": 3.4953764861300005, "python": 168.8936170212, "just": 1.33580143037, "entir": 3.18731178478, "valu": 2.2777618364400003, "tree": 8.255850234, "complet": 1.24021560816, "grant": 2.2490437739099995, "classifi": 5.2937645882, "simplic": 25.4423076923, "code": 3.8807137619199996, "enforc": 4.93810264386, "scale": 11.240972386109998, "where": 1.06715063521, "particular": 1.3814827706200001, "complex": 2.34021226415, "creat": 1.2492917847, "massiv": 4.22571200426, "pipelinespi": 1221.23076923, "power": 1.3396337861799998, "vector": 51.79771615, "run": 1.55692850838, "how": 3.20500656102, "test": 15.94242677826, "lessintens": 1221.23076923, "seri": 2.93023255814, "unrel": 15.7813121272, "tansform": 1221.23076923, "initi": 2.7, "order": 2.49250333622, "end": 1.10680423871, "mayb": 42.1114058356, "given": 4.06278256419, "autom": 19.8202247191, "support": 2.5371154614400004, "mani": 1.04426757877, "will": 9.79848788768, "string": 8.37783641161, "over": 1.02525024217, "regress": 204.8516129032, "build": 1.6341739578, "somewher": 15.5647058824, "provid": 1.21552714187, "incorpor": 2.62847682119, "next": 1.4950560316400001, "regressionbas": 1221.23076923, "perform": 1.5313977042500002, "but": 4.06529671596, "demonstr": 2.64997496244, "need": 1.4372623574099999, "our": 14.14553014554, "classif": 8.067073170730001, "sort": 5.188235294119999, "final": 2.6801721955, "tune": 20.8346456692, "possibl": 1.4173734488, "applic": 6.85344269372, "best": 6.331405782640001, "exampl": 1.50483412322, "has": 1.0436497502, "have": 2.0297896822799997, "specif": 1.8719490626099997, "take": 2.27923336444, "reduct": 12.640127388539998, "follow": 2.09280253098, "default": 63.4194407457, "pythonnum": 1221.23076923, "name": 1.10211732037, "out": 1.06016694491, "model": 12.5435870424, "desir": 3.00170164492, "than": 1.03278688525, "iri": 49.3043478261, "realli": 4.7476076555, "much": 1.1942229577299999, "issu": 1.43921675279, "hyperparamet": 6106.15384615, "coupl": 3.2572835453400004, "mean": 1.44906900329, "involv": 1.4498630137000001, "task": 11.65924112607, "kmean": 1221.23076923, "may": 1.05201775893, "mayo": 49.7680250784, "logist": 56.3978685612, "happen": 2.96359902931, "quick": 2.205, "easi": 5.2937645882, "off": 1.5121440137200002, "persist": 13.575032064980002, "want": 1.99698113208, "then": 1.08657860516, "reproduc": 25.3610223642, "they": 2.06034650574, "design": 1.45825296225, "howev": 2.1890382626599996, "let": 6.97233201582, "piec": 3.24132298898, "kdnugget": 1221.23076923, "scikitlearn": 4884.92307692, "which": 2.01038369, "featur": 4.58137745286, "activ": 1.46403541129, "estim": 11.749555950249999, "simpl": 16.990582191799998, "appear": 1.3214582986499999, "that": 4.015936255, "appli": 2.2972073506, "togeth": 3.16191993626, "algorithm": 27.9507042254, "one": 1.00627495722, "array": 10.1444089457, "known": 1.0859097127200001, "see": 2.54484251022, "some": 2.08073394496, "such": 3.18454132122, "accuraci": 89.3344051446, "sever": 1.07241286139, "get": 1.78562591385, "still": 2.3732715449599997, "like": 3.44755700325, "implement": 7.15296237892, "manag": 3.2896808951599996, "should": 1.6643254009900001, "there": 3.12273800157, "file": 7.542042755339999, "part": 2.08661365578, "transform": 17.1003877639, "state": 1.0477133240899998, "fullfledg": 1221.23076923, "wellcom": 429.081081081, "afterward": 9.4528133373, "requir": 1.52844902282, "grid": 18.1232876712, "ani": 1.13383802314, "question": 2.20408163265, "proport": 5.26741871267, "time": 1.01127460348, "from": 3.00170164491, "result": 2.29223216864, "back": 1.26070038911, "project": 1.7534791252500002, "num": 8.00252032008, "step": 8.48379052368, "first": 1.00761614623, "most": 1.02096463023, "for": 5.0015752000500004, "finish": 3.22879804759, "all": 1.01146788991, "yet": 4.251740760580001, "closer": 5.5666199158500005, "with": 9.010783880909997, "followup": 466.941176471, "are": 6.17943561468, "almost": 1.53584212054, "degre": 2.4852849092, "case": 1.48498737256, "effort": 1.89247824532, "sens": 2.8365195640499996, "preprocess": 2442.46153846, "look": 3.8172637653199994, "conveni": 19.7094972067, "cluster": 12.5007874016, "object": 2.3488681757700003, "more": 3.0515120451, "and": 11.000692913429999, "score": 8.576985413300001, "extract": 7.703056768560001, "automl": 1221.23076923, "these": 5.3707713126000005, "prepar": 9.72049594368, "logisit": 1221.23076923, "post": 2.23826307627, "general": 1.1218202374200001, "master": 3.15125049623, "comment": 3.05954904606, "compar": 1.8662278123900002, "crossvalid": 1221.23076923, "can": 4.70504556568, "littl": 1.5499365420299998, "make": 3.2287980475800007, "way": 1.2190739461, "search": 3.2539454806299997, "onli": 1.0256476516600002, "each": 1.18974820144, "few": 1.31729173581, "goe": 4.251740760580001, "this": 6.02276176026, "accur": 5.768895348840001, "scratch": 51.6292682926, "extrem": 2.36602086438, "familiar": 6.86381322957, "data": 30.38792003406, "disarray": 77.067961165, "method": 2.5714285714300003, "machin": 28.170342205319997, "into": 1.01502461479, "ultim": 5.17049340498, "come": 1.32831325301, "vari": 2.4970116388799997, "repres": 1.46972782818, "abov": 1.90382539873, "dimension": 162.5529010239, "identifi": 2.30187037843, "potenti": 2.52080025405, "easytounderstand": 1221.23076923, "decis": 4.32, "what": 5.01373756512, "highest": 5.00425531914, "use": 9.266748816419998, "tool": 9.99433427762, "save": 5.6357827475999995, "workflow": 2215.255813956, "help": 1.39962972759, "larg": 1.18574949585, "learn": 11.61375274325, "pipelin": 578.4777327942, "mention": 2.53894130817}, "logtfidf": {"after": 0.020490694648099998, "relat": 0.21310030165399999, "matthew": 1.9327693554900003, "fact": 0.5502899207949999, "spent": 1.10126129684, "coher": 3.0891545917400003, "fit": 3.6453618806699994, "here": 1.7700763767400003, "typic": 0.812774319158, "lessimport": 7.1076144564399995, "form": 0.120053184191, "veri": 0.230159793238, "wide": 0.44458000675399995, "differ": 0.424642242624, "space": 0.874713164972, "clean": 1.9271282036300001, "addit": 0.440437765944, "paramet": 2.8481901438599997, "script": 2.1161358444599996, "number": 0.0966085784186, "evalu": 1.9388802431299998, "the": 0.0, "dataset": 10.53168913328, "about": 0.0628434774746, "class": 0.7497721899330001, "onto": 1.4987063591299998, "pictur": 1.25144109124, "python": 12.09197022888, "just": 0.289531434109, "entir": 0.9320613605399999, "valu": 0.823193310148, "tree": 2.8355497755, "complet": 0.215285242047, "grant": 0.8105051365070001, "classifi": 1.6665296351499999, "simplic": 3.2364134455299998, "code": 1.35601909597, "enforc": 1.59698117723, "scale": 3.9628591898399996, "where": 0.0649921387457, "particular": 0.323157393804, "complex": 0.8502416364309999, "creat": 0.222576818514, "massiv": 1.44118776833, "pipelinespi": 7.1076144564399995, "power": 0.292396282715, "vector": 6.50839775594, "run": 0.442714975539, "how": 0.9431339138600001, "test": 5.863346622618, "lessintens": 7.1076144564399995, "seri": 0.7638692213959999, "unrel": 2.75882646324, "tansform": 7.1076144564399995, "initi": 0.6002091849, "order": 0.44028076158600005, "end": 0.101476798618, "mayb": 6.094342891779999, "given": 0.9097674324930001, "autom": 2.9867028668299995, "support": 0.475761220074, "mani": 0.0433157581221, "will": 1.62229227932, "string": 2.1255896963900005, "over": 0.0249367214957, "regress": 15.743966065679999, "build": 0.491137452091, "somewher": 2.7450059076200004, "provid": 0.19517784432500002, "incorpor": 0.9664045229739999, "next": 0.402163685499, "regressionbas": 7.1076144564399995, "perform": 0.42618085058, "but": 0.0647694882876, "demonstr": 0.9745501918189999, "need": 0.362740163442, "our": 5.145835285092001, "classif": 2.08779073629, "sort": 1.64639361896, "final": 0.585467727896, "tune": 4.686940155319999, "possibl": 0.348805474891, "applic": 2.46320785698, "best": 1.836911731788, "exampl": 0.40868267499899996, "has": 0.0427239448548, "have": 0.0295700046824, "specif": 0.626980167541, "take": 0.261383924394, "reduct": 3.6874585726199998, "follow": 0.09071382218839999, "default": 9.153474486419999, "pythonnum": 7.1076144564399995, "name": 0.09723316638430002, "out": 0.0584263909193, "model": 4.424700438666001, "desir": 1.0991793428399999, "than": 0.0322608622182, "iri": 3.8980122683599996, "realli": 1.5576408397, "much": 0.17749572930100002, "issu": 0.364099043934, "hyperparamet": 35.5380722822, "coupl": 1.18089357972, "mean": 0.37092128352, "involv": 0.371469078658, "task": 4.0724604198300005, "kmean": 7.1076144564399995, "may": 0.050709995284400004, "mayo": 3.90737271112, "logist": 10.5845480208, "happen": 1.08640441802, "quick": 0.790727508899, "easi": 1.6665296351499999, "off": 0.41352852038800003, "persist": 3.8301700946399997, "want": 0.6916366062549999, "then": 0.08303386523089999, "reproduc": 5.08013252448, "they": 0.0594539895352, "design": 0.377239118022, "howev": 0.180630234695, "let": 2.4976051345599997, "piec": 1.17598157639, "kdnugget": 7.1076144564399995, "scikitlearn": 28.430457825759998, "which": 0.01035682769086, "featur": 1.2701622544259998, "activ": 0.381196603284, "estim": 4.271887679875, "simpl": 6.116106446949999, "appear": 0.278735898493, "that": 0.01590459351856, "appli": 0.8316941898119999, "togeth": 0.916064474616, "algorithm": 3.33044239518, "one": 0.0062553516455, "array": 2.31692271093, "known": 0.0824180805992, "see": 0.481843170984, "some": 0.079147018129, "such": 0.179087933418, "accuraci": 17.8253357842, "sever": 0.06991112039689999, "get": 0.579769005782, "still": 0.34224444285800004, "like": 0.417160729635, "implement": 2.54875881814, "manag": 0.995286774316, "should": 0.509419876758, "there": 0.12029367877649999, "file": 2.65469177446, "part": 0.08479062196560001, "transform": 6.148316135350001, "state": 0.0466100027668, "fullfledg": 7.1076144564399995, "wellcom": 6.0616459012599995, "afterward": 3.1063304485799996, "requir": 0.424253510675, "grid": 2.89719772297, "ani": 0.125608358366, "question": 0.790310929014, "proport": 1.66154043472, "time": 0.0112115188626, "from": 0.0017011625065979999, "result": 0.272757816762, "back": 0.23166743089699998, "project": 0.561601885907, "num": 0.0025199231631760004, "step": 3.11863517094, "first": 0.0075872898121599995, "most": 0.020747896295599998, "for": 0.0015749519769850003, "finish": 1.17210994649, "all": 0.011402632097799998, "yet": 1.508362618482, "closer": 1.7167880323700002, "with": 0.01077742542051, "followup": 6.14620328929, "are": 0.17680484149620002, "almost": 0.42907884333400004, "degre": 0.910387304568, "case": 0.395406268889, "effort": 0.637887211057, "sens": 1.04257779501, "preprocess": 14.215228912879999, "look": 1.2927733872, "conveni": 4.57590686146, "cluster": 2.52579163445, "object": 0.853933584803, "more": 0.05107479479999999, "and": 0.0006928915626996, "score": 2.9118706415400006, "extract": 2.04161723301, "automl": 7.1076144564399995, "these": 0.357668097004, "prepar": 3.5517691162480003, "logisit": 7.1076144564399995, "post": 0.8057001527009999, "general": 0.114952578063, "master": 1.14779935699, "comment": 1.11826753454, "compar": 0.6239191809269999, "crossvalid": 7.1076144564399995, "can": 0.649364385576, "littl": 0.438213989466, "make": 0.22049297346869998, "way": 0.19809150993500002, "search": 1.1798682540899998, "onli": 0.025324268329099998, "each": 0.173741689304, "few": 0.275577913653, "goe": 1.4473284897999998, "this": 0.022718694315, "accur": 1.75248061485, "scratch": 6.5018830922, "extrem": 0.8612095839370001, "familiar": 1.92626315167, "data": 10.9513852632, "disarray": 4.34468764511, "method": 0.944461608841, "machin": 9.74651706434, "into": 0.0149128632287, "ultim": 1.8996418791479999, "come": 0.28390990653000003, "vari": 0.915094672432, "repres": 0.38507723275, "abov": 0.643865229816, "dimension": 11.97717361467, "identifi": 0.833722000472, "potenti": 0.9245764122419999, "easytounderstand": 7.1076144564399995, "decis": 1.5402164433919998, "what": 0.903549187308, "highest": 1.834282867508, "use": 0.2628721775844, "tool": 3.21774235926, "save": 2.07197773094, "workflow": 35.46818218926, "help": 0.336207721344, "larg": 0.17037506060600002, "learn": 4.213760323724999, "pipelin": 62.460509340959995, "mention": 0.931747186336}, "logidf": {"after": 0.020490694648099998, "relat": 0.21310030165399999, "matthew": 1.9327693554900003, "fact": 0.5502899207949999, "spent": 1.10126129684, "coher": 3.0891545917400003, "fit": 1.2151206268899999, "here": 0.8850381883700001, "typic": 0.812774319158, "lessimport": 7.1076144564399995, "form": 0.120053184191, "veri": 0.230159793238, "wide": 0.44458000675399995, "differ": 0.212321121312, "space": 0.874713164972, "clean": 1.9271282036300001, "addit": 0.220218882972, "paramet": 2.8481901438599997, "script": 2.1161358444599996, "number": 0.0966085784186, "evalu": 1.9388802431299998, "the": 0.0, "dataset": 5.26584456664, "about": 0.0628434774746, "class": 0.7497721899330001, "onto": 1.4987063591299998, "pictur": 1.25144109124, "python": 4.03065674296, "just": 0.289531434109, "entir": 0.46603068026999994, "valu": 0.823193310148, "tree": 1.41777488775, "complet": 0.215285242047, "grant": 0.8105051365070001, "classifi": 1.6665296351499999, "simplic": 3.2364134455299998, "code": 1.35601909597, "enforc": 1.59698117723, "scale": 1.32095306328, "where": 0.0649921387457, "particular": 0.323157393804, "complex": 0.8502416364309999, "creat": 0.222576818514, "massiv": 1.44118776833, "pipelinespi": 7.1076144564399995, "power": 0.292396282715, "vector": 3.25419887797, "run": 0.442714975539, "how": 0.47156695693000006, "test": 0.977224437103, "lessintens": 7.1076144564399995, "seri": 0.38193461069799994, "unrel": 2.75882646324, "tansform": 7.1076144564399995, "initi": 0.30010459245, "order": 0.22014038079300002, "end": 0.101476798618, "mayb": 3.0471714458899997, "given": 0.303255810831, "autom": 2.9867028668299995, "support": 0.237880610037, "mani": 0.0433157581221, "will": 0.202786534915, "string": 2.1255896963900005, "over": 0.0249367214957, "regress": 3.9359915164199997, "build": 0.491137452091, "somewher": 2.7450059076200004, "provid": 0.19517784432500002, "incorpor": 0.9664045229739999, "next": 0.402163685499, "regressionbas": 7.1076144564399995, "perform": 0.42618085058, "but": 0.0161923720719, "demonstr": 0.9745501918189999, "need": 0.362740163442, "our": 0.8576392141820001, "classif": 2.08779073629, "sort": 1.64639361896, "final": 0.292733863948, "tune": 2.3434700776599997, "possibl": 0.348805474891, "applic": 1.23160392849, "best": 0.459227932947, "exampl": 0.40868267499899996, "has": 0.0427239448548, "have": 0.0147850023412, "specif": 0.626980167541, "take": 0.130691962197, "reduct": 1.8437292863099999, "follow": 0.045356911094199995, "default": 3.0511581621399997, "pythonnum": 7.1076144564399995, "name": 0.09723316638430002, "out": 0.0584263909193, "model": 0.7374500731110001, "desir": 1.0991793428399999, "than": 0.0322608622182, "iri": 3.8980122683599996, "realli": 1.5576408397, "much": 0.17749572930100002, "issu": 0.364099043934, "hyperparamet": 7.1076144564399995, "coupl": 1.18089357972, "mean": 0.37092128352, "involv": 0.371469078658, "task": 1.35748680661, "kmean": 7.1076144564399995, "may": 0.050709995284400004, "mayo": 3.90737271112, "logist": 2.6461370052, "happen": 1.08640441802, "quick": 0.790727508899, "easi": 1.6665296351499999, "off": 0.41352852038800003, "persist": 1.9150850473199998, "want": 0.6916366062549999, "then": 0.08303386523089999, "reproduc": 2.54006626224, "they": 0.0297269947676, "design": 0.377239118022, "howev": 0.0903151173475, "let": 1.2488025672799998, "piec": 1.17598157639, "kdnugget": 7.1076144564399995, "scikitlearn": 7.1076144564399995, "which": 0.00517841384543, "featur": 0.423387418142, "activ": 0.381196603284, "estim": 0.854377535975, "simpl": 1.2232212893899999, "appear": 0.278735898493, "that": 0.00397614837964, "appli": 0.8316941898119999, "togeth": 0.458032237308, "algorithm": 3.33044239518, "one": 0.0062553516455, "array": 2.31692271093, "known": 0.0824180805992, "see": 0.240921585492, "some": 0.0395735090645, "such": 0.059695977806, "accuraci": 2.5464765406, "sever": 0.06991112039689999, "get": 0.579769005782, "still": 0.17112222142900002, "like": 0.139053576545, "implement": 1.27437940907, "manag": 0.497643387158, "should": 0.509419876758, "there": 0.0400978929255, "file": 1.32734588723, "part": 0.04239531098280001, "transform": 1.22966322707, "state": 0.0466100027668, "fullfledg": 7.1076144564399995, "wellcom": 6.0616459012599995, "afterward": 1.5531652242899998, "requir": 0.424253510675, "grid": 2.89719772297, "ani": 0.125608358366, "question": 0.790310929014, "proport": 1.66154043472, "time": 0.0112115188626, "from": 0.000567054168866, "result": 0.136378908381, "back": 0.23166743089699998, "project": 0.561601885907, "num": 0.00031499039539700004, "step": 1.03954505698, "first": 0.0075872898121599995, "most": 0.020747896295599998, "for": 0.00031499039539700004, "finish": 1.17210994649, "all": 0.011402632097799998, "yet": 0.754181309241, "closer": 1.7167880323700002, "with": 0.00119749171339, "followup": 6.14620328929, "are": 0.0294674735827, "almost": 0.42907884333400004, "degre": 0.910387304568, "case": 0.395406268889, "effort": 0.637887211057, "sens": 1.04257779501, "preprocess": 7.1076144564399995, "look": 0.6463866936, "conveni": 2.28795343073, "cluster": 2.52579163445, "object": 0.853933584803, "more": 0.017024931599999998, "and": 6.29901420636e-05, "score": 1.4559353207700003, "extract": 2.04161723301, "automl": 7.1076144564399995, "these": 0.0715336194008, "prepar": 0.8879422790620001, "logisit": 7.1076144564399995, "post": 0.8057001527009999, "general": 0.114952578063, "master": 1.14779935699, "comment": 1.11826753454, "compar": 0.6239191809269999, "crossvalid": 7.1076144564399995, "can": 0.162341096394, "littl": 0.438213989466, "make": 0.07349765782289999, "way": 0.19809150993500002, "search": 1.1798682540899998, "onli": 0.025324268329099998, "each": 0.173741689304, "few": 0.275577913653, "goe": 1.4473284897999998, "this": 0.0037864490525, "accur": 1.75248061485, "scratch": 3.2509415461, "extrem": 0.8612095839370001, "familiar": 1.92626315167, "data": 1.2168205848, "disarray": 4.34468764511, "method": 0.944461608841, "machin": 1.39235958062, "into": 0.0149128632287, "ultim": 0.9498209395739999, "come": 0.28390990653000003, "vari": 0.915094672432, "repres": 0.38507723275, "abov": 0.643865229816, "dimension": 3.99239120489, "identifi": 0.833722000472, "potenti": 0.9245764122419999, "easytounderstand": 7.1076144564399995, "decis": 0.7701082216959999, "what": 0.225887296827, "highest": 0.917141433754, "use": 0.0292080197316, "tool": 1.60887117963, "save": 1.03598886547, "workflow": 5.91136369821, "help": 0.336207721344, "larg": 0.17037506060600002, "learn": 0.842752064745, "pipelin": 3.47002829672, "mention": 0.931747186336}, "freq": {"after": 1, "relat": 1, "matthew": 1, "fact": 1, "spent": 1, "coher": 1, "fit": 3, "here": 2, "typic": 1, "lessimport": 1, "form": 1, "veri": 1, "wide": 1, "differ": 2, "space": 1, "clean": 1, "addit": 2, "paramet": 1, "script": 1, "number": 1, "evalu": 1, "the": 13, "dataset": 2, "about": 1, "class": 1, "onto": 1, "pictur": 1, "python": 3, "just": 1, "entir": 2, "valu": 1, "tree": 2, "complet": 1, "grant": 1, "classifi": 1, "simplic": 1, "code": 1, "enforc": 1, "scale": 3, "where": 1, "particular": 1, "complex": 1, "creat": 1, "massiv": 1, "pipelinespi": 1, "power": 1, "vector": 2, "run": 1, "how": 2, "test": 6, "lessintens": 1, "seri": 2, "unrel": 1, "tansform": 1, "initi": 2, "order": 2, "end": 1, "mayb": 2, "given": 3, "autom": 1, "support": 2, "mani": 1, "will": 8, "string": 1, "over": 1, "regress": 4, "build": 1, "somewher": 1, "provid": 1, "incorpor": 1, "next": 1, "regressionbas": 1, "perform": 1, "but": 4, "demonstr": 1, "need": 1, "our": 6, "classif": 1, "sort": 1, "final": 2, "tune": 2, "possibl": 1, "applic": 2, "best": 4, "exampl": 1, "has": 1, "have": 2, "specif": 1, "take": 2, "reduct": 2, "follow": 2, "default": 3, "pythonnum": 1, "name": 1, "out": 1, "model": 6, "desir": 1, "than": 1, "iri": 1, "realli": 1, "much": 1, "issu": 1, "hyperparamet": 5, "coupl": 1, "mean": 1, "involv": 1, "task": 3, "kmean": 1, "may": 1, "mayo": 1, "logist": 4, "happen": 1, "quick": 1, "easi": 1, "off": 1, "persist": 2, "want": 1, "then": 1, "reproduc": 2, "they": 2, "design": 1, "howev": 2, "let": 2, "piec": 1, "kdnugget": 1, "scikitlearn": 4, "which": 2, "featur": 3, "activ": 1, "estim": 5, "simpl": 5, "appear": 1, "that": 4, "appli": 1, "togeth": 2, "algorithm": 1, "one": 1, "array": 1, "known": 1, "see": 2, "some": 2, "such": 3, "accuraci": 7, "sever": 1, "get": 1, "still": 2, "like": 3, "implement": 2, "manag": 2, "should": 1, "there": 3, "file": 2, "part": 2, "transform": 5, "state": 1, "fullfledg": 1, "wellcom": 1, "afterward": 2, "requir": 1, "grid": 1, "ani": 1, "question": 1, "proport": 1, "time": 1, "from": 3, "result": 2, "back": 1, "project": 1, "num": 8, "step": 3, "first": 1, "most": 1, "for": 5, "finish": 1, "all": 1, "yet": 2, "closer": 1, "with": 9, "followup": 1, "are": 6, "almost": 1, "degre": 1, "case": 1, "effort": 1, "sens": 1, "preprocess": 2, "look": 2, "conveni": 2, "cluster": 1, "object": 1, "more": 3, "and": 11, "score": 2, "extract": 1, "automl": 1, "these": 5, "prepar": 4, "logisit": 1, "post": 1, "general": 1, "master": 1, "comment": 1, "compar": 1, "crossvalid": 1, "can": 4, "littl": 1, "make": 3, "way": 1, "search": 1, "onli": 1, "each": 1, "few": 1, "goe": 1, "this": 6, "accur": 1, "scratch": 2, "extrem": 1, "familiar": 1, "data": 9, "disarray": 1, "method": 1, "machin": 7, "into": 1, "ultim": 2, "come": 1, "vari": 1, "repres": 1, "abov": 1, "dimension": 3, "identifi": 1, "potenti": 1, "easytounderstand": 1, "decis": 2, "what": 4, "highest": 2, "use": 9, "tool": 2, "save": 2, "workflow": 6, "help": 1, "larg": 1, "learn": 5, "pipelin": 18, "mention": 1}, "idf": {"after": 1.02070207021, "relat": 1.23750876919, "matthew": 6.908616187989999, "fact": 1.73375559681, "spent": 3.00795755968, "coher": 21.9585062241, "fit": 3.37070063694, "here": 2.42307692308, "typic": 2.2541530597799997, "lessimport": 1221.23076923, "form": 1.12755681818, "veri": 1.25880114177, "wide": 1.5598349381, "differ": 1.23654490225, "space": 2.39818731118, "clean": 6.86975335353, "addit": 1.24634950542, "paramet": 17.256521739100002, "script": 8.299006795610001, "number": 1.10142916609, "evalu": 6.9509632224199995, "the": 1.0, "dataset": 193.609756098, "about": 1.06486015159, "class": 2.11651779763, "onto": 4.47589512264, "pictur": 3.4953764861300005, "python": 56.2978723404, "just": 1.33580143037, "entir": 1.59365589239, "valu": 2.2777618364400003, "tree": 4.127925117, "complet": 1.24021560816, "grant": 2.2490437739099995, "classifi": 5.2937645882, "simplic": 25.4423076923, "code": 3.8807137619199996, "enforc": 4.93810264386, "scale": 3.7469907953699995, "where": 1.06715063521, "particular": 1.3814827706200001, "complex": 2.34021226415, "creat": 1.2492917847, "massiv": 4.22571200426, "pipelinespi": 1221.23076923, "power": 1.3396337861799998, "vector": 25.898858075, "run": 1.55692850838, "how": 1.60250328051, "test": 2.65707112971, "lessintens": 1221.23076923, "seri": 1.46511627907, "unrel": 15.7813121272, "tansform": 1221.23076923, "initi": 1.35, "order": 1.24625166811, "end": 1.10680423871, "mayb": 21.0557029178, "given": 1.35426085473, "autom": 19.8202247191, "support": 1.2685577307200002, "mani": 1.04426757877, "will": 1.22481098596, "string": 8.37783641161, "over": 1.02525024217, "regress": 51.2129032258, "build": 1.6341739578, "somewher": 15.5647058824, "provid": 1.21552714187, "incorpor": 2.62847682119, "next": 1.4950560316400001, "regressionbas": 1221.23076923, "perform": 1.5313977042500002, "but": 1.01632417899, "demonstr": 2.64997496244, "need": 1.4372623574099999, "our": 2.35758835759, "classif": 8.067073170730001, "sort": 5.188235294119999, "final": 1.34008609775, "tune": 10.4173228346, "possibl": 1.4173734488, "applic": 3.42672134686, "best": 1.5828514456600002, "exampl": 1.50483412322, "has": 1.0436497502, "have": 1.0148948411399998, "specif": 1.8719490626099997, "take": 1.13961668222, "reduct": 6.320063694269999, "follow": 1.04640126549, "default": 21.1398135819, "pythonnum": 1221.23076923, "name": 1.10211732037, "out": 1.06016694491, "model": 2.0905978404, "desir": 3.00170164492, "than": 1.03278688525, "iri": 49.3043478261, "realli": 4.7476076555, "much": 1.1942229577299999, "issu": 1.43921675279, "hyperparamet": 1221.23076923, "coupl": 3.2572835453400004, "mean": 1.44906900329, "involv": 1.4498630137000001, "task": 3.88641370869, "kmean": 1221.23076923, "may": 1.05201775893, "mayo": 49.7680250784, "logist": 14.0994671403, "happen": 2.96359902931, "quick": 2.205, "easi": 5.2937645882, "off": 1.5121440137200002, "persist": 6.787516032490001, "want": 1.99698113208, "then": 1.08657860516, "reproduc": 12.6805111821, "they": 1.03017325287, "design": 1.45825296225, "howev": 1.0945191313299998, "let": 3.48616600791, "piec": 3.24132298898, "kdnugget": 1221.23076923, "scikitlearn": 1221.23076923, "which": 1.005191845, "featur": 1.52712581762, "activ": 1.46403541129, "estim": 2.34991119005, "simpl": 3.3981164383599998, "appear": 1.3214582986499999, "that": 1.00398406375, "appli": 2.2972073506, "togeth": 1.58095996813, "algorithm": 27.9507042254, "one": 1.00627495722, "array": 10.1444089457, "known": 1.0859097127200001, "see": 1.27242125511, "some": 1.04036697248, "such": 1.06151377374, "accuraci": 12.7620578778, "sever": 1.07241286139, "get": 1.78562591385, "still": 1.1866357724799999, "like": 1.14918566775, "implement": 3.57648118946, "manag": 1.6448404475799998, "should": 1.6643254009900001, "there": 1.04091266719, "file": 3.7710213776699995, "part": 1.04330682789, "transform": 3.42007755278, "state": 1.0477133240899998, "fullfledg": 1221.23076923, "wellcom": 429.081081081, "afterward": 4.72640666865, "requir": 1.52844902282, "grid": 18.1232876712, "ani": 1.13383802314, "question": 2.20408163265, "proport": 5.26741871267, "time": 1.01127460348, "from": 1.00056721497, "result": 1.14611608432, "back": 1.26070038911, "project": 1.7534791252500002, "num": 1.00031504001, "step": 2.8279301745599996, "first": 1.00761614623, "most": 1.02096463023, "for": 1.00031504001, "finish": 3.22879804759, "all": 1.01146788991, "yet": 2.1258703802900003, "closer": 5.5666199158500005, "with": 1.0011982089899998, "followup": 466.941176471, "are": 1.02990593578, "almost": 1.53584212054, "degre": 2.4852849092, "case": 1.48498737256, "effort": 1.89247824532, "sens": 2.8365195640499996, "preprocess": 1221.23076923, "look": 1.9086318826599997, "conveni": 9.85474860335, "cluster": 12.5007874016, "object": 2.3488681757700003, "more": 1.0171706817, "and": 1.00006299213, "score": 4.2884927066500005, "extract": 7.703056768560001, "automl": 1221.23076923, "these": 1.07415426252, "prepar": 2.43012398592, "logisit": 1221.23076923, "post": 2.23826307627, "general": 1.1218202374200001, "master": 3.15125049623, "comment": 3.05954904606, "compar": 1.8662278123900002, "crossvalid": 1221.23076923, "can": 1.17626139142, "littl": 1.5499365420299998, "make": 1.0762660158600001, "way": 1.2190739461, "search": 3.2539454806299997, "onli": 1.0256476516600002, "each": 1.18974820144, "few": 1.31729173581, "goe": 4.251740760580001, "this": 1.00379362671, "accur": 5.768895348840001, "scratch": 25.8146341463, "extrem": 2.36602086438, "familiar": 6.86381322957, "data": 3.37643555934, "disarray": 77.067961165, "method": 2.5714285714300003, "machin": 4.02433460076, "into": 1.01502461479, "ultim": 2.58524670249, "come": 1.32831325301, "vari": 2.4970116388799997, "repres": 1.46972782818, "abov": 1.90382539873, "dimension": 54.1843003413, "identifi": 2.30187037843, "potenti": 2.52080025405, "easytounderstand": 1221.23076923, "decis": 2.16, "what": 1.25343439128, "highest": 2.50212765957, "use": 1.0296387573799999, "tool": 4.99716713881, "save": 2.8178913737999998, "workflow": 369.209302326, "help": 1.39962972759, "larg": 1.18574949585, "learn": 2.32275054865, "pipelin": 32.1376518219, "mention": 2.53894130817}}, "html": "<!DOCTYPE html>\n\n<html lang=\"en-US\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head profile=\"http://gmpg.org/xfn/11\">\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n<title>  Managing Machine Learning Workflows with Scikit-learn Pipelines Part 1: A Gentle Introduction</title>\n<link href=\"/wp-content/themes/kdn17/images/favicon.ico\" rel=\"shortcut icon\"/>\n<link href=\"/wp-content/themes/kdn17/style.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"/wp-content/themes/kdn17/js/jquery-1.9.1.min.js\" type=\"text/javascript\"></script>\n<script src=\"/aps/kda_all.js\" type=\"text/javascript\"></script>\n<link href=\"/feed/\" rel=\"alternate\" title=\"KDnuggets: Analytics, Big Data, Data Mining and Data Science Feed\" type=\"application/rss+xml\"/>\n<link href=\"//s.w.org\" rel=\"dns-prefetch\"/>\n<link href=\"https://www.kdnuggets.com/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/comments/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/2017/12/managing-machine-learning-workflows-scikit-learn-pipelines-part-1.html/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Managing Machine Learning Workflows with Scikit-learn Pipelines Part 1: A Gentle Introduction Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-json/\" rel=\"https://api.w.org/\"/>\n<link href=\"https://www.kdnuggets.com/xmlrpc.php?rsd\" rel=\"EditURI\" title=\"RSD\" type=\"application/rsd+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-includes/wlwmanifest.xml\" rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\"/>\n<link href=\"https://www.kdnuggets.com/2017/12/top-tweets-nov29-dec05.html\" rel=\"prev\" title=\"Top KDnuggets tweets, Nov 29 \u2013 Dec 5: Teaching the Data Science Process\"/>\n<link href=\"https://www.kdnuggets.com/2017/12/hearing-voice-your-customer.html\" rel=\"next\" title=\"Bill Inmon on Hearing The Voice Of Your Customer\"/>\n<meta content=\"WordPress 4.9.10\" name=\"generator\">\n<link href=\"https://www.kdnuggets.com/2017/12/managing-machine-learning-workflows-scikit-learn-pipelines-part-1.html\" rel=\"canonical\"/>\n<link href=\"https://www.kdnuggets.com/?p=75475\" rel=\"shortlink\"/>\n<link href=\"https://www.kdnuggets.com/2017/12/managing-machine-learning-workflows-scikit-learn-pipelines-part-1.html\" rel=\"canonical\"/>\n<!-- BEGIN ExactMetrics v5.3.7 Universal Analytics - https://exactmetrics.com/ -->\n<script>\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-361129-1', 'auto');\n  ga('send', 'pageview');\n</script>\n<!-- END ExactMetrics Universal Analytics -->\n</meta></head>\n<body class=\"post-template-default single single-post postid-75475 single-format-standard\">\n<div class=\"main_wrapper\"><!-- publ: 7-Dec, 2017  -->\n<div id=\"wrapper\">\n<div id=\"header\">\n<div id=\"header_log\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<h1>KDnuggets</h1>\n<div class=\"text-container\">\n            \u00a0\u00a0<a href=\"/news/subscribe.html\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a> \u00a0|\n <a href=\"https://twitter.com/kdnuggets\" target=\"_blank\"><img alt=\"Twitter\" height=\"48\" src=\"/images/tw_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n <a href=\"https://www.facebook.com/kdnuggets\" target=\"_blank\"><img alt=\"Facebook\" height=\"48\" src=\"/images/fb_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n<a href=\"https://www.linkedin.com/groups/54257/\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"48\" src=\"/images/in_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \n\u00a0|\u00a0 <a href=\"/contact.html\"><b>Contact</b></a>\n</div>\n</div>\n<div class=\"search\">\n<form action=\"/\" id=\"searchform\" method=\"get\">\n<input id=\"s\" name=\"s\" placeholder=\"search KDnuggets\" type=\"text\" value=\"\"/>\n<input type=\"submit\" value=\"Search\"/></form>\n</div>\n<div href=\"#\" id=\"pull\">\n<img class=\"menu\" src=\"/images/menu-30.png\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<img class=\"search-icon\" src=\"/images/search-icon.png\">\n</img></img></div>\n<div id=\"pull-menu\">\n<div class=\"navigation\"><ul class=\"menu\" id=\"menu-menu\"><li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-1070\" id=\"menu-item-1070\"><a href=\"/software/index.html\" title=\"Data Science Software\">SOFTWARE</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13756\" id=\"menu-item-13756\"><a href=\"/news/index.html\" title=\"News\">News/Blog</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-46286\" id=\"menu-item-46286\"><a href=\"/news/top-stories.html\">Top stories</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-42152\" id=\"menu-item-42152\"><a href=\"https://www.kdnuggets.com/opinions/index.html\" title=\"Opinions\">Opinions</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-46415\" id=\"menu-item-46415\"><a href=\"https://www.kdnuggets.com/tutorials/index.html\">Tutorials</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13364\" id=\"menu-item-13364\"><a href=\"/jobs/index.html\" title=\"Jobs in Analytics, Data Science\">JOBS</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-63505\" id=\"menu-item-63505\"><a href=\"https://www.kdnuggets.com/companies/index.html\">Companies</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13366\" id=\"menu-item-13366\"><a href=\"/courses/index.html\">Courses</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-1499\" id=\"menu-item-1499\"><a href=\"https://www.kdnuggets.com/datasets/index.html\">Datasets</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-14286\" id=\"menu-item-14286\"><a href=\"https://www.kdnuggets.com/education/index.html\" title=\"Education in Analytics, Big Data, Data Science\">EDUCATION</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-51558\" id=\"menu-item-51558\"><a href=\"https://www.kdnuggets.com/education/analytics-data-mining-certificates.html\" title=\"Certificates in Analytics, Big Data, Data Science\">Certificates</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-14752\" id=\"menu-item-14752\"><a href=\"/meetings/index.html\">Meetings</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13721\" id=\"menu-item-13721\"><a href=\"/webcasts/index.html\" title=\"Webcasts and Webinars\">Webinars</a></li>\n</ul></div></div>\n</div> <!--#header end-->\n<div id=\"spacer\">\n         \u00a0\n      </div>\n<div id=\"content_wrapper\">\n<div id=\"ad_wrapper\">\n<script type=\"text/javascript\">\n\tjQuery(function() {\n   \t    var pull        = $('#pull');\n            menu        = $('#header .navigation ul');\n            menuImage = $('#header img.menu');\n            mobileMenu        = $('#pull-menu-mobile');\n            search = $('img.search-icon');\n            searchBar = $('div.search');\n            searchClick = false;\n            search.on('click', function() {\n                  searchBar.slideToggle();\n                  searchClick = true;\n            });  \n     \t    $(menuImage).on('click', function(e) {\n\t        //e.preventDefault();\n                if (!searchClick) {\n                  menu.slideToggle();\n                }\n                searchClick = false;\n\t    });\n           /* pullMobile.on('click', function(e) {\n              e.preventDefault();\n                if (!searchClick) {\n                  mobileMenu.slideToggle();\n                }\n                searchClick = false;\n\t    });*/\n            \n\t});\n\tkpath = '/'; kda_top(); kda_sid_init(); kda_sid_n=3;\n\t</script>\n</div> <div class=\"breadcumb\">\n<br/>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2017/index.html\">2017</a> \u00bb <a href=\"https://www.kdnuggets.com/2017/12/index.html\">Dec</a> \u00bb <a href=\"https://www.kdnuggets.com/2017/12/tutorials.html\">Tutorials, Overviews</a> \u00bb Managing Machine Learning Workflows with Scikit-learn Pipelines Part 1: A Gentle Introduction (\u00a0<a href=\"/2017/n47.html\">17:n47</a>\u00a0)    </div>\n<div class=\"single\" id=\"content\">\n<div id=\"post-header\">\n<h1 id=\"title\">Managing Machine Learning Workflows with Scikit-learn Pipelines Part 1: A Gentle Introduction</h1>\n<div class=\"pagi\">\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2017/12/top-tweets-nov29-dec05.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"> <strong>Previous post</strong></img></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2017/12/hearing-voice-your-customer.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/>\u00a0<br/>\u00a0\n    <div class=\"addthis_native_toolbox\"></div>\n</div>\n<div class=\"tag-data\">Tags: <a href=\"https://www.kdnuggets.com/tag/data-preprocessing\" rel=\"tag\">Data Preprocessing</a>, <a href=\"https://www.kdnuggets.com/tag/pipeline\" rel=\"tag\">Pipeline</a>, <a href=\"https://www.kdnuggets.com/tag/python\" rel=\"tag\">Python</a>, <a href=\"https://www.kdnuggets.com/tag/scikit-learn\" rel=\"tag\">scikit-learn</a>, <a href=\"https://www.kdnuggets.com/tag/workflow\" rel=\"tag\">Workflow</a></div>\n<br/>\n<p class=\"excerpt\">\n     Scikit-learn's Pipeline class is designed as a manageable way to apply a series of data transformations followed by the application of an estimator.\n  </p>\n</div>\n<div id=\"post-header-ad\">\n<script type=\"text/javascript\">kda_sid_write(1); kda_sid_n=2;</script>\n</div>\n<hr class=\"grey-line\"/><br/>\n<div class=\"post\" id=\"post-\">\n<div class=\"author-link\"><b>By <a href=\"https://www.kdnuggets.com/author/matt-mayo\" rel=\"author\" title=\"Posts by Matthew Mayo\">Matthew Mayo</a>, KDnuggets.</b></div>\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p><img alt=\"Pipelines\" class=\"aligncenter\" src=\"https://image.ibb.co/bJCKeb/pipelines_1.png\" width=\"99%\"/></p>\n<p>Are you familiar with Scikit-learn Pipelines?</p>\n<p>They are an extremely simple yet very useful tool for managing machine learning workflows.</p>\n<p>A typical machine learning task generally involves data preparation to varying degrees. We won't get into the wide array of activities which make up data preparation here, <a href=\"/2017/06/7-steps-mastering-data-preparation-python.html\" target='_blank rel=\"noopener noreferrer\"'>but there are many</a>. Such tasks are known for taking up a large proportion of time spent on any given machine learning task. </p>\n<p>After a dataset is cleaned up from a potential initial state of massive disarray, however, there are still several less-intensive yet no less-important transformative data preprocessing steps such as <a href=\"https://en.wikipedia.org/wiki/Feature_extraction\" target='_blank rel=\"noopener noreferrer\"'>feature extraction</a>, <a href=\"https://en.wikipedia.org/wiki/Feature_scaling\" target='_blank rel=\"noopener noreferrer\"'>feature scaling</a>, and <a href=\"https://en.wikipedia.org/wiki/Dimensionality_reduction\" target='_blank rel=\"noopener noreferrer\"'>dimensionality reduction</a>, to name just a few.</p>\n<p>Maybe your preprocessing requires only one of these tansformations, such as some form of scaling. But maybe you need to string a number of transformations together, and ultimately finish off with an estimator of some sort. This is where Scikit-learn Pipelines can be helpful.</p>\n<p>Scikit-learn's <a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html\" target='_blank rel=\"noopener noreferrer\"'>Pipeline class</a>  is designed as a manageable way to apply a series of <a href=\"http://scikit-learn.org/stable/data_transforms.html\" target='_blank rel=\"noopener noreferrer\"'>data transformations</a> followed by the application of an <a href=\"http://scikit-learn.org/stable/tutorial/machine_learning_map/index.html\" target='_blank rel=\"noopener noreferrer\"'>estimator</a>. In fact, that's really all it is:</p>\n<blockquote><p>\nPipeline of transforms with a final estimator.\n</p></blockquote>\n<p>That's it. Ultimately, this simple tool is useful for:</p>\n<ul>\n<li>Convenience in creating a coherent and easy-to-understand workflow\n<li>Enforcing workflow implementation and the desired order of step applications\n<li>Reproducibility\n<li>Value in persistence of entire pipeline objects (goes to reproducibility and convenience)\n</li></li></li></li></ul>\n<p>So let's have a quick look at Pipelines. Specifically, here is what we will do.</p>\n<p><strong>Build 3 pipelines</strong>, each with a different estimator (classification algorithm), using default hyperparameters:</p>\n<ul>\n<li><a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html\" target='_blank rel=\"noopener noreferrer\"'>Logisitic Regression</a>\n<li><a href=\"http://scikit-learn.org/stable/modules/svm.html\" target='_blank rel=\"noopener noreferrer\"'>Support Vector Machine</a>\n<li><a href=\"http://scikit-learn.org/stable/modules/tree.html\" target='_blank rel=\"noopener noreferrer\"'>Decision Tree</a>\n</li></li></li></ul>\n<p>To demonstrate pipeline <strong>transforms</strong>, will perform:</p>\n<ul>\n<li>feature scaling\n<li>dimensionality reduction, using PCA to project data onto 2 dimensional space\n</li></li></ul>\n<p>We will then end with fitting to our final <strong>estimators</strong>.</p>\n<p>Afterward, and almost completely unrelated, in order to make this a little more like a full-fledged workflow (it still isn't, but closer), we will:</p>\n<ul>\n<li>Followup with scoring test data\n<li>Compare pipeline model accuracies\n<li>Identify the \"best\" model, meaning that which has the highest accuracy on our test data\n<li><a href=\"http://scikit-learn.org/stable/modules/model_persistence.html\" target='_blank rel=\"noopener noreferrer\"'>Persist</a> (save to file) the entire pipeline of the \"best\" model\n</li></li></li></li></ul>\n<p>Granted, given that we will use default hyperparameters, this likely won't result in the most accurate possible models, but it will provide a sense of how to use simple pipelines. We will come back to the question of more complex modeling, hyperparameter tuning, and model evaluation afterward.</p>\n<p>Oh, and for additional simplicity, we are using the iris dataset. The code is well-commented, and should be easy to follow.</p>\n<p><script src=\"https://gist.github.com/mmmayo13/110201055ed7cf848bf4efabd94e7b9f.js\"></script></p>\n<p>Let's run our script and see what happens.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre> $ python3 pipelines.py</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>Logistic Regression pipeline test accuracy: 0.933\r\nSupport Vector Machine pipeline test accuracy: 0.900\r\nDecision Tree pipeline test accuracy: 0.867\r\nClassifier with best accuracy: Logistic Regression\r\nSaved Logistic Regression pipeline to file</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>So there you have it; a simple implementation of Scikit-learn pipelines. In this particular case, our logistic regression-based pipeline with default parameters scored the highest accuracy.</p>\n<p>As mentioned above, however, these results likely don't represent our best efforts. What if we did want to test out a series of different hyperparameters? Can we use grid search? Can we incorporate automated methods for tuning these hyperparameters? Can AutoML fit in to this picture somewhere? What about using cross-validation?</p>\n<p>Over the next couple of posts we will take a look at these additional issues, and see how these simple pieces fit together to make pipelines much more powerful than they may first appear to be given our initial example.</p>\n<p>\u00a0<br>\n<b>Related:</b></br></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2017/06/7-steps-mastering-data-preparation-python.html\">7 Steps to Mastering Data Preparation with Python</a>\n<li><a href=\"/2017/05/machine-learning-workflows-python-scratch-part-1.html\">Machine Learning Workflows in Python from Scratch Part 1: Data Preparation</a>\n<li><a href=\"/2017/06/machine-learning-workflows-python-scratch-part-2.html\">Machine Learning Workflows in Python from Scratch Part 2: k-means Clustering</a>\n</li></li></li></ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p> <script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets';\n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div>\n<div class=\"page-link\"></div>\n<div class=\"pagi\">\n<hr class=\"grey-line\"/>\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2017/12/top-tweets-nov29-dec05.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"/> <strong>Previous post</strong></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2017/12/hearing-voice-your-customer.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/><br/>\n<div>\n<hr class=\"grey-line\"/><br/>\n<h2>Top Stories Past 30 Days</h2>\n<table align=\"center\" cellpadding=\"3\" cellspacing=\"10\" class=\"latn\" width=\"100%\">\n<tr>\n<td valign=\"top\" width=\"50%\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Popular</b></th></tr>\n<tr><td>\n<ol class=\"three_ol\"><li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-1-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-2-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n<li> <a href=\"/2018/05/simplilearn-9-must-have-skills-data-scientist.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-3-simplilearn');\"><b>9 Must-have skills you need to become a Data Scientist, updated</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-4-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/03/another-10-free-must-read-books-for-machine-learning-and-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-5-another-10-books');\"><b>Another 10 Free Must-Read Books for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-6-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/best-data-visualization-techniques.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-7-best-data-viz');\"><b>Best Data Visualization Techniques for small and large data</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td> <td valign=\"top\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Shared</b></th></tr>\n<tr><td><ol class=\"three_ol\">\n<li> <a href=\"/2019/04/another-10-free-must-see-courses-machine-learning-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-1-another-10-courses');\"><b>Another 10 Free Must-See Courses for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-2-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/03/r-vs-python-data-visualization.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-3-r-py-viz');\"><b>R vs Python for Data Visualization</b></a>\n<li> <a href=\"/2019/03/deep-learning-toolset-overview.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-4-dl-toolset');\"><b>The Deep Learning Toolset \u2014 An Overview</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-5-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-6-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-7-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<!--#content end--></div>\n<div id=\"sidebar\">\n<div class=\"latn\">\n<h3><b><a href=\"/news/index.html\">Latest News</a></b></h3>\n<ul style=\"font-size:14px; margin-top:5px\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/datarobot-delivering-trusted-ai-microsoft.html\">Delivering Trusted AI with DataRobot and Microsoft</a><li> <a href=\"https://www.kdnuggets.com/2019/04/formulated-ai-data-production-landscape.html\">AI and the data production landscape</a><li> <a href=\"https://www.kdnuggets.com/2019/04/most-desired-skill-data-science.html\">The most desired skill in data science</a><li> <a href=\"https://www.kdnuggets.com/2019/04/projects-include-data-science-portfolio.html\">Projects to Include in a Data Science Portfolio</a><li> <a href=\"https://www.kdnuggets.com/2019/04/rework-meet-worlds-leading-ai-deep-learning-experts.html\">Meet the World\u2019s Leading AI &amp; Deep Learning ...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/problem-data-science-job-postings.html\">The problem with data science job postings</a></li></li></li></li></li></li></ul>\n</div>\n<div>\n<script type=\"text/javascript\">kda_sid_write(kda_sid_n);</script>\n</div>\n<br/><script src=\"/aps/sbm.js\" type=\"text/javascript\"></script>\n</div>\n</div><div class=\"breadcrumbs_bottom\">\n<div class=\"breadcumb\">\n<br>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2017/index.html\">2017</a> \u00bb <a href=\"https://www.kdnuggets.com/2017/12/index.html\">Dec</a> \u00bb <a href=\"https://www.kdnuggets.com/2017/12/tutorials.html\">Tutorials, Overviews</a> \u00bb Managing Machine Learning Workflows with Scikit-learn Pipelines Part 1: A Gentle Introduction (\u00a0<a href=\"/2017/n47.html\">17:n47</a>\u00a0)    </br></div>\n</div>\n<!--#content_wrapper end--></div>\n<br>\n<div id=\"footer\">\n<br/>\u00a9 2019 KDnuggets. <a href=\"/about/index.html\">About KDnuggets</a>. \u00a0<a href=\"/news/privacy-policy.html\">Privacy policy</a>. <a href=\"/terms-of-service.html\">Terms of Service</a><br/>\u00a0\n<div class=\"kd_bottom\">\n<div class=\"footer-container\">\n<div class=\"footer-news\">\n<a href=\"/news/subscribe.html\" onclick=\"_gaq.push(['_trackPageview','/x/bot/sub']);\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a>\n</div>\n<div class=\"footer-sm\">\n<a href=\"https://twitter.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/twt']);\" target=\"_blank\"><img height=\"32\" src=\"/images/tw_c48.png\" width=\"32\"/></a>\n<a href=\"https://facebook.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/fb']);\" target=\"_blank\"><img alt=\"Facebook\" height=\"32\" src=\"/images/fb_c48.png\" width=\"32\"/></a>\n<a href=\"https://www.linkedin.com/groups/54257\" onclick=\"_gaq.push(['_trackPageview','/x/bot/in']);\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"32\" src=\"/images/in_c48.png\" width=\"32\"/></a>\n</div>\n</div>\n<div class=\"close-footer\">X</div>\n</div>\n<script type=\"text/javascript\">\n  jQuery('.close-footer').click(\n      function(){       \n         jQuery('.kd_bottom').hide();\n      }\n   );\n</script> </div>\n<div class=\"clear\"><!--blank--></div>\n</br></div>\n<div style=\"display: none;\"><div id=\"boxzilla-box-82996-content\"><script type=\"text/javascript\">(function() {\n\tif (!window.mc4wp) {\n\t\twindow.mc4wp = {\n\t\t\tlisteners: [],\n\t\t\tforms    : {\n\t\t\t\ton: function (event, callback) {\n\t\t\t\t\twindow.mc4wp.listeners.push({\n\t\t\t\t\t\tevent   : event,\n\t\t\t\t\t\tcallback: callback\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})();\n</script><!-- MailChimp for WordPress v4.1.14 - https://wordpress.org/plugins/mailchimp-for-wp/ --><form class=\"mc4wp-form mc4wp-form-77281\" data-id=\"77281\" data-name=\"Subscribe to KDnuggets News\" id=\"mc4wp-form-1\" method=\"post\"><div class=\"mc4wp-form-fields\"><div class=\"header-container\">\n<img align=\"left\" src=\"/wp-content/uploads/envelope.png\"><a href=\"/news/subscribe.html\">Get KDnuggets, a leading newsletter on AI, \r\n  Data Science, and Machine Learning</a>\n</img></div>\n<div class=\"form-fields\">\n<div class=\"field-container\"><label>Email:</label><input maxlength=\"60\" name=\"EMAIL\" placeholder=\"Your email\" required=\"\" size=\"30\" type=\"email\"/></div>\n<div class=\"field-container submit-container\"><div class=\"form-button\" onclick=\"document.getElementById('mc4wp-form-1').submit()\">Sign Up</div></div>\n</div>\n<label style=\"display: none !important;\">Leave this field empty if you're human: <input autocomplete=\"off\" name=\"_mc4wp_honeypot\" tabindex=\"-1\" type=\"text\" value=\"\"/></label><input name=\"_mc4wp_timestamp\" type=\"hidden\" value=\"1556327337\"/><input name=\"_mc4wp_form_id\" type=\"hidden\" value=\"77281\"/><input name=\"_mc4wp_form_element_id\" type=\"hidden\" value=\"mc4wp-form-1\"/></div><div class=\"mc4wp-response\"></div></form><!-- / MailChimp for WordPress Plugin -->\n</div></div><script type=\"text/javascript\">(function() {function addEventListener(element,event,handler) {\n\tif(element.addEventListener) {\n\t\telement.addEventListener(event,handler, false);\n\t} else if(element.attachEvent){\n\t\telement.attachEvent('on'+event,handler);\n\t}\n}function maybePrefixUrlField() {\n\tif(this.value.trim() !== '' && this.value.indexOf('http') !== 0) {\n\t\tthis.value = \"http://\" + this.value;\n\t}\n}\n\nvar urlFields = document.querySelectorAll('.mc4wp-form input[type=\"url\"]');\nif( urlFields && urlFields.length > 0 ) {\n\tfor( var j=0; j < urlFields.length; j++ ) {\n\t\taddEventListener(urlFields[j],'blur',maybePrefixUrlField);\n\t}\n}/* test if browser supports date fields */\nvar testInput = document.createElement('input');\ntestInput.setAttribute('type', 'date');\nif( testInput.type !== 'date') {\n\n\t/* add placeholder & pattern to all date fields */\n\tvar dateFields = document.querySelectorAll('.mc4wp-form input[type=\"date\"]');\n\tfor(var i=0; i<dateFields.length; i++) {\n\t\tif(!dateFields[i].placeholder) {\n\t\t\tdateFields[i].placeholder = 'YYYY-MM-DD';\n\t\t}\n\t\tif(!dateFields[i].pattern) {\n\t\t\tdateFields[i].pattern = '[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])';\n\t\t}\n\t}\n}\n\n})();</script><script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_options = {\"testMode\":\"\",\"boxes\":[{\"id\":82996,\"icon\":\"&times;\",\"content\":\"\",\"css\":{\"background_color\":\"#eeee22\",\"width\":600,\"border_width\":2,\"border_style\":\"double\",\"position\":\"center\"},\"trigger\":{\"method\":\"time_on_page\",\"value\":\"3\"},\"animation\":\"fade\",\"cookie\":{\"triggered\":0,\"dismissed\":336},\"rehide\":true,\"position\":\"center\",\"screenWidthCondition\":{\"condition\":\"larger\",\"value\":500},\"closable\":true,\"post\":{\"id\":82996,\"title\":\"Subscribe to KDnuggets\",\"slug\":\"subscribe-to-kdnuggets\"}}]};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla/assets/js/script.min.js?ver=3.2.5\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_stats_config = {\"ajaxurl\":\"https:\\/\\/www.kdnuggets.com\\/wp-admin\\/admin-ajax.php?action=boxzilla_stats_track\"};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla-stats/assets/js/tracking.min.js?ver=1.0.4\" type=\"text/javascript\"></script>\n<script src=\"https://www.kdnuggets.com/wp-includes/js/wp-embed.min.js?ver=4.9.10\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar mc4wp_forms_config = [];\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/forms-api.min.js?ver=4.1.14\" type=\"text/javascript\"></script>\n<!--[if lte IE 9]>\n<script type='text/javascript' src='https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/third-party/placeholders.min.js?ver=4.1.14'></script>\n<![endif]-->\n<!--/.main_wrapper--></body></html>\n<script src=\"https://s7.addthis.com/js/300/addthis_widget.js#pubid=gpsaddthis\" type=\"text/javascript\"></script>\n\n\n<!-- Dynamic page generated in 0.671 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2019-04-26 21:08:57 -->\n<!-- Compression = gzip -->", "content_tokenized": ["matthew", "mayo", "kdnugget", "comment", "are", "familiar", "with", "scikitlearn", "pipelin", "they", "are", "extrem", "simpl", "yet", "veri", "use", "tool", "for", "manag", "machin", "learn", "workflow", "typic", "machin", "learn", "task", "general", "involv", "data", "prepar", "vari", "degre", "get", "into", "the", "wide", "array", "activ", "which", "make", "data", "prepar", "here", "but", "there", "are", "mani", "such", "task", "are", "known", "for", "take", "larg", "proport", "time", "spent", "ani", "given", "machin", "learn", "task", "after", "dataset", "clean", "from", "potenti", "initi", "state", "massiv", "disarray", "howev", "there", "are", "still", "sever", "lessintens", "yet", "lessimport", "transform", "data", "preprocess", "step", "such", "featur", "extract", "featur", "scale", "and", "dimension", "reduct", "name", "just", "few", "mayb", "preprocess", "requir", "onli", "one", "these", "tansform", "such", "some", "form", "scale", "but", "mayb", "need", "string", "number", "transform", "togeth", "and", "ultim", "finish", "off", "with", "estim", "some", "sort", "this", "where", "scikitlearn", "pipelin", "can", "help", "scikitlearn", "pipelin", "class", "design", "manag", "way", "appli", "seri", "data", "transform", "follow", "the", "applic", "estim", "fact", "that", "realli", "all", "pipelin", "transform", "with", "final", "estim", "that", "ultim", "this", "simpl", "tool", "use", "for", "conveni", "creat", "coher", "and", "easytounderstand", "workflow", "enforc", "workflow", "implement", "and", "the", "desir", "order", "step", "applic", "reproduc", "valu", "persist", "entir", "pipelin", "object", "goe", "reproduc", "and", "conveni", "let", "have", "quick", "look", "pipelin", "specif", "here", "what", "will", "build", "num", "pipelin", "each", "with", "differ", "estim", "classif", "algorithm", "use", "default", "hyperparamet", "logisit", "regress", "support", "vector", "machin", "decis", "tree", "demonstr", "pipelin", "transform", "will", "perform", "featur", "scale", "dimension", "reduct", "use", "project", "data", "onto", "num", "dimension", "space", "will", "then", "end", "with", "fit", "our", "final", "estim", "afterward", "and", "almost", "complet", "unrel", "order", "make", "this", "littl", "more", "like", "fullfledg", "workflow", "still", "but", "closer", "will", "followup", "with", "score", "test", "data", "compar", "pipelin", "model", "accuraci", "identifi", "the", "best", "model", "mean", "that", "which", "has", "the", "highest", "accuraci", "our", "test", "data", "persist", "save", "file", "the", "entir", "pipelin", "the", "best", "model", "grant", "given", "that", "will", "use", "default", "hyperparamet", "this", "like", "result", "the", "most", "accur", "possibl", "model", "but", "will", "provid", "sens", "how", "use", "simpl", "pipelin", "will", "come", "back", "the", "question", "more", "complex", "model", "hyperparamet", "tune", "and", "model", "evalu", "afterward", "and", "for", "addit", "simplic", "are", "use", "the", "iri", "dataset", "the", "code", "wellcom", "and", "should", "easi", "follow", "let", "run", "our", "script", "and", "see", "what", "happen", "pythonnum", "pipelinespi", "logist", "regress", "pipelin", "test", "accuraci", "num", "support", "vector", "machin", "pipelin", "test", "accuraci", "num", "decis", "tree", "pipelin", "test", "accuraci", "num", "classifi", "with", "best", "accuraci", "logist", "regress", "save", "logist", "regress", "pipelin", "file", "there", "have", "simpl", "implement", "scikitlearn", "pipelin", "this", "particular", "case", "our", "logist", "regressionbas", "pipelin", "with", "default", "paramet", "score", "the", "highest", "accuraci", "mention", "abov", "howev", "these", "result", "like", "repres", "our", "best", "effort", "what", "want", "test", "out", "seri", "differ", "hyperparamet", "can", "use", "grid", "search", "can", "incorpor", "autom", "method", "for", "tune", "these", "hyperparamet", "can", "automl", "fit", "this", "pictur", "somewher", "what", "about", "use", "crossvalid", "over", "the", "next", "coupl", "post", "will", "take", "look", "these", "addit", "issu", "and", "see", "how", "these", "simpl", "piec", "fit", "togeth", "make", "pipelin", "much", "more", "power", "than", "they", "may", "first", "appear", "given", "our", "initi", "exampl", "relat", "num", "step", "master", "data", "prepar", "with", "python", "machin", "learn", "workflow", "python", "from", "scratch", "part", "num", "data", "prepar", "machin", "learn", "workflow", "python", "from", "scratch", "part", "num", "kmean", "cluster"], "timestamp_scraper": 1556379516.248148, "title": "Managing Machine Learning Workflows with Scikit-learn Pipelines Part 1: A Gentle Introduction", "read_time": 188.4, "content_html": "<div class=\"post\" id=\"post-\">\n<div class=\"author-link\"><b>By <a href=\"https://www.kdnuggets.com/author/matt-mayo\" rel=\"author\" title=\"Posts by Matthew Mayo\">Matthew Mayo</a>, KDnuggets.</b></div>\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p><img alt=\"Pipelines\" class=\"aligncenter\" src=\"https://image.ibb.co/bJCKeb/pipelines_1.png\" width=\"99%\"/></p>\n<p>Are you familiar with Scikit-learn Pipelines?</p>\n<p>They are an extremely simple yet very useful tool for managing machine learning workflows.</p>\n<p>A typical machine learning task generally involves data preparation to varying degrees. We won't get into the wide array of activities which make up data preparation here, <a href=\"/2017/06/7-steps-mastering-data-preparation-python.html\" target='_blank rel=\"noopener noreferrer\"'>but there are many</a>. Such tasks are known for taking up a large proportion of time spent on any given machine learning task. </p>\n<p>After a dataset is cleaned up from a potential initial state of massive disarray, however, there are still several less-intensive yet no less-important transformative data preprocessing steps such as <a href=\"https://en.wikipedia.org/wiki/Feature_extraction\" target='_blank rel=\"noopener noreferrer\"'>feature extraction</a>, <a href=\"https://en.wikipedia.org/wiki/Feature_scaling\" target='_blank rel=\"noopener noreferrer\"'>feature scaling</a>, and <a href=\"https://en.wikipedia.org/wiki/Dimensionality_reduction\" target='_blank rel=\"noopener noreferrer\"'>dimensionality reduction</a>, to name just a few.</p>\n<p>Maybe your preprocessing requires only one of these tansformations, such as some form of scaling. But maybe you need to string a number of transformations together, and ultimately finish off with an estimator of some sort. This is where Scikit-learn Pipelines can be helpful.</p>\n<p>Scikit-learn's <a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html\" target='_blank rel=\"noopener noreferrer\"'>Pipeline class</a>  is designed as a manageable way to apply a series of <a href=\"http://scikit-learn.org/stable/data_transforms.html\" target='_blank rel=\"noopener noreferrer\"'>data transformations</a> followed by the application of an <a href=\"http://scikit-learn.org/stable/tutorial/machine_learning_map/index.html\" target='_blank rel=\"noopener noreferrer\"'>estimator</a>. In fact, that's really all it is:</p>\n<blockquote><p>\nPipeline of transforms with a final estimator.\n</p></blockquote>\n<p>That's it. Ultimately, this simple tool is useful for:</p>\n<ul>\n<li>Convenience in creating a coherent and easy-to-understand workflow\n<li>Enforcing workflow implementation and the desired order of step applications\n<li>Reproducibility\n<li>Value in persistence of entire pipeline objects (goes to reproducibility and convenience)\n</li></li></li></li></ul>\n<p>So let's have a quick look at Pipelines. Specifically, here is what we will do.</p>\n<p><strong>Build 3 pipelines</strong>, each with a different estimator (classification algorithm), using default hyperparameters:</p>\n<ul>\n<li><a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html\" target='_blank rel=\"noopener noreferrer\"'>Logisitic Regression</a>\n<li><a href=\"http://scikit-learn.org/stable/modules/svm.html\" target='_blank rel=\"noopener noreferrer\"'>Support Vector Machine</a>\n<li><a href=\"http://scikit-learn.org/stable/modules/tree.html\" target='_blank rel=\"noopener noreferrer\"'>Decision Tree</a>\n</li></li></li></ul>\n<p>To demonstrate pipeline <strong>transforms</strong>, will perform:</p>\n<ul>\n<li>feature scaling\n<li>dimensionality reduction, using PCA to project data onto 2 dimensional space\n</li></li></ul>\n<p>We will then end with fitting to our final <strong>estimators</strong>.</p>\n<p>Afterward, and almost completely unrelated, in order to make this a little more like a full-fledged workflow (it still isn't, but closer), we will:</p>\n<ul>\n<li>Followup with scoring test data\n<li>Compare pipeline model accuracies\n<li>Identify the \"best\" model, meaning that which has the highest accuracy on our test data\n<li><a href=\"http://scikit-learn.org/stable/modules/model_persistence.html\" target='_blank rel=\"noopener noreferrer\"'>Persist</a> (save to file) the entire pipeline of the \"best\" model\n</li></li></li></li></ul>\n<p>Granted, given that we will use default hyperparameters, this likely won't result in the most accurate possible models, but it will provide a sense of how to use simple pipelines. We will come back to the question of more complex modeling, hyperparameter tuning, and model evaluation afterward.</p>\n<p>Oh, and for additional simplicity, we are using the iris dataset. The code is well-commented, and should be easy to follow.</p>\n<p><script src=\"https://gist.github.com/mmmayo13/110201055ed7cf848bf4efabd94e7b9f.js\"></script></p>\n<p>Let's run our script and see what happens.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre> $ python3 pipelines.py</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>Logistic Regression pipeline test accuracy: 0.933\r\nSupport Vector Machine pipeline test accuracy: 0.900\r\nDecision Tree pipeline test accuracy: 0.867\r\nClassifier with best accuracy: Logistic Regression\r\nSaved Logistic Regression pipeline to file</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>So there you have it; a simple implementation of Scikit-learn pipelines. In this particular case, our logistic regression-based pipeline with default parameters scored the highest accuracy.</p>\n<p>As mentioned above, however, these results likely don't represent our best efforts. What if we did want to test out a series of different hyperparameters? Can we use grid search? Can we incorporate automated methods for tuning these hyperparameters? Can AutoML fit in to this picture somewhere? What about using cross-validation?</p>\n<p>Over the next couple of posts we will take a look at these additional issues, and see how these simple pieces fit together to make pipelines much more powerful than they may first appear to be given our initial example.</p>\n<p>\u00a0<br>\n<b>Related:</b></br></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2017/06/7-steps-mastering-data-preparation-python.html\">7 Steps to Mastering Data Preparation with Python</a>\n<li><a href=\"/2017/05/machine-learning-workflows-python-scratch-part-1.html\">Machine Learning Workflows in Python from Scratch Part 1: Data Preparation</a>\n<li><a href=\"/2017/06/machine-learning-workflows-python-scratch-part-2.html\">Machine Learning Workflows in Python from Scratch Part 2: k-means Clustering</a>\n</li></li></li></ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p> <script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets';\n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div> ", "website": "kdnuggets"}