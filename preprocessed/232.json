{"content": "comments By Susan Li , Sr. Data Scientist Photo credit: Pixabay When working on a\u00a0 supervised machine learning \u00a0problem with a given data set, we try different algorithms and techniques to search for models to produce general hypotheses, which then make the most accurate predictions possible about future instances. The same principles apply to text (or document) classification where there are many models can be used to train a text classifier.\u00a0 The answer to the question \u201cWhat machine learning model should I use?\u201d is always \u201cIt depends.\u201d Even the most experienced data scientists can\u2019t tell which algorithm will perform best before experimenting them . This is what we are going to do today: use everything that we have presented about text classification in the previous articles (and more) and comparing between the text classification models we trained in order to choose the most accurate one for our problem. \u00a0 The Data \u00a0 We are using a relatively large data set of Stack Overflow questions and tags. The data is available in\u00a0 Google BigQuery , it is also publicly available at this Cloud Storage URL: /tensorflow-workshop-examples/stack-overflow-data.csv . \u00a0 Exploring the\u00a0Data \u00a0 Figure 1 \u00a0 10276752 We have over 10 million words in the data. my_tags = ['java','html','asp.net','c#','ruby-on-rails','jquery','mysql','php','ios','javascript','python','c','css','android','iphone','sql','objective-c','c++','angularjs','.net']\r )\r .; Figure 2 \u00a0 The classes are very well balanced. We want to have a look a few post and tag pairs. def :\r example = df[df.index == index][['post', 'tags']].values[0]\r if  > 0:\r \r \r \r  Figure 3 \u00a0  Figure 4 \u00a0 As you can see, the texts need to be cleaned up. \u00a0 Text Pre-processing \u00a0 The text cleaning techniques we have seen so far work very well in practice. Depending on the kind of texts you may encounter, it may be relevant to include more complex text cleaning steps. But keep in mind that the more steps we add, the longer the text cleaning will take. For this particular data set, our text cleaning step includes HTML decoding, remove stop words, change text to lower case, remove punctuation, remove bad characters, and so on. Now we can have a look a cleaned post: Figure 5 \u00a0 Way better! df['post'].)). 3421180 After text cleaning and removing stop words, we have only over 3 million words to work with! After splitting the data set, the next steps includes feature engineering. We will convert our text documents to a matrix of token counts (CountVectorizer), then transform a count matrix to a normalized tf-idf representation (tf-idf transformer). After that, we train several classifiers from\u00a0 Scikit-Learn library . X = df.post\r y = df.tags\r X_train, X_test, y_train, y_test =  \u00a0 Naive Bayes Classifier for Multinomial Models \u00a0 After we have our features, we can train a classifier to try to predict the tag of a post. We will start with a\u00a0 Naive Bayes \u00a0classifier, which provides a nice baseline for this task.\u00a0 scikit-learn \u00a0includes several variants of this classifier; the one most suitable for text is the multinomial variant. To make the vectorizer => transformer => classifier easier to work with, we will use\u00a0 Pipeline \u00a0class in Scilkit-Learn that behaves like a compound classifier. Figure 6 \u00a0 We achieved 74% accuracy. \u00a0 Linear Support Vector\u00a0Machine \u00a0 Linear Support Vector Machine \u00a0is widely regarded as one of the best text classification algorithms. Figure 7 \u00a0 We achieve a higher accuracy score of 79% which is 5% improvement over Naive Bayes. \u00a0 Logistic Regression \u00a0 Logistic regression is a simple and easy to understand classification algorithm, and Logistic regression can be easily generalized to multiple classes. Figure 8 \u00a0 We achieve an accuracy score of 78% which is 4% higher than Naive Bayes and 1% lower than SVM. As you can see, following some very basic steps and using a simple linear model, we were able to reach as high as an 79% accuracy on this multi-class text classification data set. Using the same data set, we are going to try some advanced techniques such as word embedding and neural networks. Now, let\u2019s try some complex features than just simply counting words.", "title_html": "<h1 id=\"title\">Multi-Class Text Classification Model Comparison and Selection</h1> ", "url": "https://www.kdnuggets.com/2018/11/multi-class-text-classification-model-comparison-selection.html", "tfidf": {"tfidf": {"after": 4.08280828084, "relat": 1.23750876919, "can": 8.23382973994, "googl": 11.388809182200001, "behav": 15.6413793103, "experi": 1.87062566278, "remov": 8.023246999360001, "post": 11.19131538135, "vector": 77.696574225, "lower": 4.20111140514, "punctuat": 42.1114058355, "kind": 2.5806241872599998, "were": 1.02458857696, "xtrain": 1221.23076923, "clean": 48.08827347471, "valu": 2.2777618364400003, "previous": 1.42846859816, "objectivec": 1221.23076923, "about": 2.12972030318, "problem": 3.53349655018, "class": 6.34955339289, "scikitlearn": 2442.46153846, "neural": 59.4606741573, "mind": 3.5918552036199998, "python": 56.2978723404, "just": 1.33580143037, "tag": 78.9850746268, "well": 2.1311497416, "work": 4.46080359652, "simpli": 2.5192002538900002, "logist": 42.2984014209, "dftag": 1221.23076923, "classifi": 42.3501167056, "them": 1.09876115994, "stack": 19.6485148515, "particular": 1.3814827706200001, "complex": 4.6804245283, "multinomi": 2442.46153846, "start": 1.26673581744, "multipl": 2.74813917258, "articl": 2.01805008262, "million": 3.4558119286, "present": 1.25551601423, "php": 244.246153846, "keep": 2.04245465071, "bad": 3.3944836433599996, "overflow": 49.9245283019, "multiclass": 1221.23076923, "order": 1.24625166811, "tfidf": 2442.46153846, "given": 1.35426085473, "word": 10.779223718459999, "support": 2.5371154614400004, "abl": 1.8208510150200001, "mani": 1.04426757877, "will": 6.1240549298, "over": 3.07575072651, "step": 14.139650872799997, "today": 1.74961428257, "basic": 2.7301805675, "java": 31.625498008, "provid": 1.21552714187, "jqueri": 1221.23076923, "linear": 41.6328671328, "next": 1.4950560316400001, "angularj": 1221.23076923, "ytest": 1221.23076923, "perform": 1.5313977042500002, "but": 1.01632417899, "need": 1.4372623574099999, "our": 9.43035343036, "classif": 48.40243902438001, "longer": 2.02319357716, "susan": 11.0943396226, "css": 162.0, "wide": 1.5598349381, "matrix": 45.2307692308, "num": 21.00661584021, "high": 1.14777327935, "mytag": 1221.23076923, "best": 3.1657028913200005, "exampl": 1.50483412322, "have": 7.104263887979998, "pixabay": 1221.23076923, "stop": 4.3567508232800005, "cloud": 10.6193979933, "take": 1.13961668222, "follow": 1.04640126549, "now": 2.321561746, "tri": 7.417825020439999, "model": 12.5435870424, "represent": 5.928304705, "alway": 2.06745670009, "possibl": 1.4173734488, "regress": 153.6387096774, "bigqueri": 1221.23076923, "also": 1.01476510067, "count": 10.44473684211, "javascript": 174.46153846200002, "everyth": 4.81967213115, "when": 1.02076769755, "far": 1.71022298826, "storag": 8.623574144489998, "task": 3.88641370869, "tensorflowworkshopexamplesstackoverflowdatacsv": 1221.23076923, "encount": 4.13976531943, "the": 27.0, "may": 2.10403551786, "way": 1.2190739461, "experienc": 3.5564516129, "mysql": 690.260869565, "scientist": 9.38852749852, "easi": 5.2937645882, "want": 1.99698113208, "convert": 3.2740771293099997, "then": 2.17315721032, "index": 6.9969149405, "xtest": 1221.23076923, "sql": 378.0, "reach": 1.49801849406, "let": 3.48616600791, "token": 33.7070063694, "def": 81.83505154640001, "network": 2.59369384088, "regard": 1.78944995491, "which": 5.025959224999999, "featur": 4.58137745286, "practic": 1.70434782609, "simpl": 6.7962328767199995, "dfpost": 1221.23076923, "appli": 2.2972073506, "techniqu": 11.18816067654, "algorithm": 111.8028169016, "one": 3.01882487166, "pair": 4.36873968079, "see": 2.54484251022, "suitabl": 6.23811394892, "such": 1.06151377374, "accuraci": 51.0482315112, "sever": 2.14482572278, "explor": 3.39593582888, "easier": 7.84, "like": 1.14918566775, "some": 3.1211009174399997, "should": 1.6643254009900001, "add": 4.61243463103, "baselin": 57.7309090909, "aspnet": 1221.23076923, "tell": 3.36142282448, "document": 5.0819462228, "transform": 10.26023265834, "that": 4.015936255, "supervis": 7.74061433447, "includ": 4.076256499119999, "produc": 1.36932896326, "html": 71.1928251121, "set": 7.12247644686, "futur": 1.8577112099200002, "this": 6.02276176026, "question": 4.4081632653, "principl": 3.4520547945199995, "variant": 13.698015530620001, "and": 12.000755905559998, "from": 1.00056721497, "engin": 2.47135740971, "chang": 1.1808985421, "answer": 4.64890190337, "differ": 1.23654490225, "embed": 16.835630965, "instanc": 3.2572835453400004, "most": 4.08385852092, "between": 1.03453668708, "balanc": 4.45329593268, "for": 6.00189024006, "depend": 4.4822134387400006, "predict": 10.3696930111, "credit": 3.04312823462, "charact": 2.51720310766, "seen": 1.61079545455, "with": 4.004792835959999, "ytrain": 1221.23076923, "countvector": 1221.23076923, "there": 1.04091266719, "are": 5.1495296789000005, "android": 57.1079136691, "split": 3.4709226060300002, "better": 2.0065722952500002, "case": 1.48498737256, "scilkitlearn": 1221.23076923, "normal": 2.61075481006, "preprocess": 1221.23076923, "look": 3.8172637653199994, "more": 3.0515120451, "improv": 2.04376930999, "veri": 3.77640342531, "achiev": 5.61650943396, "public": 1.22424429365, "general": 2.2436404748400003, "net": 6.96315789474, "befor": 1.10036041031, "librari": 2.68266306185, "compar": 1.8662278123900002, "decod": 51.713355048900006, "even": 1.16461267606, "avail": 3.4576935642, "make": 2.1525320317200003, "photo": 6.41973311767, "search": 3.2539454806299997, "onli": 1.0256476516600002, "naiv": 200.9620253164, "rubyonrail": 1221.23076923, "train": 7.7462795803999995, "few": 1.31729173581, "accur": 11.537790697680002, "hypothes": 20.644993497999998, "advanc": 1.9997480791, "same": 2.23715916296, "comment": 3.05954904606, "data": 40.51722671208, "compound": 8.09586945436, "machin": 16.09733840304, "dfindex": 1221.23076923, "relev": 6.938811188810001, "iphon": 98.6086956522, "than": 3.0983606557499996, "text": 53.18068965519, "understand": 2.96858638743, "where": 1.06715063521, "figur": 16.2747309072, "higher": 4.2437850842, "what": 2.50686878256, "choos": 4.17899447223, "nice": 17.7583892617, "use": 7.207471301659999, "score": 8.576985413300001, "easili": 3.6938110749199997, "larg": 1.18574949585, "bay": 18.519685039360002, "learn": 4.6455010973, "pipelin": 32.1376518219}, "logtfidf": {"after": 0.08196277859239999, "relat": 0.21310030165399999, "can": 1.136387674758, "googl": 2.43263122258, "behav": 2.7499199224299997, "experi": 0.626272953933, "remov": 2.7841953663520003, "post": 4.028500763505, "vector": 9.76259663391, "lower": 1.484403859988, "punctuat": 3.7403186264499997, "kind": 0.948031302717, "were": 0.024291143681099997, "xtrain": 7.1076144564399995, "clean": 13.489897425410001, "valu": 0.823193310148, "previous": 0.356602960063, "objectivec": 7.1076144564399995, "about": 0.1256869549492, "problem": 1.138281448546, "class": 2.2493165697990003, "scikitlearn": 14.215228912879999, "neural": 4.0853151555, "mind": 1.2786688388299998, "python": 4.03065674296, "just": 0.289531434109, "tag": 11.93185817888, "well": 0.1270288766312, "work": 0.436138269092, "simpli": 0.923941491586, "logist": 7.9384110156, "dftag": 7.1076144564399995, "classifi": 13.332237081199999, "them": 0.0941833269093, "stack": 2.97800175538, "particular": 0.323157393804, "complex": 1.7004832728619999, "multinomi": 14.215228912879999, "start": 0.236443369291, "multipl": 1.01092401812, "articl": 0.702131739574, "million": 1.0938205001880001, "present": 0.227546654799, "php": 5.4981765440100006, "keep": 0.7141523446729999, "bad": 1.2221516561799999, "overflow": 3.91051243112, "multiclass": 7.1076144564399995, "order": 0.22014038079300002, "tfidf": 14.215228912879999, "given": 0.303255810831, "word": 3.51516649431, "support": 0.475761220074, "abl": 0.599303982475, "mani": 0.0433157581221, "will": 1.0139326745750001, "over": 0.0748101644871, "step": 5.1977252849, "today": 0.559395353679, "basic": 1.00436774895, "java": 3.45396369421, "provid": 0.19517784432500002, "jqueri": 7.1076144564399995, "linear": 7.89083292588, "next": 0.402163685499, "angularj": 7.1076144564399995, "ytest": 7.1076144564399995, "perform": 0.42618085058, "but": 0.0161923720719, "need": 0.362740163442, "our": 3.4305568567280003, "classif": 12.526744417740002, "longer": 0.7046772417749999, "susan": 2.40643503435, "css": 5.08759633523, "wide": 0.44458000675399995, "matrix": 6.2372608197599995, "num": 0.006614798303337001, "high": 0.13782378654000002, "mytag": 7.1076144564399995, "best": 0.918455865894, "exampl": 0.40868267499899996, "have": 0.1034950163884, "pixabay": 7.1076144564399995, "stop": 1.557158749926, "cloud": 2.36268232808, "take": 0.130691962197, "follow": 0.045356911094199995, "now": 0.298185890042, "tri": 2.47036611664, "model": 4.424700438666001, "represent": 1.7797382876499999, "alway": 0.726319204572, "possibl": 0.348805474891, "regress": 11.807974549259999, "bigqueri": 7.1076144564399995, "also": 0.0146571578, "count": 3.7424577341700003, "javascript": 5.16170430739, "everyth": 1.57270590317, "when": 0.0205549888584, "far": 0.536623764503, "storag": 2.1544996326700003, "task": 1.35748680661, "tensorflowworkshopexamplesstackoverflowdatacsv": 7.1076144564399995, "encount": 1.4206391000999998, "the": 0.0, "may": 0.10141999056880001, "way": 0.19809150993500002, "experienc": 1.26876330984, "mysql": 6.5370695979699995, "scientist": 3.09268256888, "easi": 1.6665296351499999, "want": 0.6916366062549999, "convert": 1.1860360368, "then": 0.16606773046179998, "index": 1.94546932912, "xtest": 7.1076144564399995, "sql": 5.934894195619999, "reach": 0.40414323085000003, "let": 1.2488025672799998, "token": 3.5177057198900004, "def": 4.40470565484, "network": 0.9530830530519999, "regard": 0.5819082848730001, "which": 0.02589206922715, "featur": 1.2701622544259998, "practic": 0.533182530867, "simpl": 2.4464425787799997, "dfpost": 7.1076144564399995, "appli": 0.8316941898119999, "techniqu": 3.94873154421, "algorithm": 13.32176958072, "one": 0.0187660549365, "pair": 1.47447456495, "see": 0.481843170984, "suitabl": 1.83067788492, "such": 0.059695977806, "accuraci": 10.1859061624, "sever": 0.13982224079379998, "explor": 1.22257937218, "easier": 2.05923883436, "like": 0.139053576545, "some": 0.11872052719350001, "should": 0.509419876758, "add": 1.52875583713, "baselin": 4.05579271624, "aspnet": 7.1076144564399995, "tell": 1.21236434401, "document": 1.865094244766, "transform": 3.6889896812100003, "that": 0.01590459351856, "supervis": 2.04648105583, "includ": 0.075538725562, "produc": 0.314320812003, "html": 4.26539204244, "set": 1.0289760677339999, "futur": 0.619345197699, "this": 0.022718694315, "question": 1.580621858028, "principl": 1.2389696463600002, "variant": 3.84820758, "and": 0.0007558817047632, "from": 0.000567054168866, "engin": 0.904767558276, "chang": 0.166275625058, "answer": 1.5366310419, "differ": 0.212321121312, "embed": 2.82349753127, "instanc": 1.18089357972, "most": 0.08299158518239999, "between": 0.033953681165299995, "balanc": 1.4936444810499998, "for": 0.0018899423723820002, "depend": 1.61393963, "predict": 3.2914804753799998, "credit": 1.11288601088, "charact": 0.923148407239, "seen": 0.47672812813, "with": 0.00478996685356, "ytrain": 7.1076144564399995, "countvector": 7.1076144564399995, "there": 0.0400978929255, "are": 0.1473373679135, "android": 4.04494270021, "split": 1.24442043932, "better": 0.6964279406, "case": 0.395406268889, "scilkitlearn": 7.1076144564399995, "normal": 0.959639378783, "preprocess": 7.1076144564399995, "look": 1.2927733872, "more": 0.05107479479999999, "improv": 0.7147958039319999, "veri": 0.6904793797140001, "achiev": 1.881294255351, "public": 0.20232375048700002, "general": 0.229905156126, "net": 1.9406330919499999, "befor": 0.0956377718795, "librari": 0.986809980943, "compar": 0.6239191809269999, "decod": 3.9457160663199997, "even": 0.152388564834, "avail": 1.094909172578, "make": 0.14699531564579998, "photo": 1.8593765463799998, "search": 1.1798682540899998, "onli": 0.025324268329099998, "naiv": 15.667286401279998, "rubyonrail": 7.1076144564399995, "train": 2.643673251356, "few": 0.275577913653, "accur": 3.5049612297, "hypothes": 3.0274728444, "advanc": 0.6930212121780001, "same": 0.224119299208, "comment": 1.11826753454, "data": 14.6018470176, "compound": 2.09135398771, "machin": 5.56943832248, "dfindex": 7.1076144564399995, "relev": 1.9371304613999998, "iphon": 4.591159448919999, "than": 0.0967825866546, "text": 19.388194169829998, "understand": 1.0880858756799998, "where": 0.0649921387457, "figur": 5.681376897280001, "higher": 1.50461679799, "what": 0.451774593654, "choos": 1.43007066072, "nice": 2.8768580387299996, "use": 0.2044561381212, "score": 2.9118706415400006, "easili": 1.3066587367, "larg": 0.17037506060600002, "bay": 6.1301594457599995, "learn": 1.68550412949, "pipelin": 3.47002829672}, "logidf": {"after": 0.020490694648099998, "relat": 0.21310030165399999, "can": 0.162341096394, "googl": 2.43263122258, "behav": 2.7499199224299997, "experi": 0.626272953933, "remov": 0.6960488415880001, "post": 0.8057001527009999, "vector": 3.25419887797, "lower": 0.742201929994, "punctuat": 3.7403186264499997, "kind": 0.948031302717, "were": 0.024291143681099997, "xtrain": 7.1076144564399995, "clean": 1.9271282036300001, "valu": 0.823193310148, "previous": 0.356602960063, "objectivec": 7.1076144564399995, "about": 0.0628434774746, "problem": 0.569140724273, "class": 0.7497721899330001, "scikitlearn": 7.1076144564399995, "neural": 4.0853151555, "mind": 1.2786688388299998, "python": 4.03065674296, "just": 0.289531434109, "tag": 2.98296454472, "well": 0.0635144383156, "work": 0.109034567273, "simpli": 0.923941491586, "logist": 2.6461370052, "dftag": 7.1076144564399995, "classifi": 1.6665296351499999, "them": 0.0941833269093, "stack": 2.97800175538, "particular": 0.323157393804, "complex": 0.8502416364309999, "multinomi": 7.1076144564399995, "start": 0.236443369291, "multipl": 1.01092401812, "articl": 0.702131739574, "million": 0.5469102500940001, "present": 0.227546654799, "php": 5.4981765440100006, "keep": 0.7141523446729999, "bad": 1.2221516561799999, "overflow": 3.91051243112, "multiclass": 7.1076144564399995, "order": 0.22014038079300002, "tfidf": 7.1076144564399995, "given": 0.303255810831, "word": 0.585861082385, "support": 0.237880610037, "abl": 0.599303982475, "mani": 0.0433157581221, "will": 0.202786534915, "over": 0.0249367214957, "step": 1.03954505698, "today": 0.559395353679, "basic": 1.00436774895, "java": 3.45396369421, "provid": 0.19517784432500002, "jqueri": 7.1076144564399995, "linear": 2.63027764196, "next": 0.402163685499, "angularj": 7.1076144564399995, "ytest": 7.1076144564399995, "perform": 0.42618085058, "but": 0.0161923720719, "need": 0.362740163442, "our": 0.8576392141820001, "classif": 2.08779073629, "longer": 0.7046772417749999, "susan": 2.40643503435, "css": 5.08759633523, "wide": 0.44458000675399995, "matrix": 3.1186304098799997, "num": 0.00031499039539700004, "high": 0.13782378654000002, "mytag": 7.1076144564399995, "best": 0.459227932947, "exampl": 0.40868267499899996, "have": 0.0147850023412, "pixabay": 7.1076144564399995, "stop": 0.778579374963, "cloud": 2.36268232808, "take": 0.130691962197, "follow": 0.045356911094199995, "now": 0.149092945021, "tri": 0.61759152916, "model": 0.7374500731110001, "represent": 1.7797382876499999, "alway": 0.726319204572, "possibl": 0.348805474891, "regress": 3.9359915164199997, "bigqueri": 7.1076144564399995, "also": 0.0146571578, "count": 1.24748591139, "javascript": 5.16170430739, "everyth": 1.57270590317, "when": 0.0205549888584, "far": 0.536623764503, "storag": 2.1544996326700003, "task": 1.35748680661, "tensorflowworkshopexamplesstackoverflowdatacsv": 7.1076144564399995, "encount": 1.4206391000999998, "the": 0.0, "may": 0.050709995284400004, "way": 0.19809150993500002, "experienc": 1.26876330984, "mysql": 6.5370695979699995, "scientist": 1.54634128444, "easi": 1.6665296351499999, "want": 0.6916366062549999, "convert": 1.1860360368, "then": 0.08303386523089999, "index": 1.94546932912, "xtest": 7.1076144564399995, "sql": 5.934894195619999, "reach": 0.40414323085000003, "let": 1.2488025672799998, "token": 3.5177057198900004, "def": 4.40470565484, "network": 0.9530830530519999, "regard": 0.5819082848730001, "which": 0.00517841384543, "featur": 0.423387418142, "practic": 0.533182530867, "simpl": 1.2232212893899999, "dfpost": 7.1076144564399995, "appli": 0.8316941898119999, "techniqu": 1.31624384807, "algorithm": 3.33044239518, "one": 0.0062553516455, "pair": 1.47447456495, "see": 0.240921585492, "suitabl": 1.83067788492, "such": 0.059695977806, "accuraci": 2.5464765406, "sever": 0.06991112039689999, "explor": 1.22257937218, "easier": 2.05923883436, "like": 0.139053576545, "some": 0.0395735090645, "should": 0.509419876758, "add": 1.52875583713, "baselin": 4.05579271624, "aspnet": 7.1076144564399995, "tell": 1.21236434401, "document": 0.932547122383, "transform": 1.22966322707, "that": 0.00397614837964, "supervis": 2.04648105583, "includ": 0.0188846813905, "produc": 0.314320812003, "html": 4.26539204244, "set": 0.171496011289, "futur": 0.619345197699, "this": 0.0037864490525, "question": 0.790310929014, "principl": 1.2389696463600002, "variant": 1.92410379, "and": 6.29901420636e-05, "from": 0.000567054168866, "engin": 0.904767558276, "chang": 0.166275625058, "answer": 1.5366310419, "differ": 0.212321121312, "embed": 2.82349753127, "instanc": 1.18089357972, "most": 0.020747896295599998, "between": 0.033953681165299995, "balanc": 1.4936444810499998, "for": 0.00031499039539700004, "depend": 0.806969815, "predict": 1.6457402376899999, "credit": 1.11288601088, "charact": 0.923148407239, "seen": 0.47672812813, "with": 0.00119749171339, "ytrain": 7.1076144564399995, "countvector": 7.1076144564399995, "there": 0.0400978929255, "are": 0.0294674735827, "android": 4.04494270021, "split": 1.24442043932, "better": 0.6964279406, "case": 0.395406268889, "scilkitlearn": 7.1076144564399995, "normal": 0.959639378783, "preprocess": 7.1076144564399995, "look": 0.6463866936, "more": 0.017024931599999998, "improv": 0.7147958039319999, "veri": 0.230159793238, "achiev": 0.6270980851169999, "public": 0.20232375048700002, "general": 0.114952578063, "net": 1.9406330919499999, "befor": 0.0956377718795, "librari": 0.986809980943, "compar": 0.6239191809269999, "decod": 3.9457160663199997, "even": 0.152388564834, "avail": 0.547454586289, "make": 0.07349765782289999, "photo": 1.8593765463799998, "search": 1.1798682540899998, "onli": 0.025324268329099998, "naiv": 3.9168216003199996, "rubyonrail": 7.1076144564399995, "train": 0.660918312839, "few": 0.275577913653, "accur": 1.75248061485, "hypothes": 3.0274728444, "advanc": 0.6930212121780001, "same": 0.112059649604, "comment": 1.11826753454, "data": 1.2168205848, "compound": 2.09135398771, "machin": 1.39235958062, "dfindex": 7.1076144564399995, "relev": 1.9371304613999998, "iphon": 4.591159448919999, "than": 0.0322608622182, "text": 1.14048200999, "understand": 1.0880858756799998, "where": 0.0649921387457, "figur": 0.7101721121600001, "higher": 0.752308398995, "what": 0.225887296827, "choos": 1.43007066072, "nice": 2.8768580387299996, "use": 0.0292080197316, "score": 1.4559353207700003, "easili": 1.3066587367, "larg": 0.17037506060600002, "bay": 1.5325398614399999, "learn": 0.842752064745, "pipelin": 3.47002829672}, "freq": {"after": 4, "relat": 1, "can": 7, "googl": 1, "behav": 1, "experi": 1, "remov": 4, "post": 5, "vector": 3, "lower": 2, "punctuat": 1, "kind": 1, "were": 1, "xtrain": 1, "clean": 7, "valu": 1, "previous": 1, "objectivec": 1, "about": 2, "problem": 2, "class": 3, "scikitlearn": 2, "neural": 1, "mind": 1, "python": 1, "just": 1, "tag": 4, "well": 2, "work": 4, "simpli": 1, "logist": 3, "dftag": 1, "classifi": 8, "them": 1, "stack": 1, "particular": 1, "complex": 2, "multinomi": 2, "start": 1, "multipl": 1, "articl": 1, "million": 2, "present": 1, "php": 1, "keep": 1, "bad": 1, "overflow": 1, "multiclass": 1, "order": 1, "tfidf": 2, "given": 1, "word": 6, "support": 2, "abl": 1, "mani": 1, "will": 5, "over": 3, "step": 5, "today": 1, "basic": 1, "java": 1, "provid": 1, "jqueri": 1, "linear": 3, "next": 1, "angularj": 1, "ytest": 1, "perform": 1, "but": 1, "need": 1, "our": 4, "classif": 6, "longer": 1, "susan": 1, "css": 1, "wide": 1, "matrix": 2, "num": 21, "high": 1, "mytag": 1, "best": 2, "exampl": 1, "have": 7, "pixabay": 1, "stop": 2, "cloud": 1, "take": 1, "follow": 1, "now": 2, "tri": 4, "model": 6, "represent": 1, "alway": 1, "possibl": 1, "regress": 3, "bigqueri": 1, "also": 1, "count": 3, "javascript": 1, "everyth": 1, "when": 1, "far": 1, "storag": 1, "task": 1, "tensorflowworkshopexamplesstackoverflowdatacsv": 1, "encount": 1, "the": 27, "may": 2, "way": 1, "experienc": 1, "mysql": 1, "scientist": 2, "easi": 1, "want": 1, "convert": 1, "then": 2, "index": 1, "xtest": 1, "sql": 1, "reach": 1, "let": 1, "token": 1, "def": 1, "network": 1, "regard": 1, "which": 5, "featur": 3, "practic": 1, "simpl": 2, "dfpost": 1, "appli": 1, "techniqu": 3, "algorithm": 4, "one": 3, "pair": 1, "see": 2, "suitabl": 1, "such": 1, "accuraci": 4, "sever": 2, "explor": 1, "easier": 1, "like": 1, "some": 3, "should": 1, "add": 1, "baselin": 1, "aspnet": 1, "tell": 1, "document": 2, "transform": 3, "that": 4, "supervis": 1, "includ": 4, "produc": 1, "html": 1, "set": 6, "futur": 1, "this": 6, "question": 2, "principl": 1, "variant": 2, "and": 12, "from": 1, "engin": 1, "chang": 1, "answer": 1, "differ": 1, "embed": 1, "instanc": 1, "most": 4, "between": 1, "balanc": 1, "for": 6, "depend": 2, "predict": 2, "credit": 1, "charact": 1, "seen": 1, "with": 4, "ytrain": 1, "countvector": 1, "there": 1, "are": 5, "android": 1, "split": 1, "better": 1, "case": 1, "scilkitlearn": 1, "normal": 1, "preprocess": 1, "look": 2, "more": 3, "improv": 1, "veri": 3, "achiev": 3, "public": 1, "general": 2, "net": 1, "befor": 1, "librari": 1, "compar": 1, "decod": 1, "even": 1, "avail": 2, "make": 2, "photo": 1, "search": 1, "onli": 1, "naiv": 4, "rubyonrail": 1, "train": 4, "few": 1, "accur": 2, "hypothes": 1, "advanc": 1, "same": 2, "comment": 1, "data": 12, "compound": 1, "machin": 4, "dfindex": 1, "relev": 1, "iphon": 1, "than": 3, "text": 17, "understand": 1, "where": 1, "figur": 8, "higher": 2, "what": 2, "choos": 1, "nice": 1, "use": 7, "score": 2, "easili": 1, "larg": 1, "bay": 4, "learn": 2, "pipelin": 1}, "idf": {"after": 1.02070207021, "relat": 1.23750876919, "can": 1.17626139142, "googl": 11.388809182200001, "behav": 15.6413793103, "experi": 1.87062566278, "remov": 2.0058117498400003, "post": 2.23826307627, "vector": 25.898858075, "lower": 2.10055570257, "punctuat": 42.1114058355, "kind": 2.5806241872599998, "were": 1.02458857696, "xtrain": 1221.23076923, "clean": 6.86975335353, "valu": 2.2777618364400003, "previous": 1.42846859816, "objectivec": 1221.23076923, "about": 1.06486015159, "problem": 1.76674827509, "class": 2.11651779763, "scikitlearn": 1221.23076923, "neural": 59.4606741573, "mind": 3.5918552036199998, "python": 56.2978723404, "just": 1.33580143037, "tag": 19.7462686567, "well": 1.0655748708, "work": 1.11520089913, "simpli": 2.5192002538900002, "logist": 14.0994671403, "dftag": 1221.23076923, "classifi": 5.2937645882, "them": 1.09876115994, "stack": 19.6485148515, "particular": 1.3814827706200001, "complex": 2.34021226415, "multinomi": 1221.23076923, "start": 1.26673581744, "multipl": 2.74813917258, "articl": 2.01805008262, "million": 1.7279059643, "present": 1.25551601423, "php": 244.246153846, "keep": 2.04245465071, "bad": 3.3944836433599996, "overflow": 49.9245283019, "multiclass": 1221.23076923, "order": 1.24625166811, "tfidf": 1221.23076923, "given": 1.35426085473, "word": 1.7965372864099998, "support": 1.2685577307200002, "abl": 1.8208510150200001, "mani": 1.04426757877, "will": 1.22481098596, "over": 1.02525024217, "step": 2.8279301745599996, "today": 1.74961428257, "basic": 2.7301805675, "java": 31.625498008, "provid": 1.21552714187, "jqueri": 1221.23076923, "linear": 13.8776223776, "next": 1.4950560316400001, "angularj": 1221.23076923, "ytest": 1221.23076923, "perform": 1.5313977042500002, "but": 1.01632417899, "need": 1.4372623574099999, "our": 2.35758835759, "classif": 8.067073170730001, "longer": 2.02319357716, "susan": 11.0943396226, "css": 162.0, "wide": 1.5598349381, "matrix": 22.6153846154, "num": 1.00031504001, "high": 1.14777327935, "mytag": 1221.23076923, "best": 1.5828514456600002, "exampl": 1.50483412322, "have": 1.0148948411399998, "pixabay": 1221.23076923, "stop": 2.1783754116400003, "cloud": 10.6193979933, "take": 1.13961668222, "follow": 1.04640126549, "now": 1.160780873, "tri": 1.8544562551099997, "model": 2.0905978404, "represent": 5.928304705, "alway": 2.06745670009, "possibl": 1.4173734488, "regress": 51.2129032258, "bigqueri": 1221.23076923, "also": 1.01476510067, "count": 3.48157894737, "javascript": 174.46153846200002, "everyth": 4.81967213115, "when": 1.02076769755, "far": 1.71022298826, "storag": 8.623574144489998, "task": 3.88641370869, "tensorflowworkshopexamplesstackoverflowdatacsv": 1221.23076923, "encount": 4.13976531943, "the": 1.0, "may": 1.05201775893, "way": 1.2190739461, "experienc": 3.5564516129, "mysql": 690.260869565, "scientist": 4.69426374926, "easi": 5.2937645882, "want": 1.99698113208, "convert": 3.2740771293099997, "then": 1.08657860516, "index": 6.9969149405, "xtest": 1221.23076923, "sql": 378.0, "reach": 1.49801849406, "let": 3.48616600791, "token": 33.7070063694, "def": 81.83505154640001, "network": 2.59369384088, "regard": 1.78944995491, "which": 1.005191845, "featur": 1.52712581762, "practic": 1.70434782609, "simpl": 3.3981164383599998, "dfpost": 1221.23076923, "appli": 2.2972073506, "techniqu": 3.7293868921800004, "algorithm": 27.9507042254, "one": 1.00627495722, "pair": 4.36873968079, "see": 1.27242125511, "suitabl": 6.23811394892, "such": 1.06151377374, "accuraci": 12.7620578778, "sever": 1.07241286139, "explor": 3.39593582888, "easier": 7.84, "like": 1.14918566775, "some": 1.04036697248, "should": 1.6643254009900001, "add": 4.61243463103, "baselin": 57.7309090909, "aspnet": 1221.23076923, "tell": 3.36142282448, "document": 2.5409731114, "transform": 3.42007755278, "that": 1.00398406375, "supervis": 7.74061433447, "includ": 1.0190641247799999, "produc": 1.36932896326, "html": 71.1928251121, "set": 1.18707940781, "futur": 1.8577112099200002, "this": 1.00379362671, "question": 2.20408163265, "principl": 3.4520547945199995, "variant": 6.8490077653100006, "and": 1.00006299213, "from": 1.00056721497, "engin": 2.47135740971, "chang": 1.1808985421, "answer": 4.64890190337, "differ": 1.23654490225, "embed": 16.835630965, "instanc": 3.2572835453400004, "most": 1.02096463023, "between": 1.03453668708, "balanc": 4.45329593268, "for": 1.00031504001, "depend": 2.2411067193700003, "predict": 5.18484650555, "credit": 3.04312823462, "charact": 2.51720310766, "seen": 1.61079545455, "with": 1.0011982089899998, "ytrain": 1221.23076923, "countvector": 1221.23076923, "there": 1.04091266719, "are": 1.02990593578, "android": 57.1079136691, "split": 3.4709226060300002, "better": 2.0065722952500002, "case": 1.48498737256, "scilkitlearn": 1221.23076923, "normal": 2.61075481006, "preprocess": 1221.23076923, "look": 1.9086318826599997, "more": 1.0171706817, "improv": 2.04376930999, "veri": 1.25880114177, "achiev": 1.87216981132, "public": 1.22424429365, "general": 1.1218202374200001, "net": 6.96315789474, "befor": 1.10036041031, "librari": 2.68266306185, "compar": 1.8662278123900002, "decod": 51.713355048900006, "even": 1.16461267606, "avail": 1.7288467821, "make": 1.0762660158600001, "photo": 6.41973311767, "search": 3.2539454806299997, "onli": 1.0256476516600002, "naiv": 50.2405063291, "rubyonrail": 1221.23076923, "train": 1.9365698950999999, "few": 1.31729173581, "accur": 5.768895348840001, "hypothes": 20.644993497999998, "advanc": 1.9997480791, "same": 1.11857958148, "comment": 3.05954904606, "data": 3.37643555934, "compound": 8.09586945436, "machin": 4.02433460076, "dfindex": 1221.23076923, "relev": 6.938811188810001, "iphon": 98.6086956522, "than": 1.03278688525, "text": 3.12827586207, "understand": 2.96858638743, "where": 1.06715063521, "figur": 2.0343413634, "higher": 2.1218925421, "what": 1.25343439128, "choos": 4.17899447223, "nice": 17.7583892617, "use": 1.0296387573799999, "score": 4.2884927066500005, "easili": 3.6938110749199997, "larg": 1.18574949585, "bay": 4.629921259840001, "learn": 2.32275054865, "pipelin": 32.1376518219}}, "html": "<!DOCTYPE html>\n\n<html lang=\"en-US\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head profile=\"http://gmpg.org/xfn/11\">\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n<title>  Multi-Class Text Classification Model Comparison and Selection</title>\n<link href=\"/wp-content/themes/kdn17/images/favicon.ico\" rel=\"shortcut icon\"/>\n<link href=\"/wp-content/themes/kdn17/style.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"/wp-content/themes/kdn17/js/jquery-1.9.1.min.js\" type=\"text/javascript\"></script>\n<script src=\"/aps/kda_all.js\" type=\"text/javascript\"></script>\n<link href=\"/feed/\" rel=\"alternate\" title=\"KDnuggets: Analytics, Big Data, Data Mining and Data Science Feed\" type=\"application/rss+xml\"/>\n<link href=\"//s.w.org\" rel=\"dns-prefetch\"/>\n<link href=\"https://www.kdnuggets.com/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/comments/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/2018/11/multi-class-text-classification-model-comparison-selection.html/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Multi-Class Text Classification Model Comparison and Selection Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-json/\" rel=\"https://api.w.org/\"/>\n<link href=\"https://www.kdnuggets.com/xmlrpc.php?rsd\" rel=\"EditURI\" title=\"RSD\" type=\"application/rsd+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-includes/wlwmanifest.xml\" rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\"/>\n<link href=\"https://www.kdnuggets.com/2018/10/top-tweets-oct24-30.html\" rel=\"prev\" title=\"Top KDnuggets tweets, Oct 24-30: Building a Question-Answering System from Scratch\"/>\n<link href=\"https://www.kdnuggets.com/2018/11/data-science-improving-higher-education.html\" rel=\"next\" title=\"How Data Science Is Improving Higher Education\"/>\n<meta content=\"WordPress 4.9.10\" name=\"generator\">\n<link href=\"https://www.kdnuggets.com/2018/11/multi-class-text-classification-model-comparison-selection.html\" rel=\"canonical\"/>\n<link href=\"https://www.kdnuggets.com/?p=86860\" rel=\"shortlink\"/>\n<link href=\"https://www.kdnuggets.com/2018/11/multi-class-text-classification-model-comparison-selection.html\" rel=\"canonical\"/>\n<!-- BEGIN ExactMetrics v5.3.7 Universal Analytics - https://exactmetrics.com/ -->\n<script>\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-361129-1', 'auto');\n  ga('send', 'pageview');\n</script>\n<!-- END ExactMetrics Universal Analytics -->\n</meta></head>\n<body class=\"post-template-default single single-post postid-86860 single-format-standard\">\n<div class=\"main_wrapper\"><!-- publ: 1-Nov, 2018  -->\n<div id=\"wrapper\">\n<div id=\"header\">\n<div id=\"header_log\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<h1>KDnuggets</h1>\n<div class=\"text-container\">\n            \u00a0\u00a0<a href=\"/news/subscribe.html\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a> \u00a0|\n <a href=\"https://twitter.com/kdnuggets\" target=\"_blank\"><img alt=\"Twitter\" height=\"48\" src=\"/images/tw_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n <a href=\"https://www.facebook.com/kdnuggets\" target=\"_blank\"><img alt=\"Facebook\" height=\"48\" src=\"/images/fb_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n<a href=\"https://www.linkedin.com/groups/54257/\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"48\" src=\"/images/in_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \n\u00a0|\u00a0 <a href=\"/contact.html\"><b>Contact</b></a>\n</div>\n</div>\n<div class=\"search\">\n<form action=\"/\" id=\"searchform\" method=\"get\">\n<input id=\"s\" name=\"s\" placeholder=\"search KDnuggets\" type=\"text\" value=\"\"/>\n<input type=\"submit\" value=\"Search\"/></form>\n</div>\n<div href=\"#\" id=\"pull\">\n<img class=\"menu\" src=\"/images/menu-30.png\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<img class=\"search-icon\" src=\"/images/search-icon.png\">\n</img></img></div>\n<div id=\"pull-menu\">\n<div class=\"navigation\"><ul class=\"menu\" id=\"menu-menu\"><li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-1070\" id=\"menu-item-1070\"><a href=\"/software/index.html\" title=\"Data Science Software\">SOFTWARE</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13756\" id=\"menu-item-13756\"><a href=\"/news/index.html\" title=\"News\">News/Blog</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-46286\" id=\"menu-item-46286\"><a href=\"/news/top-stories.html\">Top stories</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-42152\" id=\"menu-item-42152\"><a href=\"https://www.kdnuggets.com/opinions/index.html\" title=\"Opinions\">Opinions</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-46415\" id=\"menu-item-46415\"><a href=\"https://www.kdnuggets.com/tutorials/index.html\">Tutorials</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13364\" id=\"menu-item-13364\"><a href=\"/jobs/index.html\" title=\"Jobs in Analytics, Data Science\">JOBS</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-63505\" id=\"menu-item-63505\"><a href=\"https://www.kdnuggets.com/companies/index.html\">Companies</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13366\" id=\"menu-item-13366\"><a href=\"/courses/index.html\">Courses</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-1499\" id=\"menu-item-1499\"><a href=\"https://www.kdnuggets.com/datasets/index.html\">Datasets</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-14286\" id=\"menu-item-14286\"><a href=\"https://www.kdnuggets.com/education/index.html\" title=\"Education in Analytics, Big Data, Data Science\">EDUCATION</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-51558\" id=\"menu-item-51558\"><a href=\"https://www.kdnuggets.com/education/analytics-data-mining-certificates.html\" title=\"Certificates in Analytics, Big Data, Data Science\">Certificates</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-14752\" id=\"menu-item-14752\"><a href=\"/meetings/index.html\">Meetings</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13721\" id=\"menu-item-13721\"><a href=\"/webcasts/index.html\" title=\"Webcasts and Webinars\">Webinars</a></li>\n</ul></div></div>\n</div> <!--#header end-->\n<div id=\"spacer\">\n         \u00a0\n      </div>\n<div id=\"content_wrapper\">\n<div id=\"ad_wrapper\">\n<script type=\"text/javascript\">\n\tjQuery(function() {\n   \t    var pull        = $('#pull');\n            menu        = $('#header .navigation ul');\n            menuImage = $('#header img.menu');\n            mobileMenu        = $('#pull-menu-mobile');\n            search = $('img.search-icon');\n            searchBar = $('div.search');\n            searchClick = false;\n            search.on('click', function() {\n                  searchBar.slideToggle();\n                  searchClick = true;\n            });  \n     \t    $(menuImage).on('click', function(e) {\n\t        //e.preventDefault();\n                if (!searchClick) {\n                  menu.slideToggle();\n                }\n                searchClick = false;\n\t    });\n           /* pullMobile.on('click', function(e) {\n              e.preventDefault();\n                if (!searchClick) {\n                  mobileMenu.slideToggle();\n                }\n                searchClick = false;\n\t    });*/\n            \n\t});\n\tkpath = '/'; kda_top(); kda_sid_init(); kda_sid_n=3;\n\t</script>\n</div> <div class=\"breadcumb\">\n<br/>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2018/index.html\">2018</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/11/index.html\">Nov</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/11/tutorials.html\">Tutorials, Overviews</a> \u00bb Multi-Class Text Classification Model Comparison and Selection (\u00a0<a href=\"/2018/n42.html\">18:n42</a>\u00a0)    </div>\n<div class=\"single\" id=\"content\">\n<div id=\"post-header\">\n<h1 id=\"title\">Multi-Class Text Classification Model Comparison and Selection</h1>\n<div class=\"pagi\">\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2018/10/top-tweets-oct24-30.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"> <strong>Previous post</strong></img></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2018/11/data-science-improving-higher-education.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/>\u00a0<br/>\u00a0\n    <div class=\"addthis_native_toolbox\"></div>\n</div>\n<div class=\"tag-data\">Tags: <a href=\"https://www.kdnuggets.com/tag/modeling\" rel=\"tag\">Modeling</a>, <a href=\"https://www.kdnuggets.com/tag/nlp\" rel=\"tag\">NLP</a>, <a href=\"https://www.kdnuggets.com/tag/python\" rel=\"tag\">Python</a>, <a href=\"https://www.kdnuggets.com/tag/text-classification\" rel=\"tag\">Text Classification</a></div>\n<br/>\n<p class=\"excerpt\">\n     This is what we are going to do today: use everything that we have presented about text classification in the previous articles (and more) and comparing between the text classification models we trained in order to choose the most accurate one for our problem.\n  </p>\n</div>\n<div id=\"post-header-ad\">\n<script type=\"text/javascript\">kda_sid_write(1); kda_sid_n=2;</script>\n</div>\n<hr class=\"grey-line\"/><br/>\n<div class=\"post\" id=\"post-\">\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"/2018/11/multi-class-text-classification-model-comparison-selection.html?page=2#comments\">comments</a></div>\n<p><b>By <a href=\"https://www.linkedin.com/in/susanli/\" rel=\"noopener noreferrer\" target=\"_blank\">Susan Li</a>, Sr. Data Scientist</b></p>\n<p><center><img alt=\"Image\" src=\"https://cdn-images-1.medium.com/max/2000/1*_kVRQJ-of1MW7dGXnRn38w.jpeg\" width=\"99%\"><br>\n<font size=\"-1\">Photo credit: Pixabay</font></br></img></center></p>\n<p>When working on a\u00a0<a href=\"https://en.wikipedia.org/wiki/Supervised_learning\" rel=\"noopener noreferrer\" target=\"_blank\">supervised machine learning</a>\u00a0problem with a given data set, we try different algorithms and techniques to search for models to produce general hypotheses, which then make the most accurate predictions possible about future instances. The same principles apply to text (or document) classification where there are many models can be used to train a text classifier.\u00a0<a href=\"https://docs.microsoft.com/en-us/azure/machine-learning/studio/algorithm-choice\" rel=\"noopener noreferrer\" target=\"_blank\">The answer to the question \u201cWhat machine learning model should I use?\u201d is always \u201cIt depends.\u201d Even the most experienced data scientists can\u2019t tell which algorithm will perform best before experimenting them</a>.</p>\n<p>This is what we are going to do today: use everything that we have presented about text classification in the previous articles (and more) and comparing between the text classification models we trained in order to choose the most accurate one for our problem.</p>\n<p>\u00a0</p>\n<h3>The Data</h3>\n<p>\u00a0<br>\nWe are using a relatively large data set of Stack Overflow questions and tags. The data is available in\u00a0<a href=\"https://bigquery.cloud.google.com/dataset/bigquery-public-data:stackoverflow\" rel=\"noopener noreferrer\" target=\"_blank\">Google BigQuery</a>, it is also publicly available at this Cloud Storage URL: <a href=\"https://storage.googleapis.com/tensorflow-workshop-examples/stack-overflow-data.csv\" rel=\"noopener noreferrer\" target=\"_blank\">https://storage.googleapis.com/tensorflow-workshop-examples/stack-overflow-data.csv</a>.</br></p>\n<p>\u00a0</p>\n<h3>Exploring the\u00a0Data</h3>\n<p>\u00a0</p>\n<p><script src=\"https://gist.github.com/susanli2016/4bb8adc4daf4fe313824fb0af1413eaa.js\"></script></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/800/1*HT0LEIu3vrMC031X32GEaQ.png\" width=\"99%\"/><br>\n<center>Figure 1</center><br>\n\u00a0</br></br></p>\n<p><strong><em>10276752</em></strong></p>\n<p>We have over 10 million words in the data.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>my_tags = ['java','html','asp.net','c#','ruby-on-rails','jquery','mysql','php','ios','javascript','python','c','css','android','iphone','sql','objective-c','c++','angularjs','.net']\r\nplt.figure(figsize=(10,4))\r\ndf.tags.value_counts().plot(kind='bar');</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/1000/1*zIUX8_ybwKC7UDlPOmvTeA.png\" width=\"99%\"/><br/>\n<center>Figure 2</center><br/>\n\u00a0</p>\n<p>The classes are very well balanced.</p>\n<p>We want to have a look a few post and tag pairs.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>def print_plot(index):\r\n    example = df[df.index == index][['post', 'tags']].values[0]\r\n    if len(example) &gt; 0:\r\n        print(example[0])\r\n        print('Tag:', example[1])\r\n\r\nprint_plot(10)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/1000/1*VHjd7ueJCRF1Eo0Lnin4rw.png\" width=\"99%\"/><br/>\n<center>Figure 3</center><br/>\n\u00a0</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>print_plot(30)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/1000/1*Q-Vc1i5PjZ96XeUtps-HLA.png\" width=\"99%\"/><br/>\n<center>Figure 4</center><br/>\n\u00a0</p>\n<p>As you can see, the texts need to be cleaned up.</p>\n<p>\u00a0</p>\n<h3>Text Pre-processing</h3>\n<p>\u00a0<br/>\nThe text cleaning techniques we have seen so far work very well in practice. Depending on the kind of texts you may encounter, it may be relevant to include more complex text cleaning steps. But keep in mind that the more steps we add, the longer the text cleaning will take.</p>\n<p>For this particular data set, our text cleaning step includes HTML decoding, remove stop words, change text to lower case, remove punctuation, remove bad characters, and so on.</p>\n<p><script src=\"https://gist.github.com/susanli2016/29d4cf9b7db4c6804e174b8eac2891e8.js\"></script></p>\n<p>Now we can have a look a cleaned post:</p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/1000/1*6uxeYLgeMsEh2xe0aIXc4w.png\" width=\"99%\"/><br/>\n<center>Figure 5</center><br/>\n\u00a0</p>\n<p>Way better!</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>df['post'].apply(lambda x: len(x.split(' '))).sum()</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><strong><em>3421180</em></strong></p>\n<p>After text cleaning and removing stop words, we have only over 3 million words to work with!</p>\n<p>After splitting the data set, the next steps includes feature engineering. We will convert our text documents to a matrix of token counts (CountVectorizer), then transform a count matrix to a normalized tf-idf representation (tf-idf transformer). After that, we train several classifiers from\u00a0<a href=\"http://scikit-learn.org/stable/\" rel=\"noopener noreferrer\" target=\"_blank\">Scikit-Learn library</a>.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>X = df.post\r\ny = df.tags\r\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state = 42)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>\u00a0</p>\n<h3><strong>Naive Bayes Classifier for Multinomial Models</strong></h3>\n<p>\u00a0<br/>\nAfter we have our features, we can train a classifier to try to predict the tag of a post. We will start with a\u00a0<a href=\"http://scikit-learn.org/stable/modules/naive_bayes.html#naive-bayes\" rel=\"noopener noreferrer\" target=\"_blank\">Naive Bayes</a>\u00a0classifier, which provides a nice baseline for this task.\u00a0<code>scikit-learn</code>\u00a0includes several variants of this classifier; the one most suitable for text is the multinomial variant.</p>\n<p>To make the vectorizer =&gt; transformer =&gt; classifier easier to work with, we will use\u00a0<code>Pipeline</code>\u00a0class in Scilkit-Learn that behaves like a compound classifier.</p>\n<p><script src=\"https://gist.github.com/susanli2016/08da194a6a4f7a3e6b5ed81e369bbfa7.js\"></script></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/800/1*rSiw_RQjar22G9Y-GE1isA.png\" width=\"99%\"/><br/>\n<center>Figure 6</center><br/>\n\u00a0</p>\n<p>We achieved 74% accuracy.</p>\n<p>\u00a0</p>\n<h3><strong>Linear Support Vector\u00a0Machine</strong></h3>\n<p>\u00a0<br/>\n<a href=\"http://scikit-learn.org/stable/modules/svm.html#svm\" rel=\"noopener noreferrer\" target=\"_blank\">Linear Support Vector Machine</a>\u00a0is widely regarded as one of the best text classification algorithms.</p>\n<p><script src=\"https://gist.github.com/susanli2016/f0160b4d2571110044ec94b29e0bfbe4.js\"></script></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/800/1*OYttvEbF64M46gkJYdiBIA.png\" width=\"99%\"/><br/>\n<center>Figure 7</center><br/>\n\u00a0</p>\n<p>We achieve a higher accuracy score of 79% which is 5% improvement over Naive Bayes.</p>\n<p>\u00a0</p>\n<h3>Logistic Regression</h3>\n<p>\u00a0<br/>\nLogistic regression is a simple and easy to understand classification algorithm, and Logistic regression can be easily generalized to multiple classes.</p>\n<p><script src=\"https://gist.github.com/susanli2016/d65cad4bf9fb30a79ae66a7a6027f7e8.js\"></script></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/800/1*jAfdo2z-duy5o0vBGb21AQ.png\" width=\"99%\"/><br/>\n<center>Figure 8</center><br/>\n\u00a0</p>\n<p>We achieve an accuracy score of 78% which is 4% higher than Naive Bayes and 1% lower than SVM.</p>\n<p>As you can see, following some very basic steps and using a simple linear model, we were able to reach as high as an 79% accuracy on this multi-class text classification data set.</p>\n<p>Using the same data set, we are going to try some advanced techniques such as word embedding and neural networks.</p>\n<p>Now, let\u2019s try some complex features than just simply counting words.</p>\n</div>\n<div class=\"page-link\"><p>Pages: 1 <a href=\"https://www.kdnuggets.com/2018/11/multi-class-text-classification-model-comparison-selection.html/2\">2</a></p></div>\n<div class=\"pagi\">\n<hr class=\"grey-line\"/>\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2018/10/top-tweets-oct24-30.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"/> <strong>Previous post</strong></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2018/11/data-science-improving-higher-education.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/><br/>\n<div>\n<hr class=\"grey-line\"/><br/>\n<h2>Top Stories Past 30 Days</h2>\n<table align=\"center\" cellpadding=\"3\" cellspacing=\"10\" class=\"latn\" width=\"100%\">\n<tr>\n<td valign=\"top\" width=\"50%\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Popular</b></th></tr>\n<tr><td>\n<ol class=\"three_ol\"><li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-1-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-2-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n<li> <a href=\"/2018/05/simplilearn-9-must-have-skills-data-scientist.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-3-simplilearn');\"><b>9 Must-have skills you need to become a Data Scientist, updated</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-4-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/03/another-10-free-must-read-books-for-machine-learning-and-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-5-another-10-books');\"><b>Another 10 Free Must-Read Books for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-6-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/best-data-visualization-techniques.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-7-best-data-viz');\"><b>Best Data Visualization Techniques for small and large data</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td> <td valign=\"top\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Shared</b></th></tr>\n<tr><td><ol class=\"three_ol\">\n<li> <a href=\"/2019/04/another-10-free-must-see-courses-machine-learning-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-1-another-10-courses');\"><b>Another 10 Free Must-See Courses for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-2-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/03/r-vs-python-data-visualization.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-3-r-py-viz');\"><b>R vs Python for Data Visualization</b></a>\n<li> <a href=\"/2019/03/deep-learning-toolset-overview.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-4-dl-toolset');\"><b>The Deep Learning Toolset \u2014 An Overview</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-5-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-6-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-7-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<!--#content end--></div>\n<div id=\"sidebar\">\n<div class=\"latn\">\n<h3><b><a href=\"/news/index.html\">Latest News</a></b></h3>\n<ul style=\"font-size:14px; margin-top:5px\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/datarobot-delivering-trusted-ai-microsoft.html\">Delivering Trusted AI with DataRobot and Microsoft</a><li> <a href=\"https://www.kdnuggets.com/2019/04/formulated-ai-data-production-landscape.html\">AI and the data production landscape</a><li> <a href=\"https://www.kdnuggets.com/2019/04/most-desired-skill-data-science.html\">The most desired skill in data science</a><li> <a href=\"https://www.kdnuggets.com/2019/04/projects-include-data-science-portfolio.html\">Projects to Include in a Data Science Portfolio</a><li> <a href=\"https://www.kdnuggets.com/2019/04/rework-meet-worlds-leading-ai-deep-learning-experts.html\">Meet the World\u2019s Leading AI &amp; Deep Learning ...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/problem-data-science-job-postings.html\">The problem with data science job postings</a></li></li></li></li></li></li></ul>\n</div>\n<div>\n<script type=\"text/javascript\">kda_sid_write(kda_sid_n);</script>\n</div>\n<br/><script src=\"/aps/sbm.js\" type=\"text/javascript\"></script>\n<div class=\"latn\" style=\"margin-top: 15px;\">\n<h3><b>More Recent Stories</b></h3>\n<ul class=\"next-posts\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/problem-data-science-job-postings.html\">The problem with data science job postings</a><li> <a href=\"https://www.kdnuggets.com/2019/04/graduating-gans-understanding-generative-adversarial-networks.html\">Graduating in GANs: Going From Understanding Generative Advers...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/datax-join-new-generation-ai-technologists.html\">Join the new generation of AI technologists</a><li> <a href=\"https://www.kdnuggets.com/2019/04/top-tweets-apr17-apr23.html\">Top tweets, Apr 17\u201323: The History of Artificial #NeuralN...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/activestate-top-10-python-use-cases.html\">Top 10 Python Use Cases</a><li> <a href=\"https://www.kdnuggets.com/2019/04/future-generative-adversarial-networks.html\">Generative Adversarial Networks \u2013 Key Milestones and Sta...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/attention-craving-rnn-building-transformer-networks.html\">Attention Craving RNNS: Building Up To Transformer Networks</a><li> <a href=\"https://www.kdnuggets.com/jobs/19/04-24-fors-marsh-group-lead-data-scientist.html\">Fors Marsh Group: Lead Data Scientist [Arlington, VA]</a><li> <a href=\"https://www.kdnuggets.com/2019/n16.html\">KDnuggets 19:n16, Apr 24: Data Visualization in Python with...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/paw-mega-paw-las-vegas-lower-rates-end-friday.html\">Lower Rates End Friday for Mega-PAW Vegas \u2013 the Largest Pred...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/top-news-week-0415-0421.html\">Top Stories, Apr 15-21: Data Visualization in Python: Matplotl...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/wharton-customer-analytics-initiative-conference.html\">Wharton Customer Analytics Initiative Annual Conference in Phi...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/machine-learning-graph-analytics.html\">Machine Learning and Deep Link Graph Analytics: A Powerful Com...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/best-masters-data-science-analytics-online.html\">2019 Best Masters in Data Science and Analytics \u2013 Online</a><li> <a href=\"https://www.kdnuggets.com/2019/04/worth-studying-data-science-masters.html\">Was it Worth Studying a Data Science Masters?</a><li> <a href=\"https://www.kdnuggets.com/2019/04/approach-pre-trained-deep-learning-models-caution.html\">Approach pre-trained deep learning models with caution</a><li> <a href=\"https://www.kdnuggets.com/2019/04/coursera-earn-deep-learning-certificate.html\">Earn a Deep Learning Certificate</a><li> <a href=\"https://www.kdnuggets.com/2019/04/octoparse-scrape-data-website.html\">Easy Way to Scrape Data from Website By Yourself</a><li> <a href=\"https://www.kdnuggets.com/2019/04/ai-environment.html\">AI Supporting The Earth</a><li> <a href=\"https://www.kdnuggets.com/2019/04/mueller-report-word-cloud-brief-tutorial-r.html\">The Mueller Report Word Cloud: A brief tutorial in R</a></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></ul>\n</div>\n</div><div class=\"breadcrumbs_bottom\">\n<div class=\"breadcumb\">\n<br>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2018/index.html\">2018</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/11/index.html\">Nov</a> \u00bb <a href=\"https://www.kdnuggets.com/2018/11/tutorials.html\">Tutorials, Overviews</a> \u00bb Multi-Class Text Classification Model Comparison and Selection (\u00a0<a href=\"/2018/n42.html\">18:n42</a>\u00a0)    </br></div>\n</div>\n<!--#content_wrapper end--></div>\n<br>\n<div id=\"footer\">\n<br/>\u00a9 2019 KDnuggets. <a href=\"/about/index.html\">About KDnuggets</a>. \u00a0<a href=\"/news/privacy-policy.html\">Privacy policy</a>. <a href=\"/terms-of-service.html\">Terms of Service</a><br/>\u00a0\n<div class=\"kd_bottom\">\n<div class=\"footer-container\">\n<div class=\"footer-news\">\n<a href=\"/news/subscribe.html\" onclick=\"_gaq.push(['_trackPageview','/x/bot/sub']);\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a>\n</div>\n<div class=\"footer-sm\">\n<a href=\"https://twitter.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/twt']);\" target=\"_blank\"><img height=\"32\" src=\"/images/tw_c48.png\" width=\"32\"/></a>\n<a href=\"https://facebook.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/fb']);\" target=\"_blank\"><img alt=\"Facebook\" height=\"32\" src=\"/images/fb_c48.png\" width=\"32\"/></a>\n<a href=\"https://www.linkedin.com/groups/54257\" onclick=\"_gaq.push(['_trackPageview','/x/bot/in']);\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"32\" src=\"/images/in_c48.png\" width=\"32\"/></a>\n</div>\n</div>\n<div class=\"close-footer\">X</div>\n</div>\n<script type=\"text/javascript\">\n  jQuery('.close-footer').click(\n      function(){       \n         jQuery('.kd_bottom').hide();\n      }\n   );\n</script> </div>\n<div class=\"clear\"><!--blank--></div>\n</br></div>\n<div style=\"display: none;\"><div id=\"boxzilla-box-82996-content\"><script type=\"text/javascript\">(function() {\n\tif (!window.mc4wp) {\n\t\twindow.mc4wp = {\n\t\t\tlisteners: [],\n\t\t\tforms    : {\n\t\t\t\ton: function (event, callback) {\n\t\t\t\t\twindow.mc4wp.listeners.push({\n\t\t\t\t\t\tevent   : event,\n\t\t\t\t\t\tcallback: callback\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})();\n</script><!-- MailChimp for WordPress v4.1.14 - https://wordpress.org/plugins/mailchimp-for-wp/ --><form class=\"mc4wp-form mc4wp-form-77281\" data-id=\"77281\" data-name=\"Subscribe to KDnuggets News\" id=\"mc4wp-form-1\" method=\"post\"><div class=\"mc4wp-form-fields\"><div class=\"header-container\">\n<img align=\"left\" src=\"/wp-content/uploads/envelope.png\"><a href=\"/news/subscribe.html\">Get KDnuggets, a leading newsletter on AI, \r\n  Data Science, and Machine Learning</a>\n</img></div>\n<div class=\"form-fields\">\n<div class=\"field-container\"><label>Email:</label><input maxlength=\"60\" name=\"EMAIL\" placeholder=\"Your email\" required=\"\" size=\"30\" type=\"email\"/></div>\n<div class=\"field-container submit-container\"><div class=\"form-button\" onclick=\"document.getElementById('mc4wp-form-1').submit()\">Sign Up</div></div>\n</div>\n<label style=\"display: none !important;\">Leave this field empty if you're human: <input autocomplete=\"off\" name=\"_mc4wp_honeypot\" tabindex=\"-1\" type=\"text\" value=\"\"/></label><input name=\"_mc4wp_timestamp\" type=\"hidden\" value=\"1556356307\"/><input name=\"_mc4wp_form_id\" type=\"hidden\" value=\"77281\"/><input name=\"_mc4wp_form_element_id\" type=\"hidden\" value=\"mc4wp-form-1\"/></div><div class=\"mc4wp-response\"></div></form><!-- / MailChimp for WordPress Plugin -->\n</div></div><script type=\"text/javascript\">(function() {function addEventListener(element,event,handler) {\n\tif(element.addEventListener) {\n\t\telement.addEventListener(event,handler, false);\n\t} else if(element.attachEvent){\n\t\telement.attachEvent('on'+event,handler);\n\t}\n}function maybePrefixUrlField() {\n\tif(this.value.trim() !== '' && this.value.indexOf('http') !== 0) {\n\t\tthis.value = \"http://\" + this.value;\n\t}\n}\n\nvar urlFields = document.querySelectorAll('.mc4wp-form input[type=\"url\"]');\nif( urlFields && urlFields.length > 0 ) {\n\tfor( var j=0; j < urlFields.length; j++ ) {\n\t\taddEventListener(urlFields[j],'blur',maybePrefixUrlField);\n\t}\n}/* test if browser supports date fields */\nvar testInput = document.createElement('input');\ntestInput.setAttribute('type', 'date');\nif( testInput.type !== 'date') {\n\n\t/* add placeholder & pattern to all date fields */\n\tvar dateFields = document.querySelectorAll('.mc4wp-form input[type=\"date\"]');\n\tfor(var i=0; i<dateFields.length; i++) {\n\t\tif(!dateFields[i].placeholder) {\n\t\t\tdateFields[i].placeholder = 'YYYY-MM-DD';\n\t\t}\n\t\tif(!dateFields[i].pattern) {\n\t\t\tdateFields[i].pattern = '[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])';\n\t\t}\n\t}\n}\n\n})();</script><script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_options = {\"testMode\":\"\",\"boxes\":[{\"id\":82996,\"icon\":\"&times;\",\"content\":\"\",\"css\":{\"background_color\":\"#eeee22\",\"width\":600,\"border_width\":2,\"border_style\":\"double\",\"position\":\"center\"},\"trigger\":{\"method\":\"time_on_page\",\"value\":\"3\"},\"animation\":\"fade\",\"cookie\":{\"triggered\":0,\"dismissed\":336},\"rehide\":true,\"position\":\"center\",\"screenWidthCondition\":{\"condition\":\"larger\",\"value\":500},\"closable\":true,\"post\":{\"id\":82996,\"title\":\"Subscribe to KDnuggets\",\"slug\":\"subscribe-to-kdnuggets\"}}]};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla/assets/js/script.min.js?ver=3.2.5\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_stats_config = {\"ajaxurl\":\"https:\\/\\/www.kdnuggets.com\\/wp-admin\\/admin-ajax.php?action=boxzilla_stats_track\"};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla-stats/assets/js/tracking.min.js?ver=1.0.4\" type=\"text/javascript\"></script>\n<script src=\"https://www.kdnuggets.com/wp-includes/js/wp-embed.min.js?ver=4.9.10\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar mc4wp_forms_config = [];\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/forms-api.min.js?ver=4.1.14\" type=\"text/javascript\"></script>\n<!--[if lte IE 9]>\n<script type='text/javascript' src='https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/third-party/placeholders.min.js?ver=4.1.14'></script>\n<![endif]-->\n<!--/.main_wrapper--></div>\n<script src=\"https://s7.addthis.com/js/300/addthis_widget.js#pubid=gpsaddthis\" type=\"text/javascript\"></script>\n</body>\n</html>\n<!-- Dynamic page generated in 0.695 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2019-04-27 05:11:47 -->\n<!-- Compression = gzip -->", "content_tokenized": ["comment", "susan", "data", "scientist", "photo", "credit", "pixabay", "when", "work", "supervis", "machin", "learn", "problem", "with", "given", "data", "set", "tri", "differ", "algorithm", "and", "techniqu", "search", "for", "model", "produc", "general", "hypothes", "which", "then", "make", "the", "most", "accur", "predict", "possibl", "about", "futur", "instanc", "the", "same", "principl", "appli", "text", "document", "classif", "where", "there", "are", "mani", "model", "can", "use", "train", "text", "classifi", "the", "answer", "the", "question", "what", "machin", "learn", "model", "should", "use", "alway", "depend", "even", "the", "most", "experienc", "data", "scientist", "can", "tell", "which", "algorithm", "will", "perform", "best", "befor", "experi", "them", "this", "what", "are", "today", "use", "everyth", "that", "have", "present", "about", "text", "classif", "the", "previous", "articl", "and", "more", "and", "compar", "between", "the", "text", "classif", "model", "train", "order", "choos", "the", "most", "accur", "one", "for", "our", "problem", "the", "data", "are", "use", "relat", "larg", "data", "set", "stack", "overflow", "question", "and", "tag", "the", "data", "avail", "googl", "bigqueri", "also", "public", "avail", "this", "cloud", "storag", "tensorflowworkshopexamplesstackoverflowdatacsv", "explor", "the", "data", "figur", "num", "num", "have", "over", "num", "million", "word", "the", "data", "mytag", "java", "html", "aspnet", "rubyonrail", "jqueri", "mysql", "php", "javascript", "python", "css", "android", "iphon", "sql", "objectivec", "angularj", "net", "figur", "num", "the", "class", "are", "veri", "well", "balanc", "want", "have", "look", "few", "post", "and", "tag", "pair", "def", "exampl", "dfindex", "index", "post", "tag", "valu", "num", "num", "figur", "num", "figur", "num", "can", "see", "the", "text", "need", "clean", "text", "preprocess", "the", "text", "clean", "techniqu", "have", "seen", "far", "work", "veri", "well", "practic", "depend", "the", "kind", "text", "may", "encount", "may", "relev", "includ", "more", "complex", "text", "clean", "step", "but", "keep", "mind", "that", "the", "more", "step", "add", "the", "longer", "the", "text", "clean", "will", "take", "for", "this", "particular", "data", "set", "our", "text", "clean", "step", "includ", "decod", "remov", "stop", "word", "chang", "text", "lower", "case", "remov", "punctuat", "remov", "bad", "charact", "and", "now", "can", "have", "look", "clean", "post", "figur", "num", "way", "better", "post", "num", "after", "text", "clean", "and", "remov", "stop", "word", "have", "onli", "over", "num", "million", "word", "work", "with", "after", "split", "the", "data", "set", "the", "next", "step", "includ", "featur", "engin", "will", "convert", "our", "text", "document", "matrix", "token", "count", "countvector", "then", "transform", "count", "matrix", "normal", "tfidf", "represent", "tfidf", "transform", "after", "that", "train", "sever", "classifi", "from", "scikitlearn", "librari", "dfpost", "dftag", "xtrain", "xtest", "ytrain", "ytest", "naiv", "bay", "classifi", "for", "multinomi", "model", "after", "have", "our", "featur", "can", "train", "classifi", "tri", "predict", "the", "tag", "post", "will", "start", "with", "naiv", "bay", "classifi", "which", "provid", "nice", "baselin", "for", "this", "task", "scikitlearn", "includ", "sever", "variant", "this", "classifi", "the", "one", "most", "suitabl", "for", "text", "the", "multinomi", "variant", "make", "the", "vector", "transform", "classifi", "easier", "work", "with", "will", "use", "pipelin", "class", "scilkitlearn", "that", "behav", "like", "compound", "classifi", "figur", "num", "achiev", "num", "accuraci", "linear", "support", "vector", "machin", "linear", "support", "vector", "machin", "wide", "regard", "one", "the", "best", "text", "classif", "algorithm", "figur", "num", "achiev", "higher", "accuraci", "score", "num", "which", "num", "improv", "over", "naiv", "bay", "logist", "regress", "logist", "regress", "simpl", "and", "easi", "understand", "classif", "algorithm", "and", "logist", "regress", "can", "easili", "general", "multipl", "class", "figur", "num", "achiev", "accuraci", "score", "num", "which", "num", "higher", "than", "naiv", "bay", "and", "num", "lower", "than", "can", "see", "follow", "some", "veri", "basic", "step", "and", "use", "simpl", "linear", "model", "were", "abl", "reach", "high", "num", "accuraci", "this", "multiclass", "text", "classif", "data", "set", "use", "the", "same", "data", "set", "are", "tri", "some", "advanc", "techniqu", "such", "word", "embed", "and", "neural", "network", "now", "let", "tri", "some", "complex", "featur", "than", "just", "simpli", "count", "word"], "timestamp_scraper": 1556368281.359053, "title": "Multi-Class Text Classification Model Comparison and Selection", "read_time": 203.39999999999998, "content_html": "<div class=\"post\" id=\"post-\">\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"/2018/11/multi-class-text-classification-model-comparison-selection.html?page=2#comments\">comments</a></div>\n<p><b>By <a href=\"https://www.linkedin.com/in/susanli/\" rel=\"noopener noreferrer\" target=\"_blank\">Susan Li</a>, Sr. Data Scientist</b></p>\n<p><center><img alt=\"Image\" src=\"https://cdn-images-1.medium.com/max/2000/1*_kVRQJ-of1MW7dGXnRn38w.jpeg\" width=\"99%\"><br>\n<font size=\"-1\">Photo credit: Pixabay</font></br></img></center></p>\n<p>When working on a\u00a0<a href=\"https://en.wikipedia.org/wiki/Supervised_learning\" rel=\"noopener noreferrer\" target=\"_blank\">supervised machine learning</a>\u00a0problem with a given data set, we try different algorithms and techniques to search for models to produce general hypotheses, which then make the most accurate predictions possible about future instances. The same principles apply to text (or document) classification where there are many models can be used to train a text classifier.\u00a0<a href=\"https://docs.microsoft.com/en-us/azure/machine-learning/studio/algorithm-choice\" rel=\"noopener noreferrer\" target=\"_blank\">The answer to the question \u201cWhat machine learning model should I use?\u201d is always \u201cIt depends.\u201d Even the most experienced data scientists can\u2019t tell which algorithm will perform best before experimenting them</a>.</p>\n<p>This is what we are going to do today: use everything that we have presented about text classification in the previous articles (and more) and comparing between the text classification models we trained in order to choose the most accurate one for our problem.</p>\n<p>\u00a0</p>\n<h3>The Data</h3>\n<p>\u00a0<br>\nWe are using a relatively large data set of Stack Overflow questions and tags. The data is available in\u00a0<a href=\"https://bigquery.cloud.google.com/dataset/bigquery-public-data:stackoverflow\" rel=\"noopener noreferrer\" target=\"_blank\">Google BigQuery</a>, it is also publicly available at this Cloud Storage URL: <a href=\"https://storage.googleapis.com/tensorflow-workshop-examples/stack-overflow-data.csv\" rel=\"noopener noreferrer\" target=\"_blank\">https://storage.googleapis.com/tensorflow-workshop-examples/stack-overflow-data.csv</a>.</br></p>\n<p>\u00a0</p>\n<h3>Exploring the\u00a0Data</h3>\n<p>\u00a0</p>\n<p><script src=\"https://gist.github.com/susanli2016/4bb8adc4daf4fe313824fb0af1413eaa.js\"></script></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/800/1*HT0LEIu3vrMC031X32GEaQ.png\" width=\"99%\"/><br>\n<center>Figure 1</center><br>\n\u00a0</br></br></p>\n<p><strong><em>10276752</em></strong></p>\n<p>We have over 10 million words in the data.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>my_tags = ['java','html','asp.net','c#','ruby-on-rails','jquery','mysql','php','ios','javascript','python','c','css','android','iphone','sql','objective-c','c++','angularjs','.net']\r\nplt.figure(figsize=(10,4))\r\ndf.tags.value_counts().plot(kind='bar');</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/1000/1*zIUX8_ybwKC7UDlPOmvTeA.png\" width=\"99%\"/><br/>\n<center>Figure 2</center><br/>\n\u00a0</p>\n<p>The classes are very well balanced.</p>\n<p>We want to have a look a few post and tag pairs.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>def print_plot(index):\r\n    example = df[df.index == index][['post', 'tags']].values[0]\r\n    if len(example) &gt; 0:\r\n        print(example[0])\r\n        print('Tag:', example[1])\r\n\r\nprint_plot(10)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/1000/1*VHjd7ueJCRF1Eo0Lnin4rw.png\" width=\"99%\"/><br/>\n<center>Figure 3</center><br/>\n\u00a0</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>print_plot(30)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/1000/1*Q-Vc1i5PjZ96XeUtps-HLA.png\" width=\"99%\"/><br/>\n<center>Figure 4</center><br/>\n\u00a0</p>\n<p>As you can see, the texts need to be cleaned up.</p>\n<p>\u00a0</p>\n<h3>Text Pre-processing</h3>\n<p>\u00a0<br/>\nThe text cleaning techniques we have seen so far work very well in practice. Depending on the kind of texts you may encounter, it may be relevant to include more complex text cleaning steps. But keep in mind that the more steps we add, the longer the text cleaning will take.</p>\n<p>For this particular data set, our text cleaning step includes HTML decoding, remove stop words, change text to lower case, remove punctuation, remove bad characters, and so on.</p>\n<p><script src=\"https://gist.github.com/susanli2016/29d4cf9b7db4c6804e174b8eac2891e8.js\"></script></p>\n<p>Now we can have a look a cleaned post:</p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/1000/1*6uxeYLgeMsEh2xe0aIXc4w.png\" width=\"99%\"/><br/>\n<center>Figure 5</center><br/>\n\u00a0</p>\n<p>Way better!</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>df['post'].apply(lambda x: len(x.split(' '))).sum()</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><strong><em>3421180</em></strong></p>\n<p>After text cleaning and removing stop words, we have only over 3 million words to work with!</p>\n<p>After splitting the data set, the next steps includes feature engineering. We will convert our text documents to a matrix of token counts (CountVectorizer), then transform a count matrix to a normalized tf-idf representation (tf-idf transformer). After that, we train several classifiers from\u00a0<a href=\"http://scikit-learn.org/stable/\" rel=\"noopener noreferrer\" target=\"_blank\">Scikit-Learn library</a>.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>X = df.post\r\ny = df.tags\r\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state = 42)</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>\u00a0</p>\n<h3><strong>Naive Bayes Classifier for Multinomial Models</strong></h3>\n<p>\u00a0<br/>\nAfter we have our features, we can train a classifier to try to predict the tag of a post. We will start with a\u00a0<a href=\"http://scikit-learn.org/stable/modules/naive_bayes.html#naive-bayes\" rel=\"noopener noreferrer\" target=\"_blank\">Naive Bayes</a>\u00a0classifier, which provides a nice baseline for this task.\u00a0<code>scikit-learn</code>\u00a0includes several variants of this classifier; the one most suitable for text is the multinomial variant.</p>\n<p>To make the vectorizer =&gt; transformer =&gt; classifier easier to work with, we will use\u00a0<code>Pipeline</code>\u00a0class in Scilkit-Learn that behaves like a compound classifier.</p>\n<p><script src=\"https://gist.github.com/susanli2016/08da194a6a4f7a3e6b5ed81e369bbfa7.js\"></script></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/800/1*rSiw_RQjar22G9Y-GE1isA.png\" width=\"99%\"/><br/>\n<center>Figure 6</center><br/>\n\u00a0</p>\n<p>We achieved 74% accuracy.</p>\n<p>\u00a0</p>\n<h3><strong>Linear Support Vector\u00a0Machine</strong></h3>\n<p>\u00a0<br/>\n<a href=\"http://scikit-learn.org/stable/modules/svm.html#svm\" rel=\"noopener noreferrer\" target=\"_blank\">Linear Support Vector Machine</a>\u00a0is widely regarded as one of the best text classification algorithms.</p>\n<p><script src=\"https://gist.github.com/susanli2016/f0160b4d2571110044ec94b29e0bfbe4.js\"></script></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/800/1*OYttvEbF64M46gkJYdiBIA.png\" width=\"99%\"/><br/>\n<center>Figure 7</center><br/>\n\u00a0</p>\n<p>We achieve a higher accuracy score of 79% which is 5% improvement over Naive Bayes.</p>\n<p>\u00a0</p>\n<h3>Logistic Regression</h3>\n<p>\u00a0<br/>\nLogistic regression is a simple and easy to understand classification algorithm, and Logistic regression can be easily generalized to multiple classes.</p>\n<p><script src=\"https://gist.github.com/susanli2016/d65cad4bf9fb30a79ae66a7a6027f7e8.js\"></script></p>\n<p><img class=\"aligncenter\" src=\"https://cdn-images-1.medium.com/max/800/1*jAfdo2z-duy5o0vBGb21AQ.png\" width=\"99%\"/><br/>\n<center>Figure 8</center><br/>\n\u00a0</p>\n<p>We achieve an accuracy score of 78% which is 4% higher than Naive Bayes and 1% lower than SVM.</p>\n<p>As you can see, following some very basic steps and using a simple linear model, we were able to reach as high as an 79% accuracy on this multi-class text classification data set.</p>\n<p>Using the same data set, we are going to try some advanced techniques such as word embedding and neural networks.</p>\n<p>Now, let\u2019s try some complex features than just simply counting words.</p>\n</div> ", "website": "kdnuggets"}