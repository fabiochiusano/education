{"title": "Top 10 Coding Mistakes Made by Data Scientists", "tfidf": {"tfidf": {"sourc": 1.69760479042, "ingestpi": 992.25, "background": 4.02739726027, "but": 7.11426925293, "els": 10.88888888888, "chain": 5.17639387023, "dfnum": 992.25, "anoth": 1.13643521832, "seem": 2.29123971713, "instead": 4.78384893531, "dnumtpip": 2976.75, "larg": 4.7429979834, "basic": 2.7301805675, "compress": 33.493670886, "spyder": 690.260869565, "from": 2.00113442994, "abl": 1.8208510150200001, "where": 1.06715063521, "def": 245.50515463920004, "retriev": 2.16826003824, "startup": 68.4310344828, "flow": 4.41, "iavg": 992.25, "columbia": 5.41473396999, "outputpng": 992.25, "pars": 145.651376147, "abov": 1.90382539873, "organ": 3.2774566474, "should": 3.3286508019800003, "solut": 47.278141751, "habit": 8.79556786704, "easi": 10.5875291764, "dag": 273.724137932, "senior": 4.00706713781, "statistician": 83.55789473680001, "all": 4.04587155964, "into": 2.03004922958, "paramet": 17.256521739100002, "miss": 3.53664513255, "invest": 4.16146788991, "this": 1.00379362671, "and": 25.001574803249998, "experi": 1.87062566278, "yourself": 26.592964824099997, "hardcod": 1984.5, "dftrain": 1984.5, "produc": 1.36932896326, "manual": 7.72930866602, "tempt": 96.5106382978, "ideal": 4.65571847507, "junk": 69.327510917, "binari": 32.4, "storag": 8.623574144489998, "sometim": 1.7126213592200001, "promot": 2.0172808132099997, "share": 11.1397497369, "whi": 13.026461538480001, "inaccess": 52.0524590164, "engin": 12.35678704855, "pro": 12.7008, "recipi": 10.0481012658, "pycharm": 992.25, "financi": 2.60860992442, "airflow": 91.76878612719999, "catch": 8.25585023401, "them": 4.39504463976, "they": 6.18103951722, "realli": 4.7476076555, "work": 2.23040179826, "valu": 4.555523672880001, "when": 2.0415353951, "frequent": 2.10501193317, "learn": 16.259253840550002, "yike": 992.25, "import": 4.020597670110001, "dnumtstack": 992.25, "scipi": 992.25, "git": 2164.909090908, "forget": 16.9978586724, "comment": 3.05954904606, "first": 2.01523229246, "not": 5.07836990595, "automat": 6.787516032490001, "user": 7.71053909665, "more": 1.0171706817, "are": 12.35887122936, "later": 1.08650424309, "littl": 1.5499365420299998, "especi": 1.66712170534, "some": 1.04036697248, "who": 1.06279287723, "same": 1.11857958148, "imagin": 6.598503740650001, "lead": 2.5328653478, "relat": 2.47501753838, "panda": 447.211267604, "ani": 2.26767604628, "analysi": 6.95705521472, "week": 1.80532181033, "reporthtml": 992.25, "notabl": 1.82840032247, "write": 8.230171073080001, "see": 8.90694878577, "than": 2.0655737705, "for": 18.00567072018, "save": 11.271565495199999, "will": 3.67443295788, "model": 2.0905978404, "attempt": 1.4721810088999998, "decis": 4.32, "databas": 8.24727272727, "upload": 77.82352941180001, "stackoverflow": 992.25, "document": 5.0819462228, "scale": 3.7469907953699995, "rank": 2.52480916031, "dnumtflow": 2976.75, "mistak": 26.140504939619998, "have": 7.104263887979998, "updat": 5.56466876972, "togeth": 1.58095996813, "topbottom": 992.25, "output": 30.707930367520003, "global": 3.30612244898, "client": 14.1371326803, "python": 112.5957446808, "make": 3.2287980475800007, "task": 7.77282741738, "control": 5.87836712024, "checklist": 135.692307692, "just": 1.33580143037, "mention": 7.61682392451, "std": 610.615384616, "london": 1.97782484116, "add": 13.83730389309, "person": 1.40520446097, "want": 1.99698113208, "datacsv": 1984.5, "common": 4.2077922078, "datadriven": 992.25, "imag": 2.70137825421, "csvs": 2976.75, "parquet": 1984.5, "booo": 992.25, "data": 182.32752020435998, "optim": 11.5377906977, "version": 8.033396584439998, "file": 33.93919239902999, "break": 2.42863698944, "notebook": 120.5772151899, "duplic": 19.7955112219, "reason": 3.44680851064, "bad": 20.36690186016, "avg": 184.604651163, "requir": 1.52844902282, "too": 1.81585268215, "origin": 1.13724928367, "use": 11.32602633118, "equal": 2.542193755, "that": 10.0398406375, "runpi": 992.25, "doe": 1.70581282905, "indic": 2.0826446281, "well": 1.0655748708, "univers": 1.24889867841, "csv": 933.882352941, "rememb": 4.88793103448, "path": 23.210526315799996, "thank": 6.00681044268, "onli": 1.0256476516600002, "otherdatacsv": 992.25, "sever": 1.07241286139, "insight": 11.8037174721, "difficult": 2.48957189901, "snumwebgoogl": 992.25, "caus": 1.38521943984, "dfg": 992.25, "valuesd": 992.25, "one": 5.031374786100001, "check": 19.51967213115, "vector": 51.79771615, "poor": 2.42196796339, "tool": 9.99433427762, "machin": 12.073003802279999, "scienc": 16.23787258912, "function": 17.468091795, "someon": 14.8050979173, "loop": 54.0459574468, "depend": 2.2411067193700003, "might": 6.468559011270001, "place": 1.1004366812200002, "top": 1.8387769284200002, "both": 1.05215720061, "bio": 42.336000000000006, "schema": 223.605633802, "referenc": 14.0994671403, "notic": 4.36994219653, "run": 6.22771403352, "slow": 4.04793472718, "boss": 14.3674208145, "templat": 43.495890411000005, "categori": 3.98194130926, "return": 1.39532431007, "below": 2.25607503197, "norman": 14.225806451620002, "can": 4.70504556568, "includ": 1.0190641247799999, "after": 2.04140414042, "easili": 3.6938110749199997, "hold": 1.6551292744, "permiss": 6.280063291139999, "chang": 3.5426956263, "format": 5.0625, "peopl": 3.6396148555800005, "dataset": 193.609756098, "conclud": 3.02284843869, "while": 1.0441988950299999, "seri": 1.46511627907, "with": 11.013180298889997, "andor": 690.260869565, "understand": 2.96858638743, "about": 2.12972030318, "assert": 23.0890052356, "actual": 3.74964572508, "\u2514\u2500\u2500": 992.25, "feel": 3.1356903021900004, "variabl": 8.747107438019999, "busi": 2.05541170378, "code": 97.01784404799999, "result": 2.29223216864, "softwar": 41.0497737556, "report": 2.7268979732, "base": 1.14628158845, "repost": 933.882352941, "input": 12.2029208301, "other": 4.03969465648, "manag": 1.6448404475799998, "altern": 2.1390460792200003, "junior": 6.85196374622, "has": 4.1745990008, "look": 5.725895647979999, "unit": 1.15394679459, "typic": 2.2541530597799997, "hack": 43.3770491803, "similar": 1.37514075357, "zscore": 992.25, "mess": 34.588235294099995, "mani": 1.04426757877, "project": 5.2604373757500005, "fail": 5.784308962829999, "pickl": 243.0, "set": 1.18707940781, "list": 1.36321483771, "solv": 7.26923076923, "pleas": 9.12938470385, "small": 1.3594793629, "written": 1.9573418813999999, "config": 992.25, "drive": 2.93510815308, "extra": 5.33826496301, "match": 3.5676404494400002, "reproduc": 12.6805111821, "date": 1.63081664099, "chief": 4.8365575019, "unawar": 16.746835443, "column": 7.078020508250001, "everyon": 6.3964544722, "need": 4.31178707223, "statist": 8.48530197756, "modular": 49.9245283019, "hurri": 33.2830188679, "take": 1.13961668222, "think": 2.90715986083, "deliv": 6.807890222979999, "statement": 3.42228928648, "dnumtjoin": 992.25, "like": 4.596742671, "asset": 8.63295269168, "financ": 4.255159474669999, "numpi": 992.25, "wrong": 5.478260869570001, "get": 7.1425036554, "controversi": 2.62543409955, "back": 2.52140077822, "xyz": 311.294117647, "sinc": 2.16737201366, "etc": 8.413354531, "ingest": 42.449197861, "better": 6.01971688575, "num": 23.00724592023, "what": 3.7603031738399997, "time": 1.01127460348, "store": 10.34042553192, "problem": 1.76674827509, "again": 1.50883862384, "cookiecutt": 992.25, "the": 11.0, "let": 6.97233201582, "qualiti": 2.9329392204, "deal": 2.18346857379, "dump": 38.7219512196, "say": 1.7544480053, "scientist": 28.165582495560002, "shape": 3.20338983051, "directori": 44.305116279, "then": 1.08657860516, "exampl": 1.50483412322, "between": 1.03453668708, "without": 1.29547123623, "come": 1.32831325301, "start": 1.26673581744, "probabl": 5.29111814698, "test": 5.31414225942, "access": 5.6204861930700005, "even": 2.32922535212, "cass": 63.0, "bank": 2.87400434468, "here": 2.42307692308, "join": 1.7922781666299998, "\u251c\u2500\u2500": 4961.25, "there": 1.04091266719, "groupavg": 992.25, "jupyt": 2976.75, "excess": 5.30792377131, "school": 1.64008264463, "lot": 22.0438767009, "niemer": 1984.5, "now": 2.321561746, "most": 3.06289389069, "their": 2.0309581681, "enough": 2.2319696330700003, "linear": 27.7552447552, "number": 1.10142916609, "thing": 9.626193724439998, "commit": 2.8860207235, "mix": 5.5705263157800005, "talk": 3.0303493033, "good": 4.55944859277, "wordi": 756.0, "veri": 2.51760228354, "debug": 180.409090909}, "idf": {"sourc": 1.69760479042, "ingestpi": 992.25, "background": 4.02739726027, "but": 1.01632417899, "els": 5.44444444444, "chain": 5.17639387023, "dfnum": 992.25, "anoth": 1.13643521832, "seem": 2.29123971713, "instead": 1.59461631177, "dnumtpip": 992.25, "larg": 1.18574949585, "basic": 2.7301805675, "compress": 16.746835443, "spyder": 690.260869565, "from": 1.00056721497, "abl": 1.8208510150200001, "where": 1.06715063521, "def": 81.83505154640001, "retriev": 2.16826003824, "startup": 68.4310344828, "flow": 4.41, "iavg": 992.25, "columbia": 5.41473396999, "outputpng": 992.25, "pars": 145.651376147, "abov": 1.90382539873, "organ": 1.6387283237, "should": 1.6643254009900001, "solut": 4.7278141751, "habit": 8.79556786704, "easi": 5.2937645882, "dag": 136.862068966, "senior": 4.00706713781, "statistician": 83.55789473680001, "all": 1.01146788991, "into": 1.01502461479, "paramet": 17.256521739100002, "miss": 3.53664513255, "invest": 4.16146788991, "this": 1.00379362671, "and": 1.00006299213, "experi": 1.87062566278, "yourself": 26.592964824099997, "hardcod": 992.25, "dftrain": 992.25, "produc": 1.36932896326, "manual": 7.72930866602, "tempt": 48.2553191489, "ideal": 4.65571847507, "junk": 69.327510917, "binari": 32.4, "storag": 8.623574144489998, "sometim": 1.7126213592200001, "promot": 2.0172808132099997, "share": 1.8566249561500001, "whi": 3.2566153846200003, "inaccess": 52.0524590164, "engin": 2.47135740971, "pro": 12.7008, "recipi": 10.0481012658, "pycharm": 992.25, "financi": 2.60860992442, "airflow": 91.76878612719999, "catch": 8.25585023401, "them": 1.09876115994, "they": 1.03017325287, "realli": 4.7476076555, "work": 1.11520089913, "valu": 2.2777618364400003, "when": 1.02076769755, "frequent": 2.10501193317, "learn": 2.32275054865, "yike": 992.25, "import": 1.3401992233700002, "dnumtstack": 992.25, "scipi": 992.25, "git": 360.818181818, "forget": 16.9978586724, "comment": 3.05954904606, "first": 1.00761614623, "not": 1.01567398119, "automat": 6.787516032490001, "user": 7.71053909665, "more": 1.0171706817, "are": 1.02990593578, "later": 1.08650424309, "littl": 1.5499365420299998, "especi": 1.66712170534, "some": 1.04036697248, "who": 1.06279287723, "same": 1.11857958148, "imagin": 6.598503740650001, "lead": 1.2664326739, "relat": 1.23750876919, "panda": 111.802816901, "ani": 1.13383802314, "analysi": 3.47852760736, "week": 1.80532181033, "reporthtml": 992.25, "notabl": 1.82840032247, "write": 2.0575427682700003, "see": 1.27242125511, "than": 1.03278688525, "for": 1.00031504001, "save": 2.8178913737999998, "will": 1.22481098596, "model": 2.0905978404, "attempt": 1.4721810088999998, "decis": 2.16, "databas": 8.24727272727, "upload": 77.82352941180001, "stackoverflow": 992.25, "document": 2.5409731114, "scale": 3.7469907953699995, "rank": 2.52480916031, "dnumtflow": 992.25, "mistak": 8.71350164654, "have": 1.0148948411399998, "updat": 5.56466876972, "togeth": 1.58095996813, "topbottom": 992.25, "output": 7.676982591880001, "global": 3.30612244898, "client": 14.1371326803, "python": 56.2978723404, "make": 1.0762660158600001, "task": 3.88641370869, "control": 1.46959178006, "checklist": 135.692307692, "just": 1.33580143037, "mention": 2.53894130817, "std": 305.307692308, "london": 1.97782484116, "add": 4.61243463103, "person": 1.40520446097, "want": 1.99698113208, "datacsv": 992.25, "common": 1.4025974025999999, "datadriven": 992.25, "imag": 2.70137825421, "csvs": 992.25, "parquet": 992.25, "booo": 992.25, "data": 3.37643555934, "optim": 11.5377906977, "version": 2.0083491461099996, "file": 3.7710213776699995, "break": 2.42863698944, "notebook": 40.1924050633, "duplic": 19.7955112219, "reason": 1.72340425532, "bad": 3.3944836433599996, "avg": 184.604651163, "requir": 1.52844902282, "too": 1.81585268215, "origin": 1.13724928367, "use": 1.0296387573799999, "equal": 2.542193755, "that": 1.00398406375, "runpi": 992.25, "doe": 1.70581282905, "indic": 2.0826446281, "well": 1.0655748708, "univers": 1.24889867841, "csv": 933.882352941, "rememb": 4.88793103448, "path": 4.6421052631599995, "thank": 6.00681044268, "onli": 1.0256476516600002, "otherdatacsv": 992.25, "sever": 1.07241286139, "insight": 11.8037174721, "difficult": 2.48957189901, "snumwebgoogl": 992.25, "caus": 1.38521943984, "dfg": 992.25, "valuesd": 992.25, "one": 1.00627495722, "check": 6.50655737705, "vector": 25.898858075, "poor": 2.42196796339, "tool": 4.99716713881, "machin": 4.02433460076, "scienc": 2.31969608416, "function": 2.495441685, "someon": 4.9350326391, "loop": 13.5114893617, "depend": 2.2411067193700003, "might": 2.1561863370900003, "place": 1.1004366812200002, "top": 1.8387769284200002, "both": 1.05215720061, "bio": 42.336000000000006, "schema": 111.802816901, "referenc": 14.0994671403, "notic": 4.36994219653, "run": 1.55692850838, "slow": 4.04793472718, "boss": 14.3674208145, "templat": 43.495890411000005, "categori": 3.98194130926, "return": 1.39532431007, "below": 2.25607503197, "norman": 7.112903225810001, "can": 1.17626139142, "includ": 1.0190641247799999, "after": 1.02070207021, "easili": 3.6938110749199997, "hold": 1.6551292744, "permiss": 6.280063291139999, "chang": 1.1808985421, "format": 2.53125, "peopl": 1.21320495186, "dataset": 193.609756098, "conclud": 3.02284843869, "while": 1.0441988950299999, "seri": 1.46511627907, "with": 1.0011982089899998, "andor": 690.260869565, "understand": 2.96858638743, "about": 1.06486015159, "assert": 4.6178010471199995, "actual": 1.87482286254, "\u2514\u2500\u2500": 992.25, "feel": 3.1356903021900004, "variabl": 8.747107438019999, "busi": 2.05541170378, "code": 3.8807137619199996, "result": 1.14611608432, "softwar": 10.2624434389, "report": 1.3634489866, "base": 1.14628158845, "repost": 933.882352941, "input": 12.2029208301, "other": 1.00992366412, "manag": 1.6448404475799998, "altern": 2.1390460792200003, "junior": 6.85196374622, "has": 1.0436497502, "look": 1.9086318826599997, "unit": 1.15394679459, "typic": 2.2541530597799997, "hack": 43.3770491803, "similar": 1.37514075357, "zscore": 992.25, "mess": 34.588235294099995, "mani": 1.04426757877, "project": 1.7534791252500002, "fail": 1.9281029876099998, "pickl": 81.0, "set": 1.18707940781, "list": 1.36321483771, "solv": 7.26923076923, "pleas": 9.12938470385, "small": 1.3594793629, "written": 1.9573418813999999, "config": 992.25, "drive": 2.93510815308, "extra": 5.33826496301, "match": 3.5676404494400002, "reproduc": 12.6805111821, "date": 1.63081664099, "chief": 2.41827875095, "unawar": 16.746835443, "column": 7.078020508250001, "everyon": 6.3964544722, "need": 1.4372623574099999, "statist": 4.24265098878, "modular": 49.9245283019, "hurri": 33.2830188679, "take": 1.13961668222, "think": 2.90715986083, "deliv": 3.4039451114899997, "statement": 3.42228928648, "dnumtjoin": 992.25, "like": 1.14918566775, "asset": 8.63295269168, "financ": 4.255159474669999, "numpi": 992.25, "wrong": 5.478260869570001, "get": 1.78562591385, "controversi": 2.62543409955, "back": 1.26070038911, "xyz": 311.294117647, "sinc": 1.08368600683, "etc": 4.2066772655, "ingest": 42.449197861, "better": 2.0065722952500002, "num": 1.00031504001, "what": 1.25343439128, "time": 1.01127460348, "store": 3.44680851064, "problem": 1.76674827509, "again": 1.50883862384, "cookiecutt": 992.25, "the": 1.0, "let": 3.48616600791, "qualiti": 2.9329392204, "deal": 2.18346857379, "dump": 19.3609756098, "say": 1.7544480053, "scientist": 4.69426374926, "shape": 3.20338983051, "directori": 14.768372093, "then": 1.08657860516, "exampl": 1.50483412322, "between": 1.03453668708, "without": 1.29547123623, "come": 1.32831325301, "start": 1.26673581744, "probabl": 2.64555907349, "test": 2.65707112971, "access": 1.8734953976900002, "even": 1.16461267606, "cass": 63.0, "bank": 2.87400434468, "here": 2.42307692308, "join": 1.7922781666299998, "\u251c\u2500\u2500": 992.25, "there": 1.04091266719, "groupavg": 992.25, "jupyt": 992.25, "excess": 5.30792377131, "school": 1.64008264463, "lot": 4.40877534018, "niemer": 992.25, "now": 1.160780873, "most": 1.02096463023, "their": 1.01547908405, "enough": 2.2319696330700003, "linear": 13.8776223776, "number": 1.10142916609, "thing": 2.4065484311099996, "commit": 2.8860207235, "mix": 2.7852631578900002, "talk": 3.0303493033, "good": 1.51981619759, "wordi": 756.0, "veri": 1.25880114177, "debug": 180.409090909}, "logidf": {"sourc": 0.529218310751, "ingestpi": 6.89997509166, "background": 1.3931203261899998, "but": 0.0161923720719, "els": 1.6945957207700002, "chain": 1.64410864979, "dfnum": 6.89997509166, "anoth": 0.127896361652, "seem": 0.829093032276, "instead": 0.46663315041500003, "dnumtpip": 6.89997509166, "larg": 0.17037506060600002, "basic": 1.00436774895, "compress": 2.81820931165, "spyder": 6.5370695979699995, "from": 0.000567054168866, "abl": 0.599303982475, "where": 0.0649921387457, "def": 4.40470565484, "retriev": 0.773925020223, "startup": 4.225826442240001, "flow": 1.4838746894600001, "iavg": 6.89997509166, "columbia": 1.6891237509, "outputpng": 6.89997509166, "pars": 4.9812159316699995, "abov": 0.643865229816, "organ": 0.49392052866999997, "should": 0.509419876758, "solut": 1.55346297627, "habit": 2.17424794314, "easi": 1.6665296351499999, "dag": 4.918973622799999, "senior": 1.38805958664, "statistician": 4.425539741740001, "all": 0.011402632097799998, "into": 0.0149128632287, "paramet": 2.8481901438599997, "miss": 1.2631785751200002, "invest": 1.42586787018, "this": 0.0037864490525, "and": 6.29901420636e-05, "experi": 0.626272953933, "yourself": 3.28064670051, "hardcod": 6.89997509166, "dftrain": 6.89997509166, "produc": 0.314320812003, "manual": 2.04501942341, "tempt": 3.87650606314, "ideal": 1.53809624363, "junk": 4.23884181035, "binari": 3.4781584227999995, "storag": 2.1544996326700003, "sometim": 0.538025155343, "promot": 0.7017504724920001, "share": 0.618760299747, "whi": 1.18068843047, "inaccess": 3.9522520373, "engin": 0.904767558276, "pro": 2.5416649836099996, "recipi": 2.30738368788, "pycharm": 6.89997509166, "financi": 0.958817483446, "airflow": 4.5192722194099995, "catch": 2.11092206831, "them": 0.0941833269093, "they": 0.0297269947676, "realli": 1.5576408397, "work": 0.109034567273, "valu": 0.823193310148, "when": 0.0205549888584, "frequent": 0.7443211360850001, "learn": 0.842752064745, "yike": 6.89997509166, "import": 0.292818277066, "dnumtstack": 6.89997509166, "scipi": 6.89997509166, "git": 5.8883741799800005, "forget": 2.8330873756700004, "comment": 1.11826753454, "first": 0.0075872898121599995, "not": 0.0155524130075, "automat": 1.9150850473199998, "user": 2.04258810688, "more": 0.017024931599999998, "are": 0.0294674735827, "later": 0.0829654259878, "littl": 0.438213989466, "especi": 0.511098609709, "some": 0.0395735090645, "who": 0.0609002329859, "same": 0.112059649604, "imagin": 1.88684291737, "lead": 0.23620402986699998, "relat": 0.21310030165399999, "panda": 4.7167367562999996, "ani": 0.125608358366, "analysi": 1.2466091029200002, "week": 0.5907388641619999, "reporthtml": 6.89997509166, "notabl": 0.603441443842, "write": 0.721512439877, "see": 0.240921585492, "than": 0.0322608622182, "for": 0.00031499039539700004, "save": 1.03598886547, "will": 0.202786534915, "model": 0.7374500731110001, "attempt": 0.38674498075099994, "decis": 0.7701082216959999, "databas": 2.10988256718, "upload": 4.35444382006, "stackoverflow": 6.89997509166, "document": 0.932547122383, "scale": 1.32095306328, "rank": 0.926165479794, "dnumtflow": 6.89997509166, "mistak": 2.1648737360799997, "have": 0.0147850023412, "updat": 1.7164374626899999, "togeth": 0.458032237308, "topbottom": 6.89997509166, "output": 2.03822657827, "global": 1.1957760371200001, "client": 2.6488048591599997, "python": 4.03065674296, "make": 0.07349765782289999, "task": 1.35748680661, "control": 0.38498466158600003, "checklist": 4.91038987911, "just": 0.289531434109, "mention": 0.931747186336, "std": 5.721320095319999, "london": 0.6819976757709999, "add": 1.52875583713, "person": 0.34018281601800004, "want": 0.6916366062549999, "datacsv": 6.89997509166, "common": 0.338325805271, "datadriven": 6.89997509166, "imag": 0.99376210729, "csvs": 6.89997509166, "parquet": 6.89997509166, "booo": 6.89997509166, "data": 1.2168205848, "optim": 2.4456277954099996, "version": 0.697313064259, "file": 1.32734588723, "break": 0.88733019029, "notebook": 3.693678049, "duplic": 2.98545520604, "reason": 0.544301552962, "bad": 1.2221516561799999, "avg": 5.21821651765, "requir": 0.424253510675, "too": 0.5965551547219999, "origin": 0.128612437587, "use": 0.0292080197316, "equal": 0.933027391343, "that": 0.00397614837964, "runpi": 6.89997509166, "doe": 0.5340417297169999, "indic": 0.7336385419149999, "well": 0.0635144383156, "univers": 0.222262105686, "csv": 6.83935046985, "rememb": 1.5867691126199999, "path": 1.5351679838499999, "thank": 1.7928938993, "onli": 0.025324268329099998, "otherdatacsv": 6.89997509166, "sever": 0.06991112039689999, "insight": 2.46841452187, "difficult": 0.912110767588, "snumwebgoogl": 6.89997509166, "caus": 0.325858567406, "dfg": 6.89997509166, "valuesd": 6.89997509166, "one": 0.0062553516455, "check": 1.87281049562, "vector": 3.25419887797, "poor": 0.8845804177050001, "tool": 1.60887117963, "machin": 1.39235958062, "scienc": 0.841436178891, "function": 0.914465741594, "someon": 1.59635928666, "loop": 2.60354038732, "depend": 0.806969815, "might": 0.7683410765340001, "place": 0.0957070839572, "top": 0.609100637788, "both": 0.050842533389300004, "bio": 3.7456377879300002, "schema": 4.7167367562999996, "referenc": 2.6461370052, "notic": 1.47474978168, "run": 0.442714975539, "slow": 1.39820680715, "boss": 2.66496319995, "templat": 3.7726664603199995, "categori": 1.38176946652, "return": 0.333126868592, "below": 0.813626591936, "norman": 1.9619104904, "can": 0.162341096394, "includ": 0.0188846813905, "after": 0.020490694648099998, "easili": 1.3066587367, "hold": 0.503879117196, "permiss": 1.8373800586400002, "chang": 0.166275625058, "format": 0.9287132518729999, "peopl": 0.193265578473, "dataset": 5.26584456664, "conclud": 1.1061995784799998, "while": 0.04324998379380001, "seri": 0.38193461069799994, "with": 0.00119749171339, "andor": 6.5370695979699995, "understand": 1.0880858756799998, "about": 0.0628434774746, "assert": 1.52991862796, "actual": 0.628514181648, "\u2514\u2500\u2500": 6.89997509166, "feel": 1.1428493419299999, "variabl": 2.1687230672, "busi": 0.720476170355, "code": 1.35601909597, "result": 0.136378908381, "softwar": 2.32849096333, "report": 0.31001750903700004, "base": 0.13652330228700002, "repost": 6.83935046985, "input": 2.50167533539, "other": 0.00987474791976, "manag": 0.497643387158, "altern": 0.760359972282, "junior": 1.92453528947, "has": 0.0427239448548, "look": 0.6463866936, "unit": 0.143188061817, "typic": 0.812774319158, "hack": 3.7699304805000002, "similar": 0.318556092114, "zscore": 6.89997509166, "mess": 3.54351360384, "mani": 0.0433157581221, "project": 0.561601885907, "fail": 0.656536611573, "pickl": 4.394449154669999, "set": 0.171496011289, "list": 0.309845761506, "solv": 1.9836504770400003, "pleas": 2.21149829955, "small": 0.307101805059, "written": 0.671587369833, "config": 6.89997509166, "drive": 1.07674430203, "extra": 1.67490068688, "match": 1.27190443874, "reproduc": 2.54006626224, "date": 0.489080896097, "chief": 0.883056027166, "unawar": 2.81820931165, "column": 1.95699427938, "everyon": 1.8557438481400002, "need": 0.362740163442, "statist": 1.4451883070700002, "modular": 3.91051243112, "hurri": 3.50504732301, "take": 0.130691962197, "think": 1.06717661175, "deliv": 1.22493508587, "statement": 1.2303097091500002, "dnumtjoin": 6.89997509166, "like": 0.139053576545, "asset": 2.1555865893, "financ": 1.44813224068, "numpi": 6.89997509166, "wrong": 1.70078769102, "get": 0.579769005782, "controversi": 0.9652462536299999, "back": 0.23166743089699998, "xyz": 5.74073818118, "sinc": 0.0803681994577, "etc": 1.4366730879700003, "ingest": 3.74830801649, "better": 0.6964279406, "num": 0.00031499039539700004, "what": 0.225887296827, "time": 0.0112115188626, "store": 1.2374487335200002, "problem": 0.569140724273, "again": 0.411340231612, "cookiecutt": 6.89997509166, "the": 0.0, "let": 1.2488025672799998, "qualiti": 1.07600506711, "deal": 0.780914701253, "dump": 2.9632594736400004, "say": 0.562154280552, "scientist": 1.54634128444, "shape": 1.16420957115, "directori": 2.6924878733399997, "then": 0.08303386523089999, "exampl": 0.40868267499899996, "between": 0.033953681165299995, "without": 0.258874517941, "come": 0.28390990653000003, "start": 0.236443369291, "probabl": 0.972882412913, "test": 0.977224437103, "access": 0.627805882716, "even": 0.152388564834, "cass": 4.14313472639, "bank": 1.0557062993700002, "here": 0.8850381883700001, "join": 0.58348752942, "\u251c\u2500\u2500": 6.89997509166, "there": 0.0400978929255, "groupavg": 6.89997509166, "jupyt": 6.89997509166, "excess": 1.6692007552700001, "school": 0.494746633632, "lot": 1.4835969502500002, "niemer": 6.89997509166, "now": 0.149092945021, "most": 0.020747896295599998, "their": 0.015360505122700001, "enough": 0.802884439169, "linear": 2.63027764196, "number": 0.0966085784186, "thing": 0.8781935346799999, "commit": 1.0598786410299998, "mix": 1.02434236008, "talk": 1.10867789449, "good": 0.418589404907, "wordi": 6.6280413761800006, "veri": 0.230159793238, "debug": 5.19522699942}, "freq": {"sourc": 1, "ingestpi": 1, "background": 1, "but": 7, "els": 2, "chain": 1, "dfnum": 1, "anoth": 1, "seem": 1, "instead": 3, "dnumtpip": 3, "larg": 4, "basic": 1, "compress": 2, "spyder": 1, "from": 2, "abl": 1, "where": 1, "def": 3, "retriev": 1, "startup": 1, "flow": 1, "iavg": 1, "columbia": 1, "outputpng": 1, "pars": 1, "abov": 1, "organ": 2, "should": 2, "solut": 10, "habit": 1, "easi": 2, "dag": 2, "senior": 1, "statistician": 1, "all": 4, "into": 2, "paramet": 1, "miss": 1, "invest": 1, "this": 1, "and": 25, "experi": 1, "yourself": 1, "hardcod": 2, "dftrain": 2, "produc": 1, "manual": 1, "tempt": 2, "ideal": 1, "junk": 1, "binari": 1, "storag": 1, "sometim": 1, "promot": 1, "share": 6, "whi": 4, "inaccess": 1, "engin": 5, "pro": 1, "recipi": 1, "pycharm": 1, "financi": 1, "airflow": 1, "catch": 1, "them": 4, "they": 6, "realli": 1, "work": 2, "valu": 2, "when": 2, "frequent": 1, "learn": 7, "yike": 1, "import": 3, "dnumtstack": 1, "scipi": 1, "git": 6, "forget": 1, "comment": 1, "first": 2, "not": 5, "automat": 1, "user": 1, "more": 1, "are": 12, "later": 1, "littl": 1, "especi": 1, "some": 1, "who": 1, "same": 1, "imagin": 1, "lead": 2, "relat": 2, "panda": 4, "ani": 2, "analysi": 2, "week": 1, "reporthtml": 1, "notabl": 1, "write": 4, "see": 7, "than": 2, "for": 18, "save": 4, "will": 3, "model": 1, "attempt": 1, "decis": 2, "databas": 1, "upload": 1, "stackoverflow": 1, "document": 2, "scale": 1, "rank": 1, "dnumtflow": 3, "mistak": 3, "have": 7, "updat": 1, "togeth": 1, "topbottom": 1, "output": 4, "global": 1, "client": 1, "python": 2, "make": 3, "task": 2, "control": 4, "checklist": 1, "just": 1, "mention": 3, "std": 2, "london": 1, "add": 3, "person": 1, "want": 1, "datacsv": 2, "common": 3, "datadriven": 1, "imag": 1, "csvs": 3, "parquet": 2, "booo": 1, "data": 54, "optim": 1, "version": 4, "file": 9, "break": 1, "notebook": 3, "duplic": 1, "reason": 2, "bad": 6, "avg": 1, "requir": 1, "too": 1, "origin": 1, "use": 11, "equal": 1, "that": 10, "runpi": 1, "doe": 1, "indic": 1, "well": 1, "univers": 1, "csv": 1, "rememb": 1, "path": 5, "thank": 1, "onli": 1, "otherdatacsv": 1, "sever": 1, "insight": 1, "difficult": 1, "snumwebgoogl": 1, "caus": 1, "dfg": 1, "valuesd": 1, "one": 5, "check": 3, "vector": 2, "poor": 1, "tool": 2, "machin": 3, "scienc": 7, "function": 7, "someon": 3, "loop": 4, "depend": 1, "might": 3, "place": 1, "top": 1, "both": 1, "bio": 1, "schema": 2, "referenc": 1, "notic": 1, "run": 4, "slow": 1, "boss": 1, "templat": 1, "categori": 1, "return": 1, "below": 1, "norman": 2, "can": 4, "includ": 1, "after": 2, "easili": 1, "hold": 1, "permiss": 1, "chang": 3, "format": 2, "peopl": 3, "dataset": 1, "conclud": 1, "while": 1, "seri": 1, "with": 11, "andor": 1, "understand": 1, "about": 2, "assert": 5, "actual": 2, "\u2514\u2500\u2500": 1, "feel": 1, "variabl": 1, "busi": 1, "code": 25, "result": 2, "softwar": 4, "report": 2, "base": 1, "repost": 1, "input": 1, "other": 4, "manag": 1, "altern": 1, "junior": 1, "has": 4, "look": 3, "unit": 1, "typic": 1, "hack": 1, "similar": 1, "zscore": 1, "mess": 1, "mani": 1, "project": 3, "fail": 3, "pickl": 3, "set": 1, "list": 1, "solv": 1, "pleas": 1, "small": 1, "written": 1, "config": 1, "drive": 1, "extra": 1, "match": 1, "reproduc": 1, "date": 1, "chief": 2, "unawar": 1, "column": 1, "everyon": 1, "need": 3, "statist": 2, "modular": 1, "hurri": 1, "take": 1, "think": 1, "deliv": 2, "statement": 1, "dnumtjoin": 1, "like": 4, "asset": 1, "financ": 1, "numpi": 1, "wrong": 1, "get": 4, "controversi": 1, "back": 2, "xyz": 1, "sinc": 2, "etc": 2, "ingest": 1, "better": 3, "num": 23, "what": 3, "time": 1, "store": 3, "problem": 1, "again": 1, "cookiecutt": 1, "the": 11, "let": 2, "qualiti": 1, "deal": 1, "dump": 2, "say": 1, "scientist": 6, "shape": 1, "directori": 3, "then": 1, "exampl": 1, "between": 1, "without": 1, "come": 1, "start": 1, "probabl": 2, "test": 2, "access": 3, "even": 2, "cass": 1, "bank": 1, "here": 1, "join": 1, "\u251c\u2500\u2500": 5, "there": 1, "groupavg": 1, "jupyt": 3, "excess": 1, "school": 1, "lot": 5, "niemer": 2, "now": 2, "most": 3, "their": 2, "enough": 1, "linear": 2, "number": 1, "thing": 4, "commit": 1, "mix": 2, "talk": 1, "good": 3, "wordi": 1, "veri": 2, "debug": 1}, "logtfidf": {"sourc": 0.529218310751, "ingestpi": 6.89997509166, "background": 1.3931203261899998, "but": 0.1133466045033, "els": 3.3891914415400004, "chain": 1.64410864979, "dfnum": 6.89997509166, "anoth": 0.127896361652, "seem": 0.829093032276, "instead": 1.399899451245, "dnumtpip": 20.69992527498, "larg": 0.6815002424240001, "basic": 1.00436774895, "compress": 5.6364186233, "spyder": 6.5370695979699995, "from": 0.001134108337732, "abl": 0.599303982475, "where": 0.0649921387457, "def": 13.214116964519999, "retriev": 0.773925020223, "startup": 4.225826442240001, "flow": 1.4838746894600001, "iavg": 6.89997509166, "columbia": 1.6891237509, "outputpng": 6.89997509166, "pars": 4.9812159316699995, "abov": 0.643865229816, "organ": 0.9878410573399999, "should": 1.018839753516, "solut": 15.5346297627, "habit": 2.17424794314, "easi": 3.3330592702999997, "dag": 9.837947245599999, "senior": 1.38805958664, "statistician": 4.425539741740001, "all": 0.04561052839119999, "into": 0.0298257264574, "paramet": 2.8481901438599997, "miss": 1.2631785751200002, "invest": 1.42586787018, "this": 0.0037864490525, "and": 0.00157475355159, "experi": 0.626272953933, "yourself": 3.28064670051, "hardcod": 13.79995018332, "dftrain": 13.79995018332, "produc": 0.314320812003, "manual": 2.04501942341, "tempt": 7.75301212628, "ideal": 1.53809624363, "junk": 4.23884181035, "binari": 3.4781584227999995, "storag": 2.1544996326700003, "sometim": 0.538025155343, "promot": 0.7017504724920001, "share": 3.7125617984819996, "whi": 4.72275372188, "inaccess": 3.9522520373, "engin": 4.52383779138, "pro": 2.5416649836099996, "recipi": 2.30738368788, "pycharm": 6.89997509166, "financi": 0.958817483446, "airflow": 4.5192722194099995, "catch": 2.11092206831, "them": 0.3767333076372, "they": 0.1783619686056, "realli": 1.5576408397, "work": 0.218069134546, "valu": 1.646386620296, "when": 0.0411099777168, "frequent": 0.7443211360850001, "learn": 5.899264453215, "yike": 6.89997509166, "import": 0.878454831198, "dnumtstack": 6.89997509166, "scipi": 6.89997509166, "git": 35.33024507988, "forget": 2.8330873756700004, "comment": 1.11826753454, "first": 0.015174579624319999, "not": 0.0777620650375, "automat": 1.9150850473199998, "user": 2.04258810688, "more": 0.017024931599999998, "are": 0.35360968299240003, "later": 0.0829654259878, "littl": 0.438213989466, "especi": 0.511098609709, "some": 0.0395735090645, "who": 0.0609002329859, "same": 0.112059649604, "imagin": 1.88684291737, "lead": 0.47240805973399996, "relat": 0.42620060330799997, "panda": 18.866947025199998, "ani": 0.251216716732, "analysi": 2.4932182058400003, "week": 0.5907388641619999, "reporthtml": 6.89997509166, "notabl": 0.603441443842, "write": 2.886049759508, "see": 1.686451098444, "than": 0.0645217244364, "for": 0.005669827117146001, "save": 4.14395546188, "will": 0.6083596047450001, "model": 0.7374500731110001, "attempt": 0.38674498075099994, "decis": 1.5402164433919998, "databas": 2.10988256718, "upload": 4.35444382006, "stackoverflow": 6.89997509166, "document": 1.865094244766, "scale": 1.32095306328, "rank": 0.926165479794, "dnumtflow": 20.69992527498, "mistak": 6.494621208239999, "have": 0.1034950163884, "updat": 1.7164374626899999, "togeth": 0.458032237308, "topbottom": 6.89997509166, "output": 8.15290631308, "global": 1.1957760371200001, "client": 2.6488048591599997, "python": 8.06131348592, "make": 0.22049297346869998, "task": 2.71497361322, "control": 1.5399386463440001, "checklist": 4.91038987911, "just": 0.289531434109, "mention": 2.7952415590079998, "std": 11.442640190639999, "london": 0.6819976757709999, "add": 4.58626751139, "person": 0.34018281601800004, "want": 0.6916366062549999, "datacsv": 13.79995018332, "common": 1.014977415813, "datadriven": 6.89997509166, "imag": 0.99376210729, "csvs": 20.69992527498, "parquet": 13.79995018332, "booo": 6.89997509166, "data": 65.7083115792, "optim": 2.4456277954099996, "version": 2.789252257036, "file": 11.946112985069998, "break": 0.88733019029, "notebook": 11.081034147, "duplic": 2.98545520604, "reason": 1.088603105924, "bad": 7.332909937079999, "avg": 5.21821651765, "requir": 0.424253510675, "too": 0.5965551547219999, "origin": 0.128612437587, "use": 0.3212882170476, "equal": 0.933027391343, "that": 0.039761483796399995, "runpi": 6.89997509166, "doe": 0.5340417297169999, "indic": 0.7336385419149999, "well": 0.0635144383156, "univers": 0.222262105686, "csv": 6.83935046985, "rememb": 1.5867691126199999, "path": 7.6758399192499995, "thank": 1.7928938993, "onli": 0.025324268329099998, "otherdatacsv": 6.89997509166, "sever": 0.06991112039689999, "insight": 2.46841452187, "difficult": 0.912110767588, "snumwebgoogl": 6.89997509166, "caus": 0.325858567406, "dfg": 6.89997509166, "valuesd": 6.89997509166, "one": 0.0312767582275, "check": 5.6184314868600005, "vector": 6.50839775594, "poor": 0.8845804177050001, "tool": 3.21774235926, "machin": 4.17707874186, "scienc": 5.890053252237, "function": 6.401260191157999, "someon": 4.78907785998, "loop": 10.41416154928, "depend": 0.806969815, "might": 2.3050232296020003, "place": 0.0957070839572, "top": 0.609100637788, "both": 0.050842533389300004, "bio": 3.7456377879300002, "schema": 9.433473512599999, "referenc": 2.6461370052, "notic": 1.47474978168, "run": 1.770859902156, "slow": 1.39820680715, "boss": 2.66496319995, "templat": 3.7726664603199995, "categori": 1.38176946652, "return": 0.333126868592, "below": 0.813626591936, "norman": 3.9238209808, "can": 0.649364385576, "includ": 0.0188846813905, "after": 0.040981389296199995, "easili": 1.3066587367, "hold": 0.503879117196, "permiss": 1.8373800586400002, "chang": 0.49882687517400004, "format": 1.8574265037459998, "peopl": 0.579796735419, "dataset": 5.26584456664, "conclud": 1.1061995784799998, "while": 0.04324998379380001, "seri": 0.38193461069799994, "with": 0.01317240884729, "andor": 6.5370695979699995, "understand": 1.0880858756799998, "about": 0.1256869549492, "assert": 7.6495931398, "actual": 1.257028363296, "\u2514\u2500\u2500": 6.89997509166, "feel": 1.1428493419299999, "variabl": 2.1687230672, "busi": 0.720476170355, "code": 33.90047739925, "result": 0.272757816762, "softwar": 9.31396385332, "report": 0.6200350180740001, "base": 0.13652330228700002, "repost": 6.83935046985, "input": 2.50167533539, "other": 0.03949899167904, "manag": 0.497643387158, "altern": 0.760359972282, "junior": 1.92453528947, "has": 0.1708957794192, "look": 1.9391600808, "unit": 0.143188061817, "typic": 0.812774319158, "hack": 3.7699304805000002, "similar": 0.318556092114, "zscore": 6.89997509166, "mess": 3.54351360384, "mani": 0.0433157581221, "project": 1.684805657721, "fail": 1.969609834719, "pickl": 13.183347464009998, "set": 0.171496011289, "list": 0.309845761506, "solv": 1.9836504770400003, "pleas": 2.21149829955, "small": 0.307101805059, "written": 0.671587369833, "config": 6.89997509166, "drive": 1.07674430203, "extra": 1.67490068688, "match": 1.27190443874, "reproduc": 2.54006626224, "date": 0.489080896097, "chief": 1.766112054332, "unawar": 2.81820931165, "column": 1.95699427938, "everyon": 1.8557438481400002, "need": 1.088220490326, "statist": 2.8903766141400005, "modular": 3.91051243112, "hurri": 3.50504732301, "take": 0.130691962197, "think": 1.06717661175, "deliv": 2.44987017174, "statement": 1.2303097091500002, "dnumtjoin": 6.89997509166, "like": 0.55621430618, "asset": 2.1555865893, "financ": 1.44813224068, "numpi": 6.89997509166, "wrong": 1.70078769102, "get": 2.319076023128, "controversi": 0.9652462536299999, "back": 0.46333486179399996, "xyz": 5.74073818118, "sinc": 0.1607363989154, "etc": 2.8733461759400005, "ingest": 3.74830801649, "better": 2.0892838218, "num": 0.007244779094131001, "what": 0.677661890481, "time": 0.0112115188626, "store": 3.7123462005600008, "problem": 0.569140724273, "again": 0.411340231612, "cookiecutt": 6.89997509166, "the": 0.0, "let": 2.4976051345599997, "qualiti": 1.07600506711, "deal": 0.780914701253, "dump": 5.926518947280001, "say": 0.562154280552, "scientist": 9.278047706639999, "shape": 1.16420957115, "directori": 8.07746362002, "then": 0.08303386523089999, "exampl": 0.40868267499899996, "between": 0.033953681165299995, "without": 0.258874517941, "come": 0.28390990653000003, "start": 0.236443369291, "probabl": 1.945764825826, "test": 1.954448874206, "access": 1.883417648148, "even": 0.304777129668, "cass": 4.14313472639, "bank": 1.0557062993700002, "here": 0.8850381883700001, "join": 0.58348752942, "\u251c\u2500\u2500": 34.4998754583, "there": 0.0400978929255, "groupavg": 6.89997509166, "jupyt": 20.69992527498, "excess": 1.6692007552700001, "school": 0.494746633632, "lot": 7.417984751250001, "niemer": 13.79995018332, "now": 0.298185890042, "most": 0.06224368888679999, "their": 0.030721010245400002, "enough": 0.802884439169, "linear": 5.26055528392, "number": 0.0966085784186, "thing": 3.5127741387199998, "commit": 1.0598786410299998, "mix": 2.04868472016, "talk": 1.10867789449, "good": 1.2557682147209999, "wordi": 6.6280413761800006, "veri": 0.460319586476, "debug": 5.19522699942}}, "url": "https://www.kdnuggets.com/2019/04/top-10-coding-mistakes-data-scientists.html", "html": "<!DOCTYPE html>\n\n<html lang=\"en-US\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head profile=\"http://gmpg.org/xfn/11\">\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n<title>  Top 10 Coding Mistakes Made by Data Scientists</title>\n<link href=\"/wp-content/themes/kdn17/images/favicon.ico\" rel=\"shortcut icon\"/>\n<link href=\"/wp-content/themes/kdn17/style.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"/wp-content/themes/kdn17/js/jquery-1.9.1.min.js\" type=\"text/javascript\"></script>\n<script src=\"/aps/kda_all.js\" type=\"text/javascript\"></script>\n<link href=\"/feed/\" rel=\"alternate\" title=\"KDnuggets: Analytics, Big Data, Data Mining and Data Science Feed\" type=\"application/rss+xml\"/>\n<link href=\"//s.w.org\" rel=\"dns-prefetch\"/>\n<link href=\"https://www.kdnuggets.com/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/comments/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/2019/04/top-10-coding-mistakes-data-scientists.html/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Top 10 Coding Mistakes Made by Data Scientists Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-json/\" rel=\"https://api.w.org/\"/>\n<link href=\"https://www.kdnuggets.com/xmlrpc.php?rsd\" rel=\"EditURI\" title=\"RSD\" type=\"application/rsd+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-includes/wlwmanifest.xml\" rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\"/>\n<link href=\"https://www.kdnuggets.com/2019/04/paw-uber-case-study-machine-learning-enforce-mobile-performance.html\" rel=\"prev\" title=\"Uber\u2019s Case Study at PAW Industry 4.0: Machine Learning to Enforce Mobile Performance\"/>\n<link href=\"https://www.kdnuggets.com/jobs/19/04-02-yeshiva-university-program-director-faculty-artificial-intelligence-machine-learning.html\" rel=\"next\" title=\"Yeshiva University: Program Director / Tenure Track Faculty Member of Artificial Intelligence and Machine Learning [New York, NY]\"/>\n<meta content=\"WordPress 4.9.10\" name=\"generator\">\n<link href=\"https://www.kdnuggets.com/2019/04/top-10-coding-mistakes-data-scientists.html\" rel=\"canonical\"/>\n<link href=\"https://www.kdnuggets.com/?p=91611\" rel=\"shortlink\"/>\n<link href=\"https://www.kdnuggets.com/2019/04/top-10-coding-mistakes-data-scientists.html\" rel=\"canonical\"/>\n<!-- BEGIN ExactMetrics v5.3.7 Universal Analytics - https://exactmetrics.com/ -->\n<script>\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-361129-1', 'auto');\n  ga('send', 'pageview');\n</script>\n<!-- END ExactMetrics Universal Analytics -->\n</meta></head>\n<body class=\"post-template-default single single-post postid-91611 single-format-standard\">\n<div class=\"main_wrapper\"><!-- publ: 2-Apr, 2019  -->\n<div id=\"wrapper\">\n<div id=\"header\">\n<div id=\"header_log\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<h1>KDnuggets</h1>\n<div class=\"text-container\">\n            \u00a0\u00a0<a href=\"/news/subscribe.html\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a> \u00a0|\n <a href=\"https://twitter.com/kdnuggets\" target=\"_blank\"><img alt=\"Twitter\" height=\"48\" src=\"/images/tw_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n <a href=\"https://www.facebook.com/kdnuggets\" target=\"_blank\"><img alt=\"Facebook\" height=\"48\" src=\"/images/fb_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n<a href=\"https://www.linkedin.com/groups/54257/\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"48\" src=\"/images/in_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \n\u00a0|\u00a0 <a href=\"/contact.html\"><b>Contact</b></a>\n</div>\n</div>\n<div class=\"search\">\n<form action=\"/\" id=\"searchform\" method=\"get\">\n<input id=\"s\" name=\"s\" placeholder=\"search KDnuggets\" type=\"text\" value=\"\"/>\n<input type=\"submit\" value=\"Search\"/></form>\n</div>\n<div href=\"#\" id=\"pull\">\n<img class=\"menu\" src=\"/images/menu-30.png\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<img class=\"search-icon\" src=\"/images/search-icon.png\">\n</img></img></div>\n<div id=\"pull-menu\">\n<div class=\"navigation\"><ul class=\"menu\" id=\"menu-menu\"><li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-1070\" id=\"menu-item-1070\"><a href=\"/software/index.html\" title=\"Data Science Software\">SOFTWARE</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13756\" id=\"menu-item-13756\"><a href=\"/news/index.html\" title=\"News\">News/Blog</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-46286\" id=\"menu-item-46286\"><a href=\"/news/top-stories.html\">Top stories</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-42152\" id=\"menu-item-42152\"><a href=\"https://www.kdnuggets.com/opinions/index.html\" title=\"Opinions\">Opinions</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-46415\" id=\"menu-item-46415\"><a href=\"https://www.kdnuggets.com/tutorials/index.html\">Tutorials</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13364\" id=\"menu-item-13364\"><a href=\"/jobs/index.html\" title=\"Jobs in Analytics, Data Science\">JOBS</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-63505\" id=\"menu-item-63505\"><a href=\"https://www.kdnuggets.com/companies/index.html\">Companies</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13366\" id=\"menu-item-13366\"><a href=\"/courses/index.html\">Courses</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-1499\" id=\"menu-item-1499\"><a href=\"https://www.kdnuggets.com/datasets/index.html\">Datasets</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-14286\" id=\"menu-item-14286\"><a href=\"https://www.kdnuggets.com/education/index.html\" title=\"Education in Analytics, Big Data, Data Science\">EDUCATION</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-51558\" id=\"menu-item-51558\"><a href=\"https://www.kdnuggets.com/education/analytics-data-mining-certificates.html\" title=\"Certificates in Analytics, Big Data, Data Science\">Certificates</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-14752\" id=\"menu-item-14752\"><a href=\"/meetings/index.html\">Meetings</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13721\" id=\"menu-item-13721\"><a href=\"/webcasts/index.html\" title=\"Webcasts and Webinars\">Webinars</a></li>\n</ul></div></div>\n</div> <!--#header end-->\n<div id=\"spacer\">\n         \u00a0\n      </div>\n<div id=\"content_wrapper\">\n<div id=\"ad_wrapper\">\n<script type=\"text/javascript\">\n\tjQuery(function() {\n   \t    var pull        = $('#pull');\n            menu        = $('#header .navigation ul');\n            menuImage = $('#header img.menu');\n            mobileMenu        = $('#pull-menu-mobile');\n            search = $('img.search-icon');\n            searchBar = $('div.search');\n            searchClick = false;\n            search.on('click', function() {\n                  searchBar.slideToggle();\n                  searchClick = true;\n            });  \n     \t    $(menuImage).on('click', function(e) {\n\t        //e.preventDefault();\n                if (!searchClick) {\n                  menu.slideToggle();\n                }\n                searchClick = false;\n\t    });\n           /* pullMobile.on('click', function(e) {\n              e.preventDefault();\n                if (!searchClick) {\n                  mobileMenu.slideToggle();\n                }\n                searchClick = false;\n\t    });*/\n            \n\t});\n\tkpath = '/'; kda_top(); kda_sid_init(); kda_sid_n=3;\n\t</script>\n</div> <div class=\"breadcumb\">\n<br/>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2019/index.html\">2019</a> \u00bb <a href=\"https://www.kdnuggets.com/2019/04/index.html\">Apr</a> \u00bb <a href=\"https://www.kdnuggets.com/2019/04/opinions.html\">Opinions</a> \u00bb Top 10 Coding Mistakes Made by Data Scientists (\u00a0<a href=\"/2019/n13.html\">19:n13</a>\u00a0)    </div>\n<div class=\"single\" id=\"content\">\n<div id=\"post-header\">\n<h1 id=\"title\"><img align=\"right\" alt=\"Gold Blog\" src=\"/images/tkb-1904-g.png\" width=\"94\"/>Top 10 Coding Mistakes Made by Data Scientists</h1>\n<div class=\"pagi\">\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2019/04/paw-uber-case-study-machine-learning-enforce-mobile-performance.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"> <strong>Previous post</strong></img></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/jobs/19/04-02-yeshiva-university-program-director-faculty-artificial-intelligence-machine-learning.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/>\u00a0<br/>\u00a0\n    <div class=\"addthis_native_toolbox\"></div>\n</div>\n<div class=\"tag-data\">Tags: <a href=\"https://www.kdnuggets.com/tag/data-science\" rel=\"tag\">Data Science</a>, <a href=\"https://www.kdnuggets.com/tag/data-scientist\" rel=\"tag\">Data Scientist</a>, <a href=\"https://www.kdnuggets.com/tag/mistakes\" rel=\"tag\">Mistakes</a>, <a href=\"https://www.kdnuggets.com/tag/programming\" rel=\"tag\">Programming</a></div>\n<br/>\n<p class=\"excerpt\">\n     Here is a list of 10 common mistakes that a senior data scientist \u2014 who is ranked in the top 1% on Stackoverflow for python coding and who works with a lot of (junior) data scientists \u2014 frequently sees.\n  </p>\n</div>\n<div id=\"post-header-ad\">\n<script type=\"text/javascript\">kda_sid_write(1); kda_sid_n=2;</script>\n</div>\n<hr class=\"grey-line\"/><br/>\n<div class=\"post\" id=\"post-\">\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p><b>By <a href=\"https://www.linkedin.com/in/normanniemer/\" rel=\"noopener noreferrer\" target=\"_blank\">Norman Niemer</a>, Chief Data Scientist</b></p>\n<p>A data scientist is a \"person who is better at statistics than any software engineer and better at software engineering than any statistician\". Many data scientists have a statistics background and little experience with software engineering. I'm a senior data scientist ranked top 1% on Stackoverflow for python coding and work with a lot of (junior) data scientists. Here is my list of 10 common mistakes I frequently see.</p>\n<p><img alt=\"Header image\" class=\"aligncenter\" src=\"https://i.ibb.co/BfMTHtk/some-complicated-function.jpg\" width=\"99%\"/></p>\n<p>\u00a0</p>\n<h3><a aria-hidden=\"true\" href=\"https://github.com/d6t/d6t-python/blob/master/blogs/top10-mistakes-coding.md#1-dont-share-data-referenced-in-code\" rel=\"noopener noreferrer\" target=\"_blank\"></a>1. Don't share data referenced in code</h3>\n<p>\u00a0<br>\nData science needs code AND data. So for someone else to be able to reproduce your results, they need to have access to the data. Seems basic but a lot of people forget to share the data with their code.</br></p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>import pandas as pd\r\ndf1 = pd.read_csv('file-i-dont-have.csv') # fails\r\ndo_stuff(df)\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><strong>Solution</strong>: Use\u00a0<a href=\"https://github.com/d6t/d6tpipe\" rel=\"noopener noreferrer\" target=\"_blank\">d6tpipe</a>\u00a0to share data files with your code or upload to S3/web/google drive etc or save to a database so the recipient can retrieve files (but don't add them to git, see below).</p>\n<p>\u00a0</p>\n<h3><a aria-hidden=\"true\" href=\"https://github.com/d6t/d6t-python/blob/master/blogs/top10-mistakes-coding.md#2-hardcode-inaccessible-paths\" rel=\"noopener noreferrer\" target=\"_blank\"></a>2. Hardcode inaccessible paths</h3>\n<p>\u00a0<br>\nSimilar to mistake 1, if you hardcode paths others don't have access to, they can't run your code and have to look in lots of places to manually change paths. Booo!</br></p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>import pandas as pd\r\ndf = pd.read_csv('/path/i-dont/have/data.csv') # fails\r\ndo_stuff(df)\r\n\r\n# or \r\nimport os\r\nos.chdir('c:\\\\Users\\\\yourname\\\\desktop\\\\python') # fails\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><strong>Solution</strong>: Use relative paths, global path config variables or\u00a0<a href=\"https://github.com/d6t/d6tpipe\" rel=\"noopener noreferrer\" target=\"_blank\">d6tpipe</a>\u00a0to make your data easily accessible.</p>\n<p>\u00a0</p>\n<h3><a aria-hidden=\"true\" href=\"https://github.com/d6t/d6t-python/blob/master/blogs/top10-mistakes-coding.md#3-mix-data-with-code\" rel=\"noopener noreferrer\" target=\"_blank\"></a>3. Mix data with code</h3>\n<p>\u00a0<br/>\nSince data science code needs data why not dump it in the same directory? And while you are at it, save images, reports and other junk there too. Yikes, what a mess!</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\u251c\u2500\u2500 data.csv\r\n\u251c\u2500\u2500 ingest.py\r\n\u251c\u2500\u2500 other-data.csv\r\n\u251c\u2500\u2500 output.png\r\n\u251c\u2500\u2500 report.html\r\n\u2514\u2500\u2500 run.py\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><strong>Solution</strong>: Organize your directory into categories, like data, reports, code etc. See <a href=\"https://drivendata.github.io/cookiecutter-data-science/#directory-structure\" rel=\"noopener\" target=\"_blank\">Cookiecutter Data Science</a> or <a href=\"https://github.com/d6t/d6tflow-template\" rel=\"noopener\" target=\"_blank\">d6tflow project templates</a> (see #5) and use tools mentioned in #1 to store and share data.</p>\n<p>\u00a0</p>\n<h3><a aria-hidden=\"true\" href=\"https://github.com/d6t/d6t-python/blob/master/blogs/top10-mistakes-coding.md#4-git-commit-data-with-source-code\" rel=\"noopener noreferrer\" target=\"_blank\"></a>4. Git commit data with source code</h3>\n<p>\u00a0<br/>\nMost people now version control their code (if you don't that's another mistake!! See\u00a0<a href=\"https://git-scm.com/\" rel=\"noopener noreferrer\" target=\"_blank\">git</a>). In an attempt to share data, it might be tempting to add data files to version control. That's ok for very small files but git is not optimized for data, especially large files.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>git add data.csv</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><strong>Solution</strong>: Use tools mentioned in #1 to store and share data. If you really want to version control data, see\u00a0<a href=\"https://github.com/d6t/d6tpipe\" rel=\"noopener noreferrer\" target=\"_blank\">d6tpipe</a>,\u00a0<a href=\"https://dvc.org/\" rel=\"noopener noreferrer\" target=\"_blank\">DVC</a>\u00a0and\u00a0<a href=\"https://git-lfs.github.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Git Large File Storage</a>.</p>\n<p>\u00a0</p>\n<h3><a aria-hidden=\"true\" href=\"https://github.com/d6t/d6t-python/blob/master/blogs/top10-mistakes-coding.md#5-write-functions-instead-of-dags\" rel=\"noopener noreferrer\" target=\"_blank\"></a>5. Write functions instead of DAGs</h3>\n<p>\u00a0<br/>\nEnough about data, lets talk about the actual code! Since one of the first things you learn when you learn to code are functions, data science code is mostly organized as a series of functions that are run linearly. That causes several problems, see\u00a0<a href=\"https://github.com/d6t/d6t-python/blob/master/blogs/reasons-why-bad-ml-code.rst\" rel=\"noopener noreferrer\" target=\"_blank\">4 Reasons Why Your Machine Learning Code is Probably Bad</a>.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>def process_data(data, parameter):\r\n    data = do_stuff(data)\r\n    data.to_pickle('data.pkl')\r\n\r\ndata = pd.read_csv('data.csv')\r\nprocess_data(data)\r\ndf_train = pd.read_pickle(df_train)\r\nmodel = sklearn.svm.SVC()\r\nmodel.fit(df_train.iloc[:,:-1], df_train['y'])\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><strong>Solution</strong>: Instead of linearly chaining functions, data science code is better written as a set of tasks with dependencies between them. Use\u00a0<a href=\"https://github.com/d6t/d6tflow\" rel=\"noopener noreferrer\" target=\"_blank\">d6tflow</a>\u00a0or\u00a0<a href=\"https://airflow.apache.org/\" rel=\"noopener noreferrer\" target=\"_blank\">airflow</a>.</p>\n<p>\u00a0</p>\n<h3><a aria-hidden=\"true\" href=\"https://github.com/d6t/d6t-python/blob/master/blogs/top10-mistakes-coding.md#6-write-for-loops\" rel=\"noopener noreferrer\" target=\"_blank\"></a>6. Write for loops</h3>\n<p>\u00a0<br/>\nLike functions, for loops are the first thing you learn when you learn to code. Easy to understand, but they are slow and excessively wordy, typically indicating you are unaware of vectorized alternatives.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>x = range(10)\r\navg = sum(x)/len(x); std = math.sqrt(sum((i-avg)**2 for i in x)/len(x));\r\nzscore = [(i-avg)/std for x]\r\n# should be: scipy.stats.zscore(x)\r\n\r\n# or\r\ngroupavg = []\r\nfor i in df['g'].unique():\r\n\tdfg = df[df[g']==i]\r\n\tgroupavg.append(dfg['g'].mean())\r\n# should be: df.groupby('g').mean()\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><strong>Solution</strong>:\u00a0<a href=\"http://www.numpy.org/\" rel=\"noopener noreferrer\" target=\"_blank\">Numpy</a>,\u00a0<a href=\"https://www.scipy.org/\" rel=\"noopener noreferrer\" target=\"_blank\">scipy</a>\u00a0and\u00a0<a href=\"https://pandas.pydata.org/\" rel=\"noopener noreferrer\" target=\"_blank\">pandas</a>\u00a0have vectorized functions for most things that you think might require for loops.</p>\n<p>\u00a0</p>\n<h3><a aria-hidden=\"true\" href=\"https://github.com/d6t/d6t-python/blob/master/blogs/top10-mistakes-coding.md#7-dont-write-unit-tests\" rel=\"noopener noreferrer\" target=\"_blank\"></a>7. Don't write unit tests</h3>\n<p>\u00a0<br/>\nAs data, parameters or user input change, your code might break, sometimes without you noticing. That can lead to bad output and if someone makes decisions based on your output, bad data will lead to bad decisions!</p>\n<p><strong>Solution</strong>: Use\u00a0<code>assert</code>\u00a0statements to check for data quality.\u00a0<a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/general_utility_functions.html#testing-functions\" rel=\"noopener noreferrer\" target=\"_blank\">pandas</a>\u00a0has equality tests,\u00a0<a href=\"https://github.com/d6t/d6tstack\" rel=\"noopener noreferrer\" target=\"_blank\">d6tstack</a>\u00a0has checks for data ingestion and\u00a0<a href=\"https://github.com/d6t/d6tjoin/blob/master/examples-prejoin.ipynb\" rel=\"noopener noreferrer\" target=\"_blank\">d6tjoin</a>\u00a0for data joins. Code for example data checks:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>assert df['id'].unique().shape[0] == len(ids) # have data for all ids?\r\nassert df.isna().sum()&lt;0.9 # catch missing values\r\nassert df.groupby(['g','date']).size().max() ==1 # no duplicate values/date?\r\nassert d6tjoin.utils.PreJoin([df1,df2],['id','date']).is_all_matched() # all ids matched?\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>\u00a0</p>\n<h3><a aria-hidden=\"true\" href=\"https://github.com/d6t/d6t-python/blob/master/blogs/top10-mistakes-coding.md#8-dont-document-code\" rel=\"noopener noreferrer\" target=\"_blank\"></a>8. Don't document code</h3>\n<p>\u00a0<br/>\nI get it, you're in a hurry to produce some analysis. You hack things together to get results to your client or boss. Then a week later they come back and say \"can you change xyz\" or \"can you update this please\". You look at your code and can't remember why you did what you did. And now imagine someone else has to run it.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>def some_complicated_function(data):\r\n\tdata = data[data['column']!='wrong']\r\n\tdata = data.groupby('date').apply(lambda x: complicated_stuff(x))\r\n\tdata = data[data['value']&lt;0.9]\r\n\treturn data\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><strong>Solution</strong>: Take the extra time, even if it's after you've delivered the analysis, to document what you did. You will thank yourself and other will do so even more! You'll look like a pro!</p>\n<p>\u00a0</p>\n<h3><a aria-hidden=\"true\" href=\"https://github.com/d6t/d6t-python/blob/master/blogs/top10-mistakes-coding.md#9-save-data-as-csv-or-pickle\" rel=\"noopener noreferrer\" target=\"_blank\"></a>9. Save data as csv or pickle</h3>\n<p>\u00a0<br/>\nBack data, it's DATA science after all. Just like functions and for loops, CSVs and pickle files are commonly used but they are actually not very good. CSVs don't include a schema so everyone has to parse numbers and dates again. Pickles solve that but only work in python and are not compressed. Both are not good formats to store large datasets.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>def process_data(data, parameter):\r\n    data = do_stuff(data)\r\n    data.to_pickle('data.pkl')\r\n\r\ndata = pd.read_csv('data.csv')\r\nprocess_data(data)\r\ndf_train = pd.read_pickle(df_train)\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><strong>Solution</strong>: Use\u00a0<a href=\"https://github.com/dask/fastparquet\" rel=\"noopener noreferrer\" target=\"_blank\">parquet</a>\u00a0or other binary data formats with data schemas, ideally ones that compress data.\u00a0<a href=\"https://github.com/d6t/d6tflow\" rel=\"noopener noreferrer\" target=\"_blank\">d6tflow</a>automatically saves data output of tasks as parquet so you don't have to deal with it.</p>\n<p>\u00a0</p>\n<h3><a aria-hidden=\"true\" href=\"https://github.com/d6t/d6t-python/blob/master/blogs/top10-mistakes-coding.md#10-use-jupyter-notebooks\" rel=\"noopener noreferrer\" target=\"_blank\"></a>10. Use jupyter notebooks</h3>\n<p>\u00a0<br/>\nLets conclude with a controversial one: jupyter notebooks are as common as CSVs. A lot of people use them. That doesn't make them good. Jupyter notebooks promote a lot of bad software engineering habits mentioned above, notably:</p>\n<ol>\n<li>You are tempted to dump all files into one directory\n<li>You write code that runs top-bottom instead of DAGs\n<li>You don't modularize your code\n<li>Difficult to debug\n<li>Code and output gets mixed in one file\n<li>They don't version control well\n</li></li></li></li></li></li></ol>\n<p>It feels easy to get started but scales poorly.</p>\n<p><strong>Solution</strong>: Use\u00a0<a href=\"https://www.jetbrains.com/pycharm/\" rel=\"noopener noreferrer\" target=\"_blank\">pycharm</a>\u00a0and/or\u00a0<a href=\"https://www.spyder-ide.org/\" rel=\"noopener noreferrer\" target=\"_blank\">spyder</a>.</p>\n<p>\u00a0<br/>\n<b>Bio: <a href=\"https://www.linkedin.com/in/normanniemer/\" rel=\"noopener noreferrer\" target=\"_blank\">Norman Niemer</a></b> is the Chief Data Scientist at a large asset manager where he delivers data-driven investment insights. He holds a MS Financial Engineering from Columbia University and a BS in Banking and Finance from Cass Business School (London).</p>\n<p><a href=\"https://github.com/d6t/d6t-python/blob/master/blogs/top10-mistakes-coding.md\" rel=\"noopener noreferrer\" target=\"_blank\">Original</a>. Reposted with permission.</p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2019/02/4-reasons-machine-learning-code-probably-bad.html\">4 Reasons Why Your Machine Learning Code is Probably Bad</a>\n<li><a href=\"/2018/12/machine-learning-project-checklist.html\">The Machine Learning Project Checklist</a>\n<li><a href=\"/2019/01/data-science-project-flow-startups.html\">Data Science Project Flow for Startups</a>\n</li></li></li></ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p> <script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets';\n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div>\n<div class=\"page-link\"></div>\n<div class=\"pagi\">\n<hr class=\"grey-line\"/>\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2019/04/paw-uber-case-study-machine-learning-enforce-mobile-performance.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"/> <strong>Previous post</strong></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/jobs/19/04-02-yeshiva-university-program-director-faculty-artificial-intelligence-machine-learning.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/><br/>\n<div>\n<hr class=\"grey-line\"/><br/>\n<h2>Top Stories Past 30 Days</h2>\n<table align=\"center\" cellpadding=\"3\" cellspacing=\"10\" class=\"latn\" width=\"100%\">\n<tr>\n<td valign=\"top\" width=\"50%\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Popular</b></th></tr>\n<tr><td>\n<ol class=\"three_ol\"><li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-mp-1-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/03/another-10-free-must-read-books-for-machine-learning-and-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-mp-2-another-10-books');\"><b>Another 10 Free Must-Read Books for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-mp-3-good-from-bad');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n<li> <a href=\"/2018/05/simplilearn-9-must-have-skills-data-scientist.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-mp-4-simplilearn');\"><b>9 Must-have skills you need to become a Data Scientist, updated</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-mp-5-intro-ts');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/03/random-forest-python.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-mp-6-explain-rf');\"><b>Explaining Random Forest (with Python Implementation)</b></a>\n<li> <a href=\"/2019/04/predict-age-gender-using-convolutional-neural-network-opencv.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-mp-7-age-gender');\"><b>Predict Age and Gender Using Convolutional Neural Network and OpenCV</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td> <td valign=\"top\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Shared</b></th></tr>\n<tr><td><ol class=\"three_ol\">\n<li> <a href=\"/2019/03/artificial-neural-networks-optimization-genetic-algorithm-python.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-ms-1-optimization-ga');\"><b>Artificial Neural Networks Optimization using Genetic Algorithm with Python</b></a>\n<li> <a href=\"/2019/04/another-10-free-must-see-courses-machine-learning-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-ms-2-another-10-courses');\"><b>Another 10 Free Must-See Courses for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-ms-3-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/03/r-vs-python-data-visualization.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-ms-4-r-py-viz');\"><b>R vs Python for Data Visualization</b></a>\n<li> <a href=\"/2019/03/simplilearn-8-reasons-microsoft-azure-certification.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-ms-5-azure-cert');\"><b>8 Reasons Why You Should Get a Microsoft Azure Certification</b></a>\n<li> <a href=\"/2019/03/deep-learning-toolset-overview.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-ms-6-dl-toolset');\"><b>The Deep Learning Toolset \u2014 An Overview</b></a>\n<li> <a href=\"/2019/03/work-data-science-ai-big-data.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-16-ms-7-how-work');\"><b>How To Work In Data Science, AI, Big Data</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<!--#content end--></div>\n<div id=\"sidebar\">\n<div class=\"latn\">\n<h3><b><a href=\"/news/index.html\">Latest News</a></b></h3>\n<ul style=\"font-size:14px; margin-top:5px\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/paw-data-driven-government-workshops-announced.html\">Data Driven Government Workshops Announced!</a><li> <a href=\"https://www.kdnuggets.com/2019/04/rise-generative-adversarial-networks.html\">The Rise of Generative Adversarial Networks</a><li> <a href=\"https://www.kdnuggets.com/jobs/19/04-19-nasdaq100-leader-data-science.html\">NASDAQ 100: Leader of Data Science [East Coast]</a><li> <a href=\"https://www.kdnuggets.com/2019/04/data-visualization-python-matplotlib-seaborn.html\">Data Visualization in Python: Matplotlib vs Seaborn</a><li> <a href=\"https://www.kdnuggets.com/2019/04/intel-unleash-faster-python-data.html\">Unleash a faster Python on your data</a><li> <a href=\"https://www.kdnuggets.com/2019/04/sisense-blox-beyond-dashboards.html\">Sisense BloX \u2013 Go Beyond Dashboards</a></li></li></li></li></li></li></ul>\n</div>\n<div>\n<script type=\"text/javascript\">kda_sid_write(kda_sid_n);</script>\n</div>\n<br/><script src=\"/aps/sbm.js\" type=\"text/javascript\"></script>\n</div>\n</div><div class=\"breadcrumbs_bottom\">\n<div class=\"breadcumb\">\n<br>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2019/index.html\">2019</a> \u00bb <a href=\"https://www.kdnuggets.com/2019/04/index.html\">Apr</a> \u00bb <a href=\"https://www.kdnuggets.com/2019/04/opinions.html\">Opinions</a> \u00bb Top 10 Coding Mistakes Made by Data Scientists (\u00a0<a href=\"/2019/n13.html\">19:n13</a>\u00a0)    </br></div>\n</div>\n<!--#content_wrapper end--></div>\n<br>\n<div id=\"footer\">\n<br/>\u00a9 2019 KDnuggets. <a href=\"/about/index.html\">About KDnuggets</a>. \u00a0<a href=\"/news/privacy-policy.html\">Privacy policy</a>. <a href=\"/terms-of-service.html\">Terms of Service</a><br/>\u00a0\n<div class=\"kd_bottom\">\n<div class=\"footer-container\">\n<div class=\"footer-news\">\n<a href=\"/news/subscribe.html\" onclick=\"_gaq.push(['_trackPageview','/x/bot/sub']);\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a>\n</div>\n<div class=\"footer-sm\">\n<a href=\"https://twitter.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/twt']);\" target=\"_blank\"><img height=\"32\" src=\"/images/tw_c48.png\" width=\"32\"/></a>\n<a href=\"https://facebook.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/fb']);\" target=\"_blank\"><img alt=\"Facebook\" height=\"32\" src=\"/images/fb_c48.png\" width=\"32\"/></a>\n<a href=\"https://www.linkedin.com/groups/54257\" onclick=\"_gaq.push(['_trackPageview','/x/bot/in']);\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"32\" src=\"/images/in_c48.png\" width=\"32\"/></a>\n</div>\n</div>\n<div class=\"close-footer\">X</div>\n</div>\n<script type=\"text/javascript\">\n  jQuery('.close-footer').click(\n      function(){       \n         jQuery('.kd_bottom').hide();\n      }\n   );\n</script> </div>\n<div class=\"clear\"><!--blank--></div>\n</br></div>\n<div style=\"display: none;\"><div id=\"boxzilla-box-82996-content\"><script type=\"text/javascript\">(function() {\n\tif (!window.mc4wp) {\n\t\twindow.mc4wp = {\n\t\t\tlisteners: [],\n\t\t\tforms    : {\n\t\t\t\ton: function (event, callback) {\n\t\t\t\t\twindow.mc4wp.listeners.push({\n\t\t\t\t\t\tevent   : event,\n\t\t\t\t\t\tcallback: callback\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})();\n</script><!-- MailChimp for WordPress v4.1.14 - https://wordpress.org/plugins/mailchimp-for-wp/ --><form class=\"mc4wp-form mc4wp-form-77281\" data-id=\"77281\" data-name=\"Subscribe to KDnuggets News\" id=\"mc4wp-form-1\" method=\"post\"><div class=\"mc4wp-form-fields\"><div class=\"header-container\">\n<img align=\"left\" src=\"/wp-content/uploads/envelope.png\"><a href=\"/news/subscribe.html\">Get KDnuggets, a leading newsletter on AI, \r\n  Data Science, and Machine Learning</a>\n</img></div>\n<div class=\"form-fields\">\n<div class=\"field-container\"><label>Email:</label><input maxlength=\"60\" name=\"EMAIL\" placeholder=\"Your email\" required=\"\" size=\"30\" type=\"email\"/></div>\n<div class=\"field-container submit-container\"><div class=\"form-button\" onclick=\"document.getElementById('mc4wp-form-1').submit()\">Sign Up</div></div>\n</div>\n<label style=\"display: none !important;\">Leave this field empty if you're human: <input autocomplete=\"off\" name=\"_mc4wp_honeypot\" tabindex=\"-1\" type=\"text\" value=\"\"/></label><input name=\"_mc4wp_timestamp\" type=\"hidden\" value=\"1555891438\"/><input name=\"_mc4wp_form_id\" type=\"hidden\" value=\"77281\"/><input name=\"_mc4wp_form_element_id\" type=\"hidden\" value=\"mc4wp-form-1\"/></div><div class=\"mc4wp-response\"></div></form><!-- / MailChimp for WordPress Plugin -->\n</div></div><script type=\"text/javascript\">(function() {function addEventListener(element,event,handler) {\n\tif(element.addEventListener) {\n\t\telement.addEventListener(event,handler, false);\n\t} else if(element.attachEvent){\n\t\telement.attachEvent('on'+event,handler);\n\t}\n}function maybePrefixUrlField() {\n\tif(this.value.trim() !== '' && this.value.indexOf('http') !== 0) {\n\t\tthis.value = \"http://\" + this.value;\n\t}\n}\n\nvar urlFields = document.querySelectorAll('.mc4wp-form input[type=\"url\"]');\nif( urlFields && urlFields.length > 0 ) {\n\tfor( var j=0; j < urlFields.length; j++ ) {\n\t\taddEventListener(urlFields[j],'blur',maybePrefixUrlField);\n\t}\n}/* test if browser supports date fields */\nvar testInput = document.createElement('input');\ntestInput.setAttribute('type', 'date');\nif( testInput.type !== 'date') {\n\n\t/* add placeholder & pattern to all date fields */\n\tvar dateFields = document.querySelectorAll('.mc4wp-form input[type=\"date\"]');\n\tfor(var i=0; i<dateFields.length; i++) {\n\t\tif(!dateFields[i].placeholder) {\n\t\t\tdateFields[i].placeholder = 'YYYY-MM-DD';\n\t\t}\n\t\tif(!dateFields[i].pattern) {\n\t\t\tdateFields[i].pattern = '[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])';\n\t\t}\n\t}\n}\n\n})();</script><script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_options = {\"testMode\":\"\",\"boxes\":[{\"id\":82996,\"icon\":\"&times;\",\"content\":\"\",\"css\":{\"background_color\":\"#eeee22\",\"width\":600,\"border_width\":2,\"border_style\":\"double\",\"position\":\"center\"},\"trigger\":{\"method\":\"time_on_page\",\"value\":\"3\"},\"animation\":\"fade\",\"cookie\":{\"triggered\":0,\"dismissed\":336},\"rehide\":true,\"position\":\"center\",\"screenWidthCondition\":{\"condition\":\"larger\",\"value\":500},\"closable\":true,\"post\":{\"id\":82996,\"title\":\"Subscribe to KDnuggets\",\"slug\":\"subscribe-to-kdnuggets\"}}]};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla/assets/js/script.min.js?ver=3.2.5\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_stats_config = {\"ajaxurl\":\"https:\\/\\/www.kdnuggets.com\\/wp-admin\\/admin-ajax.php?action=boxzilla_stats_track\"};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla-stats/assets/js/tracking.min.js?ver=1.0.4\" type=\"text/javascript\"></script>\n<script src=\"https://www.kdnuggets.com/wp-includes/js/wp-embed.min.js?ver=4.9.10\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar mc4wp_forms_config = [];\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/forms-api.min.js?ver=4.1.14\" type=\"text/javascript\"></script>\n<!--[if lte IE 9]>\n<script type='text/javascript' src='https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/third-party/placeholders.min.js?ver=4.1.14'></script>\n<![endif]-->\n<!--/.main_wrapper--></body></html>\n<script src=\"https://s7.addthis.com/js/300/addthis_widget.js#pubid=gpsaddthis\" type=\"text/javascript\"></script>\n\n\n<!-- Dynamic page generated in 0.610 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2019-04-21 20:03:58 -->\n<!-- Compression = gzip -->", "content_html": "<div class=\"post\" id=\"post-\">\n<div align=\"right\"><img alt=\"c\" height=\"12\" src=\"/images/comment.gif\" width=\"16\"/> <a href=\"#comments\">comments</a></div>\n<p><b>By <a href=\"https://www.linkedin.com/in/normanniemer/\" rel=\"noopener noreferrer\" target=\"_blank\">Norman Niemer</a>, Chief Data Scientist</b></p>\n<p>A data scientist is a \"person who is better at statistics than any software engineer and better at software engineering than any statistician\". Many data scientists have a statistics background and little experience with software engineering. I'm a senior data scientist ranked top 1% on Stackoverflow for python coding and work with a lot of (junior) data scientists. Here is my list of 10 common mistakes I frequently see.</p>\n<p><img alt=\"Header image\" class=\"aligncenter\" src=\"https://i.ibb.co/BfMTHtk/some-complicated-function.jpg\" width=\"99%\"/></p>\n<p>\u00a0</p>\n<h3><a aria-hidden=\"true\" href=\"https://github.com/d6t/d6t-python/blob/master/blogs/top10-mistakes-coding.md#1-dont-share-data-referenced-in-code\" rel=\"noopener noreferrer\" target=\"_blank\"></a>1. Don't share data referenced in code</h3>\n<p>\u00a0<br>\nData science needs code AND data. So for someone else to be able to reproduce your results, they need to have access to the data. Seems basic but a lot of people forget to share the data with their code.</br></p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>import pandas as pd\r\ndf1 = pd.read_csv('file-i-dont-have.csv') # fails\r\ndo_stuff(df)\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><strong>Solution</strong>: Use\u00a0<a href=\"https://github.com/d6t/d6tpipe\" rel=\"noopener noreferrer\" target=\"_blank\">d6tpipe</a>\u00a0to share data files with your code or upload to S3/web/google drive etc or save to a database so the recipient can retrieve files (but don't add them to git, see below).</p>\n<p>\u00a0</p>\n<h3><a aria-hidden=\"true\" href=\"https://github.com/d6t/d6t-python/blob/master/blogs/top10-mistakes-coding.md#2-hardcode-inaccessible-paths\" rel=\"noopener noreferrer\" target=\"_blank\"></a>2. Hardcode inaccessible paths</h3>\n<p>\u00a0<br>\nSimilar to mistake 1, if you hardcode paths others don't have access to, they can't run your code and have to look in lots of places to manually change paths. Booo!</br></p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>import pandas as pd\r\ndf = pd.read_csv('/path/i-dont/have/data.csv') # fails\r\ndo_stuff(df)\r\n\r\n# or \r\nimport os\r\nos.chdir('c:\\\\Users\\\\yourname\\\\desktop\\\\python') # fails\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><strong>Solution</strong>: Use relative paths, global path config variables or\u00a0<a href=\"https://github.com/d6t/d6tpipe\" rel=\"noopener noreferrer\" target=\"_blank\">d6tpipe</a>\u00a0to make your data easily accessible.</p>\n<p>\u00a0</p>\n<h3><a aria-hidden=\"true\" href=\"https://github.com/d6t/d6t-python/blob/master/blogs/top10-mistakes-coding.md#3-mix-data-with-code\" rel=\"noopener noreferrer\" target=\"_blank\"></a>3. Mix data with code</h3>\n<p>\u00a0<br/>\nSince data science code needs data why not dump it in the same directory? And while you are at it, save images, reports and other junk there too. Yikes, what a mess!</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>\u251c\u2500\u2500 data.csv\r\n\u251c\u2500\u2500 ingest.py\r\n\u251c\u2500\u2500 other-data.csv\r\n\u251c\u2500\u2500 output.png\r\n\u251c\u2500\u2500 report.html\r\n\u2514\u2500\u2500 run.py\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><strong>Solution</strong>: Organize your directory into categories, like data, reports, code etc. See <a href=\"https://drivendata.github.io/cookiecutter-data-science/#directory-structure\" rel=\"noopener\" target=\"_blank\">Cookiecutter Data Science</a> or <a href=\"https://github.com/d6t/d6tflow-template\" rel=\"noopener\" target=\"_blank\">d6tflow project templates</a> (see #5) and use tools mentioned in #1 to store and share data.</p>\n<p>\u00a0</p>\n<h3><a aria-hidden=\"true\" href=\"https://github.com/d6t/d6t-python/blob/master/blogs/top10-mistakes-coding.md#4-git-commit-data-with-source-code\" rel=\"noopener noreferrer\" target=\"_blank\"></a>4. Git commit data with source code</h3>\n<p>\u00a0<br/>\nMost people now version control their code (if you don't that's another mistake!! See\u00a0<a href=\"https://git-scm.com/\" rel=\"noopener noreferrer\" target=\"_blank\">git</a>). In an attempt to share data, it might be tempting to add data files to version control. That's ok for very small files but git is not optimized for data, especially large files.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>git add data.csv</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><strong>Solution</strong>: Use tools mentioned in #1 to store and share data. If you really want to version control data, see\u00a0<a href=\"https://github.com/d6t/d6tpipe\" rel=\"noopener noreferrer\" target=\"_blank\">d6tpipe</a>,\u00a0<a href=\"https://dvc.org/\" rel=\"noopener noreferrer\" target=\"_blank\">DVC</a>\u00a0and\u00a0<a href=\"https://git-lfs.github.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Git Large File Storage</a>.</p>\n<p>\u00a0</p>\n<h3><a aria-hidden=\"true\" href=\"https://github.com/d6t/d6t-python/blob/master/blogs/top10-mistakes-coding.md#5-write-functions-instead-of-dags\" rel=\"noopener noreferrer\" target=\"_blank\"></a>5. Write functions instead of DAGs</h3>\n<p>\u00a0<br/>\nEnough about data, lets talk about the actual code! Since one of the first things you learn when you learn to code are functions, data science code is mostly organized as a series of functions that are run linearly. That causes several problems, see\u00a0<a href=\"https://github.com/d6t/d6t-python/blob/master/blogs/reasons-why-bad-ml-code.rst\" rel=\"noopener noreferrer\" target=\"_blank\">4 Reasons Why Your Machine Learning Code is Probably Bad</a>.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>def process_data(data, parameter):\r\n    data = do_stuff(data)\r\n    data.to_pickle('data.pkl')\r\n\r\ndata = pd.read_csv('data.csv')\r\nprocess_data(data)\r\ndf_train = pd.read_pickle(df_train)\r\nmodel = sklearn.svm.SVC()\r\nmodel.fit(df_train.iloc[:,:-1], df_train['y'])\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><strong>Solution</strong>: Instead of linearly chaining functions, data science code is better written as a set of tasks with dependencies between them. Use\u00a0<a href=\"https://github.com/d6t/d6tflow\" rel=\"noopener noreferrer\" target=\"_blank\">d6tflow</a>\u00a0or\u00a0<a href=\"https://airflow.apache.org/\" rel=\"noopener noreferrer\" target=\"_blank\">airflow</a>.</p>\n<p>\u00a0</p>\n<h3><a aria-hidden=\"true\" href=\"https://github.com/d6t/d6t-python/blob/master/blogs/top10-mistakes-coding.md#6-write-for-loops\" rel=\"noopener noreferrer\" target=\"_blank\"></a>6. Write for loops</h3>\n<p>\u00a0<br/>\nLike functions, for loops are the first thing you learn when you learn to code. Easy to understand, but they are slow and excessively wordy, typically indicating you are unaware of vectorized alternatives.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>x = range(10)\r\navg = sum(x)/len(x); std = math.sqrt(sum((i-avg)**2 for i in x)/len(x));\r\nzscore = [(i-avg)/std for x]\r\n# should be: scipy.stats.zscore(x)\r\n\r\n# or\r\ngroupavg = []\r\nfor i in df['g'].unique():\r\n\tdfg = df[df[g']==i]\r\n\tgroupavg.append(dfg['g'].mean())\r\n# should be: df.groupby('g').mean()\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><strong>Solution</strong>:\u00a0<a href=\"http://www.numpy.org/\" rel=\"noopener noreferrer\" target=\"_blank\">Numpy</a>,\u00a0<a href=\"https://www.scipy.org/\" rel=\"noopener noreferrer\" target=\"_blank\">scipy</a>\u00a0and\u00a0<a href=\"https://pandas.pydata.org/\" rel=\"noopener noreferrer\" target=\"_blank\">pandas</a>\u00a0have vectorized functions for most things that you think might require for loops.</p>\n<p>\u00a0</p>\n<h3><a aria-hidden=\"true\" href=\"https://github.com/d6t/d6t-python/blob/master/blogs/top10-mistakes-coding.md#7-dont-write-unit-tests\" rel=\"noopener noreferrer\" target=\"_blank\"></a>7. Don't write unit tests</h3>\n<p>\u00a0<br/>\nAs data, parameters or user input change, your code might break, sometimes without you noticing. That can lead to bad output and if someone makes decisions based on your output, bad data will lead to bad decisions!</p>\n<p><strong>Solution</strong>: Use\u00a0<code>assert</code>\u00a0statements to check for data quality.\u00a0<a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/general_utility_functions.html#testing-functions\" rel=\"noopener noreferrer\" target=\"_blank\">pandas</a>\u00a0has equality tests,\u00a0<a href=\"https://github.com/d6t/d6tstack\" rel=\"noopener noreferrer\" target=\"_blank\">d6tstack</a>\u00a0has checks for data ingestion and\u00a0<a href=\"https://github.com/d6t/d6tjoin/blob/master/examples-prejoin.ipynb\" rel=\"noopener noreferrer\" target=\"_blank\">d6tjoin</a>\u00a0for data joins. Code for example data checks:</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>assert df['id'].unique().shape[0] == len(ids) # have data for all ids?\r\nassert df.isna().sum()&lt;0.9 # catch missing values\r\nassert df.groupby(['g','date']).size().max() ==1 # no duplicate values/date?\r\nassert d6tjoin.utils.PreJoin([df1,df2],['id','date']).is_all_matched() # all ids matched?\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p>\u00a0</p>\n<h3><a aria-hidden=\"true\" href=\"https://github.com/d6t/d6t-python/blob/master/blogs/top10-mistakes-coding.md#8-dont-document-code\" rel=\"noopener noreferrer\" target=\"_blank\"></a>8. Don't document code</h3>\n<p>\u00a0<br/>\nI get it, you're in a hurry to produce some analysis. You hack things together to get results to your client or boss. Then a week later they come back and say \"can you change xyz\" or \"can you update this please\". You look at your code and can't remember why you did what you did. And now imagine someone else has to run it.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>def some_complicated_function(data):\r\n\tdata = data[data['column']!='wrong']\r\n\tdata = data.groupby('date').apply(lambda x: complicated_stuff(x))\r\n\tdata = data[data['value']&lt;0.9]\r\n\treturn data\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><strong>Solution</strong>: Take the extra time, even if it's after you've delivered the analysis, to document what you did. You will thank yourself and other will do so even more! You'll look like a pro!</p>\n<p>\u00a0</p>\n<h3><a aria-hidden=\"true\" href=\"https://github.com/d6t/d6t-python/blob/master/blogs/top10-mistakes-coding.md#9-save-data-as-csv-or-pickle\" rel=\"noopener noreferrer\" target=\"_blank\"></a>9. Save data as csv or pickle</h3>\n<p>\u00a0<br/>\nBack data, it's DATA science after all. Just like functions and for loops, CSVs and pickle files are commonly used but they are actually not very good. CSVs don't include a schema so everyone has to parse numbers and dates again. Pickles solve that but only work in python and are not compressed. Both are not good formats to store large datasets.</p>\n<div style=\"width:98%;border:1px solid #ccc; overflow:auto; padding-left:10px; padding-bottom:10px; padding-top:10px\">\n<pre>def process_data(data, parameter):\r\n    data = do_stuff(data)\r\n    data.to_pickle('data.pkl')\r\n\r\ndata = pd.read_csv('data.csv')\r\nprocess_data(data)\r\ndf_train = pd.read_pickle(df_train)\r\n</pre>\n</div>\n<p><br class=\"blank\"/></p>\n<p><strong>Solution</strong>: Use\u00a0<a href=\"https://github.com/dask/fastparquet\" rel=\"noopener noreferrer\" target=\"_blank\">parquet</a>\u00a0or other binary data formats with data schemas, ideally ones that compress data.\u00a0<a href=\"https://github.com/d6t/d6tflow\" rel=\"noopener noreferrer\" target=\"_blank\">d6tflow</a>automatically saves data output of tasks as parquet so you don't have to deal with it.</p>\n<p>\u00a0</p>\n<h3><a aria-hidden=\"true\" href=\"https://github.com/d6t/d6t-python/blob/master/blogs/top10-mistakes-coding.md#10-use-jupyter-notebooks\" rel=\"noopener noreferrer\" target=\"_blank\"></a>10. Use jupyter notebooks</h3>\n<p>\u00a0<br/>\nLets conclude with a controversial one: jupyter notebooks are as common as CSVs. A lot of people use them. That doesn't make them good. Jupyter notebooks promote a lot of bad software engineering habits mentioned above, notably:</p>\n<ol>\n<li>You are tempted to dump all files into one directory\n<li>You write code that runs top-bottom instead of DAGs\n<li>You don't modularize your code\n<li>Difficult to debug\n<li>Code and output gets mixed in one file\n<li>They don't version control well\n</li></li></li></li></li></li></ol>\n<p>It feels easy to get started but scales poorly.</p>\n<p><strong>Solution</strong>: Use\u00a0<a href=\"https://www.jetbrains.com/pycharm/\" rel=\"noopener noreferrer\" target=\"_blank\">pycharm</a>\u00a0and/or\u00a0<a href=\"https://www.spyder-ide.org/\" rel=\"noopener noreferrer\" target=\"_blank\">spyder</a>.</p>\n<p>\u00a0<br/>\n<b>Bio: <a href=\"https://www.linkedin.com/in/normanniemer/\" rel=\"noopener noreferrer\" target=\"_blank\">Norman Niemer</a></b> is the Chief Data Scientist at a large asset manager where he delivers data-driven investment insights. He holds a MS Financial Engineering from Columbia University and a BS in Banking and Finance from Cass Business School (London).</p>\n<p><a href=\"https://github.com/d6t/d6t-python/blob/master/blogs/top10-mistakes-coding.md\" rel=\"noopener noreferrer\" target=\"_blank\">Original</a>. Reposted with permission.</p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2019/02/4-reasons-machine-learning-code-probably-bad.html\">4 Reasons Why Your Machine Learning Code is Probably Bad</a>\n<li><a href=\"/2018/12/machine-learning-project-checklist.html\">The Machine Learning Project Checklist</a>\n<li><a href=\"/2019/01/data-science-project-flow-startups.html\">Data Science Project Flow for Startups</a>\n</li></li></li></ul>\n<p><a name=\"comments\"></a></p>\n<div id=\"disqus_thread\"></div>\n<p> <script type=\"text/javascript\">\n var disqus_shortname = 'kdnuggets';\n (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = 'https://kdnuggets.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })();\n </script></p>\n</div> ", "content": "comments By Norman Niemer , Chief Data Scientist A data scientist is a \"person who is better at statistics than any software engineer and better at software engineering than any statistician\". Many data scientists have a statistics background and little experience with software engineering. I'm a senior data scientist ranked top 1% on Stackoverflow for python coding and work with a lot of (junior) data scientists. Here is my list of 10 common mistakes I frequently see. \u00a0 1. Don't share data referenced in code \u00a0 Data science needs code AND data. So for someone else to be able to reproduce your results, they need to have access to the data. Seems basic but a lot of people forget to share the data with their code. import pandas as pd\r df1 =  # fails\r \r Solution : Use\u00a0 d6tpipe \u00a0to share data files with your code or upload to S3/web/google drive etc or save to a database so the recipient can retrieve files (but don't add them to git, see below). \u00a0 2. Hardcode inaccessible paths \u00a0 Similar to mistake 1, if you hardcode paths others don't have access to, they can't run your code and have to look in lots of places to manually change paths. Booo! import pandas as pd\r df =  # fails\r \r \r # or \r import os\r  # fails\r Solution : Use relative paths, global path config variables or\u00a0 d6tpipe \u00a0to make your data easily accessible. \u00a0 3. Mix data with code \u00a0 Since data science code needs data why not dump it in the same directory? And while you are at it, save images, reports and other junk there too. Yikes, what a mess! \u251c\u2500\u2500 data.csv\r \u251c\u2500\u2500 ingest.py\r \u251c\u2500\u2500 other-data.csv\r \u251c\u2500\u2500 output.png\r \u251c\u2500\u2500 report.html\r \u2514\u2500\u2500 run.py\r Solution : Organize your directory into categories, like data, reports, code etc. See Cookiecutter Data Science or d6tflow project templates (see #5) and use tools mentioned in #1 to store and share data. \u00a0 4. Git commit data with source code \u00a0 Most people now version control their code (if you don't that's another mistake!! See\u00a0 git ). In an attempt to share data, it might be tempting to add data files to version control. That's ok for very small files but git is not optimized for data, especially large files. git add data.csv Solution : Use tools mentioned in #1 to store and share data. If you really want to version control data, see\u00a0 d6tpipe ,\u00a0 DVC \u00a0and\u00a0 Git Large File Storage . \u00a0 5. Write functions instead of DAGs \u00a0 Enough about data, lets talk about the actual code! Since one of the first things you learn when you learn to code are functions, data science code is mostly organized as a series of functions that are run linearly. That causes several problems, see\u00a0 4 Reasons Why Your Machine Learning Code is Probably Bad . def :\r data = \r \r \r data = \r \r df_train = \r model = \r \r Solution : Instead of linearly chaining functions, data science code is better written as a set of tasks with dependencies between them. Use\u00a0 d6tflow \u00a0or\u00a0 airflow . \u00a0 6. Write for loops \u00a0 Like functions, for loops are the first thing you learn when you learn to code. Easy to understand, but they are slow and excessively wordy, typically indicating you are unaware of vectorized alternatives. x = \r avg = /; std = **2 for i in x)/);\r zscore = [(i-avg)/std for x]\r # should be: \r \r # or\r groupavg = []\r for i in df['g'].:\r \tdfg = df[df[g']==i]\r \t)\r # should be: .\r Solution :\u00a0 Numpy ,\u00a0 scipy \u00a0and\u00a0 pandas \u00a0have vectorized functions for most things that you think might require for loops. \u00a0 7. Don't write unit tests \u00a0 As data, parameters or user input change, your code might break, sometimes without you noticing. That can lead to bad output and if someone makes decisions based on your output, bad data will lead to bad decisions! Solution : Use\u00a0 assert \u00a0statements to check for data quality.\u00a0 pandas \u00a0has equality tests,\u00a0 d6tstack \u00a0has checks for data ingestion and\u00a0 d6tjoin \u00a0for data joins. Code for example data checks: assert df['id']..shape[0] ==  # have data for all ids?\r assert .<0.9 # catch missing values\r assert .. ==1 # no duplicate values/date?\r assert . # all ids matched?\r \u00a0 8. Don't document code \u00a0 I get it, you're in a hurry to produce some analysis. You hack things together to get results to your client or boss. Then a week later they come back and say \"can you change xyz\" or \"can you update this please\". You look at your code and can't remember why you did what you did. And now imagine someone else has to run it. def :\r \tdata = data[data['column']!='wrong']\r \tdata = .)\r \tdata = data[data['value']<0.9]\r \treturn data\r Solution : Take the extra time, even if it's after you've delivered the analysis, to document what you did. You will thank yourself and other will do so even more! You'll look like a pro! \u00a0 9. Save data as csv or pickle \u00a0 Back data, it's DATA science after all. Just like functions and for loops, CSVs and pickle files are commonly used but they are actually not very good. CSVs don't include a schema so everyone has to parse numbers and dates again. Pickles solve that but only work in python and are not compressed. Both are not good formats to store large datasets. def :\r data = \r \r \r data = \r \r df_train = \r Solution : Use\u00a0 parquet \u00a0or other binary data formats with data schemas, ideally ones that compress data.\u00a0 d6tflow automatically saves data output of tasks as parquet so you don't have to deal with it. \u00a0 10. Use jupyter notebooks \u00a0 Lets conclude with a controversial one: jupyter notebooks are as common as CSVs. A lot of people use them. That doesn't make them good. Jupyter notebooks promote a lot of bad software engineering habits mentioned above, notably: You are tempted to dump all files into one directory You write code that runs top-bottom instead of DAGs You don't modularize your code Difficult to debug Code and output gets mixed in one file They don't version control well It feels easy to get started but scales poorly. Solution : Use\u00a0 pycharm \u00a0and/or\u00a0 spyder . \u00a0 Bio: Norman Niemer is the Chief Data Scientist at a large asset manager where he delivers data-driven investment insights. He holds a MS Financial Engineering from Columbia University and a BS in Banking and Finance from Cass Business School (London). Original . Reposted with permission. Related: 4 Reasons Why Your Machine Learning Code is Probably Bad The Machine Learning Project Checklist Data Science Project Flow for Startups", "read_time": 340.5, "title_html": "<h1 id=\"title\"><img align=\"right\" alt=\"Gold Blog\" src=\"/images/tkb-1904-g.png\" width=\"94\"/>Top 10 Coding Mistakes Made by Data Scientists</h1> "}