{"content": "By Jean-Nicholas Hould, JeanNicholasHould.com . This post is part of the author's Learning Machine Learning series. It\u2019s based on Chapter 1 and 2 of Python Machine Learning . Machine learning can be intimidating for a newcomer. The concept of a machine learning things alone is quite abstract. How does that work in practice? In order to demystify some of the magic behind machine learning algorithms, I decided to implement a simple machine learning algorithm from scratch. I will not be using a library such as scikit-learn which already has many algorithms implemented. Instead, I\u2019ll be writing all of the code in order to have a working binary classifier algorithm. The goal of this exercise is to understand its inner workings. So, what the heck is a binary classifier? \u00a0 A classifier is a machine-learning algorithm that determines the class of an input element based on a set of features. For example, a classifier could be used to predict the category of a beer based on its characteristics, it\u2019s \u201cfeatures\u201d. These features could include its alcohol content, aroma, appearance, etc. A machine learning classifier could potentially be used to predict that a beer with 8% alcohol content, 100 IBU and with strong aromas of oranges is an Indian Pale Ale. In machine learning, there are three main types of tasks: unsupervised learning, supervised learning and reinforcement learning. The classifier algorithm falls under the supervised learning category. Supervised learning means that we know the right answer beforehand. The desired outputs are known. In the case of the beer example, we could realistically have a dataset describing beers and their category. We could train the classifier algorithm to predict those categories based on the beers features. A binary classifier classifies elements in two groups. Zero or one. True or false. IPA or not. Building a machine learning model \u00a0 There are four steps to build and use a machine learning model. Preprocessing Learning Evaluation Prediction Source: Python Machine Learning by Sebastian Raschka. Preprocessing \u00a0 The preprocessing is the first step in building a machine learning model. At this step, you acquire and prepare the data for future usage. You clean up the data, tidy it and select the features you want to use from your data. The following tasks can be considered as part of the \u201cpreprocessing\u201d: Extract features from raw data Clean and format the data Remove superfluous features (or highly correlated features) Reduce the number of features for performance Standardize the range of feature data (also named Feature Scaling ) Split your dataset randomly: training dataset and test dataset Learning or Training \u00a0 Once you have your datasets ready to be used, the second step is to select an algorithm to perform your desired task. In our case, the algorithm we selected is a binary classifier called Perceptron. There are many algorithms designed to do different tasks. They each have their strengths and weaknesses. At this step, you can test a few algorithms, see how they perform and select the best performing one. There are a wide variety of metrics that can be used to measure the performance of a machine learning model. According to Raschka, \u201cone commonly used metric is classification accuracy, which is defined as the proportion of correctly classified instances\u201d. At this step, you will make adjustments to the parameters of your machine learning algorithm. These are named hyperparameters. In this post, we\u2019ll mainly focus on this part of the machine learning work flow. We\u2019ll deep dive in the algorithm inner workings. If you are interested in the other sections of the machine learning work flow, which you should be, I\u2019ll be linking to a great notebook at the end of this post. Evaluation \u00a0 When the model has been \u201ctrained\u201d on the dataset it can be evaluated on new unseen data. The goal here is to measure the generalization error . This metric measures \u201chow accurately an algorithm is able to predict outcome values for previously unseen data\u201d. Once you are satisfied with the results, you can use your machine learning model to make predictions. Introducing the Perceptron \u00a0 The algorithm that we\u2019ll be re-implementing is a Perceptron which is one of the very first machine learning algorithm. The Perceptron algorithm is simple but powerful. Given a training dataset, the algorithm automatically learns \u201cthe optimal weight coefficients that are then multiplied with the input features in order to make the decision of whether a neuron fires or not\u201d. But, how does the algorithm do that? The Algorithm \u00a0 Here\u2019s the sequence of the algorithm: First, we initialize an array with the weights equal to zero. The array length is equal to the number of features plus one. This additional feature is the \u201cthreshold\u201d. It\u2019s important to note that in the case of the Perceptron algorithm, the features must be of numerical value. \r self.w_ = \r \u00a0 Secondly, we start a loop equal to the number of iterations n_iter . This is an hyperparameter defined by the data scientist. \r for _ in :\r \u00a0 Thirdly, we start a loop on each training data point and it\u2019s target. The target is the desired output we want the algorithm to eventually predict. Since this is a binary classifier, the targets are either -1 or 1 . They are of binary value. Based on the data point features, the algorithm will predict the category: 1 or -1 . The prediction calculation is a matricial multiplication of the features with their appropriate weights. To this multiplication we add the value of the threshold. If the result is above 0, the predicted category is 1 . If the result is below 0, the predicted category is -1 . At each iteration on a data point, if the prediction is not accurate, the algorithm will adjust the weights. During the first few iterations, the predictions are not likely to be accurate because the weights haven\u2019t been adjusted many times. They haven\u2019t had a chance to start converging. The adjustments are made proportionally to the difference between the target and the predicted value. This difference is then multiplied by the learning rate eta , an hyperparameter of value between zero and one set by the data scientist. The higher the eta is, the larger the correction on the weights will be. If the prediction is accurate, the algorithm won\u2019t adjust the weights. The Perceptron will converge only if the two classes are linearly separable. Simply said, if you are able to draw a straight line to entirely separate the two classes, the algorithm will converge. Else, the algorithm will keep iterating and will readjust weights until it reaches the maximum number of iterations n_iter . Source: Python Machine Learning by Sebastian Raschka. Complete Code Source: Python Machine Learning by Sebastian Raschka. Three Learnings \u00a0 1. Learning Rate, Number of Iteration & Convergence \u00a0 Parameters such as learning rate and number of iteration can seem very abstract if you jump in straight to using an algorithm from a library like scikit-learn . It\u2019s hard to grasp what these really do. By implementing the algorithm, it\u2019s now clear for me what they represent in the context of the Perceptron. Learning Rate The learning rate is a ratio by which the weights are corrected when the prediction is not accurate. The value needs to be between zero and one. As you can see in the snippet below, the fit function will iterate on each observation, call the predict function and then adjust the weights based on the difference between the target and the predicted value and then multiplied by the learning rate. A higher learning rate means that the algorithm will adjust the weights more aggressively. At each iteration, the weights will be adjusted if the predicted value is inaccurate. Number of iterations The number of iteration is the number of times the algorithm will run through the training dataset. If the number of iteration was set to one, the algorithm would loop through the dataset only once and update the weights one time for each data point. The resulting model would be more likely to be inaccurate than a model with a higher number of iteration. On large datasets, there is a cost to having a high number of iterations. The learning rate and number of iteration go hands-in-hand. They need to be adjusted together. For example, if you have a very low learning rate , which means that the algorithm will adjust it\u2019s weight only marginally at each iteration, you will probably need a higher number of iteration. 2. Linear Algebra \u00a0 It\u2019s critical to mention that the capabilities of the Perceptron algorithm are attributable to linear algebra. The whole algorithm can be described through linear algebra formulas. If you have never done linear algebra in college, the formulas will be cryptic. As usual, Khan Academy is a great place to start with if you want to get familiar with linear algebra. It\u2019s also a great place to get a refresher on the topic. For me, the main learning here is how fundamental linear algebra is to this machine learning algorithm. 3. Type Everything \u00a0 This learning is actually a concept I re-learned while going through the code for this post. It\u2019s not specific to machine learning and it has nothing to do with the Perceptron. Back in 2012 when I was learning to code Ruby on Rails, a web application development framework, I realized that typing down all of the code examples from tutorials really helped me memorize and understand the concepts. I spent weeks writing code while following tutorials. No copy and paste. I typed all the code. This may sound stupid but it was extremely helpful to grasp the concepts. During the process, I inevitably made typos and spend some time figuring out what was broken. These moments were crucial because that\u2019s when you usually stop and think. If you are going through the Perceptron code, don\u2019t copy and paste the code from the repository . Type it down in your own Jupyter Notebook. Type everything. Don\u2019t read passively. Get involved, type it down and you\u2019ll assimilate the concepts faster. Next Steps \u00a0 In this post, my goal was to share my understanding of the algorithm and the learnings I\u2019ve made while reimplementing it. However, you can do much more than simply reimplementing the model. You can actually use it with real data in order to do some simple predictions. In Python Machine Learning, Raschka uses the Perceptron to predict the class of Iris flower based on a the sepal and petal length of the flower. With actual data, you can then evaluate the model and make predictions on unseen data. Bio: Jean-Nicholas Hould is a Data Scientist from Montreal, Canada . Author at JeanNicholasHould.com. Original . Reposted with permission. Related: Web Scraping for Dataset Curation, Part 1: Collecting Craft Beer Data Tidying Data in Python Central Limit Theorem for Data Science", "title_html": "<h1 id=\"title\">What I Learned Implementing a Classifier from Scratch in Python</h1> ", "url": "https://www.kdnuggets.com/2017/02/learned-implementing-classifier-scratch-python.html", "tfidf": {"tfidf": {"tidi": 392.0, "real": 2.28103448276, "web": 10.34267100978, "realist": 12.9494290375, "fall": 1.6945244956799999, "onc": 4.492359932099999, "fit": 3.37070063694, "beer": 88.69273743, "wide": 1.5598349381, "neuron": 64.2753036437, "addit": 1.24634950542, "topic": 5.457545548300001, "memor": 16.1177664975, "number": 15.42000832526, "previous": 1.42846859816, "multipli": 61.2185089974, "etc": 4.2066772655, "dataset": 2129.707317078, "eventu": 1.63653231626, "function": 4.99088337, "class": 8.46607119052, "draw": 2.97247706422, "differ": 4.946179609, "intimid": 20.671875, "python": 337.7872340424, "demystifi": 337.787234043, "unsupervis": 345.13043478300006, "done": 2.3302509907499998, "four": 1.20950784702, "never": 1.55769230769, "complet": 1.24021560816, "higher": 8.4875701684, "know": 2.59327017315, "their": 3.0464372521500005, "scale": 3.7469907953699995, "automat": 6.787516032490001, "won": 2.31732593782, "equal": 7.626581265, "aggress": 6.25039370079, "instead": 1.59461631177, "sebastian": 80.4527027028, "multipl": 5.49627834516, "chapter": 3.6147540983599997, "how": 8.01251640255, "test": 5.31414225942, "repost": 933.882352941, "had": 1.0475750577399998, "superflu": 115.043478261, "initi": 1.35, "converg": 61.1791907516, "end": 1.10680423871, "correl": 13.1860465116, "interest": 1.60331246213, "deep": 3.6279707495399998, "will": 19.59697577536, "concept": 13.285355648549999, "consid": 1.2397313759200002, "snippet": 135.692307692, "second": 2.2261796256, "perceptron": 15875.99999997, "updat": 5.56466876972, "new": 1.0178880554, "below": 4.51215006394, "clear": 1.85423966363, "perform": 7.6569885212500015, "but": 3.04897253697, "were": 1.02458857696, "need": 4.31178707223, "assimil": 16.3333333333, "classif": 8.067073170730001, "hould": 2886.54545454, "cost": 2.31935719503, "point": 5.03960003176, "applic": 3.42672134686, "aroma": 364.965517242, "has": 3.1309492505999996, "have": 7.104263887979998, "theorem": 36.164009111599995, "stop": 2.1783754116400003, "adjust": 71.12903225810001, "would": 2.1657458563599996, "sound": 3.11294117647, "out": 1.06016694491, "model": 20.905978404000003, "format": 2.53125, "quit": 2.8849718335500003, "iri": 49.3043478261, "under": 1.0781663837, "algebra": 248.7101827674, "numer": 1.83325635104, "hyperparamet": 4329.81818181, "categori": 27.873589164819997, "optim": 11.5377906977, "start": 5.06694326976, "togeth": 1.58095996813, "usag": 6.427530364369999, "not": 7.10971786833, "involv": 1.4498630137000001, "length": 7.38246919322, "are": 18.53830684404, "whole": 2.29488291414, "specif": 1.8719490626099997, "broken": 4.46959459459, "true": 2.55569864778, "jupyt": 1443.27272727, "metric": 66.7058823528, "said": 1.54751925139, "then": 5.432893025799999, "separ": 3.2024205748799996, "they": 6.18103951722, "design": 1.45825296225, "reach": 1.49801849406, "jump": 8.07117437722, "scienc": 2.31969608416, "outcom": 7.48867924528, "grasp": 47.532934131800005, "larger": 2.2407904022599996, "section": 2.1284354471099998, "plus": 4.6914893617, "featur": 25.96113889954, "practic": 1.70434782609, "simpl": 10.19434931508, "appear": 1.3214582986499999, "that": 14.055776892499999, "algorithm": 1062.1267605652, "array": 20.2888178914, "either": 1.5830092731099998, "accord": 1.27589809531, "develop": 1.1955719557200002, "observ": 2.22446406053, "accuraci": 12.7620578778, "those": 1.19548192771, "three": 2.13243787778, "some": 3.1211009174399997, "sourc": 5.09281437126, "should": 1.6643254009900001, "add": 4.61243463103, "result": 4.58446433728, "sepal": 1443.27272727, "unseen": 122.4370179948, "supervis": 23.22184300341, "content": 7.0843373494, "repositori": 44.974504249300004, "introduc": 1.7258397651900002, "set": 3.56123822343, "futur": 1.8577112099200002, "two": 3.04137931035, "khan": 16.383900928800003, "canada": 3.0367253251700004, "from": 7.00397050479, "answer": 4.64890190337, "limit": 1.5186531471200002, "dive": 16.085106383, "num": 17.005355680170002, "instanc": 3.2572835453400004, "els": 5.44444444444, "acquir": 3.10563380282, "for": 13.00409552013, "colleg": 2.5511811023599997, "predict": 114.06662312210001, "output": 15.353965183760002, "with": 13.015576716869997, "magic": 7.9063745019899985, "zero": 35.00771775084, "characterist": 3.6724496877199995, "determin": 2.1658935879900003, "eta": 250.015748032, "split": 3.4709226060300002, "preprocess": 4884.92307692, "target": 16.094890510950002, "ale": 84.8983957219, "chanc": 4.2449197861000005, "extract": 7.703056768560001, "think": 2.90715986083, "work": 6.69120539478, "stupid": 31.8795180723, "focus": 2.01012914662, "familiar": 6.86381322957, "general": 1.1218202374200001, "reimplement": 3969.0, "remov": 2.0058117498400003, "group": 1.20996875238, "passiv": 15.8443113772, "straight": 12.407971864, "faster": 7.61438848921, "place": 2.2008733624400003, "great": 3.79778327088, "haven": 25.381294964000002, "goal": 9.84456386937, "scratch": 25.8146341463, "error": 6.04109589041, "framework": 8.200413223139998, "extrem": 2.36602086438, "type": 14.196729688330002, "note": 1.42449528937, "fals": 6.21613155834, "reinforc": 6.453658536590001, "probabl": 2.64555907349, "scientist": 14.082791247780001, "notebook": 80.3848101266, "iter": 636.5377358487999, "readi": 5.15789473684, "strength": 4.02739726027, "abov": 1.90382539873, "figur": 2.0343413634, "coeffici": 36.4965517241, "what": 5.01373756512, "handsinhand": 1443.27272727, "help": 2.79925945518, "main": 3.7591160220899997, "measur": 7.23280182231, "larg": 1.18574949585, "line": 1.4182597820299998, "doe": 3.4116256581, "own": 1.17844418052, "base": 8.02397111915, "relat": 1.23750876919, "decid": 1.9257641921400002, "permiss": 6.280063291139999, "post": 11.19131538135, "here": 7.26923076924, "machinelearn": 1443.27272727, "veri": 3.77640342531, "maximum": 4.80072573329, "clean": 13.73950670706, "paramet": 34.513043478200004, "much": 1.1942229577299999, "fundament": 5.32930513595, "evalu": 27.803852889679998, "than": 2.0655737705, "until": 1.14852058164, "scikitlearn": 2886.54545454, "refresh": 38.6277372263, "thing": 2.4065484311099996, "context": 4.25972632144, "entir": 1.59365589239, "craft": 8.01413427562, "correct": 10.989386248259999, "simpli": 5.0384005077800005, "dure": 2.1006946741599997, "exercis": 4.73627684964, "classifi": 63.5251750584, "weak": 4.70539419087, "defin": 5.45660766454, "train": 13.5559892657, "newcom": 27.5147313692, "spent": 3.00795755968, "decis": 2.16, "noth": 3.46410648047, "run": 1.55692850838, "calcul": 6.12972972973, "seri": 1.46511627907, "alreadi": 1.9551724137900002, "keep": 2.04245465071, "scrape": 70.56, "order": 4.98500667244, "typo": 529.2, "montreal": 14.907042253499998, "central": 1.6121039805000001, "usual": 3.45017928936, "indian": 3.5046357615900003, "critic": 1.67010309278, "the": 159.0, "step": 19.79551122192, "build": 4.9025218734000005, "seem": 2.29123971713, "linear": 97.1433566432, "satisfi": 7.680696661830001, "standard": 1.8915763135900003, "there": 5.20456333595, "valu": 20.499856527960002, "fire": 2.1153897401700004, "flower": 16.65023597274, "formula": 17.28470332064, "best": 1.5828514456600002, "repres": 1.46972782818, "right": 1.4054532577899999, "spend": 4.15928739848, "given": 1.35426085473, "follow": 2.09280253098, "now": 1.160780873, "raschka": 7216.363636349999, "name": 2.20423464074, "code": 34.92642385728, "hard": 2.73253012048, "desir": 9.005104934759999, "high": 2.2955465587, "alcohol": 15.92377131394, "abl": 3.6417020300400003, "realli": 9.495215311, "power": 1.3396337861799998, "tutori": 118.9213483146, "also": 2.02953020134, "third": 1.4195278969999998, "matrici": 1443.27272727, "everyth": 9.6393442623, "mean": 4.34720700987, "exampl": 6.01933649288, "task": 15.54565483476, "may": 1.05201775893, "past": 4.03404904078, "heck": 203.53846153799998, "machin": 92.55969581747999, "want": 5.99094339624, "threshold": 46.01739130439999, "behind": 2.0845588235299997, "howev": 1.0945191313299998, "share": 1.8566249561500001, "petal": 132.3, "attribut": 3.4156626506, "actual": 5.62446858762, "crucial": 7.7443902439, "week": 1.80532181033, "which": 6.03115107, "like": 3.44755700325, "such": 2.12302754748, "abstract": 19.932203389839998, "other": 1.00992366412, "realiz": 4.89244992296, "whether": 2.20683903253, "one": 9.05647461498, "raw": 10.6478873239, "known": 1.0859097127200001, "see": 2.54484251022, "margin": 6.16783216783, "becaus": 2.2990369994999997, "moment": 4.262013422819999, "loop": 40.5344680851, "get": 5.35687774155, "random": 7.1902173913, "orang": 8.204651162789999, "implement": 10.729443568379999, "through": 5.35374654345, "select": 8.09380576088, "collect": 1.64109985528, "alon": 2.99716820842, "part": 4.17322731156, "element": 4.72008324662, "rail": 6.393878372940001, "next": 1.4950560316400001, "niter": 2886.54545454, "this": 19.072078907490003, "mani": 3.13280273631, "rang": 1.7848229342299997, "proport": 10.53483742534, "time": 4.04509841392, "process": 1.69524826482, "back": 1.26070038911, "relearn": 882.0, "been": 2.0478555304799997, "jeannicholashouldcom": 2886.54545454, "binari": 194.39999999999998, "between": 4.13814674832, "low": 2.13072070863, "beforehand": 43.8563535912, "all": 3.03440366973, "input": 24.4058416602, "our": 2.35758835759, "varieti": 2.2972073506, "strong": 1.6439888163999998, "includ": 1.0190641247799999, "appropri": 4.31413043478, "case": 4.45496211768, "inner": 12.865478119939999, "ratio": 7.21308496138, "author": 2.8459263242799997, "weight": 68.30485556244, "call": 2.1353059852, "rate": 19.264392611549997, "more": 3.0515120451, "and": 32.00201574816, "these": 4.29661705008, "prepar": 2.43012398592, "inaccur": 48.402439024399996, "capabl": 3.6580645161300005, "cryptic": 96.2181818182, "made": 3.21116504853, "selfw": 1443.27272727, "jeannichola": 2886.54545454, "librari": 5.3653261237, "curat": 28.0991150442, "can": 14.11513669704, "flow": 8.82, "describ": 2.94054454528, "make": 4.305064063440001, "onli": 3.0769429549800007, "each": 8.32823741008, "pale": 26.328358209, "few": 2.63458347162, "accur": 28.844476744200005, "read": 2.3149606299200003, "academi": 3.42672134686, "link": 2.15151104486, "common": 1.4025974025999999, "inevit": 11.0634146341, "data": 70.90514674614, "reduc": 1.98698372966, "sequenc": 6.07112810707, "sinc": 1.08368600683, "bio": 42.336000000000006, "must": 1.9220338983099996, "origin": 1.13724928367, "potenti": 2.52080025405, "understand": 8.90575916229, "import": 1.3401992233700002, "first": 4.03046458492, "copi": 7.675126903560001, "could": 6.0218479745, "use": 12.355665088559999, "while": 3.1325966850899993, "rubi": 41.2363636364, "write": 4.1150855365400005, "down": 4.07669263032, "learn": 106.84652523790001, "when": 4.0830707902, "mention": 2.53894130817, "readjust": 220.5}, "logtfidf": {"tidi": 10.556229318460002, "real": 0.824629060574, "web": 3.2862619466400003, "realist": 2.56105169741, "fall": 0.527402167952, "onc": 1.211297617065, "fit": 1.2151206268899999, "beer": 16.16051123298, "wide": 0.44458000675399995, "neuron": 4.16317547727, "addit": 0.220218882972, "topic": 1.6969991554100001, "memor": 2.77992217273, "number": 1.3525200978604, "previous": 0.356602960063, "multipli": 9.04751186916, "etc": 1.4366730879700003, "dataset": 57.924290233040004, "eventu": 0.49257956194200003, "function": 1.828931483188, "class": 2.9990887597320004, "draw": 1.0893956335600001, "differ": 0.849284485248, "intimid": 3.02877408076, "python": 24.18394045776, "demystifi": 5.822416212189999, "unsupervis": 5.843922417409999, "done": 0.845975983129, "four": 0.190213538869, "never": 0.443205436091, "complet": 0.215285242047, "higher": 3.00923359598, "know": 0.952919694398, "their": 0.046081515368100005, "scale": 1.32095306328, "automat": 1.9150850473199998, "won": 0.8404139079, "equal": 2.799082174029, "aggress": 1.8326444538900002, "instead": 0.46663315041500003, "sebastian": 9.86717153706, "multipl": 2.02184803624, "chapter": 1.2850238307100001, "how": 2.3578347846500005, "test": 1.954448874206, "repost": 6.83935046985, "had": 0.0464780244111, "superflu": 4.74531012875, "initi": 0.30010459245, "converg": 10.910051000720001, "end": 0.101476798618, "correl": 2.57915918803, "interest": 0.47207177798199995, "deep": 1.2886734698, "will": 3.24458455864, "concept": 4.886122185515, "consid": 0.214894723824, "snippet": 4.91038987911, "second": 0.21427952675999998, "perceptron": 80.0213539521, "updat": 1.7164374626899999, "new": 0.0177299468511, "below": 1.627253183872, "clear": 0.617474727198, "perform": 2.1309042528999997, "but": 0.0485771162157, "were": 0.024291143681099997, "need": 1.088220490326, "assimil": 2.7932080094400003, "classif": 2.08779073629, "hould": 14.549337082200001, "cost": 0.84129007618, "point": 0.9241294361319999, "applic": 1.23160392849, "aroma": 10.413311390499999, "has": 0.1281718345644, "have": 0.1034950163884, "theorem": 3.58806440083, "stop": 0.778579374963, "adjust": 19.619104904, "would": 0.1592352559294, "sound": 1.13556799519, "out": 0.0584263909193, "model": 7.37450073111, "format": 0.9287132518729999, "quit": 1.05951513684, "iri": 3.8980122683599996, "under": 0.07526180538319999, "algebra": 22.347172948319994, "numer": 0.606093812346, "hyperparamet": 21.824005623300003, "categori": 9.67238626564, "optim": 2.4456277954099996, "start": 0.945773477164, "togeth": 0.458032237308, "usag": 1.86059038428, "not": 0.1088668910525, "involv": 0.371469078658, "length": 2.6119219622400003, "are": 0.5304145244886, "whole": 0.8306818244059999, "specif": 0.626980167541, "broken": 1.49729770979, "true": 0.938325629634, "jupyt": 7.2746685411000005, "metric": 9.305042554679998, "said": 0.436653165815, "then": 0.4151693261545, "separ": 0.941519545898, "they": 0.1783619686056, "design": 0.377239118022, "reach": 0.40414323085000003, "jump": 2.08829899551, "scienc": 0.841436178891, "outcom": 2.01339244624, "grasp": 6.33655128074, "larger": 0.806828661778, "section": 0.755387177948, "plus": 1.54575009318, "featur": 7.197586108414, "practic": 0.533182530867, "simpl": 3.66966386817, "appear": 0.278735898493, "that": 0.05566607731496, "algorithm": 126.55681101684, "array": 4.63384542186, "either": 0.459327638815, "accord": 0.243650319127, "develop": 0.178624694913, "observ": 0.7995160149320001, "accuraci": 2.5464765406, "those": 0.17854939087299998, "three": 0.12823737644980002, "some": 0.11872052719350001, "sourc": 1.587654932253, "should": 0.509419876758, "add": 1.52875583713, "result": 0.545515633524, "sepal": 7.2746685411000005, "unseen": 11.126953410840002, "supervis": 6.1394431674900005, "content": 2.52947831908, "repositori": 3.8060957569699996, "introduc": 0.5457137524260001, "set": 0.5144880338669999, "futur": 0.619345197699, "two": 0.041096533074600004, "khan": 2.7962992020099997, "canada": 1.11077973916, "from": 0.0039693791820619995, "answer": 1.5366310419, "limit": 0.41782385463, "dive": 2.7778937744700003, "num": 0.005354836721749001, "instanc": 1.18089357972, "els": 1.6945957207700002, "acquir": 1.1332178178499999, "for": 0.004094875140161, "colleg": 0.9365564293340001, "predict": 36.20628522918, "output": 4.07645315654, "with": 0.01556739227407, "magic": 2.06766933309, "zero": 8.677096732919999, "characterist": 1.30085892924, "determin": 0.772833019022, "eta": 9.65675345488, "split": 1.24442043932, "preprocess": 28.430457825759998, "target": 5.8453197481000005, "ale": 4.44145519705, "chanc": 1.44572292349, "extract": 2.04161723301, "think": 1.06717661175, "work": 0.654207403638, "stupid": 3.46196373688, "focus": 0.6981989720559999, "familiar": 1.92626315167, "general": 0.114952578063, "reimplement": 21.56297149233, "remov": 0.6960488415880001, "group": 0.190594534797, "passiv": 2.76281053226, "straight": 3.65038395548, "faster": 2.03003967967, "place": 0.1914141679144, "great": 0.707415774237, "haven": 5.08173060688, "goal": 3.56492136819, "scratch": 3.2509415461, "error": 1.7985854343, "framework": 2.10418454607, "extrem": 0.8612095839370001, "type": 4.9497103977090005, "note": 0.353817568083, "fals": 1.8271477773099998, "reinforc": 1.86464718498, "probabl": 0.972882412913, "scientist": 4.6390238533199994, "notebook": 7.387356098, "iter": 61.58811609739, "readi": 1.6405284994999998, "strength": 1.3931203261899998, "abov": 0.643865229816, "figur": 0.7101721121600001, "coeffici": 3.5972177828099996, "what": 0.903549187308, "handsinhand": 7.2746685411000005, "help": 0.672415442688, "main": 0.676714621764, "measur": 2.640042599178, "larg": 0.17037506060600002, "line": 0.349430614452, "doe": 1.0680834594339998, "own": 0.164195077421, "base": 0.9556631160090001, "relat": 0.21310030165399999, "decid": 0.655322871893, "permiss": 1.8373800586400002, "post": 4.028500763505, "here": 2.6551145651100003, "machinelearn": 7.2746685411000005, "veri": 0.6904793797140001, "maximum": 1.5687671009200002, "clean": 3.8542564072600003, "paramet": 5.696380287719999, "much": 0.17749572930100002, "fundament": 1.67322086119, "evalu": 7.755520972519999, "than": 0.0645217244364, "until": 0.138474663439, "scikitlearn": 14.549337082200001, "refresh": 3.65397059941, "thing": 0.8781935346799999, "context": 1.44920491442, "entir": 0.46603068026999994, "craft": 2.0812067672, "correct": 3.8949528954300003, "simpli": 1.847882983172, "dure": 0.0982418133788, "exercis": 1.5552513523, "classifi": 19.9983556218, "weak": 1.5487095508000002, "defin": 2.0073602185, "train": 4.626428189873001, "newcom": 3.31472154739, "spent": 1.10126129684, "decis": 0.7701082216959999, "noth": 1.24245472939, "run": 0.442714975539, "calcul": 1.8131506592099997, "seri": 0.38193461069799994, "alreadi": 0.670478380747, "keep": 0.7141523446729999, "scrape": 4.2564634117, "order": 0.8805615231720001, "typo": 6.27136643224, "montreal": 2.7018337357599997, "central": 0.477540146039, "usual": 1.090558034128, "indian": 1.25408659543, "critic": 0.512885356729, "the": 0.0, "step": 7.27681539886, "build": 1.4734123562730002, "seem": 0.829093032276, "linear": 18.41194349372, "satisfi": 2.03871025422, "standard": 0.63741050982, "there": 0.2004894646275, "valu": 7.408739791332, "fire": 0.749239069835, "flower": 4.2385544166, "formula": 4.31334945738, "best": 0.459227932947, "repres": 0.38507723275, "right": 0.34035985417, "spend": 1.42534376116, "given": 0.303255810831, "follow": 0.09071382218839999, "now": 0.149092945021, "raschka": 36.3733427055, "name": 0.19446633276860004, "code": 12.20417186373, "hard": 1.00522796406, "desir": 3.2975380285199996, "high": 0.27564757308000004, "alcohol": 4.14933172676, "abl": 1.19860796495, "realli": 3.1152816794, "power": 0.292396282715, "tutori": 8.170630311, "also": 0.0293143156, "third": 0.35032434942900004, "matrici": 7.2746685411000005, "everyth": 3.14541180634, "mean": 1.11276385056, "exampl": 1.6347306999959998, "task": 5.42994722644, "may": 0.050709995284400004, "past": 1.4032468315220001, "heck": 5.31585498721, "machin": 32.02427035426, "want": 2.0749098187649997, "threshold": 6.271744432619999, "behind": 0.7345572374320001, "howev": 0.0903151173475, "share": 0.618760299747, "petal": 4.88507207112, "attribut": 1.2283715153700001, "actual": 1.885542544944, "crucial": 2.04696874177, "week": 0.5907388641619999, "which": 0.03107048307258, "like": 0.417160729635, "such": 0.119391955612, "abstract": 4.59837900798, "other": 0.00987474791976, "realiz": 1.5876931847600002, "whether": 0.791561189647, "one": 0.0562981648095, "raw": 2.36536149914, "known": 0.0824180805992, "see": 0.481843170984, "margin": 1.81934742575, "becaus": 0.27868631765, "moment": 1.4497416830899998, "loop": 7.8106211619599994, "get": 1.739307017346, "random": 1.9727214065099998, "orang": 2.1047012084400003, "implement": 3.8231382272100003, "through": 0.3417934594245, "select": 2.819218748532, "collect": 0.49536666052, "alon": 1.09766791236, "part": 0.16958124393120003, "element": 1.7173585117539998, "rail": 1.8553410283900003, "next": 0.402163685499, "niter": 14.549337082200001, "this": 0.0719425319975, "mani": 0.1299472743663, "rang": 0.579319213803, "proport": 3.32308086944, "time": 0.0448460754504, "process": 0.527829199025, "back": 0.23166743089699998, "relearn": 6.7821920560099995, "been": 0.04729196473680001, "jeannicholashouldcom": 14.549337082200001, "binari": 20.868950536799996, "between": 0.13581472466119998, "low": 0.7564602833490001, "beforehand": 3.78091960208, "all": 0.03420789629339999, "input": 5.00335067078, "our": 0.8576392141820001, "varieti": 0.8316941898119999, "strong": 0.49712549393600003, "includ": 0.0188846813905, "appropri": 1.4618957827399999, "case": 1.186218806667, "inner": 3.72280085776, "ratio": 1.97589673238, "author": 0.7054828626199999, "weight": 22.18892936568, "call": 0.1309255488976, "rate": 6.8493048494940005, "more": 0.05107479479999999, "and": 0.0020156845460352, "these": 0.2861344776032, "prepar": 0.8879422790620001, "inaccur": 6.372806049919999, "capabl": 1.2969341868100002, "cryptic": 4.56661834, "made": 0.2040645782919, "selfw": 7.2746685411000005, "jeannichola": 14.549337082200001, "librari": 1.973619961886, "curat": 3.33573808276, "can": 1.948093156728, "flow": 2.9677493789200002, "describ": 0.77089520625, "make": 0.29399063129159997, "onli": 0.0759728049873, "each": 1.216191825128, "pale": 3.27064661718, "few": 0.551155827306, "accur": 8.76240307425, "read": 0.83939268088, "academi": 1.23160392849, "link": 0.7661704068449999, "common": 0.338325805271, "inevit": 2.4036436857099996, "data": 25.5532322808, "reduc": 0.686617775143, "sequenc": 1.8035444374, "sinc": 0.0803681994577, "bio": 3.7456377879300002, "must": 0.653383947388, "origin": 0.128612437587, "potenti": 0.9245764122419999, "understand": 3.264257627039999, "import": 0.292818277066, "first": 0.030349159248639998, "copi": 2.68967529488, "could": 0.9297813614500001, "use": 0.3504962367792, "while": 0.12974995138140002, "rubi": 3.7193204796199995, "write": 1.443024879754, "down": 0.920021223558, "learn": 38.76659497827, "when": 0.0822199554336, "mention": 0.931747186336, "readjust": 5.3958976948899995}, "logidf": {"tidi": 5.278114659230001, "real": 0.824629060574, "web": 1.6431309733200001, "realist": 2.56105169741, "fall": 0.527402167952, "onc": 0.403765872355, "fit": 1.2151206268899999, "beer": 2.69341853883, "wide": 0.44458000675399995, "neuron": 4.16317547727, "addit": 0.220218882972, "topic": 1.6969991554100001, "memor": 2.77992217273, "number": 0.0966085784186, "previous": 0.356602960063, "multipli": 3.01583728972, "etc": 1.4366730879700003, "dataset": 5.26584456664, "eventu": 0.49257956194200003, "function": 0.914465741594, "class": 0.7497721899330001, "draw": 1.0893956335600001, "differ": 0.212321121312, "intimid": 3.02877408076, "python": 4.03065674296, "demystifi": 5.822416212189999, "unsupervis": 5.843922417409999, "done": 0.845975983129, "four": 0.190213538869, "never": 0.443205436091, "complet": 0.215285242047, "higher": 0.752308398995, "know": 0.952919694398, "their": 0.015360505122700001, "scale": 1.32095306328, "automat": 1.9150850473199998, "won": 0.8404139079, "equal": 0.933027391343, "aggress": 1.8326444538900002, "instead": 0.46663315041500003, "sebastian": 3.2890571790200003, "multipl": 1.01092401812, "chapter": 1.2850238307100001, "how": 0.47156695693000006, "test": 0.977224437103, "repost": 6.83935046985, "had": 0.0464780244111, "superflu": 4.74531012875, "initi": 0.30010459245, "converg": 2.7275127501800003, "end": 0.101476798618, "correl": 2.57915918803, "interest": 0.47207177798199995, "deep": 1.2886734698, "will": 0.202786534915, "concept": 0.977224437103, "consid": 0.214894723824, "snippet": 4.91038987911, "second": 0.10713976337999999, "perceptron": 7.2746685411000005, "updat": 1.7164374626899999, "new": 0.0177299468511, "below": 0.813626591936, "clear": 0.617474727198, "perform": 0.42618085058, "but": 0.0161923720719, "were": 0.024291143681099997, "need": 0.362740163442, "assimil": 2.7932080094400003, "classif": 2.08779073629, "hould": 7.2746685411000005, "cost": 0.84129007618, "point": 0.23103235903299998, "applic": 1.23160392849, "aroma": 5.206655695249999, "has": 0.0427239448548, "have": 0.0147850023412, "theorem": 3.58806440083, "stop": 0.778579374963, "adjust": 1.9619104904, "would": 0.0796176279647, "sound": 1.13556799519, "out": 0.0584263909193, "model": 0.7374500731110001, "format": 0.9287132518729999, "quit": 1.05951513684, "iri": 3.8980122683599996, "under": 0.07526180538319999, "algebra": 3.7245288247199992, "numer": 0.606093812346, "hyperparamet": 7.2746685411000005, "categori": 1.38176946652, "optim": 2.4456277954099996, "start": 0.236443369291, "togeth": 0.458032237308, "usag": 1.86059038428, "not": 0.0155524130075, "involv": 0.371469078658, "length": 1.3059609811200001, "are": 0.0294674735827, "whole": 0.8306818244059999, "specif": 0.626980167541, "broken": 1.49729770979, "true": 0.938325629634, "jupyt": 7.2746685411000005, "metric": 3.1016808515599994, "said": 0.436653165815, "then": 0.08303386523089999, "separ": 0.470759772949, "they": 0.0297269947676, "design": 0.377239118022, "reach": 0.40414323085000003, "jump": 2.08829899551, "scienc": 0.841436178891, "outcom": 2.01339244624, "grasp": 3.16827564037, "larger": 0.806828661778, "section": 0.755387177948, "plus": 1.54575009318, "featur": 0.423387418142, "practic": 0.533182530867, "simpl": 1.2232212893899999, "appear": 0.278735898493, "that": 0.00397614837964, "algorithm": 3.33044239518, "array": 2.31692271093, "either": 0.459327638815, "accord": 0.243650319127, "develop": 0.178624694913, "observ": 0.7995160149320001, "accuraci": 2.5464765406, "those": 0.17854939087299998, "three": 0.06411868822490001, "some": 0.0395735090645, "sourc": 0.529218310751, "should": 0.509419876758, "add": 1.52875583713, "result": 0.136378908381, "sepal": 7.2746685411000005, "unseen": 3.708984470280001, "supervis": 2.04648105583, "content": 1.26473915954, "repositori": 3.8060957569699996, "introduc": 0.5457137524260001, "set": 0.171496011289, "futur": 0.619345197699, "two": 0.0136988443582, "khan": 2.7962992020099997, "canada": 1.11077973916, "from": 0.000567054168866, "answer": 1.5366310419, "limit": 0.41782385463, "dive": 2.7778937744700003, "num": 0.00031499039539700004, "instanc": 1.18089357972, "els": 1.6945957207700002, "acquir": 1.1332178178499999, "for": 0.00031499039539700004, "colleg": 0.9365564293340001, "predict": 1.6457402376899999, "output": 2.03822657827, "with": 0.00119749171339, "magic": 2.06766933309, "zero": 2.1692741832299998, "characterist": 1.30085892924, "determin": 0.772833019022, "eta": 4.82837672744, "split": 1.24442043932, "preprocess": 7.1076144564399995, "target": 1.1690639496200002, "ale": 4.44145519705, "chanc": 1.44572292349, "extract": 2.04161723301, "think": 1.06717661175, "work": 0.109034567273, "stupid": 3.46196373688, "focus": 0.6981989720559999, "familiar": 1.92626315167, "general": 0.114952578063, "reimplement": 7.18765716411, "remov": 0.6960488415880001, "group": 0.190594534797, "passiv": 2.76281053226, "straight": 1.82519197774, "faster": 2.03003967967, "place": 0.0957070839572, "great": 0.235805258079, "haven": 2.54086530344, "goal": 1.18830712273, "scratch": 3.2509415461, "error": 1.7985854343, "framework": 2.10418454607, "extrem": 0.8612095839370001, "type": 0.707101485387, "note": 0.353817568083, "fals": 1.8271477773099998, "reinforc": 1.86464718498, "probabl": 0.972882412913, "scientist": 1.54634128444, "notebook": 3.693678049, "iter": 3.62283035867, "readi": 1.6405284994999998, "strength": 1.3931203261899998, "abov": 0.643865229816, "figur": 0.7101721121600001, "coeffici": 3.5972177828099996, "what": 0.225887296827, "handsinhand": 7.2746685411000005, "help": 0.336207721344, "main": 0.225571540588, "measur": 0.880014199726, "larg": 0.17037506060600002, "line": 0.349430614452, "doe": 0.5340417297169999, "own": 0.164195077421, "base": 0.13652330228700002, "relat": 0.21310030165399999, "decid": 0.655322871893, "permiss": 1.8373800586400002, "post": 0.8057001527009999, "here": 0.8850381883700001, "machinelearn": 7.2746685411000005, "veri": 0.230159793238, "maximum": 1.5687671009200002, "clean": 1.9271282036300001, "paramet": 2.8481901438599997, "much": 0.17749572930100002, "fundament": 1.67322086119, "evalu": 1.9388802431299998, "than": 0.0322608622182, "until": 0.138474663439, "scikitlearn": 7.2746685411000005, "refresh": 3.65397059941, "thing": 0.8781935346799999, "context": 1.44920491442, "entir": 0.46603068026999994, "craft": 2.0812067672, "correct": 1.29831763181, "simpli": 0.923941491586, "dure": 0.0491209066894, "exercis": 1.5552513523, "classifi": 1.6665296351499999, "weak": 1.5487095508000002, "defin": 1.00368010925, "train": 0.660918312839, "newcom": 3.31472154739, "spent": 1.10126129684, "decis": 0.7701082216959999, "noth": 1.24245472939, "run": 0.442714975539, "calcul": 1.8131506592099997, "seri": 0.38193461069799994, "alreadi": 0.670478380747, "keep": 0.7141523446729999, "scrape": 4.2564634117, "order": 0.22014038079300002, "typo": 6.27136643224, "montreal": 2.7018337357599997, "central": 0.477540146039, "usual": 0.545279017064, "indian": 1.25408659543, "critic": 0.512885356729, "the": 0.0, "step": 1.03954505698, "build": 0.491137452091, "seem": 0.829093032276, "linear": 2.63027764196, "satisfi": 2.03871025422, "standard": 0.63741050982, "there": 0.0400978929255, "valu": 0.823193310148, "fire": 0.749239069835, "flower": 2.1192772083, "formula": 2.15667472869, "best": 0.459227932947, "repres": 0.38507723275, "right": 0.34035985417, "spend": 1.42534376116, "given": 0.303255810831, "follow": 0.045356911094199995, "now": 0.149092945021, "raschka": 7.2746685411000005, "name": 0.09723316638430002, "code": 1.35601909597, "hard": 1.00522796406, "desir": 1.0991793428399999, "high": 0.13782378654000002, "alcohol": 2.07466586338, "abl": 0.599303982475, "realli": 1.5576408397, "power": 0.292396282715, "tutori": 4.0853151555, "also": 0.0146571578, "third": 0.35032434942900004, "matrici": 7.2746685411000005, "everyth": 1.57270590317, "mean": 0.37092128352, "exampl": 0.40868267499899996, "task": 1.35748680661, "may": 0.050709995284400004, "past": 0.7016234157610001, "heck": 5.31585498721, "machin": 1.39235958062, "want": 0.6916366062549999, "threshold": 3.1358722163099997, "behind": 0.7345572374320001, "howev": 0.0903151173475, "share": 0.618760299747, "petal": 4.88507207112, "attribut": 1.2283715153700001, "actual": 0.628514181648, "crucial": 2.04696874177, "week": 0.5907388641619999, "which": 0.00517841384543, "like": 0.139053576545, "such": 0.059695977806, "abstract": 2.29918950399, "other": 0.00987474791976, "realiz": 1.5876931847600002, "whether": 0.791561189647, "one": 0.0062553516455, "raw": 2.36536149914, "known": 0.0824180805992, "see": 0.240921585492, "margin": 1.81934742575, "becaus": 0.139343158825, "moment": 1.4497416830899998, "loop": 2.60354038732, "get": 0.579769005782, "random": 1.9727214065099998, "orang": 2.1047012084400003, "implement": 1.27437940907, "through": 0.0683586918849, "select": 0.704804687133, "collect": 0.49536666052, "alon": 1.09766791236, "part": 0.04239531098280001, "element": 0.8586792558769999, "rail": 1.8553410283900003, "next": 0.402163685499, "niter": 7.2746685411000005, "this": 0.0037864490525, "mani": 0.0433157581221, "rang": 0.579319213803, "proport": 1.66154043472, "time": 0.0112115188626, "process": 0.527829199025, "back": 0.23166743089699998, "relearn": 6.7821920560099995, "been": 0.023645982368400004, "jeannicholashouldcom": 7.2746685411000005, "binari": 3.4781584227999995, "between": 0.033953681165299995, "low": 0.7564602833490001, "beforehand": 3.78091960208, "all": 0.011402632097799998, "input": 2.50167533539, "our": 0.8576392141820001, "varieti": 0.8316941898119999, "strong": 0.49712549393600003, "includ": 0.0188846813905, "appropri": 1.4618957827399999, "case": 0.395406268889, "inner": 1.86140042888, "ratio": 1.97589673238, "author": 0.35274143130999996, "weight": 1.58492352612, "call": 0.0654627744488, "rate": 0.761033872166, "more": 0.017024931599999998, "and": 6.29901420636e-05, "these": 0.0715336194008, "prepar": 0.8879422790620001, "inaccur": 3.1864030249599997, "capabl": 1.2969341868100002, "cryptic": 4.56661834, "made": 0.0680215260973, "selfw": 7.2746685411000005, "jeannichola": 7.2746685411000005, "librari": 0.986809980943, "curat": 3.33573808276, "can": 0.162341096394, "flow": 1.4838746894600001, "describ": 0.385447603125, "make": 0.07349765782289999, "onli": 0.025324268329099998, "each": 0.173741689304, "pale": 3.27064661718, "few": 0.275577913653, "accur": 1.75248061485, "read": 0.83939268088, "academi": 1.23160392849, "link": 0.7661704068449999, "common": 0.338325805271, "inevit": 2.4036436857099996, "data": 1.2168205848, "reduc": 0.686617775143, "sequenc": 1.8035444374, "sinc": 0.0803681994577, "bio": 3.7456377879300002, "must": 0.653383947388, "origin": 0.128612437587, "potenti": 0.9245764122419999, "understand": 1.0880858756799998, "import": 0.292818277066, "first": 0.0075872898121599995, "copi": 1.34483764744, "could": 0.18595627229000003, "use": 0.0292080197316, "while": 0.04324998379380001, "rubi": 3.7193204796199995, "write": 0.721512439877, "down": 0.306673741186, "learn": 0.842752064745, "when": 0.0205549888584, "mention": 0.931747186336, "readjust": 5.3958976948899995}, "freq": {"tidi": 2, "real": 1, "web": 2, "realist": 1, "fall": 1, "onc": 3, "fit": 1, "beer": 6, "wide": 1, "neuron": 1, "addit": 1, "topic": 1, "memor": 1, "number": 14, "previous": 1, "multipli": 3, "etc": 1, "dataset": 11, "eventu": 1, "function": 2, "class": 4, "draw": 1, "differ": 4, "intimid": 1, "python": 6, "demystifi": 1, "unsupervis": 1, "done": 1, "four": 1, "never": 1, "complet": 1, "higher": 4, "know": 1, "their": 3, "scale": 1, "automat": 1, "won": 1, "equal": 3, "aggress": 1, "instead": 1, "sebastian": 3, "multipl": 2, "chapter": 1, "how": 5, "test": 2, "repost": 1, "had": 1, "superflu": 1, "initi": 1, "converg": 4, "end": 1, "correl": 1, "interest": 1, "deep": 1, "will": 16, "concept": 5, "consid": 1, "snippet": 1, "second": 2, "perceptron": 11, "updat": 1, "new": 1, "below": 2, "clear": 1, "perform": 5, "but": 3, "were": 1, "need": 3, "assimil": 1, "classif": 1, "hould": 2, "cost": 1, "point": 4, "applic": 1, "aroma": 2, "has": 3, "have": 7, "theorem": 1, "stop": 1, "adjust": 10, "would": 2, "sound": 1, "out": 1, "model": 10, "format": 1, "quit": 1, "iri": 1, "under": 1, "algebra": 6, "numer": 1, "hyperparamet": 3, "categori": 7, "optim": 1, "start": 4, "togeth": 1, "usag": 1, "not": 7, "involv": 1, "length": 2, "are": 18, "whole": 1, "specif": 1, "broken": 1, "true": 1, "jupyt": 1, "metric": 3, "said": 1, "then": 5, "separ": 2, "they": 6, "design": 1, "reach": 1, "jump": 1, "scienc": 1, "outcom": 1, "grasp": 2, "larger": 1, "section": 1, "plus": 1, "featur": 17, "practic": 1, "simpl": 3, "appear": 1, "that": 14, "algorithm": 38, "array": 2, "either": 1, "accord": 1, "develop": 1, "observ": 1, "accuraci": 1, "those": 1, "three": 2, "some": 3, "sourc": 3, "should": 1, "add": 1, "result": 4, "sepal": 1, "unseen": 3, "supervis": 3, "content": 2, "repositori": 1, "introduc": 1, "set": 3, "futur": 1, "two": 3, "khan": 1, "canada": 1, "from": 7, "answer": 1, "limit": 1, "dive": 1, "num": 17, "instanc": 1, "els": 1, "acquir": 1, "for": 13, "colleg": 1, "predict": 22, "output": 2, "with": 13, "magic": 1, "zero": 4, "characterist": 1, "determin": 1, "eta": 2, "split": 1, "preprocess": 4, "target": 5, "ale": 1, "chanc": 1, "extract": 1, "think": 1, "work": 6, "stupid": 1, "focus": 1, "familiar": 1, "general": 1, "reimplement": 3, "remov": 1, "group": 1, "passiv": 1, "straight": 2, "faster": 1, "place": 2, "great": 3, "haven": 2, "goal": 3, "scratch": 1, "error": 1, "framework": 1, "extrem": 1, "type": 7, "note": 1, "fals": 1, "reinforc": 1, "probabl": 1, "scientist": 3, "notebook": 2, "iter": 17, "readi": 1, "strength": 1, "abov": 1, "figur": 1, "coeffici": 1, "what": 4, "handsinhand": 1, "help": 2, "main": 3, "measur": 3, "larg": 1, "line": 1, "doe": 2, "own": 1, "base": 7, "relat": 1, "decid": 1, "permiss": 1, "post": 5, "here": 3, "machinelearn": 1, "veri": 3, "maximum": 1, "clean": 2, "paramet": 2, "much": 1, "fundament": 1, "evalu": 4, "than": 2, "until": 1, "scikitlearn": 2, "refresh": 1, "thing": 1, "context": 1, "entir": 1, "craft": 1, "correct": 3, "simpli": 2, "dure": 2, "exercis": 1, "classifi": 12, "weak": 1, "defin": 2, "train": 7, "newcom": 1, "spent": 1, "decis": 1, "noth": 1, "run": 1, "calcul": 1, "seri": 1, "alreadi": 1, "keep": 1, "scrape": 1, "order": 4, "typo": 1, "montreal": 1, "central": 1, "usual": 2, "indian": 1, "critic": 1, "the": 159, "step": 7, "build": 3, "seem": 1, "linear": 7, "satisfi": 1, "standard": 1, "there": 5, "valu": 9, "fire": 1, "flower": 2, "formula": 2, "best": 1, "repres": 1, "right": 1, "spend": 1, "given": 1, "follow": 2, "now": 1, "raschka": 5, "name": 2, "code": 9, "hard": 1, "desir": 3, "high": 2, "alcohol": 2, "abl": 2, "realli": 2, "power": 1, "tutori": 2, "also": 2, "third": 1, "matrici": 1, "everyth": 2, "mean": 3, "exampl": 4, "task": 4, "may": 1, "past": 2, "heck": 1, "machin": 23, "want": 3, "threshold": 2, "behind": 1, "howev": 1, "share": 1, "petal": 1, "attribut": 1, "actual": 3, "crucial": 1, "week": 1, "which": 6, "like": 3, "such": 2, "abstract": 2, "other": 1, "realiz": 1, "whether": 1, "one": 9, "raw": 1, "known": 1, "see": 2, "margin": 1, "becaus": 2, "moment": 1, "loop": 3, "get": 3, "random": 1, "orang": 1, "implement": 3, "through": 5, "select": 4, "collect": 1, "alon": 1, "part": 4, "element": 2, "rail": 1, "next": 1, "niter": 2, "this": 19, "mani": 3, "rang": 1, "proport": 2, "time": 4, "process": 1, "back": 1, "relearn": 1, "been": 2, "jeannicholashouldcom": 2, "binari": 6, "between": 4, "low": 1, "beforehand": 1, "all": 3, "input": 2, "our": 1, "varieti": 1, "strong": 1, "includ": 1, "appropri": 1, "case": 3, "inner": 2, "ratio": 1, "author": 2, "weight": 14, "call": 2, "rate": 9, "more": 3, "and": 32, "these": 4, "prepar": 1, "inaccur": 2, "capabl": 1, "cryptic": 1, "made": 3, "selfw": 1, "jeannichola": 2, "librari": 2, "curat": 1, "can": 12, "flow": 2, "describ": 2, "make": 4, "onli": 3, "each": 7, "pale": 1, "few": 2, "accur": 5, "read": 1, "academi": 1, "link": 1, "common": 1, "inevit": 1, "data": 21, "reduc": 1, "sequenc": 1, "sinc": 1, "bio": 1, "must": 1, "origin": 1, "potenti": 1, "understand": 3, "import": 1, "first": 4, "copi": 2, "could": 5, "use": 12, "while": 3, "rubi": 1, "write": 2, "down": 3, "learn": 46, "when": 4, "mention": 1, "readjust": 1}, "idf": {"tidi": 196.0, "real": 2.28103448276, "web": 5.17133550489, "realist": 12.9494290375, "fall": 1.6945244956799999, "onc": 1.4974533106999999, "fit": 3.37070063694, "beer": 14.782122905, "wide": 1.5598349381, "neuron": 64.2753036437, "addit": 1.24634950542, "topic": 5.457545548300001, "memor": 16.1177664975, "number": 1.10142916609, "previous": 1.42846859816, "multipli": 20.4061696658, "etc": 4.2066772655, "dataset": 193.609756098, "eventu": 1.63653231626, "function": 2.495441685, "class": 2.11651779763, "draw": 2.97247706422, "differ": 1.23654490225, "intimid": 20.671875, "python": 56.2978723404, "demystifi": 337.787234043, "unsupervis": 345.13043478300006, "done": 2.3302509907499998, "four": 1.20950784702, "never": 1.55769230769, "complet": 1.24021560816, "higher": 2.1218925421, "know": 2.59327017315, "their": 1.01547908405, "scale": 3.7469907953699995, "automat": 6.787516032490001, "won": 2.31732593782, "equal": 2.542193755, "aggress": 6.25039370079, "instead": 1.59461631177, "sebastian": 26.8175675676, "multipl": 2.74813917258, "chapter": 3.6147540983599997, "how": 1.60250328051, "test": 2.65707112971, "repost": 933.882352941, "had": 1.0475750577399998, "superflu": 115.043478261, "initi": 1.35, "converg": 15.2947976879, "end": 1.10680423871, "correl": 13.1860465116, "interest": 1.60331246213, "deep": 3.6279707495399998, "will": 1.22481098596, "concept": 2.65707112971, "consid": 1.2397313759200002, "snippet": 135.692307692, "second": 1.1130898128, "perceptron": 1443.27272727, "updat": 5.56466876972, "new": 1.0178880554, "below": 2.25607503197, "clear": 1.85423966363, "perform": 1.5313977042500002, "but": 1.01632417899, "were": 1.02458857696, "need": 1.4372623574099999, "assimil": 16.3333333333, "classif": 8.067073170730001, "hould": 1443.27272727, "cost": 2.31935719503, "point": 1.25990000794, "applic": 3.42672134686, "aroma": 182.482758621, "has": 1.0436497502, "have": 1.0148948411399998, "theorem": 36.164009111599995, "stop": 2.1783754116400003, "adjust": 7.112903225810001, "would": 1.0828729281799998, "sound": 3.11294117647, "out": 1.06016694491, "model": 2.0905978404, "format": 2.53125, "quit": 2.8849718335500003, "iri": 49.3043478261, "under": 1.0781663837, "algebra": 41.4516971279, "numer": 1.83325635104, "hyperparamet": 1443.27272727, "categori": 3.98194130926, "optim": 11.5377906977, "start": 1.26673581744, "togeth": 1.58095996813, "usag": 6.427530364369999, "not": 1.01567398119, "involv": 1.4498630137000001, "length": 3.69123459661, "are": 1.02990593578, "whole": 2.29488291414, "specif": 1.8719490626099997, "broken": 4.46959459459, "true": 2.55569864778, "jupyt": 1443.27272727, "metric": 22.235294117600002, "said": 1.54751925139, "then": 1.08657860516, "separ": 1.6012102874399998, "they": 1.03017325287, "design": 1.45825296225, "reach": 1.49801849406, "jump": 8.07117437722, "scienc": 2.31969608416, "outcom": 7.48867924528, "grasp": 23.766467065900002, "larger": 2.2407904022599996, "section": 2.1284354471099998, "plus": 4.6914893617, "featur": 1.52712581762, "practic": 1.70434782609, "simpl": 3.3981164383599998, "appear": 1.3214582986499999, "that": 1.00398406375, "algorithm": 27.9507042254, "array": 10.1444089457, "either": 1.5830092731099998, "accord": 1.27589809531, "develop": 1.1955719557200002, "observ": 2.22446406053, "accuraci": 12.7620578778, "those": 1.19548192771, "three": 1.06621893889, "some": 1.04036697248, "sourc": 1.69760479042, "should": 1.6643254009900001, "add": 4.61243463103, "result": 1.14611608432, "sepal": 1443.27272727, "unseen": 40.8123393316, "supervis": 7.74061433447, "content": 3.5421686747, "repositori": 44.974504249300004, "introduc": 1.7258397651900002, "set": 1.18707940781, "futur": 1.8577112099200002, "two": 1.01379310345, "khan": 16.383900928800003, "canada": 3.0367253251700004, "from": 1.00056721497, "answer": 4.64890190337, "limit": 1.5186531471200002, "dive": 16.085106383, "num": 1.00031504001, "instanc": 3.2572835453400004, "els": 5.44444444444, "acquir": 3.10563380282, "for": 1.00031504001, "colleg": 2.5511811023599997, "predict": 5.18484650555, "output": 7.676982591880001, "with": 1.0011982089899998, "magic": 7.9063745019899985, "zero": 8.75192943771, "characterist": 3.6724496877199995, "determin": 2.1658935879900003, "eta": 125.007874016, "split": 3.4709226060300002, "preprocess": 1221.23076923, "target": 3.2189781021900004, "ale": 84.8983957219, "chanc": 4.2449197861000005, "extract": 7.703056768560001, "think": 2.90715986083, "work": 1.11520089913, "stupid": 31.8795180723, "focus": 2.01012914662, "familiar": 6.86381322957, "general": 1.1218202374200001, "reimplement": 1323.0, "remov": 2.0058117498400003, "group": 1.20996875238, "passiv": 15.8443113772, "straight": 6.203985932, "faster": 7.61438848921, "place": 1.1004366812200002, "great": 1.26592775696, "haven": 12.690647482000001, "goal": 3.28152128979, "scratch": 25.8146341463, "error": 6.04109589041, "framework": 8.200413223139998, "extrem": 2.36602086438, "type": 2.0281042411900003, "note": 1.42449528937, "fals": 6.21613155834, "reinforc": 6.453658536590001, "probabl": 2.64555907349, "scientist": 4.69426374926, "notebook": 40.1924050633, "iter": 37.4433962264, "readi": 5.15789473684, "strength": 4.02739726027, "abov": 1.90382539873, "figur": 2.0343413634, "coeffici": 36.4965517241, "what": 1.25343439128, "handsinhand": 1443.27272727, "help": 1.39962972759, "main": 1.25303867403, "measur": 2.41093394077, "larg": 1.18574949585, "line": 1.4182597820299998, "doe": 1.70581282905, "own": 1.17844418052, "base": 1.14628158845, "relat": 1.23750876919, "decid": 1.9257641921400002, "permiss": 6.280063291139999, "post": 2.23826307627, "here": 2.42307692308, "machinelearn": 1443.27272727, "veri": 1.25880114177, "maximum": 4.80072573329, "clean": 6.86975335353, "paramet": 17.256521739100002, "much": 1.1942229577299999, "fundament": 5.32930513595, "evalu": 6.9509632224199995, "than": 1.03278688525, "until": 1.14852058164, "scikitlearn": 1443.27272727, "refresh": 38.6277372263, "thing": 2.4065484311099996, "context": 4.25972632144, "entir": 1.59365589239, "craft": 8.01413427562, "correct": 3.6631287494199998, "simpli": 2.5192002538900002, "dure": 1.0503473370799998, "exercis": 4.73627684964, "classifi": 5.2937645882, "weak": 4.70539419087, "defin": 2.72830383227, "train": 1.9365698950999999, "newcom": 27.5147313692, "spent": 3.00795755968, "decis": 2.16, "noth": 3.46410648047, "run": 1.55692850838, "calcul": 6.12972972973, "seri": 1.46511627907, "alreadi": 1.9551724137900002, "keep": 2.04245465071, "scrape": 70.56, "order": 1.24625166811, "typo": 529.2, "montreal": 14.907042253499998, "central": 1.6121039805000001, "usual": 1.72508964468, "indian": 3.5046357615900003, "critic": 1.67010309278, "the": 1.0, "step": 2.8279301745599996, "build": 1.6341739578, "seem": 2.29123971713, "linear": 13.8776223776, "satisfi": 7.680696661830001, "standard": 1.8915763135900003, "there": 1.04091266719, "valu": 2.2777618364400003, "fire": 2.1153897401700004, "flower": 8.32511798637, "formula": 8.64235166032, "best": 1.5828514456600002, "repres": 1.46972782818, "right": 1.4054532577899999, "spend": 4.15928739848, "given": 1.35426085473, "follow": 1.04640126549, "now": 1.160780873, "raschka": 1443.27272727, "name": 1.10211732037, "code": 3.8807137619199996, "hard": 2.73253012048, "desir": 3.00170164492, "high": 1.14777327935, "alcohol": 7.96188565697, "abl": 1.8208510150200001, "realli": 4.7476076555, "power": 1.3396337861799998, "tutori": 59.4606741573, "also": 1.01476510067, "third": 1.4195278969999998, "matrici": 1443.27272727, "everyth": 4.81967213115, "mean": 1.44906900329, "exampl": 1.50483412322, "task": 3.88641370869, "may": 1.05201775893, "past": 2.01702452039, "heck": 203.53846153799998, "machin": 4.02433460076, "want": 1.99698113208, "threshold": 23.008695652199997, "behind": 2.0845588235299997, "howev": 1.0945191313299998, "share": 1.8566249561500001, "petal": 132.3, "attribut": 3.4156626506, "actual": 1.87482286254, "crucial": 7.7443902439, "week": 1.80532181033, "which": 1.005191845, "like": 1.14918566775, "such": 1.06151377374, "abstract": 9.966101694919999, "other": 1.00992366412, "realiz": 4.89244992296, "whether": 2.20683903253, "one": 1.00627495722, "raw": 10.6478873239, "known": 1.0859097127200001, "see": 1.27242125511, "margin": 6.16783216783, "becaus": 1.1495184997499999, "moment": 4.262013422819999, "loop": 13.5114893617, "get": 1.78562591385, "random": 7.1902173913, "orang": 8.204651162789999, "implement": 3.57648118946, "through": 1.07074930869, "select": 2.02345144022, "collect": 1.64109985528, "alon": 2.99716820842, "part": 1.04330682789, "element": 2.36004162331, "rail": 6.393878372940001, "next": 1.4950560316400001, "niter": 1443.27272727, "this": 1.00379362671, "mani": 1.04426757877, "rang": 1.7848229342299997, "proport": 5.26741871267, "time": 1.01127460348, "process": 1.69524826482, "back": 1.26070038911, "relearn": 882.0, "been": 1.0239277652399998, "jeannicholashouldcom": 1443.27272727, "binari": 32.4, "between": 1.03453668708, "low": 2.13072070863, "beforehand": 43.8563535912, "all": 1.01146788991, "input": 12.2029208301, "our": 2.35758835759, "varieti": 2.2972073506, "strong": 1.6439888163999998, "includ": 1.0190641247799999, "appropri": 4.31413043478, "case": 1.48498737256, "inner": 6.432739059969999, "ratio": 7.21308496138, "author": 1.4229631621399998, "weight": 4.878918254459999, "call": 1.0676529926, "rate": 2.14048806795, "more": 1.0171706817, "and": 1.00006299213, "these": 1.07415426252, "prepar": 2.43012398592, "inaccur": 24.201219512199998, "capabl": 3.6580645161300005, "cryptic": 96.2181818182, "made": 1.07038834951, "selfw": 1443.27272727, "jeannichola": 1443.27272727, "librari": 2.68266306185, "curat": 28.0991150442, "can": 1.17626139142, "flow": 4.41, "describ": 1.47027227264, "make": 1.0762660158600001, "onli": 1.0256476516600002, "each": 1.18974820144, "pale": 26.328358209, "few": 1.31729173581, "accur": 5.768895348840001, "read": 2.3149606299200003, "academi": 3.42672134686, "link": 2.15151104486, "common": 1.4025974025999999, "inevit": 11.0634146341, "data": 3.37643555934, "reduc": 1.98698372966, "sequenc": 6.07112810707, "sinc": 1.08368600683, "bio": 42.336000000000006, "must": 1.9220338983099996, "origin": 1.13724928367, "potenti": 2.52080025405, "understand": 2.96858638743, "import": 1.3401992233700002, "first": 1.00761614623, "copi": 3.8375634517800004, "could": 1.2043695949, "use": 1.0296387573799999, "while": 1.0441988950299999, "rubi": 41.2363636364, "write": 2.0575427682700003, "down": 1.35889754344, "learn": 2.32275054865, "when": 1.02076769755, "mention": 2.53894130817, "readjust": 220.5}}, "html": "<!DOCTYPE html>\n\n<html lang=\"en-US\" xmlns=\"http://www.w3.org/1999/xhtml\">\n<head profile=\"http://gmpg.org/xfn/11\">\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n<title>  What I Learned Implementing a Classifier from Scratch in Python</title>\n<link href=\"/wp-content/themes/kdn17/images/favicon.ico\" rel=\"shortcut icon\"/>\n<link href=\"/wp-content/themes/kdn17/style.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"/wp-content/themes/kdn17/js/jquery-1.9.1.min.js\" type=\"text/javascript\"></script>\n<script src=\"/aps/kda_all.js\" type=\"text/javascript\"></script>\n<link href=\"/feed/\" rel=\"alternate\" title=\"KDnuggets: Analytics, Big Data, Data Mining and Data Science Feed\" type=\"application/rss+xml\"/>\n<link href=\"//s.w.org\" rel=\"dns-prefetch\"/>\n<link href=\"https://www.kdnuggets.com/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/comments/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/2017/02/learned-implementing-classifier-scratch-python.html/feed\" rel=\"alternate\" title=\"KDnuggets \u00bb What I Learned Implementing a Classifier from Scratch in Python Comments Feed\" type=\"application/rss+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-json/\" rel=\"https://api.w.org/\"/>\n<link href=\"https://www.kdnuggets.com/xmlrpc.php?rsd\" rel=\"EditURI\" title=\"RSD\" type=\"application/rsd+xml\"/>\n<link href=\"https://www.kdnuggets.com/wp-includes/wlwmanifest.xml\" rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\"/>\n<link href=\"https://www.kdnuggets.com/2017/02/mads-analytics-data-science-leaders-san-francisco.html\" rel=\"prev\" title=\"KDnuggets Exclusive: Analytics and Data Science leaders in San Francisco, Apr 3-5\"/>\n<link href=\"https://www.kdnuggets.com/2017/02/top-5-kpis-measuring-campaign.html\" rel=\"next\" title=\"The Top 5 KPIs to Consider When Measuring Your Campaign\"/>\n<meta content=\"WordPress 4.9.10\" name=\"generator\">\n<link href=\"https://www.kdnuggets.com/2017/02/learned-implementing-classifier-scratch-python.html\" rel=\"canonical\"/>\n<link href=\"https://www.kdnuggets.com/?p=63240\" rel=\"shortlink\"/>\n<link href=\"https://www.kdnuggets.com/2017/02/learned-implementing-classifier-scratch-python.html\" rel=\"canonical\"/>\n<!-- BEGIN ExactMetrics v5.3.7 Universal Analytics - https://exactmetrics.com/ -->\n<script>\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-361129-1', 'auto');\n  ga('send', 'pageview');\n</script>\n<!-- END ExactMetrics Universal Analytics -->\n</meta></head>\n<body class=\"post-template-default single single-post postid-63240 single-format-standard\">\n<div class=\"main_wrapper\"><!-- publ: 28-Feb, 2017  -->\n<div id=\"wrapper\">\n<div id=\"header\">\n<div id=\"header_log\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<h1>KDnuggets</h1>\n<div class=\"text-container\">\n            \u00a0\u00a0<a href=\"/news/subscribe.html\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a> \u00a0|\n <a href=\"https://twitter.com/kdnuggets\" target=\"_blank\"><img alt=\"Twitter\" height=\"48\" src=\"/images/tw_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n <a href=\"https://www.facebook.com/kdnuggets\" target=\"_blank\"><img alt=\"Facebook\" height=\"48\" src=\"/images/fb_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \u00a0\u00a0\n<a href=\"https://www.linkedin.com/groups/54257/\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"48\" src=\"/images/in_c48.png\" style=\"vertical-align: bottom\" width=\"48\"/></a> \n\u00a0|\u00a0 <a href=\"/contact.html\"><b>Contact</b></a>\n</div>\n</div>\n<div class=\"search\">\n<form action=\"/\" id=\"searchform\" method=\"get\">\n<input id=\"s\" name=\"s\" placeholder=\"search KDnuggets\" type=\"text\" value=\"\"/>\n<input type=\"submit\" value=\"Search\"/></form>\n</div>\n<div href=\"#\" id=\"pull\">\n<img class=\"menu\" src=\"/images/menu-30.png\">\n<div class=\"logo\">\n<a href=\"/\"></a>\n</div>\n<img class=\"search-icon\" src=\"/images/search-icon.png\">\n</img></img></div>\n<div id=\"pull-menu\">\n<div class=\"navigation\"><ul class=\"menu\" id=\"menu-menu\"><li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-1070\" id=\"menu-item-1070\"><a href=\"/software/index.html\" title=\"Data Science Software\">SOFTWARE</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13756\" id=\"menu-item-13756\"><a href=\"/news/index.html\" title=\"News\">News/Blog</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-46286\" id=\"menu-item-46286\"><a href=\"/news/top-stories.html\">Top stories</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-42152\" id=\"menu-item-42152\"><a href=\"https://www.kdnuggets.com/opinions/index.html\" title=\"Opinions\">Opinions</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-46415\" id=\"menu-item-46415\"><a href=\"https://www.kdnuggets.com/tutorials/index.html\">Tutorials</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13364\" id=\"menu-item-13364\"><a href=\"/jobs/index.html\" title=\"Jobs in Analytics, Data Science\">JOBS</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-63505\" id=\"menu-item-63505\"><a href=\"https://www.kdnuggets.com/companies/index.html\">Companies</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13366\" id=\"menu-item-13366\"><a href=\"/courses/index.html\">Courses</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-1499\" id=\"menu-item-1499\"><a href=\"https://www.kdnuggets.com/datasets/index.html\">Datasets</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-14286\" id=\"menu-item-14286\"><a href=\"https://www.kdnuggets.com/education/index.html\" title=\"Education in Analytics, Big Data, Data Science\">EDUCATION</a></li>\n<li class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-51558\" id=\"menu-item-51558\"><a href=\"https://www.kdnuggets.com/education/analytics-data-mining-certificates.html\" title=\"Certificates in Analytics, Big Data, Data Science\">Certificates</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-14752\" id=\"menu-item-14752\"><a href=\"/meetings/index.html\">Meetings</a></li>\n<li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-13721\" id=\"menu-item-13721\"><a href=\"/webcasts/index.html\" title=\"Webcasts and Webinars\">Webinars</a></li>\n</ul></div></div>\n</div> <!--#header end-->\n<div id=\"spacer\">\n         \u00a0\n      </div>\n<div id=\"content_wrapper\">\n<div id=\"ad_wrapper\">\n<script type=\"text/javascript\">\n\tjQuery(function() {\n   \t    var pull        = $('#pull');\n            menu        = $('#header .navigation ul');\n            menuImage = $('#header img.menu');\n            mobileMenu        = $('#pull-menu-mobile');\n            search = $('img.search-icon');\n            searchBar = $('div.search');\n            searchClick = false;\n            search.on('click', function() {\n                  searchBar.slideToggle();\n                  searchClick = true;\n            });  \n     \t    $(menuImage).on('click', function(e) {\n\t        //e.preventDefault();\n                if (!searchClick) {\n                  menu.slideToggle();\n                }\n                searchClick = false;\n\t    });\n           /* pullMobile.on('click', function(e) {\n              e.preventDefault();\n                if (!searchClick) {\n                  mobileMenu.slideToggle();\n                }\n                searchClick = false;\n\t    });*/\n            \n\t});\n\tkpath = '/'; kda_top(); kda_sid_init(); kda_sid_n=3;\n\t</script>\n</div> <div class=\"breadcumb\">\n<br/>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2017/index.html\">2017</a> \u00bb <a href=\"https://www.kdnuggets.com/2017/02/index.html\">Feb</a> \u00bb <a href=\"https://www.kdnuggets.com/2017/02/tutorials.html\">Tutorials, Overviews</a> \u00bb What I Learned Implementing a Classifier from Scratch in Python (\u00a0<a href=\"/2017/n08.html\">17:n08</a>\u00a0)    </div>\n<div class=\"single\" id=\"content\">\n<div id=\"post-header\">\n<h1 id=\"title\">What I Learned Implementing a Classifier from Scratch in Python</h1>\n<div class=\"pagi\">\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2017/02/mads-analytics-data-science-leaders-san-francisco.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"> <strong>Previous post</strong></img></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2017/02/top-5-kpis-measuring-campaign.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/>\u00a0<br/>\u00a0\n    <span class=\"http-likes\" style=\"float: left; font-size:14px\">http likes 398</span> <div class=\"addthis_native_toolbox\"></div>\n</div>\n<div class=\"tag-data\">Tags: <a href=\"https://www.kdnuggets.com/tag/classification\" rel=\"tag\">Classification</a>, <a href=\"https://www.kdnuggets.com/tag/machine-learning\" rel=\"tag\">Machine Learning</a>, <a href=\"https://www.kdnuggets.com/tag/perceptron\" rel=\"tag\">Perceptron</a>, <a href=\"https://www.kdnuggets.com/tag/python\" rel=\"tag\">Python</a>, <a href=\"https://www.kdnuggets.com/tag/sebastian-raschka\" rel=\"tag\">Sebastian Raschka</a></div>\n<br/>\n<p class=\"excerpt\">\n     In this post, the author implements a machine learning algorithm from scratch, without the use of a library such as scikit-learn, and instead writes all of the code in order to have a working binary classifier algorithm.\n  </p>\n</div>\n<div id=\"post-header-ad\">\n<script type=\"text/javascript\">kda_sid_write(1); kda_sid_n=2;</script>\n</div>\n<hr class=\"grey-line\"/><br/>\n<div class=\"post\" id=\"post-\">\n<p><b>By Jean-Nicholas Hould, <a href=\"http://JeanNicholasHould.com/?utm_source=kdnugget\" target=\"_blank\">JeanNicholasHould.com</a>.</b></p>\n<blockquote><p>\nThis post is part of the author's <a href=\"http://www.jeannicholashould.com/learning-machine-learning.html\" target=\"_blank\">Learning Machine Learning</a> series. It\u2019s based on Chapter 1 and 2 of <a href=\"https://www.amazon.com/gp/product/1783555130/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1783555130&amp;linkCode=as2&amp;tag=nickhould-20&amp;linkId=79334fab95b99f2021c47f06697c40c3\" target=\"_blank\">Python Machine Learning</a>.\n</p></blockquote>\n<p>Machine learning can be intimidating for a newcomer. The concept of a machine learning things alone is quite abstract. How does that work in practice?</p>\n<p>In order to demystify some of the magic behind machine learning algorithms, I decided to implement a simple machine learning algorithm from scratch. I will not be using a library such as <em>scikit-learn</em> which already has many algorithms implemented. Instead, I\u2019ll be writing all of the code in order to have a working binary classifier algorithm. The goal of this exercise is to understand its inner workings.</p>\n<h3>So, what the heck is a binary classifier?</h3>\n<p>\u00a0<br>\nA classifier is a machine-learning algorithm that determines the class of an input element based on a set of features. For example, a classifier could be used to predict the category of a beer based on its characteristics, it\u2019s \u201cfeatures\u201d. These features could include its alcohol content, aroma, appearance, etc. A machine learning classifier could potentially be used to predict that a beer with 8% alcohol content, 100 IBU and with strong aromas of oranges is an Indian Pale Ale.</br></p>\n<p>In machine learning, there are three main types of tasks: unsupervised learning, supervised learning and reinforcement learning. The classifier algorithm falls under the supervised learning category. Supervised learning means that we know the right answer beforehand. The desired outputs are known. In the case of the beer example, we could realistically have a dataset describing beers and their category. We could train the classifier algorithm to predict those categories based on the beers features.</p>\n<p>A binary classifier classifies elements in two groups. Zero or one. True or false. IPA or not.</p>\n<h3>Building a machine learning model</h3>\n<p>\u00a0<br>\nThere are four steps to build and use a machine learning model.</br></p>\n<ol>\n<li>Preprocessing\n<li>Learning\n<li>Evaluation\n<li>Prediction\n</li></li></li></li></ol>\n<p><center><img src=\"http://www.jeannicholashould.com/public/building_machine_learning_model.jpg\" width=\"75%\"/><br>\nSource: <a href=\"https://www.amazon.com/gp/product/1783555130/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1783555130&amp;linkCode=as2&amp;tag=nickhould-20&amp;linkId=79334fab95b99f2021c47f06697c40c3\" target=\"_blank\">Python Machine Learning</a> by Sebastian Raschka.</br></center></p>\n<h3>Preprocessing</h3>\n<p>\u00a0<br>\nThe preprocessing is the first step in building a machine learning model. At this step, you acquire and prepare the data for future usage. You clean up the data, tidy it and select the features you want to use from your data.</br></p>\n<p>The following tasks can be considered as part of the \u201cpreprocessing\u201d:</p>\n<ul>\n<li>Extract features from raw data\n<li>Clean and format the data\n<li>Remove superfluous features (or highly correlated features)\n<li>Reduce the number of features for performance\n<li>Standardize the range of feature data (also named <a href=\"https://en.wikipedia.org/wiki/Feature_scaling\" target=\"_blank\">Feature Scaling</a>)\n<li>Split your dataset randomly: training dataset and test dataset\n</li></li></li></li></li></li></ul>\n<h3>Learning or Training</h3>\n<p>\u00a0<br/>\nOnce you have your datasets ready to be used, the second step is to select an algorithm to perform your desired task. In our case, the algorithm we selected is a binary classifier called Perceptron. There are many algorithms designed to do different tasks. They each have their strengths and weaknesses.</p>\n<p>At this step, you can test a few algorithms, see how they perform and select the best performing one. There are a wide variety of metrics that can be used to measure the performance of a machine learning model. According to Raschka, \u201cone commonly used metric is classification accuracy, which is defined as the proportion of correctly classified instances\u201d. At this step, you will make adjustments to the parameters of your machine learning algorithm. These are named hyperparameters.</p>\n<p>In this post, we\u2019ll mainly focus on this part of the machine learning work flow. We\u2019ll deep dive in the algorithm inner workings. If you are interested in the other sections of the machine learning work flow, which you should be, I\u2019ll be linking to a great notebook at the end of this post.</p>\n<h3>Evaluation</h3>\n<p>\u00a0<br/>\nWhen the model has been \u201ctrained\u201d on the dataset it can be evaluated on new unseen data. The goal here is to measure the <a href=\"https://en.wikipedia.org/wiki/Generalization_error\" target=\"_blank\">generalization error</a>. This metric measures \u201chow accurately an algorithm is able to predict outcome values for previously unseen data\u201d. Once you are satisfied with the results, you can use your machine learning model to make predictions.</p>\n<h3>Introducing the Perceptron</h3>\n<p>\u00a0<br/>\nThe algorithm that we\u2019ll be re-implementing is a <a href=\"https://en.wikipedia.org/wiki/Perceptron\" target=\"_blank\">Perceptron</a> which is one of the very first machine learning algorithm.</p>\n<p>The Perceptron algorithm is simple but powerful. Given a training dataset, the algorithm automatically learns \u201cthe optimal weight coefficients that are then multiplied with the input features in order to make the decision of whether a neuron fires or not\u201d.</p>\n<p>But, how does the algorithm do that?</p>\n<h3>The Algorithm</h3>\n<p>\u00a0<br/>\nHere\u2019s the sequence of the algorithm:</p>\n<p>First, we initialize an array with the weights equal to zero. The array length is equal to the number of features plus one. This additional feature is the \u201cthreshold\u201d. It\u2019s important to note that in the case of the Perceptron algorithm, the features must be of numerical value.</p>\n<pre><code data-lang=\"python\">\r\n   self.w_ = np.zeros(1 + X.shape[1])\r\n</code></pre>\n<p>\u00a0<br/>\nSecondly, we start a loop equal to the number of iterations <code>n_iter</code>. This is an hyperparameter defined by the data scientist.</p>\n<pre><code data-lang=\"python\">\r\n   for _ in range(self.n_iter):\r\n</code></pre>\n<p>\u00a0<br/>\nThirdly, we start a loop on each training data point and it\u2019s target. The target is the desired output we want the algorithm to eventually predict. Since this is a binary classifier, the targets are either <code>-1</code> or <code>1</code>. They are of binary value.</p>\n<p>Based on the data point features, the algorithm will predict the category: <code>1</code> or <code>-1</code>. The prediction calculation is a matricial multiplication of the features with their appropriate weights. To this multiplication we add the value of the threshold. If the result is above 0, the predicted category is <code>1</code>. If the result is below 0, the predicted category is <code>-1</code>.</p>\n<p>At each iteration on a data point, if the prediction is not accurate, the algorithm will adjust the weights. During the first few iterations, the predictions are not likely to be accurate because the weights haven\u2019t been adjusted many times. They haven\u2019t had a chance to start converging. The adjustments are made proportionally to the difference between the target and the predicted value. This difference is then multiplied by the learning rate <code>eta</code>, an hyperparameter of value between zero and one set by the data scientist. The higher the <code>eta</code> is, the larger the correction on the weights will be. If the prediction is accurate, the algorithm won\u2019t adjust the weights.</p>\n<p><script src=\"https://gist.github.com/mmmayo13/64b76feb012039364fb68ab89237e5e1.js\"></script></p>\n<p>The Perceptron will converge only if the two classes are linearly separable. Simply said, if you are able to draw a straight line to entirely separate the two classes, the algorithm will converge. Else, the algorithm will keep iterating and will readjust weights until it reaches the maximum number of iterations <code>n_iter</code>.</p>\n<p><center><img src=\"http://www.jeannicholashould.com/public/linearly_separable.jpg\" width=\"70%\"/><br/>\nSource: <a href=\"https://www.amazon.com/gp/product/1783555130/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1783555130&amp;linkCode=as2&amp;tag=nickhould-20&amp;linkId=79334fab95b99f2021c47f06697c40c3\" target=\"_blank\">Python Machine Learning</a> by Sebastian Raschka.</center></p>\n<h3>Complete Code</h3>\n<p><center><script src=\"https://gist.github.com/mmmayo13/814786ecb8decb19fd1a440e3c8ef499.js\"></script>Source: <a href=\"https://www.amazon.com/gp/product/1783555130/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1783555130&amp;linkCode=as2&amp;tag=nickhould-20&amp;linkId=79334fab95b99f2021c47f06697c40c3\" target=\"_blank\">Python Machine Learning</a> by Sebastian Raschka.</center></p>\n<h3>Three Learnings</h3>\n<p>\u00a0</p>\n<h3>1. Learning Rate, Number of Iteration &amp; Convergence</h3>\n<p>\u00a0<br/>\nParameters such as <code>learning rate</code> and <code>number of iteration</code> can seem very abstract if you jump in straight to using an algorithm from a library like <code>scikit-learn</code>. It\u2019s hard to grasp what these really do. By implementing the algorithm, it\u2019s now clear for me what they represent in the context of the Perceptron.</p>\n<p><b>Learning Rate</b></p>\n<p>The learning rate is a ratio by which the weights are corrected when the prediction is not accurate. The value needs to be between zero and one. As you can see in the snippet below, the <code>fit</code> function will iterate on each observation, call the <code>predict</code> function and then adjust the weights based on the difference between the target and the predicted value and then multiplied by the learning rate.</p>\n<p>A higher learning rate means that the algorithm will adjust the weights more aggressively. At each iteration, the weights will be adjusted if the predicted value is inaccurate.</p>\n<p><script src=\"https://gist.github.com/mmmayo13/9f70d7280b22c5112a4631ec77f38381.js\"></script></p>\n<p><b>Number of iterations</b></p>\n<p>The number of iteration is the number of times the algorithm will run through the training dataset. If the number of iteration was set to one, the algorithm would loop through the dataset only once and update the weights one time for each data point. The resulting model would be more likely to be inaccurate than a model with a higher number of iteration. On large datasets, there is a cost to having a high number of iterations.</p>\n<p><script src=\"https://gist.github.com/mmmayo13/3c6e0fca5d4420ac9e7053f75490e219.js\"></script></p>\n<p>The <code>learning rate</code> and <code>number of iteration</code> go hands-in-hand. They need to be adjusted together. For example, if you have a very low <code>learning rate</code>, which means that the algorithm will adjust it\u2019s weight only marginally at each iteration, you will probably need a higher number of iteration.</p>\n<h3>2. Linear Algebra</h3>\n<p>\u00a0<br/>\nIt\u2019s critical to mention that the capabilities of the Perceptron algorithm are attributable to linear algebra. The whole algorithm can be described through linear algebra formulas. If you have never done linear algebra in college, the formulas will be cryptic. As usual, <a href=\"https://www.khanacademy.org/math/linear-algebra\" target=\"_blank\">Khan Academy</a> is a great place to start with if you want to get familiar with linear algebra. It\u2019s also a great place to get a refresher on the topic.</p>\n<p>For me, the main learning here is how fundamental linear algebra is to this machine learning algorithm.</p>\n<h3>3. Type Everything</h3>\n<p>\u00a0<br/>\nThis learning is actually a concept I re-learned while going through the code for this post. It\u2019s not specific to machine learning and it has nothing to do with the Perceptron.</p>\n<p>Back in 2012 when I was learning to code Ruby on Rails, a web application development framework, I realized that typing down all of the code examples from tutorials really helped me memorize and understand the concepts. I spent weeks writing code while following tutorials. No copy and paste. I typed all the code. This may sound stupid but it was extremely helpful to grasp the concepts. During the process, I inevitably made typos and spend some time figuring out what was broken. These moments were crucial because that\u2019s when you usually stop and think.</p>\n<p>If you are going through the Perceptron code, don\u2019t copy and paste the code from the <a href=\"https://github.com/rasbt/python-machine-learning-book/blob/master/code/ch02/ch02.ipynb\" target=\"_blank\">repository</a>. Type it down in your own Jupyter Notebook. Type everything. Don\u2019t read passively. Get involved, type it down and you\u2019ll assimilate the concepts faster.</p>\n<h3>Next Steps</h3>\n<p>\u00a0<br/>\nIn this post, my goal was to share my understanding of the algorithm and the learnings I\u2019ve made while reimplementing it. However, you can do much more than simply reimplementing the model. You can actually use it with real data in order to do some simple predictions. In Python Machine Learning, Raschka uses the Perceptron to <a href=\"https://github.com/rasbt/python-machine-learning-book/blob/master/code/ch02/ch02.ipynb\" target=\"_blank\">predict the class of Iris flower</a> based on a the sepal and petal length of the flower. With actual data, you can then evaluate the model and make predictions on unseen data.</p>\n<p><b>Bio: Jean-Nicholas Hould</b> is a <a href=\"http://jeannicholashould.com/?utm_source=kdnugget\" target=\"_blank\">Data Scientist from Montreal, Canada</a>. Author at JeanNicholasHould.com.</p>\n<p><a href=\"http://www.jeannicholashould.com/what-i-learned-implementing-a-classifier-from-scratch.html\" target=\"_blank\">Original</a>. Reposted with permission.</p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2017/02/web-scraping-dataset-curation-part-1.html\">Web Scraping for Dataset Curation, Part 1: Collecting Craft Beer Data</a>\n<li><a href=\"/2017/01/tidying-data-python.html\">Tidying Data in Python</a>\n<li><a href=\"/2016/08/central-limit-theorem-data-science.html\">Central Limit Theorem for Data Science</a>\n</li></li></li></ul>\n</div>\n<div class=\"page-link\"></div>\n<div class=\"pagi\">\n<hr class=\"grey-line\"/>\n<div class=\"pagi-left\">\n<a href=\"https://www.kdnuggets.com/2017/02/mads-analytics-data-science-leaders-san-francisco.html\" rel=\"prev\"><img height=\"10\" src=\"/images/prv.gif\" width=\"8\"/> <strong>Previous post</strong></a></div>\n<div class=\"pagi-right\">\n<a href=\"https://www.kdnuggets.com/2017/02/top-5-kpis-measuring-campaign.html\" rel=\"next\"><strong>Next post</strong> <img height=\"10\" src=\"/images/nxt.gif\" width=\"8\"/></a></div>\n<br/><br/>\n<div>\n<hr class=\"grey-line\"/><br/>\n<h2>Top Stories Past 30 Days</h2>\n<table align=\"center\" cellpadding=\"3\" cellspacing=\"10\" class=\"latn\" width=\"100%\">\n<tr>\n<td valign=\"top\" width=\"50%\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Popular</b></th></tr>\n<tr><td>\n<ol class=\"three_ol\"><li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-1-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-2-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n<li> <a href=\"/2018/05/simplilearn-9-must-have-skills-data-scientist.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-3-simplilearn');\"><b>9 Must-have skills you need to become a Data Scientist, updated</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-4-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/03/another-10-free-must-read-books-for-machine-learning-and-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-5-another-10-books');\"><b>Another 10 Free Must-Read Books for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-6-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/best-data-visualization-techniques.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-mp-7-best-data-viz');\"><b>Best Data Visualization Techniques for small and large data</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td> <td valign=\"top\">\n<table cellpadding=\"3\" cellspacing=\"2\">\n<tr><th><b>Most Shared</b></th></tr>\n<tr><td><ol class=\"three_ol\">\n<li> <a href=\"/2019/04/another-10-free-must-see-courses-machine-learning-data-science.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-1-another-10-courses');\"><b>Another 10 Free Must-See Courses for Machine Learning and Data Science</b></a>\n<li> <a href=\"/2019/04/top-10-coding-mistakes-data-scientists.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-2-mistakes');\"><b>Top 10 Coding Mistakes Made by Data Scientists</b></a>\n<li> <a href=\"/2019/03/r-vs-python-data-visualization.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-3-r-py-viz');\"><b>R vs Python for Data Visualization</b></a>\n<li> <a href=\"/2019/03/deep-learning-toolset-overview.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-4-dl-toolset');\"><b>The Deep Learning Toolset \u2014 An Overview</b></a>\n<li> <a href=\"/2019/04/data-visualization-python-matplotlib-seaborn.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-5-plt-sea-viz');\"><b>Data Visualization in Python: Matplotlib vs Seaborn</b></a>\n<li> <a href=\"/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-6-ts-intro');\"><b>An Introduction on Time Series Forecasting with Simple Neural Networks &amp; LSTM</b></a>\n<li> <a href=\"/2019/04/recognize-good-data-scientist-job-from-bad.html\" onclick=\"ga('send','pageview','/x/pbc/2019/04-23-ms-7-recognize');\"><b>How to Recognize a Good Data Scientist Job From a Bad One</b></a>\n</li></li></li></li></li></li></li></ol>\n</td></tr>\n</table>\n</td>\n</tr>\n</table>\n</div>\n</div>\n<!--#content end--></div>\n<div id=\"sidebar\">\n<div class=\"latn\">\n<h3><b><a href=\"/news/index.html\">Latest News</a></b></h3>\n<ul style=\"font-size:14px; margin-top:5px\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/datarobot-delivering-trusted-ai-microsoft.html\">Delivering Trusted AI with DataRobot and Microsoft</a><li> <a href=\"https://www.kdnuggets.com/2019/04/formulated-ai-data-production-landscape.html\">AI and the data production landscape</a><li> <a href=\"https://www.kdnuggets.com/2019/04/most-desired-skill-data-science.html\">The most desired skill in data science</a><li> <a href=\"https://www.kdnuggets.com/2019/04/projects-include-data-science-portfolio.html\">Projects to Include in a Data Science Portfolio</a><li> <a href=\"https://www.kdnuggets.com/2019/04/rework-meet-worlds-leading-ai-deep-learning-experts.html\">Meet the World\u2019s Leading AI &amp; Deep Learning ...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/problem-data-science-job-postings.html\">The problem with data science job postings</a></li></li></li></li></li></li></ul>\n</div>\n<div>\n<script type=\"text/javascript\">kda_sid_write(kda_sid_n);</script>\n</div>\n<br/><script src=\"/aps/sbm.js\" type=\"text/javascript\"></script>\n<div class=\"latn\" style=\"margin-top: 15px;\">\n<h3><b>More Recent Stories</b></h3>\n<ul class=\"next-posts\">\n<li> <a href=\"https://www.kdnuggets.com/2019/04/problem-data-science-job-postings.html\">The problem with data science job postings</a><li> <a href=\"https://www.kdnuggets.com/2019/04/graduating-gans-understanding-generative-adversarial-networks.html\">Graduating in GANs: Going From Understanding Generative Advers...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/datax-join-new-generation-ai-technologists.html\">Join the new generation of AI technologists</a><li> <a href=\"https://www.kdnuggets.com/2019/04/top-tweets-apr17-apr23.html\">Top tweets, Apr 17\u201323: The History of Artificial #NeuralN...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/activestate-top-10-python-use-cases.html\">Top 10 Python Use Cases</a><li> <a href=\"https://www.kdnuggets.com/2019/04/future-generative-adversarial-networks.html\">Generative Adversarial Networks \u2013 Key Milestones and Sta...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/attention-craving-rnn-building-transformer-networks.html\">Attention Craving RNNS: Building Up To Transformer Networks</a><li> <a href=\"https://www.kdnuggets.com/jobs/19/04-24-fors-marsh-group-lead-data-scientist.html\">Fors Marsh Group: Lead Data Scientist [Arlington, VA]</a><li> <a href=\"https://www.kdnuggets.com/2019/n16.html\">KDnuggets 19:n16, Apr 24: Data Visualization in Python with...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/paw-mega-paw-las-vegas-lower-rates-end-friday.html\">Lower Rates End Friday for Mega-PAW Vegas \u2013 the Largest Pred...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/top-news-week-0415-0421.html\">Top Stories, Apr 15-21: Data Visualization in Python: Matplotl...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/wharton-customer-analytics-initiative-conference.html\">Wharton Customer Analytics Initiative Annual Conference in Phi...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/machine-learning-graph-analytics.html\">Machine Learning and Deep Link Graph Analytics: A Powerful Com...</a><li> <a href=\"https://www.kdnuggets.com/2019/04/best-masters-data-science-analytics-online.html\">2019 Best Masters in Data Science and Analytics \u2013 Online</a><li> <a href=\"https://www.kdnuggets.com/2019/04/worth-studying-data-science-masters.html\">Was it Worth Studying a Data Science Masters?</a><li> <a href=\"https://www.kdnuggets.com/2019/04/approach-pre-trained-deep-learning-models-caution.html\">Approach pre-trained deep learning models with caution</a><li> <a href=\"https://www.kdnuggets.com/2019/04/coursera-earn-deep-learning-certificate.html\">Earn a Deep Learning Certificate</a><li> <a href=\"https://www.kdnuggets.com/2019/04/octoparse-scrape-data-website.html\">Easy Way to Scrape Data from Website By Yourself</a><li> <a href=\"https://www.kdnuggets.com/2019/04/ai-environment.html\">AI Supporting The Earth</a><li> <a href=\"https://www.kdnuggets.com/2019/04/mueller-report-word-cloud-brief-tutorial-r.html\">The Mueller Report Word Cloud: A brief tutorial in R</a></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></ul>\n</div>\n</div><div class=\"breadcrumbs_bottom\">\n<div class=\"breadcumb\">\n<br>\n<a href=\"/\">KDnuggets Home</a> \u00bb <a href=\"/news/index.html\">News</a> \u00bb <a href=\"/2017/index.html\">2017</a> \u00bb <a href=\"https://www.kdnuggets.com/2017/02/index.html\">Feb</a> \u00bb <a href=\"https://www.kdnuggets.com/2017/02/tutorials.html\">Tutorials, Overviews</a> \u00bb What I Learned Implementing a Classifier from Scratch in Python (\u00a0<a href=\"/2017/n08.html\">17:n08</a>\u00a0)    </br></div>\n</div>\n<!--#content_wrapper end--></div>\n<br>\n<div id=\"footer\">\n<br/>\u00a9 2019 KDnuggets. <a href=\"/about/index.html\">About KDnuggets</a>. \u00a0<a href=\"/news/privacy-policy.html\">Privacy policy</a>. <a href=\"/terms-of-service.html\">Terms of Service</a><br/>\u00a0\n<div class=\"kd_bottom\">\n<div class=\"footer-container\">\n<div class=\"footer-news\">\n<a href=\"/news/subscribe.html\" onclick=\"_gaq.push(['_trackPageview','/x/bot/sub']);\" target=\"_blank\"><b>Subscribe to KDnuggets News</b></a>\n</div>\n<div class=\"footer-sm\">\n<a href=\"https://twitter.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/twt']);\" target=\"_blank\"><img height=\"32\" src=\"/images/tw_c48.png\" width=\"32\"/></a>\n<a href=\"https://facebook.com/kdnuggets\" onclick=\"_gaq.push(['_trackPageview','/x/bot/fb']);\" target=\"_blank\"><img alt=\"Facebook\" height=\"32\" src=\"/images/fb_c48.png\" width=\"32\"/></a>\n<a href=\"https://www.linkedin.com/groups/54257\" onclick=\"_gaq.push(['_trackPageview','/x/bot/in']);\" target=\"_blank\"><img alt=\"LinkedIn\" height=\"32\" src=\"/images/in_c48.png\" width=\"32\"/></a>\n</div>\n</div>\n<div class=\"close-footer\">X</div>\n</div>\n<script type=\"text/javascript\">\n  jQuery('.close-footer').click(\n      function(){       \n         jQuery('.kd_bottom').hide();\n      }\n   );\n</script> </div>\n<div class=\"clear\"><!--blank--></div>\n</br></div>\n<div style=\"display: none;\"><div id=\"boxzilla-box-82996-content\"><script type=\"text/javascript\">(function() {\n\tif (!window.mc4wp) {\n\t\twindow.mc4wp = {\n\t\t\tlisteners: [],\n\t\t\tforms    : {\n\t\t\t\ton: function (event, callback) {\n\t\t\t\t\twindow.mc4wp.listeners.push({\n\t\t\t\t\t\tevent   : event,\n\t\t\t\t\t\tcallback: callback\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})();\n</script><!-- MailChimp for WordPress v4.1.14 - https://wordpress.org/plugins/mailchimp-for-wp/ --><form class=\"mc4wp-form mc4wp-form-77281\" data-id=\"77281\" data-name=\"Subscribe to KDnuggets News\" id=\"mc4wp-form-1\" method=\"post\"><div class=\"mc4wp-form-fields\"><div class=\"header-container\">\n<img align=\"left\" src=\"/wp-content/uploads/envelope.png\"><a href=\"/news/subscribe.html\">Get KDnuggets, a leading newsletter on AI, \r\n  Data Science, and Machine Learning</a>\n</img></div>\n<div class=\"form-fields\">\n<div class=\"field-container\"><label>Email:</label><input maxlength=\"60\" name=\"EMAIL\" placeholder=\"Your email\" required=\"\" size=\"30\" type=\"email\"/></div>\n<div class=\"field-container submit-container\"><div class=\"form-button\" onclick=\"document.getElementById('mc4wp-form-1').submit()\">Sign Up</div></div>\n</div>\n<label style=\"display: none !important;\">Leave this field empty if you're human: <input autocomplete=\"off\" name=\"_mc4wp_honeypot\" tabindex=\"-1\" type=\"text\" value=\"\"/></label><input name=\"_mc4wp_timestamp\" type=\"hidden\" value=\"1556335043\"/><input name=\"_mc4wp_form_id\" type=\"hidden\" value=\"77281\"/><input name=\"_mc4wp_form_element_id\" type=\"hidden\" value=\"mc4wp-form-1\"/></div><div class=\"mc4wp-response\"></div></form><!-- / MailChimp for WordPress Plugin -->\n</div></div><script type=\"text/javascript\">(function() {function addEventListener(element,event,handler) {\n\tif(element.addEventListener) {\n\t\telement.addEventListener(event,handler, false);\n\t} else if(element.attachEvent){\n\t\telement.attachEvent('on'+event,handler);\n\t}\n}function maybePrefixUrlField() {\n\tif(this.value.trim() !== '' && this.value.indexOf('http') !== 0) {\n\t\tthis.value = \"http://\" + this.value;\n\t}\n}\n\nvar urlFields = document.querySelectorAll('.mc4wp-form input[type=\"url\"]');\nif( urlFields && urlFields.length > 0 ) {\n\tfor( var j=0; j < urlFields.length; j++ ) {\n\t\taddEventListener(urlFields[j],'blur',maybePrefixUrlField);\n\t}\n}/* test if browser supports date fields */\nvar testInput = document.createElement('input');\ntestInput.setAttribute('type', 'date');\nif( testInput.type !== 'date') {\n\n\t/* add placeholder & pattern to all date fields */\n\tvar dateFields = document.querySelectorAll('.mc4wp-form input[type=\"date\"]');\n\tfor(var i=0; i<dateFields.length; i++) {\n\t\tif(!dateFields[i].placeholder) {\n\t\t\tdateFields[i].placeholder = 'YYYY-MM-DD';\n\t\t}\n\t\tif(!dateFields[i].pattern) {\n\t\t\tdateFields[i].pattern = '[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])';\n\t\t}\n\t}\n}\n\n})();</script><script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_options = {\"testMode\":\"\",\"boxes\":[{\"id\":82996,\"icon\":\"&times;\",\"content\":\"\",\"css\":{\"background_color\":\"#eeee22\",\"width\":600,\"border_width\":2,\"border_style\":\"double\",\"position\":\"center\"},\"trigger\":{\"method\":\"time_on_page\",\"value\":\"3\"},\"animation\":\"fade\",\"cookie\":{\"triggered\":0,\"dismissed\":336},\"rehide\":true,\"position\":\"center\",\"screenWidthCondition\":{\"condition\":\"larger\",\"value\":500},\"closable\":true,\"post\":{\"id\":82996,\"title\":\"Subscribe to KDnuggets\",\"slug\":\"subscribe-to-kdnuggets\"}}]};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla/assets/js/script.min.js?ver=3.2.5\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar boxzilla_stats_config = {\"ajaxurl\":\"https:\\/\\/www.kdnuggets.com\\/wp-admin\\/admin-ajax.php?action=boxzilla_stats_track\"};\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/boxzilla-stats/assets/js/tracking.min.js?ver=1.0.4\" type=\"text/javascript\"></script>\n<script src=\"https://www.kdnuggets.com/wp-includes/js/wp-embed.min.js?ver=4.9.10\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar mc4wp_forms_config = [];\n/* ]]> */\n</script>\n<script src=\"https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/forms-api.min.js?ver=4.1.14\" type=\"text/javascript\"></script>\n<!--[if lte IE 9]>\n<script type='text/javascript' src='https://www.kdnuggets.com/wp-content/plugins/mailchimp-for-wp/assets/js/third-party/placeholders.min.js?ver=4.1.14'></script>\n<![endif]-->\n<!--/.main_wrapper--></div>\n<script src=\"https://s7.addthis.com/js/300/addthis_widget.js#pubid=gpsaddthis\" type=\"text/javascript\"></script>\n</body>\n</html>\n<!-- Dynamic page generated in 0.704 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2019-04-26 23:17:23 -->\n<!-- Compression = gzip -->", "content_tokenized": ["jeannichola", "hould", "jeannicholashouldcom", "this", "post", "part", "the", "author", "learn", "machin", "learn", "seri", "base", "chapter", "num", "and", "num", "python", "machin", "learn", "machin", "learn", "can", "intimid", "for", "newcom", "the", "concept", "machin", "learn", "thing", "alon", "quit", "abstract", "how", "doe", "that", "work", "practic", "order", "demystifi", "some", "the", "magic", "behind", "machin", "learn", "algorithm", "decid", "implement", "simpl", "machin", "learn", "algorithm", "from", "scratch", "will", "not", "use", "librari", "such", "scikitlearn", "which", "alreadi", "has", "mani", "algorithm", "implement", "instead", "write", "all", "the", "code", "order", "have", "work", "binari", "classifi", "algorithm", "the", "goal", "this", "exercis", "understand", "inner", "work", "what", "the", "heck", "binari", "classifi", "classifi", "machinelearn", "algorithm", "that", "determin", "the", "class", "input", "element", "base", "set", "featur", "for", "exampl", "classifi", "could", "use", "predict", "the", "categori", "beer", "base", "characterist", "featur", "these", "featur", "could", "includ", "alcohol", "content", "aroma", "appear", "etc", "machin", "learn", "classifi", "could", "potenti", "use", "predict", "that", "beer", "with", "num", "alcohol", "content", "num", "and", "with", "strong", "aroma", "orang", "indian", "pale", "ale", "machin", "learn", "there", "are", "three", "main", "type", "task", "unsupervis", "learn", "supervis", "learn", "and", "reinforc", "learn", "the", "classifi", "algorithm", "fall", "under", "the", "supervis", "learn", "categori", "supervis", "learn", "mean", "that", "know", "the", "right", "answer", "beforehand", "the", "desir", "output", "are", "known", "the", "case", "the", "beer", "exampl", "could", "realist", "have", "dataset", "describ", "beer", "and", "their", "categori", "could", "train", "the", "classifi", "algorithm", "predict", "those", "categori", "base", "the", "beer", "featur", "binari", "classifi", "classifi", "element", "two", "group", "zero", "one", "true", "fals", "not", "build", "machin", "learn", "model", "there", "are", "four", "step", "build", "and", "use", "machin", "learn", "model", "preprocess", "learn", "evalu", "predict", "sourc", "python", "machin", "learn", "sebastian", "raschka", "preprocess", "the", "preprocess", "the", "first", "step", "build", "machin", "learn", "model", "this", "step", "acquir", "and", "prepar", "the", "data", "for", "futur", "usag", "clean", "the", "data", "tidi", "and", "select", "the", "featur", "want", "use", "from", "data", "the", "follow", "task", "can", "consid", "part", "the", "preprocess", "extract", "featur", "from", "raw", "data", "clean", "and", "format", "the", "data", "remov", "superflu", "featur", "high", "correl", "featur", "reduc", "the", "number", "featur", "for", "perform", "standard", "the", "rang", "featur", "data", "also", "name", "featur", "scale", "split", "dataset", "random", "train", "dataset", "and", "test", "dataset", "learn", "train", "onc", "have", "dataset", "readi", "use", "the", "second", "step", "select", "algorithm", "perform", "desir", "task", "our", "case", "the", "algorithm", "select", "binari", "classifi", "call", "perceptron", "there", "are", "mani", "algorithm", "design", "differ", "task", "they", "each", "have", "their", "strength", "and", "weak", "this", "step", "can", "test", "few", "algorithm", "see", "how", "they", "perform", "and", "select", "the", "best", "perform", "one", "there", "are", "wide", "varieti", "metric", "that", "can", "use", "measur", "the", "perform", "machin", "learn", "model", "accord", "raschka", "one", "common", "use", "metric", "classif", "accuraci", "which", "defin", "the", "proport", "correct", "classifi", "instanc", "this", "step", "will", "make", "adjust", "the", "paramet", "machin", "learn", "algorithm", "these", "are", "name", "hyperparamet", "this", "post", "main", "focus", "this", "part", "the", "machin", "learn", "work", "flow", "deep", "dive", "the", "algorithm", "inner", "work", "are", "interest", "the", "other", "section", "the", "machin", "learn", "work", "flow", "which", "should", "link", "great", "notebook", "the", "end", "this", "post", "evalu", "when", "the", "model", "has", "been", "train", "the", "dataset", "can", "evalu", "new", "unseen", "data", "the", "goal", "here", "measur", "the", "general", "error", "this", "metric", "measur", "how", "accur", "algorithm", "abl", "predict", "outcom", "valu", "for", "previous", "unseen", "data", "onc", "are", "satisfi", "with", "the", "result", "can", "use", "machin", "learn", "model", "make", "predict", "introduc", "the", "perceptron", "the", "algorithm", "that", "reimplement", "perceptron", "which", "one", "the", "veri", "first", "machin", "learn", "algorithm", "the", "perceptron", "algorithm", "simpl", "but", "power", "given", "train", "dataset", "the", "algorithm", "automat", "learn", "the", "optim", "weight", "coeffici", "that", "are", "then", "multipli", "with", "the", "input", "featur", "order", "make", "the", "decis", "whether", "neuron", "fire", "not", "but", "how", "doe", "the", "algorithm", "that", "the", "algorithm", "here", "the", "sequenc", "the", "algorithm", "first", "initi", "array", "with", "the", "weight", "equal", "zero", "the", "array", "length", "equal", "the", "number", "featur", "plus", "one", "this", "addit", "featur", "the", "threshold", "import", "note", "that", "the", "case", "the", "perceptron", "algorithm", "the", "featur", "must", "numer", "valu", "selfw", "second", "start", "loop", "equal", "the", "number", "iter", "niter", "this", "hyperparamet", "defin", "the", "data", "scientist", "for", "third", "start", "loop", "each", "train", "data", "point", "and", "target", "the", "target", "the", "desir", "output", "want", "the", "algorithm", "eventu", "predict", "sinc", "this", "binari", "classifi", "the", "target", "are", "either", "num", "num", "they", "are", "binari", "valu", "base", "the", "data", "point", "featur", "the", "algorithm", "will", "predict", "the", "categori", "num", "num", "the", "predict", "calcul", "matrici", "multipl", "the", "featur", "with", "their", "appropri", "weight", "this", "multipl", "add", "the", "valu", "the", "threshold", "the", "result", "abov", "num", "the", "predict", "categori", "num", "the", "result", "below", "num", "the", "predict", "categori", "num", "each", "iter", "data", "point", "the", "predict", "not", "accur", "the", "algorithm", "will", "adjust", "the", "weight", "dure", "the", "first", "few", "iter", "the", "predict", "are", "not", "like", "accur", "becaus", "the", "weight", "haven", "been", "adjust", "mani", "time", "they", "haven", "had", "chanc", "start", "converg", "the", "adjust", "are", "made", "proport", "the", "differ", "between", "the", "target", "and", "the", "predict", "valu", "this", "differ", "then", "multipli", "the", "learn", "rate", "eta", "hyperparamet", "valu", "between", "zero", "and", "one", "set", "the", "data", "scientist", "the", "higher", "the", "eta", "the", "larger", "the", "correct", "the", "weight", "will", "the", "predict", "accur", "the", "algorithm", "won", "adjust", "the", "weight", "the", "perceptron", "will", "converg", "onli", "the", "two", "class", "are", "linear", "separ", "simpli", "said", "are", "abl", "draw", "straight", "line", "entir", "separ", "the", "two", "class", "the", "algorithm", "will", "converg", "els", "the", "algorithm", "will", "keep", "iter", "and", "will", "readjust", "weight", "until", "reach", "the", "maximum", "number", "iter", "niter", "sourc", "python", "machin", "learn", "sebastian", "raschka", "complet", "code", "sourc", "python", "machin", "learn", "sebastian", "raschka", "three", "learn", "num", "learn", "rate", "number", "iter", "converg", "paramet", "such", "learn", "rate", "and", "number", "iter", "can", "seem", "veri", "abstract", "jump", "straight", "use", "algorithm", "from", "librari", "like", "scikitlearn", "hard", "grasp", "what", "these", "realli", "implement", "the", "algorithm", "now", "clear", "for", "what", "they", "repres", "the", "context", "the", "perceptron", "learn", "rate", "the", "learn", "rate", "ratio", "which", "the", "weight", "are", "correct", "when", "the", "predict", "not", "accur", "the", "valu", "need", "between", "zero", "and", "one", "can", "see", "the", "snippet", "below", "the", "fit", "function", "will", "iter", "each", "observ", "call", "the", "predict", "function", "and", "then", "adjust", "the", "weight", "base", "the", "differ", "between", "the", "target", "and", "the", "predict", "valu", "and", "then", "multipli", "the", "learn", "rate", "higher", "learn", "rate", "mean", "that", "the", "algorithm", "will", "adjust", "the", "weight", "more", "aggress", "each", "iter", "the", "weight", "will", "adjust", "the", "predict", "valu", "inaccur", "number", "iter", "the", "number", "iter", "the", "number", "time", "the", "algorithm", "will", "run", "through", "the", "train", "dataset", "the", "number", "iter", "set", "one", "the", "algorithm", "would", "loop", "through", "the", "dataset", "onli", "onc", "and", "updat", "the", "weight", "one", "time", "for", "each", "data", "point", "the", "result", "model", "would", "more", "like", "inaccur", "than", "model", "with", "higher", "number", "iter", "larg", "dataset", "there", "cost", "have", "high", "number", "iter", "the", "learn", "rate", "and", "number", "iter", "handsinhand", "they", "need", "adjust", "togeth", "for", "exampl", "have", "veri", "low", "learn", "rate", "which", "mean", "that", "the", "algorithm", "will", "adjust", "weight", "onli", "margin", "each", "iter", "will", "probabl", "need", "higher", "number", "iter", "num", "linear", "algebra", "critic", "mention", "that", "the", "capabl", "the", "perceptron", "algorithm", "are", "attribut", "linear", "algebra", "the", "whole", "algorithm", "can", "describ", "through", "linear", "algebra", "formula", "have", "never", "done", "linear", "algebra", "colleg", "the", "formula", "will", "cryptic", "usual", "khan", "academi", "great", "place", "start", "with", "want", "get", "familiar", "with", "linear", "algebra", "also", "great", "place", "get", "refresh", "the", "topic", "for", "the", "main", "learn", "here", "how", "fundament", "linear", "algebra", "this", "machin", "learn", "algorithm", "num", "type", "everyth", "this", "learn", "actual", "concept", "relearn", "while", "through", "the", "code", "for", "this", "post", "not", "specif", "machin", "learn", "and", "has", "noth", "with", "the", "perceptron", "back", "num", "when", "learn", "code", "rubi", "rail", "web", "applic", "develop", "framework", "realiz", "that", "type", "down", "all", "the", "code", "exampl", "from", "tutori", "realli", "help", "memor", "and", "understand", "the", "concept", "spent", "week", "write", "code", "while", "follow", "tutori", "copi", "and", "past", "type", "all", "the", "code", "this", "may", "sound", "stupid", "but", "extrem", "help", "grasp", "the", "concept", "dure", "the", "process", "inevit", "made", "typo", "and", "spend", "some", "time", "figur", "out", "what", "broken", "these", "moment", "were", "crucial", "becaus", "that", "when", "usual", "stop", "and", "think", "are", "through", "the", "perceptron", "code", "copi", "and", "past", "the", "code", "from", "the", "repositori", "type", "down", "own", "jupyt", "notebook", "type", "everyth", "read", "passiv", "get", "involv", "type", "down", "and", "assimil", "the", "concept", "faster", "next", "step", "this", "post", "goal", "share", "understand", "the", "algorithm", "and", "the", "learn", "made", "while", "reimplement", "howev", "can", "much", "more", "than", "simpli", "reimplement", "the", "model", "can", "actual", "use", "with", "real", "data", "order", "some", "simpl", "predict", "python", "machin", "learn", "raschka", "use", "the", "perceptron", "predict", "the", "class", "iri", "flower", "base", "the", "sepal", "and", "petal", "length", "the", "flower", "with", "actual", "data", "can", "then", "evalu", "the", "model", "and", "make", "predict", "unseen", "data", "bio", "jeannichola", "hould", "data", "scientist", "from", "montreal", "canada", "author", "jeannicholashouldcom", "origin", "repost", "with", "permiss", "relat", "web", "scrape", "for", "dataset", "curat", "part", "num", "collect", "craft", "beer", "data", "tidi", "data", "python", "central", "limit", "theorem", "for", "data", "scienc"], "timestamp_scraper": 1556377984.555948, "title": "What I Learned Implementing a Classifier from Scratch in Python", "read_time": 546.3, "content_html": "<div class=\"post\" id=\"post-\">\n<p><b>By Jean-Nicholas Hould, <a href=\"http://JeanNicholasHould.com/?utm_source=kdnugget\" target=\"_blank\">JeanNicholasHould.com</a>.</b></p>\n<blockquote><p>\nThis post is part of the author's <a href=\"http://www.jeannicholashould.com/learning-machine-learning.html\" target=\"_blank\">Learning Machine Learning</a> series. It\u2019s based on Chapter 1 and 2 of <a href=\"https://www.amazon.com/gp/product/1783555130/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1783555130&amp;linkCode=as2&amp;tag=nickhould-20&amp;linkId=79334fab95b99f2021c47f06697c40c3\" target=\"_blank\">Python Machine Learning</a>.\n</p></blockquote>\n<p>Machine learning can be intimidating for a newcomer. The concept of a machine learning things alone is quite abstract. How does that work in practice?</p>\n<p>In order to demystify some of the magic behind machine learning algorithms, I decided to implement a simple machine learning algorithm from scratch. I will not be using a library such as <em>scikit-learn</em> which already has many algorithms implemented. Instead, I\u2019ll be writing all of the code in order to have a working binary classifier algorithm. The goal of this exercise is to understand its inner workings.</p>\n<h3>So, what the heck is a binary classifier?</h3>\n<p>\u00a0<br>\nA classifier is a machine-learning algorithm that determines the class of an input element based on a set of features. For example, a classifier could be used to predict the category of a beer based on its characteristics, it\u2019s \u201cfeatures\u201d. These features could include its alcohol content, aroma, appearance, etc. A machine learning classifier could potentially be used to predict that a beer with 8% alcohol content, 100 IBU and with strong aromas of oranges is an Indian Pale Ale.</br></p>\n<p>In machine learning, there are three main types of tasks: unsupervised learning, supervised learning and reinforcement learning. The classifier algorithm falls under the supervised learning category. Supervised learning means that we know the right answer beforehand. The desired outputs are known. In the case of the beer example, we could realistically have a dataset describing beers and their category. We could train the classifier algorithm to predict those categories based on the beers features.</p>\n<p>A binary classifier classifies elements in two groups. Zero or one. True or false. IPA or not.</p>\n<h3>Building a machine learning model</h3>\n<p>\u00a0<br>\nThere are four steps to build and use a machine learning model.</br></p>\n<ol>\n<li>Preprocessing\n<li>Learning\n<li>Evaluation\n<li>Prediction\n</li></li></li></li></ol>\n<p><center><img src=\"http://www.jeannicholashould.com/public/building_machine_learning_model.jpg\" width=\"75%\"/><br>\nSource: <a href=\"https://www.amazon.com/gp/product/1783555130/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1783555130&amp;linkCode=as2&amp;tag=nickhould-20&amp;linkId=79334fab95b99f2021c47f06697c40c3\" target=\"_blank\">Python Machine Learning</a> by Sebastian Raschka.</br></center></p>\n<h3>Preprocessing</h3>\n<p>\u00a0<br>\nThe preprocessing is the first step in building a machine learning model. At this step, you acquire and prepare the data for future usage. You clean up the data, tidy it and select the features you want to use from your data.</br></p>\n<p>The following tasks can be considered as part of the \u201cpreprocessing\u201d:</p>\n<ul>\n<li>Extract features from raw data\n<li>Clean and format the data\n<li>Remove superfluous features (or highly correlated features)\n<li>Reduce the number of features for performance\n<li>Standardize the range of feature data (also named <a href=\"https://en.wikipedia.org/wiki/Feature_scaling\" target=\"_blank\">Feature Scaling</a>)\n<li>Split your dataset randomly: training dataset and test dataset\n</li></li></li></li></li></li></ul>\n<h3>Learning or Training</h3>\n<p>\u00a0<br/>\nOnce you have your datasets ready to be used, the second step is to select an algorithm to perform your desired task. In our case, the algorithm we selected is a binary classifier called Perceptron. There are many algorithms designed to do different tasks. They each have their strengths and weaknesses.</p>\n<p>At this step, you can test a few algorithms, see how they perform and select the best performing one. There are a wide variety of metrics that can be used to measure the performance of a machine learning model. According to Raschka, \u201cone commonly used metric is classification accuracy, which is defined as the proportion of correctly classified instances\u201d. At this step, you will make adjustments to the parameters of your machine learning algorithm. These are named hyperparameters.</p>\n<p>In this post, we\u2019ll mainly focus on this part of the machine learning work flow. We\u2019ll deep dive in the algorithm inner workings. If you are interested in the other sections of the machine learning work flow, which you should be, I\u2019ll be linking to a great notebook at the end of this post.</p>\n<h3>Evaluation</h3>\n<p>\u00a0<br/>\nWhen the model has been \u201ctrained\u201d on the dataset it can be evaluated on new unseen data. The goal here is to measure the <a href=\"https://en.wikipedia.org/wiki/Generalization_error\" target=\"_blank\">generalization error</a>. This metric measures \u201chow accurately an algorithm is able to predict outcome values for previously unseen data\u201d. Once you are satisfied with the results, you can use your machine learning model to make predictions.</p>\n<h3>Introducing the Perceptron</h3>\n<p>\u00a0<br/>\nThe algorithm that we\u2019ll be re-implementing is a <a href=\"https://en.wikipedia.org/wiki/Perceptron\" target=\"_blank\">Perceptron</a> which is one of the very first machine learning algorithm.</p>\n<p>The Perceptron algorithm is simple but powerful. Given a training dataset, the algorithm automatically learns \u201cthe optimal weight coefficients that are then multiplied with the input features in order to make the decision of whether a neuron fires or not\u201d.</p>\n<p>But, how does the algorithm do that?</p>\n<h3>The Algorithm</h3>\n<p>\u00a0<br/>\nHere\u2019s the sequence of the algorithm:</p>\n<p>First, we initialize an array with the weights equal to zero. The array length is equal to the number of features plus one. This additional feature is the \u201cthreshold\u201d. It\u2019s important to note that in the case of the Perceptron algorithm, the features must be of numerical value.</p>\n<pre><code data-lang=\"python\">\r\n   self.w_ = np.zeros(1 + X.shape[1])\r\n</code></pre>\n<p>\u00a0<br/>\nSecondly, we start a loop equal to the number of iterations <code>n_iter</code>. This is an hyperparameter defined by the data scientist.</p>\n<pre><code data-lang=\"python\">\r\n   for _ in range(self.n_iter):\r\n</code></pre>\n<p>\u00a0<br/>\nThirdly, we start a loop on each training data point and it\u2019s target. The target is the desired output we want the algorithm to eventually predict. Since this is a binary classifier, the targets are either <code>-1</code> or <code>1</code>. They are of binary value.</p>\n<p>Based on the data point features, the algorithm will predict the category: <code>1</code> or <code>-1</code>. The prediction calculation is a matricial multiplication of the features with their appropriate weights. To this multiplication we add the value of the threshold. If the result is above 0, the predicted category is <code>1</code>. If the result is below 0, the predicted category is <code>-1</code>.</p>\n<p>At each iteration on a data point, if the prediction is not accurate, the algorithm will adjust the weights. During the first few iterations, the predictions are not likely to be accurate because the weights haven\u2019t been adjusted many times. They haven\u2019t had a chance to start converging. The adjustments are made proportionally to the difference between the target and the predicted value. This difference is then multiplied by the learning rate <code>eta</code>, an hyperparameter of value between zero and one set by the data scientist. The higher the <code>eta</code> is, the larger the correction on the weights will be. If the prediction is accurate, the algorithm won\u2019t adjust the weights.</p>\n<p><script src=\"https://gist.github.com/mmmayo13/64b76feb012039364fb68ab89237e5e1.js\"></script></p>\n<p>The Perceptron will converge only if the two classes are linearly separable. Simply said, if you are able to draw a straight line to entirely separate the two classes, the algorithm will converge. Else, the algorithm will keep iterating and will readjust weights until it reaches the maximum number of iterations <code>n_iter</code>.</p>\n<p><center><img src=\"http://www.jeannicholashould.com/public/linearly_separable.jpg\" width=\"70%\"/><br/>\nSource: <a href=\"https://www.amazon.com/gp/product/1783555130/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1783555130&amp;linkCode=as2&amp;tag=nickhould-20&amp;linkId=79334fab95b99f2021c47f06697c40c3\" target=\"_blank\">Python Machine Learning</a> by Sebastian Raschka.</center></p>\n<h3>Complete Code</h3>\n<p><center><script src=\"https://gist.github.com/mmmayo13/814786ecb8decb19fd1a440e3c8ef499.js\"></script>Source: <a href=\"https://www.amazon.com/gp/product/1783555130/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1783555130&amp;linkCode=as2&amp;tag=nickhould-20&amp;linkId=79334fab95b99f2021c47f06697c40c3\" target=\"_blank\">Python Machine Learning</a> by Sebastian Raschka.</center></p>\n<h3>Three Learnings</h3>\n<p>\u00a0</p>\n<h3>1. Learning Rate, Number of Iteration &amp; Convergence</h3>\n<p>\u00a0<br/>\nParameters such as <code>learning rate</code> and <code>number of iteration</code> can seem very abstract if you jump in straight to using an algorithm from a library like <code>scikit-learn</code>. It\u2019s hard to grasp what these really do. By implementing the algorithm, it\u2019s now clear for me what they represent in the context of the Perceptron.</p>\n<p><b>Learning Rate</b></p>\n<p>The learning rate is a ratio by which the weights are corrected when the prediction is not accurate. The value needs to be between zero and one. As you can see in the snippet below, the <code>fit</code> function will iterate on each observation, call the <code>predict</code> function and then adjust the weights based on the difference between the target and the predicted value and then multiplied by the learning rate.</p>\n<p>A higher learning rate means that the algorithm will adjust the weights more aggressively. At each iteration, the weights will be adjusted if the predicted value is inaccurate.</p>\n<p><script src=\"https://gist.github.com/mmmayo13/9f70d7280b22c5112a4631ec77f38381.js\"></script></p>\n<p><b>Number of iterations</b></p>\n<p>The number of iteration is the number of times the algorithm will run through the training dataset. If the number of iteration was set to one, the algorithm would loop through the dataset only once and update the weights one time for each data point. The resulting model would be more likely to be inaccurate than a model with a higher number of iteration. On large datasets, there is a cost to having a high number of iterations.</p>\n<p><script src=\"https://gist.github.com/mmmayo13/3c6e0fca5d4420ac9e7053f75490e219.js\"></script></p>\n<p>The <code>learning rate</code> and <code>number of iteration</code> go hands-in-hand. They need to be adjusted together. For example, if you have a very low <code>learning rate</code>, which means that the algorithm will adjust it\u2019s weight only marginally at each iteration, you will probably need a higher number of iteration.</p>\n<h3>2. Linear Algebra</h3>\n<p>\u00a0<br/>\nIt\u2019s critical to mention that the capabilities of the Perceptron algorithm are attributable to linear algebra. The whole algorithm can be described through linear algebra formulas. If you have never done linear algebra in college, the formulas will be cryptic. As usual, <a href=\"https://www.khanacademy.org/math/linear-algebra\" target=\"_blank\">Khan Academy</a> is a great place to start with if you want to get familiar with linear algebra. It\u2019s also a great place to get a refresher on the topic.</p>\n<p>For me, the main learning here is how fundamental linear algebra is to this machine learning algorithm.</p>\n<h3>3. Type Everything</h3>\n<p>\u00a0<br/>\nThis learning is actually a concept I re-learned while going through the code for this post. It\u2019s not specific to machine learning and it has nothing to do with the Perceptron.</p>\n<p>Back in 2012 when I was learning to code Ruby on Rails, a web application development framework, I realized that typing down all of the code examples from tutorials really helped me memorize and understand the concepts. I spent weeks writing code while following tutorials. No copy and paste. I typed all the code. This may sound stupid but it was extremely helpful to grasp the concepts. During the process, I inevitably made typos and spend some time figuring out what was broken. These moments were crucial because that\u2019s when you usually stop and think.</p>\n<p>If you are going through the Perceptron code, don\u2019t copy and paste the code from the <a href=\"https://github.com/rasbt/python-machine-learning-book/blob/master/code/ch02/ch02.ipynb\" target=\"_blank\">repository</a>. Type it down in your own Jupyter Notebook. Type everything. Don\u2019t read passively. Get involved, type it down and you\u2019ll assimilate the concepts faster.</p>\n<h3>Next Steps</h3>\n<p>\u00a0<br/>\nIn this post, my goal was to share my understanding of the algorithm and the learnings I\u2019ve made while reimplementing it. However, you can do much more than simply reimplementing the model. You can actually use it with real data in order to do some simple predictions. In Python Machine Learning, Raschka uses the Perceptron to <a href=\"https://github.com/rasbt/python-machine-learning-book/blob/master/code/ch02/ch02.ipynb\" target=\"_blank\">predict the class of Iris flower</a> based on a the sepal and petal length of the flower. With actual data, you can then evaluate the model and make predictions on unseen data.</p>\n<p><b>Bio: Jean-Nicholas Hould</b> is a <a href=\"http://jeannicholashould.com/?utm_source=kdnugget\" target=\"_blank\">Data Scientist from Montreal, Canada</a>. Author at JeanNicholasHould.com.</p>\n<p><a href=\"http://www.jeannicholashould.com/what-i-learned-implementing-a-classifier-from-scratch.html\" target=\"_blank\">Original</a>. Reposted with permission.</p>\n<p><b>Related:</b></p>\n<ul class=\"three_ul\">\n<li><a href=\"/2017/02/web-scraping-dataset-curation-part-1.html\">Web Scraping for Dataset Curation, Part 1: Collecting Craft Beer Data</a>\n<li><a href=\"/2017/01/tidying-data-python.html\">Tidying Data in Python</a>\n<li><a href=\"/2016/08/central-limit-theorem-data-science.html\">Central Limit Theorem for Data Science</a>\n</li></li></li></ul>\n</div> ", "website": "kdnuggets"}